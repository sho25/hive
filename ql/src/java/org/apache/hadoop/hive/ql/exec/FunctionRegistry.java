begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionUtils
operator|.
name|UDFClassType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|SettableUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDAFPercentile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFAcos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFAscii
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFAsin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFAtan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFBase64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFBin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFConv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFCos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFDayOfMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFDegrees
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFFindInSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFFromUnixTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFHex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFHour
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFJson
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLength
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLike
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLog10
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLog2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFMinute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPBitAnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPBitNot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPBitOr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPBitXor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFOPLongDivide
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFPI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFParseUrl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFRadians
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFRand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFRegExpExtract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFRegExpReplace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFRepeat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFReverse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFSecond
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFSign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFSin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFSqrt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFSubstr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFTan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFToBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFToByte
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFToFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFToInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFToLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFToShort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFToString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFUnbase64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFUnhex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFWeekOfYear
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFYear
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|ptf
operator|.
name|MatchPath
operator|.
name|MatchPathResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|ptf
operator|.
name|Noop
operator|.
name|NoopResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|ptf
operator|.
name|NoopWithMap
operator|.
name|NoopWithMapResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|ptf
operator|.
name|TableFunctionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|ptf
operator|.
name|WindowingTableFunction
operator|.
name|WindowingTableFunctionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|xml
operator|.
name|GenericUDFXPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|xml
operator|.
name|UDFXPathBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|xml
operator|.
name|UDFXPathDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|xml
operator|.
name|UDFXPathFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|xml
operator|.
name|UDFXPathInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|xml
operator|.
name|UDFXPathLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|xml
operator|.
name|UDFXPathShort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|xml
operator|.
name|UDFXPathString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|HiveDecimalUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_comment
comment|/**  * FunctionRegistry.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|FunctionRegistry
block|{
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FunctionRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * The mapping from expression function names to expression classes.    */
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|FunctionInfo
argument_list|>
name|mFunctions
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|FunctionInfo
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|static
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|nativeUdfs
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/*    * PTF variables    * */
specifier|public
specifier|static
specifier|final
name|String
name|LEAD_FUNC_NAME
init|=
literal|"lead"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LAG_FUNC_NAME
init|=
literal|"lag"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LAST_VALUE_FUNC_NAME
init|=
literal|"last_value"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WINDOWING_TABLE_FUNCTION
init|=
literal|"windowingtablefunction"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NOOP_TABLE_FUNCTION
init|=
literal|"noop"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NOOP_MAP_TABLE_FUNCTION
init|=
literal|"noopwithmap"
decl_stmt|;
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|WindowFunctionInfo
argument_list|>
name|windowFunctions
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|WindowFunctionInfo
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
static|static
block|{
name|registerGenericUDF
argument_list|(
literal|"concat"
argument_list|,
name|GenericUDFConcat
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"substr"
argument_list|,
name|UDFSubstr
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"substring"
argument_list|,
name|UDFSubstr
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"space"
argument_list|,
name|UDFSpace
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"repeat"
argument_list|,
name|UDFRepeat
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"ascii"
argument_list|,
name|UDFAscii
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"lpad"
argument_list|,
name|GenericUDFLpad
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"rpad"
argument_list|,
name|GenericUDFRpad
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"size"
argument_list|,
name|GenericUDFSize
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"round"
argument_list|,
name|GenericUDFRound
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"floor"
argument_list|,
name|GenericUDFFloor
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"sqrt"
argument_list|,
name|UDFSqrt
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"ceil"
argument_list|,
name|GenericUDFCeil
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"ceiling"
argument_list|,
name|GenericUDFCeil
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"rand"
argument_list|,
name|UDFRand
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"abs"
argument_list|,
name|GenericUDFAbs
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"pmod"
argument_list|,
name|GenericUDFPosMod
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"ln"
argument_list|,
name|UDFLn
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"log2"
argument_list|,
name|UDFLog2
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"sin"
argument_list|,
name|UDFSin
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"asin"
argument_list|,
name|UDFAsin
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"cos"
argument_list|,
name|UDFCos
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"acos"
argument_list|,
name|UDFAcos
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"log10"
argument_list|,
name|UDFLog10
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"log"
argument_list|,
name|UDFLog
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"exp"
argument_list|,
name|UDFExp
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"power"
argument_list|,
name|GenericUDFPower
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"pow"
argument_list|,
name|GenericUDFPower
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"sign"
argument_list|,
name|UDFSign
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"pi"
argument_list|,
name|UDFPI
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"degrees"
argument_list|,
name|UDFDegrees
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"radians"
argument_list|,
name|UDFRadians
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"atan"
argument_list|,
name|UDFAtan
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"tan"
argument_list|,
name|UDFTan
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"e"
argument_list|,
name|UDFE
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"conv"
argument_list|,
name|UDFConv
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"bin"
argument_list|,
name|UDFBin
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"hex"
argument_list|,
name|UDFHex
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"unhex"
argument_list|,
name|UDFUnhex
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"base64"
argument_list|,
name|UDFBase64
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"unbase64"
argument_list|,
name|UDFUnbase64
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"encode"
argument_list|,
name|GenericUDFEncode
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"decode"
argument_list|,
name|GenericUDFDecode
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"upper"
argument_list|,
name|GenericUDFUpper
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"lower"
argument_list|,
name|GenericUDFLower
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"ucase"
argument_list|,
name|GenericUDFUpper
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"lcase"
argument_list|,
name|GenericUDFLower
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"trim"
argument_list|,
name|GenericUDFTrim
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"ltrim"
argument_list|,
name|GenericUDFLTrim
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"rtrim"
argument_list|,
name|GenericUDFRTrim
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"length"
argument_list|,
name|UDFLength
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"reverse"
argument_list|,
name|UDFReverse
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"field"
argument_list|,
name|GenericUDFField
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"find_in_set"
argument_list|,
name|UDFFindInSet
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"like"
argument_list|,
name|UDFLike
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"rlike"
argument_list|,
name|UDFRegExp
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"regexp"
argument_list|,
name|UDFRegExp
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"regexp_replace"
argument_list|,
name|UDFRegExpReplace
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"regexp_extract"
argument_list|,
name|UDFRegExpExtract
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"parse_url"
argument_list|,
name|UDFParseUrl
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"nvl"
argument_list|,
name|GenericUDFNvl
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"split"
argument_list|,
name|GenericUDFSplit
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"str_to_map"
argument_list|,
name|GenericUDFStringToMap
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"translate"
argument_list|,
name|GenericUDFTranslate
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"positive"
argument_list|,
name|GenericUDFOPPositive
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"negative"
argument_list|,
name|GenericUDFOPNegative
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"day"
argument_list|,
name|UDFDayOfMonth
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"dayofmonth"
argument_list|,
name|UDFDayOfMonth
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"month"
argument_list|,
name|UDFMonth
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"year"
argument_list|,
name|UDFYear
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"hour"
argument_list|,
name|UDFHour
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"minute"
argument_list|,
name|UDFMinute
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"second"
argument_list|,
name|UDFSecond
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"from_unixtime"
argument_list|,
name|UDFFromUnixTime
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"to_date"
argument_list|,
name|GenericUDFDate
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"weekofyear"
argument_list|,
name|UDFWeekOfYear
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"date_add"
argument_list|,
name|GenericUDFDateAdd
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"date_sub"
argument_list|,
name|GenericUDFDateSub
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"datediff"
argument_list|,
name|GenericUDFDateDiff
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"get_json_object"
argument_list|,
name|UDFJson
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"xpath_string"
argument_list|,
name|UDFXPathString
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"xpath_boolean"
argument_list|,
name|UDFXPathBoolean
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"xpath_number"
argument_list|,
name|UDFXPathDouble
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"xpath_double"
argument_list|,
name|UDFXPathDouble
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"xpath_float"
argument_list|,
name|UDFXPathFloat
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"xpath_long"
argument_list|,
name|UDFXPathLong
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"xpath_int"
argument_list|,
name|UDFXPathInteger
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"xpath_short"
argument_list|,
name|UDFXPathShort
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"xpath"
argument_list|,
name|GenericUDFXPath
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"+"
argument_list|,
name|GenericUDFOPPlus
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"-"
argument_list|,
name|GenericUDFOPMinus
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"*"
argument_list|,
name|GenericUDFOPMultiply
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"/"
argument_list|,
name|GenericUDFOPDivide
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"%"
argument_list|,
name|GenericUDFOPMod
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"div"
argument_list|,
name|UDFOPLongDivide
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"&"
argument_list|,
name|UDFOPBitAnd
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"|"
argument_list|,
name|UDFOPBitOr
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"^"
argument_list|,
name|UDFOPBitXor
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
literal|"~"
argument_list|,
name|UDFOPBitNot
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"current_database"
argument_list|,
name|UDFCurrentDB
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"isnull"
argument_list|,
name|GenericUDFOPNull
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"isnotnull"
argument_list|,
name|GenericUDFOPNotNull
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"if"
argument_list|,
name|GenericUDFIf
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"in"
argument_list|,
name|GenericUDFIn
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"and"
argument_list|,
name|GenericUDFOPAnd
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"or"
argument_list|,
name|GenericUDFOPOr
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"="
argument_list|,
name|GenericUDFOPEqual
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"=="
argument_list|,
name|GenericUDFOPEqual
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"<=>"
argument_list|,
name|GenericUDFOPEqualNS
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"!="
argument_list|,
name|GenericUDFOPNotEqual
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"<>"
argument_list|,
name|GenericUDFOPNotEqual
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"<"
argument_list|,
name|GenericUDFOPLessThan
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"<="
argument_list|,
name|GenericUDFOPEqualOrLessThan
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|">"
argument_list|,
name|GenericUDFOPGreaterThan
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|">="
argument_list|,
name|GenericUDFOPEqualOrGreaterThan
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"not"
argument_list|,
name|GenericUDFOPNot
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"!"
argument_list|,
name|GenericUDFOPNot
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"between"
argument_list|,
name|GenericUDFBetween
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"ewah_bitmap_and"
argument_list|,
name|GenericUDFEWAHBitmapAnd
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"ewah_bitmap_or"
argument_list|,
name|GenericUDFEWAHBitmapOr
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"ewah_bitmap_empty"
argument_list|,
name|GenericUDFEWAHBitmapEmpty
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Aliases for Java Class Names
comment|// These are used in getImplicitConvertUDFMethod
name|registerUDF
argument_list|(
name|serdeConstants
operator|.
name|BOOLEAN_TYPE_NAME
argument_list|,
name|UDFToBoolean
operator|.
name|class
argument_list|,
literal|false
argument_list|,
name|UDFToBoolean
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
argument_list|,
name|UDFToByte
operator|.
name|class
argument_list|,
literal|false
argument_list|,
name|UDFToByte
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
argument_list|,
name|UDFToShort
operator|.
name|class
argument_list|,
literal|false
argument_list|,
name|UDFToShort
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
name|serdeConstants
operator|.
name|INT_TYPE_NAME
argument_list|,
name|UDFToInteger
operator|.
name|class
argument_list|,
literal|false
argument_list|,
name|UDFToInteger
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
name|serdeConstants
operator|.
name|BIGINT_TYPE_NAME
argument_list|,
name|UDFToLong
operator|.
name|class
argument_list|,
literal|false
argument_list|,
name|UDFToLong
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
name|serdeConstants
operator|.
name|FLOAT_TYPE_NAME
argument_list|,
name|UDFToFloat
operator|.
name|class
argument_list|,
literal|false
argument_list|,
name|UDFToFloat
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
name|serdeConstants
operator|.
name|DOUBLE_TYPE_NAME
argument_list|,
name|UDFToDouble
operator|.
name|class
argument_list|,
literal|false
argument_list|,
name|UDFToDouble
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|registerUDF
argument_list|(
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|,
name|UDFToString
operator|.
name|class
argument_list|,
literal|false
argument_list|,
name|UDFToString
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
name|serdeConstants
operator|.
name|DATE_TYPE_NAME
argument_list|,
name|GenericUDFToDate
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
name|serdeConstants
operator|.
name|TIMESTAMP_TYPE_NAME
argument_list|,
name|GenericUDFTimestamp
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
name|serdeConstants
operator|.
name|BINARY_TYPE_NAME
argument_list|,
name|GenericUDFToBinary
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
name|serdeConstants
operator|.
name|DECIMAL_TYPE_NAME
argument_list|,
name|GenericUDFToDecimal
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
name|serdeConstants
operator|.
name|VARCHAR_TYPE_NAME
argument_list|,
name|GenericUDFToVarchar
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
name|serdeConstants
operator|.
name|CHAR_TYPE_NAME
argument_list|,
name|GenericUDFToChar
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Aggregate functions
name|registerGenericUDAF
argument_list|(
literal|"max"
argument_list|,
operator|new
name|GenericUDAFMax
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"min"
argument_list|,
operator|new
name|GenericUDAFMin
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"sum"
argument_list|,
operator|new
name|GenericUDAFSum
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"count"
argument_list|,
operator|new
name|GenericUDAFCount
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"avg"
argument_list|,
operator|new
name|GenericUDAFAverage
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"std"
argument_list|,
operator|new
name|GenericUDAFStd
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"stddev"
argument_list|,
operator|new
name|GenericUDAFStd
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"stddev_pop"
argument_list|,
operator|new
name|GenericUDAFStd
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"stddev_samp"
argument_list|,
operator|new
name|GenericUDAFStdSample
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"variance"
argument_list|,
operator|new
name|GenericUDAFVariance
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"var_pop"
argument_list|,
operator|new
name|GenericUDAFVariance
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"var_samp"
argument_list|,
operator|new
name|GenericUDAFVarianceSample
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"covar_pop"
argument_list|,
operator|new
name|GenericUDAFCovariance
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"covar_samp"
argument_list|,
operator|new
name|GenericUDAFCovarianceSample
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"corr"
argument_list|,
operator|new
name|GenericUDAFCorrelation
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"histogram_numeric"
argument_list|,
operator|new
name|GenericUDAFHistogramNumeric
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"percentile_approx"
argument_list|,
operator|new
name|GenericUDAFPercentileApprox
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"collect_set"
argument_list|,
operator|new
name|GenericUDAFCollectSet
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"collect_list"
argument_list|,
operator|new
name|GenericUDAFCollectList
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"ngrams"
argument_list|,
operator|new
name|GenericUDAFnGrams
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"context_ngrams"
argument_list|,
operator|new
name|GenericUDAFContextNGrams
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"ewah_bitmap"
argument_list|,
operator|new
name|GenericUDAFEWAHBitmap
argument_list|()
argument_list|)
expr_stmt|;
name|registerGenericUDAF
argument_list|(
literal|"compute_stats"
argument_list|,
operator|new
name|GenericUDAFComputeStats
argument_list|()
argument_list|)
expr_stmt|;
name|registerUDAF
argument_list|(
literal|"percentile"
argument_list|,
name|UDAFPercentile
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Generic UDFs
name|registerGenericUDF
argument_list|(
literal|"reflect"
argument_list|,
name|GenericUDFReflect
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"reflect2"
argument_list|,
name|GenericUDFReflect2
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"java_method"
argument_list|,
name|GenericUDFReflect
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"array"
argument_list|,
name|GenericUDFArray
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"assert_true"
argument_list|,
name|GenericUDFAssertTrue
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"map"
argument_list|,
name|GenericUDFMap
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"struct"
argument_list|,
name|GenericUDFStruct
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"named_struct"
argument_list|,
name|GenericUDFNamedStruct
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"create_union"
argument_list|,
name|GenericUDFUnion
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"case"
argument_list|,
name|GenericUDFCase
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"when"
argument_list|,
name|GenericUDFWhen
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"hash"
argument_list|,
name|GenericUDFHash
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"coalesce"
argument_list|,
name|GenericUDFCoalesce
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"index"
argument_list|,
name|GenericUDFIndex
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"in_file"
argument_list|,
name|GenericUDFInFile
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"instr"
argument_list|,
name|GenericUDFInstr
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"locate"
argument_list|,
name|GenericUDFLocate
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"elt"
argument_list|,
name|GenericUDFElt
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"concat_ws"
argument_list|,
name|GenericUDFConcatWS
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"sort_array"
argument_list|,
name|GenericUDFSortArray
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"array_contains"
argument_list|,
name|GenericUDFArrayContains
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"sentences"
argument_list|,
name|GenericUDFSentences
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"map_keys"
argument_list|,
name|GenericUDFMapKeys
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"map_values"
argument_list|,
name|GenericUDFMapValues
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"format_number"
argument_list|,
name|GenericUDFFormatNumber
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"printf"
argument_list|,
name|GenericUDFPrintf
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"from_utc_timestamp"
argument_list|,
name|GenericUDFFromUtcTimestamp
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"to_utc_timestamp"
argument_list|,
name|GenericUDFToUtcTimestamp
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"unix_timestamp"
argument_list|,
name|GenericUDFUnixTimeStamp
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
literal|"to_unix_timestamp"
argument_list|,
name|GenericUDFToUnixTimeStamp
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Generic UDTF's
name|registerGenericUDTF
argument_list|(
literal|"explode"
argument_list|,
name|GenericUDTFExplode
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDTF
argument_list|(
literal|"inline"
argument_list|,
name|GenericUDTFInline
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDTF
argument_list|(
literal|"json_tuple"
argument_list|,
name|GenericUDTFJSONTuple
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDTF
argument_list|(
literal|"parse_url_tuple"
argument_list|,
name|GenericUDTFParseUrlTuple
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDTF
argument_list|(
literal|"posexplode"
argument_list|,
name|GenericUDTFPosExplode
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDTF
argument_list|(
literal|"stack"
argument_list|,
name|GenericUDTFStack
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//PTF declarations
name|registerGenericUDF
argument_list|(
name|LEAD_FUNC_NAME
argument_list|,
name|GenericUDFLead
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerGenericUDF
argument_list|(
name|LAG_FUNC_NAME
argument_list|,
name|GenericUDFLag
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerWindowFunction
argument_list|(
literal|"row_number"
argument_list|,
operator|new
name|GenericUDAFRowNumber
argument_list|()
argument_list|)
expr_stmt|;
name|registerWindowFunction
argument_list|(
literal|"rank"
argument_list|,
operator|new
name|GenericUDAFRank
argument_list|()
argument_list|)
expr_stmt|;
name|registerWindowFunction
argument_list|(
literal|"dense_rank"
argument_list|,
operator|new
name|GenericUDAFDenseRank
argument_list|()
argument_list|)
expr_stmt|;
name|registerWindowFunction
argument_list|(
literal|"percent_rank"
argument_list|,
operator|new
name|GenericUDAFPercentRank
argument_list|()
argument_list|)
expr_stmt|;
name|registerWindowFunction
argument_list|(
literal|"cume_dist"
argument_list|,
operator|new
name|GenericUDAFCumeDist
argument_list|()
argument_list|)
expr_stmt|;
name|registerWindowFunction
argument_list|(
literal|"ntile"
argument_list|,
operator|new
name|GenericUDAFNTile
argument_list|()
argument_list|)
expr_stmt|;
name|registerWindowFunction
argument_list|(
literal|"first_value"
argument_list|,
operator|new
name|GenericUDAFFirstValue
argument_list|()
argument_list|)
expr_stmt|;
name|registerWindowFunction
argument_list|(
literal|"last_value"
argument_list|,
operator|new
name|GenericUDAFLastValue
argument_list|()
argument_list|)
expr_stmt|;
name|registerWindowFunction
argument_list|(
name|LEAD_FUNC_NAME
argument_list|,
operator|new
name|GenericUDAFLead
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerWindowFunction
argument_list|(
name|LAG_FUNC_NAME
argument_list|,
operator|new
name|GenericUDAFLag
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerTableFunction
argument_list|(
name|NOOP_TABLE_FUNCTION
argument_list|,
name|NoopResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerTableFunction
argument_list|(
name|NOOP_MAP_TABLE_FUNCTION
argument_list|,
name|NoopWithMapResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerTableFunction
argument_list|(
name|WINDOWING_TABLE_FUNCTION
argument_list|,
name|WindowingTableFunctionResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerTableFunction
argument_list|(
literal|"matchpath"
argument_list|,
name|MatchPathResolver
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|registerTemporaryUDF
parameter_list|(
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|UDF
argument_list|>
name|UDFClass
parameter_list|,
name|boolean
name|isOperator
parameter_list|)
block|{
name|registerUDF
argument_list|(
literal|false
argument_list|,
name|functionName
argument_list|,
name|UDFClass
argument_list|,
name|isOperator
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|registerUDF
parameter_list|(
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|UDF
argument_list|>
name|UDFClass
parameter_list|,
name|boolean
name|isOperator
parameter_list|)
block|{
name|registerUDF
argument_list|(
literal|true
argument_list|,
name|functionName
argument_list|,
name|UDFClass
argument_list|,
name|isOperator
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|registerUDF
parameter_list|(
name|boolean
name|isNative
parameter_list|,
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|UDF
argument_list|>
name|UDFClass
parameter_list|,
name|boolean
name|isOperator
parameter_list|)
block|{
name|registerUDF
argument_list|(
name|isNative
argument_list|,
name|functionName
argument_list|,
name|UDFClass
argument_list|,
name|isOperator
argument_list|,
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|registerUDF
parameter_list|(
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|UDF
argument_list|>
name|UDFClass
parameter_list|,
name|boolean
name|isOperator
parameter_list|,
name|String
name|displayName
parameter_list|)
block|{
name|registerUDF
argument_list|(
literal|true
argument_list|,
name|functionName
argument_list|,
name|UDFClass
argument_list|,
name|isOperator
argument_list|,
name|displayName
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|registerUDF
parameter_list|(
name|boolean
name|isNative
parameter_list|,
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|UDF
argument_list|>
name|UDFClass
parameter_list|,
name|boolean
name|isOperator
parameter_list|,
name|String
name|displayName
parameter_list|)
block|{
if|if
condition|(
name|UDF
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|UDFClass
argument_list|)
condition|)
block|{
name|FunctionInfo
name|fI
init|=
operator|new
name|FunctionInfo
argument_list|(
name|isNative
argument_list|,
name|displayName
argument_list|,
operator|new
name|GenericUDFBridge
argument_list|(
name|displayName
argument_list|,
name|isOperator
argument_list|,
name|UDFClass
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|mFunctions
operator|.
name|put
argument_list|(
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fI
argument_list|)
expr_stmt|;
name|registerNativeStatus
argument_list|(
name|fI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Registering UDF Class "
operator|+
name|UDFClass
operator|+
literal|" which does not extend "
operator|+
name|UDF
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|registerTemporaryGenericUDF
parameter_list|(
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|GenericUDF
argument_list|>
name|genericUDFClass
parameter_list|)
block|{
name|registerGenericUDF
argument_list|(
literal|false
argument_list|,
name|functionName
argument_list|,
name|genericUDFClass
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|registerGenericUDF
parameter_list|(
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|GenericUDF
argument_list|>
name|genericUDFClass
parameter_list|)
block|{
name|registerGenericUDF
argument_list|(
literal|true
argument_list|,
name|functionName
argument_list|,
name|genericUDFClass
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|registerGenericUDF
parameter_list|(
name|boolean
name|isNative
parameter_list|,
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|GenericUDF
argument_list|>
name|genericUDFClass
parameter_list|)
block|{
if|if
condition|(
name|GenericUDF
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|genericUDFClass
argument_list|)
condition|)
block|{
name|FunctionInfo
name|fI
init|=
operator|new
name|FunctionInfo
argument_list|(
name|isNative
argument_list|,
name|functionName
argument_list|,
operator|(
name|GenericUDF
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|genericUDFClass
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|mFunctions
operator|.
name|put
argument_list|(
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fI
argument_list|)
expr_stmt|;
name|registerNativeStatus
argument_list|(
name|fI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Registering GenericUDF Class "
operator|+
name|genericUDFClass
operator|+
literal|" which does not extend "
operator|+
name|GenericUDF
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|registerTemporaryGenericUDTF
parameter_list|(
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|GenericUDTF
argument_list|>
name|genericUDTFClass
parameter_list|)
block|{
name|registerGenericUDTF
argument_list|(
literal|false
argument_list|,
name|functionName
argument_list|,
name|genericUDTFClass
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|registerGenericUDTF
parameter_list|(
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|GenericUDTF
argument_list|>
name|genericUDTFClass
parameter_list|)
block|{
name|registerGenericUDTF
argument_list|(
literal|true
argument_list|,
name|functionName
argument_list|,
name|genericUDTFClass
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|registerGenericUDTF
parameter_list|(
name|boolean
name|isNative
parameter_list|,
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|GenericUDTF
argument_list|>
name|genericUDTFClass
parameter_list|)
block|{
if|if
condition|(
name|GenericUDTF
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|genericUDTFClass
argument_list|)
condition|)
block|{
name|FunctionInfo
name|fI
init|=
operator|new
name|FunctionInfo
argument_list|(
name|isNative
argument_list|,
name|functionName
argument_list|,
operator|(
name|GenericUDTF
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|genericUDTFClass
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|mFunctions
operator|.
name|put
argument_list|(
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fI
argument_list|)
expr_stmt|;
name|registerNativeStatus
argument_list|(
name|fI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Registering GenericUDTF Class "
operator|+
name|genericUDTFClass
operator|+
literal|" which does not extend "
operator|+
name|GenericUDTF
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|FunctionInfo
name|getFunctionInfoFromMetastore
parameter_list|(
name|String
name|functionName
parameter_list|)
block|{
name|FunctionInfo
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|dbName
decl_stmt|;
name|String
name|fName
decl_stmt|;
if|if
condition|(
name|FunctionUtils
operator|.
name|isQualifiedFunctionName
argument_list|(
name|functionName
argument_list|)
condition|)
block|{
name|String
index|[]
name|parts
init|=
name|FunctionUtils
operator|.
name|splitQualifiedFunctionName
argument_list|(
name|functionName
argument_list|)
decl_stmt|;
name|dbName
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
name|fName
operator|=
name|parts
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
comment|// otherwise, qualify using current db
name|dbName
operator|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentDatabase
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|fName
operator|=
name|functionName
expr_stmt|;
block|}
comment|// Try looking up function in the metastore
name|HiveConf
name|conf
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|Function
name|func
init|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
operator|.
name|getFunction
argument_list|(
name|dbName
argument_list|,
name|fName
argument_list|)
decl_stmt|;
if|if
condition|(
name|func
operator|!=
literal|null
condition|)
block|{
comment|// Found UDF in metastore - now add it to the function registry
comment|// At this point we should add any relevant jars that would be needed for the UDf.
try|try
block|{
name|FunctionTask
operator|.
name|addFunctionResources
argument_list|(
name|func
operator|.
name|getResourceUris
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to load resources for "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|fName
operator|+
literal|":"
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|udfClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|func
operator|.
name|getClassName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|JavaUtils
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|registerTemporaryFunction
argument_list|(
name|functionName
argument_list|,
name|udfClass
argument_list|)
condition|)
block|{
name|ret
operator|=
name|mFunctions
operator|.
name|get
argument_list|(
name|functionName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
name|func
operator|.
name|getClassName
argument_list|()
operator|+
literal|" is not a valid UDF class and was not registered."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|MetaException
operator|)
operator|)
operator|&&
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NoSuchObjectException
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to lookup UDF in metastore: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// Lookup of UDf class failed
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to load UDF class: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|CommonFunctionInfo
parameter_list|>
name|T
name|getQualifiedFunctionInfo
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|mFunctions
parameter_list|,
name|String
name|functionName
parameter_list|)
block|{
name|T
name|functionInfo
init|=
name|mFunctions
operator|.
name|get
argument_list|(
name|functionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|functionInfo
operator|==
literal|null
condition|)
block|{
comment|// Try looking up in metastore.
name|FunctionInfo
name|fi
init|=
name|getFunctionInfoFromMetastore
argument_list|(
name|functionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|!=
literal|null
condition|)
block|{
comment|// metastore lookup resulted in function getting added to mFunctions, try again
name|functionInfo
operator|=
name|mFunctions
operator|.
name|get
argument_list|(
name|functionName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// HIVE-6672: In HiveServer2 the JARs for this UDF may have been loaded by a different thread,
comment|// and the current thread may not be able to resolve the UDF. Test for this condition
comment|// and if necessary load the JARs in this thread.
if|if
condition|(
name|functionInfo
operator|!=
literal|null
condition|)
block|{
name|loadFunctionResourcesIfNecessary
argument_list|(
name|functionName
argument_list|,
name|functionInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|functionInfo
return|;
block|}
specifier|private
specifier|static
name|void
name|checkFunctionClass
parameter_list|(
name|CommonFunctionInfo
name|cfi
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
comment|// This call will fail for non-generic UDFs using GenericUDFBridge
name|Class
argument_list|<
name|?
argument_list|>
name|udfClass
init|=
name|cfi
operator|.
name|getFunctionClass
argument_list|()
decl_stmt|;
comment|// Even if we have a reference to the class (which will be the case for GenericUDFs),
comment|// the classloader may not be able to resolve the class, which would mean reflection-based
comment|// methods would fail such as for plan deserialization. Make sure this works too.
name|Class
operator|.
name|forName
argument_list|(
name|udfClass
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|JavaUtils
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|loadFunctionResourcesIfNecessary
parameter_list|(
name|String
name|functionName
parameter_list|,
name|CommonFunctionInfo
name|cfi
parameter_list|)
block|{
try|try
block|{
comment|// Check if the necessary JARs have been loaded for this function.
name|checkFunctionClass
argument_list|(
name|cfi
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Unable to resolve the UDF with the classloader.
comment|// Look up the function in the metastore and load any resources.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Attempting to reload resources for "
operator|+
name|functionName
argument_list|)
expr_stmt|;
try|try
block|{
name|String
index|[]
name|parts
init|=
name|FunctionUtils
operator|.
name|getQualifiedFunctionNameParts
argument_list|(
name|functionName
argument_list|)
decl_stmt|;
name|HiveConf
name|conf
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|Function
name|func
init|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
operator|.
name|getFunction
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|func
operator|!=
literal|null
condition|)
block|{
name|FunctionTask
operator|.
name|addFunctionResources
argument_list|(
name|func
operator|.
name|getResourceUris
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check again now that we've loaded the resources in this thread.
name|checkFunctionClass
argument_list|(
name|cfi
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Couldn't find the function .. just rethrow the original error
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to reload resources for "
operator|+
name|functionName
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|err
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|CommonFunctionInfo
parameter_list|>
name|T
name|getFunctionInfo
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|mFunctions
parameter_list|,
name|String
name|functionName
parameter_list|)
block|{
name|functionName
operator|=
name|functionName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|T
name|functionInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|FunctionUtils
operator|.
name|isQualifiedFunctionName
argument_list|(
name|functionName
argument_list|)
condition|)
block|{
name|functionInfo
operator|=
name|getQualifiedFunctionInfo
argument_list|(
name|mFunctions
argument_list|,
name|functionName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// First try without qualifiers - would resolve builtin/temp functions.
comment|// Otherwise try qualifying with current db name.
name|functionInfo
operator|=
name|mFunctions
operator|.
name|get
argument_list|(
name|functionName
argument_list|)
expr_stmt|;
if|if
condition|(
name|functionInfo
operator|==
literal|null
operator|&&
operator|!
name|FunctionUtils
operator|.
name|isQualifiedFunctionName
argument_list|(
name|functionName
argument_list|)
condition|)
block|{
name|String
name|qualifiedName
init|=
name|FunctionUtils
operator|.
name|qualifyFunctionName
argument_list|(
name|functionName
argument_list|,
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentDatabase
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
name|functionInfo
operator|=
name|getQualifiedFunctionInfo
argument_list|(
name|mFunctions
argument_list|,
name|qualifiedName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|functionInfo
return|;
block|}
specifier|public
specifier|static
name|FunctionInfo
name|getFunctionInfo
parameter_list|(
name|String
name|functionName
parameter_list|)
block|{
return|return
name|getFunctionInfo
argument_list|(
name|mFunctions
argument_list|,
name|functionName
argument_list|)
return|;
block|}
comment|/**    * Returns a set of registered function names. This is used for the CLI    * command "SHOW FUNCTIONS;"    *    * @return set of strings contains function names    */
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getFunctionNames
parameter_list|()
block|{
return|return
name|getFunctionNames
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getFunctionNames
parameter_list|(
name|boolean
name|searchMetastore
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|functionNames
init|=
name|mFunctions
operator|.
name|keySet
argument_list|()
decl_stmt|;
if|if
condition|(
name|searchMetastore
condition|)
block|{
name|functionNames
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|functionNames
argument_list|)
expr_stmt|;
try|try
block|{
name|Hive
name|db
init|=
name|getHive
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dbNames
init|=
name|db
operator|.
name|getAllDatabases
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dbName
range|:
name|dbNames
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|funcNames
init|=
name|db
operator|.
name|getFunctions
argument_list|(
name|dbName
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|funcName
range|:
name|funcNames
control|)
block|{
name|functionNames
operator|.
name|add
argument_list|(
name|FunctionUtils
operator|.
name|qualifyFunctionName
argument_list|(
name|funcName
argument_list|,
name|dbName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|// Continue on, we can still return the functions we've gotten to this point.
block|}
block|}
return|return
name|functionNames
return|;
block|}
specifier|public
specifier|static
name|Hive
name|getHive
parameter_list|()
throws|throws
name|HiveException
block|{
return|return
name|Hive
operator|.
name|get
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a set of registered function names. This is used for the CLI    * command "SHOW FUNCTIONS 'regular expression';" Returns an empty set when    * the regular expression is not valid.    *    * @param funcPatternStr    *          regular expression of the interested function names    * @return set of strings contains function names    */
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getFunctionNames
parameter_list|(
name|String
name|funcPatternStr
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|funcNames
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Pattern
name|funcPattern
init|=
literal|null
decl_stmt|;
try|try
block|{
name|funcPattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|funcPatternStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
return|return
name|funcNames
return|;
block|}
for|for
control|(
name|String
name|funcName
range|:
name|mFunctions
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|funcPattern
operator|.
name|matcher
argument_list|(
name|funcName
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|funcNames
operator|.
name|add
argument_list|(
name|funcName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|funcNames
return|;
block|}
comment|/**    * Returns the set of synonyms of the supplied function.    *    * @param funcName    *          the name of the function    * @return Set of synonyms for funcName    */
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getFunctionSynonyms
parameter_list|(
name|String
name|funcName
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|synonyms
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|FunctionInfo
name|funcInfo
init|=
name|getFunctionInfo
argument_list|(
name|funcName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|funcInfo
condition|)
block|{
return|return
name|synonyms
return|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|funcClass
init|=
name|funcInfo
operator|.
name|getFunctionClass
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|mFunctions
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|funcName
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|mFunctions
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|getFunctionClass
argument_list|()
operator|.
name|equals
argument_list|(
name|funcClass
argument_list|)
condition|)
block|{
name|synonyms
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|synonyms
return|;
block|}
comment|// The ordering of types here is used to determine which numeric types
comment|// are common/convertible to one another. Probably better to rely on the
comment|// ordering explicitly defined here than to assume that the enum values
comment|// that were arbitrarily assigned in PrimitiveCategory work for our purposes.
specifier|static
name|EnumMap
argument_list|<
name|PrimitiveCategory
argument_list|,
name|Integer
argument_list|>
name|numericTypes
init|=
operator|new
name|EnumMap
argument_list|<
name|PrimitiveCategory
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|PrimitiveCategory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
name|List
argument_list|<
name|PrimitiveCategory
argument_list|>
name|numericTypeList
init|=
operator|new
name|ArrayList
argument_list|<
name|PrimitiveCategory
argument_list|>
argument_list|()
decl_stmt|;
specifier|static
name|void
name|registerNumericType
parameter_list|(
name|PrimitiveCategory
name|primitiveCategory
parameter_list|,
name|int
name|level
parameter_list|)
block|{
name|numericTypeList
operator|.
name|add
argument_list|(
name|primitiveCategory
argument_list|)
expr_stmt|;
name|numericTypes
operator|.
name|put
argument_list|(
name|primitiveCategory
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
static|static
block|{
name|registerNumericType
argument_list|(
name|PrimitiveCategory
operator|.
name|BYTE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|registerNumericType
argument_list|(
name|PrimitiveCategory
operator|.
name|SHORT
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|registerNumericType
argument_list|(
name|PrimitiveCategory
operator|.
name|INT
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|registerNumericType
argument_list|(
name|PrimitiveCategory
operator|.
name|LONG
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|registerNumericType
argument_list|(
name|PrimitiveCategory
operator|.
name|FLOAT
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|registerNumericType
argument_list|(
name|PrimitiveCategory
operator|.
name|DOUBLE
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|registerNumericType
argument_list|(
name|PrimitiveCategory
operator|.
name|DECIMAL
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|registerNumericType
argument_list|(
name|PrimitiveCategory
operator|.
name|STRING
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check if the given type is numeric. String is considered numeric when used in    * numeric operators.    *    * @param typeInfo    * @return    */
specifier|public
specifier|static
name|boolean
name|isNumericType
parameter_list|(
name|PrimitiveTypeInfo
name|typeInfo
parameter_list|)
block|{
switch|switch
condition|(
name|typeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|DECIMAL
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
case|case
name|STRING
case|:
comment|// String or string equivalent is considered numeric when used in arithmetic operator.
case|case
name|VARCHAR
case|:
case|case
name|CHAR
case|:
case|case
name|VOID
case|:
comment|// NULL is considered numeric type for arithmetic operators.
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Check if a type is exact (not approximate such as float and double). String is considered as    * double, thus not exact.    *    * @param typeInfo    * @return    */
specifier|public
specifier|static
name|boolean
name|isExactNumericType
parameter_list|(
name|PrimitiveTypeInfo
name|typeInfo
parameter_list|)
block|{
switch|switch
condition|(
name|typeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|DECIMAL
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
specifier|static
name|int
name|getCommonLength
parameter_list|(
name|int
name|aLen
parameter_list|,
name|int
name|bLen
parameter_list|)
block|{
name|int
name|maxLength
decl_stmt|;
if|if
condition|(
name|aLen
operator|<
literal|0
operator|||
name|bLen
operator|<
literal|0
condition|)
block|{
comment|// negative length should take precedence over positive value?
name|maxLength
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|maxLength
operator|=
name|Math
operator|.
name|max
argument_list|(
name|aLen
argument_list|,
name|bLen
argument_list|)
expr_stmt|;
block|}
return|return
name|maxLength
return|;
block|}
comment|/**    * Given 2 TypeInfo types and the PrimitiveCategory selected as the common class between the two,    * return a TypeInfo corresponding to the common PrimitiveCategory, and with type qualifiers    * (if applicable) that match the 2 TypeInfo types.    * Examples:    *   varchar(10), varchar(20), primitive category varchar => varchar(20)    *   date, string, primitive category string => string    * @param a  TypeInfo of the first type    * @param b  TypeInfo of the second type    * @param typeCategory PrimitiveCategory of the designated common type between a and b    * @return TypeInfo represented by the primitive category, with any applicable type qualifiers.    */
specifier|public
specifier|static
name|TypeInfo
name|getTypeInfoForPrimitiveCategory
parameter_list|(
name|PrimitiveTypeInfo
name|a
parameter_list|,
name|PrimitiveTypeInfo
name|b
parameter_list|,
name|PrimitiveCategory
name|typeCategory
parameter_list|)
block|{
comment|// For types with parameters (like varchar), we need to determine the type parameters
comment|// that should be added to this type, based on the original 2 TypeInfos.
name|int
name|maxLength
decl_stmt|;
switch|switch
condition|(
name|typeCategory
condition|)
block|{
case|case
name|CHAR
case|:
name|maxLength
operator|=
name|getCommonLength
argument_list|(
name|TypeInfoUtils
operator|.
name|getCharacterLengthForType
argument_list|(
name|a
argument_list|)
argument_list|,
name|TypeInfoUtils
operator|.
name|getCharacterLengthForType
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|TypeInfoFactory
operator|.
name|getCharTypeInfo
argument_list|(
name|maxLength
argument_list|)
return|;
case|case
name|VARCHAR
case|:
name|maxLength
operator|=
name|getCommonLength
argument_list|(
name|TypeInfoUtils
operator|.
name|getCharacterLengthForType
argument_list|(
name|a
argument_list|)
argument_list|,
name|TypeInfoUtils
operator|.
name|getCharacterLengthForType
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|TypeInfoFactory
operator|.
name|getVarcharTypeInfo
argument_list|(
name|maxLength
argument_list|)
return|;
case|case
name|DECIMAL
case|:
name|int
name|prec1
init|=
name|HiveDecimalUtils
operator|.
name|getPrecisionForType
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|int
name|prec2
init|=
name|HiveDecimalUtils
operator|.
name|getPrecisionForType
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|int
name|scale1
init|=
name|HiveDecimalUtils
operator|.
name|getScaleForType
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|int
name|scale2
init|=
name|HiveDecimalUtils
operator|.
name|getScaleForType
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|int
name|intPart
init|=
name|Math
operator|.
name|max
argument_list|(
name|prec1
operator|-
name|scale1
argument_list|,
name|prec2
operator|-
name|scale2
argument_list|)
decl_stmt|;
name|int
name|decPart
init|=
name|Math
operator|.
name|max
argument_list|(
name|scale1
argument_list|,
name|scale2
argument_list|)
decl_stmt|;
name|int
name|prec
init|=
name|Math
operator|.
name|min
argument_list|(
name|intPart
operator|+
name|decPart
argument_list|,
name|HiveDecimal
operator|.
name|MAX_PRECISION
argument_list|)
decl_stmt|;
name|int
name|scale
init|=
name|Math
operator|.
name|min
argument_list|(
name|decPart
argument_list|,
name|HiveDecimal
operator|.
name|MAX_PRECISION
operator|-
name|intPart
argument_list|)
decl_stmt|;
return|return
name|TypeInfoFactory
operator|.
name|getDecimalTypeInfo
argument_list|(
name|prec
argument_list|,
name|scale
argument_list|)
return|;
default|default:
comment|// Type doesn't require any qualifiers.
return|return
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|PrimitiveObjectInspectorUtils
operator|.
name|getTypeEntryFromPrimitiveCategory
argument_list|(
name|typeCategory
argument_list|)
operator|.
name|typeName
argument_list|)
return|;
block|}
block|}
comment|/**    * Find a common class for union-all operator    */
specifier|public
specifier|static
name|TypeInfo
name|getCommonClassForUnionAll
parameter_list|(
name|TypeInfo
name|a
parameter_list|,
name|TypeInfo
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
condition|)
block|{
return|return
name|a
return|;
block|}
if|if
condition|(
name|a
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|PRIMITIVE
operator|||
name|b
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
return|return
literal|null
return|;
block|}
name|PrimitiveCategory
name|pcA
init|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|a
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
name|PrimitiveCategory
name|pcB
init|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|b
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
if|if
condition|(
name|pcA
operator|==
name|pcB
condition|)
block|{
comment|// Same primitive category but different qualifiers.
return|return
name|getTypeInfoForPrimitiveCategory
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|a
argument_list|,
operator|(
name|PrimitiveTypeInfo
operator|)
name|b
argument_list|,
name|pcA
argument_list|)
return|;
block|}
name|PrimitiveGrouping
name|pgA
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
name|pcA
argument_list|)
decl_stmt|;
name|PrimitiveGrouping
name|pgB
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
name|pcB
argument_list|)
decl_stmt|;
comment|// handle string types properly
if|if
condition|(
name|pgA
operator|==
name|PrimitiveGrouping
operator|.
name|STRING_GROUP
operator|&&
name|pgB
operator|==
name|PrimitiveGrouping
operator|.
name|STRING_GROUP
condition|)
block|{
return|return
name|getTypeInfoForPrimitiveCategory
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|a
argument_list|,
operator|(
name|PrimitiveTypeInfo
operator|)
name|b
argument_list|,
name|PrimitiveCategory
operator|.
name|STRING
argument_list|)
return|;
block|}
if|if
condition|(
name|FunctionRegistry
operator|.
name|implicitConvertable
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
condition|)
block|{
return|return
name|getTypeInfoForPrimitiveCategory
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|a
argument_list|,
operator|(
name|PrimitiveTypeInfo
operator|)
name|b
argument_list|,
name|pcB
argument_list|)
return|;
block|}
if|if
condition|(
name|FunctionRegistry
operator|.
name|implicitConvertable
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
condition|)
block|{
return|return
name|getTypeInfoForPrimitiveCategory
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|a
argument_list|,
operator|(
name|PrimitiveTypeInfo
operator|)
name|b
argument_list|,
name|pcA
argument_list|)
return|;
block|}
for|for
control|(
name|PrimitiveCategory
name|t
range|:
name|numericTypeList
control|)
block|{
if|if
condition|(
name|FunctionRegistry
operator|.
name|implicitConvertable
argument_list|(
name|pcA
argument_list|,
name|t
argument_list|)
operator|&&
name|FunctionRegistry
operator|.
name|implicitConvertable
argument_list|(
name|pcB
argument_list|,
name|t
argument_list|)
condition|)
block|{
return|return
name|getTypeInfoForPrimitiveCategory
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|a
argument_list|,
operator|(
name|PrimitiveTypeInfo
operator|)
name|b
argument_list|,
name|t
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Find a common class that objects of both TypeInfo a and TypeInfo b can    * convert to. This is used for comparing objects of type a and type b.    *    * When we are comparing string and double, we will always convert both of    * them to double and then compare.    *    * @return null if no common class could be found.    */
specifier|public
specifier|static
name|TypeInfo
name|getCommonClassForComparison
parameter_list|(
name|TypeInfo
name|a
parameter_list|,
name|TypeInfo
name|b
parameter_list|)
block|{
comment|// If same return one of them
if|if
condition|(
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
condition|)
block|{
return|return
name|a
return|;
block|}
if|if
condition|(
name|a
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|PRIMITIVE
operator|||
name|b
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
return|return
literal|null
return|;
block|}
name|PrimitiveCategory
name|pcA
init|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|a
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
name|PrimitiveCategory
name|pcB
init|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|b
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
if|if
condition|(
name|pcA
operator|==
name|pcB
condition|)
block|{
comment|// Same primitive category but different qualifiers.
comment|// Rely on getTypeInfoForPrimitiveCategory() to sort out the type params.
return|return
name|getTypeInfoForPrimitiveCategory
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|a
argument_list|,
operator|(
name|PrimitiveTypeInfo
operator|)
name|b
argument_list|,
name|pcA
argument_list|)
return|;
block|}
name|PrimitiveGrouping
name|pgA
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
name|pcA
argument_list|)
decl_stmt|;
name|PrimitiveGrouping
name|pgB
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
name|pcB
argument_list|)
decl_stmt|;
comment|// handle string types properly
if|if
condition|(
name|pgA
operator|==
name|PrimitiveGrouping
operator|.
name|STRING_GROUP
operator|&&
name|pgB
operator|==
name|PrimitiveGrouping
operator|.
name|STRING_GROUP
condition|)
block|{
comment|// Compare as strings. Char comparison semantics may be different if/when implemented.
return|return
name|getTypeInfoForPrimitiveCategory
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|a
argument_list|,
operator|(
name|PrimitiveTypeInfo
operator|)
name|b
argument_list|,
name|PrimitiveCategory
operator|.
name|STRING
argument_list|)
return|;
block|}
for|for
control|(
name|PrimitiveCategory
name|t
range|:
name|numericTypeList
control|)
block|{
if|if
condition|(
name|FunctionRegistry
operator|.
name|implicitConvertable
argument_list|(
name|pcA
argument_list|,
name|t
argument_list|)
operator|&&
name|FunctionRegistry
operator|.
name|implicitConvertable
argument_list|(
name|pcB
argument_list|,
name|t
argument_list|)
condition|)
block|{
return|return
name|getTypeInfoForPrimitiveCategory
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|a
argument_list|,
operator|(
name|PrimitiveTypeInfo
operator|)
name|b
argument_list|,
name|t
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|PrimitiveCategory
name|getCommonCategory
parameter_list|(
name|TypeInfo
name|a
parameter_list|,
name|TypeInfo
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|PRIMITIVE
operator|||
name|b
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
return|return
literal|null
return|;
block|}
name|PrimitiveCategory
name|pcA
init|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|a
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
name|PrimitiveCategory
name|pcB
init|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|b
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
name|PrimitiveGrouping
name|pgA
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
name|pcA
argument_list|)
decl_stmt|;
name|PrimitiveGrouping
name|pgB
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
name|pcB
argument_list|)
decl_stmt|;
comment|// handle string types properly
if|if
condition|(
name|pgA
operator|==
name|PrimitiveGrouping
operator|.
name|STRING_GROUP
operator|&&
name|pgB
operator|==
name|PrimitiveGrouping
operator|.
name|STRING_GROUP
condition|)
block|{
return|return
name|PrimitiveCategory
operator|.
name|STRING
return|;
block|}
name|Integer
name|ai
init|=
name|numericTypes
operator|.
name|get
argument_list|(
name|pcA
argument_list|)
decl_stmt|;
name|Integer
name|bi
init|=
name|numericTypes
operator|.
name|get
argument_list|(
name|pcB
argument_list|)
decl_stmt|;
if|if
condition|(
name|ai
operator|==
literal|null
operator|||
name|bi
operator|==
literal|null
condition|)
block|{
comment|// If either is not a numeric type, return null.
return|return
literal|null
return|;
block|}
return|return
operator|(
name|ai
operator|>
name|bi
operator|)
condition|?
name|pcA
else|:
name|pcB
return|;
block|}
comment|/**    * Find a common class that objects of both TypeInfo a and TypeInfo b can    * convert to. This is used for places other than comparison.    *    * The common class of string and double is string.    *    * @return null if no common class could be found.    */
specifier|public
specifier|static
name|TypeInfo
name|getCommonClass
parameter_list|(
name|TypeInfo
name|a
parameter_list|,
name|TypeInfo
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
condition|)
block|{
return|return
name|a
return|;
block|}
name|PrimitiveCategory
name|commonCat
init|=
name|getCommonCategory
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|commonCat
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|getTypeInfoForPrimitiveCategory
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|a
argument_list|,
operator|(
name|PrimitiveTypeInfo
operator|)
name|b
argument_list|,
name|commonCat
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|implicitConvertable
parameter_list|(
name|PrimitiveCategory
name|from
parameter_list|,
name|PrimitiveCategory
name|to
parameter_list|)
block|{
if|if
condition|(
name|from
operator|==
name|to
condition|)
block|{
return|return
literal|true
return|;
block|}
name|PrimitiveGrouping
name|fromPg
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|PrimitiveGrouping
name|toPg
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
name|to
argument_list|)
decl_stmt|;
comment|// Allow implicit String to Double conversion
if|if
condition|(
name|fromPg
operator|==
name|PrimitiveGrouping
operator|.
name|STRING_GROUP
operator|&&
name|to
operator|==
name|PrimitiveCategory
operator|.
name|DOUBLE
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Allow implicit String to Decimal conversion
if|if
condition|(
name|fromPg
operator|==
name|PrimitiveGrouping
operator|.
name|STRING_GROUP
operator|&&
name|to
operator|==
name|PrimitiveCategory
operator|.
name|DECIMAL
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Void can be converted to any type
if|if
condition|(
name|from
operator|==
name|PrimitiveCategory
operator|.
name|VOID
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Allow implicit String to Date conversion
if|if
condition|(
name|fromPg
operator|==
name|PrimitiveGrouping
operator|.
name|DATE_GROUP
operator|&&
name|toPg
operator|==
name|PrimitiveGrouping
operator|.
name|STRING_GROUP
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Allow implicit Numeric to String conversion
if|if
condition|(
name|fromPg
operator|==
name|PrimitiveGrouping
operator|.
name|NUMERIC_GROUP
operator|&&
name|toPg
operator|==
name|PrimitiveGrouping
operator|.
name|STRING_GROUP
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Allow implicit String to varchar conversion, and vice versa
if|if
condition|(
name|fromPg
operator|==
name|PrimitiveGrouping
operator|.
name|STRING_GROUP
operator|&&
name|toPg
operator|==
name|PrimitiveGrouping
operator|.
name|STRING_GROUP
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Allow implicit conversion from Byte -> Integer -> Long -> Float -> Double
comment|// Decimal -> String
name|Integer
name|f
init|=
name|numericTypes
operator|.
name|get
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|Integer
name|t
init|=
name|numericTypes
operator|.
name|get
argument_list|(
name|to
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
operator|||
name|t
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|f
operator|.
name|intValue
argument_list|()
operator|>
name|t
operator|.
name|intValue
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Returns whether it is possible to implicitly convert an object of Class    * from to Class to.    */
specifier|public
specifier|static
name|boolean
name|implicitConvertable
parameter_list|(
name|TypeInfo
name|from
parameter_list|,
name|TypeInfo
name|to
parameter_list|)
block|{
if|if
condition|(
name|from
operator|.
name|equals
argument_list|(
name|to
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Reimplemented to use PrimitiveCategory rather than TypeInfo, because
comment|// 2 TypeInfos from the same qualified type (varchar, decimal) should still be
comment|// seen as equivalent.
if|if
condition|(
name|from
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|PRIMITIVE
operator|&&
name|to
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
return|return
name|implicitConvertable
argument_list|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|from
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|,
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|to
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Get the GenericUDAF evaluator for the name and argumentClasses.    *    * @param name    *          the name of the UDAF    * @param argumentOIs    * @param isDistinct    * @param isAllColumns    * @return The UDAF evaluator    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
specifier|static
name|GenericUDAFEvaluator
name|getGenericUDAFEvaluator
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|argumentOIs
parameter_list|,
name|boolean
name|isDistinct
parameter_list|,
name|boolean
name|isAllColumns
parameter_list|)
throws|throws
name|SemanticException
block|{
name|GenericUDAFResolver
name|udafResolver
init|=
name|getGenericUDAFResolver
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|udafResolver
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|GenericUDAFEvaluator
name|udafEvaluator
init|=
literal|null
decl_stmt|;
name|ObjectInspector
name|args
index|[]
init|=
operator|new
name|ObjectInspector
index|[
name|argumentOIs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
comment|// Can't use toArray here because Java is dumb when it comes to
comment|// generics + arrays.
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|argumentOIs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|ii
control|)
block|{
name|args
index|[
name|ii
index|]
operator|=
name|argumentOIs
operator|.
name|get
argument_list|(
name|ii
argument_list|)
expr_stmt|;
block|}
name|GenericUDAFParameterInfo
name|paramInfo
init|=
operator|new
name|SimpleGenericUDAFParameterInfo
argument_list|(
name|args
argument_list|,
name|isDistinct
argument_list|,
name|isAllColumns
argument_list|)
decl_stmt|;
if|if
condition|(
name|udafResolver
operator|instanceof
name|GenericUDAFResolver2
condition|)
block|{
name|udafEvaluator
operator|=
operator|(
operator|(
name|GenericUDAFResolver2
operator|)
name|udafResolver
operator|)
operator|.
name|getEvaluator
argument_list|(
name|paramInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|udafEvaluator
operator|=
name|udafResolver
operator|.
name|getEvaluator
argument_list|(
name|paramInfo
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|udafEvaluator
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
specifier|static
name|GenericUDAFEvaluator
name|getGenericWindowingEvaluator
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|argumentOIs
parameter_list|,
name|boolean
name|isDistinct
parameter_list|,
name|boolean
name|isAllColumns
parameter_list|)
throws|throws
name|SemanticException
block|{
name|WindowFunctionInfo
name|finfo
init|=
name|windowFunctions
operator|.
name|get
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|finfo
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|name
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|LEAD_FUNC_NAME
argument_list|)
operator|&&
operator|!
name|name
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|LAG_FUNC_NAME
argument_list|)
condition|)
block|{
return|return
name|getGenericUDAFEvaluator
argument_list|(
name|name
argument_list|,
name|argumentOIs
argument_list|,
name|isDistinct
argument_list|,
name|isAllColumns
argument_list|)
return|;
block|}
comment|// this must be lead/lag UDAF
name|ObjectInspector
name|args
index|[]
init|=
operator|new
name|ObjectInspector
index|[
name|argumentOIs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|GenericUDAFResolver
name|udafResolver
init|=
name|finfo
operator|.
name|getfInfo
argument_list|()
operator|.
name|getGenericUDAFResolver
argument_list|()
decl_stmt|;
name|GenericUDAFParameterInfo
name|paramInfo
init|=
operator|new
name|SimpleGenericUDAFParameterInfo
argument_list|(
name|argumentOIs
operator|.
name|toArray
argument_list|(
name|args
argument_list|)
argument_list|,
name|isDistinct
argument_list|,
name|isAllColumns
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|GenericUDAFResolver2
operator|)
name|udafResolver
operator|)
operator|.
name|getEvaluator
argument_list|(
name|paramInfo
argument_list|)
return|;
block|}
comment|/**    * This method is shared between UDFRegistry and UDAFRegistry. methodName will    * be "evaluate" for UDFRegistry, and "aggregate"/"evaluate"/"evaluatePartial"    * for UDAFRegistry.    * @throws UDFArgumentException    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Method
name|getMethodInternal
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|udfClass
parameter_list|,
name|String
name|methodName
parameter_list|,
name|boolean
name|exact
parameter_list|,
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|argumentClasses
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|List
argument_list|<
name|Method
argument_list|>
name|mlist
init|=
operator|new
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|udfClass
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
name|mlist
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|getMethodInternal
argument_list|(
name|udfClass
argument_list|,
name|mlist
argument_list|,
name|exact
argument_list|,
name|argumentClasses
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|registerTemporaryGenericUDAF
parameter_list|(
name|String
name|functionName
parameter_list|,
name|GenericUDAFResolver
name|genericUDAFResolver
parameter_list|)
block|{
name|registerGenericUDAF
argument_list|(
literal|false
argument_list|,
name|functionName
argument_list|,
name|genericUDAFResolver
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|registerGenericUDAF
parameter_list|(
name|String
name|functionName
parameter_list|,
name|GenericUDAFResolver
name|genericUDAFResolver
parameter_list|)
block|{
name|registerGenericUDAF
argument_list|(
literal|true
argument_list|,
name|functionName
argument_list|,
name|genericUDAFResolver
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|registerGenericUDAF
parameter_list|(
name|boolean
name|isNative
parameter_list|,
name|String
name|functionName
parameter_list|,
name|GenericUDAFResolver
name|genericUDAFResolver
parameter_list|)
block|{
name|FunctionInfo
name|fi
init|=
operator|new
name|FunctionInfo
argument_list|(
name|isNative
argument_list|,
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|genericUDAFResolver
argument_list|)
decl_stmt|;
name|mFunctions
operator|.
name|put
argument_list|(
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fi
argument_list|)
expr_stmt|;
comment|// All aggregate functions should also be usable as window functions
name|addFunctionInfoToWindowFunctions
argument_list|(
name|functionName
argument_list|,
name|fi
argument_list|)
expr_stmt|;
name|registerNativeStatus
argument_list|(
name|fi
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|registerTemporaryUDAF
parameter_list|(
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|UDAF
argument_list|>
name|udafClass
parameter_list|)
block|{
name|registerUDAF
argument_list|(
literal|false
argument_list|,
name|functionName
argument_list|,
name|udafClass
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|registerUDAF
parameter_list|(
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|UDAF
argument_list|>
name|udafClass
parameter_list|)
block|{
name|registerUDAF
argument_list|(
literal|true
argument_list|,
name|functionName
argument_list|,
name|udafClass
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|registerUDAF
parameter_list|(
name|boolean
name|isNative
parameter_list|,
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|UDAF
argument_list|>
name|udafClass
parameter_list|)
block|{
name|FunctionInfo
name|fi
init|=
operator|new
name|FunctionInfo
argument_list|(
name|isNative
argument_list|,
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
operator|new
name|GenericUDAFBridge
argument_list|(
operator|(
name|UDAF
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|udafClass
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|mFunctions
operator|.
name|put
argument_list|(
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fi
argument_list|)
expr_stmt|;
comment|// All aggregate functions should also be usable as window functions
name|addFunctionInfoToWindowFunctions
argument_list|(
name|functionName
argument_list|,
name|fi
argument_list|)
expr_stmt|;
name|registerNativeStatus
argument_list|(
name|fi
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|unregisterTemporaryUDF
parameter_list|(
name|String
name|functionName
parameter_list|)
throws|throws
name|HiveException
block|{
name|FunctionInfo
name|fi
init|=
name|mFunctions
operator|.
name|get
argument_list|(
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|fi
operator|.
name|isNative
argument_list|()
condition|)
block|{
name|mFunctions
operator|.
name|remove
argument_list|(
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Function "
operator|+
name|functionName
operator|+
literal|" is hive native, it can't be dropped"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
name|GenericUDAFResolver
name|getGenericUDAFResolver
parameter_list|(
name|String
name|functionName
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Looking up GenericUDAF: "
operator|+
name|functionName
argument_list|)
expr_stmt|;
block|}
name|FunctionInfo
name|finfo
init|=
name|getFunctionInfo
argument_list|(
name|functionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|finfo
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|GenericUDAFResolver
name|result
init|=
name|finfo
operator|.
name|getGenericUDAFResolver
argument_list|()
decl_stmt|;
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|Object
name|invoke
parameter_list|(
name|Method
name|m
parameter_list|,
name|Object
name|thisObject
parameter_list|,
name|Object
modifier|...
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|o
decl_stmt|;
try|try
block|{
name|o
operator|=
name|m
operator|.
name|invoke
argument_list|(
name|thisObject
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|thisObjectString
init|=
literal|""
operator|+
name|thisObject
operator|+
literal|" of class "
operator|+
operator|(
name|thisObject
operator|==
literal|null
condition|?
literal|"null"
else|:
name|thisObject
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|)
decl_stmt|;
name|StringBuilder
name|argumentString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|arguments
operator|==
literal|null
condition|)
block|{
name|argumentString
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|argumentString
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|argumentString
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|arguments
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|argumentString
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|argumentString
operator|.
name|append
argument_list|(
literal|""
operator|+
name|arguments
index|[
name|i
index|]
operator|+
literal|":"
operator|+
name|arguments
index|[
name|i
index|]
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|argumentString
operator|.
name|append
argument_list|(
literal|"} of size "
operator|+
name|arguments
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unable to execute method "
operator|+
name|m
operator|+
literal|" "
operator|+
literal|" on object "
operator|+
name|thisObjectString
operator|+
literal|" with arguments "
operator|+
name|argumentString
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|o
return|;
block|}
comment|/**    * Returns -1 if passed does not match accepted. Otherwise return the cost    * (usually 0 for no conversion and 1 for conversion).    */
specifier|public
specifier|static
name|int
name|matchCost
parameter_list|(
name|TypeInfo
name|argumentPassed
parameter_list|,
name|TypeInfo
name|argumentAccepted
parameter_list|,
name|boolean
name|exact
parameter_list|)
block|{
if|if
condition|(
name|argumentAccepted
operator|.
name|equals
argument_list|(
name|argumentPassed
argument_list|)
operator|||
name|TypeInfoUtils
operator|.
name|doPrimitiveCategoriesMatch
argument_list|(
name|argumentPassed
argument_list|,
name|argumentAccepted
argument_list|)
condition|)
block|{
comment|// matches
return|return
literal|0
return|;
block|}
if|if
condition|(
name|argumentPassed
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|voidTypeInfo
argument_list|)
condition|)
block|{
comment|// passing null matches everything
return|return
literal|0
return|;
block|}
if|if
condition|(
name|argumentPassed
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|LIST
argument_list|)
operator|&&
name|argumentAccepted
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|LIST
argument_list|)
condition|)
block|{
comment|// lists are compatible if and only-if the elements are compatible
name|TypeInfo
name|argumentPassedElement
init|=
operator|(
operator|(
name|ListTypeInfo
operator|)
name|argumentPassed
operator|)
operator|.
name|getListElementTypeInfo
argument_list|()
decl_stmt|;
name|TypeInfo
name|argumentAcceptedElement
init|=
operator|(
operator|(
name|ListTypeInfo
operator|)
name|argumentAccepted
operator|)
operator|.
name|getListElementTypeInfo
argument_list|()
decl_stmt|;
return|return
name|matchCost
argument_list|(
name|argumentPassedElement
argument_list|,
name|argumentAcceptedElement
argument_list|,
name|exact
argument_list|)
return|;
block|}
if|if
condition|(
name|argumentPassed
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|MAP
argument_list|)
operator|&&
name|argumentAccepted
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|MAP
argument_list|)
condition|)
block|{
comment|// lists are compatible if and only-if the elements are compatible
name|TypeInfo
name|argumentPassedKey
init|=
operator|(
operator|(
name|MapTypeInfo
operator|)
name|argumentPassed
operator|)
operator|.
name|getMapKeyTypeInfo
argument_list|()
decl_stmt|;
name|TypeInfo
name|argumentAcceptedKey
init|=
operator|(
operator|(
name|MapTypeInfo
operator|)
name|argumentAccepted
operator|)
operator|.
name|getMapKeyTypeInfo
argument_list|()
decl_stmt|;
name|TypeInfo
name|argumentPassedValue
init|=
operator|(
operator|(
name|MapTypeInfo
operator|)
name|argumentPassed
operator|)
operator|.
name|getMapValueTypeInfo
argument_list|()
decl_stmt|;
name|TypeInfo
name|argumentAcceptedValue
init|=
operator|(
operator|(
name|MapTypeInfo
operator|)
name|argumentAccepted
operator|)
operator|.
name|getMapValueTypeInfo
argument_list|()
decl_stmt|;
name|int
name|cost1
init|=
name|matchCost
argument_list|(
name|argumentPassedKey
argument_list|,
name|argumentAcceptedKey
argument_list|,
name|exact
argument_list|)
decl_stmt|;
name|int
name|cost2
init|=
name|matchCost
argument_list|(
name|argumentPassedValue
argument_list|,
name|argumentAcceptedValue
argument_list|,
name|exact
argument_list|)
decl_stmt|;
if|if
condition|(
name|cost1
operator|<
literal|0
operator|||
name|cost2
operator|<
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|Math
operator|.
name|max
argument_list|(
name|cost1
argument_list|,
name|cost2
argument_list|)
return|;
block|}
if|if
condition|(
name|argumentAccepted
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|unknownTypeInfo
argument_list|)
condition|)
block|{
comment|// accepting Object means accepting everything,
comment|// but there is a conversion cost.
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|exact
operator|&&
name|implicitConvertable
argument_list|(
name|argumentPassed
argument_list|,
name|argumentAccepted
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Given a set of candidate methods and list of argument types, try to    * select the best candidate based on how close the passed argument types are    * to the candidate argument types.    * For a varchar argument, we would prefer evaluate(string) over evaluate(double).    * @param udfMethods  list of candidate methods    * @param argumentsPassed list of argument types to match to the candidate methods    */
specifier|static
name|void
name|filterMethodsByTypeAffinity
parameter_list|(
name|List
argument_list|<
name|Method
argument_list|>
name|udfMethods
parameter_list|,
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|argumentsPassed
parameter_list|)
block|{
if|if
condition|(
name|udfMethods
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// Prefer methods with a closer signature based on the primitive grouping of each argument.
comment|// Score each method based on its similarity to the passed argument types.
name|int
name|currentScore
init|=
literal|0
decl_stmt|;
name|int
name|bestMatchScore
init|=
literal|0
decl_stmt|;
name|Method
name|bestMatch
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|udfMethods
control|)
block|{
name|currentScore
operator|=
literal|0
expr_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|argumentsAccepted
init|=
name|TypeInfoUtils
operator|.
name|getParameterTypeInfos
argument_list|(
name|m
argument_list|,
name|argumentsPassed
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|TypeInfo
argument_list|>
name|argsPassedIter
init|=
name|argumentsPassed
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|TypeInfo
name|acceptedType
range|:
name|argumentsAccepted
control|)
block|{
comment|// Check the affinity of the argument passed in with the accepted argument,
comment|// based on the PrimitiveGrouping
name|TypeInfo
name|passedType
init|=
name|argsPassedIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|acceptedType
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|PRIMITIVE
operator|&&
name|passedType
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
name|PrimitiveGrouping
name|acceptedPg
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|acceptedType
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
decl_stmt|;
name|PrimitiveGrouping
name|passedPg
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|passedType
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|acceptedPg
operator|==
name|passedPg
condition|)
block|{
comment|// The passed argument matches somewhat closely with an accepted argument
operator|++
name|currentScore
expr_stmt|;
block|}
block|}
block|}
comment|// Check if the score for this method is any better relative to others
if|if
condition|(
name|currentScore
operator|>
name|bestMatchScore
condition|)
block|{
name|bestMatchScore
operator|=
name|currentScore
expr_stmt|;
name|bestMatch
operator|=
name|m
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentScore
operator|==
name|bestMatchScore
condition|)
block|{
name|bestMatch
operator|=
literal|null
expr_stmt|;
comment|// no longer a best match if more than one.
block|}
block|}
if|if
condition|(
name|bestMatch
operator|!=
literal|null
condition|)
block|{
comment|// Found a best match during this processing, use it.
name|udfMethods
operator|.
name|clear
argument_list|()
expr_stmt|;
name|udfMethods
operator|.
name|add
argument_list|(
name|bestMatch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Gets the closest matching method corresponding to the argument list from a    * list of methods.    *    * @param mlist    *          The list of methods to inspect.    * @param exact    *          Boolean to indicate whether this is an exact match or not.    * @param argumentsPassed    *          The classes for the argument.    * @return The matching method.    */
specifier|public
specifier|static
name|Method
name|getMethodInternal
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|udfClass
parameter_list|,
name|List
argument_list|<
name|Method
argument_list|>
name|mlist
parameter_list|,
name|boolean
name|exact
parameter_list|,
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|argumentsPassed
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
comment|// result
name|List
argument_list|<
name|Method
argument_list|>
name|udfMethods
init|=
operator|new
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|()
decl_stmt|;
comment|// The cost of the result
name|int
name|leastConversionCost
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|mlist
control|)
block|{
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|argumentsAccepted
init|=
name|TypeInfoUtils
operator|.
name|getParameterTypeInfos
argument_list|(
name|m
argument_list|,
name|argumentsPassed
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|argumentsAccepted
operator|==
literal|null
condition|)
block|{
comment|// null means the method does not accept number of arguments passed.
continue|continue;
block|}
name|boolean
name|match
init|=
operator|(
name|argumentsAccepted
operator|.
name|size
argument_list|()
operator|==
name|argumentsPassed
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
name|int
name|conversionCost
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argumentsPassed
operator|.
name|size
argument_list|()
operator|&&
name|match
condition|;
name|i
operator|++
control|)
block|{
name|int
name|cost
init|=
name|matchCost
argument_list|(
name|argumentsPassed
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|argumentsAccepted
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|exact
argument_list|)
decl_stmt|;
if|if
condition|(
name|cost
operator|==
operator|-
literal|1
condition|)
block|{
name|match
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|conversionCost
operator|+=
name|cost
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Method "
operator|+
operator|(
name|match
condition|?
literal|"did"
else|:
literal|"didn't"
operator|)
operator|+
literal|" match: passed = "
operator|+
name|argumentsPassed
operator|+
literal|" accepted = "
operator|+
name|argumentsAccepted
operator|+
literal|" method = "
operator|+
name|m
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|match
condition|)
block|{
comment|// Always choose the function with least implicit conversions.
if|if
condition|(
name|conversionCost
operator|<
name|leastConversionCost
condition|)
block|{
name|udfMethods
operator|.
name|clear
argument_list|()
expr_stmt|;
name|udfMethods
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|leastConversionCost
operator|=
name|conversionCost
expr_stmt|;
comment|// Found an exact match
if|if
condition|(
name|leastConversionCost
operator|==
literal|0
condition|)
block|{
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|conversionCost
operator|==
name|leastConversionCost
condition|)
block|{
comment|// Ambiguous call: two methods with the same number of implicit
comment|// conversions
name|udfMethods
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
comment|// Don't break! We might find a better match later.
block|}
else|else
block|{
comment|// do nothing if implicitConversions> leastImplicitConversions
block|}
block|}
block|}
if|if
condition|(
name|udfMethods
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// No matching methods found
throw|throw
operator|new
name|NoMatchingMethodException
argument_list|(
name|udfClass
argument_list|,
name|argumentsPassed
argument_list|,
name|mlist
argument_list|)
throw|;
block|}
if|if
condition|(
name|udfMethods
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// First try selecting methods based on the type affinity of the arguments passed
comment|// to the candidate method arguments.
name|filterMethodsByTypeAffinity
argument_list|(
name|udfMethods
argument_list|,
name|argumentsPassed
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|udfMethods
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// if the only difference is numeric types, pick the method
comment|// with the smallest overall numeric type.
name|int
name|lowestNumericType
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|boolean
name|multiple
init|=
literal|true
decl_stmt|;
name|Method
name|candidate
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|referenceArguments
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|udfMethods
control|)
block|{
name|int
name|maxNumericType
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|argumentsAccepted
init|=
name|TypeInfoUtils
operator|.
name|getParameterTypeInfos
argument_list|(
name|m
argument_list|,
name|argumentsPassed
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|referenceArguments
operator|==
literal|null
condition|)
block|{
comment|// keep the arguments for reference - we want all the non-numeric
comment|// arguments to be the same
name|referenceArguments
operator|=
name|argumentsAccepted
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|TypeInfo
argument_list|>
name|referenceIterator
init|=
name|referenceArguments
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|TypeInfo
name|accepted
range|:
name|argumentsAccepted
control|)
block|{
name|TypeInfo
name|reference
init|=
name|referenceIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|acceptedIsPrimitive
init|=
literal|false
decl_stmt|;
name|PrimitiveCategory
name|acceptedPrimCat
init|=
name|PrimitiveCategory
operator|.
name|UNKNOWN
decl_stmt|;
if|if
condition|(
name|accepted
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
name|acceptedIsPrimitive
operator|=
literal|true
expr_stmt|;
name|acceptedPrimCat
operator|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|accepted
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|acceptedIsPrimitive
operator|&&
name|numericTypes
operator|.
name|containsKey
argument_list|(
name|acceptedPrimCat
argument_list|)
condition|)
block|{
comment|// We're looking for the udf with the smallest maximum numeric type.
name|int
name|typeValue
init|=
name|numericTypes
operator|.
name|get
argument_list|(
name|acceptedPrimCat
argument_list|)
decl_stmt|;
name|maxNumericType
operator|=
name|typeValue
operator|>
name|maxNumericType
condition|?
name|typeValue
else|:
name|maxNumericType
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|accepted
operator|.
name|equals
argument_list|(
name|reference
argument_list|)
condition|)
block|{
comment|// There are non-numeric arguments that don't match from one UDF to
comment|// another. We give up at this point.
throw|throw
operator|new
name|AmbiguousMethodException
argument_list|(
name|udfClass
argument_list|,
name|argumentsPassed
argument_list|,
name|mlist
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|lowestNumericType
operator|>
name|maxNumericType
condition|)
block|{
name|multiple
operator|=
literal|false
expr_stmt|;
name|lowestNumericType
operator|=
name|maxNumericType
expr_stmt|;
name|candidate
operator|=
name|m
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|maxNumericType
operator|==
name|lowestNumericType
condition|)
block|{
comment|// multiple udfs with the same max type. Unless we find a lower one
comment|// we'll give up.
name|multiple
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|multiple
condition|)
block|{
return|return
name|candidate
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|AmbiguousMethodException
argument_list|(
name|udfClass
argument_list|,
name|argumentsPassed
argument_list|,
name|mlist
argument_list|)
throw|;
block|}
block|}
return|return
name|udfMethods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * A shortcut to get the "index" GenericUDF. This is used for getting elements    * out of array and getting values out of map.    */
specifier|public
specifier|static
name|GenericUDF
name|getGenericUDFForIndex
parameter_list|()
block|{
return|return
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
literal|"index"
argument_list|)
operator|.
name|getGenericUDF
argument_list|()
return|;
block|}
comment|/**    * A shortcut to get the "and" GenericUDF.    */
specifier|public
specifier|static
name|GenericUDF
name|getGenericUDFForAnd
parameter_list|()
block|{
return|return
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
literal|"and"
argument_list|)
operator|.
name|getGenericUDF
argument_list|()
return|;
block|}
comment|/**    * Create a copy of an existing GenericUDF.    */
specifier|public
specifier|static
name|GenericUDF
name|cloneGenericUDF
parameter_list|(
name|GenericUDF
name|genericUDF
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|genericUDF
condition|)
block|{
return|return
literal|null
return|;
block|}
name|GenericUDF
name|clonedUDF
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|genericUDF
operator|instanceof
name|GenericUDFBridge
condition|)
block|{
name|GenericUDFBridge
name|bridge
init|=
operator|(
name|GenericUDFBridge
operator|)
name|genericUDF
decl_stmt|;
name|clonedUDF
operator|=
operator|new
name|GenericUDFBridge
argument_list|(
name|bridge
operator|.
name|getUdfName
argument_list|()
argument_list|,
name|bridge
operator|.
name|isOperator
argument_list|()
argument_list|,
name|bridge
operator|.
name|getUdfClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|genericUDF
operator|instanceof
name|GenericUDFMacro
condition|)
block|{
name|GenericUDFMacro
name|bridge
init|=
operator|(
name|GenericUDFMacro
operator|)
name|genericUDF
decl_stmt|;
name|clonedUDF
operator|=
operator|new
name|GenericUDFMacro
argument_list|(
name|bridge
operator|.
name|getMacroName
argument_list|()
argument_list|,
name|bridge
operator|.
name|getBody
argument_list|()
argument_list|,
name|bridge
operator|.
name|getColNames
argument_list|()
argument_list|,
name|bridge
operator|.
name|getColTypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clonedUDF
operator|=
operator|(
name|GenericUDF
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|genericUDF
operator|.
name|getClass
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clonedUDF
operator|!=
literal|null
condition|)
block|{
comment|// Copy info that may be required in the new copy.
comment|// The SettableUDF calls below could be replaced using this mechanism as well.
try|try
block|{
name|genericUDF
operator|.
name|copyToNewInstance
argument_list|(
name|clonedUDF
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UDFArgumentException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|err
argument_list|)
throw|;
block|}
comment|// The original may have settable info that needs to be added to the new copy.
if|if
condition|(
name|genericUDF
operator|instanceof
name|SettableUDF
condition|)
block|{
try|try
block|{
name|TypeInfo
name|typeInfo
init|=
operator|(
operator|(
name|SettableUDF
operator|)
name|genericUDF
operator|)
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeInfo
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|SettableUDF
operator|)
name|clonedUDF
operator|)
operator|.
name|setTypeInfo
argument_list|(
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UDFArgumentException
name|err
parameter_list|)
block|{
comment|// In theory this should not happen - if the original copy of the UDF had this
comment|// data, we should be able to set the UDF copy with this same settableData.
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to add settable data to UDF "
operator|+
name|genericUDF
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|err
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|clonedUDF
return|;
block|}
comment|/**    * Create a copy of an existing GenericUDTF.    */
specifier|public
specifier|static
name|GenericUDTF
name|cloneGenericUDTF
parameter_list|(
name|GenericUDTF
name|genericUDTF
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|genericUDTF
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|GenericUDTF
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|genericUDTF
operator|.
name|getClass
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Get the UDF class from an exprNodeDesc. Returns null if the exprNodeDesc    * does not contain a UDF class.    */
specifier|private
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|GenericUDF
argument_list|>
name|getGenericUDFClassFromExprDesc
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|desc
operator|instanceof
name|ExprNodeGenericFuncDesc
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ExprNodeGenericFuncDesc
name|genericFuncDesc
init|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|desc
decl_stmt|;
return|return
name|genericFuncDesc
operator|.
name|getGenericUDF
argument_list|()
operator|.
name|getClass
argument_list|()
return|;
block|}
comment|/**    * Get the UDF class from an exprNodeDesc. Returns null if the exprNodeDesc    * does not contain a UDF class.    */
specifier|private
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|GenericUDF
argument_list|>
name|getUDFClassFromExprDesc
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|desc
operator|instanceof
name|ExprNodeGenericFuncDesc
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ExprNodeGenericFuncDesc
name|genericFuncDesc
init|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|desc
decl_stmt|;
return|return
name|genericFuncDesc
operator|.
name|getGenericUDF
argument_list|()
operator|.
name|getClass
argument_list|()
return|;
block|}
comment|/**    * Returns whether a GenericUDF is deterministic or not.    */
specifier|public
specifier|static
name|boolean
name|isDeterministic
parameter_list|(
name|GenericUDF
name|genericUDF
parameter_list|)
block|{
if|if
condition|(
name|isStateful
argument_list|(
name|genericUDF
argument_list|)
condition|)
block|{
comment|// stateful implies non-deterministic, regardless of whatever
comment|// the deterministic annotation declares
return|return
literal|false
return|;
block|}
name|UDFType
name|genericUDFType
init|=
name|genericUDF
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|UDFType
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|genericUDFType
operator|!=
literal|null
operator|&&
name|genericUDFType
operator|.
name|deterministic
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|genericUDF
operator|instanceof
name|GenericUDFBridge
condition|)
block|{
name|GenericUDFBridge
name|bridge
init|=
call|(
name|GenericUDFBridge
call|)
argument_list|(
name|genericUDF
argument_list|)
decl_stmt|;
name|UDFType
name|bridgeUDFType
init|=
name|bridge
operator|.
name|getUdfClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|UDFType
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|bridgeUDFType
operator|!=
literal|null
operator|&&
name|bridgeUDFType
operator|.
name|deterministic
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|genericUDF
operator|instanceof
name|GenericUDFMacro
condition|)
block|{
name|GenericUDFMacro
name|macro
init|=
call|(
name|GenericUDFMacro
call|)
argument_list|(
name|genericUDF
argument_list|)
decl_stmt|;
return|return
name|macro
operator|.
name|isDeterministic
argument_list|()
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Returns whether a GenericUDF is stateful or not.    */
specifier|public
specifier|static
name|boolean
name|isStateful
parameter_list|(
name|GenericUDF
name|genericUDF
parameter_list|)
block|{
name|UDFType
name|genericUDFType
init|=
name|genericUDF
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|UDFType
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|genericUDFType
operator|!=
literal|null
operator|&&
name|genericUDFType
operator|.
name|stateful
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|genericUDF
operator|instanceof
name|GenericUDFBridge
condition|)
block|{
name|GenericUDFBridge
name|bridge
init|=
operator|(
name|GenericUDFBridge
operator|)
name|genericUDF
decl_stmt|;
name|UDFType
name|bridgeUDFType
init|=
name|bridge
operator|.
name|getUdfClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|UDFType
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|bridgeUDFType
operator|!=
literal|null
operator|&&
name|bridgeUDFType
operator|.
name|stateful
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|genericUDF
operator|instanceof
name|GenericUDFMacro
condition|)
block|{
name|GenericUDFMacro
name|macro
init|=
call|(
name|GenericUDFMacro
call|)
argument_list|(
name|genericUDF
argument_list|)
decl_stmt|;
return|return
name|macro
operator|.
name|isStateful
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Returns whether the exprNodeDesc is a node of "and", "or", "not".    */
specifier|public
specifier|static
name|boolean
name|isOpAndOrNot
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|GenericUDF
argument_list|>
name|genericUdfClass
init|=
name|getGenericUDFClassFromExprDesc
argument_list|(
name|desc
argument_list|)
decl_stmt|;
return|return
name|GenericUDFOPAnd
operator|.
name|class
operator|==
name|genericUdfClass
operator|||
name|GenericUDFOPOr
operator|.
name|class
operator|==
name|genericUdfClass
operator|||
name|GenericUDFOPNot
operator|.
name|class
operator|==
name|genericUdfClass
return|;
block|}
comment|/**    * Returns whether the exprNodeDesc is a node of "and".    */
specifier|public
specifier|static
name|boolean
name|isOpAnd
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
return|return
name|GenericUDFOPAnd
operator|.
name|class
operator|==
name|getGenericUDFClassFromExprDesc
argument_list|(
name|desc
argument_list|)
return|;
block|}
comment|/**    * Returns whether the exprNodeDesc is a node of "or".    */
specifier|public
specifier|static
name|boolean
name|isOpOr
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
return|return
name|GenericUDFOPOr
operator|.
name|class
operator|==
name|getGenericUDFClassFromExprDesc
argument_list|(
name|desc
argument_list|)
return|;
block|}
comment|/**    * Returns whether the exprNodeDesc is a node of "not".    */
specifier|public
specifier|static
name|boolean
name|isOpNot
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
return|return
name|GenericUDFOPNot
operator|.
name|class
operator|==
name|getGenericUDFClassFromExprDesc
argument_list|(
name|desc
argument_list|)
return|;
block|}
comment|/**    * Returns whether the exprNodeDesc is a node of "positive".    */
specifier|public
specifier|static
name|boolean
name|isOpPositive
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|GenericUDF
argument_list|>
name|udfClass
init|=
name|getUDFClassFromExprDesc
argument_list|(
name|desc
argument_list|)
decl_stmt|;
return|return
name|GenericUDFOPPositive
operator|.
name|class
operator|==
name|udfClass
return|;
block|}
comment|/**    * Returns whether the exprNodeDesc is node of "cast".    */
specifier|private
specifier|static
name|boolean
name|isOpCast
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|desc
operator|instanceof
name|ExprNodeGenericFuncDesc
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|GenericUDF
name|genericUDF
init|=
operator|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|desc
operator|)
operator|.
name|getGenericUDF
argument_list|()
decl_stmt|;
name|Class
name|udfClass
decl_stmt|;
if|if
condition|(
name|genericUDF
operator|instanceof
name|GenericUDFBridge
condition|)
block|{
name|udfClass
operator|=
operator|(
operator|(
name|GenericUDFBridge
operator|)
name|genericUDF
operator|)
operator|.
name|getUdfClass
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|udfClass
operator|=
name|genericUDF
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
return|return
name|udfClass
operator|==
name|UDFToBoolean
operator|.
name|class
operator|||
name|udfClass
operator|==
name|UDFToByte
operator|.
name|class
operator|||
name|udfClass
operator|==
name|UDFToDouble
operator|.
name|class
operator|||
name|udfClass
operator|==
name|UDFToFloat
operator|.
name|class
operator|||
name|udfClass
operator|==
name|UDFToInteger
operator|.
name|class
operator|||
name|udfClass
operator|==
name|UDFToLong
operator|.
name|class
operator|||
name|udfClass
operator|==
name|UDFToShort
operator|.
name|class
operator|||
name|udfClass
operator|==
name|UDFToString
operator|.
name|class
operator|||
name|udfClass
operator|==
name|GenericUDFToVarchar
operator|.
name|class
operator|||
name|udfClass
operator|==
name|GenericUDFToChar
operator|.
name|class
operator|||
name|udfClass
operator|==
name|GenericUDFTimestamp
operator|.
name|class
operator|||
name|udfClass
operator|==
name|GenericUDFToBinary
operator|.
name|class
operator|||
name|udfClass
operator|==
name|GenericUDFToDate
operator|.
name|class
operator|||
name|udfClass
operator|==
name|GenericUDFToDecimal
operator|.
name|class
return|;
block|}
comment|/**    * Returns whether the exprNodeDesc can recommend name for the expression    */
specifier|public
specifier|static
name|boolean
name|isOpPreserveInputName
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
return|return
name|isOpCast
argument_list|(
name|desc
argument_list|)
return|;
block|}
comment|/**    * Registers the appropriate kind of temporary function based on a class's    * type.    *    * @param functionName name under which to register function    *    * @param udfClass class implementing UD[A|T]F    *    * @return true if udfClass's type was recognized (so registration    * succeeded); false otherwise    */
specifier|public
specifier|static
name|boolean
name|registerTemporaryFunction
parameter_list|(
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|udfClass
parameter_list|)
block|{
name|UDFClassType
name|udfClassType
init|=
name|FunctionUtils
operator|.
name|getUDFClassType
argument_list|(
name|udfClass
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|udfClassType
condition|)
block|{
case|case
name|UDF
case|:
name|FunctionRegistry
operator|.
name|registerTemporaryUDF
argument_list|(
name|functionName
argument_list|,
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|UDF
argument_list|>
operator|)
name|udfClass
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|GENERIC_UDF
case|:
name|FunctionRegistry
operator|.
name|registerTemporaryGenericUDF
argument_list|(
name|functionName
argument_list|,
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|GenericUDF
argument_list|>
operator|)
name|udfClass
argument_list|)
expr_stmt|;
break|break;
case|case
name|GENERIC_UDTF
case|:
name|FunctionRegistry
operator|.
name|registerTemporaryGenericUDTF
argument_list|(
name|functionName
argument_list|,
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|GenericUDTF
argument_list|>
operator|)
name|udfClass
argument_list|)
expr_stmt|;
break|break;
case|case
name|UDAF
case|:
name|FunctionRegistry
operator|.
name|registerTemporaryUDAF
argument_list|(
name|functionName
argument_list|,
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|UDAF
argument_list|>
operator|)
name|udfClass
argument_list|)
expr_stmt|;
break|break;
case|case
name|GENERIC_UDAF_RESOLVER
case|:
name|FunctionRegistry
operator|.
name|registerTemporaryGenericUDAF
argument_list|(
name|functionName
argument_list|,
operator|(
name|GenericUDAFResolver
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|udfClass
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TABLE_FUNCTION_RESOLVER
case|:
name|FunctionRegistry
operator|.
name|registerTableFunction
argument_list|(
name|functionName
argument_list|,
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|TableFunctionResolver
argument_list|>
operator|)
name|udfClass
argument_list|)
expr_stmt|;
break|break;
default|default:
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Registers thae appropriate kind of temporary function based on a class's    * type.    *    * @param macroName name under which to register the macro    *    * @param body the expression which the macro evaluates to    *    * @param colNames the names of the arguments to the macro    *    * @param colTypes the types of the arguments to the macro    */
specifier|public
specifier|static
name|void
name|registerTemporaryMacro
parameter_list|(
name|String
name|macroName
parameter_list|,
name|ExprNodeDesc
name|body
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|,
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|colTypes
parameter_list|)
block|{
name|FunctionInfo
name|fI
init|=
operator|new
name|FunctionInfo
argument_list|(
literal|false
argument_list|,
name|macroName
argument_list|,
operator|new
name|GenericUDFMacro
argument_list|(
name|macroName
argument_list|,
name|body
argument_list|,
name|colNames
argument_list|,
name|colTypes
argument_list|)
argument_list|)
decl_stmt|;
name|mFunctions
operator|.
name|put
argument_list|(
name|macroName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fI
argument_list|)
expr_stmt|;
name|registerNativeStatus
argument_list|(
name|fI
argument_list|)
expr_stmt|;
block|}
comment|/**    * Registers Hive functions from a plugin jar, using metadata from    * the jar's META-INF/class-info.xml.    *    * @param jarLocation URL for reading jar file    *    * @param classLoader classloader to use for loading function classes    */
specifier|public
specifier|static
name|void
name|registerFunctionsFromPluginJar
parameter_list|(
name|URL
name|jarLocation
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"jar:"
operator|+
name|jarLocation
operator|+
literal|"!/META-INF/class-info.xml"
argument_list|)
decl_stmt|;
name|InputStream
name|inputStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|inputStream
operator|=
name|url
operator|.
name|openStream
argument_list|()
expr_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|docBuilder
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|docBuilder
operator|.
name|parse
argument_list|(
name|inputStream
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|root
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"ClassList"
argument_list|)
condition|)
block|{
return|return;
block|}
name|NodeList
name|children
init|=
name|root
operator|.
name|getElementsByTagName
argument_list|(
literal|"Class"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Element
name|child
init|=
operator|(
name|Element
operator|)
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|javaName
init|=
name|child
operator|.
name|getAttribute
argument_list|(
literal|"javaname"
argument_list|)
decl_stmt|;
name|String
name|sqlName
init|=
name|child
operator|.
name|getAttribute
argument_list|(
literal|"sqlname"
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|udfClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|javaName
argument_list|,
literal|true
argument_list|,
name|classLoader
argument_list|)
decl_stmt|;
name|boolean
name|registered
init|=
name|registerTemporaryFunction
argument_list|(
name|sqlName
argument_list|,
name|udfClass
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|registered
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Class "
operator|+
name|udfClass
operator|+
literal|" is not a Hive function implementation"
argument_list|)
throw|;
block|}
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|FunctionRegistry
parameter_list|()
block|{
comment|// prevent instantiation
block|}
comment|//---------PTF functions------------
specifier|public
specifier|static
name|void
name|registerWindowFunction
parameter_list|(
name|String
name|name
parameter_list|,
name|GenericUDAFResolver
name|wFn
parameter_list|)
block|{
name|registerWindowFunction
argument_list|(
name|name
argument_list|,
name|wFn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Typically a WindowFunction is the same as a UDAF. The only exceptions are Lead& Lag UDAFs. These    * are not registered as regular UDAFs because    * - we plan to support Lead& Lag as UDFs (usable only within argument expressions    *   of UDAFs when windowing is involved). Since mFunctions holds both UDFs and UDAFs we cannot    *   add both FunctionInfos to mFunctions.    * We choose to only register UDFs in mFunctions. The implication of this is that Lead/Lag UDAFs    * are only usable when windowing is involved.    *    * @param name    * @param wFn    * @param registerAsUDAF    */
specifier|public
specifier|static
name|void
name|registerWindowFunction
parameter_list|(
name|String
name|name
parameter_list|,
name|GenericUDAFResolver
name|wFn
parameter_list|,
name|boolean
name|registerAsUDAF
parameter_list|)
block|{
name|FunctionInfo
name|fInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|registerAsUDAF
condition|)
block|{
comment|// Just register the function normally, will also get added to window functions.
name|registerGenericUDAF
argument_list|(
literal|true
argument_list|,
name|name
argument_list|,
name|wFn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|name
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|fInfo
operator|=
operator|new
name|FunctionInfo
argument_list|(
literal|true
argument_list|,
name|name
argument_list|,
name|wFn
argument_list|)
expr_stmt|;
name|addFunctionInfoToWindowFunctions
argument_list|(
name|name
argument_list|,
name|fInfo
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|WindowFunctionInfo
name|getWindowFunctionInfo
parameter_list|(
name|String
name|functionName
parameter_list|)
block|{
return|return
name|getFunctionInfo
argument_list|(
name|windowFunctions
argument_list|,
name|functionName
argument_list|)
return|;
block|}
comment|/**    * Both UDF and UDAF functions can imply order for analytical functions    *    * @param name    *          name of function    * @return true if a GenericUDF or GenericUDAF exists for this name and implyOrder is true, false    *         otherwise.    */
specifier|public
specifier|static
name|boolean
name|impliesOrder
parameter_list|(
name|String
name|functionName
parameter_list|)
block|{
name|FunctionInfo
name|info
init|=
name|getFunctionInfo
argument_list|(
name|functionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|info
operator|.
name|isGenericUDF
argument_list|()
condition|)
block|{
name|UDFType
name|type
init|=
name|info
operator|.
name|getGenericUDF
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|UDFType
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|type
operator|.
name|impliesOrder
argument_list|()
return|;
block|}
block|}
block|}
name|WindowFunctionInfo
name|windowInfo
init|=
name|getWindowFunctionInfo
argument_list|(
name|functionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|windowInfo
operator|!=
literal|null
condition|)
block|{
return|return
name|windowInfo
operator|.
name|isImpliesOrder
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|static
specifier|private
name|void
name|addFunctionInfoToWindowFunctions
parameter_list|(
name|String
name|functionName
parameter_list|,
name|FunctionInfo
name|functionInfo
parameter_list|)
block|{
comment|// Assumes that the caller has already verified that functionInfo is for an aggregate function
name|WindowFunctionInfo
name|wInfo
init|=
operator|new
name|WindowFunctionInfo
argument_list|(
name|functionInfo
argument_list|)
decl_stmt|;
name|windowFunctions
operator|.
name|put
argument_list|(
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|wInfo
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|isTableFunction
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|FunctionInfo
name|tFInfo
init|=
name|getFunctionInfo
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|tFInfo
operator|!=
literal|null
operator|&&
operator|!
name|tFInfo
operator|.
name|isInternalTableFunction
argument_list|()
operator|&&
name|tFInfo
operator|.
name|isTableFunction
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|TableFunctionResolver
name|getTableFunctionResolver
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|FunctionInfo
name|tfInfo
init|=
name|getFunctionInfo
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|tfInfo
operator|.
name|isTableFunction
argument_list|()
condition|)
block|{
return|return
operator|(
name|TableFunctionResolver
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|tfInfo
operator|.
name|getFunctionClass
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|TableFunctionResolver
name|getWindowingTableFunction
parameter_list|()
block|{
return|return
name|getTableFunctionResolver
argument_list|(
name|WINDOWING_TABLE_FUNCTION
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TableFunctionResolver
name|getNoopTableFunction
parameter_list|()
block|{
return|return
name|getTableFunctionResolver
argument_list|(
name|NOOP_TABLE_FUNCTION
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|registerTableFunction
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableFunctionResolver
argument_list|>
name|tFnCls
parameter_list|)
block|{
name|FunctionInfo
name|tInfo
init|=
operator|new
name|FunctionInfo
argument_list|(
name|name
argument_list|,
name|tFnCls
argument_list|)
decl_stmt|;
name|mFunctions
operator|.
name|put
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|tInfo
argument_list|)
expr_stmt|;
name|registerNativeStatus
argument_list|(
name|tInfo
argument_list|)
expr_stmt|;
block|}
comment|/**    * Use this to check if function is ranking function    *    * @param name    *          name of a function    * @return true if function is a UDAF, has WindowFunctionDescription annotation and the annotations    *         confirms a ranking function, false otherwise    */
specifier|public
specifier|static
name|boolean
name|isRankingFunction
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|FunctionInfo
name|info
init|=
name|getFunctionInfo
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|GenericUDAFResolver
name|res
init|=
name|info
operator|.
name|getGenericUDAFResolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
name|WindowFunctionDescription
name|desc
init|=
name|res
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|WindowFunctionDescription
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
return|return
name|desc
operator|.
name|rankingFunction
argument_list|()
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * @param fnExpr Function expression.    * @return True iff the fnExpr represents a hive built-in function.    */
specifier|public
specifier|static
name|boolean
name|isNativeFuncExpr
parameter_list|(
name|ExprNodeGenericFuncDesc
name|fnExpr
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|udfClass
init|=
name|getUDFClassFromExprDesc
argument_list|(
name|fnExpr
argument_list|)
decl_stmt|;
if|if
condition|(
name|udfClass
operator|==
literal|null
condition|)
block|{
name|udfClass
operator|=
name|getGenericUDFClassFromExprDesc
argument_list|(
name|fnExpr
argument_list|)
expr_stmt|;
block|}
return|return
name|nativeUdfs
operator|.
name|contains
argument_list|(
name|udfClass
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|registerNativeStatus
parameter_list|(
name|FunctionInfo
name|fi
parameter_list|)
block|{
if|if
condition|(
operator|!
name|fi
operator|.
name|isNative
argument_list|()
condition|)
block|{
return|return;
block|}
name|nativeUdfs
operator|.
name|add
argument_list|(
name|fi
operator|.
name|getFunctionClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

