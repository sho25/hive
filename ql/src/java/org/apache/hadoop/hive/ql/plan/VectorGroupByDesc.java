begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_comment
comment|/**  * VectorGroupByDesc.  *  * Extra parameters beyond GroupByDesc just for the VectorGroupByOperator.  *  * We don't extend GroupByDesc because the base OperatorDesc doesn't support  * clone and adding it is a lot work for little gain.  */
end_comment

begin_class
specifier|public
class|class
name|VectorGroupByDesc
extends|extends
name|AbstractVectorDesc
block|{
specifier|private
specifier|static
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/**    *     GLOBAL         No key.  All rows --> 1 full aggregation on end of input    *    *     HASH           Rows aggregated in to hash table on group key -->    *                        1 partial aggregation per key (normally, unless there is spilling)    *    *     MERGE_PARTIAL  As first operator in a REDUCER, partial aggregations come grouped from    *                    reduce-shuffle -->    *                        aggregate the partial aggregations and emit full aggregation on    *                        endGroup / closeOp    *    *     STREAMING      Rows come from PARENT operator already grouped -->    *                        aggregate the rows and emit full aggregation on key change / closeOp    *    *     NOTE: Hash can spill partial result rows prematurely if it runs low on memory.    *     NOTE: Streaming has to compare keys where MergePartial gets an endGroup call.    */
specifier|public
specifier|static
enum|enum
name|ProcessingMode
block|{
name|NONE
block|,
name|GLOBAL
block|,
name|HASH
block|,
name|MERGE_PARTIAL
block|,
name|STREAMING
block|}
empty_stmt|;
specifier|private
name|ProcessingMode
name|processingMode
decl_stmt|;
specifier|private
name|boolean
name|isVectorOutput
decl_stmt|;
specifier|public
name|VectorGroupByDesc
parameter_list|()
block|{
name|this
operator|.
name|processingMode
operator|=
name|ProcessingMode
operator|.
name|NONE
expr_stmt|;
name|this
operator|.
name|isVectorOutput
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|setProcessingMode
parameter_list|(
name|ProcessingMode
name|processingMode
parameter_list|)
block|{
name|this
operator|.
name|processingMode
operator|=
name|processingMode
expr_stmt|;
block|}
specifier|public
name|ProcessingMode
name|getProcessingMode
parameter_list|()
block|{
return|return
name|processingMode
return|;
block|}
specifier|public
name|boolean
name|isVectorOutput
parameter_list|()
block|{
return|return
name|isVectorOutput
return|;
block|}
specifier|public
name|void
name|setVectorOutput
parameter_list|(
name|boolean
name|isVectorOutput
parameter_list|)
block|{
name|this
operator|.
name|isVectorOutput
operator|=
name|isVectorOutput
expr_stmt|;
block|}
comment|/**    * Which ProcessingMode for VectorGroupByOperator?    *    *     Decides using GroupByDesc.Mode and whether there are keys.    *    *         Mode.COMPLETE      --> (numKeys == 0 ? ProcessingMode.GLOBAL : ProcessingMode.STREAMING)    *    *         Mode.HASH          --> ProcessingMode.HASH    *    *         Mode.MERGEPARTIAL  --> (numKeys == 0 ? ProcessingMode.GLOBAL : ProcessingMode.MERGE_PARTIAL)    *    *         Mode.PARTIAL1,    *         Mode.PARTIAL2,    *         Mode.PARTIALS,    *         Mode.FINAL        --> ProcessingMode.STREAMING    *    */
specifier|public
specifier|static
name|ProcessingMode
name|groupByDescModeToVectorProcessingMode
parameter_list|(
name|GroupByDesc
operator|.
name|Mode
name|mode
parameter_list|,
name|boolean
name|hasKeys
parameter_list|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|COMPLETE
case|:
return|return
operator|(
name|hasKeys
condition|?
name|ProcessingMode
operator|.
name|STREAMING
else|:
name|ProcessingMode
operator|.
name|GLOBAL
operator|)
return|;
case|case
name|HASH
case|:
return|return
name|ProcessingMode
operator|.
name|HASH
return|;
case|case
name|MERGEPARTIAL
case|:
return|return
operator|(
name|hasKeys
condition|?
name|ProcessingMode
operator|.
name|MERGE_PARTIAL
else|:
name|ProcessingMode
operator|.
name|GLOBAL
operator|)
return|;
case|case
name|PARTIAL1
case|:
case|case
name|PARTIAL2
case|:
case|case
name|PARTIALS
case|:
case|case
name|FINAL
case|:
return|return
name|ProcessingMode
operator|.
name|STREAMING
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected GROUP BY mode "
operator|+
name|mode
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

