begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ConditionalTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_comment
comment|/**  * base class for operator graph walker this class takes list of starting ops  * and walks them one by one. it maintains list of walked operators  * (dispatchedList) and a list of operators that are discovered but not yet  * dispatched  */
end_comment

begin_class
specifier|public
class|class
name|TaskGraphWalker
implements|implements
name|GraphWalker
block|{
specifier|public
class|class
name|TaskGraphWalkerContext
block|{
specifier|private
specifier|final
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|reMap
decl_stmt|;
specifier|public
name|TaskGraphWalkerContext
parameter_list|(
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|reMap
parameter_list|)
block|{
name|this
operator|.
name|reMap
operator|=
name|reMap
expr_stmt|;
block|}
specifier|public
name|void
name|addToDispatchList
parameter_list|(
name|Node
name|dispatchedObj
parameter_list|)
block|{
if|if
condition|(
name|dispatchedObj
operator|!=
literal|null
condition|)
block|{
name|retMap
operator|.
name|put
argument_list|(
name|dispatchedObj
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|Stack
argument_list|<
name|Node
argument_list|>
name|opStack
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Node
argument_list|>
name|toWalk
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|retMap
init|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Dispatcher
name|dispatcher
decl_stmt|;
specifier|private
specifier|final
name|TaskGraphWalkerContext
name|walkerCtx
decl_stmt|;
comment|/**    * Constructor.    *    * @param disp    *          dispatcher to call for each op encountered    */
specifier|public
name|TaskGraphWalker
parameter_list|(
name|Dispatcher
name|disp
parameter_list|)
block|{
name|dispatcher
operator|=
name|disp
expr_stmt|;
name|opStack
operator|=
operator|new
name|Stack
argument_list|<
name|Node
argument_list|>
argument_list|()
expr_stmt|;
name|walkerCtx
operator|=
operator|new
name|TaskGraphWalkerContext
argument_list|(
name|retMap
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the toWalk    */
specifier|public
name|List
argument_list|<
name|Node
argument_list|>
name|getToWalk
parameter_list|()
block|{
return|return
name|toWalk
return|;
block|}
comment|/**    * @return the doneList    */
specifier|public
name|Set
argument_list|<
name|Node
argument_list|>
name|getDispatchedList
parameter_list|()
block|{
return|return
name|retMap
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**    * Dispatch the current operator.    *    * @param nd    *          node being walked    * @param ndStack    *          stack of nodes encountered    * @throws SemanticException    */
specifier|public
name|void
name|dispatch
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|ndStack
parameter_list|,
name|TaskGraphWalkerContext
name|walkerCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Object
index|[]
name|nodeOutputs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nd
operator|.
name|getChildren
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|nodeOutputs
operator|=
operator|new
name|Object
index|[
name|nd
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
expr_stmt|;
name|nodeOutputs
index|[
literal|0
index|]
operator|=
name|walkerCtx
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Node
name|child
range|:
name|nd
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|nodeOutputs
index|[
name|i
operator|++
index|]
operator|=
name|retMap
operator|.
name|get
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|nodeOutputs
operator|=
operator|new
name|Object
index|[
literal|1
index|]
expr_stmt|;
name|nodeOutputs
index|[
literal|0
index|]
operator|=
name|walkerCtx
expr_stmt|;
block|}
name|Object
name|retVal
init|=
name|dispatcher
operator|.
name|dispatch
argument_list|(
name|nd
argument_list|,
name|ndStack
argument_list|,
name|nodeOutputs
argument_list|)
decl_stmt|;
name|retMap
operator|.
name|put
argument_list|(
name|nd
argument_list|,
name|retVal
argument_list|)
expr_stmt|;
block|}
comment|/**    * starting point for walking.    *    * @throws SemanticException    */
specifier|public
name|void
name|startWalking
parameter_list|(
name|Collection
argument_list|<
name|Node
argument_list|>
name|startNodes
parameter_list|,
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|nodeOutput
parameter_list|)
throws|throws
name|SemanticException
block|{
name|toWalk
operator|.
name|addAll
argument_list|(
name|startNodes
argument_list|)
expr_stmt|;
while|while
condition|(
name|toWalk
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Node
name|nd
init|=
name|toWalk
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|walk
argument_list|(
name|nd
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeOutput
operator|!=
literal|null
condition|)
block|{
name|nodeOutput
operator|.
name|put
argument_list|(
name|nd
argument_list|,
name|retMap
operator|.
name|get
argument_list|(
name|nd
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * walk the current operator and its descendants.    *    * @param nd    *          current operator in the graph    * @throws SemanticException    */
specifier|public
name|void
name|walk
parameter_list|(
name|Node
name|nd
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
operator|!
operator|(
name|nd
operator|instanceof
name|Task
operator|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Task Graph Walker only walks for Task Graph"
argument_list|)
throw|;
block|}
if|if
condition|(
name|getDispatchedList
argument_list|()
operator|.
name|contains
argument_list|(
name|nd
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|opStack
operator|.
name|empty
argument_list|()
operator|||
name|nd
operator|!=
name|opStack
operator|.
name|peek
argument_list|()
condition|)
block|{
name|opStack
operator|.
name|push
argument_list|(
name|nd
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|nextTaskList
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|nextTaskSet
init|=
operator|new
name|HashSet
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|taskListInConditionalTask
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nd
operator|instanceof
name|ConditionalTask
condition|)
block|{
comment|//for conditional task, next task list should return the children tasks of each task, which
comment|//is contained in the conditional task.
name|taskListInConditionalTask
operator|=
operator|(
operator|(
name|ConditionalTask
operator|)
name|nd
operator|)
operator|.
name|getListTasks
argument_list|()
expr_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
argument_list|>
name|tsk
range|:
name|taskListInConditionalTask
control|)
block|{
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|childTask
init|=
name|tsk
operator|.
name|getChildTasks
argument_list|()
decl_stmt|;
if|if
condition|(
name|childTask
operator|!=
literal|null
condition|)
block|{
name|nextTaskSet
operator|.
name|addAll
argument_list|(
name|tsk
operator|.
name|getChildTasks
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//convert the set into list
if|if
condition|(
name|nextTaskSet
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|nextTaskList
operator|=
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
argument_list|>
name|tsk
range|:
name|nextTaskSet
control|)
block|{
name|nextTaskList
operator|.
name|add
argument_list|(
name|tsk
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|//for other tasks, just return its children tasks
name|nextTaskList
operator|=
operator|(
operator|(
name|Task
argument_list|<
name|?
argument_list|>
operator|)
name|nd
operator|)
operator|.
name|getChildTasks
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|nextTaskList
operator|==
literal|null
operator|)
operator|||
name|getDispatchedList
argument_list|()
operator|.
name|containsAll
argument_list|(
name|nextTaskList
argument_list|)
condition|)
block|{
name|dispatch
argument_list|(
name|nd
argument_list|,
name|opStack
argument_list|,
name|this
operator|.
name|walkerCtx
argument_list|)
expr_stmt|;
name|opStack
operator|.
name|pop
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// add children, self to the front of the queue in that order
name|getToWalk
argument_list|()
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|nd
argument_list|)
expr_stmt|;
name|getToWalk
argument_list|()
operator|.
name|removeAll
argument_list|(
name|nextTaskList
argument_list|)
expr_stmt|;
name|getToWalk
argument_list|()
operator|.
name|addAll
argument_list|(
literal|0
argument_list|,
name|nextTaskList
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

