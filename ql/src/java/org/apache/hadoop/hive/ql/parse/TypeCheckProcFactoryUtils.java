begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDescUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPAnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|TypeCheckProcFactoryUtils
block|{
specifier|static
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|rewriteInToOR
parameter_list|(
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|inOperands
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ExprNodeDesc
name|columnDesc
init|=
name|inOperands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|orOperands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|inOperands
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ExprNodeDesc
name|andExpr
init|=
name|buildEqualsArr
argument_list|(
name|columnDesc
argument_list|,
name|inOperands
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|andExpr
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|orOperands
operator|.
name|add
argument_list|(
name|andExpr
argument_list|)
expr_stmt|;
block|}
return|return
name|orOperands
return|;
block|}
specifier|private
specifier|static
name|ExprNodeDesc
name|buildEqualsArr
parameter_list|(
name|ExprNodeDesc
name|columnDesc
parameter_list|,
name|ExprNodeDesc
name|exprNodeDesc
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|lNodes
init|=
name|asListOfNodes
argument_list|(
name|columnDesc
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|rNodes
init|=
name|asListOfNodes
argument_list|(
name|exprNodeDesc
argument_list|)
decl_stmt|;
if|if
condition|(
name|lNodes
operator|==
literal|null
operator|||
name|rNodes
operator|==
literal|null
condition|)
block|{
comment|// something went wrong
return|return
literal|null
return|;
block|}
if|if
condition|(
name|lNodes
operator|.
name|size
argument_list|()
operator|!=
name|rNodes
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_STRUCT
operator|.
name|getMsg
argument_list|(
name|columnDesc
operator|+
literal|" and "
operator|+
name|exprNodeDesc
argument_list|)
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lNodes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|buildEquals
argument_list|(
name|lNodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|rNodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|buildAnd
argument_list|(
name|ret
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ExprNodeGenericFuncDesc
name|buildEquals
parameter_list|(
name|ExprNodeDesc
name|columnDesc
parameter_list|,
name|ExprNodeDesc
name|valueDesc
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqual
argument_list|()
argument_list|,
literal|"="
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|columnDesc
argument_list|,
name|valueDesc
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ExprNodeDesc
name|buildAnd
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
operator|new
name|GenericUDFOPAnd
argument_list|()
argument_list|,
literal|"and"
argument_list|,
name|values
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|asListOfNodes
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
name|ExprNodeDesc
name|valueDesc
init|=
name|desc
decl_stmt|;
if|if
condition|(
name|ExprNodeDescUtils
operator|.
name|isStructUDF
argument_list|(
name|desc
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|valueChilds
init|=
operator|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|valueDesc
operator|)
operator|.
name|getChildren
argument_list|()
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|exprNodeDesc
range|:
name|valueChilds
control|)
block|{
if|if
condition|(
operator|!
name|isSafeExpression
argument_list|(
name|exprNodeDesc
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|valueChilds
return|;
block|}
if|if
condition|(
name|ExprNodeDescUtils
operator|.
name|isConstantStruct
argument_list|(
name|valueDesc
argument_list|)
condition|)
block|{
name|ExprNodeConstantDesc
name|valueConstDesc
init|=
operator|(
name|ExprNodeConstantDesc
operator|)
name|valueDesc
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|oldValues
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|valueConstDesc
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|StructTypeInfo
name|structTypeInfo
init|=
operator|(
name|StructTypeInfo
operator|)
name|valueConstDesc
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|structFieldInfos
init|=
name|structTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldValues
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|structFieldInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|oldValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
if|if
condition|(
name|isSafeExpression
argument_list|(
name|desc
argument_list|)
condition|)
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|desc
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isSafeExpression
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
name|TypeInfo
name|typeInfo
init|=
name|desc
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeInfo
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|isConstantOrColumn
argument_list|(
name|desc
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|desc
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
name|ExprNodeGenericFuncDesc
name|exprNodeGenericFuncDesc
init|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|desc
decl_stmt|;
if|if
condition|(
name|FunctionRegistry
operator|.
name|isConsistentWithinQuery
argument_list|(
name|exprNodeGenericFuncDesc
operator|.
name|getGenericUDF
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|ExprNodeDesc
name|child
range|:
name|exprNodeGenericFuncDesc
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isSafeExpression
argument_list|(
name|child
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isConstantOrColumn
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
return|return
name|desc
operator|instanceof
name|ExprNodeColumnDesc
operator|||
name|desc
operator|instanceof
name|ExprNodeConstantDesc
return|;
block|}
block|}
end_class

end_unit

