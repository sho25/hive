begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|cost
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollationTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
operator|.
name|JoinLeafPredicateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
operator|.
name|JoinPredicateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveRelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveRelDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveJoin
operator|.
name|MapJoinStreamingRelation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveRelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveTableScan
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_class
specifier|public
class|class
name|HiveAlgorithmsUtil
block|{
specifier|private
specifier|final
name|double
name|cpuCost
decl_stmt|;
specifier|private
specifier|final
name|double
name|netCost
decl_stmt|;
specifier|private
specifier|final
name|double
name|localFSWrite
decl_stmt|;
specifier|private
specifier|final
name|double
name|localFSRead
decl_stmt|;
specifier|private
specifier|final
name|double
name|hdfsWrite
decl_stmt|;
specifier|private
specifier|final
name|double
name|hdfsRead
decl_stmt|;
name|HiveAlgorithmsUtil
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|cpuCost
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_CBO_COST_MODEL_CPU
argument_list|)
argument_list|)
expr_stmt|;
name|netCost
operator|=
name|cpuCost
operator|*
name|Double
operator|.
name|parseDouble
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_CBO_COST_MODEL_NET
argument_list|)
argument_list|)
expr_stmt|;
name|localFSWrite
operator|=
name|netCost
operator|*
name|Double
operator|.
name|parseDouble
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_CBO_COST_MODEL_LFS_WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|localFSRead
operator|=
name|netCost
operator|*
name|Double
operator|.
name|parseDouble
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_CBO_COST_MODEL_LFS_READ
argument_list|)
argument_list|)
expr_stmt|;
name|hdfsWrite
operator|=
name|localFSWrite
operator|*
name|Double
operator|.
name|parseDouble
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_CBO_COST_MODEL_HDFS_WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|hdfsRead
operator|=
name|localFSRead
operator|*
name|Double
operator|.
name|parseDouble
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_CBO_COST_MODEL_HDFS_READ
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|RelOptCost
name|computeCardinalityBasedCost
parameter_list|(
name|HiveRelNode
name|hr
parameter_list|)
block|{
return|return
operator|new
name|HiveCost
argument_list|(
name|hr
operator|.
name|getRows
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
name|HiveCost
name|computeScanCost
parameter_list|(
name|double
name|cardinality
parameter_list|,
name|double
name|avgTupleSize
parameter_list|)
block|{
return|return
operator|new
name|HiveCost
argument_list|(
name|cardinality
argument_list|,
literal|0
argument_list|,
name|hdfsRead
operator|*
name|cardinality
operator|*
name|avgTupleSize
argument_list|)
return|;
block|}
specifier|public
name|double
name|computeSortMergeCPUCost
parameter_list|(
name|ImmutableList
argument_list|<
name|Double
argument_list|>
name|cardinalities
parameter_list|,
name|ImmutableBitSet
name|sorted
parameter_list|)
block|{
comment|// Sort-merge join
name|double
name|cpuCost
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cardinalities
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|double
name|cardinality
init|=
name|cardinalities
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sorted
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
comment|// Sort cost
name|cpuCost
operator|+=
name|computeSortCPUCost
argument_list|(
name|cardinality
argument_list|)
expr_stmt|;
block|}
comment|// Merge cost
name|cpuCost
operator|+=
name|cardinality
operator|*
name|cpuCost
expr_stmt|;
block|}
return|return
name|cpuCost
return|;
block|}
specifier|public
name|double
name|computeSortCPUCost
parameter_list|(
name|Double
name|cardinality
parameter_list|)
block|{
return|return
name|cardinality
operator|*
name|Math
operator|.
name|log
argument_list|(
name|cardinality
argument_list|)
operator|*
name|cpuCost
return|;
block|}
specifier|public
name|double
name|computeSortMergeIOCost
parameter_list|(
name|ImmutableList
argument_list|<
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
name|relationInfos
parameter_list|)
block|{
comment|// Sort-merge join
name|double
name|ioCost
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|relationInfo
range|:
name|relationInfos
control|)
block|{
name|ioCost
operator|+=
name|computeSortIOCost
argument_list|(
name|relationInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|ioCost
return|;
block|}
specifier|public
name|double
name|computeSortIOCost
parameter_list|(
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|relationInfo
parameter_list|)
block|{
comment|// Sort-merge join
name|double
name|ioCost
init|=
literal|0.0
decl_stmt|;
name|double
name|cardinality
init|=
name|relationInfo
operator|.
name|left
decl_stmt|;
name|double
name|averageTupleSize
init|=
name|relationInfo
operator|.
name|right
decl_stmt|;
comment|// Write cost
name|ioCost
operator|+=
name|cardinality
operator|*
name|averageTupleSize
operator|*
name|localFSWrite
expr_stmt|;
comment|// Read cost
name|ioCost
operator|+=
name|cardinality
operator|*
name|averageTupleSize
operator|*
name|localFSRead
expr_stmt|;
comment|// Net transfer cost
name|ioCost
operator|+=
name|cardinality
operator|*
name|averageTupleSize
operator|*
name|netCost
expr_stmt|;
return|return
name|ioCost
return|;
block|}
specifier|public
specifier|static
name|double
name|computeMapJoinCPUCost
parameter_list|(
name|ImmutableList
argument_list|<
name|Double
argument_list|>
name|cardinalities
parameter_list|,
name|ImmutableBitSet
name|streaming
parameter_list|)
block|{
comment|// Hash-join
name|double
name|cpuCost
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cardinalities
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|double
name|cardinality
init|=
name|cardinalities
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|streaming
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|cpuCost
operator|+=
name|cardinality
expr_stmt|;
block|}
name|cpuCost
operator|+=
name|cardinality
operator|*
name|cpuCost
expr_stmt|;
block|}
return|return
name|cpuCost
return|;
block|}
specifier|public
name|double
name|computeMapJoinIOCost
parameter_list|(
name|ImmutableList
argument_list|<
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
name|relationInfos
parameter_list|,
name|ImmutableBitSet
name|streaming
parameter_list|,
name|int
name|parallelism
parameter_list|)
block|{
comment|// Hash-join
name|double
name|ioCost
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|relationInfos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|double
name|cardinality
init|=
name|relationInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|left
decl_stmt|;
name|double
name|averageTupleSize
init|=
name|relationInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|right
decl_stmt|;
if|if
condition|(
operator|!
name|streaming
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|ioCost
operator|+=
name|cardinality
operator|*
name|averageTupleSize
operator|*
name|netCost
operator|*
name|parallelism
expr_stmt|;
block|}
block|}
return|return
name|ioCost
return|;
block|}
specifier|public
name|double
name|computeBucketMapJoinCPUCost
parameter_list|(
name|ImmutableList
argument_list|<
name|Double
argument_list|>
name|cardinalities
parameter_list|,
name|ImmutableBitSet
name|streaming
parameter_list|)
block|{
comment|// Hash-join
name|double
name|cpuCost
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cardinalities
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|double
name|cardinality
init|=
name|cardinalities
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|streaming
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|cpuCost
operator|+=
name|cardinality
operator|*
name|cpuCost
expr_stmt|;
block|}
name|cpuCost
operator|+=
name|cardinality
operator|*
name|cpuCost
expr_stmt|;
block|}
return|return
name|cpuCost
return|;
block|}
specifier|public
name|double
name|computeBucketMapJoinIOCost
parameter_list|(
name|ImmutableList
argument_list|<
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
name|relationInfos
parameter_list|,
name|ImmutableBitSet
name|streaming
parameter_list|,
name|int
name|parallelism
parameter_list|)
block|{
comment|// Hash-join
name|double
name|ioCost
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|relationInfos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|double
name|cardinality
init|=
name|relationInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|left
decl_stmt|;
name|double
name|averageTupleSize
init|=
name|relationInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|right
decl_stmt|;
if|if
condition|(
operator|!
name|streaming
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|ioCost
operator|+=
name|cardinality
operator|*
name|averageTupleSize
operator|*
name|netCost
operator|*
name|parallelism
expr_stmt|;
block|}
block|}
return|return
name|ioCost
return|;
block|}
specifier|public
specifier|static
name|double
name|computeSMBMapJoinCPUCost
parameter_list|(
name|ImmutableList
argument_list|<
name|Double
argument_list|>
name|cardinalities
parameter_list|)
block|{
comment|// Hash-join
name|double
name|cpuCost
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cardinalities
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|cpuCost
operator|+=
name|cardinalities
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|*
name|cpuCost
expr_stmt|;
block|}
return|return
name|cpuCost
return|;
block|}
specifier|public
name|double
name|computeSMBMapJoinIOCost
parameter_list|(
name|ImmutableList
argument_list|<
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
name|relationInfos
parameter_list|,
name|ImmutableBitSet
name|streaming
parameter_list|,
name|int
name|parallelism
parameter_list|)
block|{
comment|// Hash-join
name|double
name|ioCost
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|relationInfos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|double
name|cardinality
init|=
name|relationInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|left
decl_stmt|;
name|double
name|averageTupleSize
init|=
name|relationInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|right
decl_stmt|;
if|if
condition|(
operator|!
name|streaming
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|ioCost
operator|+=
name|cardinality
operator|*
name|averageTupleSize
operator|*
name|netCost
operator|*
name|parallelism
expr_stmt|;
block|}
block|}
return|return
name|ioCost
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isFittingIntoMemory
parameter_list|(
name|Double
name|maxSize
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|int
name|buckets
parameter_list|)
block|{
name|Double
name|currentMemory
init|=
name|RelMetadataQuery
operator|.
name|instance
argument_list|()
operator|.
name|cumulativeMemoryWithinPhase
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentMemory
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|currentMemory
operator|/
name|buckets
operator|>
name|maxSize
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|ImmutableList
argument_list|<
name|RelCollation
argument_list|>
name|getJoinCollation
parameter_list|(
name|JoinPredicateInfo
name|joinPredInfo
parameter_list|,
name|MapJoinStreamingRelation
name|streamingRelation
parameter_list|)
block|{
comment|// Compute collations
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelFieldCollation
argument_list|>
name|collationListBuilder
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelFieldCollation
argument_list|>
argument_list|()
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelFieldCollation
argument_list|>
name|leftCollationListBuilder
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelFieldCollation
argument_list|>
argument_list|()
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelFieldCollation
argument_list|>
name|rightCollationListBuilder
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelFieldCollation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|joinPredInfo
operator|.
name|getEquiJoinPredicateElements
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JoinLeafPredicateInfo
name|joinLeafPredInfo
init|=
name|joinPredInfo
operator|.
name|getEquiJoinPredicateElements
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|leftPos
range|:
name|joinLeafPredInfo
operator|.
name|getProjsFromLeftPartOfJoinKeysInJoinSchema
argument_list|()
control|)
block|{
specifier|final
name|RelFieldCollation
name|leftFieldCollation
init|=
operator|new
name|RelFieldCollation
argument_list|(
name|leftPos
argument_list|)
decl_stmt|;
name|collationListBuilder
operator|.
name|add
argument_list|(
name|leftFieldCollation
argument_list|)
expr_stmt|;
name|leftCollationListBuilder
operator|.
name|add
argument_list|(
name|leftFieldCollation
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|rightPos
range|:
name|joinLeafPredInfo
operator|.
name|getProjsFromRightPartOfJoinKeysInJoinSchema
argument_list|()
control|)
block|{
specifier|final
name|RelFieldCollation
name|rightFieldCollation
init|=
operator|new
name|RelFieldCollation
argument_list|(
name|rightPos
argument_list|)
decl_stmt|;
name|collationListBuilder
operator|.
name|add
argument_list|(
name|rightFieldCollation
argument_list|)
expr_stmt|;
name|rightCollationListBuilder
operator|.
name|add
argument_list|(
name|rightFieldCollation
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Return join collations
specifier|final
name|ImmutableList
argument_list|<
name|RelCollation
argument_list|>
name|collation
decl_stmt|;
switch|switch
condition|(
name|streamingRelation
condition|)
block|{
case|case
name|LEFT_RELATION
case|:
name|collation
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|RelCollationTraitDef
operator|.
name|INSTANCE
operator|.
name|canonize
argument_list|(
operator|new
name|HiveRelCollation
argument_list|(
name|leftCollationListBuilder
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|RIGHT_RELATION
case|:
name|collation
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|RelCollationTraitDef
operator|.
name|INSTANCE
operator|.
name|canonize
argument_list|(
operator|new
name|HiveRelCollation
argument_list|(
name|rightCollationListBuilder
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|collation
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|RelCollationTraitDef
operator|.
name|INSTANCE
operator|.
name|canonize
argument_list|(
operator|new
name|HiveRelCollation
argument_list|(
name|collationListBuilder
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|collation
return|;
block|}
specifier|public
specifier|static
name|RelDistribution
name|getJoinRedistribution
parameter_list|(
name|JoinPredicateInfo
name|joinPredInfo
parameter_list|)
block|{
comment|// Compute distribution
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|>
name|keysListBuilder
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|joinPredInfo
operator|.
name|getEquiJoinPredicateElements
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JoinLeafPredicateInfo
name|joinLeafPredInfo
init|=
name|joinPredInfo
operator|.
name|getEquiJoinPredicateElements
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|leftPos
range|:
name|joinLeafPredInfo
operator|.
name|getProjsFromLeftPartOfJoinKeysInJoinSchema
argument_list|()
control|)
block|{
name|keysListBuilder
operator|.
name|add
argument_list|(
name|leftPos
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|rightPos
range|:
name|joinLeafPredInfo
operator|.
name|getProjsFromRightPartOfJoinKeysInJoinSchema
argument_list|()
control|)
block|{
name|keysListBuilder
operator|.
name|add
argument_list|(
name|rightPos
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|HiveRelDistribution
argument_list|(
name|RelDistribution
operator|.
name|Type
operator|.
name|HASH_DISTRIBUTED
argument_list|,
name|keysListBuilder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RelDistribution
name|getJoinDistribution
parameter_list|(
name|JoinPredicateInfo
name|joinPredInfo
parameter_list|,
name|MapJoinStreamingRelation
name|streamingRelation
parameter_list|)
block|{
comment|// Compute distribution
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|>
name|leftKeysListBuilder
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|>
name|rightKeysListBuilder
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|joinPredInfo
operator|.
name|getEquiJoinPredicateElements
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JoinLeafPredicateInfo
name|joinLeafPredInfo
init|=
name|joinPredInfo
operator|.
name|getEquiJoinPredicateElements
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|leftPos
range|:
name|joinLeafPredInfo
operator|.
name|getProjsFromLeftPartOfJoinKeysInJoinSchema
argument_list|()
control|)
block|{
name|leftKeysListBuilder
operator|.
name|add
argument_list|(
name|leftPos
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|rightPos
range|:
name|joinLeafPredInfo
operator|.
name|getProjsFromRightPartOfJoinKeysInJoinSchema
argument_list|()
control|)
block|{
name|rightKeysListBuilder
operator|.
name|add
argument_list|(
name|rightPos
argument_list|)
expr_stmt|;
block|}
block|}
name|RelDistribution
name|distribution
init|=
literal|null
decl_stmt|;
comment|// Keep buckets from the streaming relation
if|if
condition|(
name|streamingRelation
operator|==
name|MapJoinStreamingRelation
operator|.
name|LEFT_RELATION
condition|)
block|{
name|distribution
operator|=
operator|new
name|HiveRelDistribution
argument_list|(
name|RelDistribution
operator|.
name|Type
operator|.
name|HASH_DISTRIBUTED
argument_list|,
name|leftKeysListBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|streamingRelation
operator|==
name|MapJoinStreamingRelation
operator|.
name|RIGHT_RELATION
condition|)
block|{
name|distribution
operator|=
operator|new
name|HiveRelDistribution
argument_list|(
name|RelDistribution
operator|.
name|Type
operator|.
name|HASH_DISTRIBUTED
argument_list|,
name|rightKeysListBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|distribution
return|;
block|}
specifier|public
specifier|static
name|Double
name|getJoinMemory
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
return|return
name|getJoinMemory
argument_list|(
name|join
argument_list|,
name|join
operator|.
name|getStreamingSide
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Double
name|getJoinMemory
parameter_list|(
name|HiveJoin
name|join
parameter_list|,
name|MapJoinStreamingRelation
name|streamingSide
parameter_list|)
block|{
name|Double
name|memory
init|=
literal|0.0
decl_stmt|;
name|RelMetadataQuery
name|mq
init|=
name|RelMetadataQuery
operator|.
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
name|streamingSide
operator|==
name|MapJoinStreamingRelation
operator|.
name|NONE
operator|||
name|streamingSide
operator|==
name|MapJoinStreamingRelation
operator|.
name|RIGHT_RELATION
condition|)
block|{
comment|// Left side
specifier|final
name|Double
name|leftAvgRowSize
init|=
name|mq
operator|.
name|getAverageRowSize
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Double
name|leftRowCount
init|=
name|mq
operator|.
name|getRowCount
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftAvgRowSize
operator|==
literal|null
operator|||
name|leftRowCount
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|memory
operator|+=
name|leftAvgRowSize
operator|*
name|leftRowCount
expr_stmt|;
block|}
if|if
condition|(
name|streamingSide
operator|==
name|MapJoinStreamingRelation
operator|.
name|NONE
operator|||
name|streamingSide
operator|==
name|MapJoinStreamingRelation
operator|.
name|LEFT_RELATION
condition|)
block|{
comment|// Right side
specifier|final
name|Double
name|rightAvgRowSize
init|=
name|mq
operator|.
name|getAverageRowSize
argument_list|(
name|join
operator|.
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Double
name|rightRowCount
init|=
name|mq
operator|.
name|getRowCount
argument_list|(
name|join
operator|.
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rightAvgRowSize
operator|==
literal|null
operator|||
name|rightRowCount
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|memory
operator|+=
name|rightAvgRowSize
operator|*
name|rightRowCount
expr_stmt|;
block|}
return|return
name|memory
return|;
block|}
specifier|public
specifier|static
name|Integer
name|getSplitCountWithRepartition
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
specifier|final
name|Double
name|maxSplitSize
init|=
name|join
operator|.
name|getCluster
argument_list|()
operator|.
name|getPlanner
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|unwrap
argument_list|(
name|HiveAlgorithmsConf
operator|.
name|class
argument_list|)
operator|.
name|getMaxSplitSize
argument_list|()
decl_stmt|;
comment|// We repartition: new number of splits
name|RelMetadataQuery
name|mq
init|=
name|RelMetadataQuery
operator|.
name|instance
argument_list|()
decl_stmt|;
specifier|final
name|Double
name|averageRowSize
init|=
name|mq
operator|.
name|getAverageRowSize
argument_list|(
name|join
argument_list|)
decl_stmt|;
specifier|final
name|Double
name|rowCount
init|=
name|mq
operator|.
name|getRowCount
argument_list|(
name|join
argument_list|)
decl_stmt|;
if|if
condition|(
name|averageRowSize
operator|==
literal|null
operator|||
name|rowCount
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Double
name|totalSize
init|=
name|averageRowSize
operator|*
name|rowCount
decl_stmt|;
specifier|final
name|Double
name|splitCount
init|=
name|totalSize
operator|/
name|maxSplitSize
decl_stmt|;
return|return
name|splitCount
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Integer
name|getSplitCountWithoutRepartition
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
name|RelNode
name|largeInput
decl_stmt|;
if|if
condition|(
name|join
operator|.
name|getStreamingSide
argument_list|()
operator|==
name|MapJoinStreamingRelation
operator|.
name|LEFT_RELATION
condition|)
block|{
name|largeInput
operator|=
name|join
operator|.
name|getLeft
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|join
operator|.
name|getStreamingSide
argument_list|()
operator|==
name|MapJoinStreamingRelation
operator|.
name|RIGHT_RELATION
condition|)
block|{
name|largeInput
operator|=
name|join
operator|.
name|getRight
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
return|return
name|RelMetadataQuery
operator|.
name|instance
argument_list|()
operator|.
name|splitCount
argument_list|(
name|largeInput
argument_list|)
return|;
block|}
block|}
end_class

end_unit

