begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_comment
comment|/**  * ExprNodeEvaluator.  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ExprNodeEvaluator
parameter_list|<
name|T
extends|extends
name|ExprNodeDesc
parameter_list|>
block|{
specifier|protected
specifier|final
name|T
name|expr
decl_stmt|;
specifier|protected
name|ObjectInspector
name|outputOI
decl_stmt|;
specifier|protected
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|ExprNodeEvaluator
parameter_list|(
name|T
name|expr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|expr
operator|=
name|expr
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
comment|/**    * Return child evaluators if exist    */
specifier|public
name|T
name|getExpr
parameter_list|()
block|{
return|return
name|expr
return|;
block|}
comment|/**    * Initialize should be called once and only once. Return the ObjectInspector    * for the return value, given the rowInspector.    */
specifier|public
specifier|abstract
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
name|rowInspector
parameter_list|)
throws|throws
name|HiveException
function_decl|;
comment|/**    * Return initialized ObjectInspector. If it's not initialized, throws runtime exception    */
specifier|public
name|ObjectInspector
name|getOutputOI
parameter_list|()
block|{
if|if
condition|(
name|outputOI
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Evaluator is not initialized"
argument_list|)
throw|;
block|}
return|return
name|outputOI
return|;
block|}
specifier|private
specifier|transient
name|int
name|version
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|transient
name|Object
name|evaluation
decl_stmt|;
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Object
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
name|evaluate
argument_list|(
name|row
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * Evaluate the expression given the row. This method should use the    * rowInspector passed in from initialize to inspect the row object. The    * return value will be inspected by the return value of initialize.    * If this evaluator is referenced by others, store it for them    */
specifier|protected
name|Object
name|evaluate
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|version
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|version
operator|<
literal|0
operator|||
name|version
operator|!=
name|this
operator|.
name|version
condition|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|evaluation
operator|=
name|_evaluate
argument_list|(
name|row
argument_list|,
name|version
argument_list|)
return|;
block|}
return|return
name|evaluation
return|;
block|}
comment|/**    * Evaluate value    */
specifier|protected
specifier|abstract
name|Object
name|_evaluate
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|version
parameter_list|)
throws|throws
name|HiveException
function_decl|;
comment|/**    * Return whether this node (and all children nodes) are deterministic.    */
specifier|public
name|boolean
name|isDeterministic
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**    * Return whether this node (or any children nodes) are stateful.    */
specifier|public
name|boolean
name|isStateful
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Return child evaluators if exist    */
specifier|public
name|ExprNodeEvaluator
index|[]
name|getChildren
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ExprNodeEvaluator["
operator|+
name|expr
operator|+
literal|"]"
return|;
block|}
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
block|}
end_class

end_unit

