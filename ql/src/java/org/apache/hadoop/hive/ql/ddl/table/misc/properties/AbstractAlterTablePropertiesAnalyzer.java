begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|misc
operator|.
name|properties
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|EnvironmentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLSemanticAnalyzerFactory
operator|.
name|DDLType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|AbstractAlterTableAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|AbstractAlterTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|DefaultConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|NotNullConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
import|;
end_import

begin_comment
comment|/**  * Analyzer for setting/unsetting the properties of table like entities commands.  */
end_comment

begin_class
annotation|@
name|DDLType
argument_list|(
name|types
operator|=
name|HiveParser
operator|.
name|TOK_ALTERTABLE_PROPERTIES
argument_list|)
specifier|public
specifier|abstract
class|class
name|AbstractAlterTablePropertiesAnalyzer
extends|extends
name|AbstractAlterTableAnalyzer
block|{
specifier|public
name|AbstractAlterTablePropertiesAnalyzer
parameter_list|(
name|QueryState
name|queryState
parameter_list|)
throws|throws
name|SemanticException
block|{
name|super
argument_list|(
name|queryState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|analyzeCommand
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|ASTNode
name|command
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
name|getProps
argument_list|(
call|(
name|ASTNode
call|)
argument_list|(
name|command
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|updateStats
init|=
name|validate
argument_list|(
name|tableName
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|EnvironmentContext
name|environmentContext
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|updateStats
condition|)
block|{
name|environmentContext
operator|=
operator|new
name|EnvironmentContext
argument_list|()
expr_stmt|;
name|environmentContext
operator|.
name|putToProperties
argument_list|(
name|StatsSetupConst
operator|.
name|STATS_GENERATED
argument_list|,
name|StatsSetupConst
operator|.
name|USER
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isToTxn
init|=
name|AcidUtils
operator|.
name|isTablePropertyTransactional
argument_list|(
name|properties
argument_list|)
operator|||
name|properties
operator|.
name|containsKey
argument_list|(
name|hive_metastoreConstants
operator|.
name|TABLE_TRANSACTIONAL_PROPERTIES
argument_list|)
decl_stmt|;
name|boolean
name|isExplicitStatsUpdate
init|=
name|updateStats
operator|&&
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|getTable
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|AbstractAlterTableDesc
name|desc
init|=
name|createDesc
argument_list|(
name|command
argument_list|,
name|tableName
argument_list|,
name|partitionSpec
argument_list|,
name|properties
argument_list|,
name|isToTxn
argument_list|,
name|isExplicitStatsUpdate
argument_list|,
name|environmentContext
argument_list|)
decl_stmt|;
name|addInputsOutputsAlterTable
argument_list|(
name|tableName
argument_list|,
name|partitionSpec
argument_list|,
name|desc
argument_list|,
name|desc
operator|.
name|getType
argument_list|()
argument_list|,
name|isToTxn
argument_list|)
expr_stmt|;
name|DDLWork
name|ddlWork
init|=
operator|new
name|DDLWork
argument_list|(
name|getInputs
argument_list|()
argument_list|,
name|getOutputs
argument_list|()
argument_list|,
name|desc
argument_list|)
decl_stmt|;
if|if
condition|(
name|isToTxn
condition|)
block|{
name|ddlWork
operator|.
name|setNeedLock
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Hmm... why don't many other operations here need locks?
block|}
if|if
condition|(
name|isToTxn
operator|||
name|isExplicitStatsUpdate
condition|)
block|{
name|setAcidDdlDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
name|rootTasks
operator|.
name|add
argument_list|(
name|TaskFactory
operator|.
name|get
argument_list|(
name|ddlWork
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return If it is executed after an update statistics command.    */
specifier|private
name|boolean
name|validate
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// We need to check if the properties are valid, especially for stats.
comment|// They might be changed via alter table .. update statistics or alter table .. set tblproperties.
comment|// If the property is not row_count or raw_data_size, it could not be changed through update statistics.
name|boolean
name|changeStats
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// we make sure that we do not change anything if there is anything wrong.
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|)
operator|||
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|StatsSetupConst
operator|.
name|RAW_DATA_SIZE
argument_list|)
condition|)
block|{
try|try
block|{
name|Long
operator|.
name|parseLong
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|changeStats
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"AlterTable "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" failed with value "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
literal|"external"
argument_list|)
operator|&&
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
comment|// if table is being modified to be external we need to make sure existing table
comment|// doesn't have enabled constraint since constraints are disallowed with such tables
if|if
condition|(
name|hasConstraintsEnabled
argument_list|(
name|tableName
operator|.
name|getTable
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_CSTR_SYNTAX
operator|.
name|getMsg
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Table: %s has constraints enabled. Please remove those constraints to change this property."
argument_list|,
name|tableName
operator|.
name|getNotEmptyDbTable
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|queryState
operator|.
name|getCommandType
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|ALTERTABLE_UPDATETABLESTATS
operator|.
name|getOperationName
argument_list|()
argument_list|)
operator|||
name|queryState
operator|.
name|getCommandType
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|ALTERTABLE_UPDATEPARTSTATS
operator|.
name|getOperationName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"AlterTable UpdateStats %s failed because the only valid keys are %s and %s"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
name|StatsSetupConst
operator|.
name|RAW_DATA_SIZE
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|changeStats
return|;
block|}
specifier|private
name|boolean
name|hasConstraintsEnabled
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|SemanticException
block|{
name|NotNullConstraint
name|notNullConstriant
init|=
literal|null
decl_stmt|;
name|DefaultConstraint
name|defaultConstraint
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// retrieve enabled NOT NULL constraint from metastore
name|notNullConstriant
operator|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getEnabledNotNullConstraints
argument_list|(
name|db
operator|.
name|getDatabaseCurrent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|defaultConstraint
operator|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getEnabledDefaultConstraints
argument_list|(
name|db
operator|.
name|getDatabaseCurrent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|SemanticException
condition|)
block|{
throw|throw
operator|(
name|SemanticException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
operator|(
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
operator|)
throw|;
block|}
block|}
return|return
operator|(
name|notNullConstriant
operator|!=
literal|null
operator|&&
operator|!
name|notNullConstriant
operator|.
name|getNotNullConstraints
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|defaultConstraint
operator|!=
literal|null
operator|&&
operator|!
name|defaultConstraint
operator|.
name|getDefaultConstraints
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
return|;
block|}
specifier|protected
specifier|abstract
name|AbstractAlterTableDesc
name|createDesc
parameter_list|(
name|ASTNode
name|command
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|,
name|boolean
name|isToTxn
parameter_list|,
name|boolean
name|isExplicitStatsUpdate
parameter_list|,
name|EnvironmentContext
name|environmentContext
parameter_list|)
throws|throws
name|SemanticException
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|isView
parameter_list|()
function_decl|;
block|}
end_class

end_unit

