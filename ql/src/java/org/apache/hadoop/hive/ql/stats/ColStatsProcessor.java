begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SetPartitionsStatsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FetchOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ColumnStatsDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FetchWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|InspectableObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ColStatsProcessor
implements|implements
name|IStatsProcessor
block|{
specifier|private
specifier|static
specifier|transient
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ColStatsProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|FetchOperator
name|ftOp
decl_stmt|;
specifier|private
name|FetchWork
name|fWork
decl_stmt|;
specifier|private
name|ColumnStatsDesc
name|colStatDesc
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|boolean
name|isStatsReliable
decl_stmt|;
specifier|public
name|ColStatsProcessor
parameter_list|(
name|ColumnStatsDesc
name|colStats
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|fWork
operator|=
name|colStats
operator|.
name|getFWork
argument_list|()
expr_stmt|;
name|colStatDesc
operator|=
name|colStats
expr_stmt|;
name|isStatsReliable
operator|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_STATS_RELIABLE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|CompilationOpContext
name|opContext
parameter_list|)
block|{
try|try
block|{
name|fWork
operator|.
name|initializeForFetch
argument_list|(
name|opContext
argument_list|)
expr_stmt|;
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ftOp
operator|=
operator|new
name|FetchOperator
argument_list|(
name|fWork
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|process
parameter_list|(
name|Hive
name|db
parameter_list|,
name|Table
name|tbl
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|persistColumnStats
argument_list|(
name|db
argument_list|,
name|tbl
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|constructColumnStatsFromPackedRows
parameter_list|(
name|Table
name|tbl1
parameter_list|)
throws|throws
name|HiveException
throws|,
name|MetaException
throws|,
name|IOException
block|{
name|Table
name|tbl
init|=
name|tbl1
decl_stmt|;
name|String
name|partName
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colName
init|=
name|colStatDesc
operator|.
name|getColName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colType
init|=
name|colStatDesc
operator|.
name|getColType
argument_list|()
decl_stmt|;
name|boolean
name|isTblLevel
init|=
name|colStatDesc
operator|.
name|isTblLevel
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|stats
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnStatistics
argument_list|>
argument_list|()
decl_stmt|;
name|InspectableObject
name|packedRow
decl_stmt|;
while|while
condition|(
operator|(
name|packedRow
operator|=
name|ftOp
operator|.
name|getNextRow
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|packedRow
operator|.
name|oi
operator|.
name|getCategory
argument_list|()
operator|!=
name|ObjectInspector
operator|.
name|Category
operator|.
name|STRUCT
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unexpected object type encountered while unpacking row"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|statsObjs
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|packedRow
operator|.
name|oi
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
name|soi
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|packedRow
operator|.
name|o
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partColSchema
init|=
name|tbl
operator|.
name|getPartCols
argument_list|()
decl_stmt|;
comment|// Partition columns are appended at end, we only care about stats column
name|int
name|numOfStatCols
init|=
name|isTblLevel
condition|?
name|fields
operator|.
name|size
argument_list|()
else|:
name|fields
operator|.
name|size
argument_list|()
operator|-
name|partColSchema
operator|.
name|size
argument_list|()
decl_stmt|;
assert|assert
name|list
operator|!=
literal|null
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfStatCols
condition|;
name|i
operator|++
control|)
block|{
name|StructField
name|structField
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|columnName
init|=
name|colName
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|columnType
init|=
name|colType
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|values
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
try|try
block|{
name|ColumnStatisticsObj
name|statObj
init|=
name|ColumnStatisticsObjTranslator
operator|.
name|readHiveStruct
argument_list|(
name|columnName
argument_list|,
name|columnType
argument_list|,
name|structField
argument_list|,
name|values
argument_list|)
decl_stmt|;
name|statsObjs
operator|.
name|add
argument_list|(
name|statObj
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|isStatsReliable
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Statistics collection failed while (hive.stats.reliable)"
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Because {} is infinite or NaN, we skip stats."
argument_list|,
name|columnName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|statsObjs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|isTblLevel
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Iterate over partition columns to figure out partition name
for|for
control|(
name|int
name|i
init|=
name|fields
operator|.
name|size
argument_list|()
operator|-
name|partColSchema
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|partVal
init|=
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|partVals
operator|.
name|add
argument_list|(
name|partVal
operator|==
literal|null
condition|?
comment|// could be null for default partition
name|this
operator|.
name|conf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|DEFAULTPARTITIONNAME
argument_list|)
else|:
name|partVal
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|partName
operator|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|partColSchema
argument_list|,
name|partVals
argument_list|)
expr_stmt|;
block|}
name|ColumnStatisticsDesc
name|statsDesc
init|=
name|buildColumnStatsDesc
argument_list|(
name|tbl
argument_list|,
name|partName
argument_list|,
name|isTblLevel
argument_list|)
decl_stmt|;
name|ColumnStatistics
name|colStats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|colStats
operator|.
name|setStatsDesc
argument_list|(
name|statsDesc
argument_list|)
expr_stmt|;
name|colStats
operator|.
name|setStatsObj
argument_list|(
name|statsObjs
argument_list|)
expr_stmt|;
name|stats
operator|.
name|add
argument_list|(
name|colStats
argument_list|)
expr_stmt|;
block|}
block|}
name|ftOp
operator|.
name|clearFetchContext
argument_list|()
expr_stmt|;
return|return
name|stats
return|;
block|}
specifier|private
name|ColumnStatisticsDesc
name|buildColumnStatsDesc
parameter_list|(
name|Table
name|table
parameter_list|,
name|String
name|partName
parameter_list|,
name|boolean
name|isTblLevel
parameter_list|)
block|{
name|String
name|dbName
init|=
name|table
operator|.
name|getDbName
argument_list|()
decl_stmt|;
assert|assert
name|dbName
operator|!=
literal|null
assert|;
name|ColumnStatisticsDesc
name|statsDesc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|()
decl_stmt|;
name|statsDesc
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setTableName
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setIsTblLevel
argument_list|(
name|isTblLevel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isTblLevel
condition|)
block|{
name|statsDesc
operator|.
name|setPartName
argument_list|(
name|partName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|statsDesc
operator|.
name|setPartName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|statsDesc
return|;
block|}
specifier|public
name|int
name|persistColumnStats
parameter_list|(
name|Hive
name|db
parameter_list|,
name|Table
name|tbl
parameter_list|)
throws|throws
name|HiveException
throws|,
name|MetaException
throws|,
name|IOException
block|{
comment|// Construct a column statistics object from the result
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|colStats
init|=
name|constructColumnStatsFromPackedRows
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
comment|// Persist the column statistics object to the metastore
comment|// Note, this function is shared for both table and partition column stats.
if|if
condition|(
name|colStats
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
name|SetPartitionsStatsRequest
name|request
init|=
operator|new
name|SetPartitionsStatsRequest
argument_list|(
name|colStats
argument_list|)
decl_stmt|;
name|request
operator|.
name|setNeedMerge
argument_list|(
name|colStatDesc
operator|.
name|isNeedMerge
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|setPartitionColumnStatistics
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDpPartSpecs
parameter_list|(
name|Collection
argument_list|<
name|Partition
argument_list|>
name|dpPartSpecs
parameter_list|)
block|{   }
block|}
end_class

end_unit

