begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
operator|.
name|InputFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|prepare
operator|.
name|RelOptTableImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollationTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistributions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
operator|.
name|Direction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
operator|.
name|NullDirection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelReferentialConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelReferentialConstraintImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalTableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|ColumnStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|IntPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|ForeignKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|ForeignKeyInfo
operator|.
name|ForeignKeyCol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|PartitionIterable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|PrimaryKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|UniqueConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|UniqueConstraint
operator|.
name|UniqueConstraintCol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|VirtualColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|translator
operator|.
name|ExprNodeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|ppr
operator|.
name|PartitionPruner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ColumnStatsList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PrunedPartitionList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ColStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Statistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Statistics
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|LogHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|RelOptHiveTable
implements|implements
name|RelOptTable
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|RelOptSchema
name|schema
decl_stmt|;
specifier|private
specifier|final
name|RelDataType
name|rowType
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|qualifiedTblName
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|Table
name|hiveTblMetadata
decl_stmt|;
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|ColumnInfo
argument_list|>
name|hiveNonPartitionCols
decl_stmt|;
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|ColumnInfo
argument_list|>
name|hivePartitionCols
decl_stmt|;
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|Integer
argument_list|,
name|ColumnInfo
argument_list|>
name|hiveNonPartitionColsMap
decl_stmt|;
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|Integer
argument_list|,
name|ColumnInfo
argument_list|>
name|hivePartitionColsMap
decl_stmt|;
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|VirtualColumn
argument_list|>
name|hiveVirtualCols
decl_stmt|;
specifier|private
specifier|final
name|int
name|noOfNonVirtualCols
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|keys
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|RelReferentialConstraint
argument_list|>
name|referentialConstraints
decl_stmt|;
specifier|final
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|private
name|double
name|rowCount
init|=
operator|-
literal|1
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|ColStatistics
argument_list|>
name|hiveColStatsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|PrunedPartitionList
name|partitionList
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PrunedPartitionList
argument_list|>
name|partitionCache
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ColumnStatsList
argument_list|>
name|colStatsCache
decl_stmt|;
name|AtomicInteger
name|noColsMissingStats
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RelOptHiveTable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|RelOptHiveTable
parameter_list|(
name|RelOptSchema
name|calciteSchema
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|qualifiedTblName
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|Table
name|hiveTblMetadata
parameter_list|,
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|hiveNonPartitionCols
parameter_list|,
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|hivePartitionCols
parameter_list|,
name|List
argument_list|<
name|VirtualColumn
argument_list|>
name|hiveVirtualCols
parameter_list|,
name|HiveConf
name|hconf
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|PrunedPartitionList
argument_list|>
name|partitionCache
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ColumnStatsList
argument_list|>
name|colStatsCache
parameter_list|,
name|AtomicInteger
name|noColsMissingStats
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|calciteSchema
expr_stmt|;
name|this
operator|.
name|qualifiedTblName
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|qualifiedTblName
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|this
operator|.
name|qualifiedTblName
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rowType
operator|=
name|rowType
expr_stmt|;
name|this
operator|.
name|hiveTblMetadata
operator|=
name|hiveTblMetadata
expr_stmt|;
name|this
operator|.
name|hiveNonPartitionCols
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|hiveNonPartitionCols
argument_list|)
expr_stmt|;
name|this
operator|.
name|hiveNonPartitionColsMap
operator|=
name|HiveCalciteUtil
operator|.
name|getColInfoMap
argument_list|(
name|hiveNonPartitionCols
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|hivePartitionCols
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|hivePartitionCols
argument_list|)
expr_stmt|;
name|this
operator|.
name|hivePartitionColsMap
operator|=
name|HiveCalciteUtil
operator|.
name|getColInfoMap
argument_list|(
name|hivePartitionCols
argument_list|,
name|hiveNonPartitionColsMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|noOfNonVirtualCols
operator|=
name|hiveNonPartitionCols
operator|.
name|size
argument_list|()
operator|+
name|hivePartitionCols
operator|.
name|size
argument_list|()
expr_stmt|;
name|this
operator|.
name|hiveVirtualCols
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|hiveVirtualCols
argument_list|)
expr_stmt|;
name|this
operator|.
name|hiveConf
operator|=
name|hconf
expr_stmt|;
name|this
operator|.
name|partitionCache
operator|=
name|partitionCache
expr_stmt|;
name|this
operator|.
name|colStatsCache
operator|=
name|colStatsCache
expr_stmt|;
name|this
operator|.
name|noColsMissingStats
operator|=
name|noColsMissingStats
expr_stmt|;
name|this
operator|.
name|keys
operator|=
name|generateKeys
argument_list|()
expr_stmt|;
name|this
operator|.
name|referentialConstraints
operator|=
name|generateReferentialConstraints
argument_list|()
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getQualifiedName
parameter_list|()
block|{
return|return
name|qualifiedTblName
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|getRowType
parameter_list|()
block|{
return|return
name|rowType
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptSchema
name|getRelOptSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
annotation|@
name|Override
specifier|public
name|Expression
name|getExpression
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptTable
name|extend
parameter_list|(
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|extendedFields
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ColumnStrategy
argument_list|>
name|getColumnStrategies
parameter_list|()
block|{
return|return
name|RelOptTableImpl
operator|.
name|columnStrategies
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|RelOptHiveTable
name|copy
parameter_list|(
name|RelDataType
name|newRowType
parameter_list|)
block|{
comment|// 1. Build map of column name to col index of original schema
comment|// Assumption: Hive Table can not contain duplicate column names
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|nameToColIndxMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelDataTypeField
name|f
range|:
name|this
operator|.
name|rowType
operator|.
name|getFieldList
argument_list|()
control|)
block|{
name|nameToColIndxMap
operator|.
name|put
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|f
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// 2. Build nonPart/Part/Virtual column info for new RowSchema
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|newHiveNonPartitionCols
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|newHivePartitionCols
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|VirtualColumn
argument_list|>
name|newHiveVirtualCols
init|=
operator|new
name|ArrayList
argument_list|<
name|VirtualColumn
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|VirtualColumn
argument_list|>
name|virtualColInfoMap
init|=
name|HiveCalciteUtil
operator|.
name|getVColsMap
argument_list|(
name|this
operator|.
name|hiveVirtualCols
argument_list|,
name|this
operator|.
name|noOfNonVirtualCols
argument_list|)
decl_stmt|;
name|Integer
name|originalColIndx
decl_stmt|;
name|ColumnInfo
name|cInfo
decl_stmt|;
name|VirtualColumn
name|vc
decl_stmt|;
for|for
control|(
name|RelDataTypeField
name|f
range|:
name|newRowType
operator|.
name|getFieldList
argument_list|()
control|)
block|{
name|originalColIndx
operator|=
name|nameToColIndxMap
operator|.
name|get
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|cInfo
operator|=
name|hiveNonPartitionColsMap
operator|.
name|get
argument_list|(
name|originalColIndx
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|newHiveNonPartitionCols
operator|.
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
name|cInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|cInfo
operator|=
name|hivePartitionColsMap
operator|.
name|get
argument_list|(
name|originalColIndx
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|newHivePartitionCols
operator|.
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
name|cInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|vc
operator|=
name|virtualColInfoMap
operator|.
name|get
argument_list|(
name|originalColIndx
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|newHiveVirtualCols
operator|.
name|add
argument_list|(
name|vc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Copy encountered a column not seen in original TS"
argument_list|)
throw|;
block|}
block|}
comment|// 3. Build new Table
return|return
operator|new
name|RelOptHiveTable
argument_list|(
name|this
operator|.
name|schema
argument_list|,
name|this
operator|.
name|qualifiedTblName
argument_list|,
name|newRowType
argument_list|,
name|this
operator|.
name|hiveTblMetadata
argument_list|,
name|newHiveNonPartitionCols
argument_list|,
name|newHivePartitionCols
argument_list|,
name|newHiveVirtualCols
argument_list|,
name|this
operator|.
name|hiveConf
argument_list|,
name|this
operator|.
name|partitionCache
argument_list|,
name|this
operator|.
name|colStatsCache
argument_list|,
name|this
operator|.
name|noColsMissingStats
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isKey
parameter_list|(
name|ImmutableBitSet
name|columns
parameter_list|)
block|{
for|for
control|(
name|ImmutableBitSet
name|key
range|:
name|keys
control|)
block|{
if|if
condition|(
name|columns
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RelReferentialConstraint
argument_list|>
name|getReferentialConstraints
parameter_list|()
block|{
return|return
name|referentialConstraints
return|;
block|}
specifier|private
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|generateKeys
parameter_list|()
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|ImmutableBitSet
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// First PK
specifier|final
name|PrimaryKeyInfo
name|pki
decl_stmt|;
try|try
block|{
name|pki
operator|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getReliablePrimaryKeys
argument_list|(
name|hiveTblMetadata
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveTblMetadata
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|pki
operator|.
name|getColNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ImmutableBitSet
operator|.
name|Builder
name|keys
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|pkColName
range|:
name|pki
operator|.
name|getColNames
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|pkPos
decl_stmt|;
for|for
control|(
name|pkPos
operator|=
literal|0
init|;
name|pkPos
operator|<
name|rowType
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|pkPos
operator|++
control|)
block|{
name|String
name|colName
init|=
name|rowType
operator|.
name|getFieldNames
argument_list|()
operator|.
name|get
argument_list|(
name|pkPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|pkColName
operator|.
name|equals
argument_list|(
name|colName
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|pkPos
operator|==
name|rowType
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Column for primary key definition "
operator|+
name|pkColName
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
name|keys
operator|.
name|set
argument_list|(
name|pkPos
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|add
argument_list|(
name|keys
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Then UKs
specifier|final
name|UniqueConstraint
name|uki
decl_stmt|;
try|try
block|{
name|uki
operator|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getReliableUniqueConstraints
argument_list|(
name|hiveTblMetadata
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveTblMetadata
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|List
argument_list|<
name|UniqueConstraintCol
argument_list|>
name|ukCols
range|:
name|uki
operator|.
name|getUniqueConstraints
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|ImmutableBitSet
operator|.
name|Builder
name|keys
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|UniqueConstraintCol
name|ukCol
range|:
name|ukCols
control|)
block|{
name|int
name|ukPos
decl_stmt|;
for|for
control|(
name|ukPos
operator|=
literal|0
init|;
name|ukPos
operator|<
name|rowType
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|ukPos
operator|++
control|)
block|{
name|String
name|colName
init|=
name|rowType
operator|.
name|getFieldNames
argument_list|()
operator|.
name|get
argument_list|(
name|ukPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|ukCol
operator|.
name|colName
operator|.
name|equals
argument_list|(
name|colName
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|ukPos
operator|==
name|rowType
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Column for unique constraint definition "
operator|+
name|ukCol
operator|.
name|colName
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
name|keys
operator|.
name|set
argument_list|(
name|ukPos
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|add
argument_list|(
name|keys
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|List
argument_list|<
name|RelReferentialConstraint
argument_list|>
name|generateReferentialConstraints
parameter_list|()
block|{
specifier|final
name|ForeignKeyInfo
name|fki
decl_stmt|;
try|try
block|{
name|fki
operator|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getReliableForeignKeys
argument_list|(
name|hiveTblMetadata
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveTblMetadata
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelReferentialConstraint
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|ForeignKeyCol
argument_list|>
name|fkCols
range|:
name|fki
operator|.
name|getForeignKeys
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|foreignKeyTableQualifiedName
init|=
name|qualifiedTblName
decl_stmt|;
name|String
name|parentDatabaseName
init|=
name|fkCols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|parentDatabaseName
decl_stmt|;
name|String
name|parentTableName
init|=
name|fkCols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|parentTableName
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parentTableQualifiedName
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentDatabaseName
operator|!=
literal|null
operator|&&
operator|!
name|parentDatabaseName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|parentTableQualifiedName
operator|.
name|add
argument_list|(
name|parentDatabaseName
argument_list|)
expr_stmt|;
block|}
name|parentTableQualifiedName
operator|.
name|add
argument_list|(
name|parentTableName
argument_list|)
expr_stmt|;
name|Table
name|parentTab
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// TODO: We have a cache for Table objects in SemanticAnalyzer::getTableObjectByName()
comment|// We need to move that cache elsewhere and use it from places like this.
name|parentTab
operator|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getTable
argument_list|(
name|parentDatabaseName
argument_list|,
name|parentTableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|parentTab
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Table for primary key not found: "
operator|+
literal|"databaseName: "
operator|+
name|parentDatabaseName
operator|+
literal|", "
operator|+
literal|"tableName: "
operator|+
name|parentTableName
argument_list|)
expr_stmt|;
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|IntPair
argument_list|>
name|keys
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|ForeignKeyCol
name|fkCol
range|:
name|fkCols
control|)
block|{
name|int
name|fkPos
decl_stmt|;
for|for
control|(
name|fkPos
operator|=
literal|0
init|;
name|fkPos
operator|<
name|rowType
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|fkPos
operator|++
control|)
block|{
name|String
name|fkColName
init|=
name|rowType
operator|.
name|getFieldNames
argument_list|()
operator|.
name|get
argument_list|(
name|fkPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|fkColName
operator|.
name|equals
argument_list|(
name|fkCol
operator|.
name|childColName
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|int
name|pkPos
decl_stmt|;
for|for
control|(
name|pkPos
operator|=
literal|0
init|;
name|pkPos
operator|<
name|parentTab
operator|.
name|getAllCols
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|pkPos
operator|++
control|)
block|{
name|String
name|pkColName
init|=
name|parentTab
operator|.
name|getAllCols
argument_list|()
operator|.
name|get
argument_list|(
name|pkPos
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|pkColName
operator|.
name|equals
argument_list|(
name|fkCol
operator|.
name|parentColName
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|fkPos
operator|==
name|rowType
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
operator|||
name|pkPos
operator|==
name|parentTab
operator|.
name|getAllCols
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Column for foreign key definition "
operator|+
name|fkCol
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
name|keys
operator|.
name|add
argument_list|(
name|IntPair
operator|.
name|of
argument_list|(
name|fkPos
argument_list|,
name|pkPos
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|add
argument_list|(
name|RelReferentialConstraintImpl
operator|.
name|of
argument_list|(
name|foreignKeyTableQualifiedName
argument_list|,
name|parentTableQualifiedName
argument_list|,
name|keys
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|toRel
parameter_list|(
name|ToRelContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|LogicalTableScan
argument_list|(
name|context
operator|.
name|getCluster
argument_list|()
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|arg0
parameter_list|)
block|{
return|return
name|arg0
operator|.
name|isInstance
argument_list|(
name|this
argument_list|)
condition|?
name|arg0
operator|.
name|cast
argument_list|(
name|this
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RelCollation
argument_list|>
name|getCollationList
parameter_list|()
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelFieldCollation
argument_list|>
name|collationList
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelFieldCollation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Order
name|sortColumn
range|:
name|this
operator|.
name|hiveTblMetadata
operator|.
name|getSortCols
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|hiveTblMetadata
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FieldSchema
name|field
init|=
name|this
operator|.
name|hiveTblMetadata
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|sortColumn
operator|.
name|getCol
argument_list|()
argument_list|)
condition|)
block|{
name|Direction
name|direction
decl_stmt|;
name|NullDirection
name|nullDirection
decl_stmt|;
if|if
condition|(
name|sortColumn
operator|.
name|getOrder
argument_list|()
operator|==
name|BaseSemanticAnalyzer
operator|.
name|HIVE_COLUMN_ORDER_ASC
condition|)
block|{
name|direction
operator|=
name|Direction
operator|.
name|ASCENDING
expr_stmt|;
name|nullDirection
operator|=
name|NullDirection
operator|.
name|FIRST
expr_stmt|;
block|}
else|else
block|{
name|direction
operator|=
name|Direction
operator|.
name|DESCENDING
expr_stmt|;
name|nullDirection
operator|=
name|NullDirection
operator|.
name|LAST
expr_stmt|;
block|}
name|collationList
operator|.
name|add
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
name|i
argument_list|,
name|direction
argument_list|,
name|nullDirection
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelCollation
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
name|RelCollationTraitDef
operator|.
name|INSTANCE
operator|.
name|canonize
argument_list|(
operator|new
name|HiveRelCollation
argument_list|(
name|collationList
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDistribution
name|getDistribution
parameter_list|()
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|>
name|columnPositions
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|bucketColumn
range|:
name|this
operator|.
name|hiveTblMetadata
operator|.
name|getBucketCols
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|hiveTblMetadata
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FieldSchema
name|field
init|=
name|this
operator|.
name|hiveTblMetadata
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|bucketColumn
argument_list|)
condition|)
block|{
name|columnPositions
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
operator|new
name|HiveRelDistribution
argument_list|(
name|RelDistribution
operator|.
name|Type
operator|.
name|HASH_DISTRIBUTED
argument_list|,
name|columnPositions
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getRowCount
parameter_list|()
block|{
if|if
condition|(
name|rowCount
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|partitionList
condition|)
block|{
comment|// we are here either unpartitioned table or partitioned table with no
comment|// predicates
name|computePartitionList
argument_list|(
name|hiveConf
argument_list|,
literal|null
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rowCount
operator|=
name|StatsUtils
operator|.
name|getNumRows
argument_list|(
name|hiveConf
argument_list|,
name|getNonPartColumns
argument_list|()
argument_list|,
name|hiveTblMetadata
argument_list|,
name|partitionList
argument_list|,
name|noColsMissingStats
argument_list|)
expr_stmt|;
block|}
return|return
name|rowCount
return|;
block|}
specifier|public
name|Table
name|getHiveTableMD
parameter_list|()
block|{
return|return
name|hiveTblMetadata
return|;
block|}
specifier|private
name|String
name|getColNamesForLogging
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|colLst
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|firstEntry
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|colName
range|:
name|colLst
control|)
block|{
if|if
condition|(
name|firstEntry
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|colName
argument_list|)
expr_stmt|;
name|firstEntry
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
operator|+
name|colName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|computePartitionList
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|RexNode
name|pruneNode
parameter_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
name|partOrVirtualCols
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|hiveTblMetadata
operator|.
name|isPartitioned
argument_list|()
operator|||
name|pruneNode
operator|==
literal|null
operator|||
name|InputFinder
operator|.
name|bits
argument_list|(
name|pruneNode
argument_list|)
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// there is no predicate on partitioning column, we need all partitions
comment|// in this case.
name|partitionList
operator|=
name|PartitionPruner
operator|.
name|prune
argument_list|(
name|hiveTblMetadata
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|,
name|getName
argument_list|()
argument_list|,
name|partitionCache
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// We have valid pruning expressions, only retrieve qualifying partitions
name|ExprNodeDesc
name|pruneExpr
init|=
name|pruneNode
operator|.
name|accept
argument_list|(
operator|new
name|ExprNodeConverter
argument_list|(
name|getName
argument_list|()
argument_list|,
name|getRowType
argument_list|()
argument_list|,
name|partOrVirtualCols
argument_list|,
name|this
operator|.
name|getRelOptSchema
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|partitionList
operator|=
name|PartitionPruner
operator|.
name|prune
argument_list|(
name|hiveTblMetadata
argument_list|,
name|pruneExpr
argument_list|,
name|conf
argument_list|,
name|getName
argument_list|()
argument_list|,
name|partitionCache
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|he
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|he
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|updateColStats
parameter_list|(
name|Set
argument_list|<
name|Integer
argument_list|>
name|projIndxLst
parameter_list|,
name|boolean
name|allowMissingStats
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nonPartColNamesThatRqrStats
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|nonPartColIndxsThatRqrStats
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partColNamesThatRqrStats
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|partColIndxsThatRqrStats
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|colNamesFailedStats
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// 1. Separate required columns to Non Partition and Partition Cols
name|ColumnInfo
name|tmp
decl_stmt|;
for|for
control|(
name|Integer
name|pi
range|:
name|projIndxLst
control|)
block|{
if|if
condition|(
name|hiveColStatsMap
operator|.
name|get
argument_list|(
name|pi
argument_list|)
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|tmp
operator|=
name|hiveNonPartitionColsMap
operator|.
name|get
argument_list|(
name|pi
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|nonPartColNamesThatRqrStats
operator|.
name|add
argument_list|(
name|tmp
operator|.
name|getInternalName
argument_list|()
argument_list|)
expr_stmt|;
name|nonPartColIndxsThatRqrStats
operator|.
name|add
argument_list|(
name|pi
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|tmp
operator|=
name|hivePartitionColsMap
operator|.
name|get
argument_list|(
name|pi
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|partColNamesThatRqrStats
operator|.
name|add
argument_list|(
name|tmp
operator|.
name|getInternalName
argument_list|()
argument_list|)
expr_stmt|;
name|partColIndxsThatRqrStats
operator|.
name|add
argument_list|(
name|pi
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|noColsMissingStats
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
name|String
name|logMsg
init|=
literal|"Unable to find Column Index: "
operator|+
name|pi
operator|+
literal|", in "
operator|+
name|hiveTblMetadata
operator|.
name|getCompleteName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|logMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|logMsg
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
literal|null
operator|==
name|partitionList
condition|)
block|{
comment|// We could be here either because its an unpartitioned table or because
comment|// there are no pruning predicates on a partitioned table.
name|computePartitionList
argument_list|(
name|hiveConf
argument_list|,
literal|null
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ColumnStatsList
name|colStatsCached
init|=
name|colStatsCache
operator|.
name|get
argument_list|(
name|partitionList
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|colStatsCached
operator|==
literal|null
condition|)
block|{
name|colStatsCached
operator|=
operator|new
name|ColumnStatsList
argument_list|()
expr_stmt|;
name|colStatsCache
operator|.
name|put
argument_list|(
name|partitionList
operator|.
name|getKey
argument_list|()
argument_list|,
name|colStatsCached
argument_list|)
expr_stmt|;
block|}
comment|// 2. Obtain Col Stats for Non Partition Cols
if|if
condition|(
name|nonPartColNamesThatRqrStats
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|ColStatistics
argument_list|>
name|hiveColStats
init|=
operator|new
name|ArrayList
argument_list|<
name|ColStatistics
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hiveTblMetadata
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
comment|// 2.1 Handle the case for unpartitioned table.
try|try
block|{
name|Statistics
name|stats
init|=
name|StatsUtils
operator|.
name|collectStatistics
argument_list|(
name|hiveConf
argument_list|,
literal|null
argument_list|,
name|hiveTblMetadata
argument_list|,
name|hiveNonPartitionCols
argument_list|,
name|nonPartColNamesThatRqrStats
argument_list|,
name|colStatsCached
argument_list|,
name|nonPartColNamesThatRqrStats
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|rowCount
operator|=
name|stats
operator|.
name|getNumRows
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|c
range|:
name|nonPartColNamesThatRqrStats
control|)
block|{
name|ColStatistics
name|cs
init|=
name|stats
operator|.
name|getColumnStatisticsFromColName
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|hiveColStats
operator|.
name|add
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
block|}
name|colStatsCached
operator|.
name|updateState
argument_list|(
name|stats
operator|.
name|getColumnStatsState
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2.1.1 Record Column Names that we needed stats for but couldn't
if|if
condition|(
name|hiveColStats
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|colNamesFailedStats
operator|.
name|addAll
argument_list|(
name|nonPartColNamesThatRqrStats
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hiveColStats
operator|.
name|size
argument_list|()
operator|!=
name|nonPartColNamesThatRqrStats
operator|.
name|size
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|setOfFiledCols
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|nonPartColNamesThatRqrStats
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|setOfObtainedColStats
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColStatistics
name|cs
range|:
name|hiveColStats
control|)
block|{
name|setOfObtainedColStats
operator|.
name|add
argument_list|(
name|cs
operator|.
name|getColumnName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setOfFiledCols
operator|.
name|removeAll
argument_list|(
name|setOfObtainedColStats
argument_list|)
expr_stmt|;
name|colNamesFailedStats
operator|.
name|addAll
argument_list|(
name|setOfFiledCols
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Column stats in hiveColStats might not be in the same order as the columns in
comment|// nonPartColNamesThatRqrStats. reorder hiveColStats so we can build hiveColStatsMap
comment|// using nonPartColIndxsThatRqrStats as below
name|Map
argument_list|<
name|String
argument_list|,
name|ColStatistics
argument_list|>
name|columnStatsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ColStatistics
argument_list|>
argument_list|(
name|hiveColStats
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ColStatistics
name|cs
range|:
name|hiveColStats
control|)
block|{
name|columnStatsMap
operator|.
name|put
argument_list|(
name|cs
operator|.
name|getColumnName
argument_list|()
argument_list|,
name|cs
argument_list|)
expr_stmt|;
comment|// even though the stats were estimated we need to warn user that
comment|// stats are not available
if|if
condition|(
name|cs
operator|.
name|isEstimated
argument_list|()
condition|)
block|{
name|colNamesFailedStats
operator|.
name|add
argument_list|(
name|cs
operator|.
name|getColumnName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|hiveColStats
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|colName
range|:
name|nonPartColNamesThatRqrStats
control|)
block|{
name|hiveColStats
operator|.
name|add
argument_list|(
name|columnStatsMap
operator|.
name|get
argument_list|(
name|colName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|String
name|logMsg
init|=
literal|"Collecting stats for table: "
operator|+
name|hiveTblMetadata
operator|.
name|getTableName
argument_list|()
operator|+
literal|" failed."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|logMsg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|logMsg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// 2.2 Obtain col stats for partitioned table.
try|try
block|{
if|if
condition|(
name|partitionList
operator|.
name|getNotDeniedPartns
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// no need to make a metastore call
name|rowCount
operator|=
literal|0
expr_stmt|;
name|hiveColStats
operator|=
operator|new
name|ArrayList
argument_list|<
name|ColStatistics
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nonPartColNamesThatRqrStats
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// add empty stats object for each column
name|hiveColStats
operator|.
name|add
argument_list|(
operator|new
name|ColStatistics
argument_list|(
name|nonPartColNamesThatRqrStats
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|hiveNonPartitionColsMap
operator|.
name|get
argument_list|(
name|nonPartColIndxsThatRqrStats
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|getTypeName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|colNamesFailedStats
operator|.
name|clear
argument_list|()
expr_stmt|;
name|colStatsCached
operator|.
name|updateState
argument_list|(
name|State
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Statistics
name|stats
init|=
name|StatsUtils
operator|.
name|collectStatistics
argument_list|(
name|hiveConf
argument_list|,
name|partitionList
argument_list|,
name|hiveTblMetadata
argument_list|,
name|hiveNonPartitionCols
argument_list|,
name|nonPartColNamesThatRqrStats
argument_list|,
name|colStatsCached
argument_list|,
name|nonPartColNamesThatRqrStats
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|rowCount
operator|=
name|stats
operator|.
name|getNumRows
argument_list|()
expr_stmt|;
name|hiveColStats
operator|=
operator|new
name|ArrayList
argument_list|<
name|ColStatistics
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|c
range|:
name|nonPartColNamesThatRqrStats
control|)
block|{
name|ColStatistics
name|cs
init|=
name|stats
operator|.
name|getColumnStatisticsFromColName
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|hiveColStats
operator|.
name|add
argument_list|(
name|cs
argument_list|)
expr_stmt|;
if|if
condition|(
name|cs
operator|.
name|isEstimated
argument_list|()
condition|)
block|{
name|colNamesFailedStats
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|colNamesFailedStats
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|colStatsCached
operator|.
name|updateState
argument_list|(
name|stats
operator|.
name|getColumnStatsState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|String
name|logMsg
init|=
literal|"Collecting stats failed."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|logMsg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|logMsg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|hiveColStats
operator|!=
literal|null
operator|&&
name|hiveColStats
operator|.
name|size
argument_list|()
operator|==
name|nonPartColNamesThatRqrStats
operator|.
name|size
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hiveColStats
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// the columns in nonPartColIndxsThatRqrStats/nonPartColNamesThatRqrStats/hiveColStats
comment|// are in same order
name|hiveColStatsMap
operator|.
name|put
argument_list|(
name|nonPartColIndxsThatRqrStats
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|hiveColStats
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|colStatsCached
operator|.
name|put
argument_list|(
name|hiveColStats
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getColumnName
argument_list|()
argument_list|,
name|hiveColStats
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stats for column "
operator|+
name|hiveColStats
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getColumnName
argument_list|()
operator|+
literal|" in table "
operator|+
name|hiveTblMetadata
operator|.
name|getTableName
argument_list|()
operator|+
literal|" stored in cache"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|hiveColStats
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// 3. Obtain Stats for Partition Cols
if|if
condition|(
name|colNamesFailedStats
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|partColNamesThatRqrStats
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ColStatistics
name|cStats
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partColNamesThatRqrStats
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|cStats
operator|=
name|StatsUtils
operator|.
name|getColStatsForPartCol
argument_list|(
name|hivePartitionColsMap
operator|.
name|get
argument_list|(
name|partColIndxsThatRqrStats
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
operator|new
name|PartitionIterable
argument_list|(
name|partitionList
operator|.
name|getNotDeniedPartns
argument_list|()
argument_list|)
argument_list|,
name|hiveConf
argument_list|)
expr_stmt|;
name|hiveColStatsMap
operator|.
name|put
argument_list|(
name|partColIndxsThatRqrStats
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|cStats
argument_list|)
expr_stmt|;
name|colStatsCached
operator|.
name|put
argument_list|(
name|cStats
operator|.
name|getColumnName
argument_list|()
argument_list|,
name|cStats
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stats for column "
operator|+
name|cStats
operator|.
name|getColumnName
argument_list|()
operator|+
literal|" in table "
operator|+
name|hiveTblMetadata
operator|.
name|getTableName
argument_list|()
operator|+
literal|" stored in cache"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|cStats
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// 4. Warn user if we could get stats for required columns
if|if
condition|(
operator|!
name|colNamesFailedStats
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|logMsg
init|=
literal|"No Stats for "
operator|+
name|hiveTblMetadata
operator|.
name|getCompleteName
argument_list|()
operator|+
literal|", Columns: "
operator|+
name|getColNamesForLogging
argument_list|(
name|colNamesFailedStats
argument_list|)
decl_stmt|;
name|noColsMissingStats
operator|.
name|getAndAdd
argument_list|(
name|colNamesFailedStats
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|allowMissingStats
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|logMsg
argument_list|)
expr_stmt|;
name|HiveConf
name|conf
init|=
name|SessionState
operator|.
name|getSessionConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_CBO_SHOW_WARNINGS
argument_list|)
condition|)
block|{
name|LogHelper
name|console
init|=
name|SessionState
operator|.
name|getConsole
argument_list|()
decl_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|logMsg
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
name|logMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|logMsg
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|List
argument_list|<
name|ColStatistics
argument_list|>
name|getColStat
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|projIndxLst
parameter_list|)
block|{
comment|// If we allow estimated stats for the columns, then we shall set the boolean to true,
comment|// since otherwise we will throw an exception because columns with estimated stats are
comment|// actually added to the list of columns that do not contain stats.
return|return
name|getColStat
argument_list|(
name|projIndxLst
argument_list|,
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_ESTIMATE_STATS
argument_list|)
argument_list|)
return|;
block|}
comment|/** Note: DOES NOT CHECK txn stats. */
specifier|public
name|List
argument_list|<
name|ColStatistics
argument_list|>
name|getColStat
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|projIndxLst
parameter_list|,
name|boolean
name|allowMissingStats
parameter_list|)
block|{
name|List
argument_list|<
name|ColStatistics
argument_list|>
name|colStatsBldr
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|projIndxSet
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|projIndxLst
argument_list|)
decl_stmt|;
if|if
condition|(
name|projIndxLst
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Integer
name|i
range|:
name|projIndxLst
control|)
block|{
if|if
condition|(
name|hiveColStatsMap
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|colStatsBldr
operator|.
name|add
argument_list|(
name|hiveColStatsMap
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|projIndxSet
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|projIndxSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|updateColStats
argument_list|(
name|projIndxSet
argument_list|,
name|allowMissingStats
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|i
range|:
name|projIndxSet
control|)
block|{
name|colStatsBldr
operator|.
name|add
argument_list|(
name|hiveColStatsMap
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|pILst
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|i
init|=
literal|0
init|;
name|i
operator|<
name|noOfNonVirtualCols
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|hiveColStatsMap
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|==
literal|null
condition|)
block|{
name|pILst
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|pILst
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|updateColStats
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|pILst
argument_list|)
argument_list|,
name|allowMissingStats
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|pi
range|:
name|pILst
control|)
block|{
name|colStatsBldr
operator|.
name|add
argument_list|(
name|hiveColStatsMap
operator|.
name|get
argument_list|(
name|pi
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|colStatsBldr
return|;
block|}
comment|/*    * use to check if a set of columns are all partition columns. true only if: -    * all columns in BitSet are partition columns.    */
specifier|public
name|boolean
name|containsPartitionColumnsOnly
parameter_list|(
name|ImmutableBitSet
name|cols
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|cols
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|++
operator|,
name|i
operator|=
name|cols
operator|.
name|nextSetBit
argument_list|(
name|i
operator|+
literal|1
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|hivePartitionColsMap
operator|.
name|containsKey
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|List
argument_list|<
name|VirtualColumn
argument_list|>
name|getVirtualCols
parameter_list|()
block|{
return|return
name|this
operator|.
name|hiveVirtualCols
return|;
block|}
specifier|public
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|getPartColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|hivePartitionCols
return|;
block|}
specifier|public
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|getNonPartColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|hiveNonPartitionCols
return|;
block|}
specifier|public
name|int
name|getNoOfNonVirtualCols
parameter_list|()
block|{
return|return
name|noOfNonVirtualCols
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|ColumnInfo
argument_list|>
name|getPartColInfoMap
parameter_list|()
block|{
return|return
name|hivePartitionColsMap
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|ColumnInfo
argument_list|>
name|getNonPartColInfoMap
parameter_list|()
block|{
return|return
name|hiveNonPartitionColsMap
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|RelOptHiveTable
operator|&&
name|this
operator|.
name|rowType
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|RelOptHiveTable
operator|)
name|obj
operator|)
operator|.
name|getRowType
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|getHiveTableMD
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|RelOptHiveTable
operator|)
name|obj
operator|)
operator|.
name|getHiveTableMD
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|getHiveTableMD
argument_list|()
operator|==
literal|null
operator|)
condition|?
name|super
operator|.
name|hashCode
argument_list|()
else|:
name|this
operator|.
name|getHiveTableMD
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

