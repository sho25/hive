begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|signature
operator|.
name|Signature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AbstractOperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Explain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_class
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Spark Partition Pruning Sink Operator"
argument_list|)
specifier|public
class|class
name|SparkPartitionPruningSinkDesc
extends|extends
name|AbstractOperatorDesc
block|{
specifier|public
specifier|static
class|class
name|DPPTargetInfo
block|{
comment|// column in the target table that will be pruned against
specifier|public
name|String
name|columnName
decl_stmt|;
comment|// type of target column
specifier|public
name|String
name|columnType
decl_stmt|;
comment|// the partition column we're interested in
specifier|public
name|ExprNodeDesc
name|partKey
decl_stmt|;
specifier|public
name|MapWork
name|work
decl_stmt|;
specifier|public
specifier|transient
name|TableScanOperator
name|tableScan
decl_stmt|;
name|DPPTargetInfo
parameter_list|(
name|String
name|columnName
parameter_list|,
name|String
name|columnType
parameter_list|,
name|ExprNodeDesc
name|partKey
parameter_list|,
name|MapWork
name|work
parameter_list|,
name|TableScanOperator
name|tableScan
parameter_list|)
block|{
name|this
operator|.
name|columnName
operator|=
name|columnName
expr_stmt|;
name|this
operator|.
name|columnType
operator|=
name|columnType
expr_stmt|;
name|this
operator|.
name|partKey
operator|=
name|partKey
expr_stmt|;
name|this
operator|.
name|work
operator|=
name|work
expr_stmt|;
name|this
operator|.
name|tableScan
operator|=
name|tableScan
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|DPPTargetInfo
argument_list|>
name|targetInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|TableDesc
name|table
decl_stmt|;
specifier|private
name|Path
name|path
decl_stmt|;
specifier|public
name|List
argument_list|<
name|DPPTargetInfo
argument_list|>
name|getTargetInfos
parameter_list|()
block|{
return|return
name|targetInfos
return|;
block|}
specifier|public
name|void
name|addTarget
parameter_list|(
name|String
name|colName
parameter_list|,
name|String
name|colType
parameter_list|,
name|ExprNodeDesc
name|partKey
parameter_list|,
name|MapWork
name|mapWork
parameter_list|,
name|TableScanOperator
name|tableScan
parameter_list|)
block|{
name|targetInfos
operator|.
name|add
argument_list|(
operator|new
name|DPPTargetInfo
argument_list|(
name|colName
argument_list|,
name|colType
argument_list|,
name|partKey
argument_list|,
name|mapWork
argument_list|,
name|tableScan
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Path
name|getTmpPathOfTargetWork
parameter_list|()
block|{
return|return
name|targetInfos
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|targetInfos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|work
operator|.
name|getTmpPathForPartitionPruning
argument_list|()
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"tmp Path"
argument_list|,
name|explainLevels
operator|=
block|{
name|Explain
operator|.
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|Path
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
specifier|public
name|void
name|setPath
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
specifier|public
name|String
name|getTargetWorks
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
name|targetInfos
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|info
lambda|->
name|info
operator|.
name|work
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getTableScanNames
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
name|targetInfos
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|info
lambda|->
name|info
operator|.
name|tableScan
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Signature
specifier|public
name|TableDesc
name|getTable
parameter_list|()
block|{
return|return
name|table
return|;
block|}
specifier|public
name|void
name|setTable
parameter_list|(
name|TableDesc
name|table
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Target Columns"
argument_list|)
specifier|public
name|String
name|displayTargetColumns
parameter_list|()
block|{
comment|// The target column list has the format "TargetWork -> [colName:colType(expression), ...], ..."
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DPPTargetInfo
name|info
range|:
name|targetInfos
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
name|map
operator|.
name|computeIfAbsent
argument_list|(
name|info
operator|.
name|work
operator|.
name|getName
argument_list|()
argument_list|,
name|v
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|info
operator|.
name|columnName
operator|.
name|substring
argument_list|(
name|info
operator|.
name|columnName
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|name
operator|+
literal|":"
operator|+
name|info
operator|.
name|columnType
operator|+
literal|" ("
operator|+
name|info
operator|.
name|partKey
operator|.
name|getExprString
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|work
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|builder
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|work
argument_list|)
operator|.
name|append
argument_list|(
literal|" -> "
argument_list|)
operator|.
name|append
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|work
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSame
parameter_list|(
name|OperatorDesc
name|other
parameter_list|)
block|{
if|if
condition|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|SparkPartitionPruningSinkDesc
name|otherDesc
init|=
operator|(
name|SparkPartitionPruningSinkDesc
operator|)
name|other
decl_stmt|;
return|return
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|otherDesc
operator|.
name|getTable
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|removeTarget
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|List
argument_list|<
name|DPPTargetInfo
argument_list|>
name|toRemove
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DPPTargetInfo
name|targetInfo
range|:
name|targetInfos
control|)
block|{
if|if
condition|(
name|targetInfo
operator|.
name|work
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|toRemove
operator|.
name|add
argument_list|(
name|targetInfo
argument_list|)
expr_stmt|;
block|}
block|}
name|targetInfos
operator|.
name|removeAll
argument_list|(
name|toRemove
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

