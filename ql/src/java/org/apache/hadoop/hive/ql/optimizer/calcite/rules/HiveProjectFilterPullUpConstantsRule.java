begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveRelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Planner rule that infers constant expressions from Filter into  * a Project operator.  */
end_comment

begin_class
specifier|public
class|class
name|HiveProjectFilterPullUpConstantsRule
extends|extends
name|RelOptRule
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveProjectFilterPullUpConstantsRule
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|HiveProjectFilterPullUpConstantsRule
name|INSTANCE
init|=
operator|new
name|HiveProjectFilterPullUpConstantsRule
argument_list|(
name|HiveProject
operator|.
name|class
argument_list|,
name|HiveFilter
operator|.
name|class
argument_list|,
name|HiveRelFactories
operator|.
name|HIVE_BUILDER
argument_list|)
decl_stmt|;
specifier|public
name|HiveProjectFilterPullUpConstantsRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Project
argument_list|>
name|projectClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Filter
argument_list|>
name|filterClass
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|projectClass
argument_list|,
name|operand
argument_list|(
name|filterClass
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|relBuilderFactory
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Filter
name|filterRel
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RexNode
name|condition
init|=
name|filterRel
operator|.
name|getCondition
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|HiveCalciteUtil
operator|.
name|isDeterministic
argument_list|(
name|condition
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|super
operator|.
name|matches
argument_list|(
name|call
argument_list|)
return|;
block|}
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Project
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Filter
name|filter
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|RelBuilder
name|builder
init|=
name|call
operator|.
name|builder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
init|=
name|project
operator|.
name|getChildExps
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|newProjects
init|=
name|rewriteProjects
argument_list|(
name|projects
argument_list|,
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|,
name|builder
argument_list|)
decl_stmt|;
if|if
condition|(
name|newProjects
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|RelNode
name|newProjRel
init|=
name|builder
operator|.
name|push
argument_list|(
name|filter
argument_list|)
operator|.
name|project
argument_list|(
name|newProjects
argument_list|,
name|project
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newProjRel
argument_list|)
expr_stmt|;
block|}
comment|// Rewrite projects to replace column references by constants when possible
annotation|@
name|SuppressWarnings
argument_list|(
literal|"incomplete-switch"
argument_list|)
specifier|private
specifier|static
name|List
argument_list|<
name|RexNode
argument_list|>
name|rewriteProjects
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
parameter_list|,
name|RexNode
name|newPushedCondition
parameter_list|,
name|RelBuilder
name|relBuilder
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|conjunctions
init|=
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|newPushedCondition
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|conditions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|conjunction
range|:
name|conjunctions
control|)
block|{
comment|// 1.1. If it is not a RexCall, we continue
if|if
condition|(
operator|!
operator|(
name|conjunction
operator|instanceof
name|RexCall
operator|)
condition|)
block|{
continue|continue;
block|}
comment|// 1.2. We extract the information that we need
name|RexCall
name|conjCall
init|=
operator|(
name|RexCall
operator|)
name|conjunction
decl_stmt|;
switch|switch
condition|(
name|conjCall
operator|.
name|getOperator
argument_list|()
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
if|if
condition|(
operator|!
operator|(
name|RexUtil
operator|.
name|isConstant
argument_list|(
name|conjCall
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
operator|&&
name|RexUtil
operator|.
name|isConstant
argument_list|(
name|conjCall
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|conditions
operator|.
name|put
argument_list|(
name|conjCall
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|conjCall
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|RexUtil
operator|.
name|isConstant
argument_list|(
name|conjCall
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
name|RexUtil
operator|.
name|isConstant
argument_list|(
name|conjCall
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|conditions
operator|.
name|put
argument_list|(
name|conjCall
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|conjCall
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IS_NULL
case|:
name|conditions
operator|.
name|put
argument_list|(
name|conjCall
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|relBuilder
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeNullLiteral
argument_list|(
name|conjCall
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|RexReplacer
name|replacer
init|=
operator|new
name|RexReplacer
argument_list|(
name|relBuilder
operator|.
name|getRexBuilder
argument_list|()
argument_list|,
name|conditions
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|newProjects
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|projects
argument_list|)
decl_stmt|;
name|replacer
operator|.
name|mutate
argument_list|(
name|newProjects
argument_list|)
expr_stmt|;
if|if
condition|(
name|replacer
operator|.
name|replaced
condition|)
block|{
return|return
name|newProjects
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
specifier|static
class|class
name|RexReplacer
extends|extends
name|RexShuttle
block|{
specifier|private
specifier|final
name|RexBuilder
name|rexBuilder
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|replacements
decl_stmt|;
specifier|private
name|boolean
name|replaced
decl_stmt|;
name|RexReplacer
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|replacements
parameter_list|)
block|{
name|this
operator|.
name|rexBuilder
operator|=
name|rexBuilder
expr_stmt|;
name|this
operator|.
name|replacements
operator|=
name|replacements
expr_stmt|;
name|this
operator|.
name|replaced
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitInputRef
parameter_list|(
name|RexInputRef
name|inputRef
parameter_list|)
block|{
name|RexNode
name|node
init|=
name|visit
argument_list|(
name|inputRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|visitInputRef
argument_list|(
name|inputRef
argument_list|)
return|;
block|}
name|this
operator|.
name|replaced
operator|=
literal|true
expr_stmt|;
return|return
name|node
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
name|RexNode
name|node
init|=
name|visit
argument_list|(
name|call
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|replaced
operator|=
literal|true
expr_stmt|;
return|return
name|node
return|;
block|}
return|return
name|super
operator|.
name|visitCall
argument_list|(
name|call
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|visit
parameter_list|(
specifier|final
name|RexNode
name|call
parameter_list|)
block|{
name|RexNode
name|replacement
init|=
name|replacements
operator|.
name|get
argument_list|(
name|call
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|replacement
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|replacement
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|replacement
return|;
block|}
return|return
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|replacement
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

