begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|CollectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|CommonMergeJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|DemuxOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FilterOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ForwardOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|HashTableSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|LateralViewForwardOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|LateralViewJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|LimitOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ListSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MuxOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|PTFOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SMBMapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ScriptOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SparkHashTableSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TemporaryHashSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDTFOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UnionOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorFilterOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorGroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorLimitOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorSelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FileSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FilterDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|GroupByDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HashTableSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LateralViewJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LimitDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SMBJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ScriptDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SelectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SparkHashTableSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableScanDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|UDTFDesc
import|;
end_import

begin_class
specifier|public
class|class
name|OperatorComparatorFactory
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|OperatorComparator
argument_list|>
name|comparatorMapping
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
static|static
block|{
name|comparatorMapping
operator|.
name|put
argument_list|(
name|TableScanOperator
operator|.
name|class
argument_list|,
operator|new
name|TableScanOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorMapping
operator|.
name|put
argument_list|(
name|SelectOperator
operator|.
name|class
argument_list|,
operator|new
name|SelectOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorMapping
operator|.
name|put
argument_list|(
name|FilterOperator
operator|.
name|class
argument_list|,
operator|new
name|FilterOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorMapping
operator|.
name|put
argument_list|(
name|GroupByOperator
operator|.
name|class
argument_list|,
operator|new
name|GroupByOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorMapping
operator|.
name|put
argument_list|(
name|ReduceSinkOperator
operator|.
name|class
argument_list|,
operator|new
name|ReduceSinkOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorMapping
operator|.
name|put
argument_list|(
name|FileSinkOperator
operator|.
name|class
argument_list|,
operator|new
name|FileSinkOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorMapping
operator|.
name|put
argument_list|(
name|JoinOperator
operator|.
name|class
argument_list|,
operator|new
name|JoinOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorMapping
operator|.
name|put
argument_list|(
name|MapJoinOperator
operator|.
name|class
argument_list|,
operator|new
name|MapJoinOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorMapping
operator|.
name|put
argument_list|(
name|SMBMapJoinOperator
operator|.
name|class
argument_list|,
operator|new
name|SMBMapJoinOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorMapping
operator|.
name|put
argument_list|(
name|LimitOperator
operator|.
name|class
argument_list|,
operator|new
name|LimitOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorMapping
operator|.
name|put
argument_list|(
name|SparkHashTableSinkOperator
operator|.
name|class
argument_list|,
operator|new
name|SparkHashTableSinkOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorMapping
operator|.
name|put
argument_list|(
name|LateralViewJoinOperator
operator|.
name|class
argument_list|,
operator|new
name|LateralViewJoinOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorMapping
operator|.
name|put
argument_list|(
name|VectorGroupByOperator
operator|.
name|class
argument_list|,
operator|new
name|GroupByOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorMapping
operator|.
name|put
argument_list|(
name|CommonMergeJoinOperator
operator|.
name|class
argument_list|,
operator|new
name|MapJoinOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorMapping
operator|.
name|put
argument_list|(
name|VectorFilterOperator
operator|.
name|class
argument_list|,
operator|new
name|FilterOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorMapping
operator|.
name|put
argument_list|(
name|UDTFOperator
operator|.
name|class
argument_list|,
operator|new
name|UDTFOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorMapping
operator|.
name|put
argument_list|(
name|VectorSelectOperator
operator|.
name|class
argument_list|,
operator|new
name|SelectOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorMapping
operator|.
name|put
argument_list|(
name|VectorLimitOperator
operator|.
name|class
argument_list|,
operator|new
name|LimitOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorMapping
operator|.
name|put
argument_list|(
name|ScriptOperator
operator|.
name|class
argument_list|,
operator|new
name|ScriptOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorMapping
operator|.
name|put
argument_list|(
name|TemporaryHashSinkOperator
operator|.
name|class
argument_list|,
operator|new
name|HashTableSinkOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// these operators does not have state, so they always equal with the same kind.
name|comparatorMapping
operator|.
name|put
argument_list|(
name|UnionOperator
operator|.
name|class
argument_list|,
operator|new
name|AlwaysTrueOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorMapping
operator|.
name|put
argument_list|(
name|ForwardOperator
operator|.
name|class
argument_list|,
operator|new
name|AlwaysTrueOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorMapping
operator|.
name|put
argument_list|(
name|LateralViewForwardOperator
operator|.
name|class
argument_list|,
operator|new
name|AlwaysTrueOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorMapping
operator|.
name|put
argument_list|(
name|DemuxOperator
operator|.
name|class
argument_list|,
operator|new
name|AlwaysTrueOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorMapping
operator|.
name|put
argument_list|(
name|MuxOperator
operator|.
name|class
argument_list|,
operator|new
name|AlwaysTrueOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorMapping
operator|.
name|put
argument_list|(
name|ListSinkOperator
operator|.
name|class
argument_list|,
operator|new
name|AlwaysTrueOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparatorMapping
operator|.
name|put
argument_list|(
name|CollectOperator
operator|.
name|class
argument_list|,
operator|new
name|AlwaysTrueOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// do not support PTFOperator comparing now.
name|comparatorMapping
operator|.
name|put
argument_list|(
name|PTFOperator
operator|.
name|class
argument_list|,
operator|new
name|AlwaysFalseOperatorComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|OperatorComparator
name|getOperatorComparator
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Operator
argument_list|>
name|operatorClass
parameter_list|)
block|{
name|OperatorComparator
name|operatorComparator
init|=
name|comparatorMapping
operator|.
name|get
argument_list|(
name|operatorClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|operatorComparator
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No OperatorComparator is registered for "
operator|+
name|operatorClass
operator|.
name|getName
argument_list|()
operator|+
literal|"yet."
argument_list|)
throw|;
block|}
return|return
name|operatorComparator
return|;
block|}
specifier|public
interface|interface
name|OperatorComparator
parameter_list|<
name|T
extends|extends
name|Operator
parameter_list|<
name|?
parameter_list|>
parameter_list|>
block|{
name|boolean
name|equals
parameter_list|(
name|T
name|op1
parameter_list|,
name|T
name|op2
parameter_list|)
function_decl|;
block|}
specifier|static
class|class
name|AlwaysTrueOperatorComparator
implements|implements
name|OperatorComparator
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|op1
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|op2
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op1
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op2
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
specifier|static
class|class
name|AlwaysFalseOperatorComparator
implements|implements
name|OperatorComparator
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|op1
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|op2
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op1
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op2
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|static
class|class
name|TableScanOperatorComparator
implements|implements
name|OperatorComparator
argument_list|<
name|TableScanOperator
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|TableScanOperator
name|op1
parameter_list|,
name|TableScanOperator
name|op2
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op1
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op2
argument_list|)
expr_stmt|;
name|TableScanDesc
name|op1Conf
init|=
name|op1
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|TableScanDesc
name|op2Conf
init|=
name|op2
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|compareString
argument_list|(
name|op1Conf
operator|.
name|getAlias
argument_list|()
argument_list|,
name|op2Conf
operator|.
name|getAlias
argument_list|()
argument_list|)
operator|&&
name|compareExprNodeDesc
argument_list|(
name|op1Conf
operator|.
name|getFilterExpr
argument_list|()
argument_list|,
name|op2Conf
operator|.
name|getFilterExpr
argument_list|()
argument_list|)
operator|&&
name|op1Conf
operator|.
name|getRowLimit
argument_list|()
operator|==
name|op2Conf
operator|.
name|getRowLimit
argument_list|()
operator|&&
name|op1Conf
operator|.
name|isGatherStats
argument_list|()
operator|==
name|op2Conf
operator|.
name|isGatherStats
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|static
class|class
name|SelectOperatorComparator
implements|implements
name|OperatorComparator
argument_list|<
name|SelectOperator
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|SelectOperator
name|op1
parameter_list|,
name|SelectOperator
name|op2
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op1
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op2
argument_list|)
expr_stmt|;
name|SelectDesc
name|op1Conf
init|=
name|op1
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|SelectDesc
name|op2Conf
init|=
name|op2
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|compareString
argument_list|(
name|op1Conf
operator|.
name|getColListString
argument_list|()
argument_list|,
name|op2Conf
operator|.
name|getColListString
argument_list|()
argument_list|)
operator|&&
name|compareObject
argument_list|(
name|op1Conf
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|,
name|op2Conf
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|)
operator|&&
name|compareString
argument_list|(
name|op1Conf
operator|.
name|explainNoCompute
argument_list|()
argument_list|,
name|op2Conf
operator|.
name|explainNoCompute
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|static
class|class
name|FilterOperatorComparator
implements|implements
name|OperatorComparator
argument_list|<
name|FilterOperator
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|FilterOperator
name|op1
parameter_list|,
name|FilterOperator
name|op2
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op1
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op2
argument_list|)
expr_stmt|;
name|FilterDesc
name|op1Conf
init|=
name|op1
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|FilterDesc
name|op2Conf
init|=
name|op2
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|compareString
argument_list|(
name|op1Conf
operator|.
name|getPredicateString
argument_list|()
argument_list|,
name|op2Conf
operator|.
name|getPredicateString
argument_list|()
argument_list|)
operator|&&
operator|(
name|op1Conf
operator|.
name|getIsSamplingPred
argument_list|()
operator|==
name|op2Conf
operator|.
name|getIsSamplingPred
argument_list|()
operator|)
operator|&&
name|compareString
argument_list|(
name|op1Conf
operator|.
name|getSampleDescExpr
argument_list|()
argument_list|,
name|op2Conf
operator|.
name|getSampleDescExpr
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|static
class|class
name|GroupByOperatorComparator
implements|implements
name|OperatorComparator
argument_list|<
name|GroupByOperator
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|GroupByOperator
name|op1
parameter_list|,
name|GroupByOperator
name|op2
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op1
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op2
argument_list|)
expr_stmt|;
name|GroupByDesc
name|op1Conf
init|=
name|op1
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|GroupByDesc
name|op2Conf
init|=
name|op2
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|compareString
argument_list|(
name|op1Conf
operator|.
name|getModeString
argument_list|()
argument_list|,
name|op2Conf
operator|.
name|getModeString
argument_list|()
argument_list|)
operator|&&
name|compareString
argument_list|(
name|op1Conf
operator|.
name|getKeyString
argument_list|()
argument_list|,
name|op2Conf
operator|.
name|getKeyString
argument_list|()
argument_list|)
operator|&&
name|compareObject
argument_list|(
name|op1Conf
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|,
name|op2Conf
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|)
operator|&&
name|op1Conf
operator|.
name|pruneGroupingSetId
argument_list|()
operator|==
name|op2Conf
operator|.
name|pruneGroupingSetId
argument_list|()
operator|&&
name|compareObject
argument_list|(
name|op1Conf
operator|.
name|getAggregatorStrings
argument_list|()
argument_list|,
name|op2Conf
operator|.
name|getAggregatorStrings
argument_list|()
argument_list|)
operator|&&
name|op1Conf
operator|.
name|getBucketGroup
argument_list|()
operator|==
name|op2Conf
operator|.
name|getBucketGroup
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|static
class|class
name|ReduceSinkOperatorComparator
implements|implements
name|OperatorComparator
argument_list|<
name|ReduceSinkOperator
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|ReduceSinkOperator
name|op1
parameter_list|,
name|ReduceSinkOperator
name|op2
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op1
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op2
argument_list|)
expr_stmt|;
name|ReduceSinkDesc
name|op1Conf
init|=
name|op1
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|ReduceSinkDesc
name|op2Conf
init|=
name|op2
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|compareExprNodeDescList
argument_list|(
name|op1Conf
operator|.
name|getKeyCols
argument_list|()
argument_list|,
name|op2Conf
operator|.
name|getKeyCols
argument_list|()
argument_list|)
operator|&&
name|compareExprNodeDescList
argument_list|(
name|op1Conf
operator|.
name|getValueCols
argument_list|()
argument_list|,
name|op2Conf
operator|.
name|getValueCols
argument_list|()
argument_list|)
operator|&&
name|compareExprNodeDescList
argument_list|(
name|op1Conf
operator|.
name|getPartitionCols
argument_list|()
argument_list|,
name|op2Conf
operator|.
name|getPartitionCols
argument_list|()
argument_list|)
operator|&&
name|op1Conf
operator|.
name|getTag
argument_list|()
operator|==
name|op2Conf
operator|.
name|getTag
argument_list|()
operator|&&
name|compareString
argument_list|(
name|op1Conf
operator|.
name|getOrder
argument_list|()
argument_list|,
name|op2Conf
operator|.
name|getOrder
argument_list|()
argument_list|)
operator|&&
name|op1Conf
operator|.
name|getTopN
argument_list|()
operator|==
name|op2Conf
operator|.
name|getTopN
argument_list|()
operator|&&
name|op1Conf
operator|.
name|isAutoParallel
argument_list|()
operator|==
name|op2Conf
operator|.
name|isAutoParallel
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|static
class|class
name|FileSinkOperatorComparator
implements|implements
name|OperatorComparator
argument_list|<
name|FileSinkOperator
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|FileSinkOperator
name|op1
parameter_list|,
name|FileSinkOperator
name|op2
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op1
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op2
argument_list|)
expr_stmt|;
name|FileSinkDesc
name|op1Conf
init|=
name|op1
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|FileSinkDesc
name|op2Conf
init|=
name|op2
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|compareObject
argument_list|(
name|op1Conf
operator|.
name|getDirName
argument_list|()
argument_list|,
name|op2Conf
operator|.
name|getDirName
argument_list|()
argument_list|)
operator|&&
name|compareObject
argument_list|(
name|op1Conf
operator|.
name|getTableInfo
argument_list|()
argument_list|,
name|op2Conf
operator|.
name|getTableInfo
argument_list|()
argument_list|)
operator|&&
name|op1Conf
operator|.
name|getCompressed
argument_list|()
operator|==
name|op2Conf
operator|.
name|getCompressed
argument_list|()
operator|&&
name|op1Conf
operator|.
name|getDestTableId
argument_list|()
operator|==
name|op2Conf
operator|.
name|getDestTableId
argument_list|()
operator|&&
name|op1Conf
operator|.
name|isMultiFileSpray
argument_list|()
operator|==
name|op2Conf
operator|.
name|isMultiFileSpray
argument_list|()
operator|&&
name|op1Conf
operator|.
name|getTotalFiles
argument_list|()
operator|==
name|op2Conf
operator|.
name|getTotalFiles
argument_list|()
operator|&&
name|op1Conf
operator|.
name|getNumFiles
argument_list|()
operator|==
name|op2Conf
operator|.
name|getNumFiles
argument_list|()
operator|&&
name|compareString
argument_list|(
name|op1Conf
operator|.
name|getStaticSpec
argument_list|()
argument_list|,
name|op2Conf
operator|.
name|getStaticSpec
argument_list|()
argument_list|)
operator|&&
name|op1Conf
operator|.
name|isGatherStats
argument_list|()
operator|==
name|op2Conf
operator|.
name|isGatherStats
argument_list|()
operator|&&
name|compareString
argument_list|(
name|op1Conf
operator|.
name|getStatsAggPrefix
argument_list|()
argument_list|,
name|op2Conf
operator|.
name|getStatsAggPrefix
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|static
class|class
name|JoinOperatorComparator
implements|implements
name|OperatorComparator
argument_list|<
name|JoinOperator
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|JoinOperator
name|op1
parameter_list|,
name|JoinOperator
name|op2
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op1
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op2
argument_list|)
expr_stmt|;
name|JoinDesc
name|desc1
init|=
name|op1
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|JoinDesc
name|desc2
init|=
name|op2
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|compareObject
argument_list|(
name|desc1
operator|.
name|getKeysString
argument_list|()
argument_list|,
name|desc2
operator|.
name|getKeysString
argument_list|()
argument_list|)
operator|&&
name|compareObject
argument_list|(
name|desc1
operator|.
name|getFiltersStringMap
argument_list|()
argument_list|,
name|desc2
operator|.
name|getFiltersStringMap
argument_list|()
argument_list|)
operator|&&
name|compareObject
argument_list|(
name|desc1
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|,
name|desc2
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|)
operator|&&
name|compareObject
argument_list|(
name|desc1
operator|.
name|getCondsList
argument_list|()
argument_list|,
name|desc2
operator|.
name|getCondsList
argument_list|()
argument_list|)
operator|&&
name|desc1
operator|.
name|getHandleSkewJoin
argument_list|()
operator|==
name|desc2
operator|.
name|getHandleSkewJoin
argument_list|()
operator|&&
name|compareString
argument_list|(
name|desc1
operator|.
name|getNullSafeString
argument_list|()
argument_list|,
name|desc2
operator|.
name|getNullSafeString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|static
class|class
name|MapJoinOperatorComparator
implements|implements
name|OperatorComparator
argument_list|<
name|MapJoinOperator
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|MapJoinOperator
name|op1
parameter_list|,
name|MapJoinOperator
name|op2
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op1
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op2
argument_list|)
expr_stmt|;
name|MapJoinDesc
name|desc1
init|=
name|op1
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|MapJoinDesc
name|desc2
init|=
name|op2
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|compareObject
argument_list|(
name|desc1
operator|.
name|getParentToInput
argument_list|()
argument_list|,
name|desc2
operator|.
name|getParentToInput
argument_list|()
argument_list|)
operator|&&
name|compareString
argument_list|(
name|desc1
operator|.
name|getKeyCountsExplainDesc
argument_list|()
argument_list|,
name|desc2
operator|.
name|getKeyCountsExplainDesc
argument_list|()
argument_list|)
operator|&&
name|compareObject
argument_list|(
name|desc1
operator|.
name|getKeysString
argument_list|()
argument_list|,
name|desc2
operator|.
name|getKeysString
argument_list|()
argument_list|)
operator|&&
name|desc1
operator|.
name|getPosBigTable
argument_list|()
operator|==
name|desc2
operator|.
name|getPosBigTable
argument_list|()
operator|&&
name|desc1
operator|.
name|isBucketMapJoin
argument_list|()
operator|==
name|desc2
operator|.
name|isBucketMapJoin
argument_list|()
operator|&&
name|compareObject
argument_list|(
name|desc1
operator|.
name|getKeysString
argument_list|()
argument_list|,
name|desc2
operator|.
name|getKeysString
argument_list|()
argument_list|)
operator|&&
name|compareObject
argument_list|(
name|desc1
operator|.
name|getFiltersStringMap
argument_list|()
argument_list|,
name|desc2
operator|.
name|getFiltersStringMap
argument_list|()
argument_list|)
operator|&&
name|compareObject
argument_list|(
name|desc1
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|,
name|desc2
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|)
operator|&&
name|compareObject
argument_list|(
name|desc1
operator|.
name|getCondsList
argument_list|()
argument_list|,
name|desc2
operator|.
name|getCondsList
argument_list|()
argument_list|)
operator|&&
name|desc1
operator|.
name|getHandleSkewJoin
argument_list|()
operator|==
name|desc2
operator|.
name|getHandleSkewJoin
argument_list|()
operator|&&
name|compareString
argument_list|(
name|desc1
operator|.
name|getNullSafeString
argument_list|()
argument_list|,
name|desc2
operator|.
name|getNullSafeString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|static
class|class
name|SMBMapJoinOperatorComparator
implements|implements
name|OperatorComparator
argument_list|<
name|SMBMapJoinOperator
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|SMBMapJoinOperator
name|op1
parameter_list|,
name|SMBMapJoinOperator
name|op2
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op1
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op2
argument_list|)
expr_stmt|;
name|SMBJoinDesc
name|desc1
init|=
name|op1
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|SMBJoinDesc
name|desc2
init|=
name|op2
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|compareObject
argument_list|(
name|desc1
operator|.
name|getParentToInput
argument_list|()
argument_list|,
name|desc2
operator|.
name|getParentToInput
argument_list|()
argument_list|)
operator|&&
name|compareString
argument_list|(
name|desc1
operator|.
name|getKeyCountsExplainDesc
argument_list|()
argument_list|,
name|desc2
operator|.
name|getKeyCountsExplainDesc
argument_list|()
argument_list|)
operator|&&
name|compareObject
argument_list|(
name|desc1
operator|.
name|getKeysString
argument_list|()
argument_list|,
name|desc2
operator|.
name|getKeysString
argument_list|()
argument_list|)
operator|&&
name|desc1
operator|.
name|getPosBigTable
argument_list|()
operator|==
name|desc2
operator|.
name|getPosBigTable
argument_list|()
operator|&&
name|desc1
operator|.
name|isBucketMapJoin
argument_list|()
operator|==
name|desc2
operator|.
name|isBucketMapJoin
argument_list|()
operator|&&
name|compareObject
argument_list|(
name|desc1
operator|.
name|getKeysString
argument_list|()
argument_list|,
name|desc2
operator|.
name|getKeysString
argument_list|()
argument_list|)
operator|&&
name|compareObject
argument_list|(
name|desc1
operator|.
name|getFiltersStringMap
argument_list|()
argument_list|,
name|desc2
operator|.
name|getFiltersStringMap
argument_list|()
argument_list|)
operator|&&
name|compareObject
argument_list|(
name|desc1
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|,
name|desc2
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|)
operator|&&
name|compareObject
argument_list|(
name|desc1
operator|.
name|getCondsList
argument_list|()
argument_list|,
name|desc2
operator|.
name|getCondsList
argument_list|()
argument_list|)
operator|&&
name|desc1
operator|.
name|getHandleSkewJoin
argument_list|()
operator|==
name|desc2
operator|.
name|getHandleSkewJoin
argument_list|()
operator|&&
name|compareString
argument_list|(
name|desc1
operator|.
name|getNullSafeString
argument_list|()
argument_list|,
name|desc2
operator|.
name|getNullSafeString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|static
class|class
name|LimitOperatorComparator
implements|implements
name|OperatorComparator
argument_list|<
name|LimitOperator
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|LimitOperator
name|op1
parameter_list|,
name|LimitOperator
name|op2
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op1
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op2
argument_list|)
expr_stmt|;
name|LimitDesc
name|desc1
init|=
name|op1
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|LimitDesc
name|desc2
init|=
name|op2
operator|.
name|getConf
argument_list|()
decl_stmt|;
return|return
name|desc1
operator|.
name|getLimit
argument_list|()
operator|==
name|desc2
operator|.
name|getLimit
argument_list|()
return|;
block|}
block|}
specifier|static
class|class
name|SparkHashTableSinkOperatorComparator
implements|implements
name|OperatorComparator
argument_list|<
name|SparkHashTableSinkOperator
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|SparkHashTableSinkOperator
name|op1
parameter_list|,
name|SparkHashTableSinkOperator
name|op2
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op1
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op2
argument_list|)
expr_stmt|;
name|SparkHashTableSinkDesc
name|desc1
init|=
name|op1
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|SparkHashTableSinkDesc
name|desc2
init|=
name|op2
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|compareObject
argument_list|(
name|desc1
operator|.
name|getFilterMapString
argument_list|()
argument_list|,
name|desc2
operator|.
name|getFilterMapString
argument_list|()
argument_list|)
operator|&&
name|compareObject
argument_list|(
name|desc1
operator|.
name|getKeysString
argument_list|()
argument_list|,
name|desc2
operator|.
name|getKeysString
argument_list|()
argument_list|)
operator|&&
name|desc1
operator|.
name|getPosBigTable
argument_list|()
operator|==
name|desc2
operator|.
name|getPosBigTable
argument_list|()
operator|&&
name|compareObject
argument_list|(
name|desc1
operator|.
name|getKeysString
argument_list|()
argument_list|,
name|desc2
operator|.
name|getKeysString
argument_list|()
argument_list|)
operator|&&
name|compareObject
argument_list|(
name|desc1
operator|.
name|getFiltersStringMap
argument_list|()
argument_list|,
name|desc2
operator|.
name|getFiltersStringMap
argument_list|()
argument_list|)
operator|&&
name|compareObject
argument_list|(
name|desc1
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|,
name|desc2
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|)
operator|&&
name|compareObject
argument_list|(
name|desc1
operator|.
name|getCondsList
argument_list|()
argument_list|,
name|desc2
operator|.
name|getCondsList
argument_list|()
argument_list|)
operator|&&
name|desc1
operator|.
name|getHandleSkewJoin
argument_list|()
operator|==
name|desc2
operator|.
name|getHandleSkewJoin
argument_list|()
operator|&&
name|compareString
argument_list|(
name|desc1
operator|.
name|getNullSafeString
argument_list|()
argument_list|,
name|desc2
operator|.
name|getNullSafeString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|static
class|class
name|HashTableSinkOperatorComparator
implements|implements
name|OperatorComparator
argument_list|<
name|HashTableSinkOperator
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|HashTableSinkOperator
name|op1
parameter_list|,
name|HashTableSinkOperator
name|op2
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op1
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op2
argument_list|)
expr_stmt|;
name|HashTableSinkDesc
name|desc1
init|=
name|op1
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|HashTableSinkDesc
name|desc2
init|=
name|op2
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|compareObject
argument_list|(
name|desc1
operator|.
name|getFilterMapString
argument_list|()
argument_list|,
name|desc2
operator|.
name|getFilterMapString
argument_list|()
argument_list|)
operator|&&
name|compareObject
argument_list|(
name|desc1
operator|.
name|getKeysString
argument_list|()
argument_list|,
name|desc2
operator|.
name|getKeysString
argument_list|()
argument_list|)
operator|&&
name|desc1
operator|.
name|getPosBigTable
argument_list|()
operator|==
name|desc2
operator|.
name|getPosBigTable
argument_list|()
operator|&&
name|compareObject
argument_list|(
name|desc1
operator|.
name|getKeysString
argument_list|()
argument_list|,
name|desc2
operator|.
name|getKeysString
argument_list|()
argument_list|)
operator|&&
name|compareObject
argument_list|(
name|desc1
operator|.
name|getFiltersStringMap
argument_list|()
argument_list|,
name|desc2
operator|.
name|getFiltersStringMap
argument_list|()
argument_list|)
operator|&&
name|compareObject
argument_list|(
name|desc1
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|,
name|desc2
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|)
operator|&&
name|compareObject
argument_list|(
name|desc1
operator|.
name|getCondsList
argument_list|()
argument_list|,
name|desc2
operator|.
name|getCondsList
argument_list|()
argument_list|)
operator|&&
name|desc1
operator|.
name|getHandleSkewJoin
argument_list|()
operator|==
name|desc2
operator|.
name|getHandleSkewJoin
argument_list|()
operator|&&
name|compareString
argument_list|(
name|desc1
operator|.
name|getNullSafeString
argument_list|()
argument_list|,
name|desc2
operator|.
name|getNullSafeString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|static
class|class
name|LateralViewJoinOperatorComparator
implements|implements
name|OperatorComparator
argument_list|<
name|LateralViewJoinOperator
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|LateralViewJoinOperator
name|op1
parameter_list|,
name|LateralViewJoinOperator
name|op2
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op1
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op2
argument_list|)
expr_stmt|;
name|LateralViewJoinDesc
name|desc1
init|=
name|op1
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|LateralViewJoinDesc
name|desc2
init|=
name|op2
operator|.
name|getConf
argument_list|()
decl_stmt|;
return|return
name|compareObject
argument_list|(
name|desc1
operator|.
name|getOutputInternalColNames
argument_list|()
argument_list|,
name|desc2
operator|.
name|getOutputInternalColNames
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|ScriptOperatorComparator
implements|implements
name|OperatorComparator
argument_list|<
name|ScriptOperator
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|ScriptOperator
name|op1
parameter_list|,
name|ScriptOperator
name|op2
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op1
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op2
argument_list|)
expr_stmt|;
name|ScriptDesc
name|desc1
init|=
name|op1
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|ScriptDesc
name|desc2
init|=
name|op2
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|compareString
argument_list|(
name|desc1
operator|.
name|getScriptCmd
argument_list|()
argument_list|,
name|desc2
operator|.
name|getScriptCmd
argument_list|()
argument_list|)
operator|&&
name|compareObject
argument_list|(
name|desc1
operator|.
name|getScriptOutputInfo
argument_list|()
argument_list|,
name|desc2
operator|.
name|getScriptOutputInfo
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|static
class|class
name|UDTFOperatorComparator
implements|implements
name|OperatorComparator
argument_list|<
name|UDTFOperator
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|UDTFOperator
name|op1
parameter_list|,
name|UDTFOperator
name|op2
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op1
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op2
argument_list|)
expr_stmt|;
name|UDTFDesc
name|desc1
init|=
name|op1
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|UDTFDesc
name|desc2
init|=
name|op2
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|compareString
argument_list|(
name|desc1
operator|.
name|getUDTFName
argument_list|()
argument_list|,
name|desc2
operator|.
name|getUDTFName
argument_list|()
argument_list|)
operator|&&
name|compareString
argument_list|(
name|desc1
operator|.
name|isOuterLateralView
argument_list|()
argument_list|,
name|desc2
operator|.
name|isOuterLateralView
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|static
name|boolean
name|compareString
parameter_list|(
name|String
name|first
parameter_list|,
name|String
name|second
parameter_list|)
block|{
return|return
name|compareObject
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
return|;
block|}
comment|/*    * Compare Objects which implements its own meaningful equals methods.    */
specifier|static
name|boolean
name|compareObject
parameter_list|(
name|Object
name|first
parameter_list|,
name|Object
name|second
parameter_list|)
block|{
return|return
name|first
operator|==
literal|null
condition|?
name|second
operator|==
literal|null
else|:
name|first
operator|.
name|equals
argument_list|(
name|second
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|compareExprNodeDesc
parameter_list|(
name|ExprNodeDesc
name|first
parameter_list|,
name|ExprNodeDesc
name|second
parameter_list|)
block|{
return|return
name|first
operator|==
literal|null
condition|?
name|second
operator|==
literal|null
else|:
name|first
operator|.
name|isSame
argument_list|(
name|second
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|compareExprNodeDescList
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|first
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|second
parameter_list|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
operator|&&
name|second
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|(
name|first
operator|==
literal|null
operator|&&
name|second
operator|!=
literal|null
operator|)
operator|||
operator|(
name|first
operator|!=
literal|null
operator|&&
name|second
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|first
operator|.
name|size
argument_list|()
operator|!=
name|second
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|first
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|first
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isSame
argument_list|(
name|second
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

