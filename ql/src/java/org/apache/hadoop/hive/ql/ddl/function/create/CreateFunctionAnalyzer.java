begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|function
operator|.
name|create
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ResourceUri
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLSemanticAnalyzerFactory
operator|.
name|DDLType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|function
operator|.
name|AbstractFunctionAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_comment
comment|/**  * Analyzer for function creation commands.  */
end_comment

begin_class
annotation|@
name|DDLType
argument_list|(
name|type
operator|=
name|HiveParser
operator|.
name|TOK_CREATEFUNCTION
argument_list|)
specifier|public
class|class
name|CreateFunctionAnalyzer
extends|extends
name|AbstractFunctionAnalyzer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|SESSION_STATE_LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"SessionState"
argument_list|)
decl_stmt|;
specifier|public
name|CreateFunctionAnalyzer
parameter_list|(
name|QueryState
name|queryState
parameter_list|)
throws|throws
name|SemanticException
block|{
name|super
argument_list|(
name|queryState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|analyzeInternal
parameter_list|(
name|ASTNode
name|root
parameter_list|)
throws|throws
name|SemanticException
block|{
name|String
name|functionName
init|=
name|root
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|boolean
name|isTemporary
init|=
operator|(
name|root
operator|.
name|getFirstChildWithType
argument_list|(
name|HiveParser
operator|.
name|TOK_TEMPORARY
argument_list|)
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|isTemporary
operator|&&
name|FunctionUtils
operator|.
name|isQualifiedFunctionName
argument_list|(
name|functionName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Temporary function cannot be created with a qualified name."
argument_list|)
throw|;
block|}
name|String
name|className
init|=
name|unescapeSQLString
argument_list|(
name|root
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceUri
argument_list|>
name|resources
init|=
name|getResourceList
argument_list|(
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isTemporary
operator|&&
name|resources
operator|==
literal|null
condition|)
block|{
name|SESSION_STATE_LOG
operator|.
name|warn
argument_list|(
literal|"permanent functions created without USING  clause will not be replicated."
argument_list|)
expr_stmt|;
block|}
name|CreateFunctionDesc
name|desc
init|=
operator|new
name|CreateFunctionDesc
argument_list|(
name|functionName
argument_list|,
name|className
argument_list|,
name|isTemporary
argument_list|,
name|resources
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|rootTasks
operator|.
name|add
argument_list|(
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork
argument_list|(
name|getInputs
argument_list|()
argument_list|,
name|getOutputs
argument_list|()
argument_list|,
name|desc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|addEntities
argument_list|(
name|functionName
argument_list|,
name|className
argument_list|,
name|isTemporary
argument_list|,
name|resources
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|ResourceType
argument_list|>
name|TOKEN_TYPE_TO_RESOURCE_TYPE
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|HiveParser
operator|.
name|TOK_JAR
argument_list|,
name|ResourceType
operator|.
name|JAR
argument_list|,
name|HiveParser
operator|.
name|TOK_FILE
argument_list|,
name|ResourceType
operator|.
name|FILE
argument_list|,
name|HiveParser
operator|.
name|TOK_ARCHIVE
argument_list|,
name|ResourceType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ResourceUri
argument_list|>
name|getResourceList
parameter_list|(
name|ASTNode
name|ast
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|ResourceUri
argument_list|>
name|resources
init|=
literal|null
decl_stmt|;
name|ASTNode
name|resourcesNode
init|=
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getFirstChildWithType
argument_list|(
name|HiveParser
operator|.
name|TOK_RESOURCE_LIST
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourcesNode
operator|!=
literal|null
condition|)
block|{
name|resources
operator|=
operator|new
name|ArrayList
argument_list|<
name|ResourceUri
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|resourcesNode
operator|.
name|getChildCount
argument_list|()
condition|;
operator|++
name|idx
control|)
block|{
comment|// ^(TOK_RESOURCE_URI $resType $resPath)
name|ASTNode
name|node
init|=
operator|(
name|ASTNode
operator|)
name|resourcesNode
operator|.
name|getChild
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|HiveParser
operator|.
name|TOK_RESOURCE_URI
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Expected token type TOK_RESOURCE_URI but found "
operator|+
name|node
operator|.
name|getToken
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|node
operator|.
name|getChildCount
argument_list|()
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Expected 2 child nodes of TOK_RESOURCE_URI but found "
operator|+
name|node
operator|.
name|getChildCount
argument_list|()
argument_list|)
throw|;
block|}
name|ASTNode
name|resourceTypeNode
init|=
operator|(
name|ASTNode
operator|)
name|node
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ASTNode
name|resourceUriNode
init|=
operator|(
name|ASTNode
operator|)
name|node
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ResourceType
name|resourceType
init|=
name|TOKEN_TYPE_TO_RESOURCE_TYPE
operator|.
name|get
argument_list|(
name|resourceTypeNode
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Unexpected token "
operator|+
name|resourceTypeNode
argument_list|)
throw|;
block|}
name|resources
operator|.
name|add
argument_list|(
operator|new
name|ResourceUri
argument_list|(
name|resourceType
argument_list|,
name|PlanUtils
operator|.
name|stripQuotes
argument_list|(
name|resourceUriNode
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|resources
return|;
block|}
block|}
end_class

end_unit

