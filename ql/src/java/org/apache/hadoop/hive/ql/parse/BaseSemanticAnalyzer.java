begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|LogHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|BaseSemanticAnalyzer
block|{
specifier|protected
specifier|final
name|Hive
name|db
decl_stmt|;
specifier|protected
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
decl_stmt|;
specifier|protected
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|fetchTask
decl_stmt|;
specifier|protected
name|boolean
name|fetchTaskInit
decl_stmt|;
specifier|protected
specifier|final
name|Log
name|LOG
decl_stmt|;
specifier|protected
specifier|final
name|LogHelper
name|console
decl_stmt|;
specifier|protected
name|Context
name|ctx
decl_stmt|;
specifier|protected
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|idToTableNameMap
decl_stmt|;
comment|/**    * ReadEntitites that are passed to the hooks.    */
specifier|protected
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
decl_stmt|;
comment|/**    * List of WriteEntities that are passed to the hooks.    */
specifier|protected
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
decl_stmt|;
specifier|public
name|BaseSemanticAnalyzer
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|SemanticException
block|{
try|try
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|db
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rootTasks
operator|=
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|LOG
operator|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|console
operator|=
operator|new
name|LogHelper
argument_list|(
name|LOG
argument_list|)
expr_stmt|;
name|this
operator|.
name|idToTableNameMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|inputs
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|ReadEntity
argument_list|>
argument_list|()
expr_stmt|;
name|outputs
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|WriteEntity
argument_list|>
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getIdToTableNameMap
parameter_list|()
block|{
return|return
name|idToTableNameMap
return|;
block|}
specifier|public
specifier|abstract
name|void
name|analyzeInternal
parameter_list|(
name|ASTNode
name|ast
parameter_list|)
throws|throws
name|SemanticException
function_decl|;
specifier|public
name|void
name|analyze
parameter_list|(
name|ASTNode
name|ast
parameter_list|,
name|Context
name|ctx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|this
operator|.
name|ctx
operator|=
name|ctx
expr_stmt|;
name|analyzeInternal
argument_list|(
name|ast
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|SemanticException
block|{
comment|// Implementations may choose to override this
block|}
specifier|public
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|getRootTasks
parameter_list|()
block|{
return|return
name|rootTasks
return|;
block|}
comment|/**    * @return the fetchTask    */
specifier|public
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|getFetchTask
parameter_list|()
block|{
return|return
name|fetchTask
return|;
block|}
comment|/**    * @param fetchTask the fetchTask to set    */
specifier|public
name|void
name|setFetchTask
parameter_list|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|fetchTask
parameter_list|)
block|{
name|this
operator|.
name|fetchTask
operator|=
name|fetchTask
expr_stmt|;
block|}
specifier|public
name|boolean
name|getFetchTaskInit
parameter_list|()
block|{
return|return
name|fetchTaskInit
return|;
block|}
specifier|public
name|void
name|setFetchTaskInit
parameter_list|(
name|boolean
name|fetchTaskInit
parameter_list|)
block|{
name|this
operator|.
name|fetchTaskInit
operator|=
name|fetchTaskInit
expr_stmt|;
block|}
specifier|protected
name|void
name|reset
parameter_list|()
block|{
name|rootTasks
operator|=
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|stripQuotes
parameter_list|(
name|String
name|val
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
operator|(
name|val
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'\''
operator|&&
name|val
operator|.
name|charAt
argument_list|(
name|val
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'\''
operator|)
operator|||
operator|(
name|val
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'\"'
operator|&&
name|val
operator|.
name|charAt
argument_list|(
name|val
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'\"'
operator|)
condition|)
block|{
name|val
operator|=
name|val
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|val
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|val
return|;
block|}
specifier|public
specifier|static
name|String
name|charSetString
parameter_list|(
name|String
name|charSetName
parameter_list|,
name|String
name|charSetString
parameter_list|)
throws|throws
name|SemanticException
block|{
try|try
block|{
comment|// The character set name starts with a _, so strip that
name|charSetName
operator|=
name|charSetName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|charSetString
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'\''
condition|)
return|return
operator|new
name|String
argument_list|(
name|unescapeSQLString
argument_list|(
name|charSetString
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|charSetName
argument_list|)
return|;
else|else
comment|// hex input is also supported
block|{
assert|assert
name|charSetString
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'0'
assert|;
assert|assert
name|charSetString
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
operator|==
literal|'x'
assert|;
name|charSetString
operator|=
name|charSetString
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bArray
init|=
operator|new
name|byte
index|[
name|charSetString
operator|.
name|length
argument_list|()
operator|/
literal|2
index|]
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|charSetString
operator|.
name|length
argument_list|()
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|int
name|val
init|=
name|Character
operator|.
name|digit
argument_list|(
name|charSetString
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|,
literal|16
argument_list|)
operator|*
literal|16
operator|+
name|Character
operator|.
name|digit
argument_list|(
name|charSetString
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
literal|16
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|>
literal|127
condition|)
name|val
operator|=
name|val
operator|-
literal|256
expr_stmt|;
name|bArray
index|[
name|j
operator|++
index|]
operator|=
operator|new
name|Integer
argument_list|(
name|val
argument_list|)
operator|.
name|byteValue
argument_list|()
expr_stmt|;
block|}
name|String
name|res
init|=
operator|new
name|String
argument_list|(
name|bArray
argument_list|,
name|charSetName
argument_list|)
decl_stmt|;
return|return
name|res
return|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Remove the encapsulating "`" pair from the identifier.    * We allow users to use "`" to escape identifier for table names,    * column names and aliases, in case that coincide with Hive language    * keywords.    */
specifier|public
specifier|static
name|String
name|unescapeIdentifier
parameter_list|(
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|val
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'`'
operator|&&
name|val
operator|.
name|charAt
argument_list|(
name|val
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'`'
condition|)
block|{
name|val
operator|=
name|val
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|val
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|val
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|public
specifier|static
name|String
name|unescapeSQLString
parameter_list|(
name|String
name|b
parameter_list|)
block|{
name|Character
name|enclosure
init|=
literal|null
decl_stmt|;
comment|// Some of the strings can be passed in as unicode. For example, the
comment|// delimiter can be passed in as \002 - So, we first check if the
comment|// string is a unicode number, else go back to the old behavior
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|b
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|b
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|currentChar
init|=
name|b
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|enclosure
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|currentChar
operator|==
literal|'\''
operator|||
name|b
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'\"'
condition|)
block|{
name|enclosure
operator|=
name|currentChar
expr_stmt|;
block|}
comment|// ignore all other chars outside the enclosure
continue|continue;
block|}
if|if
condition|(
name|enclosure
operator|.
name|equals
argument_list|(
name|currentChar
argument_list|)
condition|)
block|{
name|enclosure
operator|=
literal|null
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|currentChar
operator|==
literal|'\\'
operator|&&
operator|(
name|i
operator|+
literal|4
operator|<
name|b
operator|.
name|length
argument_list|()
operator|)
condition|)
block|{
name|char
name|i1
init|=
name|b
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|char
name|i2
init|=
name|b
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
decl_stmt|;
name|char
name|i3
init|=
name|b
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|i1
operator|>=
literal|'0'
operator|&&
name|i1
operator|<=
literal|'1'
operator|)
operator|&&
operator|(
name|i2
operator|>=
literal|'0'
operator|&&
name|i2
operator|<=
literal|'7'
operator|)
operator|&&
operator|(
name|i3
operator|>=
literal|'0'
operator|&&
name|i3
operator|<=
literal|'7'
operator|)
condition|)
block|{
name|byte
name|bVal
init|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|i3
operator|-
literal|'0'
operator|)
operator|+
operator|(
operator|(
name|i2
operator|-
literal|'0'
operator|)
operator|*
literal|8
operator|)
operator|+
operator|(
operator|(
name|i1
operator|-
literal|'0'
operator|)
operator|*
literal|8
operator|*
literal|8
operator|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bValArr
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
name|bValArr
index|[
literal|0
index|]
operator|=
name|bVal
expr_stmt|;
name|String
name|tmp
init|=
operator|new
name|String
argument_list|(
name|bValArr
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|3
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
name|currentChar
operator|==
literal|'\\'
operator|&&
operator|(
name|i
operator|+
literal|2
operator|<
name|b
operator|.
name|length
argument_list|()
operator|)
condition|)
block|{
name|char
name|n
init|=
name|b
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|n
condition|)
block|{
case|case
literal|'0'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\0"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\''
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'"'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'b'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\b"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'n'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'r'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\r"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'t'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'Z'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\u001A"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\\'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\\"
argument_list|)
expr_stmt|;
break|break;
comment|// The following 2 lines are exactly what MySQL does
case|case
literal|'%'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\\%"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'_'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\\_"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|sb
operator|.
name|append
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|currentChar
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|getInputs
parameter_list|()
block|{
return|return
name|inputs
return|;
block|}
specifier|public
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|getOutputs
parameter_list|()
block|{
return|return
name|outputs
return|;
block|}
comment|/**    *  Get the list of FieldSchema out of the ASTNode.     */
specifier|protected
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getColumns
parameter_list|(
name|ASTNode
name|ast
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|colList
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|numCh
init|=
name|ast
operator|.
name|getChildCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCh
condition|;
name|i
operator|++
control|)
block|{
name|FieldSchema
name|col
init|=
operator|new
name|FieldSchema
argument_list|()
decl_stmt|;
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// child 0 is the name of the column
name|col
operator|.
name|setName
argument_list|(
name|unescapeIdentifier
argument_list|(
name|child
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// child 1 is the type of the column
name|ASTNode
name|typeChild
init|=
call|(
name|ASTNode
call|)
argument_list|(
name|child
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|col
operator|.
name|setType
argument_list|(
name|getTypeStringFromAST
argument_list|(
name|typeChild
argument_list|)
argument_list|)
expr_stmt|;
comment|// child 2 is the optional comment of the column
if|if
condition|(
name|child
operator|.
name|getChildCount
argument_list|()
operator|==
literal|3
condition|)
name|col
operator|.
name|setComment
argument_list|(
name|unescapeSQLString
argument_list|(
name|child
operator|.
name|getChild
argument_list|(
literal|2
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|colList
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
return|return
name|colList
return|;
block|}
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getColumnNames
parameter_list|(
name|ASTNode
name|ast
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|colList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|numCh
init|=
name|ast
operator|.
name|getChildCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCh
condition|;
name|i
operator|++
control|)
block|{
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|colList
operator|.
name|add
argument_list|(
name|unescapeIdentifier
argument_list|(
name|child
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|colList
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Order
argument_list|>
name|getColumnNamesOrder
parameter_list|(
name|ASTNode
name|ast
parameter_list|)
block|{
name|List
argument_list|<
name|Order
argument_list|>
name|colList
init|=
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|numCh
init|=
name|ast
operator|.
name|getChildCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCh
condition|;
name|i
operator|++
control|)
block|{
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TABSORTCOLNAMEASC
condition|)
name|colList
operator|.
name|add
argument_list|(
operator|new
name|Order
argument_list|(
name|unescapeIdentifier
argument_list|(
name|child
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|colList
operator|.
name|add
argument_list|(
operator|new
name|Order
argument_list|(
name|unescapeIdentifier
argument_list|(
name|child
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|colList
return|;
block|}
specifier|protected
specifier|static
name|String
name|getTypeStringFromAST
parameter_list|(
name|ASTNode
name|typeNode
parameter_list|)
throws|throws
name|SemanticException
block|{
switch|switch
condition|(
name|typeNode
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|TOK_LIST
case|:
return|return
name|Constants
operator|.
name|LIST_TYPE_NAME
operator|+
literal|"<"
operator|+
name|getTypeStringFromAST
argument_list|(
operator|(
name|ASTNode
operator|)
name|typeNode
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
literal|">"
return|;
case|case
name|HiveParser
operator|.
name|TOK_MAP
case|:
return|return
name|Constants
operator|.
name|MAP_TYPE_NAME
operator|+
literal|"<"
operator|+
name|getTypeStringFromAST
argument_list|(
operator|(
name|ASTNode
operator|)
name|typeNode
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
literal|","
operator|+
name|getTypeStringFromAST
argument_list|(
operator|(
name|ASTNode
operator|)
name|typeNode
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|+
literal|">"
return|;
case|case
name|HiveParser
operator|.
name|TOK_STRUCT
case|:
return|return
name|getStructTypeStringFromAST
argument_list|(
name|typeNode
argument_list|)
return|;
default|default:
return|return
name|DDLSemanticAnalyzer
operator|.
name|getTypeName
argument_list|(
name|typeNode
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getStructTypeStringFromAST
parameter_list|(
name|ASTNode
name|typeNode
parameter_list|)
throws|throws
name|SemanticException
block|{
name|String
name|typeStr
init|=
name|Constants
operator|.
name|STRUCT_TYPE_NAME
operator|+
literal|"<"
decl_stmt|;
name|typeNode
operator|=
operator|(
name|ASTNode
operator|)
name|typeNode
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|children
init|=
name|typeNode
operator|.
name|getChildCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|<=
literal|0
condition|)
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"empty struct not allowed."
argument_list|)
throw|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
condition|;
name|i
operator|++
control|)
block|{
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|typeNode
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|typeStr
operator|+=
name|unescapeIdentifier
argument_list|(
name|child
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
operator|+
literal|":"
expr_stmt|;
name|typeStr
operator|+=
name|getTypeStringFromAST
argument_list|(
operator|(
name|ASTNode
operator|)
name|child
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|children
operator|-
literal|1
condition|)
name|typeStr
operator|+=
literal|","
expr_stmt|;
block|}
name|typeStr
operator|+=
literal|">"
expr_stmt|;
return|return
name|typeStr
return|;
block|}
specifier|public
specifier|static
class|class
name|tableSpec
block|{
specifier|public
name|String
name|tableName
decl_stmt|;
specifier|public
name|Table
name|tableHandle
decl_stmt|;
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
decl_stmt|;
specifier|public
name|Partition
name|partHandle
decl_stmt|;
specifier|public
name|tableSpec
parameter_list|(
name|Hive
name|db
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|ASTNode
name|ast
parameter_list|)
throws|throws
name|SemanticException
block|{
assert|assert
operator|(
name|ast
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TAB
operator|)
assert|;
name|int
name|childIndex
init|=
literal|0
decl_stmt|;
try|try
block|{
comment|// get table metadata
name|tableName
operator|=
name|unescapeIdentifier
argument_list|(
name|ast
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|testMode
init|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETESTMODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|testMode
condition|)
name|tableName
operator|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETESTMODEPREFIX
argument_list|)
operator|+
name|tableName
expr_stmt|;
name|tableHandle
operator|=
name|db
operator|.
name|getTable
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidTableException
name|ite
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_TABLE
operator|.
name|getMsg
argument_list|(
name|ast
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|ite
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|GENERIC_ERROR
operator|.
name|getMsg
argument_list|(
name|ast
operator|.
name|getChild
argument_list|(
name|childIndex
argument_list|)
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// get partition metadata if partition specified
if|if
condition|(
name|ast
operator|.
name|getChildCount
argument_list|()
operator|==
literal|2
condition|)
block|{
name|childIndex
operator|=
literal|1
expr_stmt|;
name|ASTNode
name|partspec
init|=
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|partSpec
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partspec
operator|.
name|getChildCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ASTNode
name|partspec_val
init|=
operator|(
name|ASTNode
operator|)
name|partspec
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|val
init|=
name|stripQuotes
argument_list|(
name|partspec_val
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|partSpec
operator|.
name|put
argument_list|(
name|unescapeIdentifier
argument_list|(
name|partspec_val
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// this doesn't create partition. partition is created in MoveTask
name|partHandle
operator|=
operator|new
name|Partition
argument_list|(
name|tableHandle
argument_list|,
name|partSpec
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_PARTITION
operator|.
name|getMsg
argument_list|(
name|ast
operator|.
name|getChild
argument_list|(
name|childIndex
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|partHandle
operator|!=
literal|null
condition|)
return|return
name|partHandle
operator|.
name|toString
argument_list|()
return|;
else|else
return|return
name|tableHandle
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

