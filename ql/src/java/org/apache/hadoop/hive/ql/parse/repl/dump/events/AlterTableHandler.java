begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|dump
operator|.
name|events
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|repl
operator|.
name|ReplScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|AlterTableMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|util
operator|.
name|ReplUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|EximUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|DumpType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|dump
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|load
operator|.
name|DumpMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
class|class
name|AlterTableHandler
extends|extends
name|AbstractEventHandler
argument_list|<
name|AlterTableMessage
argument_list|>
block|{
specifier|private
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|before
decl_stmt|;
specifier|private
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|after
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isTruncateOp
decl_stmt|;
specifier|private
name|Scenario
name|scenario
decl_stmt|;
specifier|private
enum|enum
name|Scenario
block|{
name|ALTER
block|{
annotation|@
name|Override
name|DumpType
name|dumpType
parameter_list|()
block|{
return|return
name|DumpType
operator|.
name|EVENT_ALTER_TABLE
return|;
block|}
block|}
block|,
name|RENAME
block|{
annotation|@
name|Override
name|DumpType
name|dumpType
parameter_list|()
block|{
return|return
name|DumpType
operator|.
name|EVENT_RENAME_TABLE
return|;
block|}
block|}
block|,
name|TRUNCATE
block|{
annotation|@
name|Override
name|DumpType
name|dumpType
parameter_list|()
block|{
return|return
name|DumpType
operator|.
name|EVENT_TRUNCATE_TABLE
return|;
block|}
block|}
block|,
name|DROP
block|{
annotation|@
name|Override
name|DumpType
name|dumpType
parameter_list|()
block|{
return|return
name|DumpType
operator|.
name|EVENT_RENAME_DROP_TABLE
return|;
block|}
block|}
block|;
specifier|abstract
name|DumpType
name|dumpType
parameter_list|()
function_decl|;
block|}
name|AlterTableHandler
parameter_list|(
name|NotificationEvent
name|event
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|before
operator|=
name|eventMessage
operator|.
name|getTableObjBefore
argument_list|()
expr_stmt|;
name|after
operator|=
name|eventMessage
operator|.
name|getTableObjAfter
argument_list|()
expr_stmt|;
name|isTruncateOp
operator|=
name|eventMessage
operator|.
name|getIsTruncateOp
argument_list|()
expr_stmt|;
name|scenario
operator|=
name|scenarioType
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|AlterTableMessage
name|eventMessage
parameter_list|(
name|String
name|stringRepresentation
parameter_list|)
block|{
return|return
name|deserializer
operator|.
name|getAlterTableMessage
argument_list|(
name|stringRepresentation
argument_list|)
return|;
block|}
specifier|private
name|Scenario
name|scenarioType
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|before
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|after
parameter_list|)
block|{
if|if
condition|(
name|before
operator|.
name|getDbName
argument_list|()
operator|.
name|equals
argument_list|(
name|after
operator|.
name|getDbName
argument_list|()
argument_list|)
operator|&&
name|before
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|after
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|isTruncateOp
condition|?
name|Scenario
operator|.
name|TRUNCATE
else|:
name|Scenario
operator|.
name|ALTER
return|;
block|}
else|else
block|{
return|return
name|Scenario
operator|.
name|RENAME
return|;
block|}
block|}
comment|// Return true, if event needs to be dumped, else return false.
specifier|private
name|boolean
name|handleRenameForReplacePolicy
parameter_list|(
name|Context
name|withinContext
parameter_list|,
name|String
name|oldName
parameter_list|,
name|String
name|newName
parameter_list|)
block|{
comment|// If the table is renamed after being added to the list of tables to be bootstrapped, then remove it from the
comment|// list of tables to be bootstrapped.
name|boolean
name|oldTableInBootstrapList
init|=
name|withinContext
operator|.
name|removeFromListOfTablesForBootstrap
argument_list|(
name|oldName
argument_list|)
decl_stmt|;
comment|// If the new table satisfies the new policy, then add it to the list of table to be bootstrapped.
if|if
condition|(
name|ReplUtils
operator|.
name|tableIncludedInReplScope
argument_list|(
name|withinContext
operator|.
name|replScope
argument_list|,
name|newName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Table "
operator|+
name|newName
operator|+
literal|" is added for bootstrap "
operator|+
literal|" during rename from "
operator|+
name|oldName
argument_list|)
expr_stmt|;
name|withinContext
operator|.
name|addToListOfTablesForBootstrap
argument_list|(
name|newName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ReplUtils
operator|.
name|tableIncludedInReplScope
argument_list|(
name|withinContext
operator|.
name|oldReplScope
argument_list|,
name|oldName
argument_list|)
condition|)
block|{
comment|// If the old table was in the list of tables to be bootstrapped which is a multi rename case, the old table
comment|// is removed from the list of tables, else drop event is dumped for the old table. This is done even if the
comment|// table is not present at target. This makes the logic simple and has no side effect as drop is idempotent.
if|if
condition|(
name|oldTableInBootstrapList
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// To keep the logic simple, rename with replace policy is always drop and create.
name|scenario
operator|=
name|Scenario
operator|.
name|DROP
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Table "
operator|+
name|oldName
operator|+
literal|" will be dropped as the table is renamed to "
operator|+
name|newName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// If the old table does not satisfy the old policy then event can be skipped. in case the new table satisfies the
comment|// new policy, it is already added to the list of tables to be bootstrapped.
return|return
literal|false
return|;
block|}
comment|// return true, if event needs to be dumped, else return false.
specifier|private
name|boolean
name|handleRenameForTableLevelReplication
parameter_list|(
name|Context
name|withinContext
parameter_list|,
name|String
name|oldName
parameter_list|,
name|String
name|newName
parameter_list|)
block|{
if|if
condition|(
name|ReplUtils
operator|.
name|tableIncludedInReplScope
argument_list|(
name|withinContext
operator|.
name|replScope
argument_list|,
name|oldName
argument_list|)
condition|)
block|{
comment|// If the table is renamed after being added to the list of tables to be bootstrapped, then remove it from the
comment|// list of tables to be bootstrapped.
name|boolean
name|oldTableInBootstrapList
init|=
name|withinContext
operator|.
name|removeFromListOfTablesForBootstrap
argument_list|(
name|oldName
argument_list|)
decl_stmt|;
comment|// If old table satisfies the policy, but the new table does not, then the old table should be dropped.
comment|// This should be done, only if the old table is not in the list of tables to be bootstrapped which is a multi
comment|// rename case. In case of multi rename, only the first rename should do the drop.
if|if
condition|(
operator|!
name|ReplUtils
operator|.
name|tableIncludedInReplScope
argument_list|(
name|withinContext
operator|.
name|replScope
argument_list|,
name|newName
argument_list|)
condition|)
block|{
if|if
condition|(
name|oldTableInBootstrapList
condition|)
block|{
comment|// If the old table was present in the list of tables to be bootstrapped, then just ignore the event.
return|return
literal|false
return|;
block|}
else|else
block|{
name|scenario
operator|=
name|Scenario
operator|.
name|DROP
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Table "
operator|+
name|oldName
operator|+
literal|" will be dropped as the table is renamed to "
operator|+
name|newName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|// If the old table was in the list of tables to be bootstrapped which is a multi rename case, the old table
comment|// is removed from the list of tables to be bootstrapped and new one is added.
if|if
condition|(
name|oldTableInBootstrapList
condition|)
block|{
name|withinContext
operator|.
name|addToListOfTablesForBootstrap
argument_list|(
name|newName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// If both old and new table satisfies the policy and old table is present at target, then dump the rename event.
name|LOG
operator|.
name|info
argument_list|(
literal|"both old and new table satisfies the policy"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// if the old table does not satisfies the policy, but the new one satisfies, then the new table should be
comment|// added to the list of tables to be bootstrapped and don't dump the event.
if|if
condition|(
name|ReplUtils
operator|.
name|tableIncludedInReplScope
argument_list|(
name|withinContext
operator|.
name|replScope
argument_list|,
name|newName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Table "
operator|+
name|newName
operator|+
literal|" is added for bootstrap "
operator|+
literal|" during rename from "
operator|+
name|oldName
argument_list|)
expr_stmt|;
name|withinContext
operator|.
name|addToListOfTablesForBootstrap
argument_list|(
name|newName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// if both old and new table does not satisfies the policy, then don't dump the event.
name|LOG
operator|.
name|info
argument_list|(
literal|"both old and new table does not satisfies the policy"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Context
name|withinContext
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing#{} ALTER_TABLE message : {}"
argument_list|,
name|fromEventId
argument_list|()
argument_list|,
name|eventMessageAsJSON
argument_list|)
expr_stmt|;
name|Table
name|qlMdTableBefore
init|=
operator|new
name|Table
argument_list|(
name|before
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|bootstrapTableList
decl_stmt|;
name|ReplScope
name|oldReplScope
decl_stmt|;
if|if
condition|(
name|Scenario
operator|.
name|RENAME
operator|==
name|scenario
condition|)
block|{
comment|// Handling for table level replication is not done in shouldReplicate method for rename events. Its done in
comment|// handleRenameForReplacePolicy and handleRenameForTableLevelReplication method.
name|bootstrapTableList
operator|=
literal|null
expr_stmt|;
name|oldReplScope
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|// This check was ignored for alter table event during event filter.
if|if
condition|(
operator|!
name|ReplUtils
operator|.
name|tableIncludedInReplScope
argument_list|(
name|withinContext
operator|.
name|replScope
argument_list|,
name|before
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Table "
operator|+
name|before
operator|.
name|getTableName
argument_list|()
operator|+
literal|" does not satisfy the policy"
argument_list|)
expr_stmt|;
return|return;
block|}
name|bootstrapTableList
operator|=
name|withinContext
operator|.
name|getTablesForBootstrap
argument_list|()
expr_stmt|;
name|oldReplScope
operator|=
name|withinContext
operator|.
name|oldReplScope
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Utils
operator|.
name|shouldReplicate
argument_list|(
name|withinContext
operator|.
name|replicationSpec
argument_list|,
name|qlMdTableBefore
argument_list|,
literal|true
argument_list|,
name|bootstrapTableList
argument_list|,
name|oldReplScope
argument_list|,
name|withinContext
operator|.
name|hiveConf
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|withinContext
operator|.
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_BOOTSTRAP_ACID_TABLES
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|before
argument_list|)
operator|&&
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|after
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The table "
operator|+
name|after
operator|.
name|getTableName
argument_list|()
operator|+
literal|" is converted to ACID table."
operator|+
literal|" It will be replicated with bootstrap load as hive.repl.bootstrap.acid.tables is set to true."
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|Scenario
operator|.
name|RENAME
operator|==
name|scenario
condition|)
block|{
name|String
name|oldName
init|=
name|before
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|String
name|newName
init|=
name|after
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|boolean
name|needDump
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|withinContext
operator|.
name|oldReplScope
operator|!=
literal|null
condition|)
block|{
name|needDump
operator|=
name|handleRenameForReplacePolicy
argument_list|(
name|withinContext
argument_list|,
name|oldName
argument_list|,
name|newName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|withinContext
operator|.
name|replScope
operator|.
name|includeAllTables
argument_list|()
condition|)
block|{
name|needDump
operator|=
name|handleRenameForTableLevelReplication
argument_list|(
name|withinContext
argument_list|,
name|oldName
argument_list|,
name|newName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|needDump
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Rename event for table "
operator|+
name|oldName
operator|+
literal|" to "
operator|+
name|newName
operator|+
literal|" is skipped from dumping"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|Scenario
operator|.
name|ALTER
operator|==
name|scenario
condition|)
block|{
name|withinContext
operator|.
name|replicationSpec
operator|.
name|setIsMetadataOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Table
name|qlMdTableAfter
init|=
operator|new
name|Table
argument_list|(
name|after
argument_list|)
decl_stmt|;
name|Path
name|metaDataPath
init|=
operator|new
name|Path
argument_list|(
name|withinContext
operator|.
name|eventRoot
argument_list|,
name|EximUtil
operator|.
name|METADATA_NAME
argument_list|)
decl_stmt|;
comment|// If we are not dumping metadata about a table, we shouldn't be dumping basic statistics
comment|// as well, since that won't be accurate. So reset them to what they would look like for an
comment|// empty table.
if|if
condition|(
name|Utils
operator|.
name|shouldDumpMetaDataOnly
argument_list|(
name|qlMdTableAfter
argument_list|,
name|withinContext
operator|.
name|hiveConf
argument_list|)
condition|)
block|{
name|qlMdTableAfter
operator|.
name|setStatsStateLikeNewTable
argument_list|()
expr_stmt|;
block|}
name|EximUtil
operator|.
name|createExportDump
argument_list|(
name|metaDataPath
operator|.
name|getFileSystem
argument_list|(
name|withinContext
operator|.
name|hiveConf
argument_list|)
argument_list|,
name|metaDataPath
argument_list|,
name|qlMdTableAfter
argument_list|,
literal|null
argument_list|,
name|withinContext
operator|.
name|replicationSpec
argument_list|,
name|withinContext
operator|.
name|hiveConf
argument_list|)
expr_stmt|;
block|}
name|DumpMetaData
name|dmd
init|=
name|withinContext
operator|.
name|createDmd
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|dmd
operator|.
name|setPayload
argument_list|(
name|eventMessageAsJSON
argument_list|)
expr_stmt|;
name|dmd
operator|.
name|write
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|DumpType
name|dumpType
parameter_list|()
block|{
return|return
name|scenario
operator|.
name|dumpType
argument_list|()
return|;
block|}
block|}
end_class

end_unit

