begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
operator|.
name|Converter
import|;
end_import

begin_comment
comment|/**  * Unwraps values from current key with valueIndex in mapjoin desc  */
end_comment

begin_class
specifier|public
class|class
name|UnwrapRowContainer
implements|implements
name|MapJoinRowContainer
implements|,
name|AbstractRowContainer
operator|.
name|RowIterator
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
block|{
specifier|private
specifier|final
name|byte
name|alias
decl_stmt|;
specifier|private
specifier|final
name|int
index|[]
name|valueIndex
decl_stmt|;
specifier|private
specifier|final
name|Converter
index|[]
name|converters
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|tagged
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|unwrapped
decl_stmt|;
specifier|private
specifier|transient
name|Object
index|[]
name|currentKey
decl_stmt|;
specifier|private
specifier|transient
name|MapJoinRowContainer
name|internal
decl_stmt|;
specifier|private
specifier|transient
name|RowIterator
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|iterator
decl_stmt|;
specifier|public
name|UnwrapRowContainer
parameter_list|(
name|byte
name|alias
parameter_list|,
name|int
index|[]
name|valueIndex
parameter_list|,
name|Converter
index|[]
name|converters
parameter_list|,
name|boolean
name|tagged
parameter_list|)
block|{
name|this
operator|.
name|alias
operator|=
name|alias
expr_stmt|;
name|this
operator|.
name|valueIndex
operator|=
name|valueIndex
expr_stmt|;
name|this
operator|.
name|converters
operator|=
name|converters
expr_stmt|;
name|this
operator|.
name|tagged
operator|=
name|tagged
expr_stmt|;
name|this
operator|.
name|unwrapped
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|MapJoinRowContainer
name|setInternal
parameter_list|(
name|MapJoinRowContainer
name|internal
parameter_list|,
name|Object
index|[]
name|currentKey
parameter_list|)
block|{
name|this
operator|.
name|internal
operator|=
name|internal
expr_stmt|;
name|this
operator|.
name|currentKey
operator|=
name|currentKey
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|first
parameter_list|()
throws|throws
name|HiveException
block|{
name|iterator
operator|=
name|internal
operator|.
name|rowIter
argument_list|()
expr_stmt|;
return|return
name|unwrap
argument_list|(
name|iterator
operator|.
name|first
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|next
parameter_list|()
throws|throws
name|HiveException
block|{
return|return
name|unwrap
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|unwrap
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|unwrapped
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|valueIndex
operator|.
name|length
condition|;
name|pos
operator|++
control|)
block|{
name|int
name|index
init|=
name|valueIndex
index|[
name|pos
index|]
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|currentKey
operator|==
literal|null
condition|)
block|{
name|unwrapped
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|converters
index|[
name|pos
index|]
operator|!=
literal|null
condition|)
block|{
name|unwrapped
operator|.
name|add
argument_list|(
name|converters
index|[
name|pos
index|]
operator|.
name|convert
argument_list|(
name|currentKey
index|[
name|index
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unwrapped
operator|.
name|add
argument_list|(
name|currentKey
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|unwrapped
operator|.
name|add
argument_list|(
name|values
operator|.
name|get
argument_list|(
operator|-
name|index
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tagged
condition|)
block|{
name|unwrapped
operator|.
name|add
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|values
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// append filter tag
block|}
return|return
name|unwrapped
return|;
block|}
annotation|@
name|Override
specifier|public
name|RowIterator
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|rowIter
parameter_list|()
throws|throws
name|HiveException
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRow
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|t
parameter_list|)
throws|throws
name|HiveException
block|{
name|internal
operator|.
name|addRow
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasRows
parameter_list|()
throws|throws
name|HiveException
block|{
return|return
name|internal
operator|.
name|hasRows
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSingleRow
parameter_list|()
throws|throws
name|HiveException
block|{
return|return
name|internal
operator|.
name|isSingleRow
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|rowCount
parameter_list|()
throws|throws
name|HiveException
block|{
return|return
name|internal
operator|.
name|rowCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearRows
parameter_list|()
throws|throws
name|HiveException
block|{
name|internal
operator|.
name|clearRows
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getAliasFilter
parameter_list|()
throws|throws
name|HiveException
block|{
return|return
name|internal
operator|.
name|getAliasFilter
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|MapJoinRowContainer
name|copy
parameter_list|()
throws|throws
name|HiveException
block|{
name|internal
operator|=
name|internal
operator|.
name|copy
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRow
parameter_list|(
name|Object
index|[]
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
name|internal
operator|.
name|addRow
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|MapJoinObjectSerDeContext
name|valueContext
parameter_list|,
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
throws|,
name|SerDeException
block|{
name|internal
operator|.
name|write
argument_list|(
name|valueContext
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|alias
operator|+
operator|(
name|tagged
condition|?
literal|":TAGGED"
else|:
literal|""
operator|)
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|valueIndex
argument_list|)
return|;
block|}
block|}
end_class

end_unit

