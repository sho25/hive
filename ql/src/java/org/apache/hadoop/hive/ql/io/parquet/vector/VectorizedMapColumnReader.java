begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ListColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|MapColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * It's column level Parquet reader which is used to read a batch of records for a map column.  */
end_comment

begin_class
specifier|public
class|class
name|VectorizedMapColumnReader
implements|implements
name|VectorizedColumnReader
block|{
specifier|private
name|VectorizedListColumnReader
name|keyColumnReader
decl_stmt|;
specifier|private
name|VectorizedListColumnReader
name|valueColumnReader
decl_stmt|;
specifier|public
name|VectorizedMapColumnReader
parameter_list|(
name|VectorizedListColumnReader
name|keyColumnReader
parameter_list|,
name|VectorizedListColumnReader
name|valueColumnReader
parameter_list|)
block|{
name|this
operator|.
name|keyColumnReader
operator|=
name|keyColumnReader
expr_stmt|;
name|this
operator|.
name|valueColumnReader
operator|=
name|valueColumnReader
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readBatch
parameter_list|(
name|int
name|total
parameter_list|,
name|ColumnVector
name|column
parameter_list|,
name|TypeInfo
name|columnType
parameter_list|)
throws|throws
name|IOException
block|{
name|MapColumnVector
name|mapColumnVector
init|=
operator|(
name|MapColumnVector
operator|)
name|column
decl_stmt|;
name|MapTypeInfo
name|mapTypeInfo
init|=
operator|(
name|MapTypeInfo
operator|)
name|columnType
decl_stmt|;
name|ListTypeInfo
name|keyListTypeInfo
init|=
operator|new
name|ListTypeInfo
argument_list|()
decl_stmt|;
name|keyListTypeInfo
operator|.
name|setListElementTypeInfo
argument_list|(
name|mapTypeInfo
operator|.
name|getMapKeyTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|ListTypeInfo
name|valueListTypeInfo
init|=
operator|new
name|ListTypeInfo
argument_list|()
decl_stmt|;
name|valueListTypeInfo
operator|.
name|setListElementTypeInfo
argument_list|(
name|mapTypeInfo
operator|.
name|getMapValueTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
comment|// initialize 2 ListColumnVector for keys and values
name|ListColumnVector
name|keyListColumnVector
init|=
operator|new
name|ListColumnVector
argument_list|()
decl_stmt|;
name|ListColumnVector
name|valueListColumnVector
init|=
operator|new
name|ListColumnVector
argument_list|()
decl_stmt|;
comment|// read the keys and values
name|keyColumnReader
operator|.
name|readBatch
argument_list|(
name|total
argument_list|,
name|keyListColumnVector
argument_list|,
name|keyListTypeInfo
argument_list|)
expr_stmt|;
name|valueColumnReader
operator|.
name|readBatch
argument_list|(
name|total
argument_list|,
name|valueListColumnVector
argument_list|,
name|valueListTypeInfo
argument_list|)
expr_stmt|;
comment|// set the related attributes according to the keys and values
name|mapColumnVector
operator|.
name|keys
operator|=
name|keyListColumnVector
operator|.
name|child
expr_stmt|;
name|mapColumnVector
operator|.
name|values
operator|=
name|valueListColumnVector
operator|.
name|child
expr_stmt|;
name|mapColumnVector
operator|.
name|isNull
operator|=
name|keyListColumnVector
operator|.
name|isNull
expr_stmt|;
name|mapColumnVector
operator|.
name|offsets
operator|=
name|keyListColumnVector
operator|.
name|offsets
expr_stmt|;
name|mapColumnVector
operator|.
name|lengths
operator|=
name|keyListColumnVector
operator|.
name|lengths
expr_stmt|;
name|mapColumnVector
operator|.
name|childCount
operator|=
name|keyListColumnVector
operator|.
name|childCount
expr_stmt|;
name|mapColumnVector
operator|.
name|isRepeating
operator|=
name|keyListColumnVector
operator|.
name|isRepeating
operator|&&
name|valueListColumnVector
operator|.
name|isRepeating
expr_stmt|;
block|}
block|}
end_class

end_unit

