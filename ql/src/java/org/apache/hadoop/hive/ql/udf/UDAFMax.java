begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDAF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDAFEvaluator
import|;
end_import

begin_class
specifier|public
class|class
name|UDAFMax
extends|extends
name|UDAF
block|{
specifier|static
specifier|public
class|class
name|MaxShortEvaluator
implements|implements
name|UDAFEvaluator
block|{
specifier|private
name|short
name|mMax
decl_stmt|;
specifier|private
name|boolean
name|mEmpty
decl_stmt|;
specifier|public
name|MaxShortEvaluator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|()
block|{
name|mMax
operator|=
literal|0
expr_stmt|;
name|mEmpty
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|iterate
parameter_list|(
name|Short
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mEmpty
condition|)
block|{
name|mMax
operator|=
name|o
expr_stmt|;
name|mEmpty
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|mMax
operator|=
operator|(
name|short
operator|)
name|Math
operator|.
name|max
argument_list|(
name|mMax
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|Short
name|terminatePartial
parameter_list|()
block|{
return|return
name|mEmpty
condition|?
literal|null
else|:
name|Short
operator|.
name|valueOf
argument_list|(
name|mMax
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|merge
parameter_list|(
name|Short
name|o
parameter_list|)
block|{
return|return
name|iterate
argument_list|(
name|o
argument_list|)
return|;
block|}
specifier|public
name|Short
name|terminate
parameter_list|()
block|{
return|return
name|mEmpty
condition|?
literal|null
else|:
name|Short
operator|.
name|valueOf
argument_list|(
name|mMax
argument_list|)
return|;
block|}
block|}
specifier|static
specifier|public
class|class
name|MaxIntEvaluator
implements|implements
name|UDAFEvaluator
block|{
specifier|private
name|int
name|mMax
decl_stmt|;
specifier|private
name|boolean
name|mEmpty
decl_stmt|;
specifier|public
name|MaxIntEvaluator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|()
block|{
name|mMax
operator|=
literal|0
expr_stmt|;
name|mEmpty
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|iterate
parameter_list|(
name|Integer
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mEmpty
condition|)
block|{
name|mMax
operator|=
name|o
expr_stmt|;
name|mEmpty
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|mMax
operator|=
name|Math
operator|.
name|max
argument_list|(
name|mMax
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|Integer
name|terminatePartial
parameter_list|()
block|{
return|return
name|mEmpty
condition|?
literal|null
else|:
name|Integer
operator|.
name|valueOf
argument_list|(
name|mMax
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|merge
parameter_list|(
name|Integer
name|o
parameter_list|)
block|{
return|return
name|iterate
argument_list|(
name|o
argument_list|)
return|;
block|}
specifier|public
name|Integer
name|terminate
parameter_list|()
block|{
return|return
name|mEmpty
condition|?
literal|null
else|:
name|Integer
operator|.
name|valueOf
argument_list|(
name|mMax
argument_list|)
return|;
block|}
block|}
specifier|static
specifier|public
class|class
name|MaxLongEvaluator
implements|implements
name|UDAFEvaluator
block|{
specifier|private
name|long
name|mMax
decl_stmt|;
specifier|private
name|boolean
name|mEmpty
decl_stmt|;
specifier|public
name|MaxLongEvaluator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|()
block|{
name|mMax
operator|=
literal|0
expr_stmt|;
name|mEmpty
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|iterate
parameter_list|(
name|Long
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mEmpty
condition|)
block|{
name|mMax
operator|=
name|o
expr_stmt|;
name|mEmpty
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|mMax
operator|=
name|Math
operator|.
name|max
argument_list|(
name|mMax
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|Long
name|terminatePartial
parameter_list|()
block|{
return|return
name|mEmpty
condition|?
literal|null
else|:
name|Long
operator|.
name|valueOf
argument_list|(
name|mMax
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|merge
parameter_list|(
name|Long
name|o
parameter_list|)
block|{
return|return
name|iterate
argument_list|(
name|o
argument_list|)
return|;
block|}
specifier|public
name|Long
name|terminate
parameter_list|()
block|{
return|return
name|mEmpty
condition|?
literal|null
else|:
name|Long
operator|.
name|valueOf
argument_list|(
name|mMax
argument_list|)
return|;
block|}
block|}
specifier|static
specifier|public
class|class
name|MaxFloatEvaluator
implements|implements
name|UDAFEvaluator
block|{
specifier|private
name|float
name|mMax
decl_stmt|;
specifier|private
name|boolean
name|mEmpty
decl_stmt|;
specifier|public
name|MaxFloatEvaluator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|()
block|{
name|mMax
operator|=
literal|0
expr_stmt|;
name|mEmpty
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|iterate
parameter_list|(
name|Float
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mEmpty
condition|)
block|{
name|mMax
operator|=
name|o
expr_stmt|;
name|mEmpty
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|mMax
operator|=
name|Math
operator|.
name|max
argument_list|(
name|mMax
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|Float
name|terminatePartial
parameter_list|()
block|{
return|return
name|mEmpty
condition|?
literal|null
else|:
name|Float
operator|.
name|valueOf
argument_list|(
name|mMax
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|merge
parameter_list|(
name|Float
name|o
parameter_list|)
block|{
return|return
name|iterate
argument_list|(
name|o
argument_list|)
return|;
block|}
specifier|public
name|Float
name|terminate
parameter_list|()
block|{
return|return
name|mEmpty
condition|?
literal|null
else|:
name|Float
operator|.
name|valueOf
argument_list|(
name|mMax
argument_list|)
return|;
block|}
block|}
specifier|static
specifier|public
class|class
name|MaxDoubleEvaluator
implements|implements
name|UDAFEvaluator
block|{
specifier|private
name|double
name|mMax
decl_stmt|;
specifier|private
name|boolean
name|mEmpty
decl_stmt|;
specifier|public
name|MaxDoubleEvaluator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|()
block|{
name|mMax
operator|=
literal|0
expr_stmt|;
name|mEmpty
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|iterate
parameter_list|(
name|Double
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mEmpty
condition|)
block|{
name|mMax
operator|=
name|o
expr_stmt|;
name|mEmpty
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|mMax
operator|=
name|Math
operator|.
name|max
argument_list|(
name|mMax
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|Double
name|terminatePartial
parameter_list|()
block|{
return|return
name|mEmpty
condition|?
literal|null
else|:
name|Double
operator|.
name|valueOf
argument_list|(
name|mMax
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|merge
parameter_list|(
name|Double
name|o
parameter_list|)
block|{
return|return
name|iterate
argument_list|(
name|o
argument_list|)
return|;
block|}
specifier|public
name|Double
name|terminate
parameter_list|()
block|{
return|return
name|mEmpty
condition|?
literal|null
else|:
name|Double
operator|.
name|valueOf
argument_list|(
name|mMax
argument_list|)
return|;
block|}
block|}
specifier|static
specifier|public
class|class
name|MaxStringEvaluator
implements|implements
name|UDAFEvaluator
block|{
specifier|private
name|String
name|mMax
decl_stmt|;
specifier|private
name|boolean
name|mEmpty
decl_stmt|;
specifier|public
name|MaxStringEvaluator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|()
block|{
name|mMax
operator|=
literal|null
expr_stmt|;
name|mEmpty
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|iterate
parameter_list|(
name|String
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mEmpty
condition|)
block|{
name|mMax
operator|=
name|o
expr_stmt|;
name|mEmpty
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mMax
operator|.
name|compareTo
argument_list|(
name|o
argument_list|)
operator|<
literal|0
condition|)
block|{
name|mMax
operator|=
name|o
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|String
name|terminatePartial
parameter_list|()
block|{
return|return
name|mEmpty
condition|?
literal|null
else|:
name|mMax
return|;
block|}
specifier|public
name|boolean
name|merge
parameter_list|(
name|String
name|o
parameter_list|)
block|{
return|return
name|iterate
argument_list|(
name|o
argument_list|)
return|;
block|}
specifier|public
name|String
name|terminate
parameter_list|()
block|{
return|return
name|mEmpty
condition|?
literal|null
else|:
name|mMax
return|;
block|}
block|}
specifier|static
specifier|public
class|class
name|MaxDateEvaluator
implements|implements
name|UDAFEvaluator
block|{
specifier|private
name|Date
name|mMax
decl_stmt|;
specifier|private
name|boolean
name|mEmpty
decl_stmt|;
specifier|public
name|MaxDateEvaluator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|()
block|{
name|mMax
operator|=
literal|null
expr_stmt|;
name|mEmpty
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|iterate
parameter_list|(
name|Date
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mEmpty
condition|)
block|{
name|mMax
operator|=
name|o
expr_stmt|;
name|mEmpty
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mMax
operator|.
name|compareTo
argument_list|(
name|o
argument_list|)
operator|<
literal|0
condition|)
block|{
name|mMax
operator|=
name|o
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|Date
name|terminatePartial
parameter_list|()
block|{
return|return
name|mEmpty
condition|?
literal|null
else|:
name|mMax
return|;
block|}
specifier|public
name|boolean
name|merge
parameter_list|(
name|Date
name|o
parameter_list|)
block|{
return|return
name|iterate
argument_list|(
name|o
argument_list|)
return|;
block|}
specifier|public
name|Date
name|terminate
parameter_list|()
block|{
return|return
name|mEmpty
condition|?
literal|null
else|:
name|mMax
return|;
block|}
block|}
block|}
end_class

end_unit

