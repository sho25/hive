begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|partition
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_comment
comment|/**  * Operation process of exchanging some partitions between tables.  */
end_comment

begin_class
specifier|public
class|class
name|AlterTableExchangePartitionsOperation
extends|extends
name|DDLOperation
argument_list|<
name|AlterTableExchangePartitionsDesc
argument_list|>
block|{
specifier|public
name|AlterTableExchangePartitionsOperation
parameter_list|(
name|DDLOperationContext
name|context
parameter_list|,
name|AlterTableExchangePartitionsDesc
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|()
throws|throws
name|HiveException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpecs
init|=
name|desc
operator|.
name|getPartitionSpecs
argument_list|()
decl_stmt|;
name|Table
name|destTable
init|=
name|desc
operator|.
name|getDestinationTable
argument_list|()
decl_stmt|;
name|Table
name|sourceTable
init|=
name|desc
operator|.
name|getSourceTable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|exchangeTablePartitions
argument_list|(
name|partitionSpecs
argument_list|,
name|sourceTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|sourceTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|destTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|destTable
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
comment|// Reuse the partition specs from dest partition since they should be the same
name|context
operator|.
name|getWork
argument_list|()
operator|.
name|getInputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ReadEntity
argument_list|(
operator|new
name|Partition
argument_list|(
name|sourceTable
argument_list|,
name|partition
operator|.
name|getSpec
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|DDLUtils
operator|.
name|addIfAbsentByName
argument_list|(
operator|new
name|WriteEntity
argument_list|(
operator|new
name|Partition
argument_list|(
name|sourceTable
argument_list|,
name|partition
operator|.
name|getSpec
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DELETE
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|DDLUtils
operator|.
name|addIfAbsentByName
argument_list|(
operator|new
name|WriteEntity
argument_list|(
operator|new
name|Partition
argument_list|(
name|destTable
argument_list|,
name|partition
operator|.
name|getSpec
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|INSERT
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

