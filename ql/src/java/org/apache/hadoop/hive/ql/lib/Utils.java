begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_comment
comment|/**  * Contains common utility functions to manipulate nodes, walkers etc.  */
end_comment

begin_class
specifier|public
class|class
name|Utils
block|{
comment|/**    * Gets the nth ancestor (the parent being the 1st ancestor) in the traversal    * path. n=0 returns the currently visited node.    *     * @param st The stack that encodes the traversal path.    * @param n The value of n (n=0 is the currently visited node).    *     * @return Node The Nth ancestor in the path with respect to the current node.    */
specifier|public
specifier|static
name|Node
name|getNthAncestor
parameter_list|(
name|Stack
argument_list|<
name|Node
argument_list|>
name|st
parameter_list|,
name|int
name|n
parameter_list|)
block|{
assert|assert
operator|(
name|st
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|>=
name|n
operator|)
assert|;
name|Stack
argument_list|<
name|Node
argument_list|>
name|tmpStack
init|=
operator|new
name|Stack
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|n
condition|;
name|i
operator|++
control|)
name|tmpStack
operator|.
name|push
argument_list|(
name|st
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|ret_nd
init|=
name|tmpStack
operator|.
name|peek
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|n
condition|;
name|i
operator|++
control|)
name|st
operator|.
name|push
argument_list|(
name|tmpStack
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tmpStack
operator|.
name|isEmpty
argument_list|()
operator|)
assert|;
return|return
name|ret_nd
return|;
block|}
comment|/**    * Find the first node of a type from ancestor stack, starting from parents.    * Returns null if not found.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|findNode
parameter_list|(
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|target
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|2
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|target
operator|.
name|isInstance
argument_list|(
name|stack
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|stack
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

