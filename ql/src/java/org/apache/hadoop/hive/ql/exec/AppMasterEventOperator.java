begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|TezContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AppMasterEventDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|events
operator|.
name|InputInitializerEvent
import|;
end_import

begin_comment
comment|/**  * AppMasterEventOperator sends any rows it receives to the Tez AM. This can be  * used to control execution dynamically.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"deprecation"
block|,
literal|"serial"
block|}
argument_list|)
specifier|public
class|class
name|AppMasterEventOperator
extends|extends
name|Operator
argument_list|<
name|AppMasterEventDesc
argument_list|>
block|{
specifier|protected
specifier|transient
name|Serializer
name|serializer
decl_stmt|;
specifier|protected
specifier|transient
name|DataOutputBuffer
name|buffer
decl_stmt|;
specifier|protected
specifier|transient
name|boolean
name|hasReachedMaxSize
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|transient
name|long
name|MAX_SIZE
decl_stmt|;
comment|/** Kryo ctor. */
specifier|protected
name|AppMasterEventOperator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|AppMasterEventOperator
parameter_list|(
name|CompilationOpContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|initializeOp
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|MAX_SIZE
operator|=
name|HiveConf
operator|.
name|getLongVar
argument_list|(
name|hconf
argument_list|,
name|ConfVars
operator|.
name|TEZ_DYNAMIC_PARTITION_PRUNING_MAX_EVENT_SIZE
argument_list|)
expr_stmt|;
name|serializer
operator|=
operator|(
name|Serializer
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getTable
argument_list|()
operator|.
name|getDeserializerClass
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|initDataBuffer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|initDataBuffer
parameter_list|(
name|boolean
name|skipPruning
parameter_list|)
throws|throws
name|HiveException
block|{
name|buffer
operator|=
operator|new
name|DataOutputBuffer
argument_list|()
expr_stmt|;
try|try
block|{
comment|// add any other header info
name|getConf
argument_list|()
operator|.
name|writeEventHeader
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
comment|// write byte to say whether to skip pruning or not
name|buffer
operator|.
name|writeBoolean
argument_list|(
name|skipPruning
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|hasReachedMaxSize
condition|)
block|{
return|return;
block|}
name|ObjectInspector
name|rowInspector
init|=
name|inputObjInspectors
index|[
literal|0
index|]
decl_stmt|;
try|try
block|{
name|Writable
name|writableRow
init|=
name|serializer
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|rowInspector
argument_list|)
decl_stmt|;
name|writableRow
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|.
name|getLength
argument_list|()
operator|>
name|MAX_SIZE
condition|)
block|{
if|if
condition|(
name|isLogInfoEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Disabling AM events. Buffer size too large: "
operator|+
name|buffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hasReachedMaxSize
operator|=
literal|true
expr_stmt|;
name|buffer
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|isLogDebugEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"AppMasterEvent: "
operator|+
name|row
argument_list|)
expr_stmt|;
block|}
name|forward
argument_list|(
name|row
argument_list|,
name|rowInspector
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|closeOp
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|abort
condition|)
block|{
name|TezContext
name|context
init|=
operator|(
name|TezContext
operator|)
name|TezContext
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|vertexName
init|=
name|getConf
argument_list|()
operator|.
name|getVertexName
argument_list|()
decl_stmt|;
name|String
name|inputName
init|=
name|getConf
argument_list|()
operator|.
name|getInputName
argument_list|()
decl_stmt|;
name|byte
index|[]
name|payload
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasReachedMaxSize
condition|)
block|{
name|initDataBuffer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|payload
operator|=
operator|new
name|byte
index|[
name|buffer
operator|.
name|getLength
argument_list|()
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|payload
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Event
name|event
init|=
name|InputInitializerEvent
operator|.
name|create
argument_list|(
name|vertexName
argument_list|,
name|inputName
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|payload
argument_list|,
literal|0
argument_list|,
name|payload
operator|.
name|length
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isLogInfoEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending Tez event to vertex = "
operator|+
name|vertexName
operator|+
literal|", input = "
operator|+
name|inputName
operator|+
literal|". Payload size = "
operator|+
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|getTezProcessorContext
argument_list|()
operator|.
name|sendEvents
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|OperatorType
name|getType
parameter_list|()
block|{
return|return
name|OperatorType
operator|.
name|EVENT
return|;
block|}
comment|/**    * @return the name of the operator    */
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getOperatorName
argument_list|()
return|;
block|}
specifier|static
specifier|public
name|String
name|getOperatorName
parameter_list|()
block|{
return|return
literal|"EVENT"
return|;
block|}
block|}
end_class

end_unit

