begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_comment
comment|/**  * Utility class for generic round UDF.  *  */
end_comment

begin_class
specifier|public
class|class
name|RoundUtils
block|{
specifier|private
name|RoundUtils
parameter_list|()
block|{   }
comment|/**    * Rounding a double is approximate, as the double value itself is approximate.    * A double literal, such as 3.15, may not be represented internally exactly as    * 3.15. thus, the rounding value of it can be off on the surface. For accurate    * rounding, consider using decimal type.    *    * @param input input value    * @param scale decimal place    * @return rounded value    */
specifier|public
specifier|static
name|double
name|round
parameter_list|(
name|double
name|input
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|input
argument_list|)
operator|||
name|Double
operator|.
name|isInfinite
argument_list|(
name|input
argument_list|)
condition|)
block|{
return|return
name|input
return|;
block|}
return|return
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|input
argument_list|)
operator|.
name|setScale
argument_list|(
name|scale
argument_list|,
name|RoundingMode
operator|.
name|HALF_UP
argument_list|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|double
name|bround
parameter_list|(
name|double
name|input
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|input
argument_list|)
operator|||
name|Double
operator|.
name|isInfinite
argument_list|(
name|input
argument_list|)
condition|)
block|{
return|return
name|input
return|;
block|}
return|return
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|input
argument_list|)
operator|.
name|setScale
argument_list|(
name|scale
argument_list|,
name|RoundingMode
operator|.
name|HALF_EVEN
argument_list|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|long
name|round
parameter_list|(
name|long
name|input
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
return|return
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|input
argument_list|)
operator|.
name|setScale
argument_list|(
name|scale
argument_list|,
name|RoundingMode
operator|.
name|HALF_UP
argument_list|)
operator|.
name|longValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|long
name|bround
parameter_list|(
name|long
name|input
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
return|return
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|input
argument_list|)
operator|.
name|setScale
argument_list|(
name|scale
argument_list|,
name|RoundingMode
operator|.
name|HALF_EVEN
argument_list|)
operator|.
name|longValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|HiveDecimal
name|round
parameter_list|(
name|HiveDecimal
name|input
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
return|return
name|input
operator|.
name|setScale
argument_list|(
name|scale
argument_list|,
name|HiveDecimal
operator|.
name|ROUND_HALF_UP
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|HiveDecimal
name|bround
parameter_list|(
name|HiveDecimal
name|input
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
return|return
name|input
operator|.
name|setScale
argument_list|(
name|scale
argument_list|,
name|HiveDecimal
operator|.
name|ROUND_HALF_EVEN
argument_list|)
return|;
block|}
block|}
end_class

end_unit

