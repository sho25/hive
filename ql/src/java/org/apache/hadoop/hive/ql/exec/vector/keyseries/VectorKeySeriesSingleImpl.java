begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|keyseries
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Implementation of when a one key series or a serialized key series is being presented.  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|VectorKeySeriesSingleImpl
extends|extends
name|VectorKeySeriesImpl
implements|implements
name|VectorKeySeries
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|VectorKeySeriesSingleImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|int
name|currentBatchSize
decl_stmt|;
comment|// The number of keys (with sequential duplicates collapsed, both NULL and non-NULL) in the batch.
specifier|protected
name|int
name|seriesCount
decl_stmt|;
comment|// The current position in the key series.
specifier|protected
name|int
name|seriesPosition
decl_stmt|;
comment|// The number of duplicates for each series key (NULL or non-NULL).
specifier|protected
specifier|final
name|int
index|[]
name|duplicateCounts
decl_stmt|;
comment|// Whether a series key is NULL.
specifier|protected
specifier|final
name|boolean
index|[]
name|seriesIsAllNull
decl_stmt|;
comment|// The number of non-NULL keys.  They have associated hash codes and key data.
specifier|protected
name|int
name|nonNullKeyCount
decl_stmt|;
comment|// The current non-NULL key position.
specifier|protected
name|int
name|nonNullKeyPosition
decl_stmt|;
comment|// The hash code for each non-NULL key.
specifier|protected
specifier|final
name|int
index|[]
name|hashCodes
decl_stmt|;
name|VectorKeySeriesSingleImpl
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|seriesCount
operator|=
literal|0
expr_stmt|;
name|seriesPosition
operator|=
literal|0
expr_stmt|;
name|duplicateCounts
operator|=
operator|new
name|int
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|seriesIsAllNull
operator|=
operator|new
name|boolean
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|nonNullKeyCount
operator|=
literal|0
expr_stmt|;
name|nonNullKeyPosition
operator|=
operator|-
literal|1
expr_stmt|;
name|hashCodes
operator|=
operator|new
name|int
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
block|}
specifier|public
name|boolean
name|validate
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|seriesCount
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|seriesCount
operator|<=
name|currentBatchSize
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|nonNullKeyCount
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|nonNullKeyCount
operator|<=
name|seriesCount
argument_list|)
expr_stmt|;
name|validateDuplicateCount
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|validateDuplicateCount
parameter_list|()
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|int
name|duplicateCount
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|seriesCount
condition|;
name|i
operator|++
control|)
block|{
name|duplicateCount
operator|=
name|duplicateCounts
index|[
name|i
index|]
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|duplicateCount
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|duplicateCount
operator|<=
name|currentBatchSize
argument_list|)
expr_stmt|;
name|sum
operator|+=
name|duplicateCount
expr_stmt|;
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|sum
operator|==
name|currentBatchSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|positionToFirst
parameter_list|()
block|{
name|seriesPosition
operator|=
literal|0
expr_stmt|;
name|currentLogical
operator|=
literal|0
expr_stmt|;
name|currentDuplicateCount
operator|=
name|duplicateCounts
index|[
literal|0
index|]
expr_stmt|;
name|currentIsAllNull
operator|=
name|seriesIsAllNull
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|currentIsAllNull
condition|)
block|{
name|nonNullKeyPosition
operator|=
literal|0
expr_stmt|;
name|currentHashCode
operator|=
name|hashCodes
index|[
literal|0
index|]
expr_stmt|;
name|setNextNonNullKey
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nonNullKeyPosition
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|currentDuplicateCount
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Consumes whole key.
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|()
block|{
name|currentLogical
operator|+=
name|currentDuplicateCount
expr_stmt|;
if|if
condition|(
name|currentLogical
operator|>=
name|currentBatchSize
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|seriesPosition
operator|+
literal|1
operator|<
name|seriesCount
argument_list|)
expr_stmt|;
name|seriesPosition
operator|++
expr_stmt|;
name|currentDuplicateCount
operator|=
name|duplicateCounts
index|[
name|seriesPosition
index|]
expr_stmt|;
name|currentIsAllNull
operator|=
name|seriesIsAllNull
index|[
name|seriesPosition
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|currentIsAllNull
condition|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|nonNullKeyPosition
operator|+
literal|1
operator|<
name|nonNullKeyCount
argument_list|)
expr_stmt|;
name|nonNullKeyPosition
operator|++
expr_stmt|;
name|currentHashCode
operator|=
name|hashCodes
index|[
name|nonNullKeyPosition
index|]
expr_stmt|;
name|setNextNonNullKey
argument_list|(
name|nonNullKeyPosition
argument_list|)
expr_stmt|;
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|currentDuplicateCount
operator|>
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// For use by VectorKeySeriesMulti so that the minimum equal key can be advanced.
specifier|public
name|void
name|advance
parameter_list|(
name|int
name|duplicateCount
parameter_list|)
block|{
name|currentLogical
operator|+=
name|currentDuplicateCount
expr_stmt|;
name|currentDuplicateCount
operator|-=
name|duplicateCount
expr_stmt|;
if|if
condition|(
name|currentDuplicateCount
operator|==
literal|0
condition|)
block|{
name|seriesPosition
operator|++
expr_stmt|;
name|currentIsAllNull
operator|=
name|seriesIsAllNull
index|[
name|seriesPosition
index|]
expr_stmt|;
name|currentDuplicateCount
operator|=
name|duplicateCounts
index|[
name|seriesPosition
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|currentIsAllNull
condition|)
block|{
name|nonNullKeyPosition
operator|++
expr_stmt|;
name|currentHashCode
operator|=
name|hashCodes
index|[
name|nonNullKeyPosition
index|]
expr_stmt|;
name|setNextNonNullKey
argument_list|(
name|nonNullKeyPosition
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
specifier|abstract
name|void
name|setNextNonNullKey
parameter_list|(
name|int
name|nonNullKeyPosition
parameter_list|)
function_decl|;
block|}
end_class

end_unit

