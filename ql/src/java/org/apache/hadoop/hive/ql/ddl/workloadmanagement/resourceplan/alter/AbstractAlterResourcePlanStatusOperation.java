begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|workloadmanagement
operator|.
name|resourceplan
operator|.
name|alter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMFullResourcePlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMResourcePlanStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|TezSessionPoolManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|WorkloadManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_comment
comment|/**  * Abstract ancestor of the enable / disable Resource Plan operations.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractAlterResourcePlanStatusOperation
parameter_list|<
name|T
extends|extends
name|DDLDesc
parameter_list|>
extends|extends
name|DDLOperation
argument_list|<
name|T
argument_list|>
block|{
specifier|public
name|AbstractAlterResourcePlanStatusOperation
parameter_list|(
name|DDLOperationContext
name|context
parameter_list|,
name|T
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|handleWMServiceChangeIfNeeded
parameter_list|(
name|WMFullResourcePlan
name|appliedResourcePlan
parameter_list|,
name|boolean
name|isActivate
parameter_list|,
name|boolean
name|isForceDeactivate
parameter_list|,
name|boolean
name|replace
parameter_list|)
throws|throws
name|HiveException
block|{
name|boolean
name|mustHaveAppliedChange
init|=
name|isActivate
operator|||
name|isForceDeactivate
decl_stmt|;
if|if
condition|(
operator|!
name|mustHaveAppliedChange
operator|&&
operator|!
name|replace
condition|)
block|{
return|return;
comment|// The modification cannot affect an active plan.
block|}
if|if
condition|(
name|appliedResourcePlan
operator|==
literal|null
operator|&&
operator|!
name|mustHaveAppliedChange
condition|)
block|{
return|return;
comment|// Replacing an inactive plan.
block|}
name|WorkloadManager
name|wm
init|=
name|WorkloadManager
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|boolean
name|isInTest
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|)
decl_stmt|;
if|if
condition|(
name|wm
operator|==
literal|null
operator|&&
name|isInTest
condition|)
block|{
return|return;
comment|// Skip for tests if WM is not present.
block|}
if|if
condition|(
operator|(
name|appliedResourcePlan
operator|==
literal|null
operator|)
operator|!=
name|isForceDeactivate
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Cannot get a resource plan to apply; or non-null plan on disable"
argument_list|)
throw|;
comment|// TODO: shut down HS2?
block|}
assert|assert
name|appliedResourcePlan
operator|==
literal|null
operator|||
name|appliedResourcePlan
operator|.
name|getPlan
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
name|WMResourcePlanStatus
operator|.
name|ACTIVE
assert|;
name|handleWMServiceChange
argument_list|(
name|wm
argument_list|,
name|isActivate
argument_list|,
name|appliedResourcePlan
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|handleWMServiceChange
parameter_list|(
name|WorkloadManager
name|wm
parameter_list|,
name|boolean
name|isActivate
parameter_list|,
name|WMFullResourcePlan
name|appliedResourcePlan
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
name|name
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isActivate
condition|)
block|{
name|name
operator|=
name|appliedResourcePlan
operator|.
name|getPlan
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Activating a new resource plan "
operator|+
name|name
operator|+
literal|": "
operator|+
name|appliedResourcePlan
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Disabling workload management"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wm
operator|!=
literal|null
condition|)
block|{
comment|// Note: as per our current constraints, the behavior of two parallel activates is
comment|//       undefined; although only one will succeed and the other will receive exception.
comment|//       We need proper (semi-)transactional modifications to support this without hacks.
name|ListenableFuture
argument_list|<
name|Boolean
argument_list|>
name|future
init|=
name|wm
operator|.
name|updateResourcePlanAsync
argument_list|(
name|appliedResourcePlan
argument_list|)
decl_stmt|;
name|boolean
name|isOk
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// Note: we may add an async option in future. For now, let the task fail for the user.
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|isOk
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|isActivate
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully activated resource plan "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully disabled workload management"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|isOk
condition|)
block|{
if|if
condition|(
name|isActivate
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to activate resource plan "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to disable workload management"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: shut down HS2?
block|}
block|}
block|}
name|TezSessionPoolManager
name|pm
init|=
name|TezSessionPoolManager
operator|.
name|getInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|pm
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|appliedTriggers
init|=
name|pm
operator|.
name|updateTriggers
argument_list|(
name|appliedResourcePlan
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updated tez session pool manager with active resource plan: {} appliedTriggers: {}"
argument_list|,
name|name
argument_list|,
name|appliedTriggers
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

