begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_comment
comment|/**  * Do conditional execution of the THEN/ vector expression and regular execution of the ELSE  * vector expression (a column or scalar) of a SQL IF statement.  */
end_comment

begin_class
specifier|public
class|class
name|IfExprCondExprColumn
extends|extends
name|IfExprCondExprBase
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
specifier|final
name|int
name|arg2Column
decl_stmt|;
specifier|protected
specifier|final
name|int
name|arg3Column
decl_stmt|;
specifier|public
name|IfExprCondExprColumn
parameter_list|(
name|int
name|arg1Column
parameter_list|,
name|int
name|arg2Column
parameter_list|,
name|int
name|arg3Column
parameter_list|,
name|int
name|outputColumnNum
parameter_list|)
block|{
name|super
argument_list|(
name|arg1Column
argument_list|,
name|outputColumnNum
argument_list|)
expr_stmt|;
name|this
operator|.
name|arg2Column
operator|=
name|arg2Column
expr_stmt|;
name|this
operator|.
name|arg3Column
operator|=
name|arg3Column
expr_stmt|;
block|}
specifier|public
name|IfExprCondExprColumn
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
comment|// Dummy final assignments.
name|arg2Column
operator|=
operator|-
literal|1
expr_stmt|;
name|arg3Column
operator|=
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|evaluate
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
name|int
name|n
init|=
name|batch
operator|.
name|size
decl_stmt|;
if|if
condition|(
name|n
operator|<=
literal|0
condition|)
block|{
comment|// Nothing to do
return|return;
block|}
comment|/*      * Do common analysis of the IF statement boolean expression.      *      * The following protected members can be examined afterwards:      *      *   boolean isIfStatementResultRepeated      *   boolean isIfStatementResultThen      *      *   int thenSelectedCount      *   int[] thenSelected      *   int elseSelectedCount      *   int[] elseSelected      */
name|super
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|ColumnVector
name|outputColVector
init|=
name|batch
operator|.
name|cols
index|[
name|outputColumnNum
index|]
decl_stmt|;
name|boolean
index|[]
name|outputIsNull
init|=
name|outputColVector
operator|.
name|isNull
decl_stmt|;
comment|// We do not need to do a column reset since we are carefully changing the output.
name|outputColVector
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
comment|// CONSIDER: Should be do this for all vector expressions that can
comment|//           work on BytesColumnVector output columns???
name|outputColVector
operator|.
name|init
argument_list|()
expr_stmt|;
name|ColumnVector
name|thenColVector
init|=
name|batch
operator|.
name|cols
index|[
name|arg2Column
index|]
decl_stmt|;
name|ColumnVector
name|elseColVector
init|=
name|batch
operator|.
name|cols
index|[
name|arg3Column
index|]
decl_stmt|;
specifier|final
name|int
name|thenCount
init|=
name|thenSelectedCount
decl_stmt|;
specifier|final
name|int
name|elseCount
init|=
name|elseSelectedCount
decl_stmt|;
if|if
condition|(
name|isIfStatementResultRepeated
condition|)
block|{
if|if
condition|(
name|isIfStatementResultThen
condition|)
block|{
comment|// Evaluate THEN expression (only) and copy all its results.
name|childExpressions
index|[
literal|1
index|]
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|thenColVector
operator|.
name|copySelected
argument_list|(
name|batch
operator|.
name|selectedInUse
argument_list|,
name|batch
operator|.
name|selected
argument_list|,
name|n
argument_list|,
name|outputColVector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Evaluate ELSE expression (only) and copy all its results.
name|childExpressions
index|[
literal|2
index|]
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|elseColVector
operator|.
name|copySelected
argument_list|(
name|batch
operator|.
name|selectedInUse
argument_list|,
name|batch
operator|.
name|selected
argument_list|,
name|n
argument_list|,
name|outputColVector
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|// NOTE: We cannot use copySelected below since it is a whole column operation.
name|conditionalEvaluate
argument_list|(
name|batch
argument_list|,
name|childExpressions
index|[
literal|1
index|]
argument_list|,
name|thenSelected
argument_list|,
name|thenCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|thenCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|batchIndex
init|=
name|thenSelected
index|[
name|i
index|]
decl_stmt|;
name|outputIsNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
name|outputColVector
operator|.
name|setElement
argument_list|(
name|batchIndex
argument_list|,
name|batchIndex
argument_list|,
name|thenColVector
argument_list|)
expr_stmt|;
block|}
comment|// The ELSE expression is either IdentityExpression (a column) or a ConstantVectorExpression
comment|// (a scalar) and trivial to evaluate.
name|childExpressions
index|[
literal|2
index|]
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elseCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|batchIndex
init|=
name|elseSelected
index|[
name|i
index|]
decl_stmt|;
name|outputIsNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
name|outputColVector
operator|.
name|setElement
argument_list|(
name|batchIndex
argument_list|,
name|batchIndex
argument_list|,
name|elseColVector
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|vectorExpressionParameters
parameter_list|()
block|{
return|return
name|getColumnParamString
argument_list|(
literal|0
argument_list|,
name|arg1Column
argument_list|)
operator|+
literal|", "
operator|+
name|getColumnParamString
argument_list|(
literal|1
argument_list|,
name|arg2Column
argument_list|)
operator|+
literal|", "
operator|+
name|getColumnParamString
argument_list|(
literal|2
argument_list|,
name|arg3Column
argument_list|)
return|;
block|}
block|}
end_class

end_unit

