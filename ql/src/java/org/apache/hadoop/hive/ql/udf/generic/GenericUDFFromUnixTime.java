begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|TimestampTZUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapredContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentLengthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|IntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LongObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * GenericUDFFromUnixTime.  *  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"from_unixtime"
argument_list|,
name|value
operator|=
literal|"_FUNC_(unix_time, format) - returns unix_time in the specified format"
argument_list|,
name|extended
operator|=
literal|"Example:\n"
operator|+
literal|"> SELECT _FUNC_(0, 'yyyy-MM-dd HH:mm:ss') FROM src LIMIT 1;\n"
operator|+
literal|"  '1970-01-01 00:00:00'"
argument_list|)
specifier|public
class|class
name|GenericUDFFromUnixTime
extends|extends
name|GenericUDF
block|{
specifier|private
specifier|transient
name|IntObjectInspector
name|inputIntOI
decl_stmt|;
specifier|private
specifier|transient
name|LongObjectInspector
name|inputLongOI
decl_stmt|;
specifier|private
specifier|transient
name|Converter
name|inputTextConverter
decl_stmt|;
specifier|private
specifier|transient
name|ZoneId
name|timeZone
decl_stmt|;
specifier|private
specifier|transient
specifier|final
name|Text
name|result
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
specifier|private
specifier|transient
name|SimpleDateFormat
name|formatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
decl_stmt|;
specifier|private
specifier|transient
name|String
name|lastFormat
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
if|if
condition|(
name|arguments
operator|.
name|length
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentLengthException
argument_list|(
literal|"The function "
operator|+
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|"requires at least one argument"
argument_list|)
throw|;
block|}
if|if
condition|(
name|arguments
operator|.
name|length
operator|>
literal|2
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentLengthException
argument_list|(
literal|"Too many arguments for the function "
operator|+
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
throw|;
block|}
for|for
control|(
name|ObjectInspector
name|argument
range|:
name|arguments
control|)
block|{
if|if
condition|(
name|argument
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|" only takes primitive types, got "
operator|+
name|argument
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|PrimitiveObjectInspector
name|arg0OI
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
literal|0
index|]
decl_stmt|;
switch|switch
condition|(
name|arg0OI
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|INT
case|:
name|inputIntOI
operator|=
operator|(
name|IntObjectInspector
operator|)
name|arguments
index|[
literal|0
index|]
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|inputLongOI
operator|=
operator|(
name|LongObjectInspector
operator|)
name|arguments
index|[
literal|0
index|]
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"The function "
operator|+
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|" takes only int/long types for first argument. Got Type:"
operator|+
name|arg0OI
operator|.
name|getPrimitiveCategory
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|arguments
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|PrimitiveObjectInspector
name|arg1OI
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
literal|1
index|]
decl_stmt|;
switch|switch
condition|(
name|arg1OI
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
case|case
name|STRING
case|:
name|inputTextConverter
operator|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|arg1OI
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"The function "
operator|+
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|" takes only string type for second argument. Got Type:"
operator|+
name|arg1OI
operator|.
name|getPrimitiveCategory
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|timeZone
operator|==
literal|null
condition|)
block|{
name|timeZone
operator|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
operator|.
name|getLocalTimeZone
argument_list|()
expr_stmt|;
name|formatter
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
name|timeZone
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|MapredContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|String
name|timeZoneStr
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|context
operator|.
name|getJobConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_LOCAL_TIME_ZONE
argument_list|)
decl_stmt|;
name|timeZone
operator|=
name|TimestampTZUtil
operator|.
name|parseTimeZone
argument_list|(
name|timeZoneStr
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
name|timeZone
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|inputTextConverter
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|arguments
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|format
init|=
operator|(
name|String
operator|)
name|inputTextConverter
operator|.
name|convert
argument_list|(
name|arguments
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|format
operator|.
name|equals
argument_list|(
name|lastFormat
argument_list|)
condition|)
block|{
name|formatter
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
name|timeZone
argument_list|)
argument_list|)
expr_stmt|;
name|lastFormat
operator|=
name|format
expr_stmt|;
block|}
block|}
comment|// convert seconds to milliseconds
name|long
name|unixtime
decl_stmt|;
if|if
condition|(
name|inputIntOI
operator|!=
literal|null
condition|)
block|{
name|unixtime
operator|=
name|inputIntOI
operator|.
name|get
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unixtime
operator|=
name|inputLongOI
operator|.
name|get
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Date
name|date
init|=
operator|new
name|Date
argument_list|(
name|unixtime
operator|*
literal|1000L
argument_list|)
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|formatter
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|protected
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"from_unixtime"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|32
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|children
argument_list|,
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

