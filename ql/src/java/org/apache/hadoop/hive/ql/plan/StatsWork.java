begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Explain
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_comment
comment|/**  * Stats Work, may include basic stats work and column stats desc  *  */
end_comment

begin_class
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Stats Work"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|,
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
class|class
name|StatsWork
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|// this is for basic stats
specifier|private
name|BasicStatsWork
name|basicStatsWork
decl_stmt|;
specifier|private
name|BasicStatsNoJobWork
name|basicStatsNoJobWork
decl_stmt|;
specifier|private
name|ColumnStatsDesc
name|colStats
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|LIMIT
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|String
name|currentDatabase
decl_stmt|;
specifier|private
name|boolean
name|statsReliable
decl_stmt|;
specifier|private
name|Table
name|table
decl_stmt|;
specifier|private
name|boolean
name|truncate
decl_stmt|;
specifier|private
name|boolean
name|footerScan
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|StatsWork
parameter_list|(
name|Table
name|table
parameter_list|,
name|BasicStatsWork
name|basicStatsWork
parameter_list|,
name|HiveConf
name|hconf
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|basicStatsWork
operator|=
name|basicStatsWork
expr_stmt|;
name|this
operator|.
name|currentDatabase
operator|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentDatabase
argument_list|()
expr_stmt|;
name|statsReliable
operator|=
name|hconf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_STATS_RELIABLE
argument_list|)
expr_stmt|;
name|basicStatsWork
operator|.
name|setStatsReliable
argument_list|(
name|statsReliable
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StatsWork
parameter_list|(
name|Table
name|table
parameter_list|,
name|HiveConf
name|hconf
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|currentDatabase
operator|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentDatabase
argument_list|()
expr_stmt|;
name|statsReliable
operator|=
name|hconf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_STATS_RELIABLE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"StatWork; fetch: %s"
argument_list|,
name|getfWork
argument_list|()
argument_list|)
return|;
block|}
name|FetchWork
name|getfWork
parameter_list|()
block|{
return|return
name|colStats
operator|==
literal|null
condition|?
literal|null
else|:
name|colStats
operator|.
name|getFWork
argument_list|()
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Column Stats Desc"
argument_list|)
specifier|public
name|ColumnStatsDesc
name|getColStats
parameter_list|()
block|{
return|return
name|colStats
return|;
block|}
specifier|public
name|void
name|setColStats
parameter_list|(
name|ColumnStatsDesc
name|colStats
parameter_list|)
block|{
name|this
operator|.
name|colStats
operator|=
name|colStats
expr_stmt|;
block|}
comment|// unused / unknown reason
annotation|@
name|Deprecated
specifier|public
specifier|static
name|int
name|getLimit
parameter_list|()
block|{
return|return
name|LIMIT
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Basic Stats Work"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|,
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|BasicStatsWork
name|getBasicStatsWork
parameter_list|()
block|{
return|return
name|basicStatsWork
return|;
block|}
comment|// only explain uses it
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Basic Stats NoJob Work"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|,
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|BasicStatsNoJobWork
name|getBasicStatsNoJobWork
parameter_list|()
block|{
return|return
name|basicStatsNoJobWork
return|;
block|}
specifier|public
name|void
name|setSourceTask
parameter_list|(
name|Task
argument_list|<
name|?
argument_list|>
name|sourceTask
parameter_list|)
block|{
name|basicStatsWork
operator|.
name|setSourceTask
argument_list|(
name|sourceTask
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getCurrentDatabaseName
parameter_list|()
block|{
return|return
name|currentDatabase
return|;
block|}
specifier|public
name|boolean
name|hasColStats
parameter_list|()
block|{
return|return
name|colStats
operator|!=
literal|null
return|;
block|}
specifier|public
name|Table
name|getTable
parameter_list|()
block|{
return|return
name|table
return|;
block|}
specifier|public
name|void
name|collectStatsFromAggregator
parameter_list|(
name|IStatsGatherDesc
name|conf
parameter_list|)
block|{
comment|// AggKey in StatsWork is used for stats aggregation while StatsAggPrefix
comment|// in FileSinkDesc is used for stats publishing. They should be consistent.
name|basicStatsWork
operator|.
name|setAggKey
argument_list|(
name|conf
operator|.
name|getStatsAggPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|basicStatsWork
operator|.
name|setStatsTmpDir
argument_list|(
name|conf
operator|.
name|getTmpStatsDir
argument_list|()
argument_list|)
expr_stmt|;
name|basicStatsWork
operator|.
name|setStatsReliable
argument_list|(
name|statsReliable
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|truncateExisting
parameter_list|(
name|boolean
name|truncate
parameter_list|)
block|{
name|this
operator|.
name|truncate
operator|=
name|truncate
expr_stmt|;
block|}
specifier|public
name|void
name|setFooterScan
parameter_list|()
block|{
name|basicStatsNoJobWork
operator|=
operator|new
name|BasicStatsNoJobWork
argument_list|(
name|table
operator|.
name|getTableSpec
argument_list|()
argument_list|)
expr_stmt|;
name|basicStatsNoJobWork
operator|.
name|setStatsReliable
argument_list|(
name|getStatsReliable
argument_list|()
argument_list|)
expr_stmt|;
name|footerScan
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|addInputPartitions
parameter_list|(
name|Set
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|)
block|{
name|this
operator|.
name|partitions
operator|.
name|addAll
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|Partition
argument_list|>
name|getPartitions
parameter_list|()
block|{
return|return
name|partitions
return|;
block|}
specifier|public
name|boolean
name|isFooterScan
parameter_list|()
block|{
return|return
name|footerScan
return|;
block|}
specifier|public
name|boolean
name|getStatsReliable
parameter_list|()
block|{
return|return
name|statsReliable
return|;
block|}
specifier|public
name|String
name|getFullTableName
parameter_list|()
block|{
return|return
name|table
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|table
operator|.
name|getTableName
argument_list|()
return|;
block|}
specifier|public
name|Task
name|getSourceTask
parameter_list|()
block|{
return|return
name|basicStatsWork
operator|==
literal|null
condition|?
literal|null
else|:
name|basicStatsWork
operator|.
name|getSourceTask
argument_list|()
return|;
block|}
specifier|public
name|String
name|getAggKey
parameter_list|()
block|{
return|return
name|basicStatsWork
operator|.
name|getAggKey
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isAggregating
parameter_list|()
block|{
return|return
name|basicStatsWork
operator|!=
literal|null
operator|&&
name|basicStatsWork
operator|.
name|getAggKey
argument_list|()
operator|!=
literal|null
return|;
block|}
block|}
end_class

end_unit

