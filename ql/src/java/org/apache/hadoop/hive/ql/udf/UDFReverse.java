begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * UDFReverse.  *  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"reverse"
argument_list|,
name|value
operator|=
literal|"_FUNC_(str) - reverse str"
argument_list|,
name|extended
operator|=
literal|"Example:\n"
operator|+
literal|"> SELECT _FUNC_('Facebook') FROM src LIMIT 1;\n"
operator|+
literal|"  'koobecaF'"
argument_list|)
specifier|public
class|class
name|UDFReverse
extends|extends
name|UDF
block|{
specifier|private
specifier|final
name|Text
name|result
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
comment|/**    * Reverse a portion of an array in-place.    *     * @param arr    *          The array where the data will be reversed.    * @param first    *          The beginning of the portion (inclusive).    * @param last    *          The end of the portion (inclusive).    */
specifier|private
name|void
name|reverse
parameter_list|(
name|byte
index|[]
name|arr
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|last
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|last
operator|-
name|first
operator|+
literal|1
operator|)
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|temp
init|=
name|arr
index|[
name|last
operator|-
name|i
index|]
decl_stmt|;
name|arr
index|[
name|last
operator|-
name|i
index|]
operator|=
name|arr
index|[
name|first
operator|+
name|i
index|]
expr_stmt|;
name|arr
index|[
name|first
operator|+
name|i
index|]
operator|=
name|temp
expr_stmt|;
block|}
block|}
specifier|public
name|Text
name|evaluate
parameter_list|(
name|Text
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// set() will only allocate memory if the buffer of result is smaller than
comment|// s.getLength() and will never resize the buffer down.
name|result
operator|.
name|set
argument_list|(
name|s
argument_list|)
expr_stmt|;
comment|// Now do an in-place reversal in result.getBytes(). First, reverse every
comment|// character, then reverse the whole string.
name|byte
index|[]
name|data
init|=
name|result
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|int
name|prev
init|=
literal|0
decl_stmt|;
comment|// The index where the current char starts
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|result
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|GenericUDFUtils
operator|.
name|isUtfStartByte
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|reverse
argument_list|(
name|data
argument_list|,
name|prev
argument_list|,
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
name|prev
operator|=
name|i
expr_stmt|;
block|}
block|}
name|reverse
argument_list|(
name|data
argument_list|,
name|prev
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|reverse
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

