begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|function
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ResourceUri
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|Entity
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_comment
comment|/**  * Abstract ancestor of function related ddl analyzer classes.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractFunctionAnalyzer
extends|extends
name|BaseSemanticAnalyzer
block|{
specifier|public
name|AbstractFunctionAnalyzer
parameter_list|(
name|QueryState
name|queryState
parameter_list|)
throws|throws
name|SemanticException
block|{
name|super
argument_list|(
name|queryState
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add write entities to the semantic analyzer to restrict function creation to privileged users.    */
specifier|protected
name|void
name|addEntities
parameter_list|(
name|String
name|functionName
parameter_list|,
name|String
name|className
parameter_list|,
name|boolean
name|isTemporary
parameter_list|,
name|List
argument_list|<
name|ResourceUri
argument_list|>
name|resources
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// If the function is being added under a database 'namespace', then add an entity representing
comment|// the database (only applicable to permanent/metastore functions).
comment|// We also add a second entity representing the function name.
comment|// The authorization api implementation can decide which entities it wants to use to
comment|// authorize the create/drop function call.
comment|// Add the relevant database 'namespace' as a WriteEntity
name|Database
name|database
init|=
literal|null
decl_stmt|;
comment|// temporary functions don't have any database 'namespace' associated with it
if|if
condition|(
operator|!
name|isTemporary
condition|)
block|{
try|try
block|{
name|String
index|[]
name|qualifiedNameParts
init|=
name|FunctionUtils
operator|.
name|getQualifiedFunctionNameParts
argument_list|(
name|functionName
argument_list|)
decl_stmt|;
name|String
name|databaseName
init|=
name|qualifiedNameParts
index|[
literal|0
index|]
decl_stmt|;
name|functionName
operator|=
name|qualifiedNameParts
index|[
literal|1
index|]
expr_stmt|;
name|database
operator|=
name|getDatabase
argument_list|(
name|databaseName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to get database "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|database
operator|!=
literal|null
condition|)
block|{
name|outputs
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|database
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Add the function name as a WriteEntity
name|outputs
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|database
argument_list|,
name|functionName
argument_list|,
name|className
argument_list|,
name|Type
operator|.
name|FUNCTION
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|resources
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ResourceUri
name|resource
range|:
name|resources
control|)
block|{
name|String
name|uriPath
init|=
name|resource
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|outputs
operator|.
name|add
argument_list|(
name|toWriteEntity
argument_list|(
name|uriPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

