begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|DDLTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveMaterializedViewsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DDLWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Updates the materialized view registry after changes.  */
end_comment

begin_class
specifier|public
class|class
name|MaterializedViewRegistryUpdateHook
implements|implements
name|QueryLifeTimeHook
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MaterializedViewRegistryUpdateHook
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|beforeCompile
parameter_list|(
name|QueryLifeTimeHookContext
name|ctx
parameter_list|)
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|afterCompile
parameter_list|(
name|QueryLifeTimeHookContext
name|ctx
parameter_list|,
name|boolean
name|hasError
parameter_list|)
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|beforeExecution
parameter_list|(
name|QueryLifeTimeHookContext
name|ctx
parameter_list|)
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|afterExecution
parameter_list|(
name|QueryLifeTimeHookContext
name|ctx
parameter_list|,
name|boolean
name|hasError
parameter_list|)
block|{
if|if
condition|(
name|hasError
condition|)
block|{
return|return;
block|}
name|HiveConf
name|hiveConf
init|=
name|ctx
operator|.
name|getHiveConf
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|TaskRunner
argument_list|>
name|completedTasks
init|=
name|ctx
operator|.
name|getHookContext
argument_list|()
operator|.
name|getCompleteTaskList
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskRunner
name|taskRunner
range|:
name|completedTasks
control|)
block|{
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
init|=
name|taskRunner
operator|.
name|getTask
argument_list|()
decl_stmt|;
if|if
condition|(
name|task
operator|instanceof
name|DDLTask
condition|)
block|{
name|DDLTask
name|ddlTask
init|=
operator|(
name|DDLTask
operator|)
name|task
decl_stmt|;
name|DDLWork
name|work
init|=
name|ddlTask
operator|.
name|getWork
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
literal|null
decl_stmt|;
name|boolean
name|isRewriteEnabled
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|work
operator|.
name|getCreateViewDesc
argument_list|()
operator|!=
literal|null
operator|&&
name|work
operator|.
name|getCreateViewDesc
argument_list|()
operator|.
name|isMaterialized
argument_list|()
condition|)
block|{
name|tableName
operator|=
name|work
operator|.
name|getCreateViewDesc
argument_list|()
operator|.
name|toTable
argument_list|(
name|hiveConf
argument_list|)
operator|.
name|getFullyQualifiedName
argument_list|()
expr_stmt|;
name|isRewriteEnabled
operator|=
name|work
operator|.
name|getCreateViewDesc
argument_list|()
operator|.
name|isRewriteEnabled
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|work
operator|.
name|getAlterMaterializedViewDesc
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tableName
operator|=
name|work
operator|.
name|getAlterMaterializedViewDesc
argument_list|()
operator|.
name|getMaterializedViewName
argument_list|()
expr_stmt|;
name|isRewriteEnabled
operator|=
name|work
operator|.
name|getAlterMaterializedViewDesc
argument_list|()
operator|.
name|isRewriteEnable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
if|if
condition|(
name|isRewriteEnabled
condition|)
block|{
name|Hive
name|db
init|=
name|Hive
operator|.
name|get
argument_list|()
decl_stmt|;
name|Table
name|mvTable
init|=
name|db
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HiveMaterializedViewsRegistry
operator|.
name|get
argument_list|()
operator|.
name|createMaterializedView
argument_list|(
name|db
operator|.
name|getConf
argument_list|()
argument_list|,
name|mvTable
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|work
operator|.
name|getAlterMaterializedViewDesc
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Disabling rewriting, removing from cache
name|String
index|[]
name|names
init|=
name|tableName
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|HiveMaterializedViewsRegistry
operator|.
name|get
argument_list|()
operator|.
name|dropMaterializedView
argument_list|(
name|names
index|[
literal|0
index|]
argument_list|,
name|names
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|ConfVars
operator|.
name|HIVE_MATERIALIZED_VIEW_ENABLE_AUTO_REWRITING
argument_list|)
condition|)
block|{
name|String
name|message
init|=
literal|"Error updating materialized view cache; consider disabling: "
operator|+
name|ConfVars
operator|.
name|HIVE_MATERIALIZED_VIEW_ENABLE_AUTO_REWRITING
operator|.
name|varname
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception during materialized view cache update"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

