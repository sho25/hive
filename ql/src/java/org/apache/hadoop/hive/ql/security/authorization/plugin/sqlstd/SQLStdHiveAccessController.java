begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|sqlstd
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeBag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeGrantInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Role
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAccessController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthorizationPluginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveMetastoreClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
operator|.
name|HivePrivilegeObjectType
import|;
end_import

begin_comment
comment|/**  * Implements functionality of access control statements for sql standard based authorization  */
end_comment

begin_class
annotation|@
name|Private
specifier|public
class|class
name|SQLStdHiveAccessController
implements|implements
name|HiveAccessController
block|{
specifier|private
name|HiveMetastoreClientFactory
name|metastoreClientFactory
decl_stmt|;
name|SQLStdHiveAccessController
parameter_list|(
name|HiveMetastoreClientFactory
name|metastoreClientFactory
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|String
name|hiveCurrentUser
parameter_list|)
block|{
name|this
operator|.
name|metastoreClientFactory
operator|=
name|metastoreClientFactory
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|grantPrivileges
parameter_list|(
name|List
argument_list|<
name|HivePrincipal
argument_list|>
name|hivePrincipals
parameter_list|,
name|List
argument_list|<
name|HivePrivilege
argument_list|>
name|hivePrivileges
parameter_list|,
name|HivePrivilegeObject
name|hivePrivObject
parameter_list|,
name|HivePrincipal
name|grantorPrincipal
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|HiveAuthorizationPluginException
block|{
name|PrivilegeBag
name|privBag
init|=
name|getThriftPrivilegesBag
argument_list|(
name|hivePrincipals
argument_list|,
name|hivePrivileges
argument_list|,
name|hivePrivObject
argument_list|,
name|grantorPrincipal
argument_list|,
name|grantOption
argument_list|)
decl_stmt|;
try|try
block|{
name|metastoreClientFactory
operator|.
name|getHiveMetastoreClient
argument_list|()
operator|.
name|grant_privileges
argument_list|(
name|privBag
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveAuthorizationPluginException
argument_list|(
literal|"Error granting privileges"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Create thrift privileges bag    * @param hivePrincipals    * @param hivePrivileges    * @param hivePrivObject    * @param grantorPrincipal    * @param grantOption    * @return    * @throws HiveAuthorizationPluginException    */
specifier|private
name|PrivilegeBag
name|getThriftPrivilegesBag
parameter_list|(
name|List
argument_list|<
name|HivePrincipal
argument_list|>
name|hivePrincipals
parameter_list|,
name|List
argument_list|<
name|HivePrivilege
argument_list|>
name|hivePrivileges
parameter_list|,
name|HivePrivilegeObject
name|hivePrivObject
parameter_list|,
name|HivePrincipal
name|grantorPrincipal
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|HiveAuthorizationPluginException
block|{
name|HiveObjectRef
name|privObj
init|=
name|getThriftHiveObjectRef
argument_list|(
name|hivePrivObject
argument_list|)
decl_stmt|;
name|PrivilegeBag
name|privBag
init|=
operator|new
name|PrivilegeBag
argument_list|()
decl_stmt|;
for|for
control|(
name|HivePrivilege
name|privilege
range|:
name|hivePrivileges
control|)
block|{
if|if
condition|(
name|privilege
operator|.
name|getColumns
argument_list|()
operator|!=
literal|null
operator|&&
name|privilege
operator|.
name|getColumns
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|HiveAuthorizationPluginException
argument_list|(
literal|"Privileges on columns not supported currently"
operator|+
literal|" in sql standard authorization mode"
argument_list|)
throw|;
block|}
name|PrivilegeGrantInfo
name|grantInfo
init|=
name|getThriftPrivilegeGrantInfo
argument_list|(
name|privilege
argument_list|,
name|grantorPrincipal
argument_list|,
name|grantOption
argument_list|)
decl_stmt|;
for|for
control|(
name|HivePrincipal
name|principal
range|:
name|hivePrincipals
control|)
block|{
name|HiveObjectPrivilege
name|objPriv
init|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|privObj
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|,
name|AuthorizationUtils
operator|.
name|getThriftPrincipalType
argument_list|(
name|principal
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|grantInfo
argument_list|)
decl_stmt|;
name|privBag
operator|.
name|addToPrivileges
argument_list|(
name|objPriv
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|privBag
return|;
block|}
specifier|private
name|PrivilegeGrantInfo
name|getThriftPrivilegeGrantInfo
parameter_list|(
name|HivePrivilege
name|privilege
parameter_list|,
name|HivePrincipal
name|grantorPrincipal
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|HiveAuthorizationPluginException
block|{
try|try
block|{
return|return
name|AuthorizationUtils
operator|.
name|getThriftPrivilegeGrantInfo
argument_list|(
name|privilege
argument_list|,
name|grantorPrincipal
argument_list|,
name|grantOption
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveAuthorizationPluginException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Create a thrift privilege object from the plugin interface privilege object    * @param privObj    * @return    * @throws HiveAuthorizationPluginException    */
specifier|private
name|HiveObjectRef
name|getThriftHiveObjectRef
parameter_list|(
name|HivePrivilegeObject
name|privObj
parameter_list|)
throws|throws
name|HiveAuthorizationPluginException
block|{
try|try
block|{
return|return
name|AuthorizationUtils
operator|.
name|getThriftHiveObjectRef
argument_list|(
name|privObj
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveAuthorizationPluginException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|revokePrivileges
parameter_list|(
name|List
argument_list|<
name|HivePrincipal
argument_list|>
name|hivePrincipals
parameter_list|,
name|List
argument_list|<
name|HivePrivilege
argument_list|>
name|hivePrivileges
parameter_list|,
name|HivePrivilegeObject
name|hivePrivObject
parameter_list|,
name|HivePrincipal
name|grantorPrincipal
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|HiveAuthorizationPluginException
block|{
name|PrivilegeBag
name|privBag
init|=
name|getThriftPrivilegesBag
argument_list|(
name|hivePrincipals
argument_list|,
name|hivePrivileges
argument_list|,
name|hivePrivObject
argument_list|,
name|grantorPrincipal
argument_list|,
name|grantOption
argument_list|)
decl_stmt|;
try|try
block|{
name|metastoreClientFactory
operator|.
name|getHiveMetastoreClient
argument_list|()
operator|.
name|revoke_privileges
argument_list|(
name|privBag
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveAuthorizationPluginException
argument_list|(
literal|"Error revoking privileges"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|createRole
parameter_list|(
name|String
name|roleName
parameter_list|,
name|HivePrincipal
name|adminGrantor
parameter_list|)
throws|throws
name|HiveAuthorizationPluginException
block|{
try|try
block|{
name|String
name|grantorName
init|=
name|adminGrantor
operator|==
literal|null
condition|?
literal|null
else|:
name|adminGrantor
operator|.
name|getName
argument_list|()
decl_stmt|;
name|metastoreClientFactory
operator|.
name|getHiveMetastoreClient
argument_list|()
operator|.
name|create_role
argument_list|(
operator|new
name|Role
argument_list|(
name|roleName
argument_list|,
literal|0
argument_list|,
name|grantorName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveAuthorizationPluginException
argument_list|(
literal|"Error create role"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropRole
parameter_list|(
name|String
name|roleName
parameter_list|)
throws|throws
name|HiveAuthorizationPluginException
block|{
try|try
block|{
name|metastoreClientFactory
operator|.
name|getHiveMetastoreClient
argument_list|()
operator|.
name|drop_role
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveAuthorizationPluginException
argument_list|(
literal|"Error dropping role"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRoles
parameter_list|(
name|HivePrincipal
name|hivePrincipal
parameter_list|)
throws|throws
name|HiveAuthorizationPluginException
block|{
try|try
block|{
name|List
argument_list|<
name|Role
argument_list|>
name|roles
init|=
name|metastoreClientFactory
operator|.
name|getHiveMetastoreClient
argument_list|()
operator|.
name|list_roles
argument_list|(
name|hivePrincipal
operator|.
name|getName
argument_list|()
argument_list|,
name|AuthorizationUtils
operator|.
name|getThriftPrincipalType
argument_list|(
name|hivePrincipal
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|roleNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|roles
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Role
name|role
range|:
name|roles
control|)
block|{
name|roleNames
operator|.
name|add
argument_list|(
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|roleNames
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveAuthorizationPluginException
argument_list|(
literal|"Error listing roles for user"
operator|+
name|hivePrincipal
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|grantRole
parameter_list|(
name|List
argument_list|<
name|HivePrincipal
argument_list|>
name|hivePrincipals
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|roleNames
parameter_list|,
name|boolean
name|grantOption
parameter_list|,
name|HivePrincipal
name|grantorPrinc
parameter_list|)
throws|throws
name|HiveAuthorizationPluginException
block|{
for|for
control|(
name|HivePrincipal
name|hivePrincipal
range|:
name|hivePrincipals
control|)
block|{
for|for
control|(
name|String
name|roleName
range|:
name|roleNames
control|)
block|{
try|try
block|{
name|IMetaStoreClient
name|mClient
init|=
name|metastoreClientFactory
operator|.
name|getHiveMetastoreClient
argument_list|()
decl_stmt|;
name|mClient
operator|.
name|grant_role
argument_list|(
name|roleName
argument_list|,
name|hivePrincipal
operator|.
name|getName
argument_list|()
argument_list|,
name|AuthorizationUtils
operator|.
name|getThriftPrincipalType
argument_list|(
name|hivePrincipal
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|grantorPrinc
operator|.
name|getName
argument_list|()
argument_list|,
name|AuthorizationUtils
operator|.
name|getThriftPrincipalType
argument_list|(
name|grantorPrinc
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|grantOption
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error granting roles for "
operator|+
name|hivePrincipal
operator|.
name|getName
argument_list|()
operator|+
literal|" to role "
operator|+
name|roleName
operator|+
name|hivePrincipal
operator|.
name|getName
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|HiveAuthorizationPluginException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|revokeRole
parameter_list|(
name|List
argument_list|<
name|HivePrincipal
argument_list|>
name|hivePrincipals
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|roleNames
parameter_list|,
name|boolean
name|grantOption
parameter_list|,
name|HivePrincipal
name|grantorPrinc
parameter_list|)
throws|throws
name|HiveAuthorizationPluginException
block|{
if|if
condition|(
name|grantOption
condition|)
block|{
comment|//removing grant privileges only is not supported in metastore api
throw|throw
operator|new
name|HiveAuthorizationPluginException
argument_list|(
literal|"Revoking only the admin privileges on "
operator|+
literal|"role is not currently supported"
argument_list|)
throw|;
block|}
for|for
control|(
name|HivePrincipal
name|hivePrincipal
range|:
name|hivePrincipals
control|)
block|{
for|for
control|(
name|String
name|roleName
range|:
name|roleNames
control|)
block|{
try|try
block|{
name|IMetaStoreClient
name|mClient
init|=
name|metastoreClientFactory
operator|.
name|getHiveMetastoreClient
argument_list|()
decl_stmt|;
name|mClient
operator|.
name|revoke_role
argument_list|(
name|roleName
argument_list|,
name|hivePrincipal
operator|.
name|getName
argument_list|()
argument_list|,
name|AuthorizationUtils
operator|.
name|getThriftPrincipalType
argument_list|(
name|hivePrincipal
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error revoking roles for "
operator|+
name|hivePrincipal
operator|.
name|getName
argument_list|()
operator|+
literal|" to role "
operator|+
name|roleName
operator|+
name|hivePrincipal
operator|.
name|getName
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|HiveAuthorizationPluginException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllRoles
parameter_list|()
throws|throws
name|HiveAuthorizationPluginException
block|{
try|try
block|{
return|return
name|metastoreClientFactory
operator|.
name|getHiveMetastoreClient
argument_list|()
operator|.
name|listRoleNames
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveAuthorizationPluginException
argument_list|(
literal|"Error listing all roles"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HivePrivilegeInfo
argument_list|>
name|showPrivileges
parameter_list|(
name|HivePrincipal
name|principal
parameter_list|,
name|HivePrivilegeObject
name|privObj
parameter_list|)
throws|throws
name|HiveAuthorizationPluginException
block|{
try|try
block|{
name|List
argument_list|<
name|HivePrivilegeInfo
argument_list|>
name|resPrivInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|HivePrivilegeInfo
argument_list|>
argument_list|()
decl_stmt|;
name|IMetaStoreClient
name|mClient
init|=
name|metastoreClientFactory
operator|.
name|getHiveMetastoreClient
argument_list|()
decl_stmt|;
comment|//get metastore/thrift privilege object using metastore api
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|msObjPrivs
init|=
name|mClient
operator|.
name|list_privileges
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|,
name|AuthorizationUtils
operator|.
name|getThriftPrincipalType
argument_list|(
name|principal
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|getThriftHiveObjectRef
argument_list|(
name|privObj
argument_list|)
argument_list|)
decl_stmt|;
comment|//convert the metastore thrift objects to result objects
for|for
control|(
name|HiveObjectPrivilege
name|msObjPriv
range|:
name|msObjPrivs
control|)
block|{
comment|//result principal
name|HivePrincipal
name|resPrincipal
init|=
operator|new
name|HivePrincipal
argument_list|(
name|msObjPriv
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|AuthorizationUtils
operator|.
name|getHivePrincipalType
argument_list|(
name|msObjPriv
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|//result privilege
name|PrivilegeGrantInfo
name|msGrantInfo
init|=
name|msObjPriv
operator|.
name|getGrantInfo
argument_list|()
decl_stmt|;
name|HivePrivilege
name|resPrivilege
init|=
operator|new
name|HivePrivilege
argument_list|(
name|msGrantInfo
operator|.
name|getPrivilege
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//result object
name|HiveObjectRef
name|msObjRef
init|=
name|msObjPriv
operator|.
name|getHiveObject
argument_list|()
decl_stmt|;
name|HivePrivilegeObject
name|resPrivObj
init|=
operator|new
name|HivePrivilegeObject
argument_list|(
name|getPluginObjType
argument_list|(
name|msObjRef
operator|.
name|getObjectType
argument_list|()
argument_list|)
argument_list|,
name|msObjRef
operator|.
name|getDbName
argument_list|()
argument_list|,
name|msObjRef
operator|.
name|getObjectName
argument_list|()
argument_list|)
decl_stmt|;
comment|//result grantor principal
name|HivePrincipal
name|grantorPrincipal
init|=
operator|new
name|HivePrincipal
argument_list|(
name|msGrantInfo
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|AuthorizationUtils
operator|.
name|getHivePrincipalType
argument_list|(
name|msGrantInfo
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|HivePrivilegeInfo
name|resPrivInfo
init|=
operator|new
name|HivePrivilegeInfo
argument_list|(
name|resPrincipal
argument_list|,
name|resPrivilege
argument_list|,
name|resPrivObj
argument_list|,
name|grantorPrincipal
argument_list|,
name|msGrantInfo
operator|.
name|isGrantOption
argument_list|()
argument_list|)
decl_stmt|;
name|resPrivInfos
operator|.
name|add
argument_list|(
name|resPrivInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|resPrivInfos
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveAuthorizationPluginException
argument_list|(
literal|"Error showing privileges"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|HivePrivilegeObjectType
name|getPluginObjType
parameter_list|(
name|HiveObjectType
name|objectType
parameter_list|)
throws|throws
name|HiveAuthorizationPluginException
block|{
switch|switch
condition|(
name|objectType
condition|)
block|{
case|case
name|DATABASE
case|:
return|return
name|HivePrivilegeObjectType
operator|.
name|DATABASE
return|;
case|case
name|TABLE
case|:
return|return
name|HivePrivilegeObjectType
operator|.
name|TABLE
return|;
case|case
name|COLUMN
case|:
case|case
name|GLOBAL
case|:
case|case
name|PARTITION
case|:
throw|throw
operator|new
name|HiveAuthorizationPluginException
argument_list|(
literal|"Unsupported object type "
operator|+
name|objectType
argument_list|)
throw|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unexpected object type "
operator|+
name|objectType
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

