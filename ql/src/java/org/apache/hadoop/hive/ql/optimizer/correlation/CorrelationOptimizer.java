begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|correlation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|PTFOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UnionOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultGraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|RuleRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|MapJoinProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|Transform
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|physical
operator|.
name|CommonJoinTaskDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDescUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinCondDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_comment
comment|/**  * Implementation of  Correlation Optimizer. This optimizer is based on  * the paper "YSmart: Yet Another SQL-to-MapReduce Translator"  * (Rubao Lee, Tian Luo, Yin Huai, Fusheng Wang, Yongqiang He, and Xiaodong Zhang)  * (http://www.cse.ohio-state.edu/hpcs/WWW/HTML/publications/papers/TR-11-7.pdf).  * Correlation Optimizer detects if ReduceSinkOperators share same keys.  * Then, it will transform the query plan tree (operator tree) by exploiting  * detected correlations. For details, see the original paper of YSmart.  *  * Test queries associated with this optimizer are correlationoptimizer1.q to  * correlationoptimizer14.q  */
end_comment

begin_class
specifier|public
class|class
name|CorrelationOptimizer
extends|extends
name|Transform
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CorrelationOptimizer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|abort
decl_stmt|;
comment|// if correlation optimizer will not try to optimize this query
specifier|private
name|ParseContext
name|pCtx
decl_stmt|;
comment|//Join operators which may be converted by CommonJoinResolver;
specifier|private
specifier|final
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|skipedJoinOperators
decl_stmt|;
specifier|public
name|CorrelationOptimizer
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|pCtx
operator|=
literal|null
expr_stmt|;
name|skipedJoinOperators
operator|=
operator|new
name|HashSet
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|abort
operator|=
literal|false
expr_stmt|;
block|}
specifier|private
name|void
name|findPossibleAutoConvertedJoinOperators
parameter_list|()
throws|throws
name|SemanticException
block|{
comment|// Guess if CommonJoinResolver will work. If CommonJoinResolver may
comment|// convert a join operation, correlation optimizer will not merge that join.
comment|// TODO: If hive.auto.convert.join.noconditionaltask=true, for a JoinOperator
comment|// that has both intermediate tables and query input tables as input tables,
comment|// we should be able to guess if this JoinOperator will be converted to a MapJoin
comment|// based on hive.auto.convert.join.noconditionaltask.size.
for|for
control|(
name|JoinOperator
name|joinOp
range|:
name|pCtx
operator|.
name|getJoinOps
argument_list|()
control|)
block|{
name|boolean
name|isAbleToGuess
init|=
literal|true
decl_stmt|;
name|boolean
name|mayConvert
init|=
literal|false
decl_stmt|;
comment|// Get total size and individual alias's size
name|long
name|aliasTotalKnownInputSize
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|aliasToSize
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|posToAliases
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|joinOp
operator|.
name|getNumParent
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
init|=
name|joinOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|TableScanOperator
argument_list|>
name|topOps
init|=
name|CorrelationUtilities
operator|.
name|findTableScanOperators
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|topOps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|isAbleToGuess
operator|=
literal|false
expr_stmt|;
break|break;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|aliases
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TableScanOperator
name|tsop
range|:
name|topOps
control|)
block|{
name|Table
name|table
init|=
name|tsop
operator|.
name|getConf
argument_list|()
operator|.
name|getTableMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
comment|// table should not be null.
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"The table of "
operator|+
name|tsop
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|tsop
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|" is null, which is not expected."
argument_list|)
throw|;
block|}
name|String
name|alias
init|=
name|tsop
operator|.
name|getConf
argument_list|()
operator|.
name|getAlias
argument_list|()
decl_stmt|;
name|aliases
operator|.
name|add
argument_list|(
name|alias
argument_list|)
expr_stmt|;
name|Path
name|p
init|=
name|table
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|ContentSummary
name|resultCs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|table
operator|.
name|getPath
argument_list|()
operator|.
name|getFileSystem
argument_list|(
name|pCtx
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|resultCs
operator|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Encounter a error while querying content summary of table "
operator|+
name|table
operator|.
name|getCompleteName
argument_list|()
operator|+
literal|" from FileSystem. "
operator|+
literal|"Cannot guess if CommonJoinOperator will optimize "
operator|+
name|joinOp
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|joinOp
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resultCs
operator|==
literal|null
condition|)
block|{
name|isAbleToGuess
operator|=
literal|false
expr_stmt|;
break|break;
block|}
name|long
name|size
init|=
name|resultCs
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|aliasTotalKnownInputSize
operator|+=
name|size
expr_stmt|;
name|Long
name|es
init|=
name|aliasToSize
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|es
operator|==
literal|null
condition|)
block|{
name|es
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|es
operator|+=
name|size
expr_stmt|;
name|aliasToSize
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|es
argument_list|)
expr_stmt|;
block|}
name|posToAliases
operator|.
name|put
argument_list|(
name|pos
argument_list|,
name|aliases
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isAbleToGuess
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cannot guess if CommonJoinOperator will optimize "
operator|+
name|joinOp
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|joinOp
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|JoinDesc
name|joinDesc
init|=
name|joinOp
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|Byte
index|[]
name|order
init|=
name|joinDesc
operator|.
name|getTagOrder
argument_list|()
decl_stmt|;
name|int
name|numAliases
init|=
name|order
operator|.
name|length
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|bigTableCandidates
init|=
name|MapJoinProcessor
operator|.
name|getBigTableCandidates
argument_list|(
name|joinDesc
operator|.
name|getConds
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|bigTableCandidates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|long
name|ThresholdOfSmallTblSizeSum
init|=
name|HiveConf
operator|.
name|getLongVar
argument_list|(
name|pCtx
operator|.
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESMALLTABLESFILESIZE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAliases
condition|;
name|i
operator|++
control|)
block|{
comment|// this table cannot be big table
if|if
condition|(
operator|!
name|bigTableCandidates
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|aliases
init|=
name|posToAliases
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|aliasKnownSize
init|=
name|Utilities
operator|.
name|sumOf
argument_list|(
name|aliasToSize
argument_list|,
name|aliases
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|CommonJoinTaskDispatcher
operator|.
name|cannotConvert
argument_list|(
name|aliasKnownSize
argument_list|,
name|aliasTotalKnownInputSize
argument_list|,
name|ThresholdOfSmallTblSizeSum
argument_list|)
condition|)
block|{
name|mayConvert
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mayConvert
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|joinOp
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|joinOp
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|" may be converted to MapJoin by CommonJoinResolver"
argument_list|)
expr_stmt|;
name|skipedJoinOperators
operator|.
name|add
argument_list|(
name|joinOp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Detect correlations and transform the query tree.    *    * @param pctx    *          current parse context    * @throws SemanticException    */
annotation|@
name|Override
specifier|public
name|ParseContext
name|transform
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|pCtx
operator|=
name|pctx
expr_stmt|;
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|pCtx
operator|.
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVECONVERTJOIN
argument_list|)
condition|)
block|{
name|findPossibleAutoConvertedJoinOperators
argument_list|()
expr_stmt|;
block|}
comment|// detect correlations
name|CorrelationNodeProcCtx
name|corrCtx
init|=
operator|new
name|CorrelationNodeProcCtx
argument_list|(
name|pCtx
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R1"
argument_list|,
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
operator|new
name|CorrelationNodeProc
argument_list|()
argument_list|)
expr_stmt|;
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|getDefaultProc
argument_list|()
argument_list|,
name|opRules
argument_list|,
name|corrCtx
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
comment|// Create a list of topOp nodes
name|List
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|addAll
argument_list|(
name|pCtx
operator|.
name|getTopOps
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// We have finished tree walking (correlation detection).
comment|// We will first see if we need to abort (the operator tree has not been changed).
comment|// If not, we will start to transform the operator tree.
name|abort
operator|=
name|corrCtx
operator|.
name|isAbort
argument_list|()
expr_stmt|;
if|if
condition|(
name|abort
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Abort. Reasons are ..."
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|reason
range|:
name|corrCtx
operator|.
name|getAbortReasons
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"-- "
operator|+
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// transform the operator tree
name|LOG
operator|.
name|info
argument_list|(
literal|"Begain query plan transformation based on intra-query correlations. "
operator|+
name|corrCtx
operator|.
name|getCorrelations
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" correlation(s) to be applied"
argument_list|)
expr_stmt|;
for|for
control|(
name|IntraQueryCorrelation
name|correlation
range|:
name|corrCtx
operator|.
name|getCorrelations
argument_list|()
control|)
block|{
name|QueryPlanTreeTransformation
operator|.
name|applyCorrelation
argument_list|(
name|pCtx
argument_list|,
name|corrCtx
argument_list|,
name|correlation
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|pCtx
return|;
block|}
specifier|private
class|class
name|CorrelationNodeProc
implements|implements
name|NodeProcessor
block|{
specifier|private
name|void
name|analyzeReduceSinkOperatorsOfJoinOperator
parameter_list|(
name|JoinCondDesc
index|[]
name|joinConds
parameter_list|,
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|rsOps
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|curentRsOp
parameter_list|,
name|Set
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|correlatedRsOps
parameter_list|)
block|{
if|if
condition|(
name|correlatedRsOps
operator|.
name|contains
argument_list|(
name|curentRsOp
argument_list|)
condition|)
block|{
return|return;
block|}
name|correlatedRsOps
operator|.
name|add
argument_list|(
operator|(
name|ReduceSinkOperator
operator|)
name|curentRsOp
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|rsOps
operator|.
name|indexOf
argument_list|(
name|curentRsOp
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|joinConds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|JoinCondDesc
name|joinCond
init|=
name|joinConds
index|[
name|i
index|]
decl_stmt|;
name|int
name|type
init|=
name|joinCond
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|pos
operator|==
name|joinCond
operator|.
name|getLeft
argument_list|()
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|JoinDesc
operator|.
name|INNER_JOIN
operator|||
name|type
operator|==
name|JoinDesc
operator|.
name|LEFT_OUTER_JOIN
operator|||
name|type
operator|==
name|JoinDesc
operator|.
name|LEFT_SEMI_JOIN
condition|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|newCurrentRsOps
init|=
name|rsOps
operator|.
name|get
argument_list|(
name|joinCond
operator|.
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
name|analyzeReduceSinkOperatorsOfJoinOperator
argument_list|(
name|joinConds
argument_list|,
name|rsOps
argument_list|,
name|newCurrentRsOps
argument_list|,
name|correlatedRsOps
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|pos
operator|==
name|joinCond
operator|.
name|getRight
argument_list|()
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|JoinDesc
operator|.
name|INNER_JOIN
operator|||
name|type
operator|==
name|JoinDesc
operator|.
name|RIGHT_OUTER_JOIN
condition|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|newCurrentRsOps
init|=
name|rsOps
operator|.
name|get
argument_list|(
name|joinCond
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
name|analyzeReduceSinkOperatorsOfJoinOperator
argument_list|(
name|joinConds
argument_list|,
name|rsOps
argument_list|,
name|newCurrentRsOps
argument_list|,
name|correlatedRsOps
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|sameKeys
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|k1
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|k2
parameter_list|)
block|{
if|if
condition|(
name|k1
operator|.
name|size
argument_list|()
operator|!=
name|k2
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|k1
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ExprNodeDesc
name|expr1
init|=
name|k1
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|expr2
init|=
name|k2
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|expr1
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|expr2
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|expr1
operator|.
name|isSame
argument_list|(
name|expr2
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|sameOrder
parameter_list|(
name|String
name|order1
parameter_list|,
name|String
name|order2
parameter_list|)
block|{
if|if
condition|(
name|order1
operator|==
literal|null
operator|||
name|order1
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
if|if
condition|(
name|order2
operator|==
literal|null
operator|||
name|order2
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
if|if
condition|(
name|order2
operator|==
literal|null
operator|||
name|order2
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|order1
operator|=
name|order1
operator|.
name|trim
argument_list|()
expr_stmt|;
name|order2
operator|=
name|order2
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|order1
operator|.
name|equals
argument_list|(
name|order2
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * This method is used to recursively traverse the tree to find      * ReduceSinkOperators which share the same key columns and partitioning      * columns. Those ReduceSinkOperators are called correlated ReduceSinkOperaotrs.      *      * @param child The child of the current operator      * @param childKeyCols The key columns from the child operator      * @param childPartitionCols The partitioning columns from the child operator      * @param childRSOrder The sorting order of key columns from the child operator      * @param current The current operator we are visiting      * @param correlation The object keeps tracking the correlation      * @return      * @throws SemanticException      */
specifier|private
name|LinkedHashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|findCorrelatedReduceSinkOperators
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childKeyCols
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childPartitionCols
parameter_list|,
name|String
name|childRSOrder
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|current
parameter_list|,
name|IntraQueryCorrelation
name|correlation
parameter_list|)
throws|throws
name|SemanticException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"now detecting operator "
operator|+
name|current
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|" "
operator|+
name|current
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LinkedHashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|correlatedReduceSinkOperators
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|skipedJoinOperators
operator|.
name|contains
argument_list|(
name|current
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|current
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|current
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|" may be converted to MapJoin by "
operator|+
literal|"CommonJoinResolver. Correlation optimizer will not detect correlations"
operator|+
literal|"involved in this operator"
argument_list|)
expr_stmt|;
return|return
name|correlatedReduceSinkOperators
return|;
block|}
if|if
condition|(
operator|(
name|current
operator|.
name|getParentOperators
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|current
operator|.
name|getParentOperators
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return
name|correlatedReduceSinkOperators
return|;
block|}
if|if
condition|(
name|current
operator|instanceof
name|PTFOperator
condition|)
block|{
comment|// Currently, we do not support PTF operator.
name|LOG
operator|.
name|info
argument_list|(
literal|"Currently, correlation optimizer does not support PTF operator."
argument_list|)
expr_stmt|;
return|return
name|correlatedReduceSinkOperators
return|;
block|}
if|if
condition|(
name|current
operator|instanceof
name|UnionOperator
condition|)
block|{
comment|// If we get a UnionOperator, right now, we only handle it when
comment|// we can find correlated ReduceSinkOperators from all inputs.
name|LinkedHashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|corrRSs
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
range|:
name|current
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
name|LinkedHashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|tmp
init|=
name|findCorrelatedReduceSinkOperators
argument_list|(
name|current
argument_list|,
name|childKeyCols
argument_list|,
name|childPartitionCols
argument_list|,
name|childRSOrder
argument_list|,
name|parent
argument_list|,
name|correlation
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmp
operator|!=
literal|null
operator|&&
name|tmp
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|corrRSs
operator|.
name|addAll
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|correlatedReduceSinkOperators
return|;
block|}
block|}
name|correlatedReduceSinkOperators
operator|.
name|addAll
argument_list|(
name|corrRSs
argument_list|)
expr_stmt|;
name|UnionOperator
name|union
init|=
operator|(
name|UnionOperator
operator|)
name|current
decl_stmt|;
name|union
operator|.
name|getConf
argument_list|()
operator|.
name|setAllInputsInSameReducer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|current
operator|.
name|getColumnExprMap
argument_list|()
operator|==
literal|null
operator|&&
operator|!
operator|(
name|current
operator|instanceof
name|ReduceSinkOperator
operator|)
condition|)
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
range|:
name|current
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
name|correlatedReduceSinkOperators
operator|.
name|addAll
argument_list|(
name|findCorrelatedReduceSinkOperators
argument_list|(
name|current
argument_list|,
name|childKeyCols
argument_list|,
name|childPartitionCols
argument_list|,
name|childRSOrder
argument_list|,
name|parent
argument_list|,
name|correlation
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|current
operator|.
name|getColumnExprMap
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|current
operator|instanceof
name|ReduceSinkOperator
operator|)
condition|)
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|backtrackedKeyCols
init|=
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|childKeyCols
argument_list|,
name|child
argument_list|,
name|current
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|backtrackedPartitionCols
init|=
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|childPartitionCols
argument_list|,
name|child
argument_list|,
name|current
argument_list|)
decl_stmt|;
name|RowSchema
name|rowSchema
init|=
name|current
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|tableNeedToCheck
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|expr
range|:
name|childKeyCols
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|expr
operator|instanceof
name|ExprNodeColumnDesc
operator|)
condition|)
block|{
return|return
name|correlatedReduceSinkOperators
return|;
block|}
name|String
name|colName
init|=
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|expr
operator|)
operator|.
name|getColumn
argument_list|()
decl_stmt|;
name|ColumnInfo
name|columnInfo
init|=
name|rowSchema
operator|.
name|getColumnInfo
argument_list|(
name|colName
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnInfo
operator|!=
literal|null
condition|)
block|{
name|tableNeedToCheck
operator|.
name|add
argument_list|(
name|columnInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|current
operator|instanceof
name|JoinOperator
condition|)
block|{
name|boolean
name|isCorrelated
init|=
literal|true
decl_stmt|;
name|int
name|expectedNumCorrelatedRsops
init|=
name|current
operator|.
name|getParentOperators
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|LinkedHashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|correlatedRsops
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
range|:
name|current
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
name|parent
operator|.
name|getSchema
argument_list|()
operator|.
name|getTableNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|tbl
range|:
name|tableNames
control|)
block|{
if|if
condition|(
name|tableNeedToCheck
operator|.
name|contains
argument_list|(
name|tbl
argument_list|)
condition|)
block|{
name|correlatedRsops
operator|=
name|findCorrelatedReduceSinkOperators
argument_list|(
name|current
argument_list|,
name|backtrackedKeyCols
argument_list|,
name|backtrackedPartitionCols
argument_list|,
name|childRSOrder
argument_list|,
name|parent
argument_list|,
name|correlation
argument_list|)
expr_stmt|;
if|if
condition|(
name|correlatedRsops
operator|.
name|size
argument_list|()
operator|!=
name|expectedNumCorrelatedRsops
condition|)
block|{
name|isCorrelated
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|isCorrelated
condition|)
block|{
break|break;
block|}
block|}
comment|// If current is JoinOperaotr, we will stop to traverse the tree
comment|// when any of parent ReduceSinkOperaotr of this JoinOperator is
comment|// not considered as a correlated ReduceSinkOperator.
if|if
condition|(
name|isCorrelated
operator|&&
name|correlatedRsops
operator|!=
literal|null
condition|)
block|{
name|correlatedReduceSinkOperators
operator|.
name|addAll
argument_list|(
name|correlatedRsops
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|correlatedReduceSinkOperators
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
range|:
name|current
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
name|correlatedReduceSinkOperators
operator|.
name|addAll
argument_list|(
name|findCorrelatedReduceSinkOperators
argument_list|(
name|current
argument_list|,
name|backtrackedKeyCols
argument_list|,
name|backtrackedPartitionCols
argument_list|,
name|childRSOrder
argument_list|,
name|parent
argument_list|,
name|correlation
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|current
operator|.
name|getColumnExprMap
argument_list|()
operator|!=
literal|null
operator|&&
name|current
operator|instanceof
name|ReduceSinkOperator
condition|)
block|{
name|ReduceSinkOperator
name|rsop
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|current
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|backtrackedKeyCols
init|=
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|childKeyCols
argument_list|,
name|child
argument_list|,
name|current
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|backtrackedPartitionCols
init|=
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|childPartitionCols
argument_list|,
name|child
argument_list|,
name|current
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|rsKeyCols
init|=
name|rsop
operator|.
name|getConf
argument_list|()
operator|.
name|getKeyCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|rsPartitionCols
init|=
name|rsop
operator|.
name|getConf
argument_list|()
operator|.
name|getPartitionCols
argument_list|()
decl_stmt|;
comment|// Two ReduceSinkOperators are correlated means that
comment|// they have same sorting columns (key columns), same partitioning columns,
comment|// same sorting orders, and no conflict on the numbers of reducers.
comment|// TODO: we should relax this condition
comment|// TODO: we need to handle aggregation functions with distinct keyword. In this case,
comment|// distinct columns will be added to the key columns.
name|boolean
name|isCorrelated
init|=
name|sameKeys
argument_list|(
name|rsKeyCols
argument_list|,
name|backtrackedKeyCols
argument_list|)
operator|&&
name|sameOrder
argument_list|(
name|rsop
operator|.
name|getConf
argument_list|()
operator|.
name|getOrder
argument_list|()
argument_list|,
name|childRSOrder
argument_list|)
operator|&&
name|sameKeys
argument_list|(
name|backtrackedPartitionCols
argument_list|,
name|rsPartitionCols
argument_list|)
operator|&&
name|correlation
operator|.
name|adjustNumReducers
argument_list|(
name|rsop
operator|.
name|getConf
argument_list|()
operator|.
name|getNumReducers
argument_list|()
argument_list|)
decl_stmt|;
name|GroupByOperator
name|cGBY
init|=
name|CorrelationUtilities
operator|.
name|getSingleChild
argument_list|(
name|rsop
argument_list|,
name|GroupByOperator
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|cGBY
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|CorrelationUtilities
operator|.
name|hasGroupingSet
argument_list|(
name|rsop
argument_list|)
operator|||
name|cGBY
operator|.
name|getConf
argument_list|()
operator|.
name|isGroupingSetsPresent
argument_list|()
condition|)
block|{
comment|// Do not support grouping set right now
name|isCorrelated
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isCorrelated
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Operator "
operator|+
name|current
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|" "
operator|+
name|current
operator|.
name|getName
argument_list|()
operator|+
literal|" is correlated"
argument_list|)
expr_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|childOperator
init|=
name|CorrelationUtilities
operator|.
name|getSingleChild
argument_list|(
name|current
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|childOperator
operator|instanceof
name|JoinOperator
condition|)
block|{
name|JoinOperator
name|joinOp
init|=
operator|(
name|JoinOperator
operator|)
name|childOperator
decl_stmt|;
name|JoinCondDesc
index|[]
name|joinConds
init|=
name|joinOp
operator|.
name|getConf
argument_list|()
operator|.
name|getConds
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|rsOps
init|=
name|joinOp
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
name|LinkedHashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|correlatedRsOps
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|()
decl_stmt|;
name|analyzeReduceSinkOperatorsOfJoinOperator
argument_list|(
name|joinConds
argument_list|,
name|rsOps
argument_list|,
name|current
argument_list|,
name|correlatedRsOps
argument_list|)
expr_stmt|;
name|correlatedReduceSinkOperators
operator|.
name|addAll
argument_list|(
name|correlatedRsOps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|correlatedReduceSinkOperators
operator|.
name|add
argument_list|(
name|rsop
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Operator "
operator|+
name|current
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|" "
operator|+
name|current
operator|.
name|getName
argument_list|()
operator|+
literal|" is not correlated"
argument_list|)
expr_stmt|;
name|correlatedReduceSinkOperators
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"ReduceSinkOperator "
operator|+
name|current
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|" does not have ColumnExprMap"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"CorrelationOptimizer cannot optimize this plan. "
operator|+
literal|"ReduceSinkOperator "
operator|+
name|current
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|" does not have ColumnExprMap"
argument_list|)
throw|;
block|}
return|return
name|correlatedReduceSinkOperators
return|;
block|}
comment|/** Start to exploit Job Flow Correlation from op.      * Example: here is the operator tree we have ...      *       JOIN2      *      /    \      *     RS4   RS5      *    /        \      *   GBY1     JOIN1      *    |       /    \      *   RS1     RS2   RS3      * The op will be RS4. If we can execute GBY1, JOIN1, and JOIN2 in      * the same reducer. This method will return [RS1, RS2, RS3].      * @param op      * @param correlationCtx      * @param correlation      * @return      * @throws SemanticException      */
specifier|private
name|LinkedHashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|exploitJobFlowCorrelation
parameter_list|(
name|ReduceSinkOperator
name|op
parameter_list|,
name|CorrelationNodeProcCtx
name|correlationCtx
parameter_list|,
name|IntraQueryCorrelation
name|correlation
parameter_list|)
throws|throws
name|SemanticException
block|{
name|correlationCtx
operator|.
name|addWalked
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|correlation
operator|.
name|addToAllReduceSinkOperators
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|boolean
name|shouldDetect
init|=
literal|true
decl_stmt|;
name|LinkedHashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|reduceSinkOperators
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keyCols
init|=
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getKeyCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|partitionCols
init|=
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getPartitionCols
argument_list|()
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|key
range|:
name|keyCols
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|key
operator|instanceof
name|ExprNodeColumnDesc
operator|)
condition|)
block|{
name|shouldDetect
operator|=
literal|false
expr_stmt|;
block|}
block|}
for|for
control|(
name|ExprNodeDesc
name|key
range|:
name|partitionCols
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|key
operator|instanceof
name|ExprNodeColumnDesc
operator|)
condition|)
block|{
name|shouldDetect
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|GroupByOperator
name|cGBY
init|=
name|CorrelationUtilities
operator|.
name|getSingleChild
argument_list|(
name|op
argument_list|,
name|GroupByOperator
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|cGBY
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|CorrelationUtilities
operator|.
name|hasGroupingSet
argument_list|(
name|op
argument_list|)
operator|||
name|cGBY
operator|.
name|getConf
argument_list|()
operator|.
name|isGroupingSetsPresent
argument_list|()
condition|)
block|{
comment|// Do not support grouping set right now
name|shouldDetect
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|shouldDetect
condition|)
block|{
name|LinkedHashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|newReduceSinkOperators
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|sortOrder
init|=
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getOrder
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
range|:
name|op
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Operator "
operator|+
name|op
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|": start detecting correlation from this operator"
argument_list|)
expr_stmt|;
name|LinkedHashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|correlatedReduceSinkOperators
init|=
name|findCorrelatedReduceSinkOperators
argument_list|(
name|op
argument_list|,
name|keyCols
argument_list|,
name|partitionCols
argument_list|,
name|sortOrder
argument_list|,
name|parent
argument_list|,
name|correlation
argument_list|)
decl_stmt|;
if|if
condition|(
name|correlatedReduceSinkOperators
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|newReduceSinkOperators
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|ReduceSinkOperator
name|rsop
range|:
name|correlatedReduceSinkOperators
control|)
block|{
name|LinkedHashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|exploited
init|=
name|exploitJobFlowCorrelation
argument_list|(
name|rsop
argument_list|,
name|correlationCtx
argument_list|,
name|correlation
argument_list|)
decl_stmt|;
if|if
condition|(
name|exploited
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|newReduceSinkOperators
operator|.
name|add
argument_list|(
name|rsop
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newReduceSinkOperators
operator|.
name|addAll
argument_list|(
name|exploited
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|reduceSinkOperators
operator|.
name|addAll
argument_list|(
name|newReduceSinkOperators
argument_list|)
expr_stmt|;
block|}
return|return
name|reduceSinkOperators
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|CorrelationNodeProcCtx
name|corrCtx
init|=
operator|(
name|CorrelationNodeProcCtx
operator|)
name|ctx
decl_stmt|;
name|ReduceSinkOperator
name|op
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|nd
decl_stmt|;
comment|// Check if we have visited this operator
if|if
condition|(
name|corrCtx
operator|.
name|isWalked
argument_list|(
name|op
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Walk to operator "
operator|+
name|op
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|" "
operator|+
name|op
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
init|=
name|CorrelationUtilities
operator|.
name|getSingleChild
argument_list|(
name|op
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|child
operator|instanceof
name|JoinOperator
operator|)
operator|&&
operator|!
operator|(
name|child
operator|instanceof
name|GroupByOperator
operator|)
condition|)
block|{
name|corrCtx
operator|.
name|addWalked
argument_list|(
name|op
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// detect correlations
name|IntraQueryCorrelation
name|correlation
init|=
operator|new
name|IntraQueryCorrelation
argument_list|(
name|corrCtx
operator|.
name|minReducer
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|topReduceSinkOperators
init|=
name|CorrelationUtilities
operator|.
name|findSiblingReduceSinkOperators
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|bottomReduceSinkOperators
init|=
operator|new
name|ArrayList
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|()
decl_stmt|;
comment|// Adjust the number of reducers of this correlation based on
comment|// those top layer ReduceSinkOperators.
for|for
control|(
name|ReduceSinkOperator
name|rsop
range|:
name|topReduceSinkOperators
control|)
block|{
if|if
condition|(
operator|!
name|correlation
operator|.
name|adjustNumReducers
argument_list|(
name|rsop
operator|.
name|getConf
argument_list|()
operator|.
name|getNumReducers
argument_list|()
argument_list|)
condition|)
block|{
comment|// If we have a conflict on the number of reducers, we will not optimize
comment|// this plan from here.
name|corrCtx
operator|.
name|addWalked
argument_list|(
name|op
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
for|for
control|(
name|ReduceSinkOperator
name|rsop
range|:
name|topReduceSinkOperators
control|)
block|{
name|LinkedHashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|thisBottomReduceSinkOperators
init|=
name|exploitJobFlowCorrelation
argument_list|(
name|rsop
argument_list|,
name|corrCtx
argument_list|,
name|correlation
argument_list|)
decl_stmt|;
if|if
condition|(
name|thisBottomReduceSinkOperators
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|thisBottomReduceSinkOperators
operator|.
name|add
argument_list|(
name|rsop
argument_list|)
expr_stmt|;
block|}
name|bottomReduceSinkOperators
operator|.
name|addAll
argument_list|(
name|thisBottomReduceSinkOperators
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|topReduceSinkOperators
operator|.
name|containsAll
argument_list|(
name|bottomReduceSinkOperators
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"has job flow correlation"
argument_list|)
expr_stmt|;
name|correlation
operator|.
name|setJobFlowCorrelation
argument_list|(
literal|true
argument_list|,
name|bottomReduceSinkOperators
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|correlation
operator|.
name|hasJobFlowCorrelation
argument_list|()
condition|)
block|{
name|corrCtx
operator|.
name|addCorrelation
argument_list|(
name|correlation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Since we cannot merge operators into a single MR job from here,
comment|// we should remove ReduceSinkOperators added into walked in exploitJFC
name|corrCtx
operator|.
name|removeWalkedAll
argument_list|(
name|correlation
operator|.
name|getAllReduceSinkOperators
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|corrCtx
operator|.
name|addWalked
argument_list|(
name|op
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|NodeProcessor
name|getDefaultProc
parameter_list|()
block|{
return|return
operator|new
name|NodeProcessor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
init|=
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
operator|)
name|nd
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Walk to operator "
operator|+
name|op
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|" "
operator|+
name|op
operator|.
name|getName
argument_list|()
operator|+
literal|". No actual work to do"
argument_list|)
expr_stmt|;
name|CorrelationNodeProcCtx
name|correlationCtx
init|=
operator|(
name|CorrelationNodeProcCtx
operator|)
name|ctx
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|MapJoinOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
condition|)
block|{
name|correlationCtx
operator|.
name|setAbort
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|correlationCtx
operator|.
name|getAbortReasons
argument_list|()
operator|.
name|add
argument_list|(
literal|"Found MAPJOIN"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|op
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|FileSinkOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
condition|)
block|{
name|correlationCtx
operator|.
name|incrementFileSinkOperatorCount
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
specifier|protected
class|class
name|CorrelationNodeProcCtx
extends|extends
name|AbstractCorrelationProcCtx
block|{
specifier|private
name|boolean
name|abort
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|abortReasons
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|walked
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|IntraQueryCorrelation
argument_list|>
name|correlations
decl_stmt|;
specifier|private
name|int
name|fileSinkOperatorCount
decl_stmt|;
specifier|public
name|CorrelationNodeProcCtx
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
block|{
name|super
argument_list|(
name|pctx
argument_list|)
expr_stmt|;
name|walked
operator|=
operator|new
name|HashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|()
expr_stmt|;
name|correlations
operator|=
operator|new
name|ArrayList
argument_list|<
name|IntraQueryCorrelation
argument_list|>
argument_list|()
expr_stmt|;
name|abort
operator|=
literal|false
expr_stmt|;
name|abortReasons
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|fileSinkOperatorCount
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|setAbort
parameter_list|(
name|boolean
name|abort
parameter_list|)
block|{
name|this
operator|.
name|abort
operator|=
name|abort
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAbort
parameter_list|()
block|{
return|return
name|abort
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAbortReasons
parameter_list|()
block|{
return|return
name|abortReasons
return|;
block|}
specifier|public
name|void
name|addCorrelation
parameter_list|(
name|IntraQueryCorrelation
name|correlation
parameter_list|)
block|{
name|correlations
operator|.
name|add
argument_list|(
name|correlation
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|IntraQueryCorrelation
argument_list|>
name|getCorrelations
parameter_list|()
block|{
return|return
name|correlations
return|;
block|}
specifier|public
name|boolean
name|isWalked
parameter_list|(
name|ReduceSinkOperator
name|op
parameter_list|)
block|{
return|return
name|walked
operator|.
name|contains
argument_list|(
name|op
argument_list|)
return|;
block|}
specifier|public
name|void
name|addWalked
parameter_list|(
name|ReduceSinkOperator
name|op
parameter_list|)
block|{
name|walked
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addWalkedAll
parameter_list|(
name|Collection
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|c
parameter_list|)
block|{
name|walked
operator|.
name|addAll
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeWalked
parameter_list|(
name|ReduceSinkOperator
name|op
parameter_list|)
block|{
name|walked
operator|.
name|remove
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeWalkedAll
parameter_list|(
name|Collection
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|c
parameter_list|)
block|{
name|walked
operator|.
name|removeAll
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|incrementFileSinkOperatorCount
parameter_list|()
block|{
name|fileSinkOperatorCount
operator|++
expr_stmt|;
if|if
condition|(
name|fileSinkOperatorCount
operator|==
literal|2
condition|)
block|{
name|abort
operator|=
literal|true
expr_stmt|;
name|abortReasons
operator|.
name|add
argument_list|(
literal|"-- Currently, a query with multiple FileSinkOperators are not supported."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

