begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeGrantInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeRegistry
import|;
end_import

begin_class
specifier|public
class|class
name|CreateTableAutomaticGrant
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|userGrants
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|groupGrants
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|roleGrants
decl_stmt|;
comment|// the owner can change, also owner might appear in user grants as well
comment|// so keep owner privileges separate from userGrants
specifier|private
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|ownerGrant
decl_stmt|;
specifier|public
specifier|static
name|CreateTableAutomaticGrant
name|create
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|HiveException
block|{
name|CreateTableAutomaticGrant
name|grants
init|=
operator|new
name|CreateTableAutomaticGrant
argument_list|()
decl_stmt|;
name|grants
operator|.
name|userGrants
operator|=
name|getGrantMap
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_TABLE_USER_GRANTS
argument_list|)
argument_list|)
expr_stmt|;
name|grants
operator|.
name|groupGrants
operator|=
name|getGrantMap
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_TABLE_GROUP_GRANTS
argument_list|)
argument_list|)
expr_stmt|;
name|grants
operator|.
name|roleGrants
operator|=
name|getGrantMap
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_TABLE_ROLE_GRANTS
argument_list|)
argument_list|)
expr_stmt|;
name|grants
operator|.
name|ownerGrant
operator|=
name|getGrantorInfoList
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_TABLE_OWNER_GRANTS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|grants
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|getGrantMap
parameter_list|(
name|String
name|grantMapStr
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|grantMapStr
operator|!=
literal|null
operator|&&
operator|!
name|grantMapStr
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|String
index|[]
name|grantArrayStr
init|=
name|grantMapStr
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|grantsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|grantStr
range|:
name|grantArrayStr
control|)
block|{
name|String
index|[]
name|principalListAndPrivList
init|=
name|grantStr
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|principalListAndPrivList
operator|.
name|length
operator|!=
literal|2
operator|||
name|principalListAndPrivList
index|[
literal|0
index|]
operator|==
literal|null
operator|||
name|principalListAndPrivList
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Can not understand the config privilege definition "
operator|+
name|grantStr
argument_list|)
throw|;
block|}
name|String
name|userList
init|=
name|principalListAndPrivList
index|[
literal|0
index|]
decl_stmt|;
name|String
name|privList
init|=
name|principalListAndPrivList
index|[
literal|1
index|]
decl_stmt|;
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|grantInfoList
init|=
name|getGrantorInfoList
argument_list|(
name|privList
argument_list|)
decl_stmt|;
if|if
condition|(
name|grantInfoList
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|users
init|=
name|userList
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|user
range|:
name|users
control|)
block|{
name|grantsMap
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|grantInfoList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|grantsMap
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|getGrantorInfoList
parameter_list|(
name|String
name|privList
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|privList
operator|==
literal|null
operator|||
name|privList
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|validatePrivilege
argument_list|(
name|privList
argument_list|)
expr_stmt|;
name|String
index|[]
name|grantArray
init|=
name|privList
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|grantInfoList
init|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|grantor
init|=
name|SessionState
operator|.
name|getUserFromAuthenticator
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|grant
range|:
name|grantArray
control|)
block|{
name|grantInfoList
operator|.
name|add
argument_list|(
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|grant
argument_list|,
operator|-
literal|1
argument_list|,
name|grantor
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|grantInfoList
return|;
block|}
specifier|private
specifier|static
name|void
name|validatePrivilege
parameter_list|(
name|String
name|ownerGrantsInConfig
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
index|[]
name|ownerGrantArray
init|=
name|ownerGrantsInConfig
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
comment|// verify the config
for|for
control|(
name|String
name|ownerGrant
range|:
name|ownerGrantArray
control|)
block|{
name|Privilege
name|prive
init|=
name|PrivilegeRegistry
operator|.
name|getPrivilege
argument_list|(
name|ownerGrant
argument_list|)
decl_stmt|;
if|if
condition|(
name|prive
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Privilege "
operator|+
name|ownerGrant
operator|+
literal|" is not found."
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|getUserGrants
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|curUserGrants
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|owner
init|=
name|SessionState
operator|.
name|getUserFromAuthenticator
argument_list|()
decl_stmt|;
if|if
condition|(
name|owner
operator|!=
literal|null
operator|&&
name|ownerGrant
operator|!=
literal|null
condition|)
block|{
name|curUserGrants
operator|.
name|put
argument_list|(
name|owner
argument_list|,
name|ownerGrant
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|userGrants
operator|!=
literal|null
condition|)
block|{
name|curUserGrants
operator|.
name|putAll
argument_list|(
name|userGrants
argument_list|)
expr_stmt|;
block|}
return|return
name|curUserGrants
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|getGroupGrants
parameter_list|()
block|{
return|return
name|groupGrants
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|getRoleGrants
parameter_list|()
block|{
return|return
name|roleGrants
return|;
block|}
block|}
end_class

end_unit

