begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_comment
comment|/**  * Dummy desc only for populating TOK_ALLCOLREF and should not be used  * outside of TypeCheckProcFactory  */
end_comment

begin_class
specifier|public
class|class
name|ExprNodeColumnListDesc
extends|extends
name|ExprNodeDesc
block|{
name|List
argument_list|<
name|ExprNodeColumnDesc
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeColumnDesc
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|addColumn
parameter_list|(
name|ExprNodeColumnDesc
name|column
parameter_list|)
block|{
name|columns
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ExprNodeDesc
name|clone
parameter_list|()
block|{
name|ExprNodeColumnListDesc
name|clone
init|=
operator|new
name|ExprNodeColumnListDesc
argument_list|()
decl_stmt|;
name|clone
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeColumnDesc
argument_list|>
argument_list|(
name|columns
argument_list|)
expr_stmt|;
return|return
name|clone
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSame
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|ExprNodeColumnListDesc
condition|)
block|{
return|return
name|columns
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ExprNodeColumnListDesc
operator|)
name|o
operator|)
operator|.
name|columns
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|TypeInfo
name|getTypeInfo
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTypeInfo
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getWritableObjectInspector
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTypeString
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCols
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExprNodeColumnDesc
name|column
range|:
name|columns
control|)
block|{
name|cols
operator|.
name|add
argument_list|(
name|column
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|cols
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
name|columns
argument_list|)
return|;
block|}
block|}
end_class

end_unit

