begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_class
specifier|public
class|class
name|DataInputByteBuffer
extends|extends
name|DataInputStream
block|{
specifier|private
specifier|static
class|class
name|Buffer
extends|extends
name|InputStream
block|{
specifier|private
specifier|final
name|byte
index|[]
name|scratch
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
name|ByteBuffer
index|[]
name|buffers
init|=
operator|new
name|ByteBuffer
index|[
literal|0
index|]
decl_stmt|;
name|int
name|bidx
decl_stmt|,
name|pos
decl_stmt|,
name|length
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
block|{
if|if
condition|(
operator|-
literal|1
operator|==
name|read
argument_list|(
name|scratch
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|scratch
index|[
literal|0
index|]
operator|&
literal|0xFF
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|bidx
operator|>=
name|buffers
operator|.
name|length
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|cur
init|=
literal|0
decl_stmt|;
do|do
block|{
name|int
name|rem
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|buffers
index|[
name|bidx
index|]
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
name|buffers
index|[
name|bidx
index|]
operator|.
name|get
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|rem
argument_list|)
expr_stmt|;
name|cur
operator|+=
name|rem
expr_stmt|;
name|off
operator|+=
name|rem
expr_stmt|;
name|len
operator|-=
name|rem
expr_stmt|;
block|}
do|while
condition|(
name|len
operator|>
literal|0
operator|&&
operator|++
name|bidx
operator|<
name|buffers
operator|.
name|length
condition|)
do|;
name|pos
operator|+=
name|cur
expr_stmt|;
return|return
name|cur
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|ByteBuffer
index|[]
name|buffers
parameter_list|)
block|{
name|bidx
operator|=
name|pos
operator|=
name|length
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|buffers
operator|=
name|buffers
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|b
range|:
name|buffers
control|)
block|{
name|length
operator|+=
name|b
operator|.
name|remaining
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getPosition
parameter_list|()
block|{
return|return
name|pos
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
specifier|public
name|ByteBuffer
index|[]
name|getData
parameter_list|()
block|{
return|return
name|buffers
return|;
block|}
block|}
specifier|private
name|Buffer
name|buffers
decl_stmt|;
specifier|public
name|DataInputByteBuffer
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|Buffer
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|DataInputByteBuffer
parameter_list|(
name|Buffer
name|buffers
parameter_list|)
block|{
name|super
argument_list|(
name|buffers
argument_list|)
expr_stmt|;
name|this
operator|.
name|buffers
operator|=
name|buffers
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|ByteBuffer
modifier|...
name|input
parameter_list|)
block|{
name|buffers
operator|.
name|reset
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ByteBuffer
index|[]
name|getData
parameter_list|()
block|{
return|return
name|buffers
operator|.
name|getData
argument_list|()
return|;
block|}
specifier|public
name|int
name|getPosition
parameter_list|()
block|{
return|return
name|buffers
operator|.
name|getPosition
argument_list|()
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|buffers
operator|.
name|getLength
argument_list|()
return|;
block|}
block|}
end_class

end_unit

