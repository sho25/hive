begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|optiq
operator|.
name|translator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_class
specifier|public
class|class
name|RexNodeConverter
block|{
specifier|private
specifier|final
name|RelOptCluster
name|m_cluster
decl_stmt|;
specifier|private
specifier|final
name|RelDataType
name|m_inpDataType
decl_stmt|;
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|m_nameToPosMap
decl_stmt|;
specifier|private
specifier|final
name|int
name|m_offset
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|m_flattenExpr
decl_stmt|;
specifier|public
name|RexNodeConverter
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelDataType
name|inpDataType
parameter_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|nameToPosMap
parameter_list|,
name|int
name|offset
parameter_list|,
name|boolean
name|flattenExpr
parameter_list|)
block|{
name|this
operator|.
name|m_cluster
operator|=
name|cluster
expr_stmt|;
name|this
operator|.
name|m_inpDataType
operator|=
name|inpDataType
expr_stmt|;
name|this
operator|.
name|m_nameToPosMap
operator|=
name|nameToPosMap
expr_stmt|;
name|this
operator|.
name|m_offset
operator|=
name|offset
expr_stmt|;
name|m_flattenExpr
operator|=
name|flattenExpr
expr_stmt|;
block|}
specifier|public
name|RexNode
name|convert
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
return|return
name|convert
argument_list|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|expr
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|expr
operator|instanceof
name|ExprNodeConstantDesc
condition|)
block|{
return|return
name|convert
argument_list|(
operator|(
name|ExprNodeConstantDesc
operator|)
name|expr
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|expr
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
return|return
name|convert
argument_list|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|expr
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported Expression"
argument_list|)
throw|;
block|}
comment|// TODO: handle a) ExprNodeNullDesc b) ExprNodeFieldDesc c)
comment|// ExprNodeColumnListDesc
block|}
specifier|private
name|RexNode
name|convert
parameter_list|(
specifier|final
name|ExprNodeGenericFuncDesc
name|func
parameter_list|)
block|{
name|SqlOperator
name|optiqOp
init|=
name|SqlFunctionConverter
operator|.
name|getOptiqOperator
argument_list|(
name|func
operator|.
name|getGenericUDF
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|childRexNodeLst
init|=
operator|new
name|LinkedList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|childExpr
range|:
name|func
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|childRexNodeLst
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|childExpr
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RexNode
name|convertedFilterExpr
init|=
name|m_cluster
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeCall
argument_list|(
name|optiqOp
argument_list|,
name|childRexNodeLst
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_flattenExpr
operator|&&
name|convertedFilterExpr
operator|instanceof
name|RexCall
condition|)
block|{
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|convertedFilterExpr
decl_stmt|;
name|convertedFilterExpr
operator|=
name|m_cluster
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeFlatCall
argument_list|(
name|call
operator|.
name|getOperator
argument_list|()
argument_list|,
name|call
operator|.
name|getOperands
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|convertedFilterExpr
return|;
block|}
specifier|protected
name|RexNode
name|convert
parameter_list|(
name|ExprNodeColumnDesc
name|col
parameter_list|)
block|{
name|int
name|pos
init|=
name|m_nameToPosMap
operator|.
name|get
argument_list|(
name|col
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|m_cluster
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeInputRef
argument_list|(
name|m_inpDataType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|,
name|pos
operator|+
name|m_offset
argument_list|)
return|;
block|}
specifier|protected
name|RexNode
name|convert
parameter_list|(
name|ExprNodeConstantDesc
name|literal
parameter_list|)
block|{
name|RexBuilder
name|rexBuilder
init|=
name|m_cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|RelDataTypeFactory
name|dtFactory
init|=
name|rexBuilder
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
name|PrimitiveTypeInfo
name|hiveType
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|literal
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
name|RelDataType
name|optiqDataType
init|=
name|TypeConverter
operator|.
name|convert
argument_list|(
name|hiveType
argument_list|,
name|dtFactory
argument_list|)
decl_stmt|;
name|PrimitiveCategory
name|hiveTypeCategory
init|=
name|hiveType
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
name|RexNode
name|optiqLiteral
init|=
literal|null
decl_stmt|;
name|Object
name|value
init|=
name|literal
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// TODO: Verify if we need to use ConstantObjectInspector to unwrap data
switch|switch
condition|(
name|hiveTypeCategory
condition|)
block|{
case|case
name|BOOLEAN
case|:
name|optiqLiteral
operator|=
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
operator|(
operator|(
name|Boolean
operator|)
name|value
operator|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|optiqLiteral
operator|=
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
operator|new
name|BigDecimal
argument_list|(
operator|(
name|Short
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|optiqLiteral
operator|=
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
operator|new
name|BigDecimal
argument_list|(
operator|(
name|Short
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|optiqLiteral
operator|=
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
operator|new
name|BigDecimal
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|optiqLiteral
operator|=
name|rexBuilder
operator|.
name|makeBigintLiteral
argument_list|(
operator|new
name|BigDecimal
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
break|break;
comment|// TODO: is Decimal an exact numeric or approximate numeric?
case|case
name|DECIMAL
case|:
name|optiqLiteral
operator|=
name|rexBuilder
operator|.
name|makeExactLiteral
argument_list|(
operator|(
name|BigDecimal
operator|)
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|optiqLiteral
operator|=
name|rexBuilder
operator|.
name|makeApproxLiteral
argument_list|(
operator|new
name|BigDecimal
argument_list|(
operator|(
name|Float
operator|)
name|value
argument_list|)
argument_list|,
name|optiqDataType
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|optiqLiteral
operator|=
name|rexBuilder
operator|.
name|makeApproxLiteral
argument_list|(
operator|new
name|BigDecimal
argument_list|(
operator|(
name|Double
operator|)
name|value
argument_list|)
argument_list|,
name|optiqDataType
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|optiqLiteral
operator|=
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
case|case
name|TIMESTAMP
case|:
case|case
name|BINARY
case|:
case|case
name|VOID
case|:
case|case
name|UNKNOWN
case|:
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"UnSupported Literal"
argument_list|)
throw|;
block|}
return|return
name|optiqLiteral
return|;
block|}
block|}
end_class

end_unit

