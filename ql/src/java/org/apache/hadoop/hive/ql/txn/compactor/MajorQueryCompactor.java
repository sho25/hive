begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|txn
operator|.
name|compactor
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidWriteIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|CompactionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Class responsible of running query based major compaction.  */
end_comment

begin_class
specifier|final
class|class
name|MajorQueryCompactor
extends|extends
name|QueryCompactor
block|{
annotation|@
name|Override
name|void
name|runCompaction
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|Table
name|table
parameter_list|,
name|Partition
name|partition
parameter_list|,
name|StorageDescriptor
name|storageDescriptor
parameter_list|,
name|ValidWriteIdList
name|writeIds
parameter_list|,
name|CompactionInfo
name|compactionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|AcidUtils
operator|.
name|setAcidOperationalProperties
argument_list|(
name|hiveConf
argument_list|,
literal|true
argument_list|,
name|AcidUtils
operator|.
name|getAcidOperationalProperties
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
comment|// Set up the session for driver.
name|conf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_QUOTEDID_SUPPORT
operator|.
name|varname
argument_list|,
literal|"column"
argument_list|)
expr_stmt|;
comment|/*      * For now, we will group splits on tez so that we end up with all bucket files,      * with same bucket number in one map task.      */
name|conf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SPLIT_GROUPING_MODE
operator|.
name|varname
argument_list|,
literal|"compactor"
argument_list|)
expr_stmt|;
name|String
name|tmpPrefix
init|=
name|table
operator|.
name|getDbName
argument_list|()
operator|+
literal|"_tmp_compactor_"
operator|+
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|"_"
decl_stmt|;
name|String
name|tmpTableName
init|=
name|tmpPrefix
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|createQueries
init|=
name|getCreateQueries
argument_list|(
name|tmpTableName
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|compactionQueries
init|=
name|getCompactionQueries
argument_list|(
name|table
argument_list|,
name|partition
argument_list|,
name|tmpTableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dropQueries
init|=
name|getDropQueries
argument_list|(
name|tmpTableName
argument_list|)
decl_stmt|;
name|runCompactionQueries
argument_list|(
name|conf
argument_list|,
name|tmpTableName
argument_list|,
name|storageDescriptor
argument_list|,
name|writeIds
argument_list|,
name|compactionInfo
argument_list|,
name|createQueries
argument_list|,
name|compactionQueries
argument_list|,
name|dropQueries
argument_list|)
expr_stmt|;
block|}
comment|/**    * Move and rename bucket files from the temp table (tmpTableName), to the new base path under the source table/ptn.    * Since the temp table is a non-transactional table, it has file names in the "original" format.    * Also, due to split grouping in    * {@link org.apache.hadoop.hive.ql.exec.tez.SplitGrouper#getCompactorSplitGroups(InputSplit[],    * Configuration, boolean)}, we will end up with one file per bucket.    */
annotation|@
name|Override
specifier|protected
name|void
name|commitCompaction
parameter_list|(
name|String
name|dest
parameter_list|,
name|String
name|tmpTableName
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|ValidWriteIdList
name|actualWriteIds
parameter_list|,
name|long
name|compactorTxnId
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
name|tempTable
init|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getTable
argument_list|(
name|tmpTableName
argument_list|)
decl_stmt|;
name|Util
operator|.
name|moveContents
argument_list|(
operator|new
name|Path
argument_list|(
name|tempTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|dest
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|,
name|actualWriteIds
argument_list|,
name|compactorTxnId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Note on ordering of rows in the temp table:    * We need each final bucket file sorted by original write id (ascending), bucket (ascending) and row id (ascending).    * (current write id will be the same as original write id).    * We will be achieving the ordering via a custom split grouper for compactor.    * See {@link org.apache.hadoop.hive.conf.HiveConf.ConfVars#SPLIT_GROUPING_MODE} for the config description.    * See {@link org.apache.hadoop.hive.ql.exec.tez.SplitGrouper#getCompactorSplitGroups(InputSplit[], Configuration)}    *  for details on the mechanism.    */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getCreateQueries
parameter_list|(
name|String
name|fullName
parameter_list|,
name|Table
name|t
parameter_list|)
block|{
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"create temporary table "
argument_list|)
operator|.
name|append
argument_list|(
name|fullName
argument_list|)
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
decl_stmt|;
comment|// Acid virtual columns
name|query
operator|.
name|append
argument_list|(
literal|"`operation` int, `originalTransaction` bigint, `bucket` int, `rowId` bigint, `currentTransaction` bigint, "
operator|+
literal|"`row` struct<"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|boolean
name|isFirst
init|=
literal|true
decl_stmt|;
comment|// Actual columns
for|for
control|(
name|FieldSchema
name|col
range|:
name|cols
control|)
block|{
if|if
condition|(
operator|!
name|isFirst
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|isFirst
operator|=
literal|false
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"`"
argument_list|)
operator|.
name|append
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"` "
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|col
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
literal|">)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" stored as orc"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" tblproperties ('transactional'='false')"
argument_list|)
expr_stmt|;
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getCompactionQueries
parameter_list|(
name|Table
name|t
parameter_list|,
name|Partition
name|p
parameter_list|,
name|String
name|tmpName
parameter_list|)
block|{
name|String
name|fullName
init|=
name|t
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|t
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"insert into table "
operator|+
name|tmpName
operator|+
literal|" "
argument_list|)
decl_stmt|;
name|StringBuilder
name|filter
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|filter
operator|.
name|append
argument_list|(
literal|" where "
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
name|p
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|keys
init|=
name|t
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
assert|assert
name|keys
operator|.
name|size
argument_list|()
operator|==
name|vals
operator|.
name|size
argument_list|()
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|filter
operator|.
name|append
argument_list|(
name|i
operator|==
literal|0
condition|?
literal|"`"
else|:
literal|" and `"
argument_list|)
operator|.
name|append
argument_list|(
name|keys
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"`='"
argument_list|)
operator|.
name|append
argument_list|(
name|vals
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
name|query
operator|.
name|append
argument_list|(
literal|" select validate_acid_sort_order(ROW__ID.writeId, ROW__ID.bucketId, ROW__ID.rowId), ROW__ID.writeId, "
operator|+
literal|"ROW__ID.bucketId, ROW__ID.rowId, ROW__ID.writeId, NAMED_STRUCT("
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cols
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|query
operator|.
name|append
argument_list|(
name|i
operator|==
literal|0
condition|?
literal|"'"
else|:
literal|", '"
argument_list|)
operator|.
name|append
argument_list|(
name|cols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"', "
argument_list|)
operator|.
name|append
argument_list|(
name|cols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
literal|") from "
argument_list|)
operator|.
name|append
argument_list|(
name|fullName
argument_list|)
operator|.
name|append
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getDropQueries
parameter_list|(
name|String
name|tmpTableName
parameter_list|)
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"drop table if exists "
operator|+
name|tmpTableName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

