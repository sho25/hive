begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|txn
operator|.
name|compactor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|exception
operator|.
name|ExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidWriteIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|CompactionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Class responsible of running query based major compaction.  */
end_comment

begin_class
class|class
name|MajorQueryCompactor
extends|extends
name|QueryCompactor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MajorQueryCompactor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
name|void
name|runCompaction
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|Table
name|table
parameter_list|,
name|Partition
name|partition
parameter_list|,
name|StorageDescriptor
name|storageDescriptor
parameter_list|,
name|ValidWriteIdList
name|writeIds
parameter_list|,
name|CompactionInfo
name|compactionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|AcidUtils
operator|.
name|setAcidOperationalProperties
argument_list|(
name|hiveConf
argument_list|,
literal|true
argument_list|,
name|AcidUtils
operator|.
name|getAcidOperationalProperties
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|SessionState
name|sessionState
init|=
name|DriverUtils
operator|.
name|setUpSessionState
argument_list|(
name|hiveConf
argument_list|,
name|user
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Set up the session for driver.
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_QUOTEDID_SUPPORT
operator|.
name|varname
argument_list|,
literal|"column"
argument_list|)
expr_stmt|;
comment|/*      * For now, we will group splits on tez so that we end up with all bucket files,      * with same bucket number in one map task.      */
name|conf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SPLIT_GROUPING_MODE
operator|.
name|varname
argument_list|,
literal|"compactor"
argument_list|)
expr_stmt|;
name|String
name|tmpPrefix
init|=
name|table
operator|.
name|getDbName
argument_list|()
operator|+
literal|"_tmp_compactor_"
operator|+
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|"_"
decl_stmt|;
name|String
name|tmpTableName
init|=
name|tmpPrefix
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|compactorTxnId
init|=
name|CompactorMR
operator|.
name|CompactorMap
operator|.
name|getCompactorTxnId
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Create a temporary table under the temp location --> db/tbl/ptn/_tmp_1234/db.tmp_compactor_tbl_1234
name|String
name|query
init|=
name|buildCrudMajorCompactionCreateTableQuery
argument_list|(
name|tmpTableName
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running major compaction query into temp table with create definition: {}"
argument_list|,
name|query
argument_list|)
expr_stmt|;
try|try
block|{
name|DriverUtils
operator|.
name|runOnDriver
argument_list|(
name|conf
argument_list|,
name|user
argument_list|,
name|sessionState
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|ex
decl_stmt|;
while|while
condition|(
name|cause
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|cause
operator|instanceof
name|AlreadyExistsException
operator|)
condition|)
block|{
name|cause
operator|=
name|cause
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cause
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
name|query
operator|=
name|buildCrudMajorCompactionQuery
argument_list|(
name|table
argument_list|,
name|partition
argument_list|,
name|tmpTableName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running major compaction via query: {}"
argument_list|,
name|query
argument_list|)
expr_stmt|;
comment|/*        * This will create bucket files like:        * db/db_tmp_compactor_tbl_1234/00000_0        * db/db_tmp_compactor_tbl_1234/00001_0        */
name|DriverUtils
operator|.
name|runOnDriver
argument_list|(
name|conf
argument_list|,
name|user
argument_list|,
name|sessionState
argument_list|,
name|query
argument_list|,
name|writeIds
argument_list|,
name|compactorTxnId
argument_list|)
expr_stmt|;
comment|/*        * This achieves a final layout like (wid is the highest valid write id for this major compaction):        * db/tbl/ptn/base_wid/bucket_00000        * db/tbl/ptn/base_wid/bucket_00001        */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
name|tempTable
init|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getTable
argument_list|(
name|tmpTableName
argument_list|)
decl_stmt|;
name|String
name|tmpLocation
init|=
name|tempTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|commitCrudMajorCompaction
argument_list|(
name|tmpLocation
argument_list|,
name|tmpTableName
argument_list|,
name|storageDescriptor
operator|.
name|getLocation
argument_list|()
argument_list|,
name|conf
argument_list|,
name|writeIds
argument_list|,
name|compactorTxnId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error doing query based major compaction"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|DriverUtils
operator|.
name|runOnDriver
argument_list|(
name|conf
argument_list|,
name|user
argument_list|,
name|sessionState
argument_list|,
literal|"drop table if exists "
operator|+
name|tmpTableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to delete drop temp table {} which was created for running major compaction"
argument_list|,
name|tmpTableName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|ExceptionUtils
operator|.
name|getStackTrace
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Note on ordering of rows in the temp table:    * We need each final bucket file soreted by original write id (ascending), bucket (ascending) and row id (ascending).    * (current write id will be the same as original write id).    * We will be achieving the ordering via a custom split grouper for compactor.    * See {@link org.apache.hadoop.hive.conf.HiveConf.ConfVars#SPLIT_GROUPING_MODE} for the config description.    * See {@link org.apache.hadoop.hive.ql.exec.tez.SplitGrouper#getCompactorSplitGroups(InputSplit[], Configuration)}    *  for details on the mechanism.    */
specifier|private
name|String
name|buildCrudMajorCompactionCreateTableQuery
parameter_list|(
name|String
name|fullName
parameter_list|,
name|Table
name|t
parameter_list|)
block|{
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"create temporary table "
argument_list|)
operator|.
name|append
argument_list|(
name|fullName
argument_list|)
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
decl_stmt|;
comment|// Acid virtual columns
name|query
operator|.
name|append
argument_list|(
literal|"`operation` int, `originalTransaction` bigint, `bucket` int, `rowId` bigint, `currentTransaction` bigint, "
operator|+
literal|"`row` struct<"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|boolean
name|isFirst
init|=
literal|true
decl_stmt|;
comment|// Actual columns
for|for
control|(
name|FieldSchema
name|col
range|:
name|cols
control|)
block|{
if|if
condition|(
operator|!
name|isFirst
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|isFirst
operator|=
literal|false
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"`"
argument_list|)
operator|.
name|append
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"` "
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|col
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
literal|">)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" stored as orc"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" tblproperties ('transactional'='false')"
argument_list|)
expr_stmt|;
return|return
name|query
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|buildCrudMajorCompactionQuery
parameter_list|(
name|Table
name|t
parameter_list|,
name|Partition
name|p
parameter_list|,
name|String
name|tmpName
parameter_list|)
block|{
name|String
name|fullName
init|=
name|t
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|t
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"insert into table "
operator|+
name|tmpName
operator|+
literal|" "
argument_list|)
decl_stmt|;
name|StringBuilder
name|filter
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|filter
operator|.
name|append
argument_list|(
literal|" where "
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
name|p
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|keys
init|=
name|t
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
assert|assert
name|keys
operator|.
name|size
argument_list|()
operator|==
name|vals
operator|.
name|size
argument_list|()
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|filter
operator|.
name|append
argument_list|(
name|i
operator|==
literal|0
condition|?
literal|"`"
else|:
literal|" and `"
argument_list|)
operator|.
name|append
argument_list|(
name|keys
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"`='"
argument_list|)
operator|.
name|append
argument_list|(
name|vals
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
name|query
operator|.
name|append
argument_list|(
literal|" select validate_acid_sort_order(ROW__ID.writeId, ROW__ID.bucketId, ROW__ID.rowId), ROW__ID.writeId, "
operator|+
literal|"ROW__ID.bucketId, ROW__ID.rowId, ROW__ID.writeId, NAMED_STRUCT("
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cols
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|query
operator|.
name|append
argument_list|(
name|i
operator|==
literal|0
condition|?
literal|"'"
else|:
literal|", '"
argument_list|)
operator|.
name|append
argument_list|(
name|cols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"', "
argument_list|)
operator|.
name|append
argument_list|(
name|cols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
literal|") from "
argument_list|)
operator|.
name|append
argument_list|(
name|fullName
argument_list|)
operator|.
name|append
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|query
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Move and rename bucket files from the temp table (tmpTableName), to the new base path under the source table/ptn.    * Since the temp table is a non-transactional table, it has file names in the "original" format.    * Also, due to split grouping in    * {@link org.apache.hadoop.hive.ql.exec.tez.SplitGrouper#getCompactorSplitGroups(InputSplit[], Configuration)},    * we will end up with one file per bucket.    */
specifier|private
name|void
name|commitCrudMajorCompaction
parameter_list|(
name|String
name|from
parameter_list|,
name|String
name|tmpTableName
parameter_list|,
name|String
name|to
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|ValidWriteIdList
name|actualWriteIds
parameter_list|,
name|long
name|compactorTxnId
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveException
block|{
name|Path
name|fromPath
init|=
operator|new
name|Path
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|Path
name|toPath
init|=
operator|new
name|Path
argument_list|(
name|to
argument_list|)
decl_stmt|;
name|Path
name|tmpTablePath
init|=
operator|new
name|Path
argument_list|(
name|fromPath
argument_list|,
name|tmpTableName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|fromPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Assume the high watermark can be used as maximum transaction ID.
name|long
name|maxTxn
init|=
name|actualWriteIds
operator|.
name|getHighWatermark
argument_list|()
decl_stmt|;
comment|// Get a base_wid path which will be the new compacted base
name|AcidOutputFormat
operator|.
name|Options
name|options
init|=
operator|new
name|AcidOutputFormat
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
operator|.
name|writingBase
argument_list|(
literal|true
argument_list|)
operator|.
name|isCompressed
argument_list|(
literal|false
argument_list|)
operator|.
name|maximumWriteId
argument_list|(
name|maxTxn
argument_list|)
operator|.
name|bucket
argument_list|(
literal|0
argument_list|)
operator|.
name|statementId
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Path
name|newBaseDir
init|=
name|AcidUtils
operator|.
name|createFilename
argument_list|(
name|toPath
argument_list|,
name|options
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|fromPath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"{} not found.  Assuming 0 splits. Creating {}"
argument_list|,
name|from
argument_list|,
name|newBaseDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|newBaseDir
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving contents of {} to {}"
argument_list|,
name|tmpTablePath
argument_list|,
name|to
argument_list|)
expr_stmt|;
comment|/*      * Currently mapping file with name 0000_0 to bucket_00000, 0000_1 to bucket_00001 and so on      * TODO/ToThink:      * Q. Can file with name 0000_0 under temp table be deterministically renamed to bucket_00000 in the destination?      */
comment|//    List<String> buckCols = t.getSd().getBucketCols();
name|FileStatus
index|[]
name|children
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|fromPath
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|filestatus
range|:
name|children
control|)
block|{
name|String
name|originalFileName
init|=
name|filestatus
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// This if() may not be required I think...
if|if
condition|(
name|AcidUtils
operator|.
name|ORIGINAL_PATTERN
operator|.
name|matcher
argument_list|(
name|originalFileName
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|int
name|bucketId
init|=
name|AcidUtils
operator|.
name|parseBucketId
argument_list|(
name|filestatus
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|options
operator|=
operator|new
name|AcidOutputFormat
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
operator|.
name|writingBase
argument_list|(
literal|true
argument_list|)
operator|.
name|isCompressed
argument_list|(
literal|false
argument_list|)
operator|.
name|maximumWriteId
argument_list|(
name|maxTxn
argument_list|)
operator|.
name|bucket
argument_list|(
name|bucketId
argument_list|)
operator|.
name|statementId
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|visibilityTxnId
argument_list|(
name|compactorTxnId
argument_list|)
expr_stmt|;
name|Path
name|finalBucketFile
init|=
name|AcidUtils
operator|.
name|createFilename
argument_list|(
name|toPath
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|Hive
operator|.
name|moveFile
argument_list|(
name|conf
argument_list|,
name|filestatus
operator|.
name|getPath
argument_list|()
argument_list|,
name|finalBucketFile
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|fs
operator|.
name|delete
argument_list|(
name|fromPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

