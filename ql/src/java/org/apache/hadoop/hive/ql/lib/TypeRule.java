begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_comment
comment|/**  * Rule that matches a particular type of node.  */
end_comment

begin_class
specifier|public
class|class
name|TypeRule
implements|implements
name|SemanticRule
block|{
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|nodeClass
decl_stmt|;
specifier|public
name|TypeRule
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|nodeClass
parameter_list|)
block|{
name|this
operator|.
name|nodeClass
operator|=
name|nodeClass
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|cost
parameter_list|(
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|stack
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|nodeClass
operator|.
name|isInstance
argument_list|(
name|stack
operator|.
name|peek
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|nodeClass
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

