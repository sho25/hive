begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|txn
operator|.
name|compactor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SkewedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|create
operator|.
name|show
operator|.
name|ShowCreateTableOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|DirectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HiveStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|final
class|class
name|MmQueryCompactorUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MmQueryCompactorUtils
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|DROP_IF_EXISTS
init|=
literal|"drop table if exists "
decl_stmt|;
specifier|private
name|MmQueryCompactorUtils
parameter_list|()
block|{}
comment|/**    * Creates a command to create a new table based on an example table (sourceTab).    *    * @param fullName of new table    * @param sourceTab the table we are modeling the new table on    * @param sd StorageDescriptor of the table or partition we are modeling the new table on    * @param location of the new table    * @param isPartitioned should the new table be partitioned    * @param isExternal should the new table be external    * @return query string creating the new table    */
specifier|static
name|String
name|getCreateQuery
parameter_list|(
name|String
name|fullName
parameter_list|,
name|Table
name|sourceTab
parameter_list|,
name|StorageDescriptor
name|sd
parameter_list|,
name|String
name|location
parameter_list|,
name|boolean
name|isPartitioned
parameter_list|,
name|boolean
name|isExternal
parameter_list|)
block|{
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"create temporary "
argument_list|)
decl_stmt|;
if|if
condition|(
name|isExternal
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|"external "
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
literal|"table "
argument_list|)
operator|.
name|append
argument_list|(
name|fullName
argument_list|)
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|sourceTab
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|boolean
name|isFirst
init|=
literal|true
decl_stmt|;
for|for
control|(
name|FieldSchema
name|col
range|:
name|cols
control|)
block|{
if|if
condition|(
operator|!
name|isFirst
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|isFirst
operator|=
literal|false
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"`"
argument_list|)
operator|.
name|append
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"` "
argument_list|)
operator|.
name|append
argument_list|(
name|col
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
literal|") "
argument_list|)
expr_stmt|;
comment|// Partitioning. Used for minor compaction.
if|if
condition|(
name|isPartitioned
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|" PARTITIONED BY (`file_name` STRING) "
argument_list|)
expr_stmt|;
block|}
comment|// Bucketing.
name|List
argument_list|<
name|String
argument_list|>
name|buckCols
init|=
name|sourceTab
operator|.
name|getSd
argument_list|()
operator|.
name|getBucketCols
argument_list|()
decl_stmt|;
if|if
condition|(
name|buckCols
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|"CLUSTERED BY ("
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|buckCols
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|") "
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
init|=
name|sourceTab
operator|.
name|getSd
argument_list|()
operator|.
name|getSortCols
argument_list|()
decl_stmt|;
if|if
condition|(
name|sortCols
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|"SORTED BY ("
argument_list|)
expr_stmt|;
name|isFirst
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Order
name|sortCol
range|:
name|sortCols
control|)
block|{
if|if
condition|(
operator|!
name|isFirst
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|isFirst
operator|=
literal|false
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
name|sortCol
operator|.
name|getCol
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|DirectionUtils
operator|.
name|codeToText
argument_list|(
name|sortCol
operator|.
name|getOrder
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
literal|") "
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
literal|"INTO "
argument_list|)
operator|.
name|append
argument_list|(
name|sourceTab
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" BUCKETS"
argument_list|)
expr_stmt|;
block|}
comment|// Stored as directories. We don't care about the skew otherwise.
if|if
condition|(
name|sourceTab
operator|.
name|getSd
argument_list|()
operator|.
name|isStoredAsSubDirectories
argument_list|()
condition|)
block|{
name|SkewedInfo
name|skewedInfo
init|=
name|sourceTab
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|skewedInfo
operator|!=
literal|null
operator|&&
operator|!
name|skewedInfo
operator|.
name|getSkewedColNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|" SKEWED BY ("
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
literal|", "
argument_list|,
name|skewedInfo
operator|.
name|getSkewedColNames
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|") ON "
argument_list|)
expr_stmt|;
name|isFirst
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|colValues
range|:
name|skewedInfo
operator|.
name|getSkewedColValues
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isFirst
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|isFirst
operator|=
literal|false
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"('"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
literal|"','"
argument_list|,
name|colValues
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"')"
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
literal|") STORED AS DIRECTORIES"
argument_list|)
expr_stmt|;
block|}
block|}
name|SerDeInfo
name|serdeInfo
init|=
name|sd
operator|.
name|getSerdeInfo
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdeParams
init|=
name|serdeInfo
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" ROW FORMAT SERDE '"
argument_list|)
operator|.
name|append
argument_list|(
name|HiveStringUtils
operator|.
name|escapeHiveCommand
argument_list|(
name|serdeInfo
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
name|String
name|sh
init|=
name|sourceTab
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|hive_metastoreConstants
operator|.
name|META_TABLE_STORAGE
argument_list|)
decl_stmt|;
assert|assert
name|sh
operator|==
literal|null
assert|;
comment|// Not supposed to be a compactable table.
if|if
condition|(
operator|!
name|serdeParams
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ShowCreateTableOperation
operator|.
name|appendSerdeParams
argument_list|(
name|query
argument_list|,
name|serdeParams
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
literal|"STORED AS INPUTFORMAT '"
argument_list|)
operator|.
name|append
argument_list|(
name|HiveStringUtils
operator|.
name|escapeHiveCommand
argument_list|(
name|sd
operator|.
name|getInputFormat
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"' OUTPUTFORMAT '"
argument_list|)
operator|.
name|append
argument_list|(
name|HiveStringUtils
operator|.
name|escapeHiveCommand
argument_list|(
name|sd
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"' LOCATION '"
argument_list|)
operator|.
name|append
argument_list|(
name|HiveStringUtils
operator|.
name|escapeHiveCommand
argument_list|(
name|location
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"' TBLPROPERTIES ("
argument_list|)
expr_stmt|;
comment|// Exclude all standard table properties.
name|Set
argument_list|<
name|String
argument_list|>
name|excludes
init|=
name|getHiveMetastoreConstants
argument_list|()
decl_stmt|;
name|excludes
operator|.
name|addAll
argument_list|(
name|StatsSetupConst
operator|.
name|TABLE_PARAMS_STATS_KEYS
argument_list|)
expr_stmt|;
name|isFirst
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|sourceTab
operator|.
name|getParameters
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|excludes
operator|.
name|contains
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|isFirst
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|isFirst
operator|=
literal|false
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"'='"
argument_list|)
operator|.
name|append
argument_list|(
name|HiveStringUtils
operator|.
name|escapeHiveCommand
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isFirst
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
literal|"'transactional'='false')"
argument_list|)
expr_stmt|;
return|return
name|query
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getHiveMetastoreConstants
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|f
range|:
name|hive_metastoreConstants
operator|.
name|class
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|f
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isFinal
argument_list|(
name|f
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|String
operator|.
name|class
operator|.
name|equals
argument_list|(
name|f
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|result
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|f
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Remove the delta directories of aborted transactions.    */
specifier|static
name|void
name|removeFilesForMmTable
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|AcidUtils
operator|.
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|filesToDelete
init|=
name|dir
operator|.
name|getAbortedDirectories
argument_list|()
decl_stmt|;
if|if
condition|(
name|filesToDelete
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"About to remove "
operator|+
name|filesToDelete
operator|.
name|size
argument_list|()
operator|+
literal|" aborted directories from "
operator|+
name|dir
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|filesToDelete
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|dead
range|:
name|filesToDelete
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to delete path "
operator|+
name|dead
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dead
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

