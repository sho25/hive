begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|debug
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|management
operator|.
name|HotSpotDiagnosticMXBean
import|;
end_import

begin_comment
comment|/**  * Debug utility methods for Hive.  */
end_comment

begin_class
specifier|public
class|class
name|Utils
block|{
specifier|private
specifier|static
specifier|final
name|String
name|HOTSPOT_BEAN_NAME
init|=
literal|"com.sun.management:type=HotSpotDiagnostic"
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|HotSpotDiagnosticMXBean
name|hotspotMBean
decl_stmt|;
comment|/**    * Dumps process heap to a file in temp directoty.    * @param args Strings to use to build a file name (dump_arg0_arg1_....).    */
specifier|public
specifier|static
name|void
name|dumpHeapToTmp
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
block|{
name|String
name|tmpDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|tmpDir
argument_list|)
condition|)
block|{
name|tmpDir
operator|=
literal|"/tmp/"
expr_stmt|;
block|}
name|String
name|fileName
init|=
name|tmpDir
operator|+
name|File
operator|.
name|pathSeparatorChar
operator|+
literal|"dump"
decl_stmt|;
for|for
control|(
name|String
name|arg
range|:
name|args
control|)
block|{
name|fileName
operator|+=
literal|"_"
operator|+
name|arg
expr_stmt|;
block|}
name|fileName
operator|+=
literal|"_"
operator|+
name|System
operator|.
name|nanoTime
argument_list|()
operator|+
literal|".hprof"
expr_stmt|;
name|dumpHeap
argument_list|(
name|fileName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Dumps process heap.    * @param fileName File name to use.    * @param live Whether to only dump live objects.    */
specifier|public
specifier|static
name|void
name|dumpHeap
parameter_list|(
name|String
name|fileName
parameter_list|,
name|boolean
name|live
parameter_list|)
block|{
if|if
condition|(
name|hotspotMBean
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|MBeanServer
name|server
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|hotspotMBean
operator|=
name|ManagementFactory
operator|.
name|newPlatformMXBeanProxy
argument_list|(
name|server
argument_list|,
name|HOTSPOT_BEAN_NAME
argument_list|,
name|HotSpotDiagnosticMXBean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|re
parameter_list|)
block|{
throw|throw
name|re
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exp
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|exp
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|hotspotMBean
operator|.
name|dumpHeap
argument_list|(
name|fileName
argument_list|,
name|live
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|re
parameter_list|)
block|{
throw|throw
name|re
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exp
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|exp
argument_list|)
throw|;
block|}
block|}
comment|/**     * Outputs some bytes as hex w/printable characters prints.    * Helpful debug method; c/p from HBase Bytes.    * @param b Bytes.    * @param off Offset.    * @param len Length.    * @return The string representation.    */
specifier|public
specifier|static
name|String
name|toStringBinary
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|first
init|=
operator|new
name|String
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
literal|"ISO-8859-1"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|first
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|ch
init|=
name|first
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|&
literal|0xFF
decl_stmt|;
if|if
condition|(
operator|(
name|ch
operator|>=
literal|'0'
operator|&&
name|ch
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|ch
operator|>=
literal|'A'
operator|&&
name|ch
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|ch
operator|>=
literal|'a'
operator|&&
name|ch
operator|<=
literal|'z'
operator|)
operator|||
literal|" `~!@#$%^&*()-_=+[]{}\\|;:'\",.<>/?"
operator|.
name|indexOf
argument_list|(
name|ch
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|first
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\\x%02X"
argument_list|,
name|ch
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"ISO-8859-1 not supported?"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

