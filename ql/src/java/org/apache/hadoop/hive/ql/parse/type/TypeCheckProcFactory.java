begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentLengthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|CostLessRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|SemanticDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|SemanticGraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|SemanticNodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|SubqueryExpressionWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|CalciteSubquerySemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTErrorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|RowResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SubqueryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|SettableUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFBaseCompare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFCoalesce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFIn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPAnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualNS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPOr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|CharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TimestampLocalTZTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SetMultimap
import|;
end_import

begin_comment
comment|/**  * The Factory for creating typecheck processors. The typecheck processors are  * used to processes the syntax trees for expressions and convert them into  * expression Node Descriptor trees. They also introduce the correct conversion  * functions to do proper implicit conversion.  *  * At instantiation time, a expression factory needs to be provided to this class.  */
end_comment

begin_class
specifier|public
class|class
name|TypeCheckProcFactory
parameter_list|<
name|T
parameter_list|>
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TypeCheckProcFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|SPECIAL_UNARY_OPERATOR_TEXT_MAP
decl_stmt|;
specifier|static
specifier|final
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|CONVERSION_FUNCTION_TEXT_MAP
decl_stmt|;
specifier|static
specifier|final
name|HashSet
argument_list|<
name|Integer
argument_list|>
name|WINDOWING_TOKENS
decl_stmt|;
static|static
block|{
name|SPECIAL_UNARY_OPERATOR_TEXT_MAP
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|SPECIAL_UNARY_OPERATOR_TEXT_MAP
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|PLUS
argument_list|,
literal|"positive"
argument_list|)
expr_stmt|;
name|SPECIAL_UNARY_OPERATOR_TEXT_MAP
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|MINUS
argument_list|,
literal|"negative"
argument_list|)
expr_stmt|;
name|CONVERSION_FUNCTION_TEXT_MAP
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|CONVERSION_FUNCTION_TEXT_MAP
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_BOOLEAN
argument_list|,
name|serdeConstants
operator|.
name|BOOLEAN_TYPE_NAME
argument_list|)
expr_stmt|;
name|CONVERSION_FUNCTION_TEXT_MAP
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_TINYINT
argument_list|,
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
argument_list|)
expr_stmt|;
name|CONVERSION_FUNCTION_TEXT_MAP
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_SMALLINT
argument_list|,
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
argument_list|)
expr_stmt|;
name|CONVERSION_FUNCTION_TEXT_MAP
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_INT
argument_list|,
name|serdeConstants
operator|.
name|INT_TYPE_NAME
argument_list|)
expr_stmt|;
name|CONVERSION_FUNCTION_TEXT_MAP
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_BIGINT
argument_list|,
name|serdeConstants
operator|.
name|BIGINT_TYPE_NAME
argument_list|)
expr_stmt|;
name|CONVERSION_FUNCTION_TEXT_MAP
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_FLOAT
argument_list|,
name|serdeConstants
operator|.
name|FLOAT_TYPE_NAME
argument_list|)
expr_stmt|;
name|CONVERSION_FUNCTION_TEXT_MAP
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_DOUBLE
argument_list|,
name|serdeConstants
operator|.
name|DOUBLE_TYPE_NAME
argument_list|)
expr_stmt|;
name|CONVERSION_FUNCTION_TEXT_MAP
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_STRING
argument_list|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|)
expr_stmt|;
name|CONVERSION_FUNCTION_TEXT_MAP
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_CHAR
argument_list|,
name|serdeConstants
operator|.
name|CHAR_TYPE_NAME
argument_list|)
expr_stmt|;
name|CONVERSION_FUNCTION_TEXT_MAP
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_VARCHAR
argument_list|,
name|serdeConstants
operator|.
name|VARCHAR_TYPE_NAME
argument_list|)
expr_stmt|;
name|CONVERSION_FUNCTION_TEXT_MAP
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_BINARY
argument_list|,
name|serdeConstants
operator|.
name|BINARY_TYPE_NAME
argument_list|)
expr_stmt|;
name|CONVERSION_FUNCTION_TEXT_MAP
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_DATE
argument_list|,
name|serdeConstants
operator|.
name|DATE_TYPE_NAME
argument_list|)
expr_stmt|;
name|CONVERSION_FUNCTION_TEXT_MAP
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_TIMESTAMP
argument_list|,
name|serdeConstants
operator|.
name|TIMESTAMP_TYPE_NAME
argument_list|)
expr_stmt|;
name|CONVERSION_FUNCTION_TEXT_MAP
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_TIMESTAMPLOCALTZ
argument_list|,
name|serdeConstants
operator|.
name|TIMESTAMPLOCALTZ_TYPE_NAME
argument_list|)
expr_stmt|;
name|CONVERSION_FUNCTION_TEXT_MAP
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_INTERVAL_YEAR_MONTH
argument_list|,
name|serdeConstants
operator|.
name|INTERVAL_YEAR_MONTH_TYPE_NAME
argument_list|)
expr_stmt|;
name|CONVERSION_FUNCTION_TEXT_MAP
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_INTERVAL_DAY_TIME
argument_list|,
name|serdeConstants
operator|.
name|INTERVAL_DAY_TIME_TYPE_NAME
argument_list|)
expr_stmt|;
name|CONVERSION_FUNCTION_TEXT_MAP
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_DECIMAL
argument_list|,
name|serdeConstants
operator|.
name|DECIMAL_TYPE_NAME
argument_list|)
expr_stmt|;
name|WINDOWING_TOKENS
operator|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|WINDOWING_TOKENS
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|KW_OVER
argument_list|)
expr_stmt|;
name|WINDOWING_TOKENS
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|TOK_PARTITIONINGSPEC
argument_list|)
expr_stmt|;
name|WINDOWING_TOKENS
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|TOK_DISTRIBUTEBY
argument_list|)
expr_stmt|;
name|WINDOWING_TOKENS
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|TOK_SORTBY
argument_list|)
expr_stmt|;
name|WINDOWING_TOKENS
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|TOK_CLUSTERBY
argument_list|)
expr_stmt|;
name|WINDOWING_TOKENS
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|TOK_WINDOWSPEC
argument_list|)
expr_stmt|;
name|WINDOWING_TOKENS
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|TOK_WINDOWRANGE
argument_list|)
expr_stmt|;
name|WINDOWING_TOKENS
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|TOK_WINDOWVALUES
argument_list|)
expr_stmt|;
name|WINDOWING_TOKENS
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|KW_UNBOUNDED
argument_list|)
expr_stmt|;
name|WINDOWING_TOKENS
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|KW_PRECEDING
argument_list|)
expr_stmt|;
name|WINDOWING_TOKENS
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|KW_FOLLOWING
argument_list|)
expr_stmt|;
name|WINDOWING_TOKENS
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|KW_CURRENT
argument_list|)
expr_stmt|;
name|WINDOWING_TOKENS
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|TOK_TABSORTCOLNAMEASC
argument_list|)
expr_stmt|;
name|WINDOWING_TOKENS
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|TOK_TABSORTCOLNAMEDESC
argument_list|)
expr_stmt|;
name|WINDOWING_TOKENS
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|TOK_NULLS_FIRST
argument_list|)
expr_stmt|;
name|WINDOWING_TOKENS
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|TOK_NULLS_LAST
argument_list|)
expr_stmt|;
block|}
comment|/**    * Factory that will be used to create the different expressions.    */
specifier|protected
specifier|final
name|ExprFactory
argument_list|<
name|T
argument_list|>
name|exprFactory
decl_stmt|;
specifier|protected
name|TypeCheckProcFactory
parameter_list|(
name|ExprFactory
argument_list|<
name|T
argument_list|>
name|exprFactory
parameter_list|)
block|{
name|this
operator|.
name|exprFactory
operator|=
name|exprFactory
expr_stmt|;
block|}
specifier|protected
name|Map
argument_list|<
name|ASTNode
argument_list|,
name|T
argument_list|>
name|genExprNode
parameter_list|(
name|ASTNode
name|expr
parameter_list|,
name|TypeCheckCtx
name|tcCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// Create the walker, the rules dispatcher and the context.
comment|// create a walker which walks the tree in a DFS manner while maintaining
comment|// the operator stack. The dispatcher
comment|// generates the plan from the operator tree
name|SetMultimap
argument_list|<
name|Integer
argument_list|,
name|SemanticNodeProcessor
argument_list|>
name|astNodeToProcessor
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_NULL
argument_list|,
name|getNullExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|Number
argument_list|,
name|getNumExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|IntegralLiteral
argument_list|,
name|getNumExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|NumberLiteral
argument_list|,
name|getNumExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|Identifier
argument_list|,
name|getStrExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|StringLiteral
argument_list|,
name|getStrExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_CHARSETLITERAL
argument_list|,
name|getStrExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_STRINGLITERALSEQUENCE
argument_list|,
name|getStrExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|KW_IF
argument_list|,
name|getStrExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|KW_CASE
argument_list|,
name|getStrExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|KW_WHEN
argument_list|,
name|getStrExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|KW_IN
argument_list|,
name|getStrExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|KW_ARRAY
argument_list|,
name|getStrExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|KW_MAP
argument_list|,
name|getStrExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|KW_STRUCT
argument_list|,
name|getStrExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|KW_EXISTS
argument_list|,
name|getStrExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_SUBQUERY_OP_NOTIN
argument_list|,
name|getStrExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|KW_TRUE
argument_list|,
name|getBoolExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|KW_FALSE
argument_list|,
name|getBoolExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_DATELITERAL
argument_list|,
name|getDateTimeExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_TIMESTAMPLITERAL
argument_list|,
name|getDateTimeExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_TIMESTAMPLOCALTZLITERAL
argument_list|,
name|getDateTimeExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_INTERVAL_YEAR_MONTH_LITERAL
argument_list|,
name|getIntervalExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_INTERVAL_DAY_TIME_LITERAL
argument_list|,
name|getIntervalExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_INTERVAL_YEAR_LITERAL
argument_list|,
name|getIntervalExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_INTERVAL_MONTH_LITERAL
argument_list|,
name|getIntervalExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_INTERVAL_DAY_LITERAL
argument_list|,
name|getIntervalExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_INTERVAL_HOUR_LITERAL
argument_list|,
name|getIntervalExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_INTERVAL_MINUTE_LITERAL
argument_list|,
name|getIntervalExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_INTERVAL_SECOND_LITERAL
argument_list|,
name|getIntervalExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_TABLE_OR_COL
argument_list|,
name|getColumnExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|astNodeToProcessor
operator|.
name|put
argument_list|(
name|HiveParser
operator|.
name|TOK_SUBQUERY_EXPR
argument_list|,
name|getSubQueryExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
comment|// The dispatcher fires the processor corresponding to the closest matching
comment|// rule and passes the context along
name|SemanticDispatcher
name|disp
init|=
operator|new
name|CostLessRuleDispatcher
argument_list|(
name|getDefaultExprProcessor
argument_list|()
argument_list|,
name|astNodeToProcessor
argument_list|,
name|tcCtx
argument_list|)
decl_stmt|;
name|SemanticGraphWalker
name|ogw
init|=
operator|new
name|SubqueryExpressionWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
comment|// Create a list of top nodes
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
name|Lists
operator|.
expr|<
name|Node
operator|>
name|newArrayList
argument_list|(
name|expr
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|nodeOutputs
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
name|nodeOutputs
argument_list|)
expr_stmt|;
return|return
name|convert
argument_list|(
name|nodeOutputs
argument_list|)
return|;
block|}
comment|// temporary type-safe casting
specifier|protected
name|Map
argument_list|<
name|ASTNode
argument_list|,
name|T
argument_list|>
name|convert
parameter_list|(
name|Map
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|outputs
parameter_list|)
block|{
name|Map
argument_list|<
name|ASTNode
argument_list|,
name|T
argument_list|>
name|converted
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|outputs
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|instanceof
name|ASTNode
operator|&&
operator|(
name|entry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|||
name|exprFactory
operator|.
name|isExprInstance
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|converted
operator|.
name|put
argument_list|(
operator|(
name|ASTNode
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|T
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid type entry "
operator|+
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|converted
return|;
block|}
comment|/**    * Processor for processing NULL expression.    */
specifier|public
class|class
name|NullExprProcessor
implements|implements
name|SemanticNodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TypeCheckCtx
name|ctx
init|=
operator|(
name|TypeCheckCtx
operator|)
name|procCtx
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|T
name|desc
init|=
name|processGByExpr
argument_list|(
name|nd
argument_list|,
name|procCtx
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
return|return
name|desc
return|;
block|}
return|return
name|exprFactory
operator|.
name|createNullConstantExpr
argument_list|()
return|;
block|}
block|}
comment|/**    * Factory method to get NullExprProcessor.    *    * @return NullExprProcessor.    */
specifier|protected
name|NullExprProcessor
name|getNullExprProcessor
parameter_list|()
block|{
return|return
operator|new
name|NullExprProcessor
argument_list|()
return|;
block|}
comment|/**    * Processor for processing numeric constants.    */
specifier|public
class|class
name|NumExprProcessor
implements|implements
name|SemanticNodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TypeCheckCtx
name|ctx
init|=
operator|(
name|TypeCheckCtx
operator|)
name|procCtx
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|T
name|desc
init|=
name|processGByExpr
argument_list|(
name|nd
argument_list|,
name|procCtx
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
return|return
name|desc
return|;
block|}
name|T
name|result
init|=
literal|null
decl_stmt|;
name|ASTNode
name|expr
init|=
operator|(
name|ASTNode
operator|)
name|nd
decl_stmt|;
try|try
block|{
if|if
condition|(
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"L"
argument_list|)
condition|)
block|{
comment|// Literal bigint.
name|result
operator|=
name|exprFactory
operator|.
name|createBigintConstantExpr
argument_list|(
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"S"
argument_list|)
condition|)
block|{
comment|// Literal smallint.
name|result
operator|=
name|exprFactory
operator|.
name|createSmallintConstantExpr
argument_list|(
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"Y"
argument_list|)
condition|)
block|{
comment|// Literal tinyint.
name|result
operator|=
name|exprFactory
operator|.
name|createTinyintConstantExpr
argument_list|(
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"BD"
argument_list|)
condition|)
block|{
comment|// Literal decimal
name|result
operator|=
name|exprFactory
operator|.
name|createDecimalConstantExpr
argument_list|(
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"F"
argument_list|)
condition|)
block|{
comment|// Literal float.
name|result
operator|=
name|exprFactory
operator|.
name|createFloatConstantExpr
argument_list|(
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"D"
argument_list|)
condition|)
block|{
comment|// Literal double.
name|result
operator|=
name|exprFactory
operator|.
name|createDoubleConstantExpr
argument_list|(
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Default behavior
name|result
operator|=
name|exprFactory
operator|.
name|createConstantExpr
argument_list|(
name|expr
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// do nothing here, we will throw an exception in the following block
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ASTErrorUtils
operator|.
name|getMsg
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_NUMERICAL_CONSTANT
operator|.
name|getMsg
argument_list|()
argument_list|,
name|expr
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
block|}
comment|/**    * Factory method to get NumExprProcessor.    *    * @return NumExprProcessor.    */
specifier|protected
name|NumExprProcessor
name|getNumExprProcessor
parameter_list|()
block|{
return|return
operator|new
name|NumExprProcessor
argument_list|()
return|;
block|}
comment|/**    * Processor for processing string constants.    */
specifier|public
class|class
name|StrExprProcessor
implements|implements
name|SemanticNodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TypeCheckCtx
name|ctx
init|=
operator|(
name|TypeCheckCtx
operator|)
name|procCtx
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|T
name|desc
init|=
name|processGByExpr
argument_list|(
name|nd
argument_list|,
name|procCtx
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
return|return
name|desc
return|;
block|}
name|ASTNode
name|expr
init|=
operator|(
name|ASTNode
operator|)
name|nd
decl_stmt|;
name|String
name|str
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|expr
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|StringLiteral
case|:
name|str
operator|=
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
name|expr
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_STRINGLITERALSEQUENCE
case|:
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|expr
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|BaseSemanticAnalyzer
operator|.
name|unescapeSQLString
argument_list|(
operator|(
operator|(
name|ASTNode
operator|)
name|n
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|str
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_CHARSETLITERAL
case|:
name|str
operator|=
name|BaseSemanticAnalyzer
operator|.
name|charSetString
argument_list|(
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|,
name|expr
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// HiveParser.identifier | HiveParse.KW_IF | HiveParse.KW_LEFT |
comment|// HiveParse.KW_RIGHT
name|str
operator|=
name|BaseSemanticAnalyzer
operator|.
name|unescapeIdentifier
argument_list|(
name|expr
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|exprFactory
operator|.
name|createStringConstantExpr
argument_list|(
name|str
argument_list|)
return|;
block|}
block|}
comment|/**    * Factory method to get StrExprProcessor.    *    * @return StrExprProcessor.    */
specifier|protected
name|StrExprProcessor
name|getStrExprProcessor
parameter_list|()
block|{
return|return
operator|new
name|StrExprProcessor
argument_list|()
return|;
block|}
comment|/**    * Processor for boolean constants.    */
specifier|public
class|class
name|BoolExprProcessor
implements|implements
name|SemanticNodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TypeCheckCtx
name|ctx
init|=
operator|(
name|TypeCheckCtx
operator|)
name|procCtx
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|T
name|desc
init|=
name|processGByExpr
argument_list|(
name|nd
argument_list|,
name|procCtx
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
return|return
name|desc
return|;
block|}
name|ASTNode
name|expr
init|=
operator|(
name|ASTNode
operator|)
name|nd
decl_stmt|;
name|String
name|bool
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|expr
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|KW_TRUE
case|:
name|bool
operator|=
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|KW_FALSE
case|:
name|bool
operator|=
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
default|default:
assert|assert
literal|false
assert|;
block|}
return|return
name|exprFactory
operator|.
name|createBooleanConstantExpr
argument_list|(
name|bool
argument_list|)
return|;
block|}
block|}
comment|/**    * Factory method to get BoolExprProcessor.    *    * @return BoolExprProcessor.    */
specifier|protected
name|BoolExprProcessor
name|getBoolExprProcessor
parameter_list|()
block|{
return|return
operator|new
name|BoolExprProcessor
argument_list|()
return|;
block|}
comment|/**    * Processor for date constants.    */
specifier|public
class|class
name|DateTimeExprProcessor
implements|implements
name|SemanticNodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TypeCheckCtx
name|ctx
init|=
operator|(
name|TypeCheckCtx
operator|)
name|procCtx
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|T
name|desc
init|=
name|processGByExpr
argument_list|(
name|nd
argument_list|,
name|procCtx
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
return|return
name|desc
return|;
block|}
name|ASTNode
name|expr
init|=
operator|(
name|ASTNode
operator|)
name|nd
decl_stmt|;
name|String
name|timeString
init|=
name|BaseSemanticAnalyzer
operator|.
name|stripQuotes
argument_list|(
name|expr
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
comment|// Get the string value and convert to a Date value.
try|try
block|{
if|if
condition|(
name|expr
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_DATELITERAL
condition|)
block|{
return|return
name|exprFactory
operator|.
name|createDateConstantExpr
argument_list|(
name|timeString
argument_list|)
return|;
block|}
if|if
condition|(
name|expr
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TIMESTAMPLITERAL
condition|)
block|{
return|return
name|exprFactory
operator|.
name|createTimestampConstantExpr
argument_list|(
name|timeString
argument_list|)
return|;
block|}
if|if
condition|(
name|expr
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TIMESTAMPLOCALTZLITERAL
condition|)
block|{
name|HiveConf
name|conf
decl_stmt|;
try|try
block|{
name|conf
operator|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|exprFactory
operator|.
name|createTimestampLocalTimeZoneConstantExpr
argument_list|(
name|timeString
argument_list|,
name|conf
operator|.
name|getLocalTimeZone
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid time literal type "
operator|+
name|expr
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Unable to convert time literal '"
operator|+
name|timeString
operator|+
literal|"' to time value."
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Factory method to get DateExprProcessor.    *    * @return DateExprProcessor.    */
specifier|protected
name|DateTimeExprProcessor
name|getDateTimeExprProcessor
parameter_list|()
block|{
return|return
operator|new
name|DateTimeExprProcessor
argument_list|()
return|;
block|}
comment|/**    * Processor for interval constants.    */
specifier|public
class|class
name|IntervalExprProcessor
implements|implements
name|SemanticNodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TypeCheckCtx
name|ctx
init|=
operator|(
name|TypeCheckCtx
operator|)
name|procCtx
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|T
name|desc
init|=
name|processGByExpr
argument_list|(
name|nd
argument_list|,
name|procCtx
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
return|return
name|desc
return|;
block|}
name|ASTNode
name|expr
init|=
operator|(
name|ASTNode
operator|)
name|nd
decl_stmt|;
name|String
name|intervalString
init|=
name|BaseSemanticAnalyzer
operator|.
name|stripQuotes
argument_list|(
name|expr
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
comment|// Get the string value and convert to a Interval value.
try|try
block|{
switch|switch
condition|(
name|expr
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|TOK_INTERVAL_YEAR_MONTH_LITERAL
case|:
return|return
name|exprFactory
operator|.
name|createIntervalYearMonthConstantExpr
argument_list|(
name|intervalString
argument_list|)
return|;
case|case
name|HiveParser
operator|.
name|TOK_INTERVAL_DAY_TIME_LITERAL
case|:
return|return
name|exprFactory
operator|.
name|createIntervalDayTimeConstantExpr
argument_list|(
name|intervalString
argument_list|)
return|;
case|case
name|HiveParser
operator|.
name|TOK_INTERVAL_YEAR_LITERAL
case|:
return|return
name|exprFactory
operator|.
name|createIntervalYearConstantExpr
argument_list|(
name|intervalString
argument_list|)
return|;
case|case
name|HiveParser
operator|.
name|TOK_INTERVAL_MONTH_LITERAL
case|:
return|return
name|exprFactory
operator|.
name|createIntervalMonthConstantExpr
argument_list|(
name|intervalString
argument_list|)
return|;
case|case
name|HiveParser
operator|.
name|TOK_INTERVAL_DAY_LITERAL
case|:
return|return
name|exprFactory
operator|.
name|createIntervalDayConstantExpr
argument_list|(
name|intervalString
argument_list|)
return|;
case|case
name|HiveParser
operator|.
name|TOK_INTERVAL_HOUR_LITERAL
case|:
return|return
name|exprFactory
operator|.
name|createIntervalHourConstantExpr
argument_list|(
name|intervalString
argument_list|)
return|;
case|case
name|HiveParser
operator|.
name|TOK_INTERVAL_MINUTE_LITERAL
case|:
return|return
name|exprFactory
operator|.
name|createIntervalMinuteConstantExpr
argument_list|(
name|intervalString
argument_list|)
return|;
case|case
name|HiveParser
operator|.
name|TOK_INTERVAL_SECOND_LITERAL
case|:
return|return
name|exprFactory
operator|.
name|createIntervalSecondConstantExpr
argument_list|(
name|intervalString
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid time literal type "
operator|+
name|expr
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Unable to convert interval literal '"
operator|+
name|intervalString
operator|+
literal|"' to interval value."
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Factory method to get IntervalExprProcessor.    *    * @return IntervalExprProcessor.    */
specifier|protected
name|IntervalExprProcessor
name|getIntervalExprProcessor
parameter_list|()
block|{
return|return
operator|new
name|IntervalExprProcessor
argument_list|()
return|;
block|}
comment|/**    * Processor for table columns.    */
specifier|public
class|class
name|ColumnExprProcessor
implements|implements
name|SemanticNodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TypeCheckCtx
name|ctx
init|=
operator|(
name|TypeCheckCtx
operator|)
name|procCtx
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|T
name|desc
init|=
name|processGByExpr
argument_list|(
name|nd
argument_list|,
name|procCtx
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
return|return
name|desc
return|;
block|}
name|ASTNode
name|expr
init|=
operator|(
name|ASTNode
operator|)
name|nd
decl_stmt|;
name|ASTNode
name|parent
init|=
name|stack
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
operator|(
name|ASTNode
operator|)
name|stack
operator|.
name|get
argument_list|(
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|)
else|:
literal|null
decl_stmt|;
name|RowResolver
name|input
init|=
name|ctx
operator|.
name|getInputRR
argument_list|()
decl_stmt|;
if|if
condition|(
name|input
operator|==
literal|null
condition|)
block|{
name|ctx
operator|.
name|setError
argument_list|(
name|ASTErrorUtils
operator|.
name|getMsg
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_COLUMN
operator|.
name|getMsg
argument_list|()
argument_list|,
name|expr
argument_list|)
argument_list|,
name|expr
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|expr
operator|.
name|getType
argument_list|()
operator|!=
name|HiveParser
operator|.
name|TOK_TABLE_OR_COL
condition|)
block|{
name|ctx
operator|.
name|setError
argument_list|(
name|ASTErrorUtils
operator|.
name|getMsg
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_COLUMN
operator|.
name|getMsg
argument_list|()
argument_list|,
name|expr
argument_list|)
argument_list|,
name|expr
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
assert|assert
operator|(
name|expr
operator|.
name|getChildCount
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|String
name|tableOrCol
init|=
name|BaseSemanticAnalyzer
operator|.
name|unescapeIdentifier
argument_list|(
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isTableAlias
init|=
name|input
operator|.
name|hasTableAlias
argument_list|(
name|tableOrCol
argument_list|)
decl_stmt|;
name|ColumnInfo
name|colInfo
init|=
literal|null
decl_stmt|;
try|try
block|{
name|colInfo
operator|=
name|input
operator|.
name|get
argument_list|(
literal|null
argument_list|,
name|tableOrCol
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|semanticException
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isTableAlias
operator|||
name|parent
operator|==
literal|null
operator|||
name|parent
operator|.
name|getType
argument_list|()
operator|!=
name|HiveParser
operator|.
name|DOT
condition|)
block|{
throw|throw
name|semanticException
throw|;
block|}
block|}
comment|// try outer row resolver
if|if
condition|(
name|ctx
operator|.
name|getOuterRR
argument_list|()
operator|!=
literal|null
operator|&&
name|colInfo
operator|==
literal|null
operator|&&
operator|!
name|isTableAlias
condition|)
block|{
name|RowResolver
name|outerRR
init|=
name|ctx
operator|.
name|getOuterRR
argument_list|()
decl_stmt|;
name|isTableAlias
operator|=
name|outerRR
operator|.
name|hasTableAlias
argument_list|(
name|tableOrCol
argument_list|)
expr_stmt|;
name|colInfo
operator|=
name|outerRR
operator|.
name|get
argument_list|(
literal|null
argument_list|,
name|tableOrCol
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isTableAlias
condition|)
block|{
if|if
condition|(
name|colInfo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|parent
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|DOT
condition|)
block|{
comment|// It's a table alias.
return|return
literal|null
return|;
block|}
comment|// It's a column.
return|return
name|exprFactory
operator|.
name|toExpr
argument_list|(
name|colInfo
argument_list|)
return|;
block|}
else|else
block|{
comment|// It's a table alias.
comment|// We will process that later in DOT.
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|colInfo
operator|==
literal|null
condition|)
block|{
comment|// It's not a column or a table alias.
if|if
condition|(
name|input
operator|.
name|getIsExprResolver
argument_list|()
condition|)
block|{
name|ASTNode
name|exprNode
init|=
name|expr
decl_stmt|;
if|if
condition|(
operator|!
name|stack
operator|.
name|empty
argument_list|()
condition|)
block|{
name|ASTNode
name|tmp
init|=
operator|(
name|ASTNode
operator|)
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|stack
operator|.
name|empty
argument_list|()
condition|)
block|{
name|exprNode
operator|=
operator|(
name|ASTNode
operator|)
name|stack
operator|.
name|peek
argument_list|()
expr_stmt|;
block|}
name|stack
operator|.
name|push
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|setError
argument_list|(
name|ASTErrorUtils
operator|.
name|getMsg
argument_list|(
name|ErrorMsg
operator|.
name|NON_KEY_EXPR_IN_GROUPBY
operator|.
name|getMsg
argument_list|()
argument_list|,
name|exprNode
argument_list|)
argument_list|,
name|expr
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|possibleColumnNames
init|=
name|input
operator|.
name|getReferenceableColumnAliases
argument_list|(
name|tableOrCol
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|reason
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(possible column names are: %s)"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|possibleColumnNames
argument_list|,
literal|", "
argument_list|)
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|setError
argument_list|(
name|ASTErrorUtils
operator|.
name|getMsg
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_TABLE_OR_COLUMN
operator|.
name|getMsg
argument_list|()
argument_list|,
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|reason
argument_list|)
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_TABLE_OR_COLUMN
operator|.
name|toString
argument_list|()
operator|+
literal|":"
operator|+
name|input
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
comment|// It's a column.
return|return
name|exprFactory
operator|.
name|toExpr
argument_list|(
name|colInfo
argument_list|)
return|;
block|}
block|}
block|}
block|}
comment|/**    * Factory method to get ColumnExprProcessor.    *    * @return ColumnExprProcessor.    */
specifier|protected
name|ColumnExprProcessor
name|getColumnExprProcessor
parameter_list|()
block|{
return|return
operator|new
name|ColumnExprProcessor
argument_list|()
return|;
block|}
comment|/**    * The default processor for typechecking.    */
specifier|public
class|class
name|DefaultExprProcessor
implements|implements
name|SemanticNodeProcessor
block|{
specifier|protected
name|boolean
name|isRedundantConversionFunction
parameter_list|(
name|ASTNode
name|expr
parameter_list|,
name|boolean
name|isFunction
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|children
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isFunction
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// conversion functions take a single parameter
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|funcText
init|=
name|CONVERSION_FUNCTION_TEXT_MAP
operator|.
name|get
argument_list|(
operator|(
operator|(
name|ASTNode
operator|)
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
comment|// not a conversion function
if|if
condition|(
name|funcText
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// return true when the child type and the conversion target type is the
comment|// same
return|return
name|exprFactory
operator|.
name|getTypeInfo
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getTypeName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|funcText
argument_list|)
return|;
block|}
comment|/**      * This function create an ExprNodeDesc for a UDF function given the      * children (arguments). It will insert implicit type conversion functions      * if necessary.      *      * @throws UDFArgumentException      */
specifier|public
name|T
name|getFuncExprNodeDescWithUdfData
parameter_list|(
name|String
name|udfName
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|,
name|T
modifier|...
name|children
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|FunctionInfo
name|fi
decl_stmt|;
try|try
block|{
name|fi
operator|=
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
name|udfName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|fi
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
name|udfName
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
name|GenericUDF
name|genericUDF
init|=
name|fi
operator|.
name|getGenericUDF
argument_list|()
decl_stmt|;
if|if
condition|(
name|genericUDF
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
name|udfName
operator|+
literal|" is an aggregation function or a table function."
argument_list|)
throw|;
block|}
comment|// Add udfData to UDF if necessary
if|if
condition|(
name|typeInfo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|genericUDF
operator|instanceof
name|SettableUDF
condition|)
block|{
operator|(
operator|(
name|SettableUDF
operator|)
name|genericUDF
operator|)
operator|.
name|setTypeInfo
argument_list|(
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|T
argument_list|>
name|childrenList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|children
operator|.
name|length
argument_list|)
decl_stmt|;
name|childrenList
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|children
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|exprFactory
operator|.
name|createFuncCallExpr
argument_list|(
name|genericUDF
argument_list|,
literal|null
argument_list|,
name|childrenList
argument_list|)
return|;
block|}
specifier|public
name|T
name|getFuncExprNodeDesc
parameter_list|(
name|String
name|udfName
parameter_list|,
name|T
modifier|...
name|children
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
return|return
name|getFuncExprNodeDescWithUdfData
argument_list|(
name|udfName
argument_list|,
literal|null
argument_list|,
name|children
argument_list|)
return|;
block|}
comment|/**      * @param column  column expression to convert      * @param tableFieldTypeInfo TypeInfo to convert to      * @return Expression converting column to the type specified by tableFieldTypeInfo      */
specifier|public
name|T
name|createConversionCast
parameter_list|(
name|T
name|column
parameter_list|,
name|PrimitiveTypeInfo
name|tableFieldTypeInfo
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// Get base type, since type string may be parameterized
name|String
name|baseType
init|=
name|TypeInfoUtils
operator|.
name|getBaseName
argument_list|(
name|tableFieldTypeInfo
operator|.
name|getTypeName
argument_list|()
argument_list|)
decl_stmt|;
comment|// If the type cast UDF is for a parameterized type, then it should implement
comment|// the SettableUDF interface so that we can pass in the params.
comment|// Not sure if this is the cleanest solution, but there does need to be a way
comment|// to provide the type params to the type cast.
return|return
name|getDefaultExprProcessor
argument_list|()
operator|.
name|getFuncExprNodeDescWithUdfData
argument_list|(
name|baseType
argument_list|,
name|tableFieldTypeInfo
argument_list|,
name|column
argument_list|)
return|;
block|}
specifier|protected
name|void
name|validateUDF
parameter_list|(
name|ASTNode
name|expr
parameter_list|,
name|boolean
name|isFunction
parameter_list|,
name|TypeCheckCtx
name|ctx
parameter_list|,
name|FunctionInfo
name|fi
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|children
parameter_list|,
name|GenericUDF
name|genericUDF
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// Detect UDTF's in nested SELECT, GROUP BY, etc as they aren't
comment|// supported
if|if
condition|(
name|fi
operator|.
name|getGenericUDTF
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|UDTF_INVALID_LOCATION
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
comment|// UDAF in filter condition, group-by caluse, param of funtion, etc.
if|if
condition|(
name|fi
operator|.
name|getGenericUDAFResolver
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isFunction
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ASTErrorUtils
operator|.
name|getMsg
argument_list|(
name|ErrorMsg
operator|.
name|UDAF_INVALID_LOCATION
operator|.
name|getMsg
argument_list|()
argument_list|,
operator|(
name|ASTNode
operator|)
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ASTErrorUtils
operator|.
name|getMsg
argument_list|(
name|ErrorMsg
operator|.
name|UDAF_INVALID_LOCATION
operator|.
name|getMsg
argument_list|()
argument_list|,
name|expr
argument_list|)
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|ctx
operator|.
name|getAllowStatefulFunctions
argument_list|()
operator|&&
operator|(
name|genericUDF
operator|!=
literal|null
operator|)
condition|)
block|{
if|if
condition|(
name|FunctionRegistry
operator|.
name|isStateful
argument_list|(
name|genericUDF
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|UDF_STATEFUL_INVALID_LOCATION
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
name|void
name|insertCast
parameter_list|(
name|String
name|funcText
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|children
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// substring, concat UDFs expect first argument as string. Therefore this method inserts explicit cast
comment|// to cast the first operand to string
if|if
condition|(
name|funcText
operator|.
name|equals
argument_list|(
literal|"substring"
argument_list|)
operator|||
name|funcText
operator|.
name|equals
argument_list|(
literal|"concat"
argument_list|)
condition|)
block|{
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|isStringType
argument_list|(
name|exprFactory
operator|.
name|getTypeInfo
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|T
name|newColumn
init|=
name|createConversionCast
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
decl_stmt|;
name|children
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|newColumn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|T
name|getXpathOrFuncExprNodeDesc
parameter_list|(
name|ASTNode
name|expr
parameter_list|,
name|boolean
name|isFunction
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|children
parameter_list|,
name|TypeCheckCtx
name|ctx
parameter_list|)
throws|throws
name|SemanticException
throws|,
name|UDFArgumentException
block|{
comment|// return the child directly if the conversion is redundant.
if|if
condition|(
name|isRedundantConversionFunction
argument_list|(
name|expr
argument_list|,
name|isFunction
argument_list|,
name|children
argument_list|)
condition|)
block|{
assert|assert
operator|(
name|children
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|!=
literal|null
operator|)
assert|;
return|return
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|String
name|funcText
init|=
name|getFunctionText
argument_list|(
name|expr
argument_list|,
name|isFunction
argument_list|)
decl_stmt|;
name|T
name|desc
decl_stmt|;
if|if
condition|(
name|funcText
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
comment|// "." : FIELD Expression
assert|assert
operator|(
name|children
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
comment|// Only allow constant field name for now
assert|assert
operator|(
name|exprFactory
operator|.
name|isConstantExpr
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
assert|;
name|T
name|object
init|=
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Calculate result TypeInfo
name|String
name|fieldNameString
init|=
name|exprFactory
operator|.
name|getConstantValue
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|TypeInfo
name|objectTypeInfo
init|=
name|exprFactory
operator|.
name|getTypeInfo
argument_list|(
name|object
argument_list|)
decl_stmt|;
comment|// Allow accessing a field of list element structs directly from a list
name|boolean
name|isList
init|=
operator|(
name|objectTypeInfo
operator|.
name|getCategory
argument_list|()
operator|==
name|ObjectInspector
operator|.
name|Category
operator|.
name|LIST
operator|)
decl_stmt|;
if|if
condition|(
name|isList
condition|)
block|{
name|objectTypeInfo
operator|=
operator|(
operator|(
name|ListTypeInfo
operator|)
name|objectTypeInfo
operator|)
operator|.
name|getListElementTypeInfo
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|objectTypeInfo
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|STRUCT
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ASTErrorUtils
operator|.
name|getMsg
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_DOT
operator|.
name|getMsg
argument_list|()
argument_list|,
name|expr
argument_list|)
argument_list|)
throw|;
block|}
name|TypeInfo
name|t
init|=
operator|(
operator|(
name|StructTypeInfo
operator|)
name|objectTypeInfo
operator|)
operator|.
name|getStructFieldTypeInfo
argument_list|(
name|fieldNameString
argument_list|)
decl_stmt|;
if|if
condition|(
name|isList
condition|)
block|{
name|t
operator|=
name|TypeInfoFactory
operator|.
name|getListTypeInfo
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|desc
operator|=
name|exprFactory
operator|.
name|createNestedColumnRefExpr
argument_list|(
name|t
argument_list|,
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|fieldNameString
argument_list|,
name|isList
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|funcText
operator|.
name|equals
argument_list|(
literal|"["
argument_list|)
condition|)
block|{
comment|// "[]" : LSQUARE/INDEX Expression
if|if
condition|(
operator|!
name|ctx
operator|.
name|getallowIndexExpr
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ASTErrorUtils
operator|.
name|getMsg
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_FUNCTION
operator|.
name|getMsg
argument_list|()
argument_list|,
name|expr
argument_list|)
argument_list|)
throw|;
block|}
assert|assert
operator|(
name|children
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
comment|// Check whether this is a list or a map
name|TypeInfo
name|myt
init|=
name|exprFactory
operator|.
name|getTypeInfo
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|myt
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|LIST
condition|)
block|{
comment|// Only allow integer index for now
if|if
condition|(
operator|!
name|TypeInfoUtils
operator|.
name|implicitConvertible
argument_list|(
name|exprFactory
operator|.
name|getTypeInfo
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|SemanticAnalyzer
operator|.
name|generateErrorMessage
argument_list|(
name|expr
argument_list|,
name|ErrorMsg
operator|.
name|INVALID_ARRAYINDEX_TYPE
operator|.
name|getMsg
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|// Calculate TypeInfo
name|TypeInfo
name|t
init|=
operator|(
operator|(
name|ListTypeInfo
operator|)
name|myt
operator|)
operator|.
name|getListElementTypeInfo
argument_list|()
decl_stmt|;
name|desc
operator|=
name|exprFactory
operator|.
name|createFuncCallExpr
argument_list|(
name|t
argument_list|,
name|FunctionRegistry
operator|.
name|getGenericUDFForIndex
argument_list|()
argument_list|,
name|children
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|myt
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|MAP
condition|)
block|{
if|if
condition|(
operator|!
name|TypeInfoUtils
operator|.
name|implicitConvertible
argument_list|(
name|exprFactory
operator|.
name|getTypeInfo
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
operator|(
operator|(
name|MapTypeInfo
operator|)
name|myt
operator|)
operator|.
name|getMapKeyTypeInfo
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ASTErrorUtils
operator|.
name|getMsg
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_MAPINDEX_TYPE
operator|.
name|getMsg
argument_list|()
argument_list|,
name|expr
argument_list|)
argument_list|)
throw|;
block|}
comment|// Calculate TypeInfo
name|TypeInfo
name|t
init|=
operator|(
operator|(
name|MapTypeInfo
operator|)
name|myt
operator|)
operator|.
name|getMapValueTypeInfo
argument_list|()
decl_stmt|;
name|desc
operator|=
name|exprFactory
operator|.
name|createFuncCallExpr
argument_list|(
name|t
argument_list|,
name|FunctionRegistry
operator|.
name|getGenericUDFForIndex
argument_list|()
argument_list|,
name|children
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ASTErrorUtils
operator|.
name|getMsg
argument_list|(
name|ErrorMsg
operator|.
name|NON_COLLECTION_TYPE
operator|.
name|getMsg
argument_list|()
argument_list|,
name|expr
argument_list|,
name|myt
operator|.
name|getTypeName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// other operators or functions
name|FunctionInfo
name|fi
init|=
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
name|funcText
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isFunction
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ASTErrorUtils
operator|.
name|getMsg
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_FUNCTION
operator|.
name|getMsg
argument_list|()
argument_list|,
operator|(
name|ASTNode
operator|)
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ASTErrorUtils
operator|.
name|getMsg
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_FUNCTION
operator|.
name|getMsg
argument_list|()
argument_list|,
name|expr
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|// getGenericUDF() actually clones the UDF. Just call it once and reuse.
name|GenericUDF
name|genericUDF
init|=
name|fi
operator|.
name|getGenericUDF
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fi
operator|.
name|isNative
argument_list|()
condition|)
block|{
name|ctx
operator|.
name|getUnparseTranslator
argument_list|()
operator|.
name|addIdentifierTranslation
argument_list|(
operator|(
name|ASTNode
operator|)
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Handle type casts that may contain type parameters
if|if
condition|(
name|isFunction
condition|)
block|{
name|ASTNode
name|funcNameNode
init|=
operator|(
name|ASTNode
operator|)
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|funcNameNode
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|TOK_CHAR
case|:
comment|// Add type params
name|CharTypeInfo
name|charTypeInfo
init|=
name|ParseUtils
operator|.
name|getCharTypeInfo
argument_list|(
name|funcNameNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|genericUDF
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|SettableUDF
operator|)
name|genericUDF
operator|)
operator|.
name|setTypeInfo
argument_list|(
name|charTypeInfo
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|HiveParser
operator|.
name|TOK_VARCHAR
case|:
name|VarcharTypeInfo
name|varcharTypeInfo
init|=
name|ParseUtils
operator|.
name|getVarcharTypeInfo
argument_list|(
name|funcNameNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|genericUDF
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|SettableUDF
operator|)
name|genericUDF
operator|)
operator|.
name|setTypeInfo
argument_list|(
name|varcharTypeInfo
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|HiveParser
operator|.
name|TOK_TIMESTAMPLOCALTZ
case|:
name|TimestampLocalTZTypeInfo
name|timestampLocalTZTypeInfo
init|=
operator|new
name|TimestampLocalTZTypeInfo
argument_list|()
decl_stmt|;
name|HiveConf
name|conf
decl_stmt|;
try|try
block|{
name|conf
operator|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|timestampLocalTZTypeInfo
operator|.
name|setTimeZone
argument_list|(
name|conf
operator|.
name|getLocalTimeZone
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|genericUDF
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|SettableUDF
operator|)
name|genericUDF
operator|)
operator|.
name|setTypeInfo
argument_list|(
name|timestampLocalTZTypeInfo
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|HiveParser
operator|.
name|TOK_DECIMAL
case|:
name|DecimalTypeInfo
name|decTypeInfo
init|=
name|ParseUtils
operator|.
name|getDecimalTypeTypeInfo
argument_list|(
name|funcNameNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|genericUDF
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|SettableUDF
operator|)
name|genericUDF
operator|)
operator|.
name|setTypeInfo
argument_list|(
name|decTypeInfo
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
comment|// Do nothing
break|break;
block|}
block|}
name|insertCast
argument_list|(
name|funcText
argument_list|,
name|children
argument_list|)
expr_stmt|;
name|validateUDF
argument_list|(
name|expr
argument_list|,
name|isFunction
argument_list|,
name|ctx
argument_list|,
name|fi
argument_list|,
name|children
argument_list|,
name|genericUDF
argument_list|)
expr_stmt|;
comment|// Try to infer the type of the constant only if there are two
comment|// nodes, one of them is column and the other is numeric const
if|if
condition|(
name|genericUDF
operator|instanceof
name|GenericUDFBaseCompare
operator|&&
name|children
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|&&
operator|(
operator|(
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ExprNodeConstantDesc
operator|&&
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|ExprNodeColumnDesc
operator|)
operator|||
operator|(
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ExprNodeColumnDesc
operator|&&
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|ExprNodeConstantDesc
operator|)
operator|)
condition|)
block|{
name|int
name|constIdx
init|=
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ExprNodeConstantDesc
condition|?
literal|0
else|:
literal|1
decl_stmt|;
name|T
name|constChild
init|=
name|children
operator|.
name|get
argument_list|(
name|constIdx
argument_list|)
decl_stmt|;
name|T
name|columnChild
init|=
name|children
operator|.
name|get
argument_list|(
literal|1
operator|-
name|constIdx
argument_list|)
decl_stmt|;
specifier|final
name|PrimitiveTypeInfo
name|colTypeInfo
init|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|exprFactory
operator|.
name|getTypeInfo
argument_list|(
name|columnChild
argument_list|)
operator|.
name|getTypeName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
name|T
name|newChild
init|=
name|interpretNodeAs
argument_list|(
name|colTypeInfo
argument_list|,
name|constChild
argument_list|)
decl_stmt|;
if|if
condition|(
name|newChild
operator|==
literal|null
condition|)
block|{
comment|// non-interpretable as target type...
comment|// TODO: all comparisons with null should result in null
if|if
condition|(
name|genericUDF
operator|instanceof
name|GenericUDFOPEqual
operator|&&
operator|!
operator|(
name|genericUDF
operator|instanceof
name|GenericUDFOPEqualNS
operator|)
condition|)
block|{
return|return
name|exprFactory
operator|.
name|createBooleanConstantExpr
argument_list|(
literal|null
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|children
operator|.
name|set
argument_list|(
name|constIdx
argument_list|,
name|newChild
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|genericUDF
operator|instanceof
name|GenericUDFIn
condition|)
block|{
name|T
name|columnDesc
init|=
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|outputOpList
init|=
name|children
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|children
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|inOperands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|outputOpList
argument_list|)
decl_stmt|;
name|outputOpList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|boolean
name|hasNullValue
init|=
literal|false
decl_stmt|;
for|for
control|(
name|T
name|oldChild
range|:
name|inOperands
control|)
block|{
if|if
condition|(
name|oldChild
operator|==
literal|null
condition|)
block|{
name|hasNullValue
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
name|T
name|newChild
init|=
name|interpretNodeAsStruct
argument_list|(
name|columnDesc
argument_list|,
name|oldChild
argument_list|)
decl_stmt|;
if|if
condition|(
name|newChild
operator|==
literal|null
condition|)
block|{
name|hasNullValue
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
name|outputOpList
operator|.
name|add
argument_list|(
name|newChild
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasNullValue
condition|)
block|{
name|T
name|nullConst
init|=
name|exprFactory
operator|.
name|createConstantExpr
argument_list|(
name|exprFactory
operator|.
name|getTypeInfo
argument_list|(
name|columnDesc
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputOpList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// we have found only null values...remove the IN ; it will be null all the time.
return|return
name|nullConst
return|;
block|}
name|outputOpList
operator|.
name|add
argument_list|(
name|nullConst
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ctx
operator|.
name|isCBOExecuted
argument_list|()
condition|)
block|{
name|HiveConf
name|conf
decl_stmt|;
try|try
block|{
name|conf
operator|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|<=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEOPT_TRANSFORM_IN_MAXNODES
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|orOperands
init|=
name|exprFactory
operator|.
name|rewriteINIntoORFuncCallExpr
argument_list|(
name|children
argument_list|)
decl_stmt|;
if|if
condition|(
name|orOperands
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|orOperands
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|orOperands
operator|.
name|add
argument_list|(
name|exprFactory
operator|.
name|createBooleanConstantExpr
argument_list|(
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|funcText
operator|=
literal|"or"
expr_stmt|;
name|genericUDF
operator|=
operator|new
name|GenericUDFOPOr
argument_list|()
expr_stmt|;
name|children
operator|.
name|clear
argument_list|()
expr_stmt|;
name|children
operator|.
name|addAll
argument_list|(
name|orOperands
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|genericUDF
operator|instanceof
name|GenericUDFOPOr
condition|)
block|{
comment|// flatten OR
name|List
argument_list|<
name|T
argument_list|>
name|childrenList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|children
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|T
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"void"
argument_list|)
operator|.
name|equals
argument_list|(
name|exprFactory
operator|.
name|getTypeInfo
argument_list|(
name|child
argument_list|)
argument_list|)
condition|)
block|{
name|child
operator|=
name|exprFactory
operator|.
name|setTypeInfo
argument_list|(
name|child
argument_list|,
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"boolean"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exprFactory
operator|.
name|isORFuncCallExpr
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|childrenList
operator|.
name|addAll
argument_list|(
name|exprFactory
operator|.
name|getExprChildren
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|childrenList
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
name|desc
operator|=
name|exprFactory
operator|.
name|createFuncCallExpr
argument_list|(
name|genericUDF
argument_list|,
name|funcText
argument_list|,
name|childrenList
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|genericUDF
operator|instanceof
name|GenericUDFOPAnd
condition|)
block|{
comment|// flatten AND
name|List
argument_list|<
name|T
argument_list|>
name|childrenList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|children
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|T
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"void"
argument_list|)
operator|.
name|equals
argument_list|(
name|exprFactory
operator|.
name|getTypeInfo
argument_list|(
name|child
argument_list|)
argument_list|)
condition|)
block|{
name|child
operator|=
name|exprFactory
operator|.
name|setTypeInfo
argument_list|(
name|child
argument_list|,
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"boolean"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exprFactory
operator|.
name|isANDFuncCallExpr
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|childrenList
operator|.
name|addAll
argument_list|(
name|exprFactory
operator|.
name|getExprChildren
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|childrenList
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
name|desc
operator|=
name|exprFactory
operator|.
name|createFuncCallExpr
argument_list|(
name|genericUDF
argument_list|,
name|funcText
argument_list|,
name|childrenList
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|isFoldExpr
argument_list|()
operator|&&
name|exprFactory
operator|.
name|canConvertCASEIntoCOALESCEFuncCallExpr
argument_list|(
name|genericUDF
argument_list|,
name|children
argument_list|)
condition|)
block|{
comment|// Rewrite CASE into COALESCE
name|desc
operator|=
name|exprFactory
operator|.
name|createFuncCallExpr
argument_list|(
operator|new
name|GenericUDFCoalesce
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|exprFactory
operator|.
name|createBooleanConstantExpr
argument_list|(
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|FALSE
operator|.
name|equals
argument_list|(
name|exprFactory
operator|.
name|getConstantValue
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|desc
operator|=
name|exprFactory
operator|.
name|createFuncCallExpr
argument_list|(
operator|new
name|GenericUDFOPNot
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|desc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|desc
operator|=
name|exprFactory
operator|.
name|createFuncCallExpr
argument_list|(
name|genericUDF
argument_list|,
name|funcText
argument_list|,
name|children
argument_list|)
expr_stmt|;
block|}
comment|// If the function is deterministic and the children are constants,
comment|// we try to fold the expression to remove e.g. cast on constant
if|if
condition|(
name|ctx
operator|.
name|isFoldExpr
argument_list|()
operator|&&
name|exprFactory
operator|.
name|isFuncCallExpr
argument_list|(
name|desc
argument_list|)
operator|&&
name|FunctionRegistry
operator|.
name|isConsistentWithinQuery
argument_list|(
name|genericUDF
argument_list|)
operator|&&
name|exprFactory
operator|.
name|isAllConstants
argument_list|(
name|children
argument_list|)
condition|)
block|{
name|T
name|constantExpr
init|=
name|exprFactory
operator|.
name|foldExpr
argument_list|(
name|desc
argument_list|)
decl_stmt|;
if|if
condition|(
name|constantExpr
operator|!=
literal|null
condition|)
block|{
name|desc
operator|=
name|constantExpr
expr_stmt|;
block|}
block|}
block|}
comment|// UDFOPPositive is a no-op.
comment|// However, we still create it, and then remove it here, to make sure we
comment|// only allow
comment|// "+" for numeric types.
if|if
condition|(
name|exprFactory
operator|.
name|isPOSITIVEFuncCallExpr
argument_list|(
name|desc
argument_list|)
condition|)
block|{
assert|assert
operator|(
name|exprFactory
operator|.
name|getExprChildren
argument_list|(
name|desc
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|desc
operator|=
name|exprFactory
operator|.
name|getExprChildren
argument_list|(
name|desc
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
assert|assert
operator|(
name|desc
operator|!=
literal|null
operator|)
assert|;
return|return
name|desc
return|;
block|}
comment|/**      * Interprets the given value as columnDesc if possible      */
specifier|private
name|T
name|interpretNodeAsStruct
parameter_list|(
name|T
name|columnDesc
parameter_list|,
name|T
name|valueDesc
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|exprFactory
operator|.
name|isColumnRefExpr
argument_list|(
name|columnDesc
argument_list|)
condition|)
block|{
specifier|final
name|PrimitiveTypeInfo
name|typeInfo
init|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|exprFactory
operator|.
name|getTypeInfo
argument_list|(
name|columnDesc
argument_list|)
operator|.
name|getTypeName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|interpretNodeAs
argument_list|(
name|typeInfo
argument_list|,
name|valueDesc
argument_list|)
return|;
block|}
if|if
condition|(
name|exprFactory
operator|.
name|isSTRUCTFuncCallExpr
argument_list|(
name|columnDesc
argument_list|)
operator|&&
name|exprFactory
operator|.
name|isConstantStruct
argument_list|(
name|valueDesc
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|columnChilds
init|=
name|exprFactory
operator|.
name|getExprChildren
argument_list|(
name|columnDesc
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|valueConstDesc
init|=
operator|(
name|ExprNodeConstantDesc
operator|)
name|valueDesc
decl_stmt|;
name|StructTypeInfo
name|structTypeInfo
init|=
operator|(
name|StructTypeInfo
operator|)
name|valueConstDesc
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|structFieldInfos
init|=
name|structTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|newStructFieldInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|columnChilds
operator|.
name|size
argument_list|()
operator|!=
name|structFieldInfos
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_STRUCT
operator|.
name|getMsg
argument_list|(
name|columnChilds
operator|+
literal|" and "
operator|+
name|structFieldInfos
argument_list|)
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|oldValues
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|valueConstDesc
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|newValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnChilds
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|newStructFieldInfos
operator|.
name|add
argument_list|(
name|exprFactory
operator|.
name|getTypeInfo
argument_list|(
name|columnChilds
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|newValue
init|=
name|exprFactory
operator|.
name|interpretConstantAsPrimitive
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|exprFactory
operator|.
name|getTypeInfo
argument_list|(
name|columnChilds
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|oldValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
operator|(
name|PrimitiveTypeInfo
operator|)
name|structFieldInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|newValues
operator|.
name|add
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
name|StructTypeInfo
name|sti
init|=
operator|new
name|StructTypeInfo
argument_list|()
decl_stmt|;
name|sti
operator|.
name|setAllStructFieldTypeInfos
argument_list|(
name|newStructFieldInfos
argument_list|)
expr_stmt|;
name|sti
operator|.
name|setAllStructFieldNames
argument_list|(
name|structTypeInfo
operator|.
name|getAllStructFieldNames
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exprFactory
operator|.
name|createConstantExpr
argument_list|(
name|sti
argument_list|,
name|newValues
argument_list|)
return|;
block|}
if|if
condition|(
name|exprFactory
operator|.
name|isSTRUCTFuncCallExpr
argument_list|(
name|columnDesc
argument_list|)
operator|&&
name|exprFactory
operator|.
name|isSTRUCTFuncCallExpr
argument_list|(
name|valueDesc
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|columnChilds
init|=
name|exprFactory
operator|.
name|getExprChildren
argument_list|(
name|columnDesc
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|valueChilds
init|=
name|exprFactory
operator|.
name|getExprChildren
argument_list|(
name|valueDesc
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnChilds
operator|.
name|size
argument_list|()
operator|!=
name|valueChilds
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_STRUCT
operator|.
name|getMsg
argument_list|(
name|columnChilds
operator|+
literal|" and "
operator|+
name|valueChilds
argument_list|)
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|T
argument_list|>
name|oldValueChilds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|valueChilds
argument_list|)
decl_stmt|;
name|valueChilds
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldValueChilds
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|T
name|newValue
init|=
name|interpretNodeAsStruct
argument_list|(
name|columnChilds
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|oldValueChilds
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|valueChilds
operator|.
name|add
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|valueDesc
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|protected
name|T
name|interpretNodeAs
parameter_list|(
name|PrimitiveTypeInfo
name|colTypeInfo
parameter_list|,
name|T
name|constChild
parameter_list|)
block|{
if|if
condition|(
name|exprFactory
operator|.
name|isConstantExpr
argument_list|(
name|constChild
argument_list|)
condition|)
block|{
comment|// Try to narrow type of constant
name|Object
name|constVal
init|=
name|exprFactory
operator|.
name|getConstantValue
argument_list|(
name|constChild
argument_list|)
decl_stmt|;
if|if
condition|(
name|constVal
operator|==
literal|null
condition|)
block|{
comment|// adjust type of null
return|return
name|exprFactory
operator|.
name|createConstantExpr
argument_list|(
name|colTypeInfo
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|Object
name|newConst
init|=
name|exprFactory
operator|.
name|interpretConstantAsPrimitive
argument_list|(
name|colTypeInfo
argument_list|,
name|constVal
argument_list|,
operator|(
name|PrimitiveTypeInfo
operator|)
name|exprFactory
operator|.
name|getTypeInfo
argument_list|(
name|constChild
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|newConst
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|newConst
operator|==
name|constVal
condition|)
block|{
return|return
name|constChild
return|;
block|}
else|else
block|{
return|return
name|exprFactory
operator|.
name|createConstantExpr
argument_list|(
name|exprFactory
operator|.
name|adjustConstantType
argument_list|(
name|colTypeInfo
argument_list|,
name|newConst
argument_list|)
argument_list|,
name|newConst
argument_list|)
return|;
block|}
block|}
return|return
name|constChild
return|;
block|}
comment|/**      * Returns true if des is a descendant of ans (ancestor)      */
specifier|private
name|boolean
name|isDescendant
parameter_list|(
name|Node
name|ans
parameter_list|,
name|Node
name|des
parameter_list|)
block|{
if|if
condition|(
name|ans
operator|.
name|getChildren
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|Node
name|c
range|:
name|ans
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|==
name|des
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|isDescendant
argument_list|(
name|c
argument_list|,
name|des
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|T
name|processQualifiedColRef
parameter_list|(
name|TypeCheckCtx
name|ctx
parameter_list|,
name|ASTNode
name|expr
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|RowResolver
name|input
init|=
name|ctx
operator|.
name|getInputRR
argument_list|()
decl_stmt|;
name|String
name|tableAlias
init|=
name|BaseSemanticAnalyzer
operator|.
name|unescapeIdentifier
argument_list|(
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
comment|// NOTE: tableAlias must be a valid non-ambiguous table alias,
comment|// because we've checked that in TOK_TABLE_OR_COL's process method.
name|T
name|desc
init|=
operator|(
name|T
operator|)
name|nodeOutputs
index|[
literal|1
index|]
decl_stmt|;
name|String
name|colName
decl_stmt|;
if|if
condition|(
name|exprFactory
operator|.
name|isConstantExpr
argument_list|(
name|desc
argument_list|)
condition|)
block|{
name|colName
operator|=
name|exprFactory
operator|.
name|getConstantValue
argument_list|(
name|desc
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exprFactory
operator|.
name|isColumnRefExpr
argument_list|(
name|desc
argument_list|)
condition|)
block|{
name|colName
operator|=
name|exprFactory
operator|.
name|getColumnName
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Unexpected ExprNode : "
operator|+
name|nodeOutputs
index|[
literal|1
index|]
argument_list|)
throw|;
block|}
name|ColumnInfo
name|colInfo
init|=
name|input
operator|.
name|get
argument_list|(
name|tableAlias
argument_list|,
name|colName
argument_list|)
decl_stmt|;
comment|// Try outer Row resolver
if|if
condition|(
name|colInfo
operator|==
literal|null
operator|&&
name|ctx
operator|.
name|getOuterRR
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|RowResolver
name|outerRR
init|=
name|ctx
operator|.
name|getOuterRR
argument_list|()
decl_stmt|;
name|colInfo
operator|=
name|outerRR
operator|.
name|get
argument_list|(
name|tableAlias
argument_list|,
name|colName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|colInfo
operator|==
literal|null
condition|)
block|{
name|ctx
operator|.
name|setError
argument_list|(
name|ASTErrorUtils
operator|.
name|getMsg
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_COLUMN
operator|.
name|getMsg
argument_list|()
argument_list|,
name|expr
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|expr
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|exprFactory
operator|.
name|toExpr
argument_list|(
name|colInfo
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TypeCheckCtx
name|ctx
init|=
operator|(
name|TypeCheckCtx
operator|)
name|procCtx
decl_stmt|;
name|T
name|desc
init|=
name|processGByExpr
argument_list|(
name|nd
argument_list|,
name|procCtx
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
comment|// Here we know nd represents a group by expression.
comment|// During the DFS traversal of the AST, a descendant of nd likely set an
comment|// error because a sub-tree of nd is unlikely to also be a group by
comment|// expression. For example, in a query such as
comment|// SELECT *concat(key)* FROM src GROUP BY concat(key), 'key' will be
comment|// processed before 'concat(key)' and since 'key' is not a group by
comment|// expression, an error will be set in ctx by ColumnExprProcessor.
comment|// We can clear the global error when we see that it was set in a
comment|// descendant node of a group by expression because
comment|// processGByExpr() returns a ExprNodeDesc that effectively ignores
comment|// its children. Although the error can be set multiple times by
comment|// descendant nodes, DFS traversal ensures that the error only needs to
comment|// be cleared once. Also, for a case like
comment|// SELECT concat(value, concat(value))... the logic still works as the
comment|// error is only set with the first 'value'; all node processors quit
comment|// early if the global error is set.
if|if
condition|(
name|isDescendant
argument_list|(
name|nd
argument_list|,
name|ctx
operator|.
name|getErrorSrcNode
argument_list|()
argument_list|)
condition|)
block|{
name|ctx
operator|.
name|setError
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|desc
return|;
block|}
if|if
condition|(
name|ctx
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ASTNode
name|expr
init|=
operator|(
name|ASTNode
operator|)
name|nd
decl_stmt|;
comment|/*        * A Windowing specification get added as a child to a UDAF invocation to distinguish it        * from similar UDAFs but on different windows.        * The UDAF is translated to a WindowFunction invocation in the PTFTranslator.        * So here we just return null for tokens that appear in a Window Specification.        * When the traversal reaches up to the UDAF invocation its ExprNodeDesc is build using the        * ColumnInfo in the InputRR. This is similar to how UDAFs are handled in Select lists.        * The difference is that there is translation for Window related tokens, so we just        * return null;        */
if|if
condition|(
name|WINDOWING_TOKENS
operator|.
name|contains
argument_list|(
name|expr
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|ctx
operator|.
name|getallowWindowing
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|SemanticAnalyzer
operator|.
name|generateErrorMessage
argument_list|(
name|expr
argument_list|,
name|ErrorMsg
operator|.
name|INVALID_FUNCTION
operator|.
name|getMsg
argument_list|(
literal|"Windowing is not supported in the context"
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
if|if
condition|(
name|expr
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_SUBQUERY_OP
operator|||
name|expr
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_QUERY
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|expr
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TABNAME
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|expr
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_ALLCOLREF
condition|)
block|{
if|if
condition|(
operator|!
name|ctx
operator|.
name|getallowAllColRef
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|SemanticAnalyzer
operator|.
name|generateErrorMessage
argument_list|(
name|expr
argument_list|,
name|ErrorMsg
operator|.
name|INVALID_COLUMN
operator|.
name|getMsg
argument_list|(
literal|"All column reference is not supported in the context"
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
name|RowResolver
name|input
init|=
name|ctx
operator|.
name|getInputRR
argument_list|()
decl_stmt|;
name|T
name|columnList
init|=
name|exprFactory
operator|.
name|createExprsListExpr
argument_list|()
decl_stmt|;
assert|assert
name|expr
operator|.
name|getChildCount
argument_list|()
operator|<=
literal|1
assert|;
if|if
condition|(
name|expr
operator|.
name|getChildCount
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// table aliased (select a.*, for example)
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
name|child
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TABNAME
assert|;
assert|assert
name|child
operator|.
name|getChildCount
argument_list|()
operator|==
literal|1
assert|;
name|String
name|tableAlias
init|=
name|BaseSemanticAnalyzer
operator|.
name|unescapeIdentifier
argument_list|(
name|child
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ColumnInfo
argument_list|>
name|columns
init|=
name|input
operator|.
name|getFieldMap
argument_list|(
name|tableAlias
argument_list|)
decl_stmt|;
if|if
condition|(
name|columns
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ASTErrorUtils
operator|.
name|getMsg
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_TABLE_ALIAS
operator|.
name|getMsg
argument_list|()
argument_list|,
name|child
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ColumnInfo
argument_list|>
name|colMap
range|:
name|columns
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ColumnInfo
name|colInfo
init|=
name|colMap
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|colInfo
operator|.
name|getIsVirtualCol
argument_list|()
condition|)
block|{
name|columnList
operator|=
name|exprFactory
operator|.
name|addExprToExprsList
argument_list|(
name|columnList
argument_list|,
name|exprFactory
operator|.
name|toExpr
argument_list|(
name|colInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// all columns (select *, for example)
for|for
control|(
name|ColumnInfo
name|colInfo
range|:
name|input
operator|.
name|getColumnInfos
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|colInfo
operator|.
name|getIsVirtualCol
argument_list|()
condition|)
block|{
name|columnList
operator|=
name|exprFactory
operator|.
name|addExprToExprsList
argument_list|(
name|columnList
argument_list|,
name|exprFactory
operator|.
name|toExpr
argument_list|(
name|colInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|columnList
return|;
block|}
comment|// If the first child is a TOK_TABLE_OR_COL, and nodeOutput[0] is NULL,
comment|// and the operator is a DOT, then it's a table column reference.
if|if
condition|(
name|expr
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|DOT
operator|&&
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TABLE_OR_COL
operator|&&
name|nodeOutputs
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
return|return
name|processQualifiedColRef
argument_list|(
name|ctx
argument_list|,
name|expr
argument_list|,
name|nodeOutputs
argument_list|)
return|;
block|}
comment|// Return nulls for conversion operators
if|if
condition|(
name|CONVERSION_FUNCTION_TEXT_MAP
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|expr
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
name|expr
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|CharSetName
operator|||
name|expr
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|CharSetLiteral
condition|)
block|{
return|return
literal|null
return|;
block|}
name|boolean
name|isFunction
init|=
operator|(
name|expr
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_FUNCTION
operator|||
name|expr
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_FUNCTIONSTAR
operator|||
name|expr
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_FUNCTIONDI
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|ctx
operator|.
name|getAllowDistinctFunctions
argument_list|()
operator|&&
name|expr
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_FUNCTIONDI
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|SemanticAnalyzer
operator|.
name|generateErrorMessage
argument_list|(
name|expr
argument_list|,
name|ErrorMsg
operator|.
name|DISTINCT_NOT_SUPPORTED
operator|.
name|getMsg
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|// Create all children
name|int
name|childrenBegin
init|=
operator|(
name|isFunction
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|(
name|expr
operator|.
name|getChildCount
argument_list|()
operator|-
name|childrenBegin
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|ci
init|=
name|childrenBegin
init|;
name|ci
operator|<
name|expr
operator|.
name|getChildCount
argument_list|()
condition|;
name|ci
operator|++
control|)
block|{
name|T
name|nodeOutput
init|=
operator|(
name|T
operator|)
name|nodeOutputs
index|[
name|ci
index|]
decl_stmt|;
if|if
condition|(
name|exprFactory
operator|.
name|isExprsListExpr
argument_list|(
name|nodeOutput
argument_list|)
condition|)
block|{
name|children
operator|.
name|addAll
argument_list|(
name|exprFactory
operator|.
name|getExprChildren
argument_list|(
name|nodeOutput
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|children
operator|.
name|add
argument_list|(
name|nodeOutput
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|expr
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_FUNCTIONSTAR
condition|)
block|{
if|if
condition|(
operator|!
name|ctx
operator|.
name|getallowFunctionStar
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|SemanticAnalyzer
operator|.
name|generateErrorMessage
argument_list|(
name|expr
argument_list|,
name|ErrorMsg
operator|.
name|INVALID_COLUMN
operator|.
name|getMsg
argument_list|(
literal|".* reference is not supported in the context"
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
name|RowResolver
name|input
init|=
name|ctx
operator|.
name|getInputRR
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnInfo
name|colInfo
range|:
name|input
operator|.
name|getColumnInfos
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|colInfo
operator|.
name|getIsVirtualCol
argument_list|()
condition|)
block|{
name|children
operator|.
name|add
argument_list|(
name|exprFactory
operator|.
name|toExpr
argument_list|(
name|colInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// If any of the children contains null, then return a null
comment|// this is a hack for now to handle the group by case
if|if
condition|(
name|children
operator|.
name|contains
argument_list|(
literal|null
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|possibleColumnNames
init|=
name|getReferenceableColumnAliases
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|String
name|reason
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(possible column names are: %s)"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|possibleColumnNames
argument_list|,
literal|", "
argument_list|)
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|setError
argument_list|(
name|ASTErrorUtils
operator|.
name|getMsg
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_COLUMN
operator|.
name|getMsg
argument_list|()
argument_list|,
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|reason
argument_list|)
argument_list|,
name|expr
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Create function desc
try|try
block|{
return|return
name|getXpathOrFuncExprNodeDesc
argument_list|(
name|expr
argument_list|,
name|isFunction
argument_list|,
name|children
argument_list|,
name|ctx
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UDFArgumentTypeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ASTErrorUtils
operator|.
name|getMsg
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_ARGUMENT_TYPE
operator|.
name|getMsg
argument_list|()
argument_list|,
name|expr
operator|.
name|getChild
argument_list|(
name|childrenBegin
operator|+
name|e
operator|.
name|getArgumentId
argument_list|()
argument_list|)
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UDFArgumentLengthException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ASTErrorUtils
operator|.
name|getMsg
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_ARGUMENT_LENGTH
operator|.
name|getMsg
argument_list|()
argument_list|,
name|expr
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UDFArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ASTErrorUtils
operator|.
name|getMsg
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_ARGUMENT
operator|.
name|getMsg
argument_list|()
argument_list|,
name|expr
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getReferenceableColumnAliases
parameter_list|(
name|TypeCheckCtx
name|ctx
parameter_list|)
block|{
return|return
name|ctx
operator|.
name|getInputRR
argument_list|()
operator|.
name|getReferenceableColumnAliases
argument_list|(
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
comment|/**    * Factory method to get DefaultExprProcessor.    *    * @return DefaultExprProcessor.    */
specifier|protected
name|DefaultExprProcessor
name|getDefaultExprProcessor
parameter_list|()
block|{
return|return
operator|new
name|DefaultExprProcessor
argument_list|()
return|;
block|}
comment|/**    * Processor for subquery expressions..    */
specifier|public
class|class
name|SubQueryExprProcessor
implements|implements
name|SemanticNodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TypeCheckCtx
name|ctx
init|=
operator|(
name|TypeCheckCtx
operator|)
name|procCtx
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ASTNode
name|expr
init|=
operator|(
name|ASTNode
operator|)
name|nd
decl_stmt|;
name|ASTNode
name|sqNode
init|=
operator|(
name|ASTNode
operator|)
name|expr
operator|.
name|getParent
argument_list|()
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ctx
operator|.
name|getallowSubQueryExpr
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CalciteSubquerySemanticException
argument_list|(
name|SemanticAnalyzer
operator|.
name|generateErrorMessage
argument_list|(
name|sqNode
argument_list|,
name|ErrorMsg
operator|.
name|UNSUPPORTED_SUBQUERY_EXPRESSION
operator|.
name|getMsg
argument_list|(
literal|"Currently SubQuery expressions are only allowed as "
operator|+
literal|"Where and Having Clause predicates"
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
name|T
name|desc
init|=
name|processGByExpr
argument_list|(
name|nd
argument_list|,
name|procCtx
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
return|return
name|desc
return|;
block|}
comment|//TOK_SUBQUERY_EXPR should have either 2 or 3 children
assert|assert
operator|(
name|expr
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|||
name|expr
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
comment|//First child should be operand
assert|assert
operator|(
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_SUBQUERY_OP
operator|)
assert|;
name|ASTNode
name|subqueryOp
init|=
operator|(
name|ASTNode
operator|)
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SubqueryType
name|subqueryType
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|subqueryOp
operator|.
name|getChildCount
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|(
name|subqueryOp
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|KW_IN
operator|||
name|subqueryOp
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_SUBQUERY_OP_NOTIN
operator|)
condition|)
block|{
name|subqueryType
operator|=
name|SubqueryType
operator|.
name|IN
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|subqueryOp
operator|.
name|getChildCount
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|(
name|subqueryOp
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|KW_EXISTS
operator|||
name|subqueryOp
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_SUBQUERY_OP_NOTEXISTS
operator|)
condition|)
block|{
name|subqueryType
operator|=
name|SubqueryType
operator|.
name|EXISTS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|subqueryOp
operator|.
name|getChildCount
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|(
name|subqueryOp
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|KW_SOME
operator|)
condition|)
block|{
name|subqueryType
operator|=
name|SubqueryType
operator|.
name|SOME
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|subqueryOp
operator|.
name|getChildCount
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|(
name|subqueryOp
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|KW_ALL
operator|)
condition|)
block|{
name|subqueryType
operator|=
name|SubqueryType
operator|.
name|ALL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subqueryOp
operator|.
name|getChildCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|subqueryType
operator|=
name|SubqueryType
operator|.
name|SCALAR
expr_stmt|;
block|}
name|T
name|res
init|=
name|exprFactory
operator|.
name|createSubqueryExpr
argument_list|(
name|ctx
argument_list|,
name|expr
argument_list|,
name|subqueryType
argument_list|,
name|nodeOutputs
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|null
condition|)
block|{
comment|/*          * Restriction.1.h :: SubQueries only supported in the SQL Where Clause.          */
name|ctx
operator|.
name|setError
argument_list|(
name|ASTErrorUtils
operator|.
name|getMsg
argument_list|(
name|ErrorMsg
operator|.
name|UNSUPPORTED_SUBQUERY_EXPRESSION
operator|.
name|getMsg
argument_list|()
argument_list|,
name|sqNode
argument_list|,
literal|"Currently only IN& EXISTS SubQuery expressions are allowed"
argument_list|)
argument_list|,
name|sqNode
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
block|}
comment|/**    * Factory method to get SubQueryExprProcessor.    *    * @return DateExprProcessor.    */
specifier|protected
name|SubQueryExprProcessor
name|getSubQueryExprProcessor
parameter_list|()
block|{
return|return
operator|new
name|SubQueryExprProcessor
argument_list|()
return|;
block|}
comment|/**    * Function to do groupby subexpression elimination. This is called by all the    * processors initially. As an example, consider the query select a+b,    * count(1) from T group by a+b; Then a+b is already precomputed in the group    * by operators key, so we substitute a+b in the select list with the internal    * column name of the a+b expression that appears in the in input row    * resolver.    *    * @param nd      The node that is being inspected.    * @param procCtx The processor context.    * @return exprNodeColumnDesc.    */
specifier|private
name|T
name|processGByExpr
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Object
name|procCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// We recursively create the exprNodeDesc. Base cases: when we encounter
comment|// a column ref, we convert that into an exprNodeColumnDesc; when we
comment|// encounter
comment|// a constant, we convert that into an exprNodeConstantDesc. For others we
comment|// just
comment|// build the exprNodeFuncDesc with recursively built children.
name|ASTNode
name|expr
init|=
operator|(
name|ASTNode
operator|)
name|nd
decl_stmt|;
name|TypeCheckCtx
name|ctx
init|=
operator|(
name|TypeCheckCtx
operator|)
name|procCtx
decl_stmt|;
comment|// bypass only if outerRR is not null. Otherwise we need to look for expressions in outerRR for
comment|// subqueries e.g. select min(b.value) from table b group by b.key
comment|//                                  having key in (select .. where a = min(b.value)
if|if
condition|(
operator|!
name|ctx
operator|.
name|isUseCaching
argument_list|()
operator|&&
name|ctx
operator|.
name|getOuterRR
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RowResolver
name|input
init|=
name|ctx
operator|.
name|getInputRR
argument_list|()
decl_stmt|;
name|T
name|desc
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|ctx
operator|==
literal|null
operator|)
operator|||
operator|(
name|input
operator|==
literal|null
operator|)
operator|||
operator|(
operator|!
name|ctx
operator|.
name|getAllowGBExprElimination
argument_list|()
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// If the current subExpression is pre-calculated, as in Group-By etc.
name|ColumnInfo
name|colInfo
init|=
name|input
operator|.
name|getExpression
argument_list|(
name|expr
argument_list|)
decl_stmt|;
comment|// try outer row resolver
name|RowResolver
name|outerRR
init|=
name|ctx
operator|.
name|getOuterRR
argument_list|()
decl_stmt|;
if|if
condition|(
name|colInfo
operator|==
literal|null
operator|&&
name|outerRR
operator|!=
literal|null
condition|)
block|{
name|colInfo
operator|=
name|outerRR
operator|.
name|getExpression
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|colInfo
operator|!=
literal|null
condition|)
block|{
name|desc
operator|=
name|exprFactory
operator|.
name|createColumnRefExpr
argument_list|(
name|colInfo
argument_list|)
expr_stmt|;
name|ASTNode
name|source
init|=
name|input
operator|.
name|getExpressionSource
argument_list|(
name|expr
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|!=
literal|null
operator|&&
name|ctx
operator|.
name|getUnparseTranslator
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|getUnparseTranslator
argument_list|()
operator|.
name|addCopyTranslation
argument_list|(
name|expr
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
return|return
name|desc
return|;
block|}
return|return
name|desc
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isStringType
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
if|if
condition|(
name|typeInfo
operator|.
name|getCategory
argument_list|()
operator|==
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
name|primitiveCategory
init|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
if|if
condition|(
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
name|primitiveCategory
argument_list|)
operator|==
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
operator|.
name|STRING_GROUP
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|String
name|getFunctionText
parameter_list|(
name|ASTNode
name|expr
parameter_list|,
name|boolean
name|isFunction
parameter_list|)
block|{
name|String
name|funcText
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|isFunction
condition|)
block|{
comment|// For operator, the function name is the operator text, unless it's in
comment|// our special dictionary
if|if
condition|(
name|expr
operator|.
name|getChildCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|funcText
operator|=
name|SPECIAL_UNARY_OPERATOR_TEXT_MAP
operator|.
name|get
argument_list|(
name|expr
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcText
operator|==
literal|null
condition|)
block|{
name|funcText
operator|=
name|expr
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// For TOK_FUNCTION, the function name is stored in the first child,
comment|// unless it's in our
comment|// special dictionary.
assert|assert
operator|(
name|expr
operator|.
name|getChildCount
argument_list|()
operator|>=
literal|1
operator|)
assert|;
name|int
name|funcType
init|=
operator|(
operator|(
name|ASTNode
operator|)
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|funcText
operator|==
literal|null
condition|)
block|{
name|funcText
operator|=
name|CONVERSION_FUNCTION_TEXT_MAP
operator|.
name|get
argument_list|(
name|funcType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcText
operator|==
literal|null
condition|)
block|{
name|funcText
operator|=
operator|(
operator|(
name|ASTNode
operator|)
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|BaseSemanticAnalyzer
operator|.
name|unescapeIdentifier
argument_list|(
name|funcText
argument_list|)
return|;
block|}
block|}
end_class

end_unit

