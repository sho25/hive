begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|physical
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|CommonMergeJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ConditionalTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|SparkTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|TaskGraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|BaseWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SparkWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * Check each MapJoin and ShuffleJoin Operator to see if they are performing a cross product.  * If yes, output a warning to the Session's console.  * The Checks made are the following:  * 1. Shuffle Join:  * Check the parent ReduceSinkOp of the JoinOp. If its keys list is size = 0, then  * this is a cross product.  * 2. Map Join:  * If the keys expr list on the mapJoin Desc is an empty list for any input,  * this implies a cross product.  */
end_comment

begin_class
specifier|public
class|class
name|SparkCrossProductCheck
implements|implements
name|PhysicalPlanResolver
implements|,
name|Dispatcher
block|{
annotation|@
name|Override
specifier|public
name|Object
name|dispatch
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|currTask
init|=
operator|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
operator|)
name|nd
decl_stmt|;
if|if
condition|(
name|currTask
operator|instanceof
name|SparkTask
condition|)
block|{
name|SparkWork
name|sparkWork
init|=
operator|(
operator|(
name|SparkTask
operator|)
name|currTask
operator|)
operator|.
name|getWork
argument_list|()
decl_stmt|;
name|checkShuffleJoin
argument_list|(
name|sparkWork
argument_list|)
expr_stmt|;
name|checkMapJoin
argument_list|(
operator|(
name|SparkTask
operator|)
name|currTask
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currTask
operator|instanceof
name|ConditionalTask
condition|)
block|{
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|taskList
init|=
operator|(
operator|(
name|ConditionalTask
operator|)
name|currTask
operator|)
operator|.
name|getListTasks
argument_list|()
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
range|:
name|taskList
control|)
block|{
name|dispatch
argument_list|(
name|task
argument_list|,
name|stack
argument_list|,
name|nodeOutputs
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|PhysicalContext
name|resolve
parameter_list|(
name|PhysicalContext
name|pctx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TaskGraphWalker
name|ogw
init|=
operator|new
name|TaskGraphWalker
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|addAll
argument_list|(
name|pctx
operator|.
name|getRootTasks
argument_list|()
argument_list|)
expr_stmt|;
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|pctx
return|;
block|}
specifier|private
name|void
name|warn
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|SessionState
operator|.
name|getConsole
argument_list|()
operator|.
name|printInfo
argument_list|(
literal|"Warning: "
operator|+
name|msg
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkShuffleJoin
parameter_list|(
name|SparkWork
name|sparkWork
parameter_list|)
throws|throws
name|SemanticException
block|{
for|for
control|(
name|ReduceWork
name|reduceWork
range|:
name|sparkWork
operator|.
name|getAllReduceWork
argument_list|()
control|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|reducer
init|=
name|reduceWork
operator|.
name|getReducer
argument_list|()
decl_stmt|;
if|if
condition|(
name|reducer
operator|instanceof
name|JoinOperator
operator|||
name|reducer
operator|instanceof
name|CommonMergeJoinOperator
condition|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|CrossProductHandler
operator|.
name|ExtractReduceSinkInfo
operator|.
name|Info
argument_list|>
name|rsInfo
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|CrossProductHandler
operator|.
name|ExtractReduceSinkInfo
operator|.
name|Info
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BaseWork
name|parent
range|:
name|sparkWork
operator|.
name|getParents
argument_list|(
name|reduceWork
argument_list|)
control|)
block|{
name|rsInfo
operator|.
name|putAll
argument_list|(
operator|new
name|CrossProductHandler
operator|.
name|ExtractReduceSinkInfo
argument_list|(
literal|null
argument_list|)
operator|.
name|analyze
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|checkForCrossProduct
argument_list|(
name|reduceWork
operator|.
name|getName
argument_list|()
argument_list|,
name|reducer
argument_list|,
name|rsInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|checkMapJoin
parameter_list|(
name|SparkTask
name|sparkTask
parameter_list|)
throws|throws
name|SemanticException
block|{
name|SparkWork
name|sparkWork
init|=
name|sparkTask
operator|.
name|getWork
argument_list|()
decl_stmt|;
for|for
control|(
name|BaseWork
name|baseWork
range|:
name|sparkWork
operator|.
name|getAllWork
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|warnings
init|=
operator|new
name|CrossProductHandler
operator|.
name|MapJoinCheck
argument_list|(
name|sparkTask
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|analyze
argument_list|(
name|baseWork
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|w
range|:
name|warnings
control|)
block|{
name|warn
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|checkForCrossProduct
parameter_list|(
name|String
name|workName
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|reducer
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|CrossProductHandler
operator|.
name|ExtractReduceSinkInfo
operator|.
name|Info
argument_list|>
name|rsInfo
parameter_list|)
block|{
if|if
condition|(
name|rsInfo
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Iterator
argument_list|<
name|CrossProductHandler
operator|.
name|ExtractReduceSinkInfo
operator|.
name|Info
argument_list|>
name|it
init|=
name|rsInfo
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|CrossProductHandler
operator|.
name|ExtractReduceSinkInfo
operator|.
name|Info
name|info
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|keyCols
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|iAliases
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|iAliases
operator|.
name|addAll
argument_list|(
name|info
operator|.
name|inputAliases
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|info
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|iAliases
operator|.
name|addAll
argument_list|(
name|info
operator|.
name|inputAliases
argument_list|)
expr_stmt|;
block|}
name|String
name|warning
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Shuffle Join %s[tables = %s] in Work '%s' is a cross product"
argument_list|,
name|reducer
operator|.
name|toString
argument_list|()
argument_list|,
name|iAliases
argument_list|,
name|workName
argument_list|)
decl_stmt|;
name|warn
argument_list|(
name|warning
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

