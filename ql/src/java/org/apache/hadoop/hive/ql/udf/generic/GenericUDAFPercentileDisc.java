begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|WindowFunctionDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_comment
comment|/**  * GenericUDAFPercentileDisc.  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"dense_rank"
argument_list|,
name|value
operator|=
literal|"_FUNC_(input, pc) - "
operator|+
literal|"Returns the percentile of expr at pc (range: [0,1]) without interpolation."
argument_list|)
annotation|@
name|WindowFunctionDescription
argument_list|(
name|supportsWindow
operator|=
literal|false
argument_list|,
name|pivotResult
operator|=
literal|true
argument_list|,
name|supportsWithinGroup
operator|=
literal|true
argument_list|)
specifier|public
class|class
name|GenericUDAFPercentileDisc
extends|extends
name|GenericUDAFPercentileCont
block|{
annotation|@
name|Override
specifier|public
name|GenericUDAFEvaluator
name|getEvaluator
parameter_list|(
name|TypeInfo
index|[]
name|parameters
parameter_list|)
throws|throws
name|SemanticException
block|{
name|validateParameterTypes
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|parameters
index|[
literal|0
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|VOID
case|:
return|return
name|parameters
index|[
literal|1
index|]
operator|.
name|getCategory
argument_list|()
operator|==
name|ObjectInspector
operator|.
name|Category
operator|.
name|LIST
condition|?
operator|new
name|PercentileDiscLongArrayEvaluator
argument_list|()
else|:
operator|new
name|PercentileDiscLongEvaluator
argument_list|()
return|;
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
case|case
name|DECIMAL
case|:
return|return
name|parameters
index|[
literal|1
index|]
operator|.
name|getCategory
argument_list|()
operator|==
name|ObjectInspector
operator|.
name|Category
operator|.
name|LIST
condition|?
operator|new
name|PercentileDiscDoubleArrayEvaluator
argument_list|()
else|:
operator|new
name|PercentileDiscDoubleEvaluator
argument_list|()
return|;
case|case
name|STRING
case|:
case|case
name|TIMESTAMP
case|:
case|case
name|VARCHAR
case|:
case|case
name|CHAR
case|:
case|case
name|BOOLEAN
case|:
case|case
name|DATE
case|:
default|default:
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"Only numeric arguments are accepted but "
operator|+
name|parameters
index|[
literal|0
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" is passed."
argument_list|)
throw|;
block|}
block|}
comment|/**    * The evaluator for discrete percentile computation based on long.    */
specifier|public
specifier|static
class|class
name|PercentileDiscLongEvaluator
extends|extends
name|PercentileContLongEvaluator
block|{
specifier|public
name|PercentileDiscLongEvaluator
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|protected
name|PercentileCalculator
argument_list|<
name|LongWritable
argument_list|>
name|getCalculator
parameter_list|()
block|{
return|return
operator|new
name|PercentileDiscLongCalculator
argument_list|()
return|;
block|}
block|}
comment|/**    * The evaluator for discrete percentile computation based on array of longs.    */
specifier|public
specifier|static
class|class
name|PercentileDiscLongArrayEvaluator
extends|extends
name|PercentileContLongArrayEvaluator
block|{
specifier|public
name|PercentileDiscLongArrayEvaluator
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|protected
name|PercentileCalculator
argument_list|<
name|LongWritable
argument_list|>
name|getCalculator
parameter_list|()
block|{
return|return
operator|new
name|PercentileDiscLongCalculator
argument_list|()
return|;
block|}
block|}
comment|/**    * The evaluator for discrete percentile computation based on double.    */
specifier|public
specifier|static
class|class
name|PercentileDiscDoubleEvaluator
extends|extends
name|PercentileContDoubleEvaluator
block|{
specifier|public
name|PercentileDiscDoubleEvaluator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|PercentileCalculator
argument_list|<
name|DoubleWritable
argument_list|>
name|getCalculator
parameter_list|()
block|{
return|return
operator|new
name|PercentileDiscDoubleCalculator
argument_list|()
return|;
block|}
block|}
comment|/**    * The evaluator for discrete percentile computation based on array of doubles.    */
specifier|public
specifier|static
class|class
name|PercentileDiscDoubleArrayEvaluator
extends|extends
name|PercentileContDoubleArrayEvaluator
block|{
specifier|public
name|PercentileDiscDoubleArrayEvaluator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|PercentileCalculator
argument_list|<
name|DoubleWritable
argument_list|>
name|getCalculator
parameter_list|()
block|{
return|return
operator|new
name|PercentileDiscDoubleCalculator
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PercentileDiscLongCalculator
implements|implements
name|PercentileCalculator
argument_list|<
name|LongWritable
argument_list|>
block|{
specifier|public
name|double
name|getPercentile
parameter_list|(
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|LongWritable
argument_list|,
name|LongWritable
argument_list|>
argument_list|>
name|entriesList
parameter_list|,
name|double
name|position
parameter_list|)
block|{
name|long
name|lower
init|=
operator|(
name|long
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|position
argument_list|)
decl_stmt|;
name|long
name|higher
init|=
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|position
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|entriesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
operator|<
name|lower
operator|+
literal|1
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
name|long
name|lowerKey
init|=
name|entriesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|higher
operator|==
name|lower
condition|)
block|{
return|return
name|lowerKey
return|;
block|}
if|if
condition|(
name|entriesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
operator|<
name|higher
operator|+
literal|1
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
return|return
name|entriesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PercentileDiscDoubleCalculator
implements|implements
name|PercentileCalculator
argument_list|<
name|DoubleWritable
argument_list|>
block|{
specifier|public
name|double
name|getPercentile
parameter_list|(
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|DoubleWritable
argument_list|,
name|LongWritable
argument_list|>
argument_list|>
name|entriesList
parameter_list|,
name|double
name|position
parameter_list|)
block|{
name|long
name|lower
init|=
operator|(
name|long
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|position
argument_list|)
decl_stmt|;
name|long
name|higher
init|=
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|position
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|entriesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
operator|<
name|lower
operator|+
literal|1
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
name|double
name|lowerKey
init|=
name|entriesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|higher
operator|==
name|lower
condition|)
block|{
return|return
name|lowerKey
return|;
block|}
if|if
condition|(
name|entriesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
operator|<
name|higher
operator|+
literal|1
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
return|return
name|entriesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

