begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|physical
operator|.
name|StageIDsRearranger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Explain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExplainWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SparkWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TezWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|StageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|AnnotationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_comment
comment|/**  * ExplainTask implementation.  *  **/
end_comment

begin_class
specifier|public
class|class
name|ExplainTask
extends|extends
name|Task
argument_list|<
name|ExplainWork
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EXPL_COLUMN_NAME
init|=
literal|"Explain"
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|visitedOps
init|=
operator|new
name|HashSet
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|isLogical
init|=
literal|false
decl_stmt|;
specifier|public
name|ExplainTask
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/*    * Below method returns the dependencies for the passed in query to EXPLAIN.    * The dependencies are the set of input tables and partitions, and are    * provided back as JSON output for the EXPLAIN command.    * Example output:    * {"input_tables":[{"tablename": "default@test_sambavi_v1", "tabletype": "TABLE"}],    *  "input partitions":["default@srcpart@ds=2008-04-08/hr=11"]}    */
specifier|private
specifier|static
name|JSONObject
name|getJSONDependencies
parameter_list|(
name|ExplainWork
name|work
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
operator|(
name|work
operator|.
name|getDependency
argument_list|()
operator|)
assert|;
name|JSONObject
name|outJSONObject
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|inputTableInfo
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|inputPartitionInfo
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ReadEntity
name|input
range|:
name|work
operator|.
name|getInputs
argument_list|()
control|)
block|{
switch|switch
condition|(
name|input
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|TABLE
case|:
name|Table
name|table
init|=
name|input
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableInfo
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|tableInfo
operator|.
name|put
argument_list|(
literal|"tablename"
argument_list|,
name|table
operator|.
name|getCompleteName
argument_list|()
argument_list|)
expr_stmt|;
name|tableInfo
operator|.
name|put
argument_list|(
literal|"tabletype"
argument_list|,
name|table
operator|.
name|getTableType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|input
operator|.
name|getParents
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|input
operator|.
name|getParents
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|tableInfo
operator|.
name|put
argument_list|(
literal|"tableParents"
argument_list|,
name|input
operator|.
name|getParents
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|inputTableInfo
operator|.
name|add
argument_list|(
name|tableInfo
argument_list|)
expr_stmt|;
break|break;
case|case
name|PARTITION
case|:
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionInfo
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partitionInfo
operator|.
name|put
argument_list|(
literal|"partitionName"
argument_list|,
name|input
operator|.
name|getPartition
argument_list|()
operator|.
name|getCompleteName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|input
operator|.
name|getParents
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|input
operator|.
name|getParents
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|partitionInfo
operator|.
name|put
argument_list|(
literal|"partitionParents"
argument_list|,
name|input
operator|.
name|getParents
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|inputPartitionInfo
operator|.
name|add
argument_list|(
name|partitionInfo
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
name|outJSONObject
operator|.
name|put
argument_list|(
literal|"input_tables"
argument_list|,
name|inputTableInfo
argument_list|)
expr_stmt|;
name|outJSONObject
operator|.
name|put
argument_list|(
literal|"input_partitions"
argument_list|,
name|inputPartitionInfo
argument_list|)
expr_stmt|;
return|return
name|outJSONObject
return|;
block|}
specifier|public
name|JSONObject
name|getJSONLogicalPlan
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|ExplainWork
name|work
parameter_list|)
throws|throws
name|Exception
block|{
name|isLogical
operator|=
literal|true
expr_stmt|;
name|JSONObject
name|outJSONObject
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|boolean
name|jsonOutput
init|=
name|work
operator|.
name|isFormatted
argument_list|()
decl_stmt|;
if|if
condition|(
name|jsonOutput
condition|)
block|{
name|out
operator|=
literal|null
expr_stmt|;
block|}
comment|// Print out the parse AST
if|if
condition|(
name|work
operator|.
name|getAstStringTree
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|jsonAST
init|=
name|outputAST
argument_list|(
name|work
operator|.
name|getAstStringTree
argument_list|()
argument_list|,
name|out
argument_list|,
name|jsonOutput
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jsonOutput
condition|)
block|{
name|outJSONObject
operator|.
name|put
argument_list|(
literal|"ABSTRACT SYNTAX TREE"
argument_list|,
name|jsonAST
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|work
operator|.
name|getParseContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"LOGICAL PLAN:"
argument_list|)
expr_stmt|;
block|}
name|JSONObject
name|jsonPlan
init|=
name|outputMap
argument_list|(
name|work
operator|.
name|getParseContext
argument_list|()
operator|.
name|getTopOps
argument_list|()
argument_list|,
literal|true
argument_list|,
name|out
argument_list|,
name|jsonOutput
argument_list|,
name|work
operator|.
name|getExtended
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jsonOutput
condition|)
block|{
name|outJSONObject
operator|.
name|put
argument_list|(
literal|"LOGICAL PLAN"
argument_list|,
name|jsonPlan
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"No parse context!"
argument_list|)
expr_stmt|;
block|}
return|return
name|outJSONObject
return|;
block|}
specifier|public
name|JSONObject
name|getJSONPlan
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|ExplainWork
name|work
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getJSONPlan
argument_list|(
name|out
argument_list|,
name|work
operator|.
name|getAstStringTree
argument_list|()
argument_list|,
name|work
operator|.
name|getRootTasks
argument_list|()
argument_list|,
name|work
operator|.
name|getFetchTask
argument_list|()
argument_list|,
name|work
operator|.
name|isFormatted
argument_list|()
argument_list|,
name|work
operator|.
name|getExtended
argument_list|()
argument_list|,
name|work
operator|.
name|isAppendTaskType
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|JSONObject
name|getJSONPlan
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|String
name|ast
parameter_list|,
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|tasks
parameter_list|,
name|Task
argument_list|<
name|?
argument_list|>
name|fetchTask
parameter_list|,
name|boolean
name|jsonOutput
parameter_list|,
name|boolean
name|isExtended
parameter_list|,
name|boolean
name|appendTaskType
parameter_list|)
throws|throws
name|Exception
block|{
comment|// If the user asked for a formatted output, dump the json output
comment|// in the output stream
name|JSONObject
name|outJSONObject
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|jsonOutput
condition|)
block|{
name|out
operator|=
literal|null
expr_stmt|;
block|}
comment|// Print out the parse AST
if|if
condition|(
name|ast
operator|!=
literal|null
operator|&&
name|isExtended
condition|)
block|{
name|String
name|jsonAST
init|=
name|outputAST
argument_list|(
name|ast
argument_list|,
name|out
argument_list|,
name|jsonOutput
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jsonOutput
condition|)
block|{
name|outJSONObject
operator|.
name|put
argument_list|(
literal|"ABSTRACT SYNTAX TREE"
argument_list|,
name|jsonAST
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Task
argument_list|>
name|ordered
init|=
name|StageIDsRearranger
operator|.
name|getExplainOrder
argument_list|(
name|conf
argument_list|,
name|tasks
argument_list|)
decl_stmt|;
if|if
condition|(
name|fetchTask
operator|!=
literal|null
condition|)
block|{
name|fetchTask
operator|.
name|setParentTasks
argument_list|(
operator|(
name|List
operator|)
name|StageIDsRearranger
operator|.
name|getFetchSources
argument_list|(
name|tasks
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fetchTask
operator|.
name|getNumParent
argument_list|()
operator|==
literal|0
condition|)
block|{
name|fetchTask
operator|.
name|setRootTask
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|ordered
operator|.
name|add
argument_list|(
name|fetchTask
argument_list|)
expr_stmt|;
block|}
name|JSONObject
name|jsonDependencies
init|=
name|outputDependencies
argument_list|(
name|out
argument_list|,
name|jsonOutput
argument_list|,
name|appendTaskType
argument_list|,
name|ordered
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jsonOutput
condition|)
block|{
name|outJSONObject
operator|.
name|put
argument_list|(
literal|"STAGE DEPENDENCIES"
argument_list|,
name|jsonDependencies
argument_list|)
expr_stmt|;
block|}
comment|// Go over all the tasks and dump out the plans
name|JSONObject
name|jsonPlan
init|=
name|outputStagePlans
argument_list|(
name|out
argument_list|,
name|ordered
argument_list|,
name|jsonOutput
argument_list|,
name|isExtended
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonOutput
condition|)
block|{
name|outJSONObject
operator|.
name|put
argument_list|(
literal|"STAGE PLANS"
argument_list|,
name|jsonPlan
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchTask
operator|!=
literal|null
condition|)
block|{
name|fetchTask
operator|.
name|setParentTasks
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|jsonOutput
condition|?
name|outJSONObject
else|:
literal|null
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|toString
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|objects
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|objects
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|object
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|private
name|Object
name|toJson
parameter_list|(
name|String
name|header
parameter_list|,
name|String
name|message
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|ExplainWork
name|work
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|work
operator|.
name|isFormatted
argument_list|()
condition|)
block|{
return|return
name|message
return|;
block|}
name|out
operator|.
name|print
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|indentString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|Object
name|toJson
parameter_list|(
name|String
name|header
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|messages
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|ExplainWork
name|work
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|work
operator|.
name|isFormatted
argument_list|()
condition|)
block|{
return|return
operator|new
name|JSONArray
argument_list|(
name|messages
argument_list|)
return|;
block|}
name|out
operator|.
name|print
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|message
range|:
name|messages
control|)
block|{
name|out
operator|.
name|print
argument_list|(
name|indentString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|(
name|DriverContext
name|driverContext
parameter_list|)
block|{
name|PrintStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|resFile
init|=
name|work
operator|.
name|getResFile
argument_list|()
decl_stmt|;
name|OutputStream
name|outS
init|=
name|resFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|create
argument_list|(
name|resFile
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|PrintStream
argument_list|(
name|outS
argument_list|)
expr_stmt|;
if|if
condition|(
name|work
operator|.
name|isLogical
argument_list|()
condition|)
block|{
name|JSONObject
name|jsonLogicalPlan
init|=
name|getJSONLogicalPlan
argument_list|(
name|out
argument_list|,
name|work
argument_list|)
decl_stmt|;
if|if
condition|(
name|work
operator|.
name|isFormatted
argument_list|()
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|jsonLogicalPlan
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|work
operator|.
name|isAuthorize
argument_list|()
condition|)
block|{
name|JSONObject
name|jsonAuth
init|=
name|collectAuthRelatedEntities
argument_list|(
name|out
argument_list|,
name|work
argument_list|)
decl_stmt|;
if|if
condition|(
name|work
operator|.
name|isFormatted
argument_list|()
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|jsonAuth
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|work
operator|.
name|getDependency
argument_list|()
condition|)
block|{
name|JSONObject
name|jsonDependencies
init|=
name|getJSONDependencies
argument_list|(
name|work
argument_list|)
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
name|jsonDependencies
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|work
operator|.
name|getDependency
argument_list|()
condition|)
block|{
name|JSONObject
name|jsonDependencies
init|=
name|getJSONDependencies
argument_list|(
name|work
argument_list|)
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
name|jsonDependencies
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|JSONObject
name|jsonPlan
init|=
name|getJSONPlan
argument_list|(
name|out
argument_list|,
name|work
argument_list|)
decl_stmt|;
if|if
condition|(
name|work
operator|.
name|isFormatted
argument_list|()
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|jsonPlan
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Failed with exception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"\n"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
literal|1
operator|)
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|JSONObject
name|collectAuthRelatedEntities
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|ExplainWork
name|work
parameter_list|)
throws|throws
name|Exception
block|{
name|BaseSemanticAnalyzer
name|analyzer
init|=
name|work
operator|.
name|getAnalyzer
argument_list|()
decl_stmt|;
name|HiveOperation
name|operation
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveOperation
argument_list|()
decl_stmt|;
name|JSONObject
name|object
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|Object
name|jsonInput
init|=
name|toJson
argument_list|(
literal|"INPUTS"
argument_list|,
name|toString
argument_list|(
name|analyzer
operator|.
name|getInputs
argument_list|()
argument_list|)
argument_list|,
name|out
argument_list|,
name|work
argument_list|)
decl_stmt|;
if|if
condition|(
name|work
operator|.
name|isFormatted
argument_list|()
condition|)
block|{
name|object
operator|.
name|put
argument_list|(
literal|"INPUTS"
argument_list|,
name|jsonInput
argument_list|)
expr_stmt|;
block|}
name|Object
name|jsonOutput
init|=
name|toJson
argument_list|(
literal|"OUTPUTS"
argument_list|,
name|toString
argument_list|(
name|analyzer
operator|.
name|getOutputs
argument_list|()
argument_list|)
argument_list|,
name|out
argument_list|,
name|work
argument_list|)
decl_stmt|;
if|if
condition|(
name|work
operator|.
name|isFormatted
argument_list|()
condition|)
block|{
name|object
operator|.
name|put
argument_list|(
literal|"OUTPUTS"
argument_list|,
name|jsonOutput
argument_list|)
expr_stmt|;
block|}
name|String
name|userName
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getAuthenticator
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|Object
name|jsonUser
init|=
name|toJson
argument_list|(
literal|"CURRENT_USER"
argument_list|,
name|userName
argument_list|,
name|out
argument_list|,
name|work
argument_list|)
decl_stmt|;
if|if
condition|(
name|work
operator|.
name|isFormatted
argument_list|()
condition|)
block|{
name|object
operator|.
name|put
argument_list|(
literal|"CURRENT_USER"
argument_list|,
name|jsonUser
argument_list|)
expr_stmt|;
block|}
name|Object
name|jsonOperation
init|=
name|toJson
argument_list|(
literal|"OPERATION"
argument_list|,
name|operation
operator|.
name|name
argument_list|()
argument_list|,
name|out
argument_list|,
name|work
argument_list|)
decl_stmt|;
if|if
condition|(
name|work
operator|.
name|isFormatted
argument_list|()
condition|)
block|{
name|object
operator|.
name|put
argument_list|(
literal|"OPERATION"
argument_list|,
name|jsonOperation
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|analyzer
operator|.
name|skipAuthorization
argument_list|()
condition|)
block|{
return|return
name|object
return|;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Object
name|delegate
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getActiveAuthorizer
argument_list|()
decl_stmt|;
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
name|Class
name|itface
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getAuthorizerInterface
argument_list|()
decl_stmt|;
name|Object
name|authorizer
init|=
name|AuthorizationFactory
operator|.
name|create
argument_list|(
name|delegate
argument_list|,
name|itface
argument_list|,
operator|new
name|AuthorizationFactory
operator|.
name|AuthorizationExceptionHandler
argument_list|()
block|{
specifier|public
name|void
name|exception
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setActiveAuthorizer
argument_list|(
name|authorizer
argument_list|)
expr_stmt|;
try|try
block|{
name|Driver
operator|.
name|doAuthorization
argument_list|(
name|analyzer
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setActiveAuthorizer
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Object
name|jsonFails
init|=
name|toJson
argument_list|(
literal|"AUTHORIZATION_FAILURES"
argument_list|,
name|exceptions
argument_list|,
name|out
argument_list|,
name|work
argument_list|)
decl_stmt|;
if|if
condition|(
name|work
operator|.
name|isFormatted
argument_list|()
condition|)
block|{
name|object
operator|.
name|put
argument_list|(
literal|"AUTHORIZATION_FAILURES"
argument_list|,
name|jsonFails
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|object
return|;
block|}
specifier|private
specifier|static
name|String
name|indentString
parameter_list|(
name|int
name|indent
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indent
condition|;
operator|++
name|i
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|JSONObject
name|outputMap
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|mp
parameter_list|,
name|boolean
name|hasHeader
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|boolean
name|extended
parameter_list|,
name|boolean
name|jsonOutput
parameter_list|,
name|int
name|indent
parameter_list|)
throws|throws
name|Exception
block|{
name|TreeMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|tree
init|=
operator|new
name|TreeMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|tree
operator|.
name|putAll
argument_list|(
name|mp
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|jsonOutput
condition|?
operator|new
name|JSONObject
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
operator|&&
name|hasHeader
operator|&&
operator|!
name|mp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|ent
range|:
name|tree
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Print the key
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|indentString
argument_list|(
name|indent
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
comment|// Print the value
if|if
condition|(
name|isPrintable
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jsonOutput
condition|)
block|{
name|json
operator|.
name|put
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ent
operator|.
name|getValue
argument_list|()
operator|instanceof
name|List
condition|)
block|{
if|if
condition|(
name|ent
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
operator|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|ent
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|ent
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|ent
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|TezWork
operator|.
name|Dependency
condition|)
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|boolean
name|isFirst
init|=
literal|true
decl_stmt|;
for|for
control|(
name|TezWork
operator|.
name|Dependency
name|dep
range|:
operator|(
name|List
argument_list|<
name|TezWork
operator|.
name|Dependency
argument_list|>
operator|)
name|ent
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isFirst
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<- "
argument_list|)
expr_stmt|;
name|isFirst
operator|=
literal|false
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
name|dep
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|dep
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jsonOutput
condition|)
block|{
for|for
control|(
name|TezWork
operator|.
name|Dependency
name|dep
range|:
operator|(
name|List
argument_list|<
name|TezWork
operator|.
name|Dependency
argument_list|>
operator|)
name|ent
operator|.
name|getValue
argument_list|()
control|)
block|{
name|JSONObject
name|jsonDep
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|jsonDep
operator|.
name|put
argument_list|(
literal|"parent"
argument_list|,
name|dep
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|jsonDep
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|dep
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|accumulate
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|jsonDep
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|ent
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
operator|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|ent
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|ent
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|ent
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|SparkWork
operator|.
name|Dependency
condition|)
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|boolean
name|isFirst
init|=
literal|true
decl_stmt|;
for|for
control|(
name|SparkWork
operator|.
name|Dependency
name|dep
range|:
operator|(
name|List
argument_list|<
name|SparkWork
operator|.
name|Dependency
argument_list|>
operator|)
name|ent
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isFirst
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<- "
argument_list|)
expr_stmt|;
name|isFirst
operator|=
literal|false
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
name|dep
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|dep
operator|.
name|getShuffleType
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|dep
operator|.
name|getNumPartitions
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jsonOutput
condition|)
block|{
for|for
control|(
name|SparkWork
operator|.
name|Dependency
name|dep
range|:
operator|(
name|List
argument_list|<
name|SparkWork
operator|.
name|Dependency
argument_list|>
operator|)
name|ent
operator|.
name|getValue
argument_list|()
control|)
block|{
name|JSONObject
name|jsonDep
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|jsonDep
operator|.
name|put
argument_list|(
literal|"parent"
argument_list|,
name|dep
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|jsonDep
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|dep
operator|.
name|getShuffleType
argument_list|()
argument_list|)
expr_stmt|;
name|jsonDep
operator|.
name|put
argument_list|(
literal|"partitions"
argument_list|,
name|dep
operator|.
name|getNumPartitions
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|accumulate
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|jsonDep
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jsonOutput
condition|)
block|{
name|json
operator|.
name|put
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|ent
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Map
condition|)
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jsonOutput
condition|)
block|{
name|json
operator|.
name|put
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ent
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|JSONObject
name|jsonOut
init|=
name|outputPlan
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
argument_list|,
name|out
argument_list|,
name|extended
argument_list|,
name|jsonOutput
argument_list|,
name|jsonOutput
condition|?
literal|0
else|:
name|indent
operator|+
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonOutput
condition|)
block|{
name|json
operator|.
name|put
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|jsonOut
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|jsonOutput
condition|?
name|json
else|:
literal|null
return|;
block|}
specifier|private
name|JSONArray
name|outputList
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|l
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|boolean
name|hasHeader
parameter_list|,
name|boolean
name|extended
parameter_list|,
name|boolean
name|jsonOutput
parameter_list|,
name|int
name|indent
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|first_el
init|=
literal|true
decl_stmt|;
name|boolean
name|nl
init|=
literal|false
decl_stmt|;
name|JSONArray
name|outputArray
init|=
operator|new
name|JSONArray
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|l
control|)
block|{
if|if
condition|(
name|isPrintable
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|String
name|delim
init|=
name|first_el
condition|?
literal|" "
else|:
literal|", "
decl_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|delim
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jsonOutput
condition|)
block|{
name|outputArray
operator|.
name|put
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|nl
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|first_el
operator|&&
operator|(
name|out
operator|!=
literal|null
operator|)
operator|&&
name|hasHeader
condition|)
block|{
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|JSONObject
name|jsonOut
init|=
name|outputPlan
argument_list|(
name|o
argument_list|,
name|out
argument_list|,
name|extended
argument_list|,
name|jsonOutput
argument_list|,
name|jsonOutput
condition|?
literal|0
else|:
operator|(
name|hasHeader
condition|?
name|indent
operator|+
literal|2
else|:
name|indent
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonOutput
condition|)
block|{
name|outputArray
operator|.
name|put
argument_list|(
name|jsonOut
argument_list|)
expr_stmt|;
block|}
block|}
name|first_el
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|nl
operator|&&
operator|(
name|out
operator|!=
literal|null
operator|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
return|return
name|jsonOutput
condition|?
name|outputArray
else|:
literal|null
return|;
block|}
specifier|private
name|boolean
name|isPrintable
parameter_list|(
name|Object
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|instanceof
name|Boolean
operator|||
name|val
operator|instanceof
name|String
operator|||
name|val
operator|instanceof
name|Integer
operator|||
name|val
operator|instanceof
name|Long
operator|||
name|val
operator|instanceof
name|Byte
operator|||
name|val
operator|instanceof
name|Float
operator|||
name|val
operator|instanceof
name|Double
operator|||
name|val
operator|instanceof
name|Path
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|val
operator|!=
literal|null
operator|&&
name|val
operator|.
name|getClass
argument_list|()
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|JSONObject
name|outputPlan
parameter_list|(
name|Object
name|work
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|boolean
name|extended
parameter_list|,
name|boolean
name|jsonOutput
parameter_list|,
name|int
name|indent
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|outputPlan
argument_list|(
name|work
argument_list|,
name|out
argument_list|,
name|extended
argument_list|,
name|jsonOutput
argument_list|,
name|indent
argument_list|,
literal|""
argument_list|)
return|;
block|}
specifier|private
name|JSONObject
name|outputPlan
parameter_list|(
name|Object
name|work
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|boolean
name|extended
parameter_list|,
name|boolean
name|jsonOutput
parameter_list|,
name|int
name|indent
parameter_list|,
name|String
name|appendToHeader
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Check if work has an explain annotation
name|Annotation
name|note
init|=
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|work
operator|.
name|getClass
argument_list|()
argument_list|,
name|Explain
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|keyJSONObject
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|note
operator|instanceof
name|Explain
condition|)
block|{
name|Explain
name|xpl_note
init|=
operator|(
name|Explain
operator|)
name|note
decl_stmt|;
if|if
condition|(
name|extended
operator|||
name|xpl_note
operator|.
name|normalExplain
argument_list|()
condition|)
block|{
name|keyJSONObject
operator|=
name|xpl_note
operator|.
name|displayName
argument_list|()
expr_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|indentString
argument_list|(
name|indent
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|appendToHeader
operator|!=
literal|null
operator|&&
operator|!
name|appendToHeader
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|xpl_note
operator|.
name|displayName
argument_list|()
operator|+
name|appendToHeader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
name|xpl_note
operator|.
name|displayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|JSONObject
name|json
init|=
name|jsonOutput
condition|?
operator|new
name|JSONObject
argument_list|()
else|:
literal|null
decl_stmt|;
comment|// If this is an operator then we need to call the plan generation on the
comment|// conf and then the children
if|if
condition|(
name|work
operator|instanceof
name|Operator
condition|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|operator
init|=
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
operator|)
name|work
decl_stmt|;
if|if
condition|(
name|operator
operator|.
name|getConf
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|appender
init|=
name|isLogical
condition|?
literal|" ("
operator|+
name|operator
operator|.
name|getOperatorId
argument_list|()
operator|+
literal|")"
else|:
literal|""
decl_stmt|;
name|JSONObject
name|jsonOut
init|=
name|outputPlan
argument_list|(
name|operator
operator|.
name|getConf
argument_list|()
argument_list|,
name|out
argument_list|,
name|extended
argument_list|,
name|jsonOutput
argument_list|,
name|jsonOutput
condition|?
literal|0
else|:
name|indent
argument_list|,
name|appender
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonOutput
condition|)
block|{
name|json
operator|=
name|jsonOut
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|visitedOps
operator|.
name|contains
argument_list|(
name|operator
argument_list|)
operator|||
operator|!
name|isLogical
condition|)
block|{
name|visitedOps
operator|.
name|add
argument_list|(
name|operator
argument_list|)
expr_stmt|;
if|if
condition|(
name|operator
operator|.
name|getChildOperators
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|cindent
init|=
name|jsonOutput
condition|?
literal|0
else|:
name|indent
operator|+
literal|2
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
range|:
name|operator
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
name|JSONObject
name|jsonOut
init|=
name|outputPlan
argument_list|(
name|op
argument_list|,
name|out
argument_list|,
name|extended
argument_list|,
name|jsonOutput
argument_list|,
name|cindent
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonOutput
condition|)
block|{
operator|(
operator|(
name|JSONObject
operator|)
name|json
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|getNames
argument_list|(
name|json
argument_list|)
index|[
literal|0
index|]
argument_list|)
operator|)
operator|.
name|accumulate
argument_list|(
literal|"children"
argument_list|,
name|jsonOut
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|jsonOutput
condition|)
block|{
return|return
name|json
return|;
block|}
return|return
literal|null
return|;
block|}
comment|// We look at all methods that generate values for explain
name|Method
index|[]
name|methods
init|=
name|work
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|methods
argument_list|,
operator|new
name|MethodComparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|methods
control|)
block|{
name|int
name|prop_indents
init|=
name|jsonOutput
condition|?
literal|0
else|:
name|indent
operator|+
literal|2
decl_stmt|;
name|note
operator|=
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|m
argument_list|,
name|Explain
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|note
operator|instanceof
name|Explain
condition|)
block|{
name|Explain
name|xpl_note
init|=
operator|(
name|Explain
operator|)
name|note
decl_stmt|;
if|if
condition|(
name|extended
operator|||
name|xpl_note
operator|.
name|normalExplain
argument_list|()
condition|)
block|{
name|Object
name|val
init|=
literal|null
decl_stmt|;
try|try
block|{
name|val
operator|=
name|m
operator|.
name|invoke
argument_list|(
name|work
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ex
parameter_list|)
block|{
comment|// Ignore the exception, this may be caused by external jars
name|val
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|header
init|=
literal|null
decl_stmt|;
name|boolean
name|skipHeader
init|=
name|xpl_note
operator|.
name|skipHeader
argument_list|()
decl_stmt|;
name|boolean
name|emptyHeader
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|xpl_note
operator|.
name|displayName
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|header
operator|=
name|indentString
argument_list|(
name|prop_indents
argument_list|)
operator|+
name|xpl_note
operator|.
name|displayName
argument_list|()
operator|+
literal|":"
expr_stmt|;
block|}
else|else
block|{
name|emptyHeader
operator|=
literal|true
expr_stmt|;
name|prop_indents
operator|=
name|indent
expr_stmt|;
name|header
operator|=
name|indentString
argument_list|(
name|prop_indents
argument_list|)
expr_stmt|;
block|}
comment|// Try the output as a primitive object
if|if
condition|(
name|isPrintable
argument_list|(
name|val
argument_list|)
condition|)
block|{
if|if
condition|(
name|out
operator|!=
literal|null
operator|&&
name|shouldPrint
argument_list|(
name|xpl_note
argument_list|,
name|val
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|skipHeader
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jsonOutput
operator|&&
name|shouldPrint
argument_list|(
name|xpl_note
argument_list|,
name|val
argument_list|)
condition|)
block|{
name|json
operator|.
name|put
argument_list|(
name|header
argument_list|,
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|int
name|ind
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|jsonOutput
condition|)
block|{
if|if
condition|(
operator|!
name|skipHeader
condition|)
block|{
name|ind
operator|=
name|prop_indents
operator|+
literal|2
expr_stmt|;
block|}
else|else
block|{
name|ind
operator|=
name|indent
expr_stmt|;
block|}
block|}
comment|// Try this as a map
if|if
condition|(
name|val
operator|instanceof
name|Map
condition|)
block|{
comment|// Go through the map and print out the stuff
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|mp
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|val
decl_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
operator|&&
operator|!
name|skipHeader
operator|&&
name|mp
operator|!=
literal|null
operator|&&
operator|!
name|mp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|header
argument_list|)
expr_stmt|;
block|}
name|JSONObject
name|jsonOut
init|=
name|outputMap
argument_list|(
name|mp
argument_list|,
operator|!
name|skipHeader
operator|&&
operator|!
name|emptyHeader
argument_list|,
name|out
argument_list|,
name|extended
argument_list|,
name|jsonOutput
argument_list|,
name|ind
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonOutput
operator|&&
operator|!
name|mp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|json
operator|.
name|put
argument_list|(
name|header
argument_list|,
name|jsonOut
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
comment|// Try this as a list
if|if
condition|(
name|val
operator|instanceof
name|List
operator|||
name|val
operator|instanceof
name|Set
condition|)
block|{
name|List
name|l
init|=
name|val
operator|instanceof
name|List
condition|?
operator|(
name|List
operator|)
name|val
else|:
operator|new
name|ArrayList
argument_list|(
operator|(
name|Set
operator|)
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
operator|&&
operator|!
name|skipHeader
operator|&&
name|l
operator|!=
literal|null
operator|&&
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|header
argument_list|)
expr_stmt|;
block|}
name|JSONArray
name|jsonOut
init|=
name|outputList
argument_list|(
name|l
argument_list|,
name|out
argument_list|,
operator|!
name|skipHeader
operator|&&
operator|!
name|emptyHeader
argument_list|,
name|extended
argument_list|,
name|jsonOutput
argument_list|,
name|ind
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonOutput
operator|&&
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|json
operator|.
name|put
argument_list|(
name|header
argument_list|,
name|jsonOut
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
comment|// Finally check if it is serializable
try|try
block|{
if|if
condition|(
operator|!
name|skipHeader
operator|&&
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|header
argument_list|)
expr_stmt|;
block|}
name|JSONObject
name|jsonOut
init|=
name|outputPlan
argument_list|(
name|val
argument_list|,
name|out
argument_list|,
name|extended
argument_list|,
name|jsonOutput
argument_list|,
name|ind
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonOutput
condition|)
block|{
if|if
condition|(
operator|!
name|skipHeader
condition|)
block|{
name|json
operator|.
name|put
argument_list|(
name|header
argument_list|,
name|jsonOut
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|k
range|:
name|JSONObject
operator|.
name|getNames
argument_list|(
name|jsonOut
argument_list|)
control|)
block|{
name|json
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|jsonOut
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
continue|continue;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|ce
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
block|}
if|if
condition|(
name|jsonOutput
condition|)
block|{
if|if
condition|(
name|keyJSONObject
operator|!=
literal|null
condition|)
block|{
name|JSONObject
name|ret
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|keyJSONObject
argument_list|,
name|json
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
return|return
name|json
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * use case: we want to print the object in explain only if it is true    * how to do : print it unless the following 3 are all true:    * 1. displayOnlyOnTrue tag is on    * 2. object is boolean    * 3. object is false    * @param exp    * @param val    * @return    */
specifier|private
name|boolean
name|shouldPrint
parameter_list|(
name|Explain
name|exp
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
if|if
condition|(
name|exp
operator|.
name|displayOnlyOnTrue
argument_list|()
operator|&&
operator|(
name|val
operator|instanceof
name|Boolean
operator|)
operator|&
operator|!
operator|(
operator|(
name|Boolean
operator|)
name|val
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|JSONObject
name|outputPlan
parameter_list|(
name|Task
argument_list|<
name|?
argument_list|>
name|task
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|JSONObject
name|parentJSON
parameter_list|,
name|boolean
name|extended
parameter_list|,
name|boolean
name|jsonOutput
parameter_list|,
name|int
name|indent
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|indentString
argument_list|(
name|indent
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"Stage: "
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|task
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
comment|// Start by getting the work part of the task and call the output plan for
comment|// the work
name|JSONObject
name|jsonOutputPlan
init|=
name|outputPlan
argument_list|(
name|task
operator|.
name|getWork
argument_list|()
argument_list|,
name|out
argument_list|,
name|extended
argument_list|,
name|jsonOutput
argument_list|,
name|jsonOutput
condition|?
literal|0
else|:
name|indent
operator|+
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jsonOutput
condition|)
block|{
name|parentJSON
operator|.
name|put
argument_list|(
name|task
operator|.
name|getId
argument_list|()
argument_list|,
name|jsonOutputPlan
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|JSONObject
name|outputDependencies
parameter_list|(
name|Task
argument_list|<
name|?
argument_list|>
name|task
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|JSONObject
name|parentJson
parameter_list|,
name|boolean
name|jsonOutput
parameter_list|,
name|boolean
name|taskType
parameter_list|,
name|int
name|indent
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|JSONObject
name|json
init|=
name|jsonOutput
condition|?
operator|new
name|JSONObject
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|indentString
argument_list|(
name|indent
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|task
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|task
operator|.
name|getParentTasks
argument_list|()
operator|==
literal|null
operator|||
name|task
operator|.
name|getParentTasks
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|task
operator|.
name|isRootTask
argument_list|()
condition|)
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" is a root stage"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jsonOutput
condition|)
block|{
name|json
operator|.
name|put
argument_list|(
literal|"ROOT STAGE"
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|StringBuffer
name|s
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|first
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
argument_list|>
name|parent
range|:
name|task
operator|.
name|getParentTasks
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|parent
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" depends on stages: "
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jsonOutput
condition|)
block|{
name|json
operator|.
name|put
argument_list|(
literal|"DEPENDENT STAGES"
argument_list|,
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Task
argument_list|<
name|?
argument_list|>
name|currBackupTask
init|=
name|task
operator|.
name|getBackupTask
argument_list|()
decl_stmt|;
if|if
condition|(
name|currBackupTask
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" has a backup stage: "
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|currBackupTask
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jsonOutput
condition|)
block|{
name|json
operator|.
name|put
argument_list|(
literal|"BACKUP STAGE"
argument_list|,
name|currBackupTask
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|task
operator|instanceof
name|ConditionalTask
operator|&&
operator|(
operator|(
name|ConditionalTask
operator|)
name|task
operator|)
operator|.
name|getListTasks
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|StringBuffer
name|s
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|first
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
argument_list|>
name|con
range|:
operator|(
operator|(
name|ConditionalTask
operator|)
name|task
operator|)
operator|.
name|getListTasks
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|con
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" , consists of "
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jsonOutput
condition|)
block|{
name|json
operator|.
name|put
argument_list|(
literal|"CONDITIONAL CHILD TASKS"
argument_list|,
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|taskType
condition|)
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" ["
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|task
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jsonOutput
condition|)
block|{
name|json
operator|.
name|put
argument_list|(
literal|"TASK TYPE"
argument_list|,
name|task
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
return|return
name|jsonOutput
condition|?
name|json
else|:
literal|null
return|;
block|}
specifier|public
name|String
name|outputAST
parameter_list|(
name|String
name|treeString
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|boolean
name|jsonOutput
parameter_list|,
name|int
name|indent
parameter_list|)
throws|throws
name|JSONException
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|indentString
argument_list|(
name|indent
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"ABSTRACT SYNTAX TREE:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|indentString
argument_list|(
name|indent
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|treeString
argument_list|)
expr_stmt|;
block|}
return|return
name|jsonOutput
condition|?
name|treeString
else|:
literal|null
return|;
block|}
specifier|public
name|JSONObject
name|outputDependencies
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|boolean
name|jsonOutput
parameter_list|,
name|boolean
name|appendTaskType
parameter_list|,
name|List
argument_list|<
name|Task
argument_list|>
name|tasks
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"STAGE DEPENDENCIES:"
argument_list|)
expr_stmt|;
block|}
name|JSONObject
name|json
init|=
name|jsonOutput
condition|?
operator|new
name|JSONObject
argument_list|()
else|:
literal|null
decl_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|tasks
control|)
block|{
name|JSONObject
name|jsonOut
init|=
name|outputDependencies
argument_list|(
name|task
argument_list|,
name|out
argument_list|,
name|json
argument_list|,
name|jsonOutput
argument_list|,
name|appendTaskType
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonOutput
operator|&&
name|jsonOut
operator|!=
literal|null
condition|)
block|{
name|json
operator|.
name|put
argument_list|(
name|task
operator|.
name|getId
argument_list|()
argument_list|,
name|jsonOut
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|jsonOutput
condition|?
name|json
else|:
literal|null
return|;
block|}
specifier|public
name|JSONObject
name|outputStagePlans
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|List
argument_list|<
name|Task
argument_list|>
name|tasks
parameter_list|,
name|boolean
name|jsonOutput
parameter_list|,
name|boolean
name|isExtended
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"STAGE PLANS:"
argument_list|)
expr_stmt|;
block|}
name|JSONObject
name|json
init|=
name|jsonOutput
condition|?
operator|new
name|JSONObject
argument_list|()
else|:
literal|null
decl_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|tasks
control|)
block|{
name|outputPlan
argument_list|(
name|task
argument_list|,
name|out
argument_list|,
name|json
argument_list|,
name|isExtended
argument_list|,
name|jsonOutput
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
return|return
name|jsonOutput
condition|?
name|json
else|:
literal|null
return|;
block|}
comment|/**    * MethodComparator.    *    */
specifier|public
class|class
name|MethodComparator
implements|implements
name|Comparator
argument_list|<
name|Method
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Method
name|m1
parameter_list|,
name|Method
name|m2
parameter_list|)
block|{
return|return
name|m1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|StageType
name|getType
parameter_list|()
block|{
return|return
name|StageType
operator|.
name|EXPLAIN
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"EXPLAIN"
return|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getResultSchema
parameter_list|()
block|{
name|FieldSchema
name|tmpFieldSchema
init|=
operator|new
name|FieldSchema
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|colList
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|tmpFieldSchema
operator|.
name|setName
argument_list|(
name|EXPL_COLUMN_NAME
argument_list|)
expr_stmt|;
name|tmpFieldSchema
operator|.
name|setType
argument_list|(
name|STRING_TYPE_NAME
argument_list|)
expr_stmt|;
name|colList
operator|.
name|add
argument_list|(
name|tmpFieldSchema
argument_list|)
expr_stmt|;
return|return
name|colList
return|;
block|}
block|}
end_class

end_unit

