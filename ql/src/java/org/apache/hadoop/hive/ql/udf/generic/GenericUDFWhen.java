begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|BooleanObjectInspector
import|;
end_import

begin_comment
comment|/**  * GenericUDF Class for SQL construct  * "CASE WHEN a THEN b WHEN c THEN d [ELSE f] END".  *   * NOTES: 1. a and c should be boolean, or an exception will be thrown. 2. b, d  * and f should be common types, or an exception will be thrown.  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"when"
argument_list|,
name|value
operator|=
literal|"CASE WHEN a THEN b [WHEN c THEN d]* [ELSE e] END - "
operator|+
literal|"When a = true, returns b; when c = true, return d; else return e"
argument_list|,
name|extended
operator|=
literal|"Example:\n "
operator|+
literal|"SELECT\n"
operator|+
literal|" CASE\n"
operator|+
literal|"   WHEN deptno=1 THEN Engineering\n"
operator|+
literal|"   WHEN deptno=2 THEN Finance\n"
operator|+
literal|"   ELSE admin\n"
operator|+
literal|" END,\n"
operator|+
literal|" CASE\n"
operator|+
literal|"   WHEN zone=7 THEN Americas\n"
operator|+
literal|"   ELSE Asia-Pac\n"
operator|+
literal|" END\n"
operator|+
literal|" FROM emp_details"
argument_list|)
specifier|public
class|class
name|GenericUDFWhen
extends|extends
name|GenericUDF
block|{
specifier|private
specifier|transient
name|ObjectInspector
index|[]
name|argumentOIs
decl_stmt|;
specifier|private
specifier|transient
name|GenericUDFUtils
operator|.
name|ReturnObjectInspectorResolver
name|returnOIResolver
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentTypeException
block|{
name|argumentOIs
operator|=
name|arguments
expr_stmt|;
name|returnOIResolver
operator|=
operator|new
name|GenericUDFUtils
operator|.
name|ReturnObjectInspectorResolver
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|+
literal|1
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
if|if
condition|(
operator|!
name|arguments
index|[
name|i
index|]
operator|.
name|getTypeName
argument_list|()
operator|.
name|equals
argument_list|(
name|serdeConstants
operator|.
name|BOOLEAN_TYPE_NAME
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
name|i
argument_list|,
literal|"\""
operator|+
name|serdeConstants
operator|.
name|BOOLEAN_TYPE_NAME
operator|+
literal|"\" is expected after WHEN, "
operator|+
literal|"but \""
operator|+
name|arguments
index|[
name|i
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|"\" is found"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|returnOIResolver
operator|.
name|update
argument_list|(
name|arguments
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
name|i
operator|+
literal|1
argument_list|,
literal|"The expressions after THEN should have the same type: \""
operator|+
name|returnOIResolver
operator|.
name|get
argument_list|()
operator|.
name|getTypeName
argument_list|()
operator|+
literal|"\" is expected but \""
operator|+
name|arguments
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|"\" is found"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|arguments
operator|.
name|length
operator|%
literal|2
operator|==
literal|1
condition|)
block|{
name|int
name|i
init|=
name|arguments
operator|.
name|length
operator|-
literal|2
decl_stmt|;
if|if
condition|(
operator|!
name|returnOIResolver
operator|.
name|update
argument_list|(
name|arguments
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
name|i
operator|+
literal|1
argument_list|,
literal|"The expression after ELSE should have the same type as those after THEN: \""
operator|+
name|returnOIResolver
operator|.
name|get
argument_list|()
operator|.
name|getTypeName
argument_list|()
operator|+
literal|"\" is expected but \""
operator|+
name|arguments
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|"\" is found"
argument_list|)
throw|;
block|}
block|}
return|return
name|returnOIResolver
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|+
literal|1
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|Object
name|caseKey
init|=
name|arguments
index|[
name|i
index|]
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|caseKey
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|BooleanObjectInspector
operator|)
name|argumentOIs
index|[
name|i
index|]
operator|)
operator|.
name|get
argument_list|(
name|caseKey
argument_list|)
condition|)
block|{
name|Object
name|caseValue
init|=
name|arguments
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|returnOIResolver
operator|.
name|convertIfNecessary
argument_list|(
name|caseValue
argument_list|,
name|argumentOIs
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
return|;
block|}
block|}
comment|// Process else statement
if|if
condition|(
name|arguments
operator|.
name|length
operator|%
literal|2
operator|==
literal|1
condition|)
block|{
name|int
name|i
init|=
name|arguments
operator|.
name|length
operator|-
literal|2
decl_stmt|;
name|Object
name|elseValue
init|=
name|arguments
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|returnOIResolver
operator|.
name|convertIfNecessary
argument_list|(
name|elseValue
argument_list|,
name|argumentOIs
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
assert|assert
operator|(
name|children
operator|.
name|length
operator|>=
literal|2
operator|)
assert|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"CASE"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|+
literal|1
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" WHEN ("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|children
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|") THEN ("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|children
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|children
operator|.
name|length
operator|%
literal|2
operator|==
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" ELSE ("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|children
index|[
name|children
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" END"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

