begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|NullOrdering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
operator|.
name|NullValueOption
import|;
end_import

begin_comment
comment|/**  * Comparator for {@link KeyWrapper}.  * This comparator uses the {@link ObjectInspector}s provided in the newObjectInspectors array to extract key values  * from wrapped Object arrays by default.  * {@link KeyWrapper} instances are cloned when {@link KeyWrapper#copyKey()} is called. In this case the wrapped  * key values are deep copied and converted to standard objects using {@link ObjectInspectorUtils#copyToStandardObject}.  * The comparator uses copyObjectInspectors when extracting key values from clones.  */
end_comment

begin_class
specifier|public
class|class
name|KeyWrapperComparator
implements|implements
name|Comparator
argument_list|<
name|KeyWrapper
argument_list|>
block|{
specifier|private
specifier|final
name|ObjectInspector
index|[]
name|newObjectInspectors
decl_stmt|;
specifier|private
specifier|final
name|ObjectInspector
index|[]
name|copyObjectInspectors
decl_stmt|;
specifier|private
specifier|final
name|boolean
index|[]
name|columnSortOrderIsDesc
decl_stmt|;
specifier|private
specifier|final
name|NullValueOption
index|[]
name|nullSortOrder
decl_stmt|;
name|KeyWrapperComparator
parameter_list|(
name|ObjectInspector
index|[]
name|newObjectInspectors
parameter_list|,
name|ObjectInspector
index|[]
name|copyObjectInspectors
parameter_list|,
name|String
name|columnSortOrder
parameter_list|,
name|String
name|nullSortOrder
parameter_list|)
block|{
name|this
operator|.
name|newObjectInspectors
operator|=
name|newObjectInspectors
expr_stmt|;
name|this
operator|.
name|copyObjectInspectors
operator|=
name|copyObjectInspectors
expr_stmt|;
name|this
operator|.
name|columnSortOrderIsDesc
operator|=
operator|new
name|boolean
index|[
name|columnSortOrder
operator|.
name|length
argument_list|()
index|]
expr_stmt|;
name|this
operator|.
name|nullSortOrder
operator|=
operator|new
name|NullValueOption
index|[
name|nullSortOrder
operator|.
name|length
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnSortOrder
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|this
operator|.
name|columnSortOrderIsDesc
index|[
name|i
index|]
operator|=
name|columnSortOrder
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'-'
expr_stmt|;
name|this
operator|.
name|nullSortOrder
index|[
name|i
index|]
operator|=
name|NullOrdering
operator|.
name|fromSign
argument_list|(
name|nullSortOrder
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|getNullValueOption
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|KeyWrapper
name|key1
parameter_list|,
name|KeyWrapper
name|key2
parameter_list|)
block|{
return|return
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|key1
operator|.
name|getKeyArray
argument_list|()
argument_list|,
name|key1
operator|.
name|isCopy
argument_list|()
condition|?
name|copyObjectInspectors
else|:
name|newObjectInspectors
argument_list|,
name|key2
operator|.
name|getKeyArray
argument_list|()
argument_list|,
name|key2
operator|.
name|isCopy
argument_list|()
condition|?
name|copyObjectInspectors
else|:
name|newObjectInspectors
argument_list|,
name|columnSortOrderIsDesc
argument_list|,
name|nullSortOrder
argument_list|)
return|;
block|}
block|}
end_class

end_unit

