begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|GcTimeMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|mapjoin
operator|.
name|MapJoinMemoryExhaustionError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A {@link MemoryExhaustionChecker} specific to Hive-on-Spark. Unlike the  * {@link DefaultMemoryExhaustionChecker} it uses a {@link GcTimeMonitor}  * to monitor how much time (what percentage of run time within the last  * minute or so) is spent in GC. If this value exceeds the configured value  * in {@link HiveConf.ConfVars#HIVEHASHTABLEMAXGCTIMEPERCENTAGE}, a  * {@link MapJoinMemoryExhaustionError} is thrown.  */
end_comment

begin_class
class|class
name|SparkMemoryExhaustionChecker
implements|implements
name|MemoryExhaustionChecker
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SparkMemoryExhaustionChecker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|SparkMemoryExhaustionChecker
name|INSTANCE
decl_stmt|;
comment|// The GC time alert functionality below is used by the checkGcOverhead() method.
comment|// This method may be called very frequently, and if it called
comment|// GcTimeMonitor.getLatestGcData() every time, it could result in unnecessary
comment|// overhead due to synchronization and new object creation. So instead,
comment|// GcTimeMonitor itself sets the "red flag" in lastAlertGcTimePercentage,
comment|// and checkGcOverhead() may check it as frequently as needed.
specifier|private
specifier|volatile
name|int
name|lastAlertGcTimePercentage
decl_stmt|;
specifier|private
specifier|final
name|int
name|criticalGcTimePercentage
decl_stmt|;
specifier|private
name|SparkMemoryExhaustionChecker
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|criticalGcTimePercentage
operator|=
call|(
name|int
call|)
argument_list|(
name|HiveConf
operator|.
name|getFloatVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEHASHTABLEMAXGCTIMEPERCENTAGE
argument_list|)
operator|*
literal|100
argument_list|)
expr_stmt|;
name|GcTimeMonitor
name|hiveGcTimeMonitor
init|=
operator|new
name|HiveGcTimeMonitor
argument_list|(
name|criticalGcTimePercentage
argument_list|)
decl_stmt|;
name|hiveGcTimeMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|static
specifier|synchronized
name|SparkMemoryExhaustionChecker
name|get
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|INSTANCE
operator|==
literal|null
condition|)
block|{
name|INSTANCE
operator|=
operator|new
name|SparkMemoryExhaustionChecker
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|INSTANCE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkMemoryOverhead
parameter_list|(
name|long
name|rowNumber
parameter_list|,
name|long
name|hashTableScale
parameter_list|,
name|int
name|tableContainerSize
parameter_list|)
block|{
if|if
condition|(
name|lastAlertGcTimePercentage
operator|>=
name|criticalGcTimePercentage
condition|)
block|{
name|String
name|msg
init|=
literal|"GC time percentage = "
operator|+
name|lastAlertGcTimePercentage
operator|+
literal|"% exceeded threshold "
operator|+
name|criticalGcTimePercentage
operator|+
literal|"%"
decl_stmt|;
throw|throw
operator|new
name|MapJoinMemoryExhaustionError
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
comment|// GC time monitoring
specifier|private
class|class
name|HiveGcTimeMonitor
extends|extends
name|GcTimeMonitor
block|{
name|HiveGcTimeMonitor
parameter_list|(
name|int
name|criticalGcTimePercentage
parameter_list|)
block|{
name|super
argument_list|(
literal|45
operator|*
literal|1000
argument_list|,
literal|200
argument_list|,
name|criticalGcTimePercentage
argument_list|,
operator|new
name|HiveGcTimeAlertHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|HiveGcTimeAlertHandler
implements|implements
name|GcTimeMonitor
operator|.
name|GcTimeAlertHandler
block|{
annotation|@
name|Override
specifier|public
name|void
name|alert
parameter_list|(
name|GcTimeMonitor
operator|.
name|GcData
name|gcData
parameter_list|)
block|{
name|lastAlertGcTimePercentage
operator|=
name|gcData
operator|.
name|getGcTimePercentage
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"GcTimeMonitor alert called. Current GC time = "
operator|+
name|lastAlertGcTimePercentage
operator|+
literal|"%"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

