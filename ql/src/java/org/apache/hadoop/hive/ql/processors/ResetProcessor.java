begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveVariableSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|SystemVariables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|VariableSubstitution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveOperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_class
specifier|public
class|class
name|ResetProcessor
implements|implements
name|CommandProcessor
block|{
specifier|private
specifier|final
specifier|static
name|String
name|DEFAULT_ARG
init|=
literal|"-d"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|CommandProcessorResponse
name|run
parameter_list|(
name|String
name|command
parameter_list|)
throws|throws
name|CommandProcessorException
block|{
return|return
name|run
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
argument_list|,
name|command
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
name|CommandProcessorResponse
name|run
parameter_list|(
name|SessionState
name|ss
parameter_list|,
name|String
name|command
parameter_list|)
throws|throws
name|CommandProcessorException
block|{
name|CommandProcessorResponse
name|authErrResp
init|=
name|CommandUtil
operator|.
name|authorizeCommand
argument_list|(
name|ss
argument_list|,
name|HiveOperationType
operator|.
name|RESET
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|command
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|authErrResp
operator|!=
literal|null
condition|)
block|{
comment|// there was an authorization issue
return|return
name|authErrResp
return|;
block|}
name|command
operator|=
name|command
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|resetOverridesOnly
argument_list|(
name|ss
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|()
return|;
block|}
name|String
index|[]
name|parts
init|=
name|command
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
name|boolean
name|isDefault
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|varnames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|parts
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
if|if
condition|(
name|part
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|DEFAULT_ARG
operator|.
name|equals
argument_list|(
name|part
argument_list|)
condition|)
block|{
name|isDefault
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|varnames
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|varnames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CommandProcessorException
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|"No variable names specified"
argument_list|,
literal|"42000"
argument_list|,
literal|null
argument_list|)
throw|;
block|}
name|String
name|variableNames
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|varname
range|:
name|varnames
control|)
block|{
if|if
condition|(
name|isDefault
condition|)
block|{
if|if
condition|(
operator|!
name|variableNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|variableNames
operator|+=
literal|", "
expr_stmt|;
block|}
name|variableNames
operator|+=
name|varname
expr_stmt|;
name|resetToDefault
argument_list|(
name|ss
argument_list|,
name|varname
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resetOverrideOnly
argument_list|(
name|ss
argument_list|,
name|varname
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|message
init|=
name|isDefault
condition|?
literal|"Resetting "
operator|+
name|variableNames
operator|+
literal|" to default values"
else|:
literal|null
decl_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|null
argument_list|,
name|message
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|resetOverridesOnly
parameter_list|(
name|SessionState
name|ss
parameter_list|)
block|{
if|if
condition|(
name|ss
operator|.
name|getOverriddenConfigurations
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|ss
operator|.
name|getOverriddenConfigurations
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|setSessionVariableFromConf
argument_list|(
name|ss
argument_list|,
name|key
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|ss
operator|.
name|getOverriddenConfigurations
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|resetOverrideOnly
parameter_list|(
name|SessionState
name|ss
parameter_list|,
name|String
name|varname
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ss
operator|.
name|getOverriddenConfigurations
argument_list|()
operator|.
name|containsKey
argument_list|(
name|varname
argument_list|)
condition|)
block|{
return|return;
block|}
name|setSessionVariableFromConf
argument_list|(
name|ss
argument_list|,
name|varname
argument_list|,
operator|new
name|HiveConf
argument_list|()
argument_list|)
expr_stmt|;
name|ss
operator|.
name|getOverriddenConfigurations
argument_list|()
operator|.
name|remove
argument_list|(
name|varname
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|setSessionVariableFromConf
parameter_list|(
name|SessionState
name|ss
parameter_list|,
name|String
name|varname
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
block|{
name|String
name|value
init|=
name|conf
operator|.
name|get
argument_list|(
name|varname
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|SetProcessor
operator|.
name|setConf
argument_list|(
name|ss
argument_list|,
name|varname
argument_list|,
name|varname
argument_list|,
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|CommandProcessorResponse
name|resetToDefault
parameter_list|(
name|SessionState
name|ss
parameter_list|,
name|String
name|varname
parameter_list|)
throws|throws
name|CommandProcessorException
block|{
name|varname
operator|=
name|varname
operator|.
name|trim
argument_list|()
expr_stmt|;
try|try
block|{
name|String
name|nonErrorMessage
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|varname
operator|.
name|startsWith
argument_list|(
name|SystemVariables
operator|.
name|HIVECONF_PREFIX
argument_list|)
condition|)
block|{
name|String
name|propName
init|=
name|varname
operator|.
name|substring
argument_list|(
name|SystemVariables
operator|.
name|HIVECONF_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|nonErrorMessage
operator|=
name|SetProcessor
operator|.
name|setConf
argument_list|(
name|varname
argument_list|,
name|propName
argument_list|,
name|getConfVar
argument_list|(
name|propName
argument_list|)
operator|.
name|getDefaultValue
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|varname
operator|.
name|startsWith
argument_list|(
name|SystemVariables
operator|.
name|METACONF_PREFIX
argument_list|)
condition|)
block|{
name|String
name|propName
init|=
name|varname
operator|.
name|substring
argument_list|(
name|SystemVariables
operator|.
name|METACONF_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|HiveConf
operator|.
name|ConfVars
name|confVars
init|=
name|getConfVar
argument_list|(
name|propName
argument_list|)
decl_stmt|;
name|Hive
operator|.
name|get
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|setMetaConf
argument_list|(
name|propName
argument_list|,
operator|new
name|VariableSubstitution
argument_list|(
operator|new
name|HiveVariableSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHiveVariable
parameter_list|()
block|{
return|return
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveVariables
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|substitute
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
argument_list|,
name|confVars
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|defaultVal
init|=
name|getConfVar
argument_list|(
name|varname
argument_list|)
operator|.
name|getDefaultValue
argument_list|()
decl_stmt|;
name|nonErrorMessage
operator|=
name|SetProcessor
operator|.
name|setConf
argument_list|(
name|varname
argument_list|,
name|varname
argument_list|,
name|defaultVal
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|varname
operator|.
name|equals
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SESSION_HISTORY_ENABLED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|updateHistory
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|defaultVal
argument_list|)
argument_list|,
name|ss
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|null
argument_list|,
name|nonErrorMessage
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Throwable
name|exception
init|=
name|e
operator|instanceof
name|IllegalArgumentException
condition|?
literal|null
else|:
name|e
decl_stmt|;
throw|throw
operator|new
name|CommandProcessorException
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"42000"
argument_list|,
name|exception
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|HiveConf
operator|.
name|ConfVars
name|getConfVar
parameter_list|(
name|String
name|propName
parameter_list|)
block|{
name|HiveConf
operator|.
name|ConfVars
name|confVars
init|=
name|HiveConf
operator|.
name|getConfVars
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|confVars
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|propName
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
return|return
name|confVars
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{   }
block|}
end_class

end_unit

