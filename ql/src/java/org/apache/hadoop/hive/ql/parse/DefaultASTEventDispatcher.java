begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|tree
operator|.
name|CommonTree
import|;
end_import

begin_comment
comment|/**  * Implementation of a default ParseTreeEventDispatcher. This dispatcher calls  * the associated ParseTreeEventProcessors in the order in which they were  * registered for the event  *  */
end_comment

begin_class
specifier|public
class|class
name|DefaultASTEventDispatcher
implements|implements
name|ASTEventDispatcher
block|{
comment|/** 	 * Stores the mapping from the ParseTreeEvent to the list of ParseTreeEventProcessors. 	 * The later are stored in the order that they were registered. 	 */
specifier|private
name|HashMap
argument_list|<
name|ASTEvent
argument_list|,
name|ArrayList
argument_list|<
name|ASTEventProcessor
argument_list|>
argument_list|>
name|dispatchMap
decl_stmt|;
comment|/** 	 * Constructs the default event dispatcher 	 */
name|DefaultASTEventDispatcher
parameter_list|()
block|{
name|dispatchMap
operator|=
operator|new
name|HashMap
argument_list|<
name|ASTEvent
argument_list|,
name|ArrayList
argument_list|<
name|ASTEventProcessor
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Dispatches the parse subtree to all the event processors registered for the 	 * event in the order that they were registered. 	 *  	 * @see org.apache.hadoop.hive.ql.parse.ASTEventDispatcher#dispatch(org.apache.hadoop.hive.ql.parse.ASTEvent, org.antlr.runtime.tree.CommonTree) 	 */
annotation|@
name|Override
specifier|public
name|void
name|dispatch
parameter_list|(
name|ASTEvent
name|evt
parameter_list|,
name|CommonTree
name|pt
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ASTEventProcessor
argument_list|>
name|evtp_l
init|=
name|dispatchMap
operator|.
name|get
argument_list|(
name|evt
argument_list|)
decl_stmt|;
if|if
condition|(
name|evtp_l
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|ASTEventProcessor
name|evt_p
range|:
name|evtp_l
control|)
block|{
comment|// Do the actual dispatch
name|evt_p
operator|.
name|process
argument_list|(
name|pt
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Registers the event processor for the event. 	 *  	 * @see org.apache.hadoop.hive.ql.parse.ASTEventDispatcher#register(org.apache.hadoop.hive.ql.parse.ASTEvent, org.apache.hadoop.hive.ql.parse.ASTEventProcessor) 	 */
annotation|@
name|Override
specifier|public
name|void
name|register
parameter_list|(
name|ASTEvent
name|evt
parameter_list|,
name|ASTEventProcessor
name|evt_p
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ASTEventProcessor
argument_list|>
name|evtp_l
init|=
name|dispatchMap
operator|.
name|get
argument_list|(
name|evt
argument_list|)
decl_stmt|;
if|if
condition|(
name|evtp_l
operator|==
literal|null
condition|)
block|{
name|evtp_l
operator|=
operator|new
name|ArrayList
argument_list|<
name|ASTEventProcessor
argument_list|>
argument_list|()
expr_stmt|;
name|dispatchMap
operator|.
name|put
argument_list|(
name|evt
argument_list|,
name|evtp_l
argument_list|)
expr_stmt|;
block|}
name|evtp_l
operator|.
name|add
argument_list|(
name|evt_p
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

