begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|reexec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ExecuteWithHookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|HookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|HookContext
operator|.
name|HookType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapper
operator|.
name|PlanMapper
import|;
end_import

begin_comment
comment|/**  * Re-Executes a query only adding an extra overlay  */
end_comment

begin_class
specifier|public
class|class
name|ReExecutionOverlayPlugin
implements|implements
name|IReExecutionPlugin
block|{
specifier|private
name|Driver
name|driver
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|subtree
decl_stmt|;
class|class
name|LocalHook
implements|implements
name|ExecuteWithHookContext
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|hookContext
operator|.
name|getHookType
argument_list|()
operator|==
name|HookType
operator|.
name|ON_FAILURE_HOOK
condition|)
block|{
name|Throwable
name|exception
init|=
name|hookContext
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Vertex failed,"
argument_list|)
condition|)
block|{
name|retryPossible
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Driver
name|driver
parameter_list|)
block|{
name|this
operator|.
name|driver
operator|=
name|driver
expr_stmt|;
name|driver
operator|.
name|getHookRunner
argument_list|()
operator|.
name|addOnFailureHook
argument_list|(
operator|new
name|LocalHook
argument_list|()
argument_list|)
expr_stmt|;
name|HiveConf
name|conf
init|=
name|driver
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|subtree
operator|=
name|conf
operator|.
name|subtree
argument_list|(
literal|"reexec.overlay"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|retryPossible
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|prepareToReExecute
parameter_list|()
block|{
name|HiveConf
name|conf
init|=
name|driver
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|verifyAndSetAll
argument_list|(
name|subtree
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|shouldReExecute
parameter_list|(
name|int
name|executionNum
parameter_list|)
block|{
return|return
name|executionNum
operator|==
literal|1
operator|&&
operator|!
name|subtree
operator|.
name|isEmpty
argument_list|()
operator|&&
name|retryPossible
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|shouldReExecute
parameter_list|(
name|int
name|executionNum
parameter_list|,
name|PlanMapper
name|pm1
parameter_list|,
name|PlanMapper
name|pm2
parameter_list|)
block|{
return|return
name|executionNum
operator|==
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeExecute
parameter_list|(
name|int
name|executionIndex
parameter_list|,
name|boolean
name|explainReOptimization
parameter_list|)
block|{   }
block|}
end_class

end_unit

