begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|DDLSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DDLWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|GrantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|GrantRevokeRoleDDL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PrincipalDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PrivilegeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PrivilegeObjectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|RevokeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|RoleDDLDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ShowGrantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_comment
comment|/**  * Default implementation of HiveAuthorizationTaskFactory  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
class|class
name|HiveAuthorizationTaskFactoryImpl
implements|implements
name|HiveAuthorizationTaskFactory
block|{
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|private
specifier|final
name|Hive
name|db
decl_stmt|;
specifier|public
name|HiveAuthorizationTaskFactoryImpl
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|Hive
name|db
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|createCreateRoleTask
parameter_list|(
name|ASTNode
name|ast
parameter_list|,
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|)
block|{
name|String
name|roleName
init|=
name|BaseSemanticAnalyzer
operator|.
name|unescapeIdentifier
argument_list|(
name|ast
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|RoleDDLDesc
name|roleDesc
init|=
operator|new
name|RoleDDLDesc
argument_list|(
name|roleName
argument_list|,
name|RoleDDLDesc
operator|.
name|RoleOperation
operator|.
name|CREATE_ROLE
argument_list|)
decl_stmt|;
return|return
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|,
name|roleDesc
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|createDropRoleTask
parameter_list|(
name|ASTNode
name|ast
parameter_list|,
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|)
block|{
name|String
name|roleName
init|=
name|BaseSemanticAnalyzer
operator|.
name|unescapeIdentifier
argument_list|(
name|ast
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|RoleDDLDesc
name|roleDesc
init|=
operator|new
name|RoleDDLDesc
argument_list|(
name|roleName
argument_list|,
name|RoleDDLDesc
operator|.
name|RoleOperation
operator|.
name|DROP_ROLE
argument_list|)
decl_stmt|;
return|return
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|,
name|roleDesc
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|createShowRoleGrantTask
parameter_list|(
name|ASTNode
name|ast
parameter_list|,
name|Path
name|resultFile
parameter_list|,
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|)
block|{
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PrincipalType
name|principalType
init|=
name|PrincipalType
operator|.
name|USER
decl_stmt|;
switch|switch
condition|(
name|child
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|TOK_USER
case|:
name|principalType
operator|=
name|PrincipalType
operator|.
name|USER
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_GROUP
case|:
name|principalType
operator|=
name|PrincipalType
operator|.
name|GROUP
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_ROLE
case|:
name|principalType
operator|=
name|PrincipalType
operator|.
name|ROLE
expr_stmt|;
break|break;
block|}
name|String
name|principalName
init|=
name|BaseSemanticAnalyzer
operator|.
name|unescapeIdentifier
argument_list|(
name|child
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|RoleDDLDesc
name|roleDesc
init|=
operator|new
name|RoleDDLDesc
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|RoleDDLDesc
operator|.
name|RoleOperation
operator|.
name|SHOW_ROLE_GRANT
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|roleDesc
operator|.
name|setResFile
argument_list|(
name|resultFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|,
name|roleDesc
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|createGrantTask
parameter_list|(
name|ASTNode
name|ast
parameter_list|,
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|PrivilegeDesc
argument_list|>
name|privilegeDesc
init|=
name|analyzePrivilegeListDef
argument_list|(
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PrincipalDesc
argument_list|>
name|principalDesc
init|=
name|analyzePrincipalListDef
argument_list|(
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|grantOption
init|=
literal|false
decl_stmt|;
name|PrivilegeObjectDesc
name|privilegeObj
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ast
operator|.
name|getChildCount
argument_list|()
operator|>
literal|2
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|ast
operator|.
name|getChildCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ASTNode
name|astChild
init|=
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|astChild
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_GRANT_WITH_OPTION
condition|)
block|{
name|grantOption
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|astChild
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_PRIV_OBJECT
condition|)
block|{
name|privilegeObj
operator|=
name|analyzePrivilegeObject
argument_list|(
name|astChild
argument_list|,
name|outputs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|userName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
operator|&&
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getAuthenticator
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|userName
operator|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getAuthenticator
argument_list|()
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
name|GrantDesc
name|grantDesc
init|=
operator|new
name|GrantDesc
argument_list|(
name|privilegeObj
argument_list|,
name|privilegeDesc
argument_list|,
name|principalDesc
argument_list|,
name|userName
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|grantOption
argument_list|)
decl_stmt|;
return|return
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|,
name|grantDesc
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|createRevokeTask
parameter_list|(
name|ASTNode
name|ast
parameter_list|,
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|PrivilegeDesc
argument_list|>
name|privilegeDesc
init|=
name|analyzePrivilegeListDef
argument_list|(
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PrincipalDesc
argument_list|>
name|principalDesc
init|=
name|analyzePrincipalListDef
argument_list|(
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|PrivilegeObjectDesc
name|hiveObj
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ast
operator|.
name|getChildCount
argument_list|()
operator|>
literal|2
condition|)
block|{
name|ASTNode
name|astChild
init|=
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|hiveObj
operator|=
name|analyzePrivilegeObject
argument_list|(
name|astChild
argument_list|,
name|outputs
argument_list|)
expr_stmt|;
block|}
name|RevokeDesc
name|revokeDesc
init|=
operator|new
name|RevokeDesc
argument_list|(
name|privilegeDesc
argument_list|,
name|principalDesc
argument_list|,
name|hiveObj
argument_list|)
decl_stmt|;
return|return
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|,
name|revokeDesc
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|createGrantRoleTask
parameter_list|(
name|ASTNode
name|ast
parameter_list|,
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|)
block|{
return|return
name|analyzeGrantRevokeRole
argument_list|(
literal|true
argument_list|,
name|ast
argument_list|,
name|inputs
argument_list|,
name|outputs
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|createShowGrantTask
parameter_list|(
name|ASTNode
name|ast
parameter_list|,
name|Path
name|resultFile
parameter_list|,
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|PrincipalDesc
name|principalDesc
init|=
literal|null
decl_stmt|;
name|PrivilegeObjectDesc
name|privHiveObj
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cols
init|=
literal|null
decl_stmt|;
name|ASTNode
name|param
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ast
operator|.
name|getChildCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|param
operator|=
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|principalDesc
operator|=
name|getPrincipalDesc
argument_list|(
name|param
argument_list|)
expr_stmt|;
if|if
condition|(
name|principalDesc
operator|!=
literal|null
condition|)
block|{
name|param
operator|=
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// shift one
block|}
block|}
if|if
condition|(
name|param
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|param
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_RESOURCE_ALL
condition|)
block|{
name|privHiveObj
operator|=
operator|new
name|PrivilegeObjectDesc
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|param
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_PRIV_OBJECT_COL
condition|)
block|{
name|privHiveObj
operator|=
operator|new
name|PrivilegeObjectDesc
argument_list|()
expr_stmt|;
comment|//set object name
name|String
name|text
init|=
name|param
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|privHiveObj
operator|.
name|setObject
argument_list|(
name|BaseSemanticAnalyzer
operator|.
name|unescapeIdentifier
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
comment|//set object type
name|ASTNode
name|objTypeNode
init|=
operator|(
name|ASTNode
operator|)
name|param
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|privHiveObj
operator|.
name|setTable
argument_list|(
name|objTypeNode
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TABLE_TYPE
argument_list|)
expr_stmt|;
comment|//set col and partition spec if specified
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|param
operator|.
name|getChildCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ASTNode
name|partOrCol
init|=
operator|(
name|ASTNode
operator|)
name|param
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|partOrCol
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_PARTSPEC
condition|)
block|{
name|privHiveObj
operator|.
name|setPartSpec
argument_list|(
name|DDLSemanticAnalyzer
operator|.
name|getPartSpec
argument_list|(
name|partOrCol
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|partOrCol
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TABCOLNAME
condition|)
block|{
name|cols
operator|=
name|BaseSemanticAnalyzer
operator|.
name|getColumnNames
argument_list|(
name|partOrCol
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Invalid token type "
operator|+
name|partOrCol
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
name|ShowGrantDesc
name|showGrant
init|=
operator|new
name|ShowGrantDesc
argument_list|(
name|resultFile
operator|.
name|toString
argument_list|()
argument_list|,
name|principalDesc
argument_list|,
name|privHiveObj
argument_list|,
name|cols
argument_list|)
decl_stmt|;
return|return
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|,
name|showGrant
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
specifier|private
name|PrincipalDesc
name|getPrincipalDesc
parameter_list|(
name|ASTNode
name|principal
parameter_list|)
block|{
name|PrincipalType
name|type
init|=
name|getPrincipalType
argument_list|(
name|principal
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|String
name|text
init|=
name|principal
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|String
name|principalName
init|=
name|BaseSemanticAnalyzer
operator|.
name|unescapeIdentifier
argument_list|(
name|text
argument_list|)
decl_stmt|;
return|return
operator|new
name|PrincipalDesc
argument_list|(
name|principalName
argument_list|,
name|type
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|PrincipalType
name|getPrincipalType
parameter_list|(
name|ASTNode
name|principal
parameter_list|)
block|{
switch|switch
condition|(
name|principal
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|TOK_USER
case|:
return|return
name|PrincipalType
operator|.
name|USER
return|;
case|case
name|HiveParser
operator|.
name|TOK_GROUP
case|:
return|return
name|PrincipalType
operator|.
name|GROUP
return|;
case|case
name|HiveParser
operator|.
name|TOK_ROLE
case|:
return|return
name|PrincipalType
operator|.
name|ROLE
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|createRevokeRoleTask
parameter_list|(
name|ASTNode
name|ast
parameter_list|,
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|)
block|{
return|return
name|analyzeGrantRevokeRole
argument_list|(
literal|false
argument_list|,
name|ast
argument_list|,
name|inputs
argument_list|,
name|outputs
argument_list|)
return|;
block|}
specifier|private
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|analyzeGrantRevokeRole
parameter_list|(
name|boolean
name|isGrant
parameter_list|,
name|ASTNode
name|ast
parameter_list|,
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|)
block|{
name|List
argument_list|<
name|PrincipalDesc
argument_list|>
name|principalDesc
init|=
name|analyzePrincipalListDef
argument_list|(
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
comment|//check if admin option has been specified
name|int
name|rolesStartPos
init|=
literal|1
decl_stmt|;
name|ASTNode
name|wAdminOption
init|=
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|wAdminOption
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_GRANT_WITH_ADMIN_OPTION
condition|)
block|{
name|rolesStartPos
operator|=
literal|2
expr_stmt|;
comment|//start reading role names from next postion
comment|//TODO: use the admin option
block|}
name|List
argument_list|<
name|String
argument_list|>
name|roles
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|rolesStartPos
init|;
name|i
operator|<
name|ast
operator|.
name|getChildCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|roles
operator|.
name|add
argument_list|(
name|BaseSemanticAnalyzer
operator|.
name|unescapeIdentifier
argument_list|(
name|ast
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|roleOwnerName
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
operator|&&
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getAuthenticator
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|roleOwnerName
operator|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getAuthenticator
argument_list|()
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
comment|//until change is made to use the admin option. Default to false with V2 authorization
name|boolean
name|isAdmin
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|isAuthorizationModeV2
argument_list|()
condition|?
literal|false
else|:
literal|true
decl_stmt|;
name|GrantRevokeRoleDDL
name|grantRevokeRoleDDL
init|=
operator|new
name|GrantRevokeRoleDDL
argument_list|(
name|isGrant
argument_list|,
name|roles
argument_list|,
name|principalDesc
argument_list|,
name|roleOwnerName
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|isAdmin
argument_list|)
decl_stmt|;
return|return
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|,
name|grantRevokeRoleDDL
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
specifier|private
name|PrivilegeObjectDesc
name|analyzePrivilegeObject
parameter_list|(
name|ASTNode
name|ast
parameter_list|,
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|PrivilegeObjectDesc
name|subject
init|=
operator|new
name|PrivilegeObjectDesc
argument_list|()
decl_stmt|;
comment|//set object identifier
name|subject
operator|.
name|setObject
argument_list|(
name|BaseSemanticAnalyzer
operator|.
name|unescapeIdentifier
argument_list|(
name|ast
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//set object type
name|ASTNode
name|objTypeNode
init|=
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|subject
operator|.
name|setTable
argument_list|(
name|objTypeNode
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TABLE_TYPE
argument_list|)
expr_stmt|;
if|if
condition|(
name|ast
operator|.
name|getChildCount
argument_list|()
operator|==
literal|3
condition|)
block|{
comment|//if partition spec node is present, set partition spec
name|ASTNode
name|partSpecNode
init|=
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|subject
operator|.
name|setPartSpec
argument_list|(
name|DDLSemanticAnalyzer
operator|.
name|getPartSpec
argument_list|(
name|partSpecNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|subject
operator|.
name|getTable
argument_list|()
condition|)
block|{
name|Table
name|tbl
init|=
name|getTable
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentDatabase
argument_list|()
argument_list|,
name|subject
operator|.
name|getObject
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|subject
operator|.
name|getPartSpec
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Partition
name|part
init|=
name|getPartition
argument_list|(
name|tbl
argument_list|,
name|subject
operator|.
name|getPartSpec
argument_list|()
argument_list|)
decl_stmt|;
name|outputs
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|part
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outputs
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|tbl
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|subject
return|;
block|}
specifier|private
name|List
argument_list|<
name|PrincipalDesc
argument_list|>
name|analyzePrincipalListDef
parameter_list|(
name|ASTNode
name|node
parameter_list|)
block|{
name|List
argument_list|<
name|PrincipalDesc
argument_list|>
name|principalList
init|=
operator|new
name|ArrayList
argument_list|<
name|PrincipalDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|node
operator|.
name|getChildCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|node
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|PrincipalType
name|type
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|child
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|TOK_USER
case|:
name|type
operator|=
name|PrincipalType
operator|.
name|USER
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_GROUP
case|:
name|type
operator|=
name|PrincipalType
operator|.
name|GROUP
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_ROLE
case|:
name|type
operator|=
name|PrincipalType
operator|.
name|ROLE
expr_stmt|;
break|break;
block|}
name|String
name|principalName
init|=
name|BaseSemanticAnalyzer
operator|.
name|unescapeIdentifier
argument_list|(
name|child
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|PrincipalDesc
name|principalDesc
init|=
operator|new
name|PrincipalDesc
argument_list|(
name|principalName
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|principalList
operator|.
name|add
argument_list|(
name|principalDesc
argument_list|)
expr_stmt|;
block|}
return|return
name|principalList
return|;
block|}
specifier|private
name|List
argument_list|<
name|PrivilegeDesc
argument_list|>
name|analyzePrivilegeListDef
parameter_list|(
name|ASTNode
name|node
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|PrivilegeDesc
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|node
operator|.
name|getChildCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ASTNode
name|privilegeDef
init|=
operator|(
name|ASTNode
operator|)
name|node
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ASTNode
name|privilegeType
init|=
operator|(
name|ASTNode
operator|)
name|privilegeDef
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Privilege
name|privObj
init|=
name|PrivilegeRegistry
operator|.
name|getPrivilege
argument_list|(
name|privilegeType
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|privObj
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"undefined privilege "
operator|+
name|privilegeType
operator|.
name|getText
argument_list|()
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|cols
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|privilegeDef
operator|.
name|getChildCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|cols
operator|=
name|BaseSemanticAnalyzer
operator|.
name|getColumnNames
argument_list|(
operator|(
name|ASTNode
operator|)
name|privilegeDef
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PrivilegeDesc
name|privilegeDesc
init|=
operator|new
name|PrivilegeDesc
argument_list|(
name|privObj
argument_list|,
name|cols
argument_list|)
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|privilegeDesc
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|Table
name|getTable
parameter_list|(
name|String
name|database
parameter_list|,
name|String
name|tblName
parameter_list|)
throws|throws
name|SemanticException
block|{
try|try
block|{
name|Table
name|tab
init|=
name|database
operator|==
literal|null
condition|?
name|db
operator|.
name|getTable
argument_list|(
name|tblName
argument_list|,
literal|false
argument_list|)
else|:
name|db
operator|.
name|getTable
argument_list|(
name|database
argument_list|,
name|tblName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|tab
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_TABLE
operator|.
name|getMsg
argument_list|(
name|tblName
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|tab
return|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|SemanticException
condition|)
block|{
throw|throw
operator|(
name|SemanticException
operator|)
name|e
throw|;
block|}
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_TABLE
operator|.
name|getMsg
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Partition
name|getPartition
parameter_list|(
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|)
throws|throws
name|SemanticException
block|{
try|try
block|{
name|Partition
name|partition
init|=
name|db
operator|.
name|getPartition
argument_list|(
name|table
argument_list|,
name|partSpec
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|partition
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|toMessage
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_PARTITION
argument_list|,
name|partSpec
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|partition
return|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|SemanticException
condition|)
block|{
throw|throw
operator|(
name|SemanticException
operator|)
name|e
throw|;
block|}
throw|throw
operator|new
name|SemanticException
argument_list|(
name|toMessage
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_PARTITION
argument_list|,
name|partSpec
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|toMessage
parameter_list|(
name|ErrorMsg
name|message
parameter_list|,
name|Object
name|detail
parameter_list|)
block|{
return|return
name|detail
operator|==
literal|null
condition|?
name|message
operator|.
name|getMsg
argument_list|()
else|:
name|message
operator|.
name|getMsg
argument_list|(
name|detail
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|createSetRoleTask
parameter_list|(
name|String
name|roleName
parameter_list|,
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|,
operator|new
name|RoleDDLDesc
argument_list|(
name|roleName
argument_list|,
name|RoleDDLDesc
operator|.
name|RoleOperation
operator|.
name|SET_ROLE
argument_list|)
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|createShowCurrentRoleTask
parameter_list|(
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|,
name|Path
name|resFile
parameter_list|)
throws|throws
name|SemanticException
block|{
name|RoleDDLDesc
name|ddlDesc
init|=
operator|new
name|RoleDDLDesc
argument_list|(
literal|null
argument_list|,
name|RoleDDLDesc
operator|.
name|RoleOperation
operator|.
name|SHOW_CURRENT_ROLE
argument_list|)
decl_stmt|;
name|ddlDesc
operator|.
name|setResFile
argument_list|(
name|resFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|,
name|ddlDesc
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
end_class

end_unit

