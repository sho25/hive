begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidTxnWriteIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|MetricsFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|cache
operator|.
name|results
operator|.
name|CacheUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|cache
operator|.
name|results
operator|.
name|QueryResultsCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|cache
operator|.
name|results
operator|.
name|QueryResultsCache
operator|.
name|CacheEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ConditionalTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|DagUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FetchTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|history
operator|.
name|HiveHistory
operator|.
name|Keys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|HookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|PrivateHookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|LogHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_comment
comment|/**  * Executes the Query Plan.  */
end_comment

begin_class
specifier|public
class|class
name|Executor
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CLASS_NAME
init|=
name|Driver
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CLASS_NAME
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|LogHelper
name|CONSOLE
init|=
operator|new
name|LogHelper
argument_list|(
name|LOG
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Context
name|context
decl_stmt|;
specifier|private
specifier|final
name|DriverContext
name|driverContext
decl_stmt|;
specifier|private
specifier|final
name|DriverState
name|driverState
decl_stmt|;
specifier|private
specifier|final
name|TaskQueue
name|taskQueue
decl_stmt|;
specifier|private
name|HookContext
name|hookContext
decl_stmt|;
specifier|public
name|Executor
parameter_list|(
name|Context
name|context
parameter_list|,
name|DriverContext
name|driverContext
parameter_list|,
name|DriverState
name|driverState
parameter_list|,
name|TaskQueue
name|taskQueue
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|driverContext
operator|=
name|driverContext
expr_stmt|;
name|this
operator|.
name|driverState
operator|=
name|driverState
expr_stmt|;
name|this
operator|.
name|taskQueue
operator|=
name|taskQueue
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|CommandProcessorException
block|{
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|DRIVER_EXECUTE
argument_list|)
expr_stmt|;
name|boolean
name|noName
init|=
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|driverContext
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|JOB_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|checkState
argument_list|()
expr_stmt|;
comment|// Whether there's any error occurred during query execution. Used for query lifetime hook.
name|boolean
name|executionError
init|=
literal|false
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing command(queryId="
operator|+
name|driverContext
operator|.
name|getQueryId
argument_list|()
operator|+
literal|"): "
operator|+
name|driverContext
operator|.
name|getQueryString
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: should this use getUserFromAuthenticator?
name|hookContext
operator|=
operator|new
name|PrivateHookContext
argument_list|(
name|driverContext
operator|.
name|getPlan
argument_list|()
argument_list|,
name|driverContext
operator|.
name|getQueryState
argument_list|()
argument_list|,
name|context
operator|.
name|getPathToCS
argument_list|()
argument_list|,
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|,
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getUserIpAddress
argument_list|()
argument_list|,
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|,
name|driverContext
operator|.
name|getOperationId
argument_list|()
argument_list|,
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|isHiveServerQuery
argument_list|()
argument_list|,
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
argument_list|,
name|driverContext
operator|.
name|getQueryInfo
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|preExecutionActions
argument_list|()
expr_stmt|;
name|preExecutionCacheActions
argument_list|()
expr_stmt|;
name|runTasks
argument_list|(
name|noName
argument_list|)
expr_stmt|;
name|postExecutionCacheActions
argument_list|()
expr_stmt|;
name|postExecutionActions
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandProcessorException
name|cpe
parameter_list|)
block|{
name|executionError
operator|=
literal|true
expr_stmt|;
throw|throw
name|cpe
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|executionError
operator|=
literal|true
expr_stmt|;
name|DriverUtils
operator|.
name|checkInterrupted
argument_list|(
name|driverState
argument_list|,
name|driverContext
argument_list|,
literal|"during query execution: \n"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|hookContext
argument_list|,
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
argument_list|)
expr_stmt|;
name|handleException
argument_list|(
name|hookContext
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanUp
argument_list|(
name|noName
argument_list|,
name|hookContext
argument_list|,
name|executionError
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkState
parameter_list|()
throws|throws
name|CommandProcessorException
block|{
name|driverState
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// if query is not in compiled state, or executing state which is carried over from
comment|// a combined compile/execute in runInternal, throws the error
if|if
condition|(
operator|!
name|driverState
operator|.
name|isCompiled
argument_list|()
operator|&&
operator|!
name|driverState
operator|.
name|isExecuting
argument_list|()
condition|)
block|{
name|String
name|errorMessage
init|=
literal|"FAILED: unexpected driverstate: "
operator|+
name|driverState
operator|+
literal|", for query "
operator|+
name|driverContext
operator|.
name|getQueryString
argument_list|()
decl_stmt|;
name|CONSOLE
operator|.
name|printError
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
throw|throw
name|DriverUtils
operator|.
name|createProcessorException
argument_list|(
name|driverContext
argument_list|,
literal|1000
argument_list|,
name|errorMessage
argument_list|,
literal|"HY008"
argument_list|,
literal|null
argument_list|)
throw|;
block|}
else|else
block|{
name|driverState
operator|.
name|executing
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|driverState
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|preExecutionActions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// compile and execute can get called from different threads in case of HS2
comment|// so clear timing in this thread's Hive object before proceeding.
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|clearMetaCallTiming
argument_list|()
expr_stmt|;
name|driverContext
operator|.
name|getPlan
argument_list|()
operator|.
name|setStarted
argument_list|()
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|startQuery
argument_list|(
name|driverContext
operator|.
name|getQueryString
argument_list|()
argument_list|,
name|driverContext
operator|.
name|getQueryId
argument_list|()
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|logPlanProgress
argument_list|(
name|driverContext
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
name|driverContext
operator|.
name|setResStream
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hookContext
operator|.
name|setHookType
argument_list|(
name|HookContext
operator|.
name|HookType
operator|.
name|PRE_EXEC_HOOK
argument_list|)
expr_stmt|;
name|driverContext
operator|.
name|getHookRunner
argument_list|()
operator|.
name|runPreHooks
argument_list|(
name|hookContext
argument_list|)
expr_stmt|;
comment|// Trigger query hooks before query execution.
name|driverContext
operator|.
name|getHookRunner
argument_list|()
operator|.
name|runBeforeExecutionHook
argument_list|(
name|driverContext
operator|.
name|getQueryString
argument_list|()
argument_list|,
name|hookContext
argument_list|)
expr_stmt|;
name|setQueryDisplays
argument_list|(
name|driverContext
operator|.
name|getPlan
argument_list|()
operator|.
name|getRootTasks
argument_list|()
argument_list|)
expr_stmt|;
comment|// A runtime that launches runnable tasks as separate Threads through TaskRunners
comment|// As soon as a task isRunnable, it is put in a queue
comment|// At any time, at most maxthreads tasks can be running
comment|// The main thread polls the TaskRunners to check if they have finished.
name|DriverUtils
operator|.
name|checkInterrupted
argument_list|(
name|driverState
argument_list|,
name|driverContext
argument_list|,
literal|"before running tasks."
argument_list|,
name|hookContext
argument_list|,
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
argument_list|)
expr_stmt|;
name|taskQueue
operator|.
name|prepare
argument_list|(
name|driverContext
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setHDFSCleanup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setMapRedStats
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setStackTraces
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setLocalMapRedErrors
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add root Tasks to runnable
name|Metrics
name|metrics
init|=
name|MetricsFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
argument_list|>
name|task
range|:
name|driverContext
operator|.
name|getPlan
argument_list|()
operator|.
name|getRootTasks
argument_list|()
control|)
block|{
comment|// This should never happen, if it does, it's a bug with the potential to produce
comment|// incorrect results.
assert|assert
name|task
operator|.
name|getParentTasks
argument_list|()
operator|==
literal|null
operator|||
name|task
operator|.
name|getParentTasks
argument_list|()
operator|.
name|isEmpty
argument_list|()
assert|;
name|taskQueue
operator|.
name|addToRunnable
argument_list|(
name|task
argument_list|)
expr_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|task
operator|.
name|updateTaskMetrics
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|setQueryDisplays
parameter_list|(
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|tasks
parameter_list|)
block|{
if|if
condition|(
name|tasks
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|visited
init|=
operator|new
name|HashSet
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|tasks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tasks
operator|=
name|setQueryDisplays
argument_list|(
name|tasks
argument_list|,
name|visited
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|setQueryDisplays
parameter_list|(
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|tasks
parameter_list|,
name|Set
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|visited
parameter_list|)
block|{
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|childTasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
argument_list|>
name|task
range|:
name|tasks
control|)
block|{
if|if
condition|(
name|visited
operator|.
name|contains
argument_list|(
name|task
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|task
operator|.
name|setQueryDisplay
argument_list|(
name|driverContext
operator|.
name|getQueryDisplay
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|task
operator|.
name|getDependentTasks
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|childTasks
operator|.
name|addAll
argument_list|(
name|task
operator|.
name|getDependentTasks
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|visited
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
return|return
name|childTasks
return|;
block|}
specifier|private
name|void
name|preExecutionCacheActions
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|driverContext
operator|.
name|getCacheUsage
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|driverContext
operator|.
name|getCacheUsage
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
name|CacheUsage
operator|.
name|CacheStatus
operator|.
name|CAN_CACHE_QUERY_RESULTS
operator|&&
name|driverContext
operator|.
name|getPlan
argument_list|()
operator|.
name|getFetchTask
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ValidTxnWriteIdList
name|txnWriteIdList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|driverContext
operator|.
name|getPlan
argument_list|()
operator|.
name|hasAcidResourcesInQuery
argument_list|()
condition|)
block|{
name|txnWriteIdList
operator|=
name|AcidUtils
operator|.
name|getValidTxnWriteIdList
argument_list|(
name|driverContext
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// The results of this query execution might be cacheable.
comment|// Add a placeholder entry in the cache so other queries know this result is pending.
name|CacheEntry
name|pendingCacheEntry
init|=
name|QueryResultsCache
operator|.
name|getInstance
argument_list|()
operator|.
name|addToCache
argument_list|(
name|driverContext
operator|.
name|getCacheUsage
argument_list|()
operator|.
name|getQueryInfo
argument_list|()
argument_list|,
name|txnWriteIdList
argument_list|)
decl_stmt|;
if|if
condition|(
name|pendingCacheEntry
operator|!=
literal|null
condition|)
block|{
comment|// Update cacheUsage to reference the pending entry.
name|this
operator|.
name|driverContext
operator|.
name|getCacheUsage
argument_list|()
operator|.
name|setCacheEntry
argument_list|(
name|pendingCacheEntry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|runTasks
parameter_list|(
name|boolean
name|noName
parameter_list|)
throws|throws
name|Exception
block|{
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|RUN_TASKS
argument_list|)
expr_stmt|;
name|int
name|jobCount
init|=
name|getJobCount
argument_list|()
decl_stmt|;
name|String
name|jobName
init|=
name|getJobName
argument_list|()
decl_stmt|;
comment|// Loop while you either have tasks running, or tasks queued up
while|while
condition|(
name|taskQueue
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|launchTasks
argument_list|(
name|noName
argument_list|,
name|jobCount
argument_list|,
name|jobName
argument_list|)
expr_stmt|;
name|handleFinished
argument_list|()
expr_stmt|;
block|}
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|RUN_TASKS
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleFinished
parameter_list|()
throws|throws
name|Exception
block|{
comment|// poll the Tasks to see which one completed
name|TaskRunner
name|taskRun
init|=
name|taskQueue
operator|.
name|pollFinished
argument_list|()
decl_stmt|;
if|if
condition|(
name|taskRun
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|/*       This should be removed eventually. HIVE-17814 gives more detail       explanation of whats happening and HIVE-17815 as to why this is done.       Briefly for replication the graph is huge and so memory pressure is going to be huge if       we keep a lot of references around.     */
name|String
name|opName
init|=
name|driverContext
operator|.
name|getPlan
argument_list|()
operator|.
name|getOperationName
argument_list|()
decl_stmt|;
name|boolean
name|isReplicationOperation
init|=
name|opName
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|REPLDUMP
operator|.
name|getOperationName
argument_list|()
argument_list|)
operator|||
name|opName
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|REPLLOAD
operator|.
name|getOperationName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isReplicationOperation
condition|)
block|{
name|hookContext
operator|.
name|addCompleteTask
argument_list|(
name|taskRun
argument_list|)
expr_stmt|;
block|}
name|driverContext
operator|.
name|getQueryDisplay
argument_list|()
operator|.
name|setTaskResult
argument_list|(
name|taskRun
operator|.
name|getTask
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|taskRun
operator|.
name|getTaskResult
argument_list|()
argument_list|)
expr_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|task
init|=
name|taskRun
operator|.
name|getTask
argument_list|()
decl_stmt|;
name|TaskResult
name|result
init|=
name|taskRun
operator|.
name|getTaskResult
argument_list|()
decl_stmt|;
name|int
name|exitVal
init|=
name|result
operator|.
name|getExitVal
argument_list|()
decl_stmt|;
name|DriverUtils
operator|.
name|checkInterrupted
argument_list|(
name|driverState
argument_list|,
name|driverContext
argument_list|,
literal|"when checking the execution result."
argument_list|,
name|hookContext
argument_list|,
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|exitVal
operator|!=
literal|0
condition|)
block|{
name|handleTaskFailure
argument_list|(
name|task
argument_list|,
name|result
argument_list|,
name|exitVal
argument_list|)
expr_stmt|;
return|return;
block|}
name|taskQueue
operator|.
name|finished
argument_list|(
name|taskRun
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|setTaskProperty
argument_list|(
name|driverContext
operator|.
name|getQueryId
argument_list|()
argument_list|,
name|task
operator|.
name|getId
argument_list|()
argument_list|,
name|Keys
operator|.
name|TASK_RET_CODE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|exitVal
argument_list|)
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|endTask
argument_list|(
name|driverContext
operator|.
name|getQueryId
argument_list|()
argument_list|,
name|task
argument_list|)
expr_stmt|;
if|if
condition|(
name|task
operator|.
name|getChildTasks
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
argument_list|>
name|child
range|:
name|task
operator|.
name|getChildTasks
argument_list|()
control|)
block|{
if|if
condition|(
name|TaskQueue
operator|.
name|isLaunchable
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|taskQueue
operator|.
name|addToRunnable
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|String
name|getJobName
parameter_list|()
block|{
name|int
name|maxlen
decl_stmt|;
if|if
condition|(
literal|"spark"
operator|.
name|equals
argument_list|(
name|driverContext
operator|.
name|getConf
argument_list|()
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
argument_list|)
argument_list|)
condition|)
block|{
name|maxlen
operator|=
name|driverContext
operator|.
name|getConf
argument_list|()
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESPARKJOBNAMELENGTH
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|maxlen
operator|=
name|driverContext
operator|.
name|getConf
argument_list|()
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEJOBNAMELENGTH
argument_list|)
expr_stmt|;
block|}
return|return
name|Utilities
operator|.
name|abbreviate
argument_list|(
name|driverContext
operator|.
name|getQueryString
argument_list|()
argument_list|,
name|maxlen
operator|-
literal|6
argument_list|)
return|;
block|}
specifier|private
name|int
name|getJobCount
parameter_list|()
block|{
name|int
name|mrJobCount
init|=
name|Utilities
operator|.
name|getMRTasks
argument_list|(
name|driverContext
operator|.
name|getPlan
argument_list|()
operator|.
name|getRootTasks
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|jobCount
init|=
name|mrJobCount
operator|+
name|Utilities
operator|.
name|getTezTasks
argument_list|(
name|driverContext
operator|.
name|getPlan
argument_list|()
operator|.
name|getRootTasks
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
operator|+
name|Utilities
operator|.
name|getSparkTasks
argument_list|(
name|driverContext
operator|.
name|getPlan
argument_list|()
operator|.
name|getRootTasks
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|jobCount
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|mrJobCount
operator|>
literal|0
operator|&&
literal|"mr"
operator|.
name|equals
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|driverContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|HiveConf
operator|.
name|generateMrDeprecationWarning
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CONSOLE
operator|.
name|printInfo
argument_list|(
literal|"Query ID = "
operator|+
name|driverContext
operator|.
name|getPlan
argument_list|()
operator|.
name|getQueryId
argument_list|()
argument_list|)
expr_stmt|;
name|CONSOLE
operator|.
name|printInfo
argument_list|(
literal|"Total jobs = "
operator|+
name|jobCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|setQueryProperty
argument_list|(
name|driverContext
operator|.
name|getPlan
argument_list|()
operator|.
name|getQueryId
argument_list|()
argument_list|,
name|Keys
operator|.
name|QUERY_NUM_TASKS
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|jobCount
argument_list|)
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|setIdToTableMap
argument_list|(
name|driverContext
operator|.
name|getPlan
argument_list|()
operator|.
name|getIdToTableNameMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|jobCount
return|;
block|}
specifier|private
name|void
name|launchTasks
parameter_list|(
name|boolean
name|noName
parameter_list|,
name|int
name|jobCount
parameter_list|,
name|String
name|jobName
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Launch upto maxthreads tasks
name|Task
argument_list|<
name|?
argument_list|>
name|task
decl_stmt|;
name|int
name|maxthreads
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|driverContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|EXECPARALLETHREADNUMBER
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|task
operator|=
name|taskQueue
operator|.
name|getRunnable
argument_list|(
name|maxthreads
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|TaskRunner
name|runner
init|=
name|launchTask
argument_list|(
name|task
argument_list|,
name|noName
argument_list|,
name|jobName
argument_list|,
name|jobCount
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|runner
operator|.
name|isRunning
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
specifier|private
name|TaskRunner
name|launchTask
parameter_list|(
name|Task
argument_list|<
name|?
argument_list|>
name|task
parameter_list|,
name|boolean
name|noName
parameter_list|,
name|String
name|jobName
parameter_list|,
name|int
name|jobCount
parameter_list|)
throws|throws
name|HiveException
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|startTask
argument_list|(
name|driverContext
operator|.
name|getQueryId
argument_list|()
argument_list|,
name|task
argument_list|,
name|task
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|task
operator|.
name|isMapRedTask
argument_list|()
operator|&&
operator|!
operator|(
name|task
operator|instanceof
name|ConditionalTask
operator|)
condition|)
block|{
if|if
condition|(
name|noName
condition|)
block|{
name|driverContext
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|JOB_NAME
argument_list|,
name|jobName
operator|+
literal|" ("
operator|+
name|task
operator|.
name|getId
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|driverContext
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|DagUtils
operator|.
name|MAPREDUCE_WORKFLOW_NODE_NAME
argument_list|,
name|task
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Utilities
operator|.
name|setWorkflowAdjacencies
argument_list|(
name|driverContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|driverContext
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
name|taskQueue
operator|.
name|incCurJobNo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CONSOLE
operator|.
name|printInfo
argument_list|(
literal|"Launching Job "
operator|+
name|taskQueue
operator|.
name|getCurJobNo
argument_list|()
operator|+
literal|" out of "
operator|+
name|jobCount
argument_list|)
expr_stmt|;
block|}
name|task
operator|.
name|initialize
argument_list|(
name|driverContext
operator|.
name|getQueryState
argument_list|()
argument_list|,
name|driverContext
operator|.
name|getPlan
argument_list|()
argument_list|,
name|taskQueue
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|TaskRunner
name|taskRun
init|=
operator|new
name|TaskRunner
argument_list|(
name|task
argument_list|,
name|taskQueue
argument_list|)
decl_stmt|;
name|taskQueue
operator|.
name|launching
argument_list|(
name|taskRun
argument_list|)
expr_stmt|;
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|task
operator|.
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|EXECPARALLEL
argument_list|)
operator|&&
name|task
operator|.
name|canExecuteInParallel
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting task ["
operator|+
name|task
operator|+
literal|"] in parallel"
argument_list|)
expr_stmt|;
name|taskRun
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting task ["
operator|+
name|task
operator|+
literal|"] in serial mode"
argument_list|)
expr_stmt|;
name|taskRun
operator|.
name|runSequential
argument_list|()
expr_stmt|;
block|}
return|return
name|taskRun
return|;
block|}
specifier|private
name|void
name|handleTaskFailure
parameter_list|(
name|Task
argument_list|<
name|?
argument_list|>
name|task
parameter_list|,
name|TaskResult
name|result
parameter_list|,
name|int
name|exitVal
parameter_list|)
throws|throws
name|HiveException
throws|,
name|Exception
throws|,
name|CommandProcessorException
block|{
name|Task
argument_list|<
name|?
argument_list|>
name|backupTask
init|=
name|task
operator|.
name|getAndInitBackupTask
argument_list|()
decl_stmt|;
if|if
condition|(
name|backupTask
operator|!=
literal|null
condition|)
block|{
name|String
name|errorMessage
init|=
name|getErrorMsgAndDetail
argument_list|(
name|exitVal
argument_list|,
name|result
operator|.
name|getTaskError
argument_list|()
argument_list|,
name|task
argument_list|)
decl_stmt|;
name|CONSOLE
operator|.
name|printError
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
name|errorMessage
operator|=
literal|"ATTEMPT: Execute BackupTask: "
operator|+
name|backupTask
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|CONSOLE
operator|.
name|printError
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
comment|// add backup task to runnable
if|if
condition|(
name|TaskQueue
operator|.
name|isLaunchable
argument_list|(
name|backupTask
argument_list|)
condition|)
block|{
name|taskQueue
operator|.
name|addToRunnable
argument_list|(
name|backupTask
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|errorMessage
init|=
name|getErrorMsgAndDetail
argument_list|(
name|exitVal
argument_list|,
name|result
operator|.
name|getTaskError
argument_list|()
argument_list|,
name|task
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskQueue
operator|.
name|isShutdown
argument_list|()
condition|)
block|{
name|errorMessage
operator|=
literal|"FAILED: Operation cancelled. "
operator|+
name|errorMessage
expr_stmt|;
block|}
name|DriverUtils
operator|.
name|invokeFailureHooks
argument_list|(
name|driverContext
argument_list|,
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
argument_list|,
name|hookContext
argument_list|,
name|errorMessage
operator|+
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|task
operator|.
name|getDiagnosticsMessage
argument_list|()
argument_list|)
argument_list|,
name|result
operator|.
name|getTaskError
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|sqlState
init|=
literal|"08S01"
decl_stmt|;
comment|// 08S01 (Communication error) is the default sql state.  Override the sqlstate
comment|// based on the ErrorMsg set in HiveException.
if|if
condition|(
name|result
operator|.
name|getTaskError
argument_list|()
operator|instanceof
name|HiveException
condition|)
block|{
name|ErrorMsg
name|errorMsg
init|=
operator|(
operator|(
name|HiveException
operator|)
name|result
operator|.
name|getTaskError
argument_list|()
operator|)
operator|.
name|getCanonicalErrorMsg
argument_list|()
decl_stmt|;
if|if
condition|(
name|errorMsg
operator|!=
name|ErrorMsg
operator|.
name|GENERIC_ERROR
condition|)
block|{
name|sqlState
operator|=
name|errorMsg
operator|.
name|getSQLState
argument_list|()
expr_stmt|;
block|}
block|}
name|CONSOLE
operator|.
name|printError
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
name|taskQueue
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// in case we decided to run everything in local mode, restore the
comment|// the jobtracker setting to its initial value
name|context
operator|.
name|restoreOriginalTracker
argument_list|()
expr_stmt|;
throw|throw
name|DriverUtils
operator|.
name|createProcessorException
argument_list|(
name|driverContext
argument_list|,
name|exitVal
argument_list|,
name|errorMessage
argument_list|,
name|sqlState
argument_list|,
name|result
operator|.
name|getTaskError
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|getErrorMsgAndDetail
parameter_list|(
name|int
name|exitVal
parameter_list|,
name|Throwable
name|downstreamError
parameter_list|,
name|Task
argument_list|<
name|?
argument_list|>
name|task
parameter_list|)
block|{
name|String
name|errorMessage
init|=
literal|"FAILED: Execution Error, return code "
operator|+
name|exitVal
operator|+
literal|" from "
operator|+
name|task
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|downstreamError
operator|!=
literal|null
condition|)
block|{
comment|//here we assume that upstream code may have parametrized the msg from ErrorMsg so we want to keep it
if|if
condition|(
name|downstreamError
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|errorMessage
operator|+=
literal|". "
operator|+
name|downstreamError
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|errorMessage
operator|+=
literal|". "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|downstreamError
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ErrorMsg
name|em
init|=
name|ErrorMsg
operator|.
name|getErrorMsg
argument_list|(
name|exitVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|em
operator|!=
literal|null
condition|)
block|{
name|errorMessage
operator|+=
literal|". "
operator|+
name|em
operator|.
name|getMsg
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|errorMessage
return|;
block|}
specifier|private
name|void
name|postExecutionCacheActions
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|driverContext
operator|.
name|getCacheUsage
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|driverContext
operator|.
name|getCacheUsage
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
name|CacheUsage
operator|.
name|CacheStatus
operator|.
name|QUERY_USING_CACHE
condition|)
block|{
comment|// Using a previously cached result.
name|CacheEntry
name|cacheEntry
init|=
name|driverContext
operator|.
name|getCacheUsage
argument_list|()
operator|.
name|getCacheEntry
argument_list|()
decl_stmt|;
comment|// Reader count already incremented during cache lookup.
comment|// Save to usedCacheEntry to ensure reader is released after query.
name|driverContext
operator|.
name|setUsedCacheEntry
argument_list|(
name|cacheEntry
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|driverContext
operator|.
name|getCacheUsage
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
name|CacheUsage
operator|.
name|CacheStatus
operator|.
name|CAN_CACHE_QUERY_RESULTS
operator|&&
name|driverContext
operator|.
name|getCacheUsage
argument_list|()
operator|.
name|getCacheEntry
argument_list|()
operator|!=
literal|null
operator|&&
name|driverContext
operator|.
name|getPlan
argument_list|()
operator|.
name|getFetchTask
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Save results to the cache for future queries to use.
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|SAVE_TO_RESULTS_CACHE
argument_list|)
expr_stmt|;
name|CacheEntry
name|cacheEntry
init|=
name|driverContext
operator|.
name|getCacheUsage
argument_list|()
operator|.
name|getCacheEntry
argument_list|()
decl_stmt|;
name|boolean
name|savedToCache
init|=
name|QueryResultsCache
operator|.
name|getInstance
argument_list|()
operator|.
name|setEntryValid
argument_list|(
name|cacheEntry
argument_list|,
name|driverContext
operator|.
name|getPlan
argument_list|()
operator|.
name|getFetchTask
argument_list|()
operator|.
name|getWork
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"savedToCache: {} ({})"
argument_list|,
name|savedToCache
argument_list|,
name|cacheEntry
argument_list|)
expr_stmt|;
if|if
condition|(
name|savedToCache
condition|)
block|{
name|useFetchFromCache
argument_list|(
name|driverContext
operator|.
name|getCacheUsage
argument_list|()
operator|.
name|getCacheEntry
argument_list|()
argument_list|)
expr_stmt|;
comment|// setEntryValid() already increments the reader count. Set usedCacheEntry so it gets released.
name|driverContext
operator|.
name|setUsedCacheEntry
argument_list|(
name|driverContext
operator|.
name|getCacheUsage
argument_list|()
operator|.
name|getCacheEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|SAVE_TO_RESULTS_CACHE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|useFetchFromCache
parameter_list|(
name|CacheEntry
name|cacheEntry
parameter_list|)
block|{
comment|// Change query FetchTask to use new location specified in results cache.
name|FetchTask
name|fetchTaskFromCache
init|=
operator|(
name|FetchTask
operator|)
name|TaskFactory
operator|.
name|get
argument_list|(
name|cacheEntry
operator|.
name|getFetchWork
argument_list|()
argument_list|)
decl_stmt|;
name|fetchTaskFromCache
operator|.
name|initialize
argument_list|(
name|driverContext
operator|.
name|getQueryState
argument_list|()
argument_list|,
name|driverContext
operator|.
name|getPlan
argument_list|()
argument_list|,
literal|null
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|driverContext
operator|.
name|getPlan
argument_list|()
operator|.
name|setFetchTask
argument_list|(
name|fetchTaskFromCache
argument_list|)
expr_stmt|;
name|driverContext
operator|.
name|setCacheUsage
argument_list|(
operator|new
name|CacheUsage
argument_list|(
name|CacheUsage
operator|.
name|CacheStatus
operator|.
name|QUERY_USING_CACHE
argument_list|,
name|cacheEntry
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|postExecutionActions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// in case we decided to run everything in local mode, restore the the jobtracker setting to its initial value
name|context
operator|.
name|restoreOriginalTracker
argument_list|()
expr_stmt|;
if|if
condition|(
name|taskQueue
operator|.
name|isShutdown
argument_list|()
condition|)
block|{
name|String
name|errorMessage
init|=
literal|"FAILED: Operation cancelled"
decl_stmt|;
name|DriverUtils
operator|.
name|invokeFailureHooks
argument_list|(
name|driverContext
argument_list|,
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
argument_list|,
name|hookContext
argument_list|,
name|errorMessage
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|CONSOLE
operator|.
name|printError
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
throw|throw
name|DriverUtils
operator|.
name|createProcessorException
argument_list|(
name|driverContext
argument_list|,
literal|1000
argument_list|,
name|errorMessage
argument_list|,
literal|"HY008"
argument_list|,
literal|null
argument_list|)
throw|;
block|}
comment|// Remove incomplete outputs.
comment|// Some incomplete outputs may be added at the beginning, for eg: for dynamic partitions, remove them
name|driverContext
operator|.
name|getPlan
argument_list|()
operator|.
name|getOutputs
argument_list|()
operator|.
name|removeIf
argument_list|(
name|x
lambda|->
operator|!
name|x
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
name|hookContext
operator|.
name|setHookType
argument_list|(
name|HookContext
operator|.
name|HookType
operator|.
name|POST_EXEC_HOOK
argument_list|)
expr_stmt|;
name|driverContext
operator|.
name|getHookRunner
argument_list|()
operator|.
name|runPostExecHooks
argument_list|(
name|hookContext
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|setQueryProperty
argument_list|(
name|driverContext
operator|.
name|getQueryId
argument_list|()
argument_list|,
name|Keys
operator|.
name|QUERY_RET_CODE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|printRowCount
argument_list|(
name|driverContext
operator|.
name|getQueryId
argument_list|()
argument_list|)
expr_stmt|;
name|releasePlan
argument_list|(
name|driverContext
operator|.
name|getPlan
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|releasePlan
parameter_list|(
name|QueryPlan
name|plan
parameter_list|)
block|{
comment|// Plan maybe null if Driver.close is called in another thread for the same Driver object
name|driverState
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|plan
operator|!=
literal|null
condition|)
block|{
name|plan
operator|.
name|setDone
argument_list|()
expr_stmt|;
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|logPlanProgress
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Log and ignore
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not log query plan progress"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|driverState
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handleException
parameter_list|(
name|HookContext
name|hookContext
parameter_list|,
name|Throwable
name|e
parameter_list|)
throws|throws
name|CommandProcessorException
block|{
name|context
operator|.
name|restoreOriginalTracker
argument_list|()
expr_stmt|;
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|setQueryProperty
argument_list|(
name|driverContext
operator|.
name|getQueryId
argument_list|()
argument_list|,
name|Keys
operator|.
name|QUERY_RET_CODE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: do better with handling types of Exception here
name|String
name|errorMessage
init|=
literal|"FAILED: Hive Internal Error: "
operator|+
name|Utilities
operator|.
name|getNameMessage
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|hookContext
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|DriverUtils
operator|.
name|invokeFailureHooks
argument_list|(
name|driverContext
argument_list|,
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
argument_list|,
name|hookContext
argument_list|,
name|errorMessage
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to invoke failure hook"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
name|CONSOLE
operator|.
name|printError
argument_list|(
name|errorMessage
operator|+
literal|"\n"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|DriverUtils
operator|.
name|createProcessorException
argument_list|(
name|driverContext
argument_list|,
literal|12
argument_list|,
name|errorMessage
argument_list|,
literal|"08S01"
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|private
name|void
name|cleanUp
parameter_list|(
name|boolean
name|noName
parameter_list|,
name|HookContext
name|hookContext
parameter_list|,
name|boolean
name|executionError
parameter_list|)
block|{
comment|// Trigger query hooks after query completes its execution.
try|try
block|{
name|driverContext
operator|.
name|getHookRunner
argument_list|()
operator|.
name|runAfterExecutionHook
argument_list|(
name|driverContext
operator|.
name|getQueryString
argument_list|()
argument_list|,
name|hookContext
argument_list|,
name|executionError
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed when invoking query after execution hook"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|endQuery
argument_list|(
name|driverContext
operator|.
name|getQueryId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|noName
condition|)
block|{
name|driverContext
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|JOB_NAME
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|double
name|duration
init|=
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|DRIVER_EXECUTE
argument_list|)
operator|/
literal|1000.00
decl_stmt|;
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|executionHMSTimings
init|=
name|Hive
operator|.
name|dumpMetaCallTimingWithoutEx
argument_list|(
literal|"execution"
argument_list|)
decl_stmt|;
name|driverContext
operator|.
name|getQueryDisplay
argument_list|()
operator|.
name|setHmsTimings
argument_list|(
name|QueryDisplay
operator|.
name|Phase
operator|.
name|EXECUTION
argument_list|,
name|executionHMSTimings
argument_list|)
expr_stmt|;
name|logExecutionResourceUsage
argument_list|()
expr_stmt|;
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getSparkSession
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getSparkSession
argument_list|()
operator|.
name|onQueryCompletion
argument_list|(
name|driverContext
operator|.
name|getQueryId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|driverState
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|driverState
operator|.
name|executionFinished
argument_list|(
name|executionError
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|driverState
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|driverState
operator|.
name|isAborted
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing command(queryId={}) has been interrupted after {} seconds"
argument_list|,
name|driverContext
operator|.
name|getQueryId
argument_list|()
argument_list|,
name|duration
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Completed executing command(queryId={}); Time taken: {} seconds"
argument_list|,
name|driverContext
operator|.
name|getQueryId
argument_list|()
argument_list|,
name|duration
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|logExecutionResourceUsage
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|MapRedStats
argument_list|>
name|stats
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getMapRedStats
argument_list|()
decl_stmt|;
if|if
condition|(
name|stats
operator|!=
literal|null
operator|&&
operator|!
name|stats
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|long
name|totalCpu
init|=
literal|0
decl_stmt|;
name|long
name|numModifiedRows
init|=
literal|0
decl_stmt|;
name|CONSOLE
operator|.
name|printInfo
argument_list|(
literal|"MapReduce Jobs Launched: "
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|MapRedStats
argument_list|>
name|entry
range|:
name|stats
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|CONSOLE
operator|.
name|printInfo
argument_list|(
literal|"Stage-"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|": "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|totalCpu
operator|+=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getCpuMSec
argument_list|()
expr_stmt|;
if|if
condition|(
name|numModifiedRows
operator|>
operator|-
literal|1
condition|)
block|{
comment|//if overflow, then numModifiedRows is set as -1. Else update numModifiedRows with the sum.
try|try
block|{
name|numModifiedRows
operator|=
name|Math
operator|.
name|addExact
argument_list|(
name|numModifiedRows
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getNumModifiedRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|numModifiedRows
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
block|}
name|driverContext
operator|.
name|getQueryState
argument_list|()
operator|.
name|setNumModifiedRows
argument_list|(
name|numModifiedRows
argument_list|)
expr_stmt|;
name|CONSOLE
operator|.
name|printInfo
argument_list|(
literal|"Total MapReduce CPU Time Spent: "
operator|+
name|Utilities
operator|.
name|formatMsecToStr
argument_list|(
name|totalCpu
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

