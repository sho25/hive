begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Filter Operator"
argument_list|)
specifier|public
class|class
name|FilterDesc
implements|implements
name|Serializable
block|{
comment|/**    * sampleDesc is used to keep track of the sampling descriptor    */
specifier|public
specifier|static
class|class
name|sampleDesc
block|{
comment|// The numerator of the TABLESAMPLE clause
specifier|private
name|int
name|numerator
decl_stmt|;
comment|// The denominator of the TABLESAMPLE clause
specifier|private
name|int
name|denominator
decl_stmt|;
comment|// Input files can be pruned
specifier|private
name|boolean
name|inputPruning
decl_stmt|;
specifier|public
name|sampleDesc
parameter_list|()
block|{     }
specifier|public
name|sampleDesc
parameter_list|(
name|int
name|numerator
parameter_list|,
name|int
name|denominator
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tabBucketCols
parameter_list|,
name|boolean
name|inputPruning
parameter_list|)
block|{
name|this
operator|.
name|numerator
operator|=
name|numerator
expr_stmt|;
name|this
operator|.
name|denominator
operator|=
name|denominator
expr_stmt|;
name|this
operator|.
name|inputPruning
operator|=
name|inputPruning
expr_stmt|;
block|}
specifier|public
name|int
name|getNumerator
parameter_list|()
block|{
return|return
name|numerator
return|;
block|}
specifier|public
name|int
name|getDenominator
parameter_list|()
block|{
return|return
name|denominator
return|;
block|}
specifier|public
name|boolean
name|getInputPruning
parameter_list|()
block|{
return|return
name|inputPruning
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
name|predicate
decl_stmt|;
specifier|private
name|boolean
name|isSamplingPred
decl_stmt|;
specifier|private
specifier|transient
name|sampleDesc
name|sampleDescr
decl_stmt|;
specifier|public
name|FilterDesc
parameter_list|()
block|{   }
specifier|public
name|FilterDesc
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
name|predicate
parameter_list|,
name|boolean
name|isSamplingPred
parameter_list|)
block|{
name|this
operator|.
name|predicate
operator|=
name|predicate
expr_stmt|;
name|this
operator|.
name|isSamplingPred
operator|=
name|isSamplingPred
expr_stmt|;
name|sampleDescr
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|FilterDesc
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
name|predicate
parameter_list|,
name|boolean
name|isSamplingPred
parameter_list|,
specifier|final
name|sampleDesc
name|sampleDescr
parameter_list|)
block|{
name|this
operator|.
name|predicate
operator|=
name|predicate
expr_stmt|;
name|this
operator|.
name|isSamplingPred
operator|=
name|isSamplingPred
expr_stmt|;
name|this
operator|.
name|sampleDescr
operator|=
name|sampleDescr
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"predicate"
argument_list|)
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
name|getPredicate
parameter_list|()
block|{
return|return
name|predicate
return|;
block|}
specifier|public
name|void
name|setPredicate
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
name|predicate
parameter_list|)
block|{
name|this
operator|.
name|predicate
operator|=
name|predicate
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"isSamplingPred"
argument_list|,
name|normalExplain
operator|=
literal|false
argument_list|)
specifier|public
name|boolean
name|getIsSamplingPred
parameter_list|()
block|{
return|return
name|isSamplingPred
return|;
block|}
specifier|public
name|void
name|setIsSamplingPred
parameter_list|(
specifier|final
name|boolean
name|isSamplingPred
parameter_list|)
block|{
name|this
operator|.
name|isSamplingPred
operator|=
name|isSamplingPred
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"sampleDesc"
argument_list|,
name|normalExplain
operator|=
literal|false
argument_list|)
specifier|public
name|sampleDesc
name|getSampleDescr
parameter_list|()
block|{
return|return
name|sampleDescr
return|;
block|}
specifier|public
name|void
name|setSampleDescr
parameter_list|(
specifier|final
name|sampleDesc
name|sampleDescr
parameter_list|)
block|{
name|this
operator|.
name|sampleDescr
operator|=
name|sampleDescr
expr_stmt|;
block|}
block|}
end_class

end_unit

