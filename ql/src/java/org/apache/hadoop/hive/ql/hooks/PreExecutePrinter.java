begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|FetchConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|HookContext
operator|.
name|HookType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|LogHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**  * Implementation of a pre execute hook that simply prints out its parameters to  * standard output.  */
end_comment

begin_class
specifier|public
class|class
name|PreExecutePrinter
implements|implements
name|ExecuteWithHookContext
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
operator|(
name|hookContext
operator|.
name|getHookType
argument_list|()
operator|==
name|HookType
operator|.
name|PRE_EXEC_HOOK
operator|)
assert|;
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|QueryState
name|queryState
init|=
name|hookContext
operator|.
name|getQueryState
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|!=
literal|null
operator|&&
name|ss
operator|.
name|out
operator|instanceof
name|FetchConverter
condition|)
block|{
name|boolean
name|foundQuery
init|=
name|queryState
operator|.
name|getHiveOperation
argument_list|()
operator|==
name|HiveOperation
operator|.
name|QUERY
operator|&&
operator|!
name|hookContext
operator|.
name|getQueryPlan
argument_list|()
operator|.
name|isForExplain
argument_list|()
decl_stmt|;
operator|(
operator|(
name|FetchConverter
operator|)
name|ss
operator|.
name|out
operator|)
operator|.
name|foundQuery
argument_list|(
name|foundQuery
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
init|=
name|hookContext
operator|.
name|getInputs
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
init|=
name|hookContext
operator|.
name|getOutputs
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|hookContext
operator|.
name|getUgi
argument_list|()
decl_stmt|;
name|this
operator|.
name|run
argument_list|(
name|queryState
argument_list|,
name|inputs
argument_list|,
name|outputs
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|(
name|QueryState
name|queryState
parameter_list|,
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|Exception
block|{
name|LogHelper
name|console
init|=
name|SessionState
operator|.
name|getConsole
argument_list|()
decl_stmt|;
if|if
condition|(
name|console
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|queryState
operator|!=
literal|null
condition|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"PREHOOK: query: "
operator|+
name|queryState
operator|.
name|getQueryString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"PREHOOK: type: "
operator|+
name|queryState
operator|.
name|getCommandType
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|printEntities
argument_list|(
name|console
argument_list|,
name|inputs
argument_list|,
literal|"PREHOOK: Input: "
argument_list|)
expr_stmt|;
name|printEntities
argument_list|(
name|console
argument_list|,
name|outputs
argument_list|,
literal|"PREHOOK: Output: "
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|printEntities
parameter_list|(
name|LogHelper
name|console
parameter_list|,
name|Set
argument_list|<
name|?
argument_list|>
name|entities
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|strings
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|entities
control|)
block|{
name|strings
operator|.
name|add
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|strings
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|strings
control|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
name|prefix
operator|+
name|s
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

