begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|DataTypePhysicalVariation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorExpressionDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_comment
comment|/**  * Base class for vector expressions.  *  * A vector expression is a vectorized execution tree that evaluates the same result as a (row-mode)  * ExprNodeDesc tree describes.  *  * A vector expression has 0, 1, or more parameters and an optional output column.  These are  * normally passed to the vector expression object' constructor.  A few special case classes accept  * extra parameters via set* method.  *  * A ExprNodeColumnDesc vectorizes to the IdentityExpression class where the input column number  * parameter is the same as the output column number.  *  * A ExprNodeGenericFuncDesc's generic function can vectorize to many different vectorized objects  * depending on the parameter expression kinds (column, constant, etc) and data types.  Each  * vectorized class implements the getDecription which indicates the particular expression kind  * and data type specialization that class is designed for.  The Description is used by the  * VectorizationContext class in matching the right vectorized class.  *  * The constructor parameters need to be in the same order as the generic function because  * the VectorizationContext class automates parameter generation and object construction.  *  * Type information is remembered for the input parameters and the output type.  *  * A vector expression has optional children vector expressions when 1 or more parameters need  * to be calculated into vector scratch columns.  Columns and constants do not need children  * expressions.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|VectorExpression
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/**    * Child expressions for parameters -- but only those that need to be computed.    *    * NOTE: Columns and constants are not included in the children.  That is: column numbers and    * scalar values are passed via the constructor and remembered by the individual vector expression    * classes. They are not represented in the children.    */
specifier|protected
name|VectorExpression
index|[]
name|childExpressions
decl_stmt|;
comment|/**    * ALL input parameter type information is here including those for (non-computed) columns and    * scalar values.    *    * The vectorExpressionParameters() method is used to get the displayable string for the    * parameters used by EXPLAIN, logging, etc.    */
specifier|protected
name|TypeInfo
index|[]
name|inputTypeInfos
decl_stmt|;
specifier|protected
name|DataTypePhysicalVariation
index|[]
name|inputDataTypePhysicalVariations
decl_stmt|;
comment|/**    * Output column number and type information of the vector expression.    */
specifier|protected
specifier|final
name|int
name|outputColumnNum
decl_stmt|;
specifier|protected
name|TypeInfo
name|outputTypeInfo
decl_stmt|;
specifier|protected
name|DataTypePhysicalVariation
name|outputDataTypePhysicalVariation
decl_stmt|;
comment|/*    * Use this constructor when there is NO output column.    */
specifier|public
name|VectorExpression
parameter_list|()
block|{
comment|// Initially, no children or inputs; set later with setInput* methods.
name|childExpressions
operator|=
literal|null
expr_stmt|;
name|inputTypeInfos
operator|=
literal|null
expr_stmt|;
name|inputDataTypePhysicalVariations
operator|=
literal|null
expr_stmt|;
comment|// No output type information.
name|outputColumnNum
operator|=
operator|-
literal|1
expr_stmt|;
name|outputTypeInfo
operator|=
literal|null
expr_stmt|;
name|outputDataTypePhysicalVariation
operator|=
literal|null
expr_stmt|;
block|}
comment|/*    * Use this constructor when there is an output column.    */
specifier|public
name|VectorExpression
parameter_list|(
name|int
name|outputColumnNum
parameter_list|)
block|{
comment|// By default, no children or inputs.
name|childExpressions
operator|=
literal|null
expr_stmt|;
name|inputTypeInfos
operator|=
literal|null
expr_stmt|;
name|inputDataTypePhysicalVariations
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|outputColumnNum
operator|=
name|outputColumnNum
expr_stmt|;
comment|// Set later with setOutput* methods.
name|outputTypeInfo
operator|=
literal|null
expr_stmt|;
name|outputDataTypePhysicalVariation
operator|=
literal|null
expr_stmt|;
block|}
comment|//------------------------------------------------------------------------------------------------
comment|/**    * Initialize the child expressions.    */
specifier|public
name|void
name|setChildExpressions
parameter_list|(
name|VectorExpression
index|[]
name|childExpressions
parameter_list|)
block|{
name|this
operator|.
name|childExpressions
operator|=
name|childExpressions
expr_stmt|;
block|}
specifier|public
name|VectorExpression
index|[]
name|getChildExpressions
parameter_list|()
block|{
return|return
name|childExpressions
return|;
block|}
comment|//------------------------------------------------------------------------------------------------
specifier|public
name|void
name|setInputTypeInfos
parameter_list|(
name|TypeInfo
modifier|...
name|inputTypeInfos
parameter_list|)
block|{
name|this
operator|.
name|inputTypeInfos
operator|=
name|inputTypeInfos
expr_stmt|;
block|}
specifier|public
name|TypeInfo
index|[]
name|getInputTypeInfos
parameter_list|()
block|{
return|return
name|inputTypeInfos
return|;
block|}
specifier|public
name|void
name|setInputDataTypePhysicalVariations
parameter_list|(
name|DataTypePhysicalVariation
modifier|...
name|inputDataTypePhysicalVariations
parameter_list|)
block|{
name|this
operator|.
name|inputDataTypePhysicalVariations
operator|=
name|inputDataTypePhysicalVariations
expr_stmt|;
block|}
specifier|public
name|DataTypePhysicalVariation
index|[]
name|getInputDataTypePhysicalVariations
parameter_list|()
block|{
return|return
name|inputDataTypePhysicalVariations
return|;
block|}
comment|/*    * Return a short string with the parameters of the vector expression that will be    * shown in EXPLAIN output, etc.    */
specifier|public
specifier|abstract
name|String
name|vectorExpressionParameters
parameter_list|()
function_decl|;
comment|//------------------------------------------------------------------------------------------------
specifier|public
name|void
name|transientInit
parameter_list|()
throws|throws
name|HiveException
block|{
comment|// Do nothing by default.
block|}
specifier|public
specifier|static
name|void
name|doTransientInit
parameter_list|(
name|VectorExpression
name|vecExpr
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|vecExpr
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doTransientInitRecurse
argument_list|(
name|vecExpr
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|doTransientInit
parameter_list|(
name|VectorExpression
index|[]
name|vecExprs
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|vecExprs
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|VectorExpression
name|vecExpr
range|:
name|vecExprs
control|)
block|{
name|doTransientInitRecurse
argument_list|(
name|vecExpr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|doTransientInitRecurse
parameter_list|(
name|VectorExpression
name|vecExpr
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Well, don't recurse but make sure all children are initialized.
name|vecExpr
operator|.
name|transientInit
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|VectorExpression
argument_list|>
name|newChildren
init|=
operator|new
name|ArrayList
argument_list|<
name|VectorExpression
argument_list|>
argument_list|()
decl_stmt|;
name|VectorExpression
index|[]
name|children
init|=
name|vecExpr
operator|.
name|getChildExpressions
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|newChildren
argument_list|,
name|children
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|newChildren
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|VectorExpression
name|childVecExpr
init|=
name|newChildren
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|children
operator|=
name|childVecExpr
operator|.
name|getChildExpressions
argument_list|()
expr_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|newChildren
argument_list|,
name|children
argument_list|)
expr_stmt|;
block|}
name|childVecExpr
operator|.
name|transientInit
argument_list|()
expr_stmt|;
block|}
block|}
comment|//------------------------------------------------------------------------------------------------
comment|/**    * Returns the index of the output column in the array    * of column vectors. If not applicable, -1 is returned.    * @return Index of the output column    */
specifier|public
name|int
name|getOutputColumnNum
parameter_list|()
block|{
return|return
name|outputColumnNum
return|;
block|}
comment|/**    * Returns type of the output column.    */
specifier|public
name|TypeInfo
name|getOutputTypeInfo
parameter_list|()
block|{
return|return
name|outputTypeInfo
return|;
block|}
comment|/**    * Set type of the output column.    */
specifier|public
name|void
name|setOutputTypeInfo
parameter_list|(
name|TypeInfo
name|outputTypeInfo
parameter_list|)
block|{
name|this
operator|.
name|outputTypeInfo
operator|=
name|outputTypeInfo
expr_stmt|;
block|}
comment|/**    * Set data type read variation.    */
specifier|public
name|void
name|setOutputDataTypePhysicalVariation
parameter_list|(
name|DataTypePhysicalVariation
name|outputDataTypePhysicalVariation
parameter_list|)
block|{
name|this
operator|.
name|outputDataTypePhysicalVariation
operator|=
name|outputDataTypePhysicalVariation
expr_stmt|;
block|}
specifier|public
name|DataTypePhysicalVariation
name|getOutputDataTypePhysicalVariation
parameter_list|()
block|{
return|return
name|outputDataTypePhysicalVariation
return|;
block|}
specifier|public
name|ColumnVector
operator|.
name|Type
name|getOutputColumnVectorType
parameter_list|()
throws|throws
name|HiveException
block|{
return|return
name|VectorizationContext
operator|.
name|getColumnVectorTypeFromTypeInfo
argument_list|(
name|outputTypeInfo
argument_list|,
name|outputDataTypePhysicalVariation
argument_list|)
return|;
block|}
comment|/**    * This is the primary method to implement expression logic.    * @param batch    */
specifier|public
specifier|abstract
name|void
name|evaluate
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
function_decl|;
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|childExpressions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|VectorExpression
name|child
range|:
name|childExpressions
control|)
block|{
name|child
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|abstract
name|VectorExpressionDescriptor
operator|.
name|Descriptor
name|getDescriptor
parameter_list|()
function_decl|;
comment|/**    * Evaluate the child expressions on the given input batch.    * @param vrg {@link VectorizedRowBatch}    */
specifier|final
specifier|protected
name|void
name|evaluateChildren
parameter_list|(
name|VectorizedRowBatch
name|vrg
parameter_list|)
block|{
if|if
condition|(
name|childExpressions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|VectorExpression
name|ve
range|:
name|childExpressions
control|)
block|{
name|ve
operator|.
name|evaluate
argument_list|(
name|vrg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|String
name|getColumnParamString
parameter_list|(
name|int
name|typeNum
parameter_list|,
name|int
name|columnNum
parameter_list|)
block|{
return|return
literal|"col "
operator|+
name|columnNum
operator|+
literal|":"
operator|+
name|getParamTypeString
argument_list|(
name|typeNum
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getLongValueParamString
parameter_list|(
name|int
name|typeNum
parameter_list|,
name|long
name|value
parameter_list|)
block|{
return|return
literal|"val "
operator|+
name|value
operator|+
literal|":"
operator|+
name|getParamTypeString
argument_list|(
name|typeNum
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getDoubleValueParamString
parameter_list|(
name|int
name|typeNum
parameter_list|,
name|double
name|value
parameter_list|)
block|{
return|return
literal|"val "
operator|+
name|value
operator|+
literal|":"
operator|+
name|getParamTypeString
argument_list|(
name|typeNum
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getParamTypeString
parameter_list|(
name|int
name|typeNum
parameter_list|)
block|{
if|if
condition|(
name|inputTypeInfos
operator|==
literal|null
operator|||
name|inputDataTypePhysicalVariations
operator|==
literal|null
condition|)
block|{
name|fake
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|typeNum
operator|>=
name|inputTypeInfos
operator|.
name|length
operator|||
name|typeNum
operator|>=
name|inputDataTypePhysicalVariations
operator|.
name|length
condition|)
block|{
name|fake
operator|++
expr_stmt|;
block|}
return|return
name|getTypeName
argument_list|(
name|inputTypeInfos
index|[
name|typeNum
index|]
argument_list|,
name|inputDataTypePhysicalVariations
index|[
name|typeNum
index|]
argument_list|)
return|;
block|}
specifier|static
name|int
name|fake
decl_stmt|;
specifier|public
specifier|static
name|String
name|getTypeName
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|,
name|DataTypePhysicalVariation
name|dataTypePhysicalVariation
parameter_list|)
block|{
if|if
condition|(
name|typeInfo
operator|==
literal|null
condition|)
block|{
name|fake
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|dataTypePhysicalVariation
operator|!=
literal|null
operator|&&
name|dataTypePhysicalVariation
operator|!=
name|DataTypePhysicalVariation
operator|.
name|NONE
condition|)
block|{
return|return
name|typeInfo
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|dataTypePhysicalVariation
return|;
block|}
else|else
block|{
return|return
name|typeInfo
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|instanceof
name|IdentityExpression
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
name|vectorExpressionParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|vectorExpressionParameters
init|=
name|vectorExpressionParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|vectorExpressionParameters
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|vectorExpressionParameters
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|childExpressions
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"(children: "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childExpressions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|b
operator|.
name|append
argument_list|(
name|childExpressions
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|childExpressions
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|b
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|outputColumnNum
operator|!=
operator|-
literal|1
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|" -> "
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|outputColumnNum
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|getTypeName
argument_list|(
name|outputTypeInfo
argument_list|,
name|outputDataTypePhysicalVariation
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|displayUtf8Bytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
return|return
literal|"NULL"
return|;
block|}
else|else
block|{
return|return
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|String
name|displayArrayOfUtf8ByteArrays
parameter_list|(
name|byte
index|[]
index|[]
name|arrayOfByteArrays
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|isFirst
init|=
literal|true
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|bytes
range|:
name|arrayOfByteArrays
control|)
block|{
if|if
condition|(
name|isFirst
condition|)
block|{
name|isFirst
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|displayUtf8Bytes
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

