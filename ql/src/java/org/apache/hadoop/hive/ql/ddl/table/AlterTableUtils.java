begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ReplicationSpec
import|;
end_import

begin_comment
comment|/**  * Utilities used by some ALTER TABLE commands.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|AlterTableUtils
block|{
specifier|private
name|AlterTableUtils
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"AlterTableUtils should not be instantiated"
argument_list|)
throw|;
block|}
comment|/**    * Validate if the given table/partition is eligible for update.    */
specifier|public
specifier|static
name|boolean
name|allowOperationInReplicationScope
parameter_list|(
name|Hive
name|db
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|,
name|ReplicationSpec
name|replicationSpec
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|(
literal|null
operator|==
name|replicationSpec
operator|)
operator|||
operator|(
operator|!
name|replicationSpec
operator|.
name|isInReplicationScope
argument_list|()
operator|)
condition|)
block|{
comment|// Always allow the operation if it is not in replication scope.
return|return
literal|true
return|;
block|}
comment|// If the table/partition exist and is older than the event, then just apply the event else noop.
name|Table
name|existingTable
init|=
name|db
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|existingTable
operator|!=
literal|null
operator|)
operator|&&
name|replicationSpec
operator|.
name|allowEventReplacementInto
argument_list|(
name|existingTable
operator|.
name|getParameters
argument_list|()
argument_list|)
condition|)
block|{
comment|// Table exists and is older than the update. Now, need to ensure if update allowed on the partition.
if|if
condition|(
name|partSpec
operator|!=
literal|null
condition|)
block|{
name|Partition
name|existingPtn
init|=
name|db
operator|.
name|getPartition
argument_list|(
name|existingTable
argument_list|,
name|partSpec
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|existingPtn
operator|!=
literal|null
operator|)
operator|&&
name|replicationSpec
operator|.
name|allowEventReplacementInto
argument_list|(
name|existingPtn
operator|.
name|getParameters
argument_list|()
argument_list|)
operator|)
return|;
block|}
comment|// Replacement is allowed as the existing table is older than event
return|return
literal|true
return|;
block|}
comment|// The table is missing either due to drop/rename which follows the operation.
comment|// Or the existing table is newer than our update. So, don't allow the update.
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isSchemaEvolutionEnabled
parameter_list|(
name|Table
name|table
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|AcidUtils
operator|.
name|isTablePropertyTransactional
argument_list|(
name|table
operator|.
name|getMetadata
argument_list|()
argument_list|)
operator|||
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_SCHEMA_EVOLUTION
argument_list|)
return|;
block|}
block|}
end_class

end_unit

