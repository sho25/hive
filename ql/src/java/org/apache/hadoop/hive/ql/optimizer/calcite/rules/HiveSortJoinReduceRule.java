begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollationTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveSortLimit
import|;
end_import

begin_comment
comment|/**  * Planner rule that pushes  * a {@link org.apache.hadoop.hive.ql.optimizer.calcite.reloperators.HiveSortLimit}  * past a {@link org.apache.hadoop.hive.ql.optimizer.calcite.reloperators.HiveJoin}.  */
end_comment

begin_class
specifier|public
class|class
name|HiveSortJoinReduceRule
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|HiveSortJoinReduceRule
name|INSTANCE
init|=
operator|new
name|HiveSortJoinReduceRule
argument_list|()
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|private
name|HiveSortJoinReduceRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|HiveSortLimit
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|HiveJoin
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|HiveSortLimit
name|sortLimit
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|HiveJoin
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// If sort does not contain a limit operation or limit is 0, we bail out
if|if
condition|(
operator|!
name|HiveCalciteUtil
operator|.
name|limitRelNode
argument_list|(
name|sortLimit
argument_list|)
operator|||
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|sortLimit
operator|.
name|fetch
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// 1) If join is not a left or right outer, we bail out
comment|// 2) If any sort column is not part of the input where the
comment|// sort is pushed, we bail out
name|RelNode
name|reducedInput
decl_stmt|;
if|if
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
operator|==
name|JoinRelType
operator|.
name|LEFT
condition|)
block|{
name|reducedInput
operator|=
name|join
operator|.
name|getLeft
argument_list|()
expr_stmt|;
if|if
condition|(
name|sortLimit
operator|.
name|getCollation
argument_list|()
operator|!=
name|RelCollations
operator|.
name|EMPTY
condition|)
block|{
for|for
control|(
name|RelFieldCollation
name|relFieldCollation
range|:
name|sortLimit
operator|.
name|getCollation
argument_list|()
operator|.
name|getFieldCollations
argument_list|()
control|)
block|{
if|if
condition|(
name|relFieldCollation
operator|.
name|getFieldIndex
argument_list|()
operator|>=
name|join
operator|.
name|getLeft
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
operator|==
name|JoinRelType
operator|.
name|RIGHT
condition|)
block|{
name|reducedInput
operator|=
name|join
operator|.
name|getRight
argument_list|()
expr_stmt|;
if|if
condition|(
name|sortLimit
operator|.
name|getCollation
argument_list|()
operator|!=
name|RelCollations
operator|.
name|EMPTY
condition|)
block|{
for|for
control|(
name|RelFieldCollation
name|relFieldCollation
range|:
name|sortLimit
operator|.
name|getCollation
argument_list|()
operator|.
name|getFieldCollations
argument_list|()
control|)
block|{
if|if
condition|(
name|relFieldCollation
operator|.
name|getFieldIndex
argument_list|()
operator|<
name|join
operator|.
name|getLeft
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
comment|// Finally, if we do not reduce the input size, we bail out
specifier|final
name|int
name|offset
init|=
name|sortLimit
operator|.
name|offset
operator|==
literal|null
condition|?
literal|0
else|:
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|sortLimit
operator|.
name|offset
argument_list|)
decl_stmt|;
specifier|final
name|RelMetadataQuery
name|mq
init|=
name|call
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|offset
operator|+
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|sortLimit
operator|.
name|fetch
argument_list|)
operator|>=
name|mq
operator|.
name|getRowCount
argument_list|(
name|reducedInput
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|HiveSortLimit
name|sortLimit
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|HiveJoin
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RelNode
name|inputLeft
init|=
name|join
operator|.
name|getLeft
argument_list|()
decl_stmt|;
name|RelNode
name|inputRight
init|=
name|join
operator|.
name|getRight
argument_list|()
decl_stmt|;
comment|// We create a new sort operator on the corresponding input
if|if
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
operator|==
name|JoinRelType
operator|.
name|LEFT
condition|)
block|{
name|inputLeft
operator|=
name|sortLimit
operator|.
name|copy
argument_list|(
name|sortLimit
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|inputLeft
argument_list|,
name|sortLimit
operator|.
name|getCollation
argument_list|()
argument_list|,
name|sortLimit
operator|.
name|offset
argument_list|,
name|sortLimit
operator|.
name|fetch
argument_list|)
expr_stmt|;
operator|(
operator|(
name|HiveSortLimit
operator|)
name|inputLeft
operator|)
operator|.
name|setRuleCreated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Adjust right collation
specifier|final
name|RelCollation
name|rightCollation
init|=
name|RelCollationTraitDef
operator|.
name|INSTANCE
operator|.
name|canonize
argument_list|(
name|RelCollations
operator|.
name|shift
argument_list|(
name|sortLimit
operator|.
name|getCollation
argument_list|()
argument_list|,
operator|-
name|join
operator|.
name|getLeft
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|inputRight
operator|=
name|sortLimit
operator|.
name|copy
argument_list|(
name|sortLimit
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|rightCollation
argument_list|)
argument_list|,
name|inputRight
argument_list|,
name|rightCollation
argument_list|,
name|sortLimit
operator|.
name|offset
argument_list|,
name|sortLimit
operator|.
name|fetch
argument_list|)
expr_stmt|;
operator|(
operator|(
name|HiveSortLimit
operator|)
name|inputRight
operator|)
operator|.
name|setRuleCreated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// We copy the join and the top sort operator
name|RelNode
name|result
init|=
name|join
operator|.
name|copy
argument_list|(
name|join
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|,
name|inputLeft
argument_list|,
name|inputRight
argument_list|,
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|,
name|join
operator|.
name|isSemiJoinDone
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
name|sortLimit
operator|.
name|copy
argument_list|(
name|sortLimit
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|result
argument_list|,
name|sortLimit
operator|.
name|getCollation
argument_list|()
argument_list|,
name|sortLimit
operator|.
name|offset
argument_list|,
name|sortLimit
operator|.
name|fetch
argument_list|)
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

