begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_comment
comment|/**  * GenericUDFArrayContains.  *  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"array_contains"
argument_list|,
name|value
operator|=
literal|"_FUNC_(array, value) - Returns TRUE if the array contains value."
argument_list|,
name|extended
operator|=
literal|"Example:\n"
operator|+
literal|"> SELECT _FUNC_(array(1, 2, 3), 2) FROM src LIMIT 1;\n"
operator|+
literal|"  true"
argument_list|)
annotation|@
name|NDV
argument_list|(
name|maxNdv
operator|=
literal|2
argument_list|)
specifier|public
class|class
name|GenericUDFArrayContains
extends|extends
name|GenericUDF
block|{
specifier|private
specifier|static
specifier|final
name|int
name|ARRAY_IDX
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|VALUE_IDX
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ARG_COUNT
init|=
literal|2
decl_stmt|;
comment|// Number of arguments to this UDF
specifier|private
specifier|static
specifier|final
name|String
name|FUNC_NAME
init|=
literal|"ARRAY_CONTAINS"
decl_stmt|;
comment|// External Name
specifier|private
specifier|transient
name|ObjectInspector
name|valueOI
decl_stmt|;
specifier|private
specifier|transient
name|ListObjectInspector
name|arrayOI
decl_stmt|;
specifier|private
specifier|transient
name|ObjectInspector
name|arrayElementOI
decl_stmt|;
specifier|private
name|BooleanWritable
name|result
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
comment|// Check if two arguments were passed
if|if
condition|(
name|arguments
operator|.
name|length
operator|!=
name|ARG_COUNT
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"The function "
operator|+
name|FUNC_NAME
operator|+
literal|" accepts "
operator|+
name|ARG_COUNT
operator|+
literal|" arguments."
argument_list|)
throw|;
block|}
comment|// Check if ARRAY_IDX argument is of category LIST
if|if
condition|(
operator|!
name|arguments
index|[
name|ARRAY_IDX
index|]
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|LIST
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
name|ARRAY_IDX
argument_list|,
literal|"\""
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
operator|.
name|LIST_TYPE_NAME
operator|+
literal|"\" "
operator|+
literal|"expected at function ARRAY_CONTAINS, but "
operator|+
literal|"\""
operator|+
name|arguments
index|[
name|ARRAY_IDX
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|"\" "
operator|+
literal|"is found"
argument_list|)
throw|;
block|}
name|arrayOI
operator|=
operator|(
name|ListObjectInspector
operator|)
name|arguments
index|[
name|ARRAY_IDX
index|]
expr_stmt|;
name|arrayElementOI
operator|=
name|arrayOI
operator|.
name|getListElementObjectInspector
argument_list|()
expr_stmt|;
name|valueOI
operator|=
name|arguments
index|[
name|VALUE_IDX
index|]
expr_stmt|;
comment|// Check if list element and value are of same type
if|if
condition|(
operator|!
name|ObjectInspectorUtils
operator|.
name|compareTypes
argument_list|(
name|arrayElementOI
argument_list|,
name|valueOI
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
name|VALUE_IDX
argument_list|,
literal|"\""
operator|+
name|arrayElementOI
operator|.
name|getTypeName
argument_list|()
operator|+
literal|"\""
operator|+
literal|" expected at function ARRAY_CONTAINS, but "
operator|+
literal|"\""
operator|+
name|valueOI
operator|.
name|getTypeName
argument_list|()
operator|+
literal|"\""
operator|+
literal|" is found"
argument_list|)
throw|;
block|}
comment|// Check if the comparison is supported for this type
if|if
condition|(
operator|!
name|ObjectInspectorUtils
operator|.
name|compareSupported
argument_list|(
name|valueOI
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"The function "
operator|+
name|FUNC_NAME
operator|+
literal|" does not support comparison for "
operator|+
literal|"\""
operator|+
name|valueOI
operator|.
name|getTypeName
argument_list|()
operator|+
literal|"\""
operator|+
literal|" types"
argument_list|)
throw|;
block|}
name|result
operator|=
operator|new
name|BooleanWritable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBooleanObjectInspector
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
name|result
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Object
name|array
init|=
name|arguments
index|[
name|ARRAY_IDX
index|]
operator|.
name|get
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|arguments
index|[
name|VALUE_IDX
index|]
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|arrayLength
init|=
name|arrayOI
operator|.
name|getListLength
argument_list|(
name|array
argument_list|)
decl_stmt|;
comment|// Check if array is null or empty or value is null
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|arrayLength
operator|<=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
comment|// Compare the value to each element of array until a match is found
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arrayLength
condition|;
operator|++
name|i
control|)
block|{
name|Object
name|listElement
init|=
name|arrayOI
operator|.
name|getListElement
argument_list|(
name|array
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|listElement
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|value
argument_list|,
name|valueOI
argument_list|,
name|listElement
argument_list|,
name|arrayElementOI
argument_list|)
operator|==
literal|0
condition|)
block|{
name|result
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
assert|assert
operator|(
name|children
operator|.
name|length
operator|==
name|ARG_COUNT
operator|)
assert|;
return|return
literal|"array_contains("
operator|+
name|children
index|[
name|ARRAY_IDX
index|]
operator|+
literal|", "
operator|+
name|children
index|[
name|VALUE_IDX
index|]
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

