begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * After this job closed, some data (feedbacks) can be passed to descendant jobs.  * Currently the feedbacks is a generic data structure that has a key (FeedBackType)  * and an object as value. The type of the object depends on the key.  **/
end_comment

begin_class
specifier|public
class|class
name|JobCloseFeedBack
block|{
comment|// list of feedback types
specifier|public
specifier|static
enum|enum
name|FeedBackType
block|{
name|DYNAMIC_PARTITIONS
block|,
comment|// list of dynamic partitions generated by this MR job
name|NONE
block|}
empty_stmt|;
name|Map
argument_list|<
name|FeedBackType
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|feedBacks
decl_stmt|;
comment|// one type corresponds to a list of values
specifier|public
name|JobCloseFeedBack
parameter_list|()
block|{
name|feedBacks
operator|=
operator|new
name|HashMap
argument_list|<
name|FeedBackType
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|append
parameter_list|(
name|FeedBackType
name|t
parameter_list|,
name|Object
name|v
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|vals
init|=
name|feedBacks
operator|.
name|get
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|vals
operator|==
literal|null
condition|)
block|{
name|vals
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|vals
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|feedBacks
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|get
parameter_list|(
name|FeedBackType
name|t
parameter_list|)
block|{
return|return
name|feedBacks
operator|.
name|get
argument_list|(
name|t
argument_list|)
return|;
block|}
block|}
end_class

end_unit

