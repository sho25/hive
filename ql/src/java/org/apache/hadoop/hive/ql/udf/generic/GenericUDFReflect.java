begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentLengthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|StringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveTypeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * A simple generic udf to call java static functions via reflection.  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"reflect"
argument_list|,
name|value
operator|=
literal|"_FUNC_(class,method[,arg1[,arg2..]]) calls method with reflection"
argument_list|,
name|extended
operator|=
literal|"Use this UDF to call Java methods by matching the argument signature\n"
argument_list|)
annotation|@
name|UDFType
argument_list|(
name|deterministic
operator|=
literal|false
argument_list|)
specifier|public
class|class
name|GenericUDFReflect
extends|extends
name|GenericUDF
block|{
name|PrimitiveObjectInspector
index|[]
name|argumentOIs
decl_stmt|;
name|StringObjectInspector
name|classNameOI
decl_stmt|;
name|StringObjectInspector
name|methodNameOI
decl_stmt|;
name|PrimitiveTypeEntry
index|[]
name|parameterTypes
decl_stmt|;
name|Class
index|[]
name|parameterClasses
decl_stmt|;
name|Object
index|[]
name|parameterJavaValues
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
if|if
condition|(
name|arguments
operator|.
name|length
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentLengthException
argument_list|(
literal|"The function GenericUDFReflect(class,method[,arg1[,arg2]...])"
operator|+
literal|" accepts 2 or more arguments."
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|arguments
index|[
name|i
index|]
operator|instanceof
name|StringObjectInspector
operator|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
name|i
argument_list|,
literal|"The first 2 parameters of GenericUDFReflect(class,method[,arg1[,arg2]...])"
operator|+
literal|" should be string."
argument_list|)
throw|;
block|}
block|}
name|classNameOI
operator|=
operator|(
name|StringObjectInspector
operator|)
name|ObjectInspectorUtils
operator|.
name|getStandardObjectInspector
argument_list|(
name|arguments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|methodNameOI
operator|=
operator|(
name|StringObjectInspector
operator|)
name|ObjectInspectorUtils
operator|.
name|getStandardObjectInspector
argument_list|(
name|arguments
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|parameterTypes
operator|=
operator|new
name|PrimitiveTypeEntry
index|[
name|arguments
operator|.
name|length
operator|-
literal|2
index|]
expr_stmt|;
name|parameterClasses
operator|=
operator|new
name|Class
index|[
name|arguments
operator|.
name|length
operator|-
literal|2
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|arguments
index|[
name|i
index|]
operator|.
name|getCategory
argument_list|()
operator|!=
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
name|i
argument_list|,
literal|"The parameters of GenericUDFReflect(class,method[,arg1[,arg2]...])"
operator|+
literal|" must be primitive (int, double, string, etc)."
argument_list|)
throw|;
block|}
name|PrimitiveCategory
name|category
init|=
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
name|i
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
name|parameterTypes
index|[
name|i
operator|-
literal|2
index|]
operator|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getTypeEntryFromPrimitiveCategory
argument_list|(
name|category
argument_list|)
expr_stmt|;
name|parameterClasses
index|[
name|i
operator|-
literal|2
index|]
operator|=
name|parameterTypes
index|[
name|i
operator|-
literal|2
index|]
operator|.
name|primitiveJavaType
operator|==
literal|null
condition|?
name|parameterTypes
index|[
name|i
operator|-
literal|2
index|]
operator|.
name|primitiveJavaClass
else|:
name|parameterTypes
index|[
name|i
operator|-
literal|2
index|]
operator|.
name|primitiveJavaType
expr_stmt|;
block|}
name|parameterJavaValues
operator|=
operator|new
name|Object
index|[
name|arguments
operator|.
name|length
operator|-
literal|2
index|]
expr_stmt|;
name|argumentOIs
operator|=
operator|new
name|PrimitiveObjectInspector
index|[
name|arguments
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|argumentOIs
index|[
name|i
index|]
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveJavaObjectInspector
argument_list|(
name|PrimitiveCategory
operator|.
name|STRING
argument_list|)
return|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|c
decl_stmt|;
name|Object
name|o
decl_stmt|;
name|Method
name|m
decl_stmt|;
name|Object
name|className
decl_stmt|;
name|Object
name|methodName
decl_stmt|;
name|String
name|result
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Try to find the class
comment|// Skip class loading if the class name didn't change
name|boolean
name|classNameChanged
init|=
literal|false
decl_stmt|;
name|ObjectInspector
name|newClassNameOI
init|=
name|argumentOIs
index|[
literal|0
index|]
decl_stmt|;
name|Object
name|newClassName
init|=
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// We compare class name/method name using ObjectInspectorUtils.compare(...), to avoid
comment|// any object conversion (which may cause object creation) in most cases, when the class
comment|// name/method name is constant Java String, or constant Text (StringWritable).
if|if
condition|(
name|className
operator|==
literal|null
operator|||
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|className
argument_list|,
name|classNameOI
argument_list|,
name|newClassName
argument_list|,
name|newClassNameOI
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|className
operator|=
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|newClassName
argument_list|,
name|newClassNameOI
argument_list|)
expr_stmt|;
name|String
name|classNameString
init|=
name|classNameOI
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|className
argument_list|)
decl_stmt|;
try|try
block|{
name|c
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|classNameString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"UDFReflect evaluate "
argument_list|,
name|ex
argument_list|)
throw|;
block|}
try|try
block|{
name|o
operator|=
literal|null
expr_stmt|;
name|o
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|c
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignored
block|}
name|classNameChanged
operator|=
literal|true
expr_stmt|;
block|}
comment|// Try to find the method
comment|// Skip method finding if the method name didn't change, and class name didn't change.
name|ObjectInspector
name|newMethodNameOI
init|=
name|argumentOIs
index|[
literal|1
index|]
decl_stmt|;
name|Object
name|newMethodName
init|=
name|arguments
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|methodName
operator|==
literal|null
operator|||
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|methodName
argument_list|,
name|methodNameOI
argument_list|,
name|newMethodName
argument_list|,
name|newMethodNameOI
argument_list|)
operator|!=
literal|0
operator|||
name|classNameChanged
condition|)
block|{
name|methodName
operator|=
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|newMethodName
argument_list|,
name|newMethodNameOI
argument_list|)
expr_stmt|;
name|String
name|methodNameString
init|=
name|methodNameOI
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|methodName
argument_list|)
decl_stmt|;
try|try
block|{
name|m
operator|=
name|findMethod
argument_list|(
name|c
argument_list|,
name|methodNameString
argument_list|,
name|parameterTypes
argument_list|,
name|parameterClasses
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"UDFReflect getMethod "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Get the parameter values
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|parameterJavaValues
index|[
name|i
operator|-
literal|2
index|]
operator|=
name|argumentOIs
index|[
name|i
index|]
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|arguments
index|[
name|i
index|]
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|result
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|m
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
name|parameterJavaValues
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e1
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"UDFReflect evaluate "
operator|+
name|e1
operator|+
literal|" method = "
operator|+
name|m
operator|+
literal|" args = "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|parameterJavaValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e1
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"UDFReflect evaluate "
operator|+
name|e1
operator|+
literal|" method = "
operator|+
name|m
operator|+
literal|" args = "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|parameterJavaValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e1
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"UDFReflect evaluate "
operator|+
name|e1
operator|+
literal|" method = "
operator|+
name|m
operator|+
literal|" args = "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|parameterJavaValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"reflect("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|children
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// a(string,int,int) can be matched with methods like
comment|// a(string,int,int), a(string,int,Integer), a(string,Integer,int) and a(string,Integer,Integer)
comment|// and accepts the first one clazz.getMethods() returns
specifier|private
name|Method
name|findMethod
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|String
name|name
parameter_list|,
name|PrimitiveTypeEntry
index|[]
name|parameterTypes
parameter_list|,
name|Class
index|[]
name|parameterClasses
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Method
name|method
range|:
name|clazz
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
name|method
operator|.
name|getReturnType
argument_list|()
operator|!=
name|String
operator|.
name|class
operator|||
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|!=
name|parameterTypes
operator|.
name|length
condition|)
block|{
continue|continue;
block|}
comment|// returns first one matches all of the params
name|boolean
name|match
init|=
literal|true
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|types
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameterTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|types
index|[
name|i
index|]
operator|!=
name|parameterTypes
index|[
name|i
index|]
operator|.
name|primitiveJavaType
operator|&&
name|types
index|[
name|i
index|]
operator|!=
name|parameterTypes
index|[
name|i
index|]
operator|.
name|primitiveJavaClass
condition|)
block|{
name|match
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|match
condition|)
block|{
return|return
name|method
return|;
block|}
block|}
comment|// tried all, back to original code (for error message)
return|return
name|clazz
operator|.
name|getMethod
argument_list|(
name|name
argument_list|,
name|parameterClasses
argument_list|)
return|;
block|}
block|}
end_class

end_unit

