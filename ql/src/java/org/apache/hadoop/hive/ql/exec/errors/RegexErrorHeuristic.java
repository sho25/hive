begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|errors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_comment
comment|/**  * Simple heuristic where the query and the lines of the task log file are run  * through regular expressions to see if they resemble a known error condition.  *  * Only a single regular expression can be supplied to match the query whereas  * multiple regular expressions can be supplied to match lines from the log file.  * A mapping is maintained from the regular expression to the lines from the log  * file that it matched.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|RegexErrorHeuristic
implements|implements
name|ErrorHeuristic
block|{
specifier|private
name|String
name|query
init|=
literal|null
decl_stmt|;
specifier|private
name|JobConf
name|conf
init|=
literal|null
decl_stmt|;
comment|// Pattern to look for in the hive query and whether it matched
specifier|private
name|String
name|queryRegex
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|queryMatches
init|=
literal|false
decl_stmt|;
comment|// The regexes to look for in the log files
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|logRegexes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Mapping from the regex to lines in the log file where find() == true
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|regexToLogLines
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Pattern
argument_list|>
name|regexToPattern
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Pattern
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|RegexErrorHeuristic
parameter_list|()
block|{   }
specifier|protected
name|void
name|setQueryRegex
parameter_list|(
name|String
name|queryRegex
parameter_list|)
block|{
name|this
operator|.
name|queryRegex
operator|=
name|queryRegex
expr_stmt|;
block|}
specifier|protected
name|String
name|getQueryRegex
parameter_list|()
block|{
return|return
name|queryRegex
return|;
block|}
specifier|protected
name|boolean
name|getQueryMatches
parameter_list|()
block|{
return|return
name|queryMatches
return|;
block|}
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|getLogRegexes
parameter_list|()
block|{
return|return
name|this
operator|.
name|logRegexes
return|;
block|}
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getRegexToLogLines
parameter_list|()
block|{
return|return
name|this
operator|.
name|regexToLogLines
return|;
block|}
specifier|protected
name|JobConf
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
comment|/**    * Before init is called, logRegexes and queryRegexes should be populated.    */
specifier|public
name|void
name|init
parameter_list|(
name|String
name|query
parameter_list|,
name|JobConf
name|conf
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
assert|assert
operator|(
operator|(
name|logRegexes
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|queryRegex
operator|!=
literal|null
operator|)
operator|)
assert|;
name|Pattern
name|queryPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|queryRegex
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
decl_stmt|;
name|queryMatches
operator|=
name|queryPattern
operator|.
name|matcher
argument_list|(
name|query
argument_list|)
operator|.
name|find
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|regex
range|:
name|logRegexes
control|)
block|{
name|regexToPattern
operator|.
name|put
argument_list|(
name|regex
argument_list|,
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
argument_list|)
expr_stmt|;
name|regexToLogLines
operator|.
name|put
argument_list|(
name|regex
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|abstract
name|ErrorAndSolution
name|getErrorAndSolution
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|public
name|void
name|processLogLine
parameter_list|(
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|queryMatches
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Pattern
argument_list|>
name|e
range|:
name|regexToPattern
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|regex
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Pattern
name|p
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|boolean
name|lineMatches
init|=
name|p
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
operator|.
name|find
argument_list|()
decl_stmt|;
if|if
condition|(
name|lineMatches
condition|)
block|{
name|regexToLogLines
operator|.
name|get
argument_list|(
name|regex
argument_list|)
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Resets to state before any processLogLine() calls.    */
specifier|protected
name|void
name|reset
parameter_list|()
block|{
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|lst
range|:
name|regexToLogLines
operator|.
name|values
argument_list|()
control|)
block|{
name|lst
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

