begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentLengthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ConstantObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableConstantIntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableConstantLongObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|LongMath
import|;
end_import

begin_comment
comment|/**  * UDF grouping  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"grouping"
argument_list|,
name|value
operator|=
literal|"_FUNC_(a, p1, ..., pn) - Indicates whether a specified column expression in "
operator|+
literal|"is aggregated or not. Returns 1 for aggregated or 0 for not aggregated. "
argument_list|,
name|extended
operator|=
literal|"a is the grouping id, p1...pn are the indices we want to extract"
argument_list|)
annotation|@
name|UDFType
argument_list|(
name|deterministic
operator|=
literal|true
argument_list|)
specifier|public
class|class
name|GenericUDFGrouping
extends|extends
name|GenericUDF
block|{
specifier|private
specifier|transient
name|PrimitiveObjectInspector
name|groupingIdOI
decl_stmt|;
specifier|private
name|int
index|[]
name|indices
decl_stmt|;
specifier|private
name|LongWritable
name|longWritable
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
if|if
condition|(
name|arguments
operator|.
name|length
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentLengthException
argument_list|(
literal|"grouping() requires at least 2 argument, got "
operator|+
name|arguments
operator|.
name|length
argument_list|)
throw|;
block|}
if|if
condition|(
name|arguments
index|[
literal|0
index|]
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"The first argument to grouping() must be primitive"
argument_list|)
throw|;
block|}
name|PrimitiveObjectInspector
name|arg1OI
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
literal|0
index|]
decl_stmt|;
comment|// INT can happen in cases where grouping() is used without grouping sets, in all other cases it should be LONG.
if|if
condition|(
operator|!
operator|(
name|arg1OI
operator|.
name|getPrimitiveCategory
argument_list|()
operator|==
name|PrimitiveCategory
operator|.
name|INT
operator|||
name|arg1OI
operator|.
name|getPrimitiveCategory
argument_list|()
operator|==
name|PrimitiveCategory
operator|.
name|LONG
operator|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"The first argument to grouping() must be an int/long. Got: "
operator|+
name|arg1OI
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
throw|;
block|}
name|groupingIdOI
operator|=
name|arg1OI
expr_stmt|;
name|indices
operator|=
operator|new
name|int
index|[
name|arguments
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|PrimitiveObjectInspector
name|arg2OI
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|arg2OI
operator|instanceof
name|ConstantObjectInspector
operator|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
name|i
argument_list|,
literal|"Must be a constant. Got: "
operator|+
name|arg2OI
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
throw|;
block|}
name|indices
index|[
name|i
operator|-
literal|1
index|]
operator|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getInt
argument_list|(
operator|(
operator|(
name|ConstantObjectInspector
operator|)
name|arguments
index|[
name|i
index|]
operator|)
operator|.
name|getWritableConstantValue
argument_list|()
argument_list|,
name|arg2OI
argument_list|)
expr_stmt|;
block|}
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// groupingId = PrimitiveObjectInspectorUtils.getInt(arguments[0].get(), groupingIdOI);
comment|// Check that the bit at the given index is '1' or '0'
name|long
name|result
init|=
literal|0
decl_stmt|;
comment|// grouping(c1, c2, c3)
comment|// is equivalent to
comment|// 4 * grouping(c1) + 2 * grouping(c2) + grouping(c3)
for|for
control|(
name|int
name|a
init|=
literal|1
init|;
name|a
operator|<
name|arguments
operator|.
name|length
condition|;
name|a
operator|++
control|)
block|{
name|result
operator|+=
name|LongMath
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
name|indices
operator|.
name|length
operator|-
name|a
argument_list|)
operator|*
operator|(
operator|(
name|PrimitiveObjectInspectorUtils
operator|.
name|getLong
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|,
name|groupingIdOI
argument_list|)
operator|>>
name|indices
index|[
name|a
operator|-
literal|1
index|]
operator|)
operator|&
literal|1
operator|)
expr_stmt|;
block|}
name|longWritable
operator|.
name|set
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|longWritable
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
assert|assert
operator|(
name|children
operator|.
name|length
operator|>
literal|1
operator|)
assert|;
return|return
name|getStandardDisplayString
argument_list|(
literal|"grouping"
argument_list|,
name|children
argument_list|)
return|;
block|}
block|}
end_class

end_unit

