begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|Ansi
operator|.
name|ansi
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|internal
operator|.
name|CLibrary
operator|.
name|STDERR_FILENO
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|internal
operator|.
name|CLibrary
operator|.
name|STDOUT_FILENO
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|internal
operator|.
name|CLibrary
operator|.
name|isatty
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|Ansi
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|TerminalFactory
import|;
end_import

begin_class
specifier|public
class|class
name|InPlaceUpdates
block|{
specifier|public
specifier|static
specifier|final
name|int
name|MIN_TERMINAL_WIDTH
init|=
literal|94
decl_stmt|;
specifier|static
name|boolean
name|isUnixTerminal
parameter_list|()
block|{
name|String
name|os
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|os
operator|.
name|startsWith
argument_list|(
literal|"Windows"
argument_list|)
condition|)
block|{
comment|// we do not support Windows, we will revisit this if we really need it for windows.
return|return
literal|false
return|;
block|}
comment|// We must be on some unix variant..
comment|// check if standard out is a terminal
try|try
block|{
comment|// isatty system call will return 1 if the file descriptor is terminal else 0
if|if
condition|(
name|isatty
argument_list|(
name|STDOUT_FILENO
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|isatty
argument_list|(
name|STDERR_FILENO
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NoClassDefFoundError
name|ignore
parameter_list|)
block|{
comment|// These errors happen if the JNI lib is not available for your platform.
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|UnsatisfiedLinkError
name|ignore
parameter_list|)
block|{
comment|// These errors happen if the JNI lib is not available for your platform.
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|boolean
name|inPlaceEligible
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|boolean
name|inPlaceUpdates
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|TEZ_EXEC_INPLACE_PROGRESS
argument_list|)
decl_stmt|;
comment|// we need at least 80 chars wide terminal to display in-place updates properly
return|return
name|inPlaceUpdates
operator|&&
operator|!
name|SessionState
operator|.
name|getConsole
argument_list|()
operator|.
name|getIsSilent
argument_list|()
operator|&&
name|isUnixTerminal
argument_list|()
operator|&&
name|TerminalFactory
operator|.
name|get
argument_list|()
operator|.
name|getWidth
argument_list|()
operator|>=
name|MIN_TERMINAL_WIDTH
return|;
block|}
specifier|public
specifier|static
name|void
name|reprintLine
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|String
name|line
parameter_list|)
block|{
name|out
operator|.
name|print
argument_list|(
name|ansi
argument_list|()
operator|.
name|eraseLine
argument_list|(
name|Ansi
operator|.
name|Erase
operator|.
name|ALL
argument_list|)
operator|.
name|a
argument_list|(
name|line
argument_list|)
operator|.
name|a
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|rePositionCursor
parameter_list|(
name|PrintStream
name|ps
parameter_list|)
block|{
name|ps
operator|.
name|print
argument_list|(
name|ansi
argument_list|()
operator|.
name|cursorUp
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

