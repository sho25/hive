begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPredicateList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Union
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|ReflectiveRelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMdPredicates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexPermuteInputsShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|BuiltInMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|MappingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mappings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|//TODO: Move this to calcite
end_comment

begin_class
specifier|public
class|class
name|HiveRelMdPredicates
extends|extends
name|RelMdPredicates
block|{
specifier|public
specifier|static
specifier|final
name|RelMetadataProvider
name|SOURCE
init|=
name|ReflectiveRelMetadataProvider
operator|.
name|reflectiveSource
argument_list|(
name|BuiltInMethod
operator|.
name|PREDICATES
operator|.
name|method
argument_list|,
operator|new
name|HiveRelMdPredicates
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|EMPTY_LIST
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
comment|/**    * Infers predicates for a project.    *    *<ol>    *<li>create a mapping from input to projection. Map only positions that    * directly reference an input column.    *<li>Expressions that only contain above columns are retained in the    * Project's pullExpressions list.    *<li>For e.g. expression 'a + e = 9' below will not be pulled up because 'e'    * is not in the projection list.    *    *<pre>    * childPullUpExprs:      {a&gt; 7, b + c&lt; 10, a + e = 9}    * projectionExprs:       {a, b, c, e / 2}    * projectionPullupExprs: {a&gt; 7, b + c&lt; 10}    *</pre>    *    *</ol>    */
annotation|@
name|Override
specifier|public
name|RelOptPredicateList
name|getPredicates
parameter_list|(
name|Project
name|project
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
name|RelNode
name|child
init|=
name|project
operator|.
name|getInput
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|project
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|RelOptPredicateList
name|childInfo
init|=
name|mq
operator|.
name|getPulledUpPredicates
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|projectPullUpPredicates
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
name|HashMultimap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|inpIndxToOutIndxMap
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|ImmutableBitSet
operator|.
name|Builder
name|columnsMappedBuilder
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Mapping
name|m
init|=
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|PARTIAL_FUNCTION
argument_list|,
name|child
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|,
name|project
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|RexNode
argument_list|>
name|o
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|o
operator|.
name|e
operator|instanceof
name|RexInputRef
condition|)
block|{
name|int
name|sIdx
init|=
operator|(
operator|(
name|RexInputRef
operator|)
name|o
operator|.
name|e
operator|)
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|m
operator|.
name|set
argument_list|(
name|sIdx
argument_list|,
name|o
operator|.
name|i
argument_list|)
expr_stmt|;
name|inpIndxToOutIndxMap
operator|.
name|put
argument_list|(
name|sIdx
argument_list|,
name|o
operator|.
name|i
argument_list|)
expr_stmt|;
name|columnsMappedBuilder
operator|.
name|set
argument_list|(
name|sIdx
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Go over childPullUpPredicates. If a predicate only contains columns in
comment|// 'columnsMapped' construct a new predicate based on mapping.
specifier|final
name|ImmutableBitSet
name|columnsMapped
init|=
name|columnsMappedBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|r
range|:
name|childInfo
operator|.
name|pulledUpPredicates
control|)
block|{
name|ImmutableBitSet
name|rCols
init|=
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnsMapped
operator|.
name|contains
argument_list|(
name|rCols
argument_list|)
condition|)
block|{
name|r
operator|=
name|r
operator|.
name|accept
argument_list|(
operator|new
name|RexPermuteInputsShuttle
argument_list|(
name|m
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|projectPullUpPredicates
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Project can also generate constants. We need to include them.
for|for
control|(
name|Ord
argument_list|<
name|RexNode
argument_list|>
name|expr
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|RexLiteral
operator|.
name|isNullLiteral
argument_list|(
name|expr
operator|.
name|e
argument_list|)
condition|)
block|{
name|projectPullUpPredicates
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NULL
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|project
argument_list|,
name|expr
operator|.
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expr
operator|.
name|e
operator|instanceof
name|RexLiteral
condition|)
block|{
specifier|final
name|RexLiteral
name|literal
init|=
operator|(
name|RexLiteral
operator|)
name|expr
operator|.
name|e
decl_stmt|;
name|projectPullUpPredicates
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|project
argument_list|,
name|expr
operator|.
name|i
argument_list|)
argument_list|,
name|literal
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expr
operator|.
name|e
operator|instanceof
name|RexCall
operator|&&
name|HiveCalciteUtil
operator|.
name|isDeterministicFuncOnLiterals
argument_list|(
name|expr
operator|.
name|e
argument_list|)
condition|)
block|{
comment|//TODO: Move this to calcite
name|projectPullUpPredicates
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|project
argument_list|,
name|expr
operator|.
name|i
argument_list|)
argument_list|,
name|expr
operator|.
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|RelOptPredicateList
operator|.
name|of
argument_list|(
name|projectPullUpPredicates
argument_list|)
return|;
block|}
comment|/**    * Infers predicates for a Union.    */
annotation|@
name|Override
specifier|public
name|RelOptPredicateList
name|getPredicates
parameter_list|(
name|Union
name|union
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
name|RexBuilder
name|rB
init|=
name|union
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|finalPreds
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|finalResidualPreds
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|union
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RelNode
name|input
init|=
name|union
operator|.
name|getInputs
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|RelOptPredicateList
name|info
init|=
name|mq
operator|.
name|getPulledUpPredicates
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|pulledUpPredicates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|RelOptPredicateList
operator|.
name|EMPTY
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|preds
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|pred
range|:
name|info
operator|.
name|pulledUpPredicates
control|)
block|{
specifier|final
name|String
name|predString
init|=
name|pred
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|preds
operator|.
name|put
argument_list|(
name|predString
argument_list|,
name|pred
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|finalPreds
operator|.
name|containsKey
argument_list|(
name|predString
argument_list|)
condition|)
block|{
name|preds
operator|.
name|put
argument_list|(
name|predString
argument_list|,
name|pred
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|finalResidualPreds
operator|.
name|put
argument_list|(
name|predString
argument_list|,
name|pred
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add those that are not part of the final set to residual
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|e
range|:
name|finalPreds
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|preds
operator|.
name|containsKey
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|finalResidualPreds
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|finalPreds
operator|=
name|preds
expr_stmt|;
block|}
name|List
argument_list|<
name|RexNode
argument_list|>
name|preds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|finalPreds
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|RexNode
name|disjPred
init|=
name|RexUtil
operator|.
name|composeDisjunction
argument_list|(
name|rB
argument_list|,
name|finalResidualPreds
operator|.
name|values
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|disjPred
operator|!=
literal|null
condition|)
block|{
name|preds
operator|.
name|add
argument_list|(
name|disjPred
argument_list|)
expr_stmt|;
block|}
return|return
name|RelOptPredicateList
operator|.
name|of
argument_list|(
name|preds
argument_list|)
return|;
block|}
block|}
end_class

end_unit

