begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Linq4j
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|function
operator|.
name|Predicate1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPredicateList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|SemiJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|ReflectiveRelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMdPredicates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexPermutationShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexPermuteInputsShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexVisitorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|BitSets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|BuiltInMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|MappingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mappings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|//TODO: Move this to calcite
end_comment

begin_class
specifier|public
class|class
name|HiveRelMdPredicates
extends|extends
name|RelMdPredicates
block|{
specifier|public
specifier|static
specifier|final
name|RelMetadataProvider
name|SOURCE
init|=
name|ReflectiveRelMetadataProvider
operator|.
name|reflectiveSource
argument_list|(
name|BuiltInMethod
operator|.
name|PREDICATES
operator|.
name|method
argument_list|,
operator|new
name|HiveRelMdPredicates
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|EMPTY_LIST
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
comment|/**    * Infers predicates for a project.    *    *<ol>    *<li>create a mapping from input to projection. Map only positions that    * directly reference an input column.    *<li>Expressions that only contain above columns are retained in the    * Project's pullExpressions list.    *<li>For e.g. expression 'a + e = 9' below will not be pulled up because 'e'    * is not in the projection list.    *    *<pre>    * childPullUpExprs:      {a&gt; 7, b + c&lt; 10, a + e = 9}    * projectionExprs:       {a, b, c, e / 2}    * projectionPullupExprs: {a&gt; 7, b + c&lt; 10}    *</pre>    *    *</ol>    */
annotation|@
name|Override
specifier|public
name|RelOptPredicateList
name|getPredicates
parameter_list|(
name|Project
name|project
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
name|RelNode
name|child
init|=
name|project
operator|.
name|getInput
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|project
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|RelOptPredicateList
name|childInfo
init|=
name|mq
operator|.
name|getPulledUpPredicates
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|projectPullUpPredicates
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
name|HashMultimap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|inpIndxToOutIndxMap
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|ImmutableBitSet
operator|.
name|Builder
name|columnsMappedBuilder
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Mapping
name|m
init|=
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|PARTIAL_FUNCTION
argument_list|,
name|child
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|,
name|project
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|RexNode
argument_list|>
name|o
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|o
operator|.
name|e
operator|instanceof
name|RexInputRef
condition|)
block|{
name|int
name|sIdx
init|=
operator|(
operator|(
name|RexInputRef
operator|)
name|o
operator|.
name|e
operator|)
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|m
operator|.
name|set
argument_list|(
name|sIdx
argument_list|,
name|o
operator|.
name|i
argument_list|)
expr_stmt|;
name|inpIndxToOutIndxMap
operator|.
name|put
argument_list|(
name|sIdx
argument_list|,
name|o
operator|.
name|i
argument_list|)
expr_stmt|;
name|columnsMappedBuilder
operator|.
name|set
argument_list|(
name|sIdx
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Go over childPullUpPredicates. If a predicate only contains columns in
comment|// 'columnsMapped' construct a new predicate based on mapping.
specifier|final
name|ImmutableBitSet
name|columnsMapped
init|=
name|columnsMappedBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|r
range|:
name|childInfo
operator|.
name|pulledUpPredicates
control|)
block|{
name|ImmutableBitSet
name|rCols
init|=
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnsMapped
operator|.
name|contains
argument_list|(
name|rCols
argument_list|)
condition|)
block|{
name|r
operator|=
name|r
operator|.
name|accept
argument_list|(
operator|new
name|RexPermuteInputsShuttle
argument_list|(
name|m
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|projectPullUpPredicates
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Project can also generate constants. We need to include them.
for|for
control|(
name|Ord
argument_list|<
name|RexNode
argument_list|>
name|expr
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|RexLiteral
operator|.
name|isNullLiteral
argument_list|(
name|expr
operator|.
name|e
argument_list|)
condition|)
block|{
name|projectPullUpPredicates
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NULL
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|project
argument_list|,
name|expr
operator|.
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expr
operator|.
name|e
operator|instanceof
name|RexLiteral
condition|)
block|{
specifier|final
name|RexLiteral
name|literal
init|=
operator|(
name|RexLiteral
operator|)
name|expr
operator|.
name|e
decl_stmt|;
name|projectPullUpPredicates
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|project
argument_list|,
name|expr
operator|.
name|i
argument_list|)
argument_list|,
name|literal
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expr
operator|.
name|e
operator|instanceof
name|RexCall
operator|&&
name|HiveCalciteUtil
operator|.
name|isDeterministicFuncOnLiterals
argument_list|(
name|expr
operator|.
name|e
argument_list|)
condition|)
block|{
comment|//TODO: Move this to calcite
name|projectPullUpPredicates
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|project
argument_list|,
name|expr
operator|.
name|i
argument_list|)
argument_list|,
name|expr
operator|.
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|RelOptPredicateList
operator|.
name|of
argument_list|(
name|projectPullUpPredicates
argument_list|)
return|;
block|}
comment|/** Infers predicates for a {@link org.apache.calcite.rel.core.Join}. */
annotation|@
name|Override
specifier|public
name|RelOptPredicateList
name|getPredicates
parameter_list|(
name|Join
name|join
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
name|RexBuilder
name|rB
init|=
name|join
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|RelNode
name|left
init|=
name|join
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RelNode
name|right
init|=
name|join
operator|.
name|getInput
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RelOptPredicateList
name|leftInfo
init|=
name|mq
operator|.
name|getPulledUpPredicates
argument_list|(
name|left
argument_list|)
decl_stmt|;
name|RelOptPredicateList
name|rightInfo
init|=
name|mq
operator|.
name|getPulledUpPredicates
argument_list|(
name|right
argument_list|)
decl_stmt|;
name|HiveJoinConditionBasedPredicateInference
name|jI
init|=
operator|new
name|HiveJoinConditionBasedPredicateInference
argument_list|(
name|join
argument_list|,
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rB
argument_list|,
name|leftInfo
operator|.
name|pulledUpPredicates
argument_list|,
literal|false
argument_list|)
argument_list|,
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rB
argument_list|,
name|rightInfo
operator|.
name|pulledUpPredicates
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|jI
operator|.
name|inferPredicates
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|/**    * Utility to infer predicates from one side of the join that apply on the    * other side.    *    *<p>Contract is:<ul>    *    *<li>initialize with a {@link org.apache.calcite.rel.core.Join} and    * optional predicates applicable on its left and right subtrees.    *    *<li>you can    * then ask it for equivalentPredicate(s) given a predicate.    *    *</ul>    *    *<p>So for:    *<ol>    *<li>'<code>R1(x) join R2(y) on x = y</code>' a call for    * equivalentPredicates on '<code>x> 7</code>' will return '    *<code>[y> 7]</code>'    *<li>'<code>R1(x) join R2(y) on x = y join R3(z) on y = z</code>' a call for    * equivalentPredicates on the second join '<code>x> 7</code>' will return '    *<code>[y> 7, z> 7]</code>'    *</ol>    */
specifier|static
class|class
name|HiveJoinConditionBasedPredicateInference
block|{
specifier|final
name|Join
name|joinRel
decl_stmt|;
specifier|final
name|boolean
name|isSemiJoin
decl_stmt|;
specifier|final
name|int
name|nSysFields
decl_stmt|;
specifier|final
name|int
name|nFieldsLeft
decl_stmt|;
specifier|final
name|int
name|nFieldsRight
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|leftFieldsBitSet
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|rightFieldsBitSet
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|allFieldsBitSet
decl_stmt|;
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|BitSet
argument_list|>
name|equivalence
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ImmutableBitSet
argument_list|>
name|exprFields
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|allExprsDigests
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|equalityPredicates
decl_stmt|;
specifier|final
name|RexNode
name|leftChildPredicates
decl_stmt|;
specifier|final
name|RexNode
name|rightChildPredicates
decl_stmt|;
specifier|public
name|HiveJoinConditionBasedPredicateInference
parameter_list|(
name|Join
name|joinRel
parameter_list|,
name|RexNode
name|lPreds
parameter_list|,
name|RexNode
name|rPreds
parameter_list|)
block|{
name|this
argument_list|(
name|joinRel
argument_list|,
name|joinRel
operator|instanceof
name|SemiJoin
argument_list|,
name|lPreds
argument_list|,
name|rPreds
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HiveJoinConditionBasedPredicateInference
parameter_list|(
name|Join
name|joinRel
parameter_list|,
name|boolean
name|isSemiJoin
parameter_list|,
name|RexNode
name|lPreds
parameter_list|,
name|RexNode
name|rPreds
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|joinRel
operator|=
name|joinRel
expr_stmt|;
name|this
operator|.
name|isSemiJoin
operator|=
name|isSemiJoin
expr_stmt|;
name|nFieldsLeft
operator|=
name|joinRel
operator|.
name|getLeft
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|nFieldsRight
operator|=
name|joinRel
operator|.
name|getRight
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|nSysFields
operator|=
name|joinRel
operator|.
name|getSystemFieldList
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|leftFieldsBitSet
operator|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|nSysFields
argument_list|,
name|nSysFields
operator|+
name|nFieldsLeft
argument_list|)
expr_stmt|;
name|rightFieldsBitSet
operator|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|nSysFields
operator|+
name|nFieldsLeft
argument_list|,
name|nSysFields
operator|+
name|nFieldsLeft
operator|+
name|nFieldsRight
argument_list|)
expr_stmt|;
name|allFieldsBitSet
operator|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|nSysFields
operator|+
name|nFieldsLeft
operator|+
name|nFieldsRight
argument_list|)
expr_stmt|;
name|exprFields
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|allExprsDigests
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|lPreds
operator|==
literal|null
condition|)
block|{
name|leftChildPredicates
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|Mappings
operator|.
name|TargetMapping
name|leftMapping
init|=
name|Mappings
operator|.
name|createShiftMapping
argument_list|(
name|nSysFields
operator|+
name|nFieldsLeft
argument_list|,
name|nSysFields
argument_list|,
literal|0
argument_list|,
name|nFieldsLeft
argument_list|)
decl_stmt|;
name|leftChildPredicates
operator|=
name|lPreds
operator|.
name|accept
argument_list|(
operator|new
name|RexPermuteInputsShuttle
argument_list|(
name|leftMapping
argument_list|,
name|joinRel
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|RexNode
name|r
range|:
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|leftChildPredicates
argument_list|)
control|)
block|{
name|exprFields
operator|.
name|put
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|,
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|allExprsDigests
operator|.
name|add
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rPreds
operator|==
literal|null
condition|)
block|{
name|rightChildPredicates
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|Mappings
operator|.
name|TargetMapping
name|rightMapping
init|=
name|Mappings
operator|.
name|createShiftMapping
argument_list|(
name|nSysFields
operator|+
name|nFieldsLeft
operator|+
name|nFieldsRight
argument_list|,
name|nSysFields
operator|+
name|nFieldsLeft
argument_list|,
literal|0
argument_list|,
name|nFieldsRight
argument_list|)
decl_stmt|;
name|rightChildPredicates
operator|=
name|rPreds
operator|.
name|accept
argument_list|(
operator|new
name|RexPermuteInputsShuttle
argument_list|(
name|rightMapping
argument_list|,
name|joinRel
operator|.
name|getInput
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|RexNode
name|r
range|:
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|rightChildPredicates
argument_list|)
control|)
block|{
name|exprFields
operator|.
name|put
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|,
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|allExprsDigests
operator|.
name|add
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|equivalence
operator|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
expr_stmt|;
name|equalityPredicates
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nSysFields
operator|+
name|nFieldsLeft
operator|+
name|nFieldsRight
condition|;
name|i
operator|++
control|)
block|{
name|equivalence
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|BitSets
operator|.
name|of
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Only process equivalences found in the join conditions. Processing
comment|// Equivalences from the left or right side infer predicates that are
comment|// already present in the Tree below the join.
name|RexBuilder
name|rexBuilder
init|=
name|joinRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|exprs
init|=
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|compose
argument_list|(
name|rexBuilder
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|joinRel
operator|.
name|getCondition
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|EquivalenceFinder
name|eF
init|=
operator|new
name|EquivalenceFinder
argument_list|()
decl_stmt|;
operator|new
name|ArrayList
argument_list|<
name|Void
argument_list|>
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|exprs
argument_list|,
operator|new
name|Function
argument_list|<
name|RexNode
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|apply
parameter_list|(
name|RexNode
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|accept
argument_list|(
name|eF
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|equivalence
operator|=
name|BitSets
operator|.
name|closure
argument_list|(
name|equivalence
argument_list|)
expr_stmt|;
block|}
comment|/**      * The PullUp Strategy is sound but not complete.      *<ol>      *<li>We only pullUp inferred predicates for now. Pulling up existing      * predicates causes an explosion of duplicates. The existing predicates are      * pushed back down as new predicates. Once we have rules to eliminate      * duplicate Filter conditions, we should pullUp all predicates.      *<li>For Left Outer: we infer new predicates from the left and set them as      * applicable on the Right side. No predicates are pulledUp.      *<li>Right Outer Joins are handled in an analogous manner.      *<li>For Full Outer Joins no predicates are pulledUp or inferred.      *</ol>      */
specifier|public
name|RelOptPredicateList
name|inferPredicates
parameter_list|(
name|boolean
name|includeEqualityInference
parameter_list|)
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|inferredPredicates
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allExprsDigests
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|this
operator|.
name|allExprsDigests
argument_list|)
decl_stmt|;
specifier|final
name|JoinRelType
name|joinType
init|=
name|joinRel
operator|.
name|getJoinType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|joinType
condition|)
block|{
case|case
name|INNER
case|:
case|case
name|LEFT
case|:
name|infer
argument_list|(
name|leftChildPredicates
argument_list|,
name|allExprsDigests
argument_list|,
name|inferredPredicates
argument_list|,
name|includeEqualityInference
argument_list|,
name|joinType
operator|==
name|JoinRelType
operator|.
name|LEFT
condition|?
name|rightFieldsBitSet
else|:
name|allFieldsBitSet
argument_list|)
expr_stmt|;
break|break;
block|}
switch|switch
condition|(
name|joinType
condition|)
block|{
case|case
name|INNER
case|:
case|case
name|RIGHT
case|:
name|infer
argument_list|(
name|rightChildPredicates
argument_list|,
name|allExprsDigests
argument_list|,
name|inferredPredicates
argument_list|,
name|includeEqualityInference
argument_list|,
name|joinType
operator|==
name|JoinRelType
operator|.
name|RIGHT
condition|?
name|leftFieldsBitSet
else|:
name|allFieldsBitSet
argument_list|)
expr_stmt|;
break|break;
block|}
name|Mappings
operator|.
name|TargetMapping
name|rightMapping
init|=
name|Mappings
operator|.
name|createShiftMapping
argument_list|(
name|nSysFields
operator|+
name|nFieldsLeft
operator|+
name|nFieldsRight
argument_list|,
literal|0
argument_list|,
name|nSysFields
operator|+
name|nFieldsLeft
argument_list|,
name|nFieldsRight
argument_list|)
decl_stmt|;
specifier|final
name|HiveJoinRexPermuteInputsShuttle
name|rightPermute
init|=
operator|new
name|HiveJoinRexPermuteInputsShuttle
argument_list|(
name|rightMapping
argument_list|,
name|joinRel
argument_list|)
decl_stmt|;
name|Mappings
operator|.
name|TargetMapping
name|leftMapping
init|=
name|Mappings
operator|.
name|createShiftMapping
argument_list|(
name|nSysFields
operator|+
name|nFieldsLeft
argument_list|,
literal|0
argument_list|,
name|nSysFields
argument_list|,
name|nFieldsLeft
argument_list|)
decl_stmt|;
specifier|final
name|HiveJoinRexPermuteInputsShuttle
name|leftPermute
init|=
operator|new
name|HiveJoinRexPermuteInputsShuttle
argument_list|(
name|leftMapping
argument_list|,
name|joinRel
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|leftInferredPredicates
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|rightInferredPredicates
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|iP
range|:
name|inferredPredicates
control|)
block|{
name|ImmutableBitSet
name|iPBitSet
init|=
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|iP
argument_list|)
decl_stmt|;
if|if
condition|(
name|iPBitSet
operator|.
name|isEmpty
argument_list|()
operator|&&
name|joinType
operator|==
name|JoinRelType
operator|.
name|INNER
condition|)
block|{
name|leftInferredPredicates
operator|.
name|add
argument_list|(
name|iP
argument_list|)
expr_stmt|;
name|rightInferredPredicates
operator|.
name|add
argument_list|(
name|iP
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|iPBitSet
operator|.
name|isEmpty
argument_list|()
operator|&&
name|joinType
operator|==
name|JoinRelType
operator|.
name|LEFT
condition|)
block|{
name|rightInferredPredicates
operator|.
name|add
argument_list|(
name|iP
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|iPBitSet
operator|.
name|isEmpty
argument_list|()
operator|&&
name|joinType
operator|==
name|JoinRelType
operator|.
name|RIGHT
condition|)
block|{
name|leftInferredPredicates
operator|.
name|add
argument_list|(
name|iP
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|leftFieldsBitSet
operator|.
name|contains
argument_list|(
name|iPBitSet
argument_list|)
condition|)
block|{
name|leftInferredPredicates
operator|.
name|add
argument_list|(
name|iP
operator|.
name|accept
argument_list|(
name|leftPermute
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rightFieldsBitSet
operator|.
name|contains
argument_list|(
name|iPBitSet
argument_list|)
condition|)
block|{
name|rightInferredPredicates
operator|.
name|add
argument_list|(
name|iP
operator|.
name|accept
argument_list|(
name|rightPermute
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
switch|switch
condition|(
name|joinType
condition|)
block|{
case|case
name|INNER
case|:
name|Iterable
argument_list|<
name|RexNode
argument_list|>
name|pulledUpPredicates
decl_stmt|;
if|if
condition|(
name|isSemiJoin
condition|)
block|{
name|pulledUpPredicates
operator|=
name|Iterables
operator|.
name|concat
argument_list|(
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|leftChildPredicates
argument_list|)
argument_list|,
name|leftInferredPredicates
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pulledUpPredicates
operator|=
name|Iterables
operator|.
name|concat
argument_list|(
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|leftChildPredicates
argument_list|)
argument_list|,
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|rightChildPredicates
argument_list|)
argument_list|,
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|joinRel
operator|.
name|getCondition
argument_list|()
argument_list|)
argument_list|,
name|inferredPredicates
argument_list|)
expr_stmt|;
block|}
return|return
name|RelOptPredicateList
operator|.
name|of
argument_list|(
name|pulledUpPredicates
argument_list|,
name|leftInferredPredicates
argument_list|,
name|rightInferredPredicates
argument_list|)
return|;
case|case
name|LEFT
case|:
return|return
name|RelOptPredicateList
operator|.
name|of
argument_list|(
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|leftChildPredicates
argument_list|)
argument_list|,
name|EMPTY_LIST
argument_list|,
name|rightInferredPredicates
argument_list|)
return|;
case|case
name|RIGHT
case|:
return|return
name|RelOptPredicateList
operator|.
name|of
argument_list|(
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|rightChildPredicates
argument_list|)
argument_list|,
name|leftInferredPredicates
argument_list|,
name|EMPTY_LIST
argument_list|)
return|;
default|default:
assert|assert
name|inferredPredicates
operator|.
name|size
argument_list|()
operator|==
literal|0
assert|;
return|return
name|RelOptPredicateList
operator|.
name|EMPTY
return|;
block|}
block|}
specifier|public
name|RexNode
name|left
parameter_list|()
block|{
return|return
name|leftChildPredicates
return|;
block|}
specifier|public
name|RexNode
name|right
parameter_list|()
block|{
return|return
name|rightChildPredicates
return|;
block|}
specifier|private
name|void
name|infer
parameter_list|(
name|RexNode
name|predicates
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|allExprsDigests
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|inferedPredicates
parameter_list|,
name|boolean
name|includeEqualityInference
parameter_list|,
name|ImmutableBitSet
name|inferringFields
parameter_list|)
block|{
for|for
control|(
name|RexNode
name|r
range|:
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|predicates
argument_list|)
control|)
block|{
if|if
condition|(
name|r
operator|.
name|isAlwaysFalse
argument_list|()
condition|)
block|{
name|RexLiteral
name|falseVal
init|=
name|joinRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|inferedPredicates
operator|.
name|add
argument_list|(
name|falseVal
argument_list|)
expr_stmt|;
name|allExprsDigests
operator|.
name|add
argument_list|(
name|falseVal
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|includeEqualityInference
operator|&&
name|equalityPredicates
operator|.
name|contains
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|Mapping
name|m
range|:
name|mappings
argument_list|(
name|r
argument_list|)
control|)
block|{
name|RexNode
name|tr
init|=
name|r
operator|.
name|accept
argument_list|(
operator|new
name|RexPermuteInputsShuttle
argument_list|(
name|m
argument_list|,
name|joinRel
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
argument_list|,
name|joinRel
operator|.
name|getInput
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|inferringFields
operator|.
name|contains
argument_list|(
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|tr
argument_list|)
argument_list|)
operator|&&
operator|!
name|allExprsDigests
operator|.
name|contains
argument_list|(
name|tr
operator|.
name|toString
argument_list|()
argument_list|)
operator|&&
operator|!
name|isAlwaysTrue
argument_list|(
name|tr
argument_list|)
condition|)
block|{
name|inferedPredicates
operator|.
name|add
argument_list|(
name|tr
argument_list|)
expr_stmt|;
name|allExprsDigests
operator|.
name|add
argument_list|(
name|tr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|Iterable
argument_list|<
name|Mapping
argument_list|>
name|mappings
parameter_list|(
specifier|final
name|RexNode
name|predicate
parameter_list|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|Mapping
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterator
argument_list|<
name|Mapping
argument_list|>
name|iterator
parameter_list|()
block|{
name|ImmutableBitSet
name|fields
init|=
name|exprFields
operator|.
name|get
argument_list|(
name|predicate
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|cardinality
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|Iterators
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
return|return
operator|new
name|ExprsItr
argument_list|(
name|fields
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|private
name|void
name|equivalent
parameter_list|(
name|int
name|p1
parameter_list|,
name|int
name|p2
parameter_list|)
block|{
name|BitSet
name|b
init|=
name|equivalence
operator|.
name|get
argument_list|(
name|p1
argument_list|)
decl_stmt|;
name|b
operator|.
name|set
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|b
operator|=
name|equivalence
operator|.
name|get
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|b
operator|.
name|set
argument_list|(
name|p1
argument_list|)
expr_stmt|;
block|}
name|RexNode
name|compose
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|Iterable
argument_list|<
name|RexNode
argument_list|>
name|exprs
parameter_list|)
block|{
name|exprs
operator|=
name|Linq4j
operator|.
name|asEnumerable
argument_list|(
name|exprs
argument_list|)
operator|.
name|where
argument_list|(
operator|new
name|Predicate1
argument_list|<
name|RexNode
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|RexNode
name|expr
parameter_list|)
block|{
return|return
name|expr
operator|!=
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|exprs
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Find expressions of the form 'col_x = col_y'.      */
class|class
name|EquivalenceFinder
extends|extends
name|RexVisitorImpl
argument_list|<
name|Void
argument_list|>
block|{
specifier|protected
name|EquivalenceFinder
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
if|if
condition|(
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|EQUALS
condition|)
block|{
name|int
name|lPos
init|=
name|pos
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|rPos
init|=
name|pos
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|lPos
operator|!=
operator|-
literal|1
operator|&&
name|rPos
operator|!=
operator|-
literal|1
condition|)
block|{
name|HiveJoinConditionBasedPredicateInference
operator|.
name|this
operator|.
name|equivalent
argument_list|(
name|lPos
argument_list|,
name|rPos
argument_list|)
expr_stmt|;
name|HiveJoinConditionBasedPredicateInference
operator|.
name|this
operator|.
name|equalityPredicates
operator|.
name|add
argument_list|(
name|call
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Given an expression returns all the possible substitutions.      *      *<p>For example, for an expression 'a + b + c' and the following      * equivalences:<pre>      * a : {a, b}      * b : {a, b}      * c : {c, e}      *</pre>      *      *<p>The following Mappings will be returned:      *<pre>      * {a->a, b->a, c->c}      * {a->a, b->a, c->e}      * {a->a, b->b, c->c}      * {a->a, b->b, c->e}      * {a->b, b->a, c->c}      * {a->b, b->a, c->e}      * {a->b, b->b, c->c}      * {a->b, b->b, c->e}      *</pre>      *      *<p>which imply the following inferences:      *<pre>      * a + a + c      * a + a + e      * a + b + c      * a + b + e      * b + a + c      * b + a + e      * b + b + c      * b + b + e      *</pre>      */
class|class
name|ExprsItr
implements|implements
name|Iterator
argument_list|<
name|Mapping
argument_list|>
block|{
specifier|final
name|int
index|[]
name|columns
decl_stmt|;
specifier|final
name|BitSet
index|[]
name|columnSets
decl_stmt|;
specifier|final
name|int
index|[]
name|iterationIdx
decl_stmt|;
name|Mapping
name|nextMapping
decl_stmt|;
name|boolean
name|firstCall
decl_stmt|;
name|ExprsItr
parameter_list|(
name|ImmutableBitSet
name|fields
parameter_list|)
block|{
name|nextMapping
operator|=
literal|null
expr_stmt|;
name|columns
operator|=
operator|new
name|int
index|[
name|fields
operator|.
name|cardinality
argument_list|()
index|]
expr_stmt|;
name|columnSets
operator|=
operator|new
name|BitSet
index|[
name|fields
operator|.
name|cardinality
argument_list|()
index|]
expr_stmt|;
name|iterationIdx
operator|=
operator|new
name|int
index|[
name|fields
operator|.
name|cardinality
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|,
name|i
init|=
name|fields
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|=
name|fields
operator|.
name|nextSetBit
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|,
name|j
operator|++
control|)
block|{
name|columns
index|[
name|j
index|]
operator|=
name|i
expr_stmt|;
name|columnSets
index|[
name|j
index|]
operator|=
name|equivalence
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|iterationIdx
index|[
name|j
index|]
operator|=
literal|0
expr_stmt|;
block|}
name|firstCall
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|firstCall
condition|)
block|{
name|initializeMapping
argument_list|()
expr_stmt|;
name|firstCall
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|computeNextMapping
argument_list|(
name|iterationIdx
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|nextMapping
operator|!=
literal|null
return|;
block|}
specifier|public
name|Mapping
name|next
parameter_list|()
block|{
return|return
name|nextMapping
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|private
name|void
name|computeNextMapping
parameter_list|(
name|int
name|level
parameter_list|)
block|{
name|int
name|t
init|=
name|columnSets
index|[
name|level
index|]
operator|.
name|nextSetBit
argument_list|(
name|iterationIdx
index|[
name|level
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|level
operator|==
literal|0
condition|)
block|{
name|nextMapping
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|iterationIdx
index|[
name|level
index|]
operator|=
literal|0
expr_stmt|;
name|computeNextMapping
argument_list|(
name|level
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|nextMapping
operator|.
name|set
argument_list|(
name|columns
index|[
name|level
index|]
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|iterationIdx
index|[
name|level
index|]
operator|=
name|t
operator|+
literal|1
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initializeMapping
parameter_list|()
block|{
name|nextMapping
operator|=
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|PARTIAL_FUNCTION
argument_list|,
name|nSysFields
operator|+
name|nFieldsLeft
operator|+
name|nFieldsRight
argument_list|,
name|nSysFields
operator|+
name|nFieldsLeft
operator|+
name|nFieldsRight
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnSets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BitSet
name|c
init|=
name|columnSets
index|[
name|i
index|]
decl_stmt|;
name|int
name|t
init|=
name|c
operator|.
name|nextSetBit
argument_list|(
name|iterationIdx
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|<
literal|0
condition|)
block|{
name|nextMapping
operator|=
literal|null
expr_stmt|;
return|return;
block|}
name|nextMapping
operator|.
name|set
argument_list|(
name|columns
index|[
name|i
index|]
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|iterationIdx
index|[
name|i
index|]
operator|=
name|t
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|int
name|pos
parameter_list|(
name|RexNode
name|expr
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|instanceof
name|RexInputRef
condition|)
block|{
return|return
operator|(
operator|(
name|RexInputRef
operator|)
name|expr
operator|)
operator|.
name|getIndex
argument_list|()
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|private
name|boolean
name|isAlwaysTrue
parameter_list|(
name|RexNode
name|predicate
parameter_list|)
block|{
if|if
condition|(
name|predicate
operator|instanceof
name|RexCall
condition|)
block|{
name|RexCall
name|c
init|=
operator|(
name|RexCall
operator|)
name|predicate
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getOperator
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|EQUALS
condition|)
block|{
name|int
name|lPos
init|=
name|pos
argument_list|(
name|c
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|rPos
init|=
name|pos
argument_list|(
name|c
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|lPos
operator|!=
operator|-
literal|1
operator|&&
name|lPos
operator|==
name|rPos
return|;
block|}
block|}
return|return
name|predicate
operator|.
name|isAlwaysTrue
argument_list|()
return|;
block|}
block|}
comment|/**    * Shuttle which applies a permutation to its input fields.    *    * @see RexPermutationShuttle    * @see RexUtil#apply(org.apache.calcite.util.mapping.Mappings.TargetMapping, RexNode)    */
specifier|public
specifier|static
class|class
name|HiveJoinRexPermuteInputsShuttle
extends|extends
name|RexShuttle
block|{
comment|//~ Instance fields --------------------------------------------------------
specifier|private
specifier|final
name|Mappings
operator|.
name|TargetMapping
name|mapping
decl_stmt|;
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|RelDataTypeField
argument_list|>
name|fields
decl_stmt|;
specifier|private
specifier|final
name|RelOptCluster
name|cluster
decl_stmt|;
specifier|private
specifier|final
name|RelDataType
name|rType
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|private
name|HiveJoinRexPermuteInputsShuttle
parameter_list|(
name|Mappings
operator|.
name|TargetMapping
name|mapping
parameter_list|,
name|RelNode
name|input
parameter_list|)
block|{
name|this
operator|.
name|mapping
operator|=
name|mapping
expr_stmt|;
name|this
operator|.
name|cluster
operator|=
name|input
operator|.
name|getCluster
argument_list|()
expr_stmt|;
name|this
operator|.
name|rType
operator|=
name|input
operator|.
name|getRowType
argument_list|()
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|rType
operator|.
name|getFieldList
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|private
specifier|static
name|ImmutableList
argument_list|<
name|RelDataTypeField
argument_list|>
name|fields
parameter_list|(
name|RelNode
index|[]
name|inputs
parameter_list|)
block|{
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelDataTypeField
argument_list|>
name|fields
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|inputs
control|)
block|{
name|fields
operator|.
name|addAll
argument_list|(
name|input
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|fields
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitInputRef
parameter_list|(
name|RexInputRef
name|local
parameter_list|)
block|{
specifier|final
name|int
name|index
init|=
name|local
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|int
name|target
init|=
name|mapping
operator|.
name|getTarget
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
operator|new
name|RexInputRef
argument_list|(
name|target
argument_list|,
name|fields
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
if|if
condition|(
name|call
operator|.
name|getOperator
argument_list|()
operator|==
name|RexBuilder
operator|.
name|GET_OPERATOR
condition|)
block|{
specifier|final
name|String
name|name
init|=
call|(
name|String
call|)
argument_list|(
operator|(
name|RexLiteral
operator|)
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getValue2
argument_list|()
decl_stmt|;
specifier|final
name|int
name|i
init|=
name|lookup
argument_list|(
name|fields
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
return|return
name|RexInputRef
operator|.
name|of
argument_list|(
name|i
argument_list|,
name|fields
argument_list|)
return|;
block|}
block|}
return|return
name|HiveCalciteUtil
operator|.
name|getTypeSafePred
argument_list|(
name|cluster
argument_list|,
name|super
operator|.
name|visitCall
argument_list|(
name|call
argument_list|)
argument_list|,
name|rType
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|lookup
parameter_list|(
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|fields
parameter_list|,
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|RelDataTypeField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
end_class

end_unit

