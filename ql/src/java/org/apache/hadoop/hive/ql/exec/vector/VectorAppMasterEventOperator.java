begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|AppMasterEventOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpressionWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpressionWriterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AppMasterEventDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ObjectWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * App Master Event operator implementation.  **/
end_comment

begin_class
specifier|public
class|class
name|VectorAppMasterEventOperator
extends|extends
name|AppMasterEventOperator
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
specifier|transient
name|Object
index|[]
name|singleRow
decl_stmt|;
specifier|protected
specifier|transient
name|VectorExpressionWriter
index|[]
name|valueWriters
decl_stmt|;
specifier|public
name|VectorAppMasterEventOperator
parameter_list|(
name|VectorizationContext
name|context
parameter_list|,
name|OperatorDesc
name|conf
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
operator|(
name|AppMasterEventDesc
operator|)
name|conf
expr_stmt|;
block|}
specifier|public
name|VectorAppMasterEventOperator
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|Collection
argument_list|<
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
name|result
init|=
name|super
operator|.
name|initializeOp
argument_list|(
name|hconf
argument_list|)
decl_stmt|;
name|valueWriters
operator|=
name|VectorExpressionWriterFactory
operator|.
name|getExpressionWriters
argument_list|(
operator|(
name|StructObjectInspector
operator|)
name|inputObjInspectors
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|singleRow
operator|=
operator|new
name|Object
index|[
name|valueWriters
operator|.
name|length
index|]
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Object
name|data
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|vrg
init|=
operator|(
name|VectorizedRowBatch
operator|)
name|data
decl_stmt|;
name|Writable
index|[]
name|records
init|=
literal|null
decl_stmt|;
name|Writable
name|recordValue
init|=
literal|null
decl_stmt|;
name|boolean
name|vectorizedSerde
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|serializer
operator|instanceof
name|VectorizedSerde
condition|)
block|{
name|recordValue
operator|=
operator|(
operator|(
name|VectorizedSerde
operator|)
name|serializer
operator|)
operator|.
name|serializeVector
argument_list|(
name|vrg
argument_list|,
name|inputObjInspectors
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|records
operator|=
operator|(
name|Writable
index|[]
operator|)
operator|(
operator|(
name|ObjectWritable
operator|)
name|recordValue
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|vectorizedSerde
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e1
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vrg
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Writable
name|row
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|vectorizedSerde
condition|)
block|{
name|row
operator|=
name|records
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|vrg
operator|.
name|valueWriters
operator|==
literal|null
condition|)
block|{
name|vrg
operator|.
name|setValueWriters
argument_list|(
name|this
operator|.
name|valueWriters
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|row
operator|=
name|serializer
operator|.
name|serialize
argument_list|(
name|getRowObject
argument_list|(
name|vrg
argument_list|,
name|i
argument_list|)
argument_list|,
name|inputObjInspectors
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|row
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|.
name|getLength
argument_list|()
operator|>
name|MAX_SIZE
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Disabling AM events. Buffer size too large: "
operator|+
name|buffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|hasReachedMaxSize
operator|=
literal|true
expr_stmt|;
name|buffer
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|Object
index|[]
name|getRowObject
parameter_list|(
name|VectorizedRowBatch
name|vrg
parameter_list|,
name|int
name|rowIndex
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|batchIndex
init|=
name|rowIndex
decl_stmt|;
if|if
condition|(
name|vrg
operator|.
name|selectedInUse
condition|)
block|{
name|batchIndex
operator|=
name|vrg
operator|.
name|selected
index|[
name|rowIndex
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vrg
operator|.
name|projectionSize
condition|;
name|i
operator|++
control|)
block|{
name|ColumnVector
name|vectorColumn
init|=
name|vrg
operator|.
name|cols
index|[
name|vrg
operator|.
name|projectedColumns
index|[
name|i
index|]
index|]
decl_stmt|;
name|singleRow
index|[
name|i
index|]
operator|=
name|vrg
operator|.
name|valueWriters
index|[
name|i
index|]
operator|.
name|writeValue
argument_list|(
name|vectorColumn
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
return|return
name|singleRow
return|;
block|}
block|}
end_class

end_unit

