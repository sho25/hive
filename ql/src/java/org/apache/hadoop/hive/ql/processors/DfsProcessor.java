begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveVariableSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|VariableSubstitution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveOperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|LogHelper
import|;
end_import

begin_comment
comment|/**  * DfsProcessor.  *  */
end_comment

begin_class
specifier|public
class|class
name|DfsProcessor
implements|implements
name|CommandProcessor
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DfsProcessor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|LogHelper
name|console
init|=
operator|new
name|LogHelper
argument_list|(
name|LOG
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DFS_RESULT_HEADER
init|=
literal|"DFS Output"
decl_stmt|;
specifier|private
specifier|final
name|FsShell
name|dfs
decl_stmt|;
specifier|private
specifier|final
name|Schema
name|dfsSchema
decl_stmt|;
specifier|public
name|DfsProcessor
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DfsProcessor
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|addSchema
parameter_list|)
block|{
name|dfs
operator|=
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dfsSchema
operator|=
operator|new
name|Schema
argument_list|()
expr_stmt|;
name|dfsSchema
operator|.
name|addToFieldSchemas
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|DFS_RESULT_HEADER
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CommandProcessorResponse
name|run
parameter_list|(
name|String
name|command
parameter_list|)
block|{
try|try
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|command
operator|=
operator|new
name|VariableSubstitution
argument_list|(
operator|new
name|HiveVariableSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHiveVariable
parameter_list|()
block|{
return|return
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveVariables
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|substitute
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|String
index|[]
name|tokens
init|=
name|splitCmd
argument_list|(
name|command
argument_list|)
decl_stmt|;
name|CommandProcessorResponse
name|authErrResp
init|=
name|CommandUtil
operator|.
name|authorizeCommand
argument_list|(
name|ss
argument_list|,
name|HiveOperationType
operator|.
name|DFS
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tokens
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|authErrResp
operator|!=
literal|null
condition|)
block|{
comment|// there was an authorization issue
return|return
name|authErrResp
return|;
block|}
name|PrintStream
name|oldOut
init|=
name|System
operator|.
name|out
decl_stmt|;
if|if
condition|(
name|ss
operator|!=
literal|null
operator|&&
name|ss
operator|.
name|out
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setOut
argument_list|(
name|ss
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
name|int
name|ret
init|=
name|dfs
operator|.
name|run
argument_list|(
name|tokens
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Command "
operator|+
name|command
operator|+
literal|" failed with exit code = "
operator|+
name|ret
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|setOut
argument_list|(
name|oldOut
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
name|ret
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|dfsSchema
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
specifier|private
name|String
index|[]
name|splitCmd
parameter_list|(
name|String
name|command
parameter_list|)
throws|throws
name|HiveException
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|paras
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|cmdLng
init|=
name|command
operator|.
name|length
argument_list|()
decl_stmt|;
name|char
name|y
init|=
literal|0
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cmdLng
condition|;
name|i
operator|++
control|)
block|{
name|char
name|x
init|=
name|command
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|x
condition|)
block|{
case|case
literal|' '
case|:
if|if
condition|(
operator|(
name|int
operator|)
name|y
operator|==
literal|0
condition|)
block|{
name|String
name|str
init|=
name|command
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|i
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|str
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|paras
operator|.
name|add
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|start
operator|=
name|i
operator|+
literal|1
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|'"'
case|:
if|if
condition|(
operator|(
name|int
operator|)
name|y
operator|==
literal|0
condition|)
block|{
name|y
operator|=
name|x
expr_stmt|;
name|start
operator|=
name|i
operator|+
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|'"'
operator|==
name|y
condition|)
block|{
name|paras
operator|.
name|add
argument_list|(
name|command
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|i
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|y
operator|=
literal|0
expr_stmt|;
name|start
operator|=
name|i
operator|+
literal|1
expr_stmt|;
block|}
break|break;
case|case
literal|'\''
case|:
if|if
condition|(
operator|(
name|int
operator|)
name|y
operator|==
literal|0
condition|)
block|{
name|y
operator|=
name|x
expr_stmt|;
name|start
operator|=
name|i
operator|+
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|'\''
operator|==
name|y
condition|)
block|{
name|paras
operator|.
name|add
argument_list|(
name|command
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|i
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|y
operator|=
literal|0
expr_stmt|;
name|start
operator|=
name|i
operator|+
literal|1
expr_stmt|;
block|}
break|break;
default|default:
if|if
condition|(
name|i
operator|==
name|cmdLng
operator|-
literal|1
operator|&&
name|start
operator|<
name|cmdLng
condition|)
block|{
name|paras
operator|.
name|add
argument_list|(
name|command
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|cmdLng
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
operator|(
name|int
operator|)
name|y
operator|!=
literal|0
condition|)
block|{
name|String
name|message
init|=
literal|"Syntax error on hadoop options: dfs "
operator|+
name|command
decl_stmt|;
name|console
operator|.
name|printError
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|message
argument_list|)
throw|;
block|}
return|return
name|paras
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|paras
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

