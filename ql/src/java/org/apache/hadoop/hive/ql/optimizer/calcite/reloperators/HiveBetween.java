begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCallBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlSpecialOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|ReturnTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlOperandTypeInference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_class
specifier|public
class|class
name|HiveBetween
extends|extends
name|SqlSpecialOperator
block|{
specifier|public
specifier|static
specifier|final
name|SqlSpecialOperator
name|INSTANCE
init|=
operator|new
name|HiveBetween
argument_list|()
decl_stmt|;
specifier|private
name|HiveBetween
parameter_list|()
block|{
name|super
argument_list|(
literal|"BETWEEN"
argument_list|,
name|SqlKind
operator|.
name|BETWEEN
argument_list|,
literal|30
argument_list|,
literal|true
argument_list|,
name|ReturnTypes
operator|.
name|BOOLEAN_NULLABLE
argument_list|,
name|FIRST_BOOLEAN_THEN_FIRST_KNOWN
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Operand type-inference strategy where an unknown operand type is derived    * from the first operand with a known type, but the first operand is a boolean.    */
specifier|public
specifier|static
specifier|final
name|SqlOperandTypeInference
name|FIRST_BOOLEAN_THEN_FIRST_KNOWN
init|=
operator|new
name|SqlOperandTypeInference
argument_list|()
block|{
specifier|public
name|void
name|inferOperandTypes
parameter_list|(
name|SqlCallBinding
name|callBinding
parameter_list|,
name|RelDataType
name|returnType
parameter_list|,
name|RelDataType
index|[]
name|operandTypes
parameter_list|)
block|{
specifier|final
name|RelDataType
name|unknownType
init|=
name|callBinding
operator|.
name|getValidator
argument_list|()
operator|.
name|getUnknownType
argument_list|()
decl_stmt|;
name|RelDataType
name|knownType
init|=
name|unknownType
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|callBinding
operator|.
name|getCall
argument_list|()
operator|.
name|getOperandList
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SqlNode
name|operand
init|=
name|callBinding
operator|.
name|getCall
argument_list|()
operator|.
name|getOperandList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|knownType
operator|=
name|callBinding
operator|.
name|getValidator
argument_list|()
operator|.
name|deriveType
argument_list|(
name|callBinding
operator|.
name|getScope
argument_list|()
argument_list|,
name|operand
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|knownType
operator|.
name|equals
argument_list|(
name|unknownType
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|RelDataTypeFactory
name|typeFactory
init|=
name|callBinding
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
name|operandTypes
index|[
literal|0
index|]
operator|=
name|typeFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|operandTypes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|operandTypes
index|[
name|i
index|]
operator|=
name|knownType
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
block|}
end_class

end_unit

