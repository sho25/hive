begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Explain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Explain
operator|.
name|Level
import|;
end_import

begin_comment
comment|/**  * Privilege defines a privilege in Hive. Each privilege has a name and scope associated with it.  * This class contains all of the predefined privileges in Hive.  */
end_comment

begin_class
specifier|public
class|class
name|Privilege
block|{
specifier|private
name|PrivilegeType
name|priv
decl_stmt|;
specifier|private
name|EnumSet
argument_list|<
name|PrivilegeScope
argument_list|>
name|supportedScopeSet
decl_stmt|;
specifier|private
name|Privilege
parameter_list|(
name|PrivilegeType
name|priv
parameter_list|,
name|EnumSet
argument_list|<
name|PrivilegeScope
argument_list|>
name|scopeSet
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|priv
operator|=
name|priv
expr_stmt|;
name|this
operator|.
name|supportedScopeSet
operator|=
name|scopeSet
expr_stmt|;
block|}
specifier|public
name|Privilege
parameter_list|(
name|PrivilegeType
name|priv
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|priv
operator|=
name|priv
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|skipHeader
operator|=
literal|true
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|,
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|PrivilegeType
name|getPriv
parameter_list|()
block|{
return|return
name|priv
return|;
block|}
specifier|public
name|void
name|setPriv
parameter_list|(
name|PrivilegeType
name|priv
parameter_list|)
block|{
name|this
operator|.
name|priv
operator|=
name|priv
expr_stmt|;
block|}
specifier|public
name|boolean
name|supportColumnLevel
parameter_list|()
block|{
return|return
name|supportedScopeSet
operator|!=
literal|null
operator|&&
name|supportedScopeSet
operator|.
name|contains
argument_list|(
name|PrivilegeScope
operator|.
name|COLUMN_LEVEL_SCOPE
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|supportDBLevel
parameter_list|()
block|{
return|return
name|supportedScopeSet
operator|!=
literal|null
operator|&&
name|supportedScopeSet
operator|.
name|contains
argument_list|(
name|PrivilegeScope
operator|.
name|DB_LEVEL_SCOPE
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|supportTableLevel
parameter_list|()
block|{
return|return
name|supportedScopeSet
operator|!=
literal|null
operator|&&
name|supportedScopeSet
operator|.
name|contains
argument_list|(
name|PrivilegeScope
operator|.
name|TABLE_LEVEL_SCOPE
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getScopeList
parameter_list|()
block|{
if|if
condition|(
name|supportedScopeSet
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|scopes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PrivilegeScope
name|scope
range|:
name|supportedScopeSet
control|)
block|{
name|scopes
operator|.
name|add
argument_list|(
name|scope
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|scopes
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|getPriv
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|Privilege
parameter_list|()
block|{   }
specifier|public
specifier|static
name|Privilege
name|ALL
init|=
operator|new
name|Privilege
argument_list|(
name|PrivilegeType
operator|.
name|ALL
argument_list|,
name|PrivilegeScope
operator|.
name|ALLSCOPE_EXCEPT_COLUMN
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Privilege
name|ALTER_METADATA
init|=
operator|new
name|Privilege
argument_list|(
name|PrivilegeType
operator|.
name|ALTER_METADATA
argument_list|,
name|PrivilegeScope
operator|.
name|ALLSCOPE_EXCEPT_COLUMN
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Privilege
name|ALTER_DATA
init|=
operator|new
name|Privilege
argument_list|(
name|PrivilegeType
operator|.
name|ALTER_DATA
argument_list|,
name|PrivilegeScope
operator|.
name|ALLSCOPE_EXCEPT_COLUMN
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Privilege
name|CREATE
init|=
operator|new
name|Privilege
argument_list|(
name|PrivilegeType
operator|.
name|CREATE
argument_list|,
name|PrivilegeScope
operator|.
name|ALLSCOPE_EXCEPT_COLUMN
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Privilege
name|DROP
init|=
operator|new
name|Privilege
argument_list|(
name|PrivilegeType
operator|.
name|DROP
argument_list|,
name|PrivilegeScope
operator|.
name|ALLSCOPE_EXCEPT_COLUMN
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Privilege
name|LOCK
init|=
operator|new
name|Privilege
argument_list|(
name|PrivilegeType
operator|.
name|LOCK
argument_list|,
name|PrivilegeScope
operator|.
name|ALLSCOPE_EXCEPT_COLUMN
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Privilege
name|SELECT
init|=
operator|new
name|Privilege
argument_list|(
name|PrivilegeType
operator|.
name|SELECT
argument_list|,
name|PrivilegeScope
operator|.
name|ALLSCOPE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Privilege
name|INSERT
init|=
operator|new
name|Privilege
argument_list|(
name|PrivilegeType
operator|.
name|INSERT
argument_list|,
name|PrivilegeScope
operator|.
name|ALLSCOPE_EXCEPT_COLUMN
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Privilege
name|DELETE
init|=
operator|new
name|Privilege
argument_list|(
name|PrivilegeType
operator|.
name|DELETE
argument_list|,
name|PrivilegeScope
operator|.
name|ALLSCOPE_EXCEPT_COLUMN
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Privilege
name|SHOW_DATABASE
init|=
operator|new
name|Privilege
argument_list|(
name|PrivilegeType
operator|.
name|SHOW_DATABASE
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|PrivilegeScope
operator|.
name|USER_LEVEL_SCOPE
argument_list|)
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

