begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|WindowType
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
specifier|public
class|class
name|WindowFrameDef
block|{
specifier|private
name|WindowType
name|windowType
decl_stmt|;
specifier|private
name|BoundaryDef
name|start
decl_stmt|;
specifier|private
name|BoundaryDef
name|end
decl_stmt|;
specifier|private
specifier|final
name|int
name|windowSize
decl_stmt|;
specifier|private
name|OrderDef
name|orderDef
decl_stmt|;
comment|// Order expressions which will only get set and used for RANGE windowing type
specifier|public
name|WindowFrameDef
parameter_list|(
name|WindowType
name|windowType
parameter_list|,
name|BoundaryDef
name|start
parameter_list|,
name|BoundaryDef
name|end
parameter_list|)
block|{
name|this
operator|.
name|windowType
operator|=
name|windowType
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
comment|// Calculate window size
if|if
condition|(
name|start
operator|.
name|getDirection
argument_list|()
operator|==
name|end
operator|.
name|getDirection
argument_list|()
condition|)
block|{
name|windowSize
operator|=
name|Math
operator|.
name|abs
argument_list|(
name|end
operator|.
name|getAmt
argument_list|()
operator|-
name|start
operator|.
name|getAmt
argument_list|()
argument_list|)
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|windowSize
operator|=
name|end
operator|.
name|getAmt
argument_list|()
operator|+
name|start
operator|.
name|getAmt
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
block|}
specifier|public
name|BoundaryDef
name|getStart
parameter_list|()
block|{
return|return
name|start
return|;
block|}
specifier|public
name|BoundaryDef
name|getEnd
parameter_list|()
block|{
return|return
name|end
return|;
block|}
specifier|public
name|WindowType
name|getWindowType
parameter_list|()
block|{
return|return
name|windowType
return|;
block|}
specifier|public
name|void
name|setOrderDef
parameter_list|(
name|OrderDef
name|orderDef
parameter_list|)
block|{
name|this
operator|.
name|orderDef
operator|=
name|orderDef
expr_stmt|;
block|}
specifier|public
name|OrderDef
name|getOrderDef
parameter_list|()
throws|throws
name|HiveException
block|{
if|if
condition|(
name|this
operator|.
name|windowType
operator|!=
name|WindowType
operator|.
name|RANGE
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Order expressions should only be used for RANGE windowing type"
argument_list|)
throw|;
block|}
return|return
name|orderDef
return|;
block|}
specifier|public
name|boolean
name|isStartUnbounded
parameter_list|()
block|{
return|return
name|start
operator|.
name|isUnbounded
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isEndUnbounded
parameter_list|()
block|{
return|return
name|end
operator|.
name|isUnbounded
argument_list|()
return|;
block|}
specifier|public
name|int
name|getWindowSize
parameter_list|()
block|{
return|return
name|windowSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|windowType
operator|+
literal|" "
operator|+
name|start
operator|+
literal|"~"
operator|+
name|end
return|;
block|}
block|}
end_class

end_unit

