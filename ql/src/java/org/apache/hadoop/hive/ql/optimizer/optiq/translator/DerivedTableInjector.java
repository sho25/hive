begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|optiq
operator|.
name|translator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|optiq
operator|.
name|reloperators
operator|.
name|HiveAggregateRel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|optiq
operator|.
name|reloperators
operator|.
name|HiveProjectRel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|optiq
operator|.
name|reloperators
operator|.
name|HiveSortRel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|AggregateRelBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|EmptyRel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|FilterRelBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|JoinRelBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|OneRowRelBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|ProjectRelBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|SetOpRel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|SingleRel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|TableAccessRelBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|TableFunctionRelBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|ValuesRelBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|rules
operator|.
name|MultiJoinRel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|hep
operator|.
name|HepRelVertex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|volcano
operator|.
name|RelSubset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|DerivedTableInjector
block|{
specifier|public
specifier|static
name|RelNode
name|convertOpTree
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|resultSchema
parameter_list|)
block|{
comment|// Disable introducing top level select since Hive seems to have bugs with
comment|// OB, Limit in sub query.
comment|// RelNode newTopSelect = introduceTopLevelSelectInResultSchema(rel,
comment|// resultSchema);
name|RelNode
name|newTopSelect
init|=
name|rel
decl_stmt|;
name|convertOpTree
argument_list|(
name|newTopSelect
argument_list|,
operator|(
name|RelNode
operator|)
literal|null
argument_list|)
expr_stmt|;
return|return
name|newTopSelect
return|;
block|}
specifier|private
specifier|static
name|void
name|convertOpTree
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|RelNode
name|parent
parameter_list|)
block|{
if|if
condition|(
name|rel
operator|instanceof
name|EmptyRel
condition|)
block|{
comment|// TODO: replace with null scan
block|}
elseif|else
if|if
condition|(
name|rel
operator|instanceof
name|HepRelVertex
condition|)
block|{
comment|// TODO: is this relevant?
block|}
elseif|else
if|if
condition|(
name|rel
operator|instanceof
name|JoinRelBase
condition|)
block|{
if|if
condition|(
operator|!
name|validJoinParent
argument_list|(
name|rel
argument_list|,
name|parent
argument_list|)
condition|)
block|{
name|introduceDerivedTable
argument_list|(
name|rel
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|rel
operator|instanceof
name|MultiJoinRel
condition|)
block|{      }
elseif|else
if|if
condition|(
name|rel
operator|instanceof
name|OneRowRelBase
condition|)
block|{      }
elseif|else
if|if
condition|(
name|rel
operator|instanceof
name|RelSubset
condition|)
block|{      }
elseif|else
if|if
condition|(
name|rel
operator|instanceof
name|SetOpRel
condition|)
block|{      }
elseif|else
if|if
condition|(
name|rel
operator|instanceof
name|SingleRel
condition|)
block|{
if|if
condition|(
name|rel
operator|instanceof
name|FilterRelBase
condition|)
block|{
if|if
condition|(
operator|!
name|validFilterParent
argument_list|(
name|rel
argument_list|,
name|parent
argument_list|)
condition|)
block|{
name|introduceDerivedTable
argument_list|(
name|rel
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|rel
operator|instanceof
name|HiveSortRel
condition|)
block|{
if|if
condition|(
operator|!
name|validSortParent
argument_list|(
name|rel
argument_list|,
name|parent
argument_list|)
condition|)
block|{
name|introduceDerivedTable
argument_list|(
name|rel
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|validSortChild
argument_list|(
operator|(
name|HiveSortRel
operator|)
name|rel
argument_list|)
condition|)
block|{
name|introduceDerivedTable
argument_list|(
operator|(
operator|(
name|HiveSortRel
operator|)
name|rel
operator|)
operator|.
name|getChild
argument_list|()
argument_list|,
name|rel
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|rel
operator|instanceof
name|HiveAggregateRel
condition|)
block|{
if|if
condition|(
operator|!
name|validGBParent
argument_list|(
name|rel
argument_list|,
name|parent
argument_list|)
condition|)
block|{
name|introduceDerivedTable
argument_list|(
name|rel
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|rel
operator|instanceof
name|TableAccessRelBase
condition|)
block|{      }
elseif|else
if|if
condition|(
name|rel
operator|instanceof
name|TableFunctionRelBase
condition|)
block|{      }
elseif|else
if|if
condition|(
name|rel
operator|instanceof
name|ValuesRelBase
condition|)
block|{      }
name|List
argument_list|<
name|RelNode
argument_list|>
name|childNodes
init|=
name|rel
operator|.
name|getInputs
argument_list|()
decl_stmt|;
if|if
condition|(
name|childNodes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RelNode
name|r
range|:
name|childNodes
control|)
block|{
name|convertOpTree
argument_list|(
name|r
argument_list|,
name|rel
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|HiveProjectRel
name|introduceTopLevelSelectInResultSchema
parameter_list|(
specifier|final
name|RelNode
name|rootRel
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|resultSchema
parameter_list|)
block|{
name|RelNode
name|curNode
init|=
name|rootRel
decl_stmt|;
name|HiveProjectRel
name|rootProjRel
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|curNode
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|curNode
operator|instanceof
name|HiveProjectRel
condition|)
block|{
name|rootProjRel
operator|=
operator|(
name|HiveProjectRel
operator|)
name|curNode
expr_stmt|;
break|break;
block|}
name|curNode
operator|=
name|curNode
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|//Assumption: tree could only be (limit)?(OB)?(ProjectRelBase)....
name|List
argument_list|<
name|RexNode
argument_list|>
name|rootChildExps
init|=
name|rootProjRel
operator|.
name|getChildExps
argument_list|()
decl_stmt|;
if|if
condition|(
name|resultSchema
operator|.
name|size
argument_list|()
operator|!=
name|rootChildExps
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Result Schema didn't match Optiq Optimized Op Tree Schema"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|RexNode
argument_list|>
name|newSelExps
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|newSelAliases
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rootChildExps
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|newSelExps
operator|.
name|add
argument_list|(
operator|new
name|RexInputRef
argument_list|(
name|i
argument_list|,
name|rootChildExps
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|newSelAliases
operator|.
name|add
argument_list|(
name|resultSchema
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|HiveProjectRel
operator|.
name|create
argument_list|(
name|rootRel
argument_list|,
name|newSelExps
argument_list|,
name|newSelAliases
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|introduceDerivedTable
parameter_list|(
specifier|final
name|RelNode
name|rel
parameter_list|,
name|RelNode
name|parent
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
name|List
argument_list|<
name|RelNode
argument_list|>
name|childList
init|=
name|parent
operator|.
name|getInputs
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|child
range|:
name|childList
control|)
block|{
if|if
condition|(
name|child
operator|==
name|rel
condition|)
block|{
name|pos
operator|=
name|i
expr_stmt|;
break|break;
block|}
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't find child node in parent's inputs"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|RexNode
argument_list|>
name|projectList
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|rel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|RelDataTypeField
argument_list|,
name|RexNode
argument_list|>
argument_list|()
block|{
specifier|public
name|RexNode
name|apply
parameter_list|(
name|RelDataTypeField
name|field
parameter_list|)
block|{
return|return
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeInputRef
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|field
operator|.
name|getIndex
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|HiveProjectRel
name|select
init|=
name|HiveProjectRel
operator|.
name|create
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
argument_list|,
name|rel
argument_list|,
name|projectList
argument_list|,
name|rel
operator|.
name|getRowType
argument_list|()
argument_list|,
name|rel
operator|.
name|getCollationList
argument_list|()
argument_list|)
decl_stmt|;
name|parent
operator|.
name|replaceInput
argument_list|(
name|pos
argument_list|,
name|select
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|validJoinParent
parameter_list|(
name|RelNode
name|joinNode
parameter_list|,
name|RelNode
name|parent
parameter_list|)
block|{
name|boolean
name|validParent
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|parent
operator|instanceof
name|JoinRelBase
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|JoinRelBase
operator|)
name|parent
operator|)
operator|.
name|getRight
argument_list|()
operator|==
name|joinNode
condition|)
block|{
name|validParent
operator|=
literal|false
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|parent
operator|instanceof
name|SetOpRel
condition|)
block|{
name|validParent
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|validParent
return|;
block|}
specifier|private
specifier|static
name|boolean
name|validFilterParent
parameter_list|(
name|RelNode
name|filterNode
parameter_list|,
name|RelNode
name|parent
parameter_list|)
block|{
name|boolean
name|validParent
init|=
literal|true
decl_stmt|;
comment|// TOODO: Verify GB having is not a seperate filter (if so we shouldn't
comment|// introduce derived table)
if|if
condition|(
name|parent
operator|instanceof
name|FilterRelBase
operator|||
name|parent
operator|instanceof
name|JoinRelBase
operator|||
name|parent
operator|instanceof
name|SetOpRel
condition|)
block|{
name|validParent
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|validParent
return|;
block|}
specifier|private
specifier|static
name|boolean
name|validGBParent
parameter_list|(
name|RelNode
name|gbNode
parameter_list|,
name|RelNode
name|parent
parameter_list|)
block|{
name|boolean
name|validParent
init|=
literal|true
decl_stmt|;
comment|// TOODO: Verify GB having is not a seperate filter (if so we shouldn't
comment|// introduce derived table)
if|if
condition|(
name|parent
operator|instanceof
name|JoinRelBase
operator|||
name|parent
operator|instanceof
name|SetOpRel
operator|||
name|parent
operator|instanceof
name|AggregateRelBase
condition|)
block|{
name|validParent
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|validParent
return|;
block|}
specifier|private
specifier|static
name|boolean
name|validSortParent
parameter_list|(
name|RelNode
name|sortNode
parameter_list|,
name|RelNode
name|parent
parameter_list|)
block|{
name|boolean
name|validParent
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|parent
operator|instanceof
name|ProjectRelBase
operator|)
condition|)
block|{
name|validParent
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|validParent
return|;
block|}
specifier|private
specifier|static
name|boolean
name|validSortChild
parameter_list|(
name|HiveSortRel
name|sortNode
parameter_list|)
block|{
name|boolean
name|validChild
init|=
literal|true
decl_stmt|;
name|RelNode
name|child
init|=
name|sortNode
operator|.
name|getChild
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|child
operator|instanceof
name|ProjectRelBase
operator|)
condition|)
block|{
name|validChild
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|validChild
return|;
block|}
block|}
end_class

end_unit

