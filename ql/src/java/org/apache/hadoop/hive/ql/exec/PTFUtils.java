begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|BeanInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|Encoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|IntrospectionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|Introspector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PersistenceDelegate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|XMLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|XMLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|CommonToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|tree
operator|.
name|BaseTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|tree
operator|.
name|CommonTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
operator|.
name|EnumDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|Direction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_class
specifier|public
class|class
name|PTFUtils
block|{
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|col
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|col
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|col
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|o
range|:
name|col
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|o
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" : "
argument_list|)
operator|.
name|append
argument_list|(
name|o
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|unescapeQueryString
parameter_list|(
name|String
name|qry
parameter_list|)
block|{
name|qry
operator|=
name|qry
operator|.
name|replace
argument_list|(
literal|"\\\""
argument_list|,
literal|"\""
argument_list|)
expr_stmt|;
name|qry
operator|=
name|qry
operator|.
name|replace
argument_list|(
literal|"\\'"
argument_list|,
literal|"'"
argument_list|)
expr_stmt|;
return|return
name|qry
return|;
block|}
specifier|public
specifier|static
class|class
name|ReverseIterator
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|T
argument_list|>
block|{
name|Stack
argument_list|<
name|T
argument_list|>
name|stack
decl_stmt|;
specifier|public
name|ReverseIterator
parameter_list|(
name|Iterator
argument_list|<
name|T
argument_list|>
name|it
parameter_list|)
block|{
name|stack
operator|=
operator|new
name|Stack
argument_list|<
name|T
argument_list|>
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|stack
operator|.
name|push
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|next
parameter_list|()
block|{
return|return
name|stack
operator|.
name|pop
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
specifier|public
specifier|static
specifier|abstract
class|class
name|Predicate
parameter_list|<
name|T
parameter_list|>
block|{
specifier|public
specifier|abstract
name|boolean
name|apply
parameter_list|(
name|T
name|obj
parameter_list|)
function_decl|;
block|}
empty_stmt|;
comment|/*    * serialization functions    */
specifier|public
specifier|static
name|void
name|serialize
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
name|XMLEncoder
name|e
init|=
operator|new
name|XMLEncoder
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|e
operator|.
name|setExceptionListener
argument_list|(
operator|new
name|EL
argument_list|()
argument_list|)
expr_stmt|;
name|PTFUtils
operator|.
name|addPersistenceDelegates
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|writeObject
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|e
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|Object
name|deserialize
parameter_list|(
name|InputStream
name|in1
parameter_list|)
block|{
name|XMLDecoder
name|d
init|=
literal|null
decl_stmt|;
try|try
block|{
name|d
operator|=
operator|new
name|XMLDecoder
argument_list|(
name|in1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|d
operator|.
name|readObject
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|d
condition|)
block|{
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|addPersistenceDelegates
parameter_list|(
name|XMLEncoder
name|e
parameter_list|)
block|{
name|addAntlrPersistenceDelegates
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|addHivePersistenceDelegates
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|addEnumDelegates
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|addEnumDelegates
parameter_list|(
name|XMLEncoder
name|e
parameter_list|)
block|{
name|e
operator|.
name|setPersistenceDelegate
argument_list|(
name|Direction
operator|.
name|class
argument_list|,
operator|new
name|EnumDelegate
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|addAntlrPersistenceDelegates
parameter_list|(
name|XMLEncoder
name|e
parameter_list|)
block|{
name|e
operator|.
name|setPersistenceDelegate
argument_list|(
name|ASTNode
operator|.
name|class
argument_list|,
operator|new
name|PersistenceDelegate
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Expression
name|instantiate
parameter_list|(
name|Object
name|oldInstance
parameter_list|,
name|Encoder
name|out
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|(
name|oldInstance
argument_list|,
name|oldInstance
operator|.
name|getClass
argument_list|()
argument_list|,
literal|"new"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|(
operator|(
name|ASTNode
operator|)
name|oldInstance
operator|)
operator|.
name|getToken
argument_list|()
block|}
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|e
operator|.
name|setPersistenceDelegate
argument_list|(
name|CommonTree
operator|.
name|class
argument_list|,
operator|new
name|PersistenceDelegate
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Expression
name|instantiate
parameter_list|(
name|Object
name|oldInstance
parameter_list|,
name|Encoder
name|out
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|(
name|oldInstance
argument_list|,
name|oldInstance
operator|.
name|getClass
argument_list|()
argument_list|,
literal|"new"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|(
operator|(
name|CommonTree
operator|)
name|oldInstance
operator|)
operator|.
name|getToken
argument_list|()
block|}
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|e
operator|.
name|setPersistenceDelegate
argument_list|(
name|BaseTree
operator|.
name|class
argument_list|,
operator|new
name|PersistenceDelegate
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Expression
name|instantiate
parameter_list|(
name|Object
name|oldInstance
parameter_list|,
name|Encoder
name|out
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|(
name|oldInstance
argument_list|,
name|oldInstance
operator|.
name|getClass
argument_list|()
argument_list|,
literal|"new"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|protected
name|void
name|initialize
parameter_list|(
name|Class
name|type
parameter_list|,
name|Object
name|oldInstance
parameter_list|,
name|Object
name|newInstance
parameter_list|,
name|Encoder
name|out
parameter_list|)
block|{
name|super
operator|.
name|initialize
argument_list|(
name|type
argument_list|,
name|oldInstance
argument_list|,
name|newInstance
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|BaseTree
name|t
init|=
operator|(
name|BaseTree
operator|)
name|oldInstance
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|t
operator|.
name|getChildCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|writeStatement
argument_list|(
operator|new
name|Statement
argument_list|(
name|oldInstance
argument_list|,
literal|"addChild"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|t
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|e
operator|.
name|setPersistenceDelegate
argument_list|(
name|CommonToken
operator|.
name|class
argument_list|,
operator|new
name|PersistenceDelegate
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Expression
name|instantiate
parameter_list|(
name|Object
name|oldInstance
parameter_list|,
name|Encoder
name|out
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|(
name|oldInstance
argument_list|,
name|oldInstance
operator|.
name|getClass
argument_list|()
argument_list|,
literal|"new"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|(
operator|(
name|CommonToken
operator|)
name|oldInstance
operator|)
operator|.
name|getType
argument_list|()
block|,
operator|(
operator|(
name|CommonToken
operator|)
name|oldInstance
operator|)
operator|.
name|getText
argument_list|()
block|}
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|addHivePersistenceDelegates
parameter_list|(
name|XMLEncoder
name|e
parameter_list|)
block|{
name|e
operator|.
name|setPersistenceDelegate
argument_list|(
name|PrimitiveTypeInfo
operator|.
name|class
argument_list|,
operator|new
name|PersistenceDelegate
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Expression
name|instantiate
parameter_list|(
name|Object
name|oldInstance
parameter_list|,
name|Encoder
name|out
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|(
name|oldInstance
argument_list|,
name|TypeInfoFactory
operator|.
name|class
argument_list|,
literal|"getPrimitiveTypeInfo"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|oldInstance
operator|)
operator|.
name|getTypeName
argument_list|()
block|}
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|EL
implements|implements
name|ExceptionListener
block|{
specifier|public
name|void
name|exceptionThrown
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot serialize the query plan"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|makeTransient
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|beanClass
parameter_list|,
name|String
name|pdName
parameter_list|)
block|{
name|BeanInfo
name|info
decl_stmt|;
try|try
block|{
name|info
operator|=
name|Introspector
operator|.
name|getBeanInfo
argument_list|(
name|beanClass
argument_list|)
expr_stmt|;
name|PropertyDescriptor
index|[]
name|propertyDescriptors
init|=
name|info
operator|.
name|getPropertyDescriptors
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propertyDescriptors
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|PropertyDescriptor
name|pd
init|=
name|propertyDescriptors
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|pd
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|pdName
argument_list|)
condition|)
block|{
name|pd
operator|.
name|setValue
argument_list|(
literal|"transient"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IntrospectionException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

