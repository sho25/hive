begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|ReduceRecordSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|RowContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|InterruptibleProcessing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|RecordSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|TezContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|CommonMergeJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinCondDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
operator|.
name|ObjectInspectorCopyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_comment
comment|/*  * With an aim to consolidate the join algorithms to either hash based joins (MapJoinOperator) or  * sort-merge based joins, this operator is being introduced. This operator executes a sort-merge  * based algorithm. It replaces both the JoinOperator and the SMBMapJoinOperator for the tez side of  * things. It works in either the map phase or reduce phase.  *  * The basic algorithm is as follows:  *  * 1. The processOp receives a row from a "big" table.  * 2. In order to process it, the operator does a fetch for rows from the other tables.  * 3. Once we have a set of rows from the other tables (till we hit a new key), more rows are  *    brought in from the big table and a join is performed.  */
end_comment

begin_class
specifier|public
class|class
name|CommonMergeJoinOperator
extends|extends
name|AbstractMapJoinOperator
argument_list|<
name|CommonMergeJoinDesc
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|boolean
name|isBigTableWork
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CommonMergeJoinOperator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|transient
name|List
argument_list|<
name|Object
argument_list|>
index|[]
name|keyWritables
decl_stmt|;
specifier|transient
name|List
argument_list|<
name|Object
argument_list|>
index|[]
name|nextKeyWritables
decl_stmt|;
specifier|transient
name|RowContainer
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
index|[]
name|nextGroupStorage
decl_stmt|;
specifier|transient
name|RowContainer
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
index|[]
name|candidateStorage
decl_stmt|;
specifier|transient
name|String
index|[]
name|tagToAlias
decl_stmt|;
specifier|private
specifier|transient
name|boolean
index|[]
name|fetchDone
decl_stmt|;
specifier|private
specifier|transient
name|boolean
index|[]
name|foundNextKeyGroup
decl_stmt|;
specifier|transient
name|boolean
name|firstFetchHappened
init|=
literal|false
decl_stmt|;
specifier|transient
name|boolean
name|localWorkInited
init|=
literal|false
decl_stmt|;
specifier|transient
name|boolean
name|initDone
init|=
literal|false
decl_stmt|;
specifier|transient
name|List
argument_list|<
name|Object
argument_list|>
name|otherKey
init|=
literal|null
decl_stmt|;
specifier|transient
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
literal|null
decl_stmt|;
specifier|transient
name|RecordSource
index|[]
name|sources
decl_stmt|;
specifier|transient
name|WritableComparator
index|[]
index|[]
name|keyComparators
decl_stmt|;
specifier|transient
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|originalParents
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|transient
name|Set
argument_list|<
name|Integer
argument_list|>
name|fetchInputAtClose
decl_stmt|;
comment|// A field because we cannot multi-inherit.
specifier|transient
name|InterruptibleProcessing
name|interruptChecker
decl_stmt|;
comment|/** Kryo ctor. */
specifier|protected
name|CommonMergeJoinOperator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|CommonMergeJoinOperator
parameter_list|(
name|CompilationOpContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|initializeOp
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|firstFetchHappened
operator|=
literal|false
expr_stmt|;
name|fetchInputAtClose
operator|=
name|getFetchInputAtCloseList
argument_list|()
expr_stmt|;
name|int
name|maxAlias
init|=
literal|0
decl_stmt|;
for|for
control|(
name|byte
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|order
operator|.
name|length
condition|;
name|pos
operator|++
control|)
block|{
if|if
condition|(
name|pos
operator|>
name|maxAlias
condition|)
block|{
name|maxAlias
operator|=
name|pos
expr_stmt|;
block|}
block|}
name|maxAlias
operator|+=
literal|1
expr_stmt|;
name|nextGroupStorage
operator|=
operator|new
name|RowContainer
index|[
name|maxAlias
index|]
expr_stmt|;
name|candidateStorage
operator|=
operator|new
name|RowContainer
index|[
name|maxAlias
index|]
expr_stmt|;
name|keyWritables
operator|=
operator|new
name|ArrayList
index|[
name|maxAlias
index|]
expr_stmt|;
name|nextKeyWritables
operator|=
operator|new
name|ArrayList
index|[
name|maxAlias
index|]
expr_stmt|;
name|fetchDone
operator|=
operator|new
name|boolean
index|[
name|maxAlias
index|]
expr_stmt|;
name|foundNextKeyGroup
operator|=
operator|new
name|boolean
index|[
name|maxAlias
index|]
expr_stmt|;
name|keyComparators
operator|=
operator|new
name|WritableComparator
index|[
name|maxAlias
index|]
index|[]
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|entry
range|:
name|conf
operator|.
name|getKeys
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|keyComparators
index|[
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|intValue
argument_list|()
index|]
operator|=
operator|new
name|WritableComparator
index|[
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
block|}
name|int
name|bucketSize
decl_stmt|;
name|int
name|oldVar
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPJOINBUCKETCACHESIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldVar
operator|!=
literal|100
condition|)
block|{
name|bucketSize
operator|=
name|oldVar
expr_stmt|;
block|}
else|else
block|{
name|bucketSize
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESMBJOINCACHEROWS
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|byte
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|order
operator|.
name|length
condition|;
name|pos
operator|++
control|)
block|{
name|RowContainer
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|rc
init|=
name|JoinUtil
operator|.
name|getRowContainer
argument_list|(
name|hconf
argument_list|,
name|rowContainerStandardObjectInspectors
index|[
name|pos
index|]
argument_list|,
name|pos
argument_list|,
name|bucketSize
argument_list|,
name|spillTableDesc
argument_list|,
name|conf
argument_list|,
operator|!
name|hasFilter
argument_list|(
name|pos
argument_list|)
argument_list|,
name|reporter
argument_list|)
decl_stmt|;
name|nextGroupStorage
index|[
name|pos
index|]
operator|=
name|rc
expr_stmt|;
name|RowContainer
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|candidateRC
init|=
name|JoinUtil
operator|.
name|getRowContainer
argument_list|(
name|hconf
argument_list|,
name|rowContainerStandardObjectInspectors
index|[
name|pos
index|]
argument_list|,
name|pos
argument_list|,
name|bucketSize
argument_list|,
name|spillTableDesc
argument_list|,
name|conf
argument_list|,
operator|!
name|hasFilter
argument_list|(
name|pos
argument_list|)
argument_list|,
name|reporter
argument_list|)
decl_stmt|;
name|candidateStorage
index|[
name|pos
index|]
operator|=
name|candidateRC
expr_stmt|;
block|}
for|for
control|(
name|byte
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|order
operator|.
name|length
condition|;
name|pos
operator|++
control|)
block|{
if|if
condition|(
name|pos
operator|!=
name|posBigTable
condition|)
block|{
if|if
condition|(
operator|(
name|parentOperators
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|parentOperators
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|parentOperators
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|instanceof
name|TezDummyStoreOperator
operator|)
condition|)
block|{
name|TezDummyStoreOperator
name|dummyStoreOp
init|=
operator|(
name|TezDummyStoreOperator
operator|)
name|parentOperators
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|fetchDone
index|[
name|pos
index|]
operator|=
name|dummyStoreOp
operator|.
name|getFetchDone
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fetchDone
index|[
name|pos
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|foundNextKeyGroup
index|[
name|pos
index|]
operator|=
literal|false
expr_stmt|;
block|}
name|sources
operator|=
operator|(
operator|(
name|TezContext
operator|)
name|MapredContext
operator|.
name|get
argument_list|()
operator|)
operator|.
name|getRecordSources
argument_list|()
expr_stmt|;
name|interruptChecker
operator|=
operator|new
name|InterruptibleProcessing
argument_list|()
expr_stmt|;
if|if
condition|(
name|sources
index|[
literal|0
index|]
operator|instanceof
name|ReduceRecordSource
operator|&&
name|parentOperators
operator|!=
literal|null
operator|&&
operator|!
name|parentOperators
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Tell ReduceRecordSource to flush last record as this is a reduce
comment|// side SMB
for|for
control|(
name|RecordSource
name|source
range|:
name|sources
control|)
block|{
operator|(
operator|(
name|ReduceRecordSource
operator|)
name|source
operator|)
operator|.
name|setFlushLastRecord
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * In case of outer joins, we need to push records through even if one of the sides is done    * sending records. For e.g. In the case of full outer join, the right side needs to send in data    * for the join even after the left side has completed sending all the records on its side. This    * can be done once at initialize time and at close, these tags will still forward records until    * they have no more to send. Also, subsequent joins need to fetch their data as well since    * any join following the outer join could produce results with one of the outer sides depending on    * the join condition. We could optimize for the case of inner joins in the future here.    */
specifier|private
name|Set
argument_list|<
name|Integer
argument_list|>
name|getFetchInputAtCloseList
parameter_list|()
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|retval
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|JoinCondDesc
name|joinCondDesc
range|:
name|conf
operator|.
name|getConds
argument_list|()
control|)
block|{
name|retval
operator|.
name|add
argument_list|(
name|joinCondDesc
operator|.
name|getLeft
argument_list|()
argument_list|)
expr_stmt|;
name|retval
operator|.
name|add
argument_list|(
name|joinCondDesc
operator|.
name|getRight
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endGroup
parameter_list|()
throws|throws
name|HiveException
block|{
comment|// we do not want the end group to cause a checkAndGenObject
name|defaultEndGroup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startGroup
parameter_list|()
throws|throws
name|HiveException
block|{
comment|// we do not want the start group to clear the storage
name|defaultStartGroup
argument_list|()
expr_stmt|;
block|}
comment|/*    * (non-Javadoc)    *    * @see org.apache.hadoop.hive.ql.exec.Operator#processOp(java.lang.Object,    * int) this processor has a push-pull model. First call to this method is a    * push but the rest is pulled until we run out of records.    */
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
name|posBigTable
operator|=
operator|(
name|byte
operator|)
name|conf
operator|.
name|getBigTablePosition
argument_list|()
expr_stmt|;
name|byte
name|alias
init|=
operator|(
name|byte
operator|)
name|tag
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|value
init|=
name|getFilteredValue
argument_list|(
name|alias
argument_list|,
name|row
argument_list|)
decl_stmt|;
comment|// compute keys and values as StandardObjects
name|List
argument_list|<
name|Object
argument_list|>
name|key
init|=
name|mergeJoinComputeKeys
argument_list|(
name|row
argument_list|,
name|alias
argument_list|)
decl_stmt|;
comment|// Fetch the first group for all small table aliases.
name|doFirstFetchIfNeeded
argument_list|()
expr_stmt|;
comment|//have we reached a new key group?
name|boolean
name|nextKeyGroup
init|=
name|processKey
argument_list|(
name|alias
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextKeyGroup
condition|)
block|{
comment|//assert this.nextGroupStorage[alias].size() == 0;
name|this
operator|.
name|nextGroupStorage
index|[
name|alias
index|]
operator|.
name|addRow
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|foundNextKeyGroup
index|[
name|tag
index|]
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|tag
operator|!=
name|posBigTable
condition|)
block|{
return|return;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|(
name|tag
operator|==
name|posBigTable
operator|)
operator|&&
operator|(
name|candidateStorage
index|[
name|tag
index|]
operator|.
name|rowCount
argument_list|()
operator|==
name|joinEmitInterval
operator|)
condition|)
block|{
name|boolean
name|canEmit
init|=
literal|true
decl_stmt|;
for|for
control|(
name|byte
name|i
init|=
literal|0
init|;
name|i
operator|<
name|foundNextKeyGroup
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|posBigTable
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|foundNextKeyGroup
index|[
name|i
index|]
condition|)
block|{
name|canEmit
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|compareKeys
argument_list|(
name|i
argument_list|,
name|key
argument_list|,
name|keyWritables
index|[
name|i
index|]
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|canEmit
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
comment|// we can save ourselves from spilling once we have join emit interval worth of rows.
if|if
condition|(
name|canEmit
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"We are emitting rows since we hit the join emit interval of "
operator|+
name|joinEmitInterval
argument_list|)
expr_stmt|;
name|joinOneGroup
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|candidateStorage
index|[
name|tag
index|]
operator|.
name|clearRows
argument_list|()
expr_stmt|;
name|storage
index|[
name|tag
index|]
operator|.
name|clearRows
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|reportProgress
argument_list|()
expr_stmt|;
name|numMapRowsRead
operator|++
expr_stmt|;
comment|// the big table has reached a new key group. try to let the small tables
comment|// catch up with the big table.
if|if
condition|(
name|nextKeyGroup
condition|)
block|{
assert|assert
name|tag
operator|==
name|posBigTable
assert|;
name|List
argument_list|<
name|Byte
argument_list|>
name|listOfFetchNeeded
init|=
literal|null
decl_stmt|;
do|do
block|{
name|listOfFetchNeeded
operator|=
name|joinOneGroup
argument_list|()
expr_stmt|;
comment|//jump out the loop if we need input from the big table
block|}
do|while
condition|(
name|listOfFetchNeeded
operator|!=
literal|null
operator|&&
name|listOfFetchNeeded
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|listOfFetchNeeded
operator|.
name|contains
argument_list|(
name|this
operator|.
name|posBigTable
argument_list|)
condition|)
do|;
return|return;
block|}
assert|assert
operator|!
name|nextKeyGroup
assert|;
name|candidateStorage
index|[
name|tag
index|]
operator|.
name|addRow
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Byte
argument_list|>
name|joinOneGroup
parameter_list|()
throws|throws
name|HiveException
block|{
return|return
name|joinOneGroup
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|Byte
argument_list|>
name|joinOneGroup
parameter_list|(
name|boolean
name|clear
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
index|[]
name|smallestPos
init|=
name|findSmallestKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Byte
argument_list|>
name|listOfNeedFetchNext
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|smallestPos
operator|!=
literal|null
condition|)
block|{
name|listOfNeedFetchNext
operator|=
name|joinObject
argument_list|(
name|smallestPos
argument_list|,
name|clear
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|listOfNeedFetchNext
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
operator|&&
name|clear
condition|)
block|{
comment|// listOfNeedFetchNext contains all tables that we have joined data in their
comment|// candidateStorage, and we need to clear candidate storage and promote their
comment|// nextGroupStorage to candidateStorage and fetch data until we reach a
comment|// new group.
for|for
control|(
name|Byte
name|b
range|:
name|listOfNeedFetchNext
control|)
block|{
try|try
block|{
name|fetchNextGroup
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
return|return
name|listOfNeedFetchNext
return|;
block|}
specifier|private
name|List
argument_list|<
name|Byte
argument_list|>
name|joinObject
parameter_list|(
name|int
index|[]
name|smallestPos
parameter_list|,
name|boolean
name|clear
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Byte
argument_list|>
name|needFetchList
init|=
operator|new
name|ArrayList
argument_list|<
name|Byte
argument_list|>
argument_list|()
decl_stmt|;
name|byte
name|index
init|=
call|(
name|byte
call|)
argument_list|(
name|smallestPos
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|index
operator|>=
literal|0
condition|;
name|index
operator|--
control|)
block|{
if|if
condition|(
name|smallestPos
index|[
name|index
index|]
operator|>
literal|0
operator|||
name|keyWritables
index|[
name|index
index|]
operator|==
literal|null
condition|)
block|{
name|putDummyOrEmpty
argument_list|(
name|index
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|storage
index|[
name|index
index|]
operator|=
name|candidateStorage
index|[
name|index
index|]
expr_stmt|;
if|if
condition|(
name|clear
condition|)
block|{
name|needFetchList
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|smallestPos
index|[
name|index
index|]
operator|<
literal|0
condition|)
block|{
break|break;
block|}
block|}
for|for
control|(
name|index
operator|--
init|;
name|index
operator|>=
literal|0
condition|;
name|index
operator|--
control|)
block|{
name|putDummyOrEmpty
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|checkAndGenObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|clear
condition|)
block|{
for|for
control|(
name|Byte
name|pos
range|:
name|needFetchList
control|)
block|{
name|this
operator|.
name|candidateStorage
index|[
name|pos
index|]
operator|.
name|clearRows
argument_list|()
expr_stmt|;
name|this
operator|.
name|keyWritables
index|[
name|pos
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|needFetchList
return|;
block|}
specifier|private
name|void
name|putDummyOrEmpty
parameter_list|(
name|Byte
name|i
parameter_list|)
block|{
comment|// put a empty list or null
if|if
condition|(
name|noOuterJoin
condition|)
block|{
name|storage
index|[
name|i
index|]
operator|=
name|emptyList
expr_stmt|;
block|}
else|else
block|{
name|storage
index|[
name|i
index|]
operator|=
name|dummyObjVectors
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
specifier|private
name|int
index|[]
name|findSmallestKey
parameter_list|()
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
name|order
operator|.
name|length
index|]
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|smallestOne
init|=
literal|null
decl_stmt|;
for|for
control|(
name|byte
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|order
operator|.
name|length
condition|;
name|pos
operator|++
control|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|key
init|=
name|keyWritables
index|[
name|pos
index|]
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|smallestOne
operator|==
literal|null
condition|)
block|{
name|smallestOne
operator|=
name|key
expr_stmt|;
name|result
index|[
name|pos
index|]
operator|=
operator|-
literal|1
expr_stmt|;
continue|continue;
block|}
name|result
index|[
name|pos
index|]
operator|=
name|compareKeys
argument_list|(
name|pos
argument_list|,
name|key
argument_list|,
name|smallestOne
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
index|[
name|pos
index|]
operator|<
literal|0
condition|)
block|{
name|smallestOne
operator|=
name|key
expr_stmt|;
block|}
block|}
return|return
name|smallestOne
operator|==
literal|null
condition|?
literal|null
else|:
name|result
return|;
block|}
specifier|private
name|void
name|fetchNextGroup
parameter_list|(
name|Byte
name|t
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|keyWritables
index|[
name|t
index|]
operator|!=
literal|null
condition|)
block|{
return|return;
comment|// First process the current key.
block|}
if|if
condition|(
name|foundNextKeyGroup
index|[
name|t
index|]
condition|)
block|{
comment|// first promote the next group to be the current group if we reached a
comment|// new group in the previous fetch
if|if
condition|(
name|this
operator|.
name|nextKeyWritables
index|[
name|t
index|]
operator|!=
literal|null
condition|)
block|{
name|promoteNextGroupToCandidate
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|keyWritables
index|[
name|t
index|]
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|candidateStorage
index|[
name|t
index|]
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|nextGroupStorage
index|[
name|t
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|foundNextKeyGroup
index|[
name|t
index|]
operator|=
literal|false
expr_stmt|;
block|}
comment|// for the big table, we only need to promote the next group to the current group.
if|if
condition|(
name|t
operator|==
name|posBigTable
condition|)
block|{
return|return;
block|}
comment|// for tables other than the big table, we need to fetch more data until reach a new group or
comment|// done.
name|interruptChecker
operator|.
name|startAbortChecks
argument_list|()
expr_stmt|;
comment|// Reset the time, we only want to count it in the loop.
while|while
condition|(
operator|!
name|foundNextKeyGroup
index|[
name|t
index|]
condition|)
block|{
if|if
condition|(
name|fetchDone
index|[
name|t
index|]
condition|)
block|{
break|break;
block|}
name|fetchOneRow
argument_list|(
name|t
argument_list|)
expr_stmt|;
try|try
block|{
name|interruptChecker
operator|.
name|addRowAndMaybeCheckAbort
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|foundNextKeyGroup
index|[
name|t
index|]
operator|&&
name|fetchDone
index|[
name|t
index|]
condition|)
block|{
name|this
operator|.
name|nextKeyWritables
index|[
name|t
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
name|joinFinalLeftData
argument_list|()
expr_stmt|;
comment|// Do this WITHOUT checking for parents
name|super
operator|.
name|close
argument_list|(
name|abort
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|closeOp
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|closeOp
argument_list|(
name|abort
argument_list|)
expr_stmt|;
comment|// clean up
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cleaning up the operator state"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|order
operator|.
name|length
condition|;
name|pos
operator|++
control|)
block|{
if|if
condition|(
name|pos
operator|!=
name|posBigTable
condition|)
block|{
name|fetchDone
index|[
name|pos
index|]
operator|=
literal|false
expr_stmt|;
block|}
name|foundNextKeyGroup
index|[
name|pos
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|fetchOneRow
parameter_list|(
name|byte
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|boolean
name|hasMore
init|=
name|sources
index|[
name|tag
index|]
operator|.
name|pushRecord
argument_list|()
decl_stmt|;
if|if
condition|(
name|fetchDone
index|[
name|tag
index|]
operator|&&
name|hasMore
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"fetchDone["
operator|+
name|tag
operator|+
literal|"] was set to true (by a recursive call) and will be reset"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: "else {"? This happened in the past due to a bug, see HIVE-11016.
name|fetchDone
index|[
name|tag
index|]
operator|=
operator|!
name|hasMore
expr_stmt|;
if|if
condition|(
name|sources
index|[
name|tag
index|]
operator|.
name|isGrouped
argument_list|()
condition|)
block|{
comment|// instead of maintaining complex state for the fetch of the next group,
comment|// we know for sure that at the end of all the values for a given key,
comment|// we will definitely reach the next key group.
name|foundNextKeyGroup
index|[
name|tag
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|joinFinalLeftData
parameter_list|()
throws|throws
name|HiveException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|RowContainer
name|bigTblRowContainer
init|=
name|this
operator|.
name|candidateStorage
index|[
name|this
operator|.
name|posBigTable
index|]
decl_stmt|;
name|boolean
name|allFetchDone
init|=
name|allFetchDone
argument_list|()
decl_stmt|;
comment|// if all left data in small tables are less than and equal to the left data
comment|// in big table, let's them catch up
while|while
condition|(
name|bigTblRowContainer
operator|!=
literal|null
operator|&&
name|bigTblRowContainer
operator|.
name|rowCount
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|allFetchDone
condition|)
block|{
name|joinOneGroup
argument_list|()
expr_stmt|;
name|bigTblRowContainer
operator|=
name|this
operator|.
name|candidateStorage
index|[
name|this
operator|.
name|posBigTable
index|]
expr_stmt|;
name|allFetchDone
operator|=
name|allFetchDone
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|allFetchDone
condition|)
block|{
name|List
argument_list|<
name|Byte
argument_list|>
name|ret
init|=
name|joinOneGroup
argument_list|()
decl_stmt|;
comment|// if we are in close op phase, we have definitely exhausted the big table input
name|fetchDone
index|[
name|posBigTable
index|]
operator|=
literal|true
expr_stmt|;
comment|// First, handle the condition where the first fetch was never done (big table is empty).
name|doFirstFetchIfNeeded
argument_list|()
expr_stmt|;
comment|// in case of outer joins, we need to pull in records from the sides we still
comment|// need to produce output for apart from the big table. for e.g. full outer join
comment|// TODO: this reproduces the logic of the loop that was here before, assuming
comment|// firstFetchHappened == true. In reality it almost always calls joinOneGroup. Fix it?
name|int
name|lastPos
init|=
operator|(
name|fetchDone
operator|.
name|length
operator|-
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|posBigTable
operator|!=
name|lastPos
operator|&&
operator|(
name|fetchInputAtClose
operator|.
name|contains
argument_list|(
name|lastPos
argument_list|)
operator|)
operator|&&
operator|(
name|fetchDone
index|[
name|lastPos
index|]
operator|==
literal|false
operator|)
condition|)
block|{
comment|// Do the join. It does fetching of next row groups itself.
name|ret
operator|=
name|joinOneGroup
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|==
literal|null
operator|||
name|ret
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
break|break;
block|}
name|reportProgress
argument_list|()
expr_stmt|;
name|numMapRowsRead
operator|++
expr_stmt|;
name|allFetchDone
operator|=
name|allFetchDone
argument_list|()
expr_stmt|;
block|}
name|boolean
name|dataInCache
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|dataInCache
condition|)
block|{
for|for
control|(
name|byte
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|order
operator|.
name|length
condition|;
name|pos
operator|++
control|)
block|{
if|if
condition|(
name|this
operator|.
name|foundNextKeyGroup
index|[
name|pos
index|]
operator|&&
name|this
operator|.
name|nextKeyWritables
index|[
name|pos
index|]
operator|!=
literal|null
condition|)
block|{
name|fetchNextGroup
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
name|joinOneGroup
argument_list|()
expr_stmt|;
name|dataInCache
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|byte
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|order
operator|.
name|length
condition|;
name|pos
operator|++
control|)
block|{
if|if
condition|(
name|candidateStorage
index|[
name|pos
index|]
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|this
operator|.
name|candidateStorage
index|[
name|pos
index|]
operator|.
name|hasRows
argument_list|()
condition|)
block|{
name|dataInCache
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|doFirstFetchIfNeeded
parameter_list|()
throws|throws
name|HiveException
block|{
if|if
condition|(
name|firstFetchHappened
condition|)
return|return;
name|firstFetchHappened
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|byte
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|order
operator|.
name|length
condition|;
name|pos
operator|++
control|)
block|{
if|if
condition|(
name|pos
operator|!=
name|posBigTable
condition|)
block|{
name|fetchNextGroup
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|allFetchDone
parameter_list|()
block|{
for|for
control|(
name|byte
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|order
operator|.
name|length
condition|;
name|pos
operator|++
control|)
block|{
if|if
condition|(
name|pos
operator|!=
name|posBigTable
operator|&&
operator|!
name|fetchDone
index|[
name|pos
index|]
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|promoteNextGroupToCandidate
parameter_list|(
name|Byte
name|t
parameter_list|)
throws|throws
name|HiveException
block|{
name|this
operator|.
name|keyWritables
index|[
name|t
index|]
operator|=
name|this
operator|.
name|nextKeyWritables
index|[
name|t
index|]
expr_stmt|;
name|this
operator|.
name|nextKeyWritables
index|[
name|t
index|]
operator|=
literal|null
expr_stmt|;
name|RowContainer
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|oldRowContainer
init|=
name|this
operator|.
name|candidateStorage
index|[
name|t
index|]
decl_stmt|;
name|oldRowContainer
operator|.
name|clearRows
argument_list|()
expr_stmt|;
name|this
operator|.
name|candidateStorage
index|[
name|t
index|]
operator|=
name|this
operator|.
name|nextGroupStorage
index|[
name|t
index|]
expr_stmt|;
name|this
operator|.
name|nextGroupStorage
index|[
name|t
index|]
operator|=
name|oldRowContainer
expr_stmt|;
block|}
specifier|private
name|boolean
name|processKey
parameter_list|(
name|byte
name|alias
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|key
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|keyWritable
init|=
name|keyWritables
index|[
name|alias
index|]
decl_stmt|;
if|if
condition|(
name|keyWritable
operator|==
literal|null
condition|)
block|{
comment|// the first group.
name|keyWritables
index|[
name|alias
index|]
operator|=
name|key
expr_stmt|;
name|keyComparators
index|[
name|alias
index|]
operator|=
operator|new
name|WritableComparator
index|[
name|key
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|int
name|cmp
init|=
name|compareKeys
argument_list|(
name|alias
argument_list|,
name|key
argument_list|,
name|keyWritable
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
block|{
comment|// Cant overwrite existing keys
if|if
condition|(
name|nextKeyWritables
index|[
name|alias
index|]
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Attempting to overwrite nextKeyWritables["
operator|+
name|alias
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|nextKeyWritables
index|[
name|alias
index|]
operator|=
name|key
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|int
name|compareKeys
parameter_list|(
name|byte
name|alias
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|k1
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|k2
parameter_list|)
block|{
specifier|final
name|WritableComparator
index|[]
name|comparators
init|=
name|keyComparators
index|[
name|alias
index|]
decl_stmt|;
comment|// join keys have difference sizes?
if|if
condition|(
name|k1
operator|.
name|size
argument_list|()
operator|!=
name|k2
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|k1
operator|.
name|size
argument_list|()
operator|-
name|k2
operator|.
name|size
argument_list|()
return|;
block|}
if|if
condition|(
name|comparators
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// cross-product - no keys really
return|return
literal|0
return|;
block|}
if|if
condition|(
name|comparators
operator|.
name|length
operator|>
literal|1
condition|)
block|{
comment|// rare case
return|return
name|compareKeysMany
argument_list|(
name|comparators
argument_list|,
name|k1
argument_list|,
name|k2
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|compareKey
argument_list|(
name|comparators
argument_list|,
literal|0
argument_list|,
operator|(
name|WritableComparable
operator|)
name|k1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|(
name|WritableComparable
operator|)
name|k2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|nullsafes
operator|!=
literal|null
condition|?
name|nullsafes
index|[
literal|0
index|]
else|:
literal|false
argument_list|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|int
name|compareKeysMany
parameter_list|(
name|WritableComparator
index|[]
name|comparators
parameter_list|,
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|k1
parameter_list|,
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|k2
parameter_list|)
block|{
comment|// invariant: k1.size == k2.size
name|int
name|ret
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|k1
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|WritableComparable
name|key_1
init|=
operator|(
name|WritableComparable
operator|)
name|k1
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|WritableComparable
name|key_2
init|=
operator|(
name|WritableComparable
operator|)
name|k2
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ret
operator|=
name|compareKey
argument_list|(
name|comparators
argument_list|,
name|i
argument_list|,
name|key_1
argument_list|,
name|key_2
argument_list|,
name|nullsafes
operator|!=
literal|null
condition|?
name|nullsafes
index|[
name|i
index|]
else|:
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
return|return
name|ret
return|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|int
name|compareKey
parameter_list|(
specifier|final
name|WritableComparator
name|comparators
index|[]
parameter_list|,
specifier|final
name|int
name|pos
parameter_list|,
specifier|final
name|WritableComparable
name|key_1
parameter_list|,
specifier|final
name|WritableComparable
name|key_2
parameter_list|,
specifier|final
name|boolean
name|nullsafe
parameter_list|)
block|{
if|if
condition|(
name|key_1
operator|==
literal|null
operator|&&
name|key_2
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|nullsafe
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|key_1
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|key_2
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|comparators
index|[
name|pos
index|]
operator|==
literal|null
condition|)
block|{
name|comparators
index|[
name|pos
index|]
operator|=
name|WritableComparator
operator|.
name|get
argument_list|(
name|key_1
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|comparators
index|[
name|pos
index|]
operator|.
name|compare
argument_list|(
name|key_1
argument_list|,
name|key_2
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|mergeJoinComputeKeys
parameter_list|(
name|Object
name|row
parameter_list|,
name|Byte
name|alias
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|(
name|joinKeysObjectInspectors
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|joinKeysObjectInspectors
index|[
name|alias
index|]
operator|!=
literal|null
operator|)
condition|)
block|{
return|return
name|JoinUtil
operator|.
name|computeKeys
argument_list|(
name|row
argument_list|,
name|joinKeys
index|[
name|alias
index|]
argument_list|,
name|joinKeysObjectInspectors
index|[
name|alias
index|]
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|key
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ObjectInspectorUtils
operator|.
name|partialCopyToStandardObject
argument_list|(
name|key
argument_list|,
name|row
argument_list|,
name|Utilities
operator|.
name|ReduceField
operator|.
name|KEY
operator|.
name|position
argument_list|,
literal|1
argument_list|,
operator|(
name|StructObjectInspector
operator|)
name|inputObjInspectors
index|[
name|alias
index|]
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
expr_stmt|;
return|return
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|key
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
comment|// this is always 0, even if KEY.position is not
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getOperatorName
argument_list|()
return|;
block|}
specifier|static
specifier|public
name|String
name|getOperatorName
parameter_list|()
block|{
return|return
literal|"MERGEJOIN"
return|;
block|}
annotation|@
name|Override
specifier|public
name|OperatorType
name|getType
parameter_list|()
block|{
return|return
name|OperatorType
operator|.
name|MERGEJOIN
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initializeLocalWork
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOp
range|:
name|parentOperators
control|)
block|{
if|if
condition|(
name|parentOp
operator|!=
literal|null
condition|)
block|{
name|parent
operator|=
name|parentOp
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"No valid parents."
argument_list|)
throw|;
block|}
if|if
condition|(
name|parentOperators
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|DummyStoreOperator
argument_list|>
name|dummyOps
init|=
operator|(
call|(
name|TezContext
call|)
argument_list|(
name|MapredContext
operator|.
name|get
argument_list|()
argument_list|)
operator|)
operator|.
name|getDummyOpsMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|DummyStoreOperator
argument_list|>
name|connectOp
range|:
name|dummyOps
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|connectOp
operator|.
name|getValue
argument_list|()
operator|.
name|getChildOperators
argument_list|()
operator|==
literal|null
operator|||
name|connectOp
operator|.
name|getValue
argument_list|()
operator|.
name|getChildOperators
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|parentOperators
operator|.
name|add
argument_list|(
name|connectOp
operator|.
name|getKey
argument_list|()
argument_list|,
name|connectOp
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|connectOp
operator|.
name|getValue
argument_list|()
operator|.
name|getChildOperators
argument_list|()
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|super
operator|.
name|initializeLocalWork
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isBigTableWork
parameter_list|()
block|{
return|return
name|isBigTableWork
return|;
block|}
specifier|public
name|void
name|setIsBigTableWork
parameter_list|(
name|boolean
name|bigTableWork
parameter_list|)
block|{
name|this
operator|.
name|isBigTableWork
operator|=
name|bigTableWork
expr_stmt|;
block|}
specifier|public
name|int
name|getTagForOperator
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|)
block|{
return|return
name|originalParents
operator|.
name|indexOf
argument_list|(
name|op
argument_list|)
return|;
block|}
specifier|public
name|void
name|cloneOriginalParentsList
parameter_list|(
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|opList
parameter_list|)
block|{
name|originalParents
operator|.
name|addAll
argument_list|(
name|opList
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

