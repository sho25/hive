begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|unionproc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UnionOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|unionproc
operator|.
name|UnionProcContext
operator|.
name|UnionParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_comment
comment|/**  * Operator factory for union processing.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|UnionProcFactory
block|{
specifier|private
name|UnionProcFactory
parameter_list|()
block|{
comment|// prevent instantiation
block|}
specifier|public
specifier|static
name|int
name|getPositionParent
parameter_list|(
name|UnionOperator
name|union
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|)
block|{
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|int
name|size
init|=
name|stack
operator|.
name|size
argument_list|()
decl_stmt|;
assert|assert
name|size
operator|>=
literal|2
operator|&&
name|stack
operator|.
name|get
argument_list|(
name|size
operator|-
literal|1
argument_list|)
operator|==
name|union
assert|;
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|parent
init|=
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
operator|)
name|stack
operator|.
name|get
argument_list|(
name|size
operator|-
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|parUnion
init|=
name|union
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
name|pos
operator|=
name|parUnion
operator|.
name|indexOf
argument_list|(
name|parent
argument_list|)
expr_stmt|;
assert|assert
name|pos
operator|<
name|parUnion
operator|.
name|size
argument_list|()
assert|;
return|return
name|pos
return|;
block|}
comment|/**    * MapRed subquery followed by Union.    */
specifier|public
specifier|static
class|class
name|MapRedUnion
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|UnionOperator
name|union
init|=
operator|(
name|UnionOperator
operator|)
name|nd
decl_stmt|;
name|UnionProcContext
name|ctx
init|=
operator|(
name|UnionProcContext
operator|)
name|procCtx
decl_stmt|;
comment|// find the branch on which this processor was invoked
name|int
name|pos
init|=
name|getPositionParent
argument_list|(
name|union
argument_list|,
name|stack
argument_list|)
decl_stmt|;
name|UnionParseContext
name|uCtx
init|=
name|ctx
operator|.
name|getUnionParseContext
argument_list|(
name|union
argument_list|)
decl_stmt|;
if|if
condition|(
name|uCtx
operator|==
literal|null
condition|)
block|{
name|uCtx
operator|=
operator|new
name|UnionParseContext
argument_list|(
name|union
operator|.
name|getConf
argument_list|()
operator|.
name|getNumInputs
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|setMapOnlySubq
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|uCtx
operator|.
name|setMapOnlySubq
argument_list|(
name|pos
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|uCtx
operator|.
name|setRootTask
argument_list|(
name|pos
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setUnionParseContext
argument_list|(
name|union
argument_list|,
name|uCtx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Map-only subquery followed by Union.    */
specifier|public
specifier|static
class|class
name|MapUnion
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|UnionOperator
name|union
init|=
operator|(
name|UnionOperator
operator|)
name|nd
decl_stmt|;
name|UnionProcContext
name|ctx
init|=
operator|(
name|UnionProcContext
operator|)
name|procCtx
decl_stmt|;
comment|// find the branch on which this processor was invoked
name|int
name|pos
init|=
name|getPositionParent
argument_list|(
name|union
argument_list|,
name|stack
argument_list|)
decl_stmt|;
name|UnionParseContext
name|uCtx
init|=
name|ctx
operator|.
name|getUnionParseContext
argument_list|(
name|union
argument_list|)
decl_stmt|;
if|if
condition|(
name|uCtx
operator|==
literal|null
condition|)
block|{
name|uCtx
operator|=
operator|new
name|UnionParseContext
argument_list|(
name|union
operator|.
name|getConf
argument_list|()
operator|.
name|getNumInputs
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|uCtx
operator|.
name|setMapOnlySubq
argument_list|(
name|pos
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|uCtx
operator|.
name|setRootTask
argument_list|(
name|pos
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setUnionParseContext
argument_list|(
name|union
argument_list|,
name|uCtx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Map-join subquery followed by Union.    */
specifier|public
specifier|static
class|class
name|MapJoinUnion
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|UnionOperator
name|union
init|=
operator|(
name|UnionOperator
operator|)
name|nd
decl_stmt|;
name|UnionProcContext
name|ctx
init|=
operator|(
name|UnionProcContext
operator|)
name|procCtx
decl_stmt|;
comment|// find the branch on which this processor was invoked
name|int
name|pos
init|=
name|getPositionParent
argument_list|(
name|union
argument_list|,
name|stack
argument_list|)
decl_stmt|;
name|UnionParseContext
name|uCtx
init|=
name|ctx
operator|.
name|getUnionParseContext
argument_list|(
name|union
argument_list|)
decl_stmt|;
if|if
condition|(
name|uCtx
operator|==
literal|null
condition|)
block|{
name|uCtx
operator|=
operator|new
name|UnionParseContext
argument_list|(
name|union
operator|.
name|getConf
argument_list|()
operator|.
name|getNumInputs
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|uCtx
operator|.
name|setMapJoinSubq
argument_list|(
name|pos
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setUnionParseContext
argument_list|(
name|union
argument_list|,
name|uCtx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Union subquery followed by Union.    */
specifier|public
specifier|static
class|class
name|UnknownUnion
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|UnionOperator
name|union
init|=
operator|(
name|UnionOperator
operator|)
name|nd
decl_stmt|;
name|UnionProcContext
name|ctx
init|=
operator|(
name|UnionProcContext
operator|)
name|procCtx
decl_stmt|;
comment|// find the branch on which this processor was invoked
name|int
name|pos
init|=
name|getPositionParent
argument_list|(
name|union
argument_list|,
name|stack
argument_list|)
decl_stmt|;
name|UnionParseContext
name|uCtx
init|=
name|ctx
operator|.
name|getUnionParseContext
argument_list|(
name|union
argument_list|)
decl_stmt|;
if|if
condition|(
name|uCtx
operator|==
literal|null
condition|)
block|{
name|uCtx
operator|=
operator|new
name|UnionParseContext
argument_list|(
name|union
operator|.
name|getConf
argument_list|()
operator|.
name|getNumInputs
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|uCtx
operator|.
name|setMapOnlySubq
argument_list|(
name|pos
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|uCtx
operator|.
name|setRootTask
argument_list|(
name|pos
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setUnionParseContext
argument_list|(
name|union
argument_list|,
name|uCtx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Default processor.    */
specifier|public
specifier|static
class|class
name|NoUnion
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getMapRedUnion
parameter_list|()
block|{
return|return
operator|new
name|MapRedUnion
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getMapUnion
parameter_list|()
block|{
return|return
operator|new
name|MapUnion
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getMapJoinUnion
parameter_list|()
block|{
return|return
operator|new
name|MapJoinUnion
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getUnknownUnion
parameter_list|()
block|{
return|return
operator|new
name|UnknownUnion
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getNoUnion
parameter_list|()
block|{
return|return
operator|new
name|NoUnion
argument_list|()
return|;
block|}
block|}
end_class

end_unit

