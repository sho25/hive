begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|cost
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveRelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveTableScan
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|// Use this once we have Join Algorithm selection
end_comment

begin_class
specifier|public
class|class
name|HiveCostUtil
block|{
specifier|private
specifier|static
specifier|final
name|double
name|CPU_COST
init|=
literal|1.0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|NET_COST
init|=
literal|150.0
operator|*
name|CPU_COST
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|LOCAL_WRITE_COST
init|=
literal|4.0
operator|*
name|NET_COST
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|LOCAL_READ_COST
init|=
literal|4.0
operator|*
name|NET_COST
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|HDFS_WRITE_COST
init|=
literal|10.0
operator|*
name|LOCAL_WRITE_COST
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|HDFS_READ_COST
init|=
literal|1.5
operator|*
name|LOCAL_READ_COST
decl_stmt|;
specifier|public
specifier|static
name|RelOptCost
name|computCardinalityBasedCost
parameter_list|(
name|HiveRelNode
name|hr
parameter_list|)
block|{
return|return
operator|new
name|HiveCost
argument_list|(
name|hr
operator|.
name|getRows
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|HiveCost
name|computeCost
parameter_list|(
name|HiveTableScan
name|t
parameter_list|)
block|{
name|double
name|cardinality
init|=
name|t
operator|.
name|getRows
argument_list|()
decl_stmt|;
return|return
operator|new
name|HiveCost
argument_list|(
name|cardinality
argument_list|,
literal|0
argument_list|,
name|HDFS_WRITE_COST
operator|*
name|cardinality
operator|*
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|double
name|computeCommonJoinCPUCost
parameter_list|(
name|ImmutableList
argument_list|<
name|Double
argument_list|>
name|cardinalities
parameter_list|,
name|ImmutableBitSet
name|sorted
parameter_list|)
block|{
comment|// Sort-merge join
assert|assert
name|cardinalities
operator|.
name|size
argument_list|()
operator|==
name|sorted
operator|.
name|length
argument_list|()
assert|;
name|double
name|cpuCost
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cardinalities
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|double
name|cardinality
init|=
name|cardinalities
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sorted
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
comment|// Sort cost
name|cpuCost
operator|+=
name|cardinality
operator|*
name|Math
operator|.
name|log
argument_list|(
name|cardinality
argument_list|)
operator|*
name|CPU_COST
expr_stmt|;
block|}
comment|// Merge cost
name|cpuCost
operator|+=
name|cardinality
operator|*
name|CPU_COST
expr_stmt|;
block|}
return|return
name|cpuCost
return|;
block|}
specifier|public
specifier|static
name|double
name|computeCommonJoinIOCost
parameter_list|(
name|ImmutableList
argument_list|<
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
name|relationInfos
parameter_list|)
block|{
comment|// Sort-merge join
name|double
name|ioCost
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|relationInfo
range|:
name|relationInfos
control|)
block|{
name|double
name|cardinality
init|=
name|relationInfo
operator|.
name|left
decl_stmt|;
name|double
name|averageTupleSize
init|=
name|relationInfo
operator|.
name|right
decl_stmt|;
comment|// Write cost
name|ioCost
operator|+=
name|cardinality
operator|*
name|averageTupleSize
operator|*
name|LOCAL_WRITE_COST
expr_stmt|;
comment|// Read cost
name|ioCost
operator|+=
name|cardinality
operator|*
name|averageTupleSize
operator|*
name|LOCAL_READ_COST
expr_stmt|;
comment|// Net transfer cost
name|ioCost
operator|+=
name|cardinality
operator|*
name|averageTupleSize
operator|*
name|NET_COST
expr_stmt|;
block|}
return|return
name|ioCost
return|;
block|}
specifier|public
specifier|static
name|double
name|computeMapJoinCPUCost
parameter_list|(
name|ImmutableList
argument_list|<
name|Double
argument_list|>
name|cardinalities
parameter_list|,
name|ImmutableBitSet
name|streaming
parameter_list|)
block|{
comment|// Hash-join
name|double
name|cpuCost
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cardinalities
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|double
name|cardinality
init|=
name|cardinalities
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|streaming
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|cpuCost
operator|+=
name|cardinality
expr_stmt|;
block|}
name|cpuCost
operator|+=
name|cardinality
operator|*
name|CPU_COST
expr_stmt|;
block|}
return|return
name|cpuCost
return|;
block|}
specifier|public
specifier|static
name|double
name|computeMapJoinIOCost
parameter_list|(
name|ImmutableList
argument_list|<
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
name|relationInfos
parameter_list|,
name|ImmutableBitSet
name|streaming
parameter_list|,
name|int
name|parallelism
parameter_list|)
block|{
comment|// Hash-join
name|double
name|ioCost
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|relationInfos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|double
name|cardinality
init|=
name|relationInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|left
decl_stmt|;
name|double
name|averageTupleSize
init|=
name|relationInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|right
decl_stmt|;
if|if
condition|(
operator|!
name|streaming
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|ioCost
operator|+=
name|cardinality
operator|*
name|averageTupleSize
operator|*
name|NET_COST
operator|*
name|parallelism
expr_stmt|;
block|}
block|}
return|return
name|ioCost
return|;
block|}
specifier|public
specifier|static
name|double
name|computeBucketMapJoinCPUCost
parameter_list|(
name|ImmutableList
argument_list|<
name|Double
argument_list|>
name|cardinalities
parameter_list|,
name|ImmutableBitSet
name|streaming
parameter_list|)
block|{
comment|// Hash-join
name|double
name|cpuCost
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cardinalities
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|double
name|cardinality
init|=
name|cardinalities
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|streaming
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|cpuCost
operator|+=
name|cardinality
operator|*
name|CPU_COST
expr_stmt|;
block|}
name|cpuCost
operator|+=
name|cardinality
operator|*
name|CPU_COST
expr_stmt|;
block|}
return|return
name|cpuCost
return|;
block|}
specifier|public
specifier|static
name|double
name|computeBucketMapJoinIOCost
parameter_list|(
name|ImmutableList
argument_list|<
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
name|relationInfos
parameter_list|,
name|ImmutableBitSet
name|streaming
parameter_list|,
name|int
name|parallelism
parameter_list|)
block|{
comment|// Hash-join
name|double
name|ioCost
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|relationInfos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|double
name|cardinality
init|=
name|relationInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|left
decl_stmt|;
name|double
name|averageTupleSize
init|=
name|relationInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|right
decl_stmt|;
if|if
condition|(
operator|!
name|streaming
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|ioCost
operator|+=
name|cardinality
operator|*
name|averageTupleSize
operator|*
name|NET_COST
operator|*
name|parallelism
expr_stmt|;
block|}
block|}
return|return
name|ioCost
return|;
block|}
specifier|public
specifier|static
name|double
name|computeSMBMapJoinCPUCost
parameter_list|(
name|ImmutableList
argument_list|<
name|Double
argument_list|>
name|cardinalities
parameter_list|)
block|{
comment|// Hash-join
name|double
name|cpuCost
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cardinalities
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|cpuCost
operator|+=
name|cardinalities
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|*
name|CPU_COST
expr_stmt|;
block|}
return|return
name|cpuCost
return|;
block|}
specifier|public
specifier|static
name|double
name|computeSMBMapJoinIOCost
parameter_list|(
name|ImmutableList
argument_list|<
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
name|relationInfos
parameter_list|,
name|ImmutableBitSet
name|streaming
parameter_list|,
name|int
name|parallelism
parameter_list|)
block|{
comment|// Hash-join
name|double
name|ioCost
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|relationInfos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|double
name|cardinality
init|=
name|relationInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|left
decl_stmt|;
name|double
name|averageTupleSize
init|=
name|relationInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|right
decl_stmt|;
if|if
condition|(
operator|!
name|streaming
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|ioCost
operator|+=
name|cardinality
operator|*
name|averageTupleSize
operator|*
name|NET_COST
operator|*
name|parallelism
expr_stmt|;
block|}
block|}
return|return
name|ioCost
return|;
block|}
block|}
end_class

end_unit

