begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultGraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|RuleRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PrunedPartitionList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AggregationDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeNullDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|GroupByDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SelectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
operator|.
name|Mode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * This transformation does group by optimization. If the grouping key is a superset  * of the bucketing and sorting keys of the underlying table in the same order, the  * group by can be be performed on the map-side completely.  */
end_comment

begin_class
specifier|public
class|class
name|GroupByOptimizer
implements|implements
name|Transform
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GroupByOptimizer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|GroupByOptimizer
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|ParseContext
name|transform
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
name|HiveConf
name|conf
init|=
name|pctx
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEGROUPBYSKEW
argument_list|)
condition|)
block|{
comment|// process group-by pattern
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R1"
argument_list|,
name|GroupByOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
operator|+
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
operator|+
name|GroupByOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
name|getMapSortedGroupbyProc
argument_list|(
name|pctx
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If hive.groupby.skewindata is set to true, the operator tree is as below
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R2"
argument_list|,
name|GroupByOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
operator|+
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
operator|+
name|GroupByOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
operator|+
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
operator|+
name|GroupByOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
name|getMapSortedGroupbySkewProc
argument_list|(
name|pctx
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// The dispatcher fires the processor corresponding to the closest matching
comment|// rule and passes the context along
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|getDefaultProc
argument_list|()
argument_list|,
name|opRules
argument_list|,
operator|new
name|GroupByOptimizerContext
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
comment|// Create a list of topop nodes
name|List
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|addAll
argument_list|(
name|pctx
operator|.
name|getTopOps
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|pctx
return|;
block|}
specifier|private
name|NodeProcessor
name|getDefaultProc
parameter_list|()
block|{
return|return
operator|new
name|NodeProcessor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
specifier|private
name|NodeProcessor
name|getMapSortedGroupbyProc
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
block|{
return|return
operator|new
name|SortGroupByProcessor
argument_list|(
name|pctx
argument_list|)
return|;
block|}
specifier|private
name|NodeProcessor
name|getMapSortedGroupbySkewProc
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
block|{
return|return
operator|new
name|SortGroupBySkewProcessor
argument_list|(
name|pctx
argument_list|)
return|;
block|}
specifier|public
enum|enum
name|GroupByOptimizerSortMatch
block|{
name|NO_MATCH
block|,
name|PARTIAL_MATCH
block|,
name|COMPLETE_MATCH
block|}
empty_stmt|;
specifier|private
enum|enum
name|ColumnOrderMatch
block|{
name|NO_MATCH
block|,
name|PREFIX_COL1_MATCH
block|,
name|PREFIX_COL2_MATCH
block|,
name|COMPLETE_MATCH
block|}
empty_stmt|;
comment|/**    * SortGroupByProcessor.    *    */
specifier|public
class|class
name|SortGroupByProcessor
implements|implements
name|NodeProcessor
block|{
specifier|protected
name|ParseContext
name|pGraphContext
decl_stmt|;
specifier|public
name|SortGroupByProcessor
parameter_list|(
name|ParseContext
name|pGraphContext
parameter_list|)
block|{
name|this
operator|.
name|pGraphContext
operator|=
name|pGraphContext
expr_stmt|;
block|}
comment|// Check if the group by operator has already been processed
specifier|protected
name|boolean
name|checkGroupByOperatorProcessed
parameter_list|(
name|GroupByOptimizerContext
name|groupBySortOptimizerContext
parameter_list|,
name|GroupByOperator
name|groupByOp
parameter_list|)
block|{
comment|// The group by operator has already been processed
if|if
condition|(
name|groupBySortOptimizerContext
operator|.
name|getListGroupByOperatorsProcessed
argument_list|()
operator|.
name|contains
argument_list|(
name|groupByOp
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|groupBySortOptimizerContext
operator|.
name|getListGroupByOperatorsProcessed
argument_list|()
operator|.
name|add
argument_list|(
name|groupByOp
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|protected
name|void
name|processGroupBy
parameter_list|(
name|GroupByOptimizerContext
name|ctx
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|GroupByOperator
name|groupByOp
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|SemanticException
block|{
name|HiveConf
name|hiveConf
init|=
name|ctx
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|GroupByOptimizerSortMatch
name|match
init|=
name|checkSortGroupBy
argument_list|(
name|stack
argument_list|,
name|groupByOp
argument_list|)
decl_stmt|;
name|boolean
name|useMapperSort
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_MAP_GROUPBY_SORT
argument_list|)
decl_stmt|;
name|GroupByDesc
name|groupByOpDesc
init|=
name|groupByOp
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|boolean
name|removeReduceSink
init|=
literal|false
decl_stmt|;
name|boolean
name|optimizeDistincts
init|=
literal|false
decl_stmt|;
name|boolean
name|setBucketGroup
init|=
literal|false
decl_stmt|;
comment|// Dont remove the operator for distincts
if|if
condition|(
name|useMapperSort
operator|&&
operator|(
name|match
operator|==
name|GroupByOptimizerSortMatch
operator|.
name|COMPLETE_MATCH
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|groupByOpDesc
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
name|removeReduceSink
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEGROUPBYSKEW
argument_list|)
condition|)
block|{
comment|// Optimize the query: select count(distinct keys) from T, where
comment|// T is bucketized and sorted by T
comment|// Partial aggregation can be done by the mappers in this scenario
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keys
init|=
operator|(
call|(
name|GroupByOperator
call|)
argument_list|(
name|groupByOp
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
operator|.
name|getConf
argument_list|()
operator|.
name|getKeys
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|keys
operator|==
literal|null
operator|)
operator|||
operator|(
name|keys
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|optimizeDistincts
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|(
name|match
operator|==
name|GroupByOptimizerSortMatch
operator|.
name|PARTIAL_MATCH
operator|)
operator|||
operator|(
name|match
operator|==
name|GroupByOptimizerSortMatch
operator|.
name|COMPLETE_MATCH
operator|)
condition|)
block|{
name|setBucketGroup
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|removeReduceSink
condition|)
block|{
name|convertGroupByMapSideSortedGroupBy
argument_list|(
name|hiveConf
argument_list|,
name|groupByOp
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|optimizeDistincts
condition|)
block|{
comment|// In test mode, dont change the query plan. However, setup a query property
name|pGraphContext
operator|.
name|getQueryProperties
argument_list|()
operator|.
name|setHasMapGroupBy
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_MAP_GROUPBY_SORT_TESTMODE
argument_list|)
condition|)
block|{
return|return;
block|}
name|ReduceSinkOperator
name|reduceSinkOp
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|groupByOp
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|GroupByDesc
name|childGroupByDesc
init|=
operator|(
call|(
name|GroupByOperator
call|)
argument_list|(
name|reduceSinkOp
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
operator|.
name|getConf
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|childGroupByDesc
operator|.
name|getAggregators
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|AggregationDesc
name|aggr
init|=
name|childGroupByDesc
operator|.
name|getAggregators
argument_list|()
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
comment|// Partial aggregation is not done for distincts on the mapper
comment|// However, if the data is bucketed/sorted on the distinct key, partial aggregation
comment|// can be performed on the mapper.
if|if
condition|(
name|aggr
operator|.
name|getDistinct
argument_list|()
condition|)
block|{
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|parameters
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ExprNodeDesc
name|param
init|=
name|aggr
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
name|param
operator|instanceof
name|ExprNodeColumnDesc
assert|;
name|ExprNodeColumnDesc
name|paramC
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|param
decl_stmt|;
name|paramC
operator|.
name|setIsPartitionColOrVirtualCol
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|paramC
operator|.
name|setColumn
argument_list|(
literal|"VALUE._col"
operator|+
name|pos
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
name|paramC
argument_list|)
expr_stmt|;
name|aggr
operator|.
name|setParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|aggr
operator|.
name|setDistinct
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|aggr
operator|.
name|setMode
argument_list|(
name|Mode
operator|.
name|FINAL
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Partial aggregation is performed on the mapper, no distinct processing at the reducer
name|childGroupByDesc
operator|.
name|setDistinct
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|groupByOpDesc
operator|.
name|setDontResetAggrsDistinct
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|groupByOpDesc
operator|.
name|setBucketGroup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|groupByOp
operator|.
name|setUseBucketizedHiveInputFormat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// no distinct processing at the reducer
comment|// A query like 'select count(distinct key) from T' is transformed into
comment|// 'select count(key) from T' as far as the reducer is concerned.
name|reduceSinkOp
operator|.
name|getConf
argument_list|()
operator|.
name|setDistinctColumnIndices
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|setBucketGroup
condition|)
block|{
name|groupByOpDesc
operator|.
name|setBucketGroup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// GBY,RS,GBY... (top to bottom)
name|GroupByOperator
name|groupByOp
init|=
operator|(
name|GroupByOperator
operator|)
name|stack
operator|.
name|get
argument_list|(
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|3
argument_list|)
decl_stmt|;
name|GroupByOptimizerContext
name|ctx
init|=
operator|(
name|GroupByOptimizerContext
operator|)
name|procCtx
decl_stmt|;
if|if
condition|(
operator|!
name|checkGroupByOperatorProcessed
argument_list|(
name|ctx
argument_list|,
name|groupByOp
argument_list|)
condition|)
block|{
name|processGroupBy
argument_list|(
name|ctx
argument_list|,
name|stack
argument_list|,
name|groupByOp
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|// Should this group by be converted to a map-side group by, because the grouping keys for
comment|// the base table for the group by matches the skewed keys
specifier|protected
name|GroupByOptimizerSortMatch
name|checkSortGroupBy
parameter_list|(
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|GroupByOperator
name|groupByOp
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// if this is not a HASH groupby, return
if|if
condition|(
name|groupByOp
operator|.
name|getConf
argument_list|()
operator|.
name|getMode
argument_list|()
operator|!=
name|GroupByDesc
operator|.
name|Mode
operator|.
name|HASH
condition|)
block|{
return|return
name|GroupByOptimizerSortMatch
operator|.
name|NO_MATCH
return|;
block|}
comment|// Check all the operators in the stack. Currently, only SELECTs and FILTERs
comment|// are allowed. A interface 'supportMapSideGroupBy has been added for the same
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|currOp
init|=
name|groupByOp
decl_stmt|;
name|currOp
operator|=
name|currOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|currOp
operator|.
name|getParentOperators
argument_list|()
operator|==
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|(
name|currOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|)
operator|||
operator|(
operator|!
name|currOp
operator|.
name|columnNamesRowResolvedCanBeObtained
argument_list|()
operator|)
condition|)
block|{
return|return
name|GroupByOptimizerSortMatch
operator|.
name|NO_MATCH
return|;
block|}
name|currOp
operator|=
name|currOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// currOp now points to the top-most tablescan operator
name|TableScanOperator
name|tableScanOp
init|=
operator|(
name|TableScanOperator
operator|)
name|currOp
decl_stmt|;
name|int
name|stackPos
init|=
literal|0
decl_stmt|;
assert|assert
name|stack
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
name|tableScanOp
assert|;
comment|// Create a mapping from the group by columns to the table columns
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableColsMapping
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|constantCols
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Table
name|table
init|=
name|pGraphContext
operator|.
name|getTopToTable
argument_list|()
operator|.
name|get
argument_list|(
name|currOp
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldSchema
name|col
range|:
name|table
operator|.
name|getAllCols
argument_list|()
control|)
block|{
name|tableColsMapping
operator|.
name|put
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|,
name|col
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|currOp
operator|!=
name|groupByOp
condition|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|processOp
init|=
name|currOp
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|newConstantCols
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|currOp
operator|=
call|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
call|)
argument_list|(
name|stack
operator|.
name|get
argument_list|(
operator|++
name|stackPos
argument_list|)
argument_list|)
expr_stmt|;
comment|// Filters don't change the column names - so, no need to do anything for them
if|if
condition|(
name|processOp
operator|instanceof
name|SelectOperator
condition|)
block|{
name|SelectOperator
name|selectOp
init|=
operator|(
name|SelectOperator
operator|)
name|processOp
decl_stmt|;
name|SelectDesc
name|selectDesc
init|=
name|selectOp
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|selectDesc
operator|.
name|isSelStarNoCompute
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// Only columns and constants can be selected
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|selectDesc
operator|.
name|getColList
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|String
name|outputColumnName
init|=
name|selectDesc
operator|.
name|getOutputColumnNames
argument_list|()
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|constantCols
operator|.
name|contains
argument_list|(
name|outputColumnName
argument_list|)
condition|)
block|{
name|tableColsMapping
operator|.
name|remove
argument_list|(
name|outputColumnName
argument_list|)
expr_stmt|;
name|newConstantCols
operator|.
name|add
argument_list|(
name|outputColumnName
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|ExprNodeDesc
name|selectColList
init|=
name|selectDesc
operator|.
name|getColList
argument_list|()
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|selectColList
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|String
name|newValue
init|=
name|tableColsMapping
operator|.
name|get
argument_list|(
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|selectColList
operator|)
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|tableColsMapping
operator|.
name|put
argument_list|(
name|outputColumnName
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tableColsMapping
operator|.
name|remove
argument_list|(
name|outputColumnName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|selectColList
operator|instanceof
name|ExprNodeConstantDesc
operator|)
operator|||
operator|(
name|selectColList
operator|instanceof
name|ExprNodeNullDesc
operator|)
condition|)
block|{
name|newConstantCols
operator|.
name|add
argument_list|(
name|outputColumnName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|constantCols
operator|=
name|newConstantCols
expr_stmt|;
block|}
block|}
name|boolean
name|sortGroupBy
init|=
literal|true
decl_stmt|;
comment|// compute groupby columns from groupby keys
name|List
argument_list|<
name|String
argument_list|>
name|groupByCols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// If the group by expression is anything other than a list of columns,
comment|// the sorting property is not obeyed
for|for
control|(
name|ExprNodeDesc
name|expr
range|:
name|groupByOp
operator|.
name|getConf
argument_list|()
operator|.
name|getKeys
argument_list|()
control|)
block|{
if|if
condition|(
name|expr
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|String
name|groupByKeyColumn
init|=
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|expr
operator|)
operator|.
name|getColumn
argument_list|()
decl_stmt|;
comment|// ignore if it is a constant
if|if
condition|(
name|constantCols
operator|.
name|contains
argument_list|(
name|groupByKeyColumn
argument_list|)
condition|)
block|{
continue|continue;
block|}
else|else
block|{
if|if
condition|(
name|tableColsMapping
operator|.
name|containsKey
argument_list|(
name|groupByKeyColumn
argument_list|)
condition|)
block|{
name|groupByCols
operator|.
name|add
argument_list|(
name|tableColsMapping
operator|.
name|get
argument_list|(
name|groupByKeyColumn
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|GroupByOptimizerSortMatch
operator|.
name|NO_MATCH
return|;
block|}
block|}
block|}
comment|// Constants and nulls are OK
elseif|else
if|if
condition|(
operator|(
name|expr
operator|instanceof
name|ExprNodeConstantDesc
operator|)
operator|||
operator|(
name|expr
operator|instanceof
name|ExprNodeNullDesc
operator|)
condition|)
block|{
continue|continue;
block|}
else|else
block|{
return|return
name|GroupByOptimizerSortMatch
operator|.
name|NO_MATCH
return|;
block|}
block|}
if|if
condition|(
operator|!
name|table
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|sortCols
init|=
name|Utilities
operator|.
name|getColumnNamesFromSortCols
argument_list|(
name|table
operator|.
name|getSortCols
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
init|=
name|table
operator|.
name|getBucketCols
argument_list|()
decl_stmt|;
return|return
name|matchBucketSortCols
argument_list|(
name|groupByCols
argument_list|,
name|bucketCols
argument_list|,
name|sortCols
argument_list|)
return|;
block|}
else|else
block|{
name|PrunedPartitionList
name|partsList
decl_stmt|;
try|try
block|{
name|partsList
operator|=
name|pGraphContext
operator|.
name|getPrunedPartitions
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tableScanOp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|notDeniedPartns
init|=
name|partsList
operator|.
name|getNotDeniedPartns
argument_list|()
decl_stmt|;
name|GroupByOptimizerSortMatch
name|currentMatch
init|=
name|notDeniedPartns
operator|.
name|isEmpty
argument_list|()
condition|?
name|GroupByOptimizerSortMatch
operator|.
name|NO_MATCH
else|:
name|notDeniedPartns
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|GroupByOptimizerSortMatch
operator|.
name|PARTIAL_MATCH
else|:
name|GroupByOptimizerSortMatch
operator|.
name|COMPLETE_MATCH
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|notDeniedPartns
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|sortCols
init|=
name|part
operator|.
name|getSortColNames
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
init|=
name|part
operator|.
name|getBucketCols
argument_list|()
decl_stmt|;
name|GroupByOptimizerSortMatch
name|match
init|=
name|matchBucketSortCols
argument_list|(
name|groupByCols
argument_list|,
name|bucketCols
argument_list|,
name|sortCols
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
operator|==
name|GroupByOptimizerSortMatch
operator|.
name|NO_MATCH
condition|)
block|{
return|return
name|match
return|;
block|}
if|if
condition|(
name|match
operator|==
name|GroupByOptimizerSortMatch
operator|.
name|PARTIAL_MATCH
condition|)
block|{
name|currentMatch
operator|=
name|match
expr_stmt|;
block|}
block|}
return|return
name|currentMatch
return|;
block|}
block|}
comment|/*      * Return how the list of columns passed in match.      * Return NO_MATCH if either of the list is empty or null, or if there is a mismatch.      * For eg: ([], []), ([], ["a"]), (["a"],["b"]) and (["a", "b"], ["a","c"]) return NO_MATCH      *      * Return COMPLETE_MATCH if both the lists are non-empty and are same      * Return PREFIX_COL1_MATCH if list1 is a strict subset of list2 and      * return PREFIX_COL2_MATCH if list2 is a strict subset of list1      *      * For eg: (["a"], ["a"]), (["a"], ["a", "b"]) and (["a", "b"], ["a"]) return      * COMPLETE_MATCH, PREFIX_COL1_MATCH and PREFIX_COL2_MATCH respectively.      */
specifier|private
name|ColumnOrderMatch
name|matchColumnOrder
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|cols1
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|cols2
parameter_list|)
block|{
name|int
name|numCols1
init|=
name|cols1
operator|==
literal|null
condition|?
literal|0
else|:
name|cols1
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numCols2
init|=
name|cols2
operator|==
literal|null
condition|?
literal|0
else|:
name|cols2
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numCols1
operator|==
literal|0
operator|||
name|numCols2
operator|==
literal|0
condition|)
block|{
return|return
name|ColumnOrderMatch
operator|.
name|NO_MATCH
return|;
block|}
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|Math
operator|.
name|min
argument_list|(
name|numCols1
argument_list|,
name|numCols2
argument_list|)
condition|;
name|pos
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|cols1
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|.
name|equals
argument_list|(
name|cols2
operator|.
name|get
argument_list|(
name|pos
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|ColumnOrderMatch
operator|.
name|NO_MATCH
return|;
block|}
block|}
return|return
operator|(
name|numCols1
operator|==
name|numCols2
operator|)
condition|?
name|ColumnOrderMatch
operator|.
name|COMPLETE_MATCH
else|:
operator|(
operator|(
name|numCols1
operator|<
name|numCols2
operator|)
condition|?
name|ColumnOrderMatch
operator|.
name|PREFIX_COL1_MATCH
else|:
name|ColumnOrderMatch
operator|.
name|PREFIX_COL2_MATCH
operator|)
return|;
block|}
comment|/**      * Given the group by keys, bucket columns and sort columns, this method      * determines if we can use sorted group by or not.      *      * @param groupByCols      * @param bucketCols      * @param sortCols      * @return      * @throws SemanticException      */
specifier|private
name|GroupByOptimizerSortMatch
name|matchBucketSortCols
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|groupByCols
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|sortCols
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|/*        *>> Super set of        * If the grouping columns are a,b,c and the sorting columns are a,b        * grouping columns>> sorting columns        * (or grouping columns are a superset of sorting columns)        *        * Similarly<< means subset of        *        * No intersection between Sort Columns and BucketCols:        *        * 1. Sort Cols = Group By Cols ---> Partial Match        * 2. Group By Cols>> Sort By Cols --> No Match        * 3. Group By Cols<< Sort By Cols --> Partial Match        *        * BucketCols<= SortCols (bucket columns is either same or a prefix of sort columns)        *        * 1. Sort Cols = Group By Cols ---> Complete Match        * 2. Group By Cols>> Sort By Cols --> No Match        * 3. Group By Cols<< Sort By Cols --> Complete Match if Group By Cols>= BucketCols        * --> Partial Match otherwise        *        * BucketCols>> SortCols (bucket columns is a superset of sorting columns)        *        * 1. group by cols<= sort cols --> partial match        * 2. group by cols>> sort cols --> no match        *        * One exception to this rule is:        * If GroupByCols == SortCols and all bucketing columns are part of sorting columns        * (in any order), it is a complete match        */
name|ColumnOrderMatch
name|bucketSortColsMatch
init|=
name|matchColumnOrder
argument_list|(
name|bucketCols
argument_list|,
name|sortCols
argument_list|)
decl_stmt|;
name|ColumnOrderMatch
name|sortGroupByColsMatch
init|=
name|matchColumnOrder
argument_list|(
name|sortCols
argument_list|,
name|groupByCols
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|sortGroupByColsMatch
condition|)
block|{
case|case
name|NO_MATCH
case|:
return|return
name|GroupByOptimizerSortMatch
operator|.
name|NO_MATCH
return|;
case|case
name|COMPLETE_MATCH
case|:
return|return
operator|(
operator|(
name|bucketCols
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|bucketCols
operator|.
name|isEmpty
argument_list|()
operator|&&
name|sortCols
operator|.
name|containsAll
argument_list|(
name|bucketCols
argument_list|)
operator|)
condition|?
name|GroupByOptimizerSortMatch
operator|.
name|COMPLETE_MATCH
else|:
name|GroupByOptimizerSortMatch
operator|.
name|PARTIAL_MATCH
return|;
case|case
name|PREFIX_COL1_MATCH
case|:
return|return
name|GroupByOptimizerSortMatch
operator|.
name|NO_MATCH
return|;
case|case
name|PREFIX_COL2_MATCH
case|:
return|return
operator|(
operator|(
name|bucketSortColsMatch
operator|==
name|ColumnOrderMatch
operator|.
name|NO_MATCH
operator|)
operator|||
operator|(
name|bucketCols
operator|.
name|size
argument_list|()
operator|>
name|groupByCols
operator|.
name|size
argument_list|()
operator|)
operator|)
condition|?
name|GroupByOptimizerSortMatch
operator|.
name|PARTIAL_MATCH
else|:
name|GroupByOptimizerSortMatch
operator|.
name|COMPLETE_MATCH
return|;
block|}
return|return
name|GroupByOptimizerSortMatch
operator|.
name|NO_MATCH
return|;
block|}
comment|// Convert the group by to a map-side group by
comment|// The operators specified by depth and removed from the tree.
specifier|protected
name|void
name|convertGroupByMapSideSortedGroupBy
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|GroupByOperator
name|groupByOp
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
comment|// In test mode, dont change the query plan. However, setup a query property
name|pGraphContext
operator|.
name|getQueryProperties
argument_list|()
operator|.
name|setHasMapGroupBy
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_MAP_GROUPBY_SORT_TESTMODE
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|groupByOp
operator|.
name|removeChildren
argument_list|(
name|depth
argument_list|)
condition|)
block|{
comment|// Use bucketized hive input format - that makes sure that one mapper reads the entire file
name|groupByOp
operator|.
name|setUseBucketizedHiveInputFormat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|groupByOp
operator|.
name|getConf
argument_list|()
operator|.
name|setMode
argument_list|(
name|GroupByDesc
operator|.
name|Mode
operator|.
name|FINAL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * SortGroupByProcessor.    *    */
specifier|public
class|class
name|SortGroupBySkewProcessor
extends|extends
name|SortGroupByProcessor
block|{
specifier|public
name|SortGroupBySkewProcessor
parameter_list|(
name|ParseContext
name|pGraphContext
parameter_list|)
block|{
name|super
argument_list|(
name|pGraphContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// GBY,RS,GBY,RS,GBY... (top to bottom)
name|GroupByOperator
name|groupByOp
init|=
operator|(
name|GroupByOperator
operator|)
name|stack
operator|.
name|get
argument_list|(
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|5
argument_list|)
decl_stmt|;
name|GroupByOptimizerContext
name|ctx
init|=
operator|(
name|GroupByOptimizerContext
operator|)
name|procCtx
decl_stmt|;
if|if
condition|(
operator|!
name|checkGroupByOperatorProcessed
argument_list|(
name|ctx
argument_list|,
name|groupByOp
argument_list|)
condition|)
block|{
name|processGroupBy
argument_list|(
name|ctx
argument_list|,
name|stack
argument_list|,
name|groupByOp
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|public
class|class
name|GroupByOptimizerContext
implements|implements
name|NodeProcessorCtx
block|{
name|List
argument_list|<
name|GroupByOperator
argument_list|>
name|listGroupByOperatorsProcessed
decl_stmt|;
name|HiveConf
name|conf
decl_stmt|;
specifier|public
name|GroupByOptimizerContext
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|listGroupByOperatorsProcessed
operator|=
operator|new
name|ArrayList
argument_list|<
name|GroupByOperator
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|GroupByOperator
argument_list|>
name|getListGroupByOperatorsProcessed
parameter_list|()
block|{
return|return
name|listGroupByOperatorsProcessed
return|;
block|}
specifier|public
name|void
name|setListGroupByOperatorsProcessed
parameter_list|(
name|List
argument_list|<
name|GroupByOperator
argument_list|>
name|listGroupByOperatorsProcessed
parameter_list|)
block|{
name|this
operator|.
name|listGroupByOperatorsProcessed
operator|=
name|listGroupByOperatorsProcessed
expr_stmt|;
block|}
specifier|public
name|HiveConf
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
specifier|public
name|void
name|setConf
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

