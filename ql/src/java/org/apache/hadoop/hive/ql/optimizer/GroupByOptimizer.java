begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultGraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|RuleRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|ppr
operator|.
name|PartitionPruner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PrunedPartitionList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeFieldDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeNullDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|GroupByDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_comment
comment|/**  *this transformation does bucket group by optimization.  */
end_comment

begin_class
specifier|public
class|class
name|GroupByOptimizer
implements|implements
name|Transform
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GroupByOptimizer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|GroupByOptimizer
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|ParseContext
name|transform
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
name|GroupByOptProcCtx
name|groupByOptimizeCtx
init|=
operator|new
name|GroupByOptProcCtx
argument_list|()
decl_stmt|;
comment|// process group-by pattern
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R1"
argument_list|,
literal|"GBY%RS%GBY%"
argument_list|)
argument_list|,
name|getMapAggreSortedGroupbyProc
argument_list|(
name|pctx
argument_list|)
argument_list|)
expr_stmt|;
comment|// The dispatcher fires the processor corresponding to the closest matching
comment|// rule and passes the context along
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|getDefaultProc
argument_list|()
argument_list|,
name|opRules
argument_list|,
name|groupByOptimizeCtx
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
comment|// Create a list of topop nodes
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|addAll
argument_list|(
name|pctx
operator|.
name|getTopOps
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|pctx
return|;
block|}
specifier|private
name|NodeProcessor
name|getDefaultProc
parameter_list|()
block|{
return|return
operator|new
name|NodeProcessor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
specifier|private
name|NodeProcessor
name|getMapAggreSortedGroupbyProc
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
block|{
return|return
operator|new
name|BucketGroupByProcessor
argument_list|(
name|pctx
argument_list|)
return|;
block|}
comment|/**    * BucketGroupByProcessor.    *    */
specifier|public
class|class
name|BucketGroupByProcessor
implements|implements
name|NodeProcessor
block|{
specifier|protected
name|ParseContext
name|pGraphContext
decl_stmt|;
specifier|public
name|BucketGroupByProcessor
parameter_list|(
name|ParseContext
name|pGraphContext
parameter_list|)
block|{
name|this
operator|.
name|pGraphContext
operator|=
name|pGraphContext
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// GBY,RS,GBY... (top to bottom)
name|GroupByOperator
name|op
init|=
operator|(
name|GroupByOperator
operator|)
name|stack
operator|.
name|get
argument_list|(
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|3
argument_list|)
decl_stmt|;
name|checkBucketGroupBy
argument_list|(
name|op
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|checkBucketGroupBy
parameter_list|(
name|GroupByOperator
name|curr
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// if this is not a HASH groupby, return
if|if
condition|(
name|curr
operator|.
name|getConf
argument_list|()
operator|.
name|getMode
argument_list|()
operator|!=
name|GroupByDesc
operator|.
name|Mode
operator|.
name|HASH
condition|)
block|{
return|return;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|tblNames
init|=
name|pGraphContext
operator|.
name|getGroupOpToInputTables
argument_list|()
operator|.
name|get
argument_list|(
name|curr
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblNames
operator|==
literal|null
operator|||
name|tblNames
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|boolean
name|bucketGroupBy
init|=
literal|true
decl_stmt|;
name|GroupByDesc
name|desc
init|=
name|curr
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|groupByKeys
init|=
operator|new
name|LinkedList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|groupByKeys
operator|.
name|addAll
argument_list|(
name|desc
operator|.
name|getKeys
argument_list|()
argument_list|)
expr_stmt|;
comment|// compute groupby columns from groupby keys
name|List
argument_list|<
name|String
argument_list|>
name|groupByCols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|groupByKeys
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExprNodeDesc
name|node
init|=
name|groupByKeys
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|groupByCols
operator|.
name|addAll
argument_list|(
name|node
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|node
operator|instanceof
name|ExprNodeConstantDesc
operator|)
operator|||
operator|(
name|node
operator|instanceof
name|ExprNodeNullDesc
operator|)
condition|)
block|{
comment|// nothing
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|ExprNodeFieldDesc
condition|)
block|{
name|groupByKeys
operator|.
name|add
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|ExprNodeFieldDesc
operator|)
name|node
operator|)
operator|.
name|getDesc
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
name|ExprNodeGenericFuncDesc
name|udfNode
init|=
operator|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|node
operator|)
decl_stmt|;
name|GenericUDF
name|udf
init|=
name|udfNode
operator|.
name|getGenericUDF
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|FunctionRegistry
operator|.
name|isDeterministic
argument_list|(
name|udf
argument_list|)
condition|)
block|{
return|return;
block|}
name|groupByKeys
operator|.
name|addAll
argument_list|(
literal|0
argument_list|,
name|udfNode
operator|.
name|getChildExprs
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
block|}
if|if
condition|(
name|groupByCols
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|String
name|table
range|:
name|tblNames
control|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|topOp
init|=
name|pGraphContext
operator|.
name|getTopOps
argument_list|()
operator|.
name|get
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|topOp
operator|==
literal|null
operator|||
operator|(
operator|!
operator|(
name|topOp
operator|instanceof
name|TableScanOperator
operator|)
operator|)
condition|)
block|{
comment|// this is in a sub-query.
comment|// In future, we need to infer subq's columns propery. For example
comment|// "select key, count(1)
comment|// from (from clustergroupbyselect key, value where ds='210') group by key, 3;",
comment|// even though the group by op is in a subquery, it can be changed to
comment|// bucket groupby.
return|return;
block|}
name|TableScanOperator
name|ts
init|=
operator|(
name|TableScanOperator
operator|)
name|topOp
decl_stmt|;
name|Table
name|destTable
init|=
name|pGraphContext
operator|.
name|getTopToTable
argument_list|()
operator|.
name|get
argument_list|(
name|ts
argument_list|)
decl_stmt|;
if|if
condition|(
name|destTable
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|destTable
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
init|=
name|destTable
operator|.
name|getBucketCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|sortCols
init|=
name|Utilities
operator|.
name|getColumnNamesFromSortCols
argument_list|(
name|destTable
operator|.
name|getSortCols
argument_list|()
argument_list|)
decl_stmt|;
name|bucketGroupBy
operator|=
name|matchBucketOrSortedColumns
argument_list|(
name|groupByCols
argument_list|,
name|bucketCols
argument_list|,
name|sortCols
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bucketGroupBy
condition|)
block|{
return|return;
block|}
block|}
else|else
block|{
name|PrunedPartitionList
name|partsList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|partsList
operator|=
name|PartitionPruner
operator|.
name|prune
argument_list|(
name|destTable
argument_list|,
name|pGraphContext
operator|.
name|getOpToPartPruner
argument_list|()
operator|.
name|get
argument_list|(
name|ts
argument_list|)
argument_list|,
name|pGraphContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|table
argument_list|,
name|pGraphContext
operator|.
name|getPrunedPartitions
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
comment|// Has to use full name to make sure it does not conflict with
comment|// org.apache.commons.lang.StringUtils
name|LOG
operator|.
name|error
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
decl_stmt|;
name|parts
operator|.
name|addAll
argument_list|(
name|partsList
operator|.
name|getConfirmedPartns
argument_list|()
argument_list|)
expr_stmt|;
name|parts
operator|.
name|addAll
argument_list|(
name|partsList
operator|.
name|getUnknownPartns
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
init|=
name|part
operator|.
name|getBucketCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|sortCols
init|=
name|Utilities
operator|.
name|getColumnNamesFromSortCols
argument_list|(
name|part
operator|.
name|getTPartition
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getSortCols
argument_list|()
argument_list|)
decl_stmt|;
name|bucketGroupBy
operator|=
name|matchBucketOrSortedColumns
argument_list|(
name|groupByCols
argument_list|,
name|bucketCols
argument_list|,
name|sortCols
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bucketGroupBy
condition|)
block|{
return|return;
block|}
block|}
block|}
block|}
name|curr
operator|.
name|getConf
argument_list|()
operator|.
name|setBucketGroup
argument_list|(
name|bucketGroupBy
argument_list|)
expr_stmt|;
block|}
comment|/**      * Given the group by keys, bucket columns, sort column, this method      * determines if we can use sorted group by or not.      *       * We use bucket columns only when the sorted column set is empty and if all      * group by columns are contained in bucket columns.      *       * If we can can not determine by looking at bucketed columns and the table      * has sort columns, we resort to sort columns. We can use bucket group by      * if the groupby column set is an exact prefix match of sort columns.      *       * @param groupByCols      * @param bucketCols      * @param sortCols      * @return      * @throws SemanticException      */
specifier|private
name|boolean
name|matchBucketOrSortedColumns
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|groupByCols
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|sortCols
parameter_list|)
throws|throws
name|SemanticException
block|{
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|sortCols
operator|==
literal|null
operator|||
name|sortCols
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|ret
operator|=
name|matchBucketColumns
argument_list|(
name|groupByCols
argument_list|,
name|bucketCols
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ret
operator|&&
name|sortCols
operator|!=
literal|null
operator|&&
name|sortCols
operator|.
name|size
argument_list|()
operator|>=
name|groupByCols
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// check sort columns, if groupByCols is a prefix subset of sort
comment|// columns, we will use sorted group by. For example, if data is sorted
comment|// by column a, b, c, and a query wants to group by b,a, we will use
comment|// sorted group by. But if the query wants to groupby b,c, then sorted
comment|// group by can not be used.
name|int
name|num
init|=
name|groupByCols
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|sortCols
operator|.
name|indexOf
argument_list|(
name|groupByCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|>
operator|(
name|num
operator|-
literal|1
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
name|ret
return|;
block|}
comment|/*      * All group by columns should be contained in the bucket column set. And      * the number of group by columns should be equal to number of bucket      * columns.      */
specifier|private
name|boolean
name|matchBucketColumns
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|grpCols
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tblBucketCols
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|tblBucketCols
operator|==
literal|null
operator|||
name|tblBucketCols
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
name|grpCols
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
name|grpCols
operator|.
name|size
argument_list|()
operator|!=
name|tblBucketCols
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|grpCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|tblCol
init|=
name|grpCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tblBucketCols
operator|.
name|contains
argument_list|(
name|tblCol
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
comment|/**    * GroupByOptProcCtx.    *    */
specifier|public
class|class
name|GroupByOptProcCtx
implements|implements
name|NodeProcessorCtx
block|{   }
block|}
end_class

end_unit

