begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|interpreter
operator|.
name|BindableConvention
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalTableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelProtoDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|TranslatableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|AbstractTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|Interval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_comment
comment|/**  * Table mapped onto a Druid table.  *  * TODO: to be removed when Calcite is upgraded to 1.9  */
end_comment

begin_class
specifier|public
class|class
name|DruidTable
extends|extends
name|AbstractTable
implements|implements
name|TranslatableTable
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TIMESTAMP_COLUMN
init|=
literal|"__time"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Interval
name|DEFAULT_INTERVAL
init|=
operator|new
name|Interval
argument_list|(
operator|new
name|DateTime
argument_list|(
literal|"1900-01-01"
argument_list|)
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"3000-01-01"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|DruidSchema
name|schema
decl_stmt|;
specifier|final
name|String
name|dataSource
decl_stmt|;
specifier|final
name|RelDataType
name|rowType
decl_stmt|;
specifier|final
name|RelProtoDataType
name|protoRowType
decl_stmt|;
specifier|final
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|metricFieldNames
decl_stmt|;
specifier|final
name|ImmutableList
argument_list|<
name|Interval
argument_list|>
name|intervals
decl_stmt|;
specifier|final
name|String
name|timestampFieldName
decl_stmt|;
comment|/**    * Creates a Druid table.    *    * @param schema Druid schema that contains this table    * @param dataSource Druid data source name    * @param protoRowType Field names and types    * @param metricFieldNames Names of fields that are metrics    * @param interval Default interval if query does not constrain the time    * @param timestampFieldName Name of the column that contains the time    */
specifier|public
name|DruidTable
parameter_list|(
name|DruidSchema
name|schema
parameter_list|,
name|String
name|dataSource
parameter_list|,
name|RelProtoDataType
name|protoRowType
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|metricFieldNames
parameter_list|,
name|List
argument_list|<
name|Interval
argument_list|>
name|intervals
parameter_list|,
name|String
name|timestampFieldName
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataSource
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
name|this
operator|.
name|rowType
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|protoRowType
operator|=
name|protoRowType
expr_stmt|;
name|this
operator|.
name|metricFieldNames
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|metricFieldNames
argument_list|)
expr_stmt|;
name|this
operator|.
name|intervals
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|intervals
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestampFieldName
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|timestampFieldName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DruidTable
parameter_list|(
name|DruidSchema
name|schema
parameter_list|,
name|String
name|dataSource
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|metricFieldNames
parameter_list|,
name|List
argument_list|<
name|Interval
argument_list|>
name|intervals
parameter_list|,
name|String
name|timestampFieldName
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataSource
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
name|this
operator|.
name|rowType
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|rowType
argument_list|)
expr_stmt|;
name|this
operator|.
name|protoRowType
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|metricFieldNames
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|metricFieldNames
argument_list|)
expr_stmt|;
name|this
operator|.
name|intervals
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|intervals
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestampFieldName
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|timestampFieldName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
specifier|final
name|RelDataType
name|thisRowType
decl_stmt|;
if|if
condition|(
name|rowType
operator|!=
literal|null
condition|)
block|{
name|thisRowType
operator|=
name|rowType
expr_stmt|;
block|}
else|else
block|{
comment|// Generate
name|thisRowType
operator|=
name|protoRowType
operator|.
name|apply
argument_list|(
name|typeFactory
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|thisRowType
operator|.
name|getFieldNames
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
name|timestampFieldName
argument_list|)
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|fieldNames
operator|.
name|containsAll
argument_list|(
name|metricFieldNames
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|thisRowType
return|;
block|}
specifier|public
name|RelNode
name|toRel
parameter_list|(
name|RelOptTable
operator|.
name|ToRelContext
name|context
parameter_list|,
name|RelOptTable
name|relOptTable
parameter_list|)
block|{
specifier|final
name|RelOptCluster
name|cluster
init|=
name|context
operator|.
name|getCluster
argument_list|()
decl_stmt|;
specifier|final
name|TableScan
name|scan
init|=
name|LogicalTableScan
operator|.
name|create
argument_list|(
name|cluster
argument_list|,
name|relOptTable
argument_list|)
decl_stmt|;
return|return
name|DruidQuery
operator|.
name|create
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|BindableConvention
operator|.
name|INSTANCE
argument_list|)
argument_list|,
name|relOptTable
argument_list|,
name|this
argument_list|,
name|ImmutableList
operator|.
expr|<
name|RelNode
operator|>
name|of
argument_list|(
name|scan
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// End DruidTable.java
end_comment

end_unit

