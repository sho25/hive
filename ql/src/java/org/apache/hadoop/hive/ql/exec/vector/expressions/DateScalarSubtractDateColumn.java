begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|NullUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|DateTimeMath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_comment
comment|// A type date (LongColumnVector storing epoch days) minus a type date produces a
end_comment

begin_comment
comment|// type interval_day_time (TimestampColumnVector storing nanosecond interval in 2 longs).
end_comment

begin_class
specifier|public
class|class
name|DateScalarSubtractDateColumn
extends|extends
name|VectorExpression
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|final
name|Timestamp
name|value
decl_stmt|;
specifier|private
specifier|final
name|int
name|colNum
decl_stmt|;
specifier|private
specifier|transient
specifier|final
name|Timestamp
name|scratchTimestamp2
init|=
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|transient
specifier|final
name|DateTimeMath
name|dtm
init|=
operator|new
name|DateTimeMath
argument_list|()
decl_stmt|;
specifier|public
name|DateScalarSubtractDateColumn
parameter_list|(
name|long
name|value
parameter_list|,
name|int
name|colNum
parameter_list|,
name|int
name|outputColumnNum
parameter_list|)
block|{
name|super
argument_list|(
name|outputColumnNum
argument_list|)
expr_stmt|;
name|this
operator|.
name|colNum
operator|=
name|colNum
expr_stmt|;
name|this
operator|.
name|value
operator|=
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|.
name|setTime
argument_list|(
name|DateWritable
operator|.
name|daysToMillis
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DateScalarSubtractDateColumn
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
comment|// Dummy final assignments.
name|value
operator|=
literal|null
expr_stmt|;
name|colNum
operator|=
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
comment|/**    * Method to evaluate scalar-column operation in vectorized fashion.    *    * @batch a package of rows with each column stored in a vector    */
specifier|public
name|void
name|evaluate
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
if|if
condition|(
name|childExpressions
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|evaluateChildren
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
comment|// Input #2 is type date (epochDays).
name|LongColumnVector
name|inputColVector2
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|colNum
index|]
decl_stmt|;
comment|// Output is type HiveIntervalDayTime.
name|IntervalDayTimeColumnVector
name|outputColVector
init|=
operator|(
name|IntervalDayTimeColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|outputColumnNum
index|]
decl_stmt|;
name|int
index|[]
name|sel
init|=
name|batch
operator|.
name|selected
decl_stmt|;
name|boolean
index|[]
name|inputIsNull
init|=
name|inputColVector2
operator|.
name|isNull
decl_stmt|;
name|boolean
index|[]
name|outputIsNull
init|=
name|outputColVector
operator|.
name|isNull
decl_stmt|;
name|outputColVector
operator|.
name|noNulls
operator|=
name|inputColVector2
operator|.
name|noNulls
expr_stmt|;
name|outputColVector
operator|.
name|isRepeating
operator|=
name|inputColVector2
operator|.
name|isRepeating
expr_stmt|;
name|int
name|n
init|=
name|batch
operator|.
name|size
decl_stmt|;
name|long
index|[]
name|vector2
init|=
name|inputColVector2
operator|.
name|vector
decl_stmt|;
comment|// return immediately if batch is empty
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|inputColVector2
operator|.
name|isRepeating
condition|)
block|{
name|scratchTimestamp2
operator|.
name|setTime
argument_list|(
name|DateWritable
operator|.
name|daysToMillis
argument_list|(
operator|(
name|int
operator|)
name|vector2
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|dtm
operator|.
name|subtract
argument_list|(
name|value
argument_list|,
name|scratchTimestamp2
argument_list|,
name|outputColVector
operator|.
name|getScratchIntervalDayTime
argument_list|()
argument_list|)
expr_stmt|;
name|outputColVector
operator|.
name|setFromScratchIntervalDayTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Even if there are no nulls, we always copy over entry 0. Simplifies code.
name|outputIsNull
index|[
literal|0
index|]
operator|=
name|inputIsNull
index|[
literal|0
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inputColVector2
operator|.
name|noNulls
condition|)
block|{
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
name|scratchTimestamp2
operator|.
name|setTime
argument_list|(
name|DateWritable
operator|.
name|daysToMillis
argument_list|(
operator|(
name|int
operator|)
name|vector2
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|dtm
operator|.
name|subtract
argument_list|(
name|value
argument_list|,
name|scratchTimestamp2
argument_list|,
name|outputColVector
operator|.
name|getScratchIntervalDayTime
argument_list|()
argument_list|)
expr_stmt|;
name|outputColVector
operator|.
name|setFromScratchIntervalDayTime
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
name|scratchTimestamp2
operator|.
name|setTime
argument_list|(
name|DateWritable
operator|.
name|daysToMillis
argument_list|(
operator|(
name|int
operator|)
name|vector2
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|dtm
operator|.
name|subtract
argument_list|(
name|value
argument_list|,
name|scratchTimestamp2
argument_list|,
name|outputColVector
operator|.
name|getScratchIntervalDayTime
argument_list|()
argument_list|)
expr_stmt|;
name|outputColVector
operator|.
name|setFromScratchIntervalDayTime
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|/* there are nulls */
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
name|scratchTimestamp2
operator|.
name|setTime
argument_list|(
name|DateWritable
operator|.
name|daysToMillis
argument_list|(
operator|(
name|int
operator|)
name|vector2
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|dtm
operator|.
name|subtract
argument_list|(
name|value
argument_list|,
name|scratchTimestamp2
argument_list|,
name|outputColVector
operator|.
name|getScratchIntervalDayTime
argument_list|()
argument_list|)
expr_stmt|;
name|outputColVector
operator|.
name|setFromScratchIntervalDayTime
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|outputIsNull
index|[
name|i
index|]
operator|=
name|inputIsNull
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
name|scratchTimestamp2
operator|.
name|setTime
argument_list|(
name|DateWritable
operator|.
name|daysToMillis
argument_list|(
operator|(
name|int
operator|)
name|vector2
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|dtm
operator|.
name|subtract
argument_list|(
name|value
argument_list|,
name|scratchTimestamp2
argument_list|,
name|outputColVector
operator|.
name|getScratchIntervalDayTime
argument_list|()
argument_list|)
expr_stmt|;
name|outputColVector
operator|.
name|setFromScratchIntervalDayTime
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|inputIsNull
argument_list|,
literal|0
argument_list|,
name|outputIsNull
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
name|NullUtil
operator|.
name|setNullOutputEntriesColScalar
argument_list|(
name|outputColVector
argument_list|,
name|batch
operator|.
name|selectedInUse
argument_list|,
name|sel
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|vectorExpressionParameters
parameter_list|()
block|{
return|return
literal|"val "
operator|+
name|value
operator|+
literal|", "
operator|+
name|getColumnParamString
argument_list|(
literal|1
argument_list|,
name|colNum
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|VectorExpressionDescriptor
operator|.
name|Descriptor
name|getDescriptor
parameter_list|()
block|{
return|return
operator|(
operator|new
name|VectorExpressionDescriptor
operator|.
name|Builder
argument_list|()
operator|)
operator|.
name|setMode
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
operator|.
name|setNumArguments
argument_list|(
literal|2
argument_list|)
operator|.
name|setArgumentTypes
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|ArgumentType
operator|.
name|getType
argument_list|(
literal|"date"
argument_list|)
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|ArgumentType
operator|.
name|getType
argument_list|(
literal|"date"
argument_list|)
argument_list|)
operator|.
name|setInputExpressionTypes
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|InputExpressionType
operator|.
name|SCALAR
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|InputExpressionType
operator|.
name|COLUMN
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

