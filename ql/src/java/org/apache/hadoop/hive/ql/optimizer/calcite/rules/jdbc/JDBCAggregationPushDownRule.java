begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|jdbc
operator|.
name|JdbcRules
operator|.
name|JdbcAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|InvalidRelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|functions
operator|.
name|HiveSqlCountAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|jdbc
operator|.
name|HiveJdbcConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * JDBCAggregationPushDownRule convert a {@link org.apache.hadoop.hive.ql.optimizer.calcite.reloperators.HiveAggregate}  * into a {@link JdbcAggregate}  * and pushes it down below the {@link org.apache.hadoop.hive.ql.optimizer.calcite.reloperators.jdbc.HiveJdbcConverter}  * operator so it will be sent to the external table.  */
end_comment

begin_class
specifier|public
class|class
name|JDBCAggregationPushDownRule
extends|extends
name|RelOptRule
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JDBCAggregationPushDownRule
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|JDBCAggregationPushDownRule
name|INSTANCE
init|=
operator|new
name|JDBCAggregationPushDownRule
argument_list|()
decl_stmt|;
specifier|public
name|JDBCAggregationPushDownRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|HiveAggregate
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|HiveJdbcConverter
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|HiveAggregate
name|agg
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|HiveJdbcConverter
name|converter
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|agg
operator|.
name|getGroupType
argument_list|()
operator|!=
name|Group
operator|.
name|SIMPLE
condition|)
block|{
comment|// TODO: Grouping sets not supported yet
return|return
literal|false
return|;
block|}
for|for
control|(
name|AggregateCall
name|relOptRuleOperand
range|:
name|agg
operator|.
name|getAggCallList
argument_list|()
control|)
block|{
name|SqlAggFunction
name|f
init|=
name|relOptRuleOperand
operator|.
name|getAggregation
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|instanceof
name|HiveSqlCountAggFunction
condition|)
block|{
comment|//count distinct with more that one argument is not supported
name|HiveSqlCountAggFunction
name|countAgg
init|=
operator|(
name|HiveSqlCountAggFunction
operator|)
name|f
decl_stmt|;
if|if
condition|(
name|countAgg
operator|.
name|isDistinct
argument_list|()
operator|&&
literal|1
operator|<
name|relOptRuleOperand
operator|.
name|getArgList
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|SqlKind
name|kind
init|=
name|f
operator|.
name|getKind
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|converter
operator|.
name|getJdbcDialect
argument_list|()
operator|.
name|supportsAggregateFunction
argument_list|(
name|kind
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"JDBCAggregationPushDownRule has been called"
argument_list|)
expr_stmt|;
specifier|final
name|HiveAggregate
name|aggregate
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|HiveJdbcConverter
name|converter
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|JdbcAggregate
name|jdbcAggregate
decl_stmt|;
try|try
block|{
name|jdbcAggregate
operator|=
operator|new
name|JdbcAggregate
argument_list|(
name|aggregate
operator|.
name|getCluster
argument_list|()
argument_list|,
name|aggregate
operator|.
name|getTraitSet
argument_list|()
operator|.
name|replace
argument_list|(
name|converter
operator|.
name|getJdbcConvention
argument_list|()
argument_list|)
argument_list|,
name|converter
operator|.
name|getInput
argument_list|()
argument_list|,
name|aggregate
operator|.
name|indicator
argument_list|,
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|,
name|aggregate
operator|.
name|getGroupSets
argument_list|()
argument_list|,
name|aggregate
operator|.
name|getAggCallList
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|call
operator|.
name|transformTo
argument_list|(
name|converter
operator|.
name|copy
argument_list|(
name|converter
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|jdbcAggregate
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

