begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|reexec
operator|.
name|IReExecutionPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|reexec
operator|.
name|ReExecDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|reexec
operator|.
name|ReExecutionOverlayPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|reexec
operator|.
name|ReOptimizePlugin
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_comment
comment|/**  * Constructs a driver for ql clients.  */
end_comment

begin_class
specifier|public
class|class
name|DriverFactory
block|{
specifier|public
specifier|static
name|IDriver
name|newDriver
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
return|return
name|newDriver
argument_list|(
name|getNewQueryState
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|IDriver
name|newDriver
parameter_list|(
name|QueryState
name|queryState
parameter_list|,
name|QueryInfo
name|queryInfo
parameter_list|)
block|{
name|boolean
name|enabled
init|=
name|queryState
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_QUERY_REEXECUTION_ENABLED
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
return|return
operator|new
name|Driver
argument_list|(
name|queryState
argument_list|,
name|queryInfo
argument_list|)
return|;
block|}
name|String
name|strategies
init|=
name|queryState
operator|.
name|getConf
argument_list|()
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_QUERY_REEXECUTION_STRATEGIES
argument_list|)
decl_stmt|;
name|strategies
operator|=
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|strategies
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|IReExecutionPlugin
argument_list|>
name|plugins
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|string
range|:
name|strategies
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
if|if
condition|(
name|string
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|plugins
operator|.
name|add
argument_list|(
name|buildReExecPlugin
argument_list|(
name|string
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ReExecDriver
argument_list|(
name|queryState
argument_list|,
name|queryInfo
argument_list|,
name|plugins
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|IReExecutionPlugin
name|buildReExecPlugin
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|RuntimeException
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"overlay"
argument_list|)
condition|)
block|{
return|return
operator|new
name|ReExecutionOverlayPlugin
argument_list|()
return|;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"reoptimize"
argument_list|)
condition|)
block|{
return|return
operator|new
name|ReOptimizePlugin
argument_list|()
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown re-execution plugin: "
operator|+
name|name
operator|+
literal|" ("
operator|+
name|ConfVars
operator|.
name|HIVE_QUERY_REEXECUTION_STRATEGIES
operator|.
name|varname
operator|+
literal|")"
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|QueryState
name|getNewQueryState
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
return|return
operator|new
name|QueryState
operator|.
name|Builder
argument_list|()
operator|.
name|withGenerateNewQueryId
argument_list|(
literal|true
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

