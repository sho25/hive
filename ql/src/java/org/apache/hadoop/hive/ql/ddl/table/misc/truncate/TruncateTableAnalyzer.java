begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|misc
operator|.
name|truncate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLSemanticAnalyzerFactory
operator|.
name|DDLType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|AbstractBaseAlterTableAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|AlterTableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|AlterTableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|partition
operator|.
name|PartitionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ArchiveUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveTableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|BasicStatsWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ListBucketingCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LoadTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MoveWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|StatsWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_comment
comment|/**  * Analyzer for truncate table commands.  */
end_comment

begin_class
annotation|@
name|DDLType
argument_list|(
name|types
operator|=
name|HiveParser
operator|.
name|TOK_TRUNCATETABLE
argument_list|)
specifier|public
class|class
name|TruncateTableAnalyzer
extends|extends
name|AbstractBaseAlterTableAnalyzer
block|{
specifier|public
name|TruncateTableAnalyzer
parameter_list|(
name|QueryState
name|queryState
parameter_list|)
throws|throws
name|SemanticException
block|{
name|super
argument_list|(
name|queryState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|analyzeInternal
parameter_list|(
name|ASTNode
name|root
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ASTNode
name|tableNode
init|=
operator|(
name|ASTNode
operator|)
name|root
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// TOK_TABLE_PARTITION
name|String
name|tableNameString
init|=
name|getUnescapedName
argument_list|(
operator|(
name|ASTNode
operator|)
name|tableNode
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|getTable
argument_list|(
name|tableNameString
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TableName
name|tableName
init|=
name|HiveTableName
operator|.
name|of
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|checkTruncateEligibility
argument_list|(
name|root
argument_list|,
name|tableNode
argument_list|,
name|tableNameString
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
init|=
name|getPartSpec
argument_list|(
operator|(
name|ASTNode
operator|)
name|tableNode
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|addTruncateTableOutputs
argument_list|(
name|tableNode
argument_list|,
name|table
argument_list|,
name|partitionSpec
argument_list|)
expr_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|truncateTask
init|=
literal|null
decl_stmt|;
name|ASTNode
name|colNamesNode
init|=
operator|(
name|ASTNode
operator|)
name|root
operator|.
name|getFirstChildWithType
argument_list|(
name|HiveParser
operator|.
name|TOK_TABCOLNAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|colNamesNode
operator|==
literal|null
condition|)
block|{
name|truncateTask
operator|=
name|getTruncateTaskWithoutColumnNames
argument_list|(
name|tableName
argument_list|,
name|partitionSpec
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|truncateTask
operator|=
name|getTruncateTaskWithColumnNames
argument_list|(
name|tableNode
argument_list|,
name|tableName
argument_list|,
name|table
argument_list|,
name|partitionSpec
argument_list|,
name|colNamesNode
argument_list|)
expr_stmt|;
block|}
name|rootTasks
operator|.
name|add
argument_list|(
name|truncateTask
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkTruncateEligibility
parameter_list|(
name|ASTNode
name|ast
parameter_list|,
name|ASTNode
name|root
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Table
name|table
parameter_list|)
throws|throws
name|SemanticException
block|{
name|boolean
name|isForce
init|=
name|ast
operator|.
name|getFirstChildWithType
argument_list|(
name|HiveParser
operator|.
name|TOK_FORCE
argument_list|)
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|isForce
operator|&&
name|table
operator|.
name|getTableType
argument_list|()
operator|!=
name|TableType
operator|.
name|MANAGED_TABLE
operator|&&
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|getOrDefault
argument_list|(
name|MetaStoreUtils
operator|.
name|EXTERNAL_TABLE_PURGE
argument_list|,
literal|"FALSE"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"FALSE"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|TRUNCATE_FOR_NON_MANAGED_TABLE
operator|.
name|format
argument_list|(
name|tableName
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|table
operator|.
name|isNonNative
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|TRUNCATE_FOR_NON_NATIVE_TABLE
operator|.
name|format
argument_list|(
name|tableName
argument_list|)
argument_list|)
throw|;
comment|//TODO
block|}
if|if
condition|(
operator|!
name|table
operator|.
name|isPartitioned
argument_list|()
operator|&&
name|root
operator|.
name|getChildCount
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|PARTSPEC_FOR_NON_PARTITIONED_TABLE
operator|.
name|format
argument_list|(
name|tableName
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|addTruncateTableOutputs
parameter_list|(
name|ASTNode
name|root
parameter_list|,
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|partitionSpec
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|table
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|outputs
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|table
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_EXCLUSIVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Partition
name|partition
range|:
name|PartitionUtils
operator|.
name|getPartitions
argument_list|(
name|db
argument_list|,
name|table
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
control|)
block|{
name|outputs
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|partition
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_EXCLUSIVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|AlterTableUtils
operator|.
name|isFullPartitionSpec
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|)
condition|)
block|{
name|validatePartSpec
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|,
operator|(
name|ASTNode
operator|)
name|root
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Partition
name|partition
init|=
name|PartitionUtils
operator|.
name|getPartition
argument_list|(
name|db
argument_list|,
name|table
argument_list|,
name|partitionSpec
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|outputs
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|partition
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_EXCLUSIVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|validatePartSpec
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|,
operator|(
name|ASTNode
operator|)
name|root
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|PartitionUtils
operator|.
name|getPartitions
argument_list|(
name|db
argument_list|,
name|table
argument_list|,
name|partitionSpec
argument_list|,
literal|false
argument_list|)
control|)
block|{
name|outputs
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|partition
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_EXCLUSIVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|Task
argument_list|<
name|?
argument_list|>
name|getTruncateTaskWithoutColumnNames
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|Table
name|table
parameter_list|)
block|{
name|TruncateTableDesc
name|desc
init|=
operator|new
name|TruncateTableDesc
argument_list|(
name|tableName
argument_list|,
name|partitionSpec
argument_list|,
literal|null
argument_list|,
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|.
name|mayNeedWriteId
argument_list|()
condition|)
block|{
name|setAcidDdlDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
name|DDLWork
name|ddlWork
init|=
operator|new
name|DDLWork
argument_list|(
name|getInputs
argument_list|()
argument_list|,
name|getOutputs
argument_list|()
argument_list|,
name|desc
argument_list|)
decl_stmt|;
return|return
name|TaskFactory
operator|.
name|get
argument_list|(
name|ddlWork
argument_list|)
return|;
block|}
specifier|private
name|Task
argument_list|<
name|?
argument_list|>
name|getTruncateTaskWithColumnNames
parameter_list|(
name|ASTNode
name|root
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|ASTNode
name|columnNamesNode
parameter_list|)
throws|throws
name|SemanticException
block|{
try|try
block|{
comment|// It would be possible to support this, but this is such a pointless command.
if|if
condition|(
name|AcidUtils
operator|.
name|isInsertOnlyTable
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Truncating MM table columns not presently supported"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
name|getColumnNames
argument_list|(
name|columnNamesNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
return|return
name|truncatePartitionedTableWithColumnNames
argument_list|(
name|root
argument_list|,
name|tableName
argument_list|,
name|table
argument_list|,
name|partitionSpec
argument_list|,
name|columnNames
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|truncateUnpartitionedTableWithColumnNames
argument_list|(
name|root
argument_list|,
name|tableName
argument_list|,
name|table
argument_list|,
name|partitionSpec
argument_list|,
name|columnNames
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|Task
argument_list|<
name|?
argument_list|>
name|truncatePartitionedTableWithColumnNames
parameter_list|(
name|ASTNode
name|root
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
parameter_list|)
throws|throws
name|HiveException
throws|,
name|SemanticException
block|{
name|Partition
name|partition
init|=
name|db
operator|.
name|getPartition
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Path
name|tablePath
init|=
name|table
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Path
name|partitionPath
init|=
name|partition
operator|.
name|getDataLocation
argument_list|()
decl_stmt|;
comment|// if the table is in a different dfs than the partition, replace the partition's dfs with the table's dfs.
name|Path
name|oldPartitionLocation
init|=
name|partitionPath
decl_stmt|;
name|Path
name|newPartitionLocation
init|=
operator|new
name|Path
argument_list|(
name|tablePath
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|,
name|tablePath
operator|.
name|toUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|partitionPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|columns
init|=
name|partition
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|bucketColumns
init|=
name|partition
operator|.
name|getBucketCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|listBucketColumns
init|=
name|partition
operator|.
name|getSkewedColNames
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
init|=
name|partition
operator|.
name|getInputFormatClass
argument_list|()
decl_stmt|;
name|boolean
name|isArchived
init|=
name|ArchiveUtils
operator|.
name|isArchived
argument_list|(
name|partition
argument_list|)
decl_stmt|;
name|ListBucketingCtx
name|lbCtx
init|=
name|constructListBucketingCtx
argument_list|(
name|partition
operator|.
name|getSkewedColNames
argument_list|()
argument_list|,
name|partition
operator|.
name|getSkewedColValues
argument_list|()
argument_list|,
name|partition
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
argument_list|,
name|partition
operator|.
name|isStoredAsSubDirectories
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isListBucketed
init|=
name|partition
operator|.
name|isStoredAsSubDirectories
argument_list|()
decl_stmt|;
return|return
name|createTasks
argument_list|(
name|root
argument_list|,
name|tableName
argument_list|,
name|table
argument_list|,
name|partitionSpec
argument_list|,
name|columnNames
argument_list|,
name|bucketColumns
argument_list|,
name|inputFormatClass
argument_list|,
name|isArchived
argument_list|,
name|newPartitionLocation
argument_list|,
name|oldPartitionLocation
argument_list|,
name|columns
argument_list|,
name|lbCtx
argument_list|,
name|isListBucketed
argument_list|,
name|listBucketColumns
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|Task
argument_list|<
name|?
argument_list|>
name|truncateUnpartitionedTableWithColumnNames
parameter_list|(
name|ASTNode
name|root
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// input and output are the same
name|Path
name|oldPartitionLocation
init|=
name|table
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Path
name|newPartitionLocation
init|=
name|table
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|columns
init|=
name|table
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|bucketColumns
init|=
name|table
operator|.
name|getBucketCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|listBucketColumns
init|=
name|table
operator|.
name|getSkewedColNames
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
init|=
name|table
operator|.
name|getInputFormatClass
argument_list|()
decl_stmt|;
name|ListBucketingCtx
name|lbCtx
init|=
name|constructListBucketingCtx
argument_list|(
name|table
operator|.
name|getSkewedColNames
argument_list|()
argument_list|,
name|table
operator|.
name|getSkewedColValues
argument_list|()
argument_list|,
name|table
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
argument_list|,
name|table
operator|.
name|isStoredAsSubDirectories
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isListBucketed
init|=
name|table
operator|.
name|isStoredAsSubDirectories
argument_list|()
decl_stmt|;
return|return
name|createTasks
argument_list|(
name|root
argument_list|,
name|tableName
argument_list|,
name|table
argument_list|,
name|partitionSpec
argument_list|,
name|columnNames
argument_list|,
name|bucketColumns
argument_list|,
name|inputFormatClass
argument_list|,
literal|false
argument_list|,
name|newPartitionLocation
argument_list|,
name|oldPartitionLocation
argument_list|,
name|columns
argument_list|,
name|lbCtx
argument_list|,
name|isListBucketed
argument_list|,
name|listBucketColumns
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|Task
argument_list|<
name|?
argument_list|>
name|createTasks
parameter_list|(
name|ASTNode
name|root
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|bucketColumns
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
parameter_list|,
name|boolean
name|isArchived
parameter_list|,
name|Path
name|newPartitionLocation
parameter_list|,
name|Path
name|oldPartitionLocation
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|columns
parameter_list|,
name|ListBucketingCtx
name|lbCtx
parameter_list|,
name|boolean
name|isListBucketed
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|listBucketColumns
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
operator|!
name|inputFormatClass
operator|.
name|equals
argument_list|(
name|RCFileInputFormat
operator|.
name|class
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|TRUNCATE_COLUMN_NOT_RC
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|isArchived
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|TRUNCATE_COLUMN_ARCHIVED
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|Integer
argument_list|>
name|columnIndexes
init|=
name|getColumnIndexes
argument_list|(
name|columnNames
argument_list|,
name|bucketColumns
argument_list|,
name|columns
argument_list|,
name|isListBucketed
argument_list|,
name|listBucketColumns
argument_list|)
decl_stmt|;
name|addInputsOutputsAlterTable
argument_list|(
name|tableName
argument_list|,
name|partitionSpec
argument_list|,
literal|null
argument_list|,
name|AlterTableType
operator|.
name|TRUNCATE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TableDesc
name|tableDesc
init|=
name|Utilities
operator|.
name|getTableDesc
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|Path
name|queryTmpdir
init|=
name|ctx
operator|.
name|getExternalTmpPath
argument_list|(
name|newPartitionLocation
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|truncateTask
init|=
name|createTruncateTask
argument_list|(
name|tableName
argument_list|,
name|table
argument_list|,
name|partitionSpec
argument_list|,
name|oldPartitionLocation
argument_list|,
name|lbCtx
argument_list|,
name|columnIndexes
argument_list|,
name|queryTmpdir
argument_list|)
decl_stmt|;
name|addMoveTask
argument_list|(
name|root
argument_list|,
name|table
argument_list|,
name|partitionSpec
argument_list|,
name|oldPartitionLocation
argument_list|,
name|newPartitionLocation
argument_list|,
name|lbCtx
argument_list|,
name|queryTmpdir
argument_list|,
name|truncateTask
argument_list|,
name|tableDesc
argument_list|)
expr_stmt|;
return|return
name|truncateTask
return|;
block|}
specifier|private
name|Set
argument_list|<
name|Integer
argument_list|>
name|getColumnIndexes
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|bucketColumns
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|columns
parameter_list|,
name|boolean
name|isListBucketed
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|listBucketColumns
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|columnIndexes
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|columnName
range|:
name|columnNames
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|columnIndex
init|=
literal|0
init|;
name|columnIndex
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
name|columnIndex
operator|++
control|)
block|{
if|if
condition|(
name|columnName
operator|.
name|equalsIgnoreCase
argument_list|(
name|columns
operator|.
name|get
argument_list|(
name|columnIndex
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|columnIndexes
operator|.
name|add
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_COLUMN
operator|.
name|getMsg
argument_list|(
name|columnName
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|bucketColumn
range|:
name|bucketColumns
control|)
block|{
if|if
condition|(
name|bucketColumn
operator|.
name|equalsIgnoreCase
argument_list|(
name|columnName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|TRUNCATE_BUCKETED_COLUMN
operator|.
name|getMsg
argument_list|(
name|columnName
argument_list|)
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|isListBucketed
condition|)
block|{
for|for
control|(
name|String
name|listBucketColumn
range|:
name|listBucketColumns
control|)
block|{
if|if
condition|(
name|listBucketColumn
operator|.
name|equalsIgnoreCase
argument_list|(
name|columnName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|TRUNCATE_LIST_BUCKETED_COLUMN
operator|.
name|getMsg
argument_list|(
name|columnName
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
block|}
return|return
name|columnIndexes
return|;
block|}
specifier|private
name|Task
argument_list|<
name|?
argument_list|>
name|createTruncateTask
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|Path
name|oldPartitionLocation
parameter_list|,
name|ListBucketingCtx
name|lbCtx
parameter_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
name|columnIndexes
parameter_list|,
name|Path
name|queryTmpdir
parameter_list|)
block|{
name|TruncateTableDesc
name|desc
init|=
operator|new
name|TruncateTableDesc
argument_list|(
name|tableName
argument_list|,
name|partitionSpec
argument_list|,
literal|null
argument_list|,
name|table
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|columnIndexes
argument_list|)
argument_list|,
name|oldPartitionLocation
argument_list|,
name|queryTmpdir
argument_list|,
name|lbCtx
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|.
name|mayNeedWriteId
argument_list|()
condition|)
block|{
name|setAcidDdlDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
name|DDLWork
name|ddlWork
init|=
operator|new
name|DDLWork
argument_list|(
name|getInputs
argument_list|()
argument_list|,
name|getOutputs
argument_list|()
argument_list|,
name|desc
argument_list|)
decl_stmt|;
name|ddlWork
operator|.
name|setNeedLock
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|TaskFactory
operator|.
name|get
argument_list|(
name|ddlWork
argument_list|)
return|;
block|}
specifier|private
name|void
name|addMoveTask
parameter_list|(
name|ASTNode
name|root
parameter_list|,
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|Path
name|oldPartitionLocation
parameter_list|,
name|Path
name|newPartitionLocation
parameter_list|,
name|ListBucketingCtx
name|lbCtx
parameter_list|,
name|Path
name|queryTmpdir
parameter_list|,
name|Task
argument_list|<
name|?
argument_list|>
name|truncateTask
parameter_list|,
name|TableDesc
name|tableDesc
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// Write the output to temporary directory and move it to the final location at the end
comment|// so the operation is atomic.
name|LoadTableDesc
name|loadTableDesc
init|=
operator|new
name|LoadTableDesc
argument_list|(
name|queryTmpdir
argument_list|,
name|tableDesc
argument_list|,
name|partitionSpec
operator|==
literal|null
condition|?
operator|new
name|HashMap
argument_list|<>
argument_list|()
else|:
name|partitionSpec
argument_list|)
decl_stmt|;
name|loadTableDesc
operator|.
name|setLbCtx
argument_list|(
name|lbCtx
argument_list|)
expr_stmt|;
name|Task
argument_list|<
name|MoveWork
argument_list|>
name|moveTask
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|MoveWork
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|loadTableDesc
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|truncateTask
operator|.
name|addDependentTask
argument_list|(
name|moveTask
argument_list|)
expr_stmt|;
name|addStatTask
argument_list|(
name|root
argument_list|,
name|table
argument_list|,
name|oldPartitionLocation
argument_list|,
name|newPartitionLocation
argument_list|,
name|loadTableDesc
argument_list|,
name|moveTask
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addStatTask
parameter_list|(
name|ASTNode
name|root
parameter_list|,
name|Table
name|table
parameter_list|,
name|Path
name|oldPartitionLocation
parameter_list|,
name|Path
name|newPartitionLocation
parameter_list|,
name|LoadTableDesc
name|loadTableDesc
parameter_list|,
name|Task
argument_list|<
name|MoveWork
argument_list|>
name|moveTask
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// Recalculate the HDFS stats if auto gather stats is set
if|if
condition|(
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSAUTOGATHER
argument_list|)
condition|)
block|{
name|BasicStatsWork
name|basicStatsWork
decl_stmt|;
if|if
condition|(
name|oldPartitionLocation
operator|.
name|equals
argument_list|(
name|newPartitionLocation
argument_list|)
condition|)
block|{
comment|// If we're merging to the same location, we can avoid some metastore calls
name|TableSpec
name|partitionSpec
init|=
operator|new
name|TableSpec
argument_list|(
name|db
argument_list|,
name|conf
argument_list|,
name|root
argument_list|)
decl_stmt|;
name|basicStatsWork
operator|=
operator|new
name|BasicStatsWork
argument_list|(
name|partitionSpec
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|basicStatsWork
operator|=
operator|new
name|BasicStatsWork
argument_list|(
name|loadTableDesc
argument_list|)
expr_stmt|;
block|}
name|basicStatsWork
operator|.
name|setNoStatsAggregator
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|basicStatsWork
operator|.
name|setClearAggregatorStats
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|StatsWork
name|columnStatsWork
init|=
operator|new
name|StatsWork
argument_list|(
name|table
argument_list|,
name|basicStatsWork
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|statTask
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
name|columnStatsWork
argument_list|)
decl_stmt|;
name|moveTask
operator|.
name|addDependentTask
argument_list|(
name|statTask
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

