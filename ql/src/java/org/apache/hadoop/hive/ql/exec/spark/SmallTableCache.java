begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Ticker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinTableContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|math
operator|.
name|NumberUtils
operator|.
name|INTEGER_ONE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|math
operator|.
name|NumberUtils
operator|.
name|INTEGER_ZERO
import|;
end_import

begin_class
specifier|public
class|class
name|SmallTableCache
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SmallTableCache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SmallTableLocalCache
argument_list|<
name|String
argument_list|,
name|MapJoinTableContainer
argument_list|>
name|TABLE_CONTAINER_CACHE
init|=
operator|new
name|SmallTableLocalCache
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|String
name|queryId
decl_stmt|;
comment|/**    * Check if this is a new query. If so, clean up the cache    * that is for the previous query, and reset the current query id.    */
specifier|public
specifier|static
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|currentQueryId
init|=
name|conf
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
operator|.
name|varname
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|currentQueryId
operator|.
name|equals
argument_list|(
name|queryId
argument_list|)
condition|)
block|{
if|if
condition|(
name|TABLE_CONTAINER_CACHE
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
synchronized|synchronized
init|(
name|TABLE_CONTAINER_CACHE
init|)
block|{
if|if
condition|(
operator|!
name|currentQueryId
operator|.
name|equals
argument_list|(
name|queryId
argument_list|)
operator|&&
name|TABLE_CONTAINER_CACHE
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|TABLE_CONTAINER_CACHE
operator|.
name|clear
argument_list|(
parameter_list|(
name|path
parameter_list|,
name|tableContainer
parameter_list|)
lambda|->
name|tableContainer
operator|.
name|clear
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cleaned up small table cache for query {}"
argument_list|,
name|queryId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|queryId
operator|=
name|currentQueryId
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|cache
parameter_list|(
name|String
name|key
parameter_list|,
name|MapJoinTableContainer
name|tableContainer
parameter_list|)
block|{
name|TABLE_CONTAINER_CACHE
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|tableContainer
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|MapJoinTableContainer
name|get
parameter_list|(
name|String
name|key
parameter_list|,
name|Callable
argument_list|<
name|MapJoinTableContainer
argument_list|>
name|valueLoader
parameter_list|)
throws|throws
name|ExecutionException
block|{
return|return
name|TABLE_CONTAINER_CACHE
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|valueLoader
argument_list|)
return|;
block|}
comment|/**    * Two level cache implementation. The level 1 cache keeps the cached values until 30 seconds,    * the level 2 cache keeps the values (by using soft references) until the GC decides, that it    * needs the memory occupied by the cache.    *    * @param<K> the type of the key    * @param<V> the type of the value    */
annotation|@
name|VisibleForTesting
specifier|static
class|class
name|SmallTableLocalCache
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MAINTENANCE_THREAD_CLEANUP_PERIOD
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|L1_CACHE_EXPIRE_DURATION
init|=
literal|30
decl_stmt|;
specifier|private
specifier|final
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|cacheL1
decl_stmt|;
specifier|private
specifier|final
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|cacheL2
decl_stmt|;
specifier|private
specifier|final
name|ScheduledExecutorService
name|cleanupService
decl_stmt|;
name|SmallTableLocalCache
parameter_list|()
block|{
name|this
argument_list|(
name|Ticker
operator|.
name|systemTicker
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|SmallTableLocalCache
parameter_list|(
name|Ticker
name|ticker
parameter_list|)
block|{
name|cleanupService
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
name|INTEGER_ONE
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"SmallTableCache Cleanup Thread"
argument_list|)
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|cacheL1
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
name|L1_CACHE_EXPIRE_DURATION
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|ticker
argument_list|(
name|ticker
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cacheL2
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|softValues
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|cleanupService
operator|.
name|scheduleAtFixedRate
argument_list|(
parameter_list|()
lambda|->
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
argument_list|,
name|INTEGER_ZERO
argument_list|,
name|MAINTENANCE_THREAD_CLEANUP_PERIOD
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**      * Return the number of cached elements.      */
comment|// L2>= L1, because if a cached item is in L1 then its in L2 as well.
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|cacheL2
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Invalidate the cache, and call the action on the elements, if additional cleanup is required.      */
specifier|public
name|void
name|clear
parameter_list|(
name|BiConsumer
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|action
parameter_list|)
block|{
name|cacheL1
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
name|cacheL2
operator|.
name|asMap
argument_list|()
operator|.
name|forEach
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|cacheL2
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|void
name|cleanup
parameter_list|()
block|{
name|cacheL1
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
block|}
comment|/**      * Put an item into the cache. If the item was already there, it will be overwritten.      */
specifier|public
name|void
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|cacheL2
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|cacheL1
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Retrieves an item from the cache, and if its not there, it will use the valueLoader to load it and cache it.      */
specifier|public
name|V
name|get
parameter_list|(
name|K
name|key
parameter_list|,
name|Callable
argument_list|<
name|V
argument_list|>
name|valueLoader
parameter_list|)
throws|throws
name|ExecutionException
block|{
return|return
name|cacheL1
operator|.
name|get
argument_list|(
name|key
argument_list|,
parameter_list|()
lambda|->
name|cacheL2
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|valueLoader
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

