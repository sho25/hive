begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|QB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|OpParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticAnalyzerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|RowResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|exprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|exprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|selectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * Implementation of one of the rule-based optimization steps. ColumnPruner gets the current operator tree. The tree is traversed to find out the columns used   * for all the base tables. If all the columns for a table are not used, a select is pushed on top of that table (to select only those columns). Since this   * changes the row resolver, the tree is built again. This can be optimized later to patch the tree.   */
end_comment

begin_class
specifier|public
class|class
name|ColumnPruner
implements|implements
name|Transform
block|{
specifier|private
name|ParseContext
name|pctx
decl_stmt|;
comment|/**    * empty constructor    */
specifier|public
name|ColumnPruner
parameter_list|()
block|{
name|pctx
operator|=
literal|null
expr_stmt|;
block|}
comment|/** 	 * Whether some column pruning needs to be done 	 * @param op Operator for the base table 	 * @param colNames columns needed by the query 	 * @return boolean 	 */
specifier|private
name|boolean
name|pushSelect
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|op
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
block|{
if|if
condition|(
name|pctx
operator|.
name|getOpParseCtx
argument_list|()
operator|.
name|get
argument_list|(
name|op
argument_list|)
operator|.
name|getRR
argument_list|()
operator|.
name|getColumnInfos
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|colNames
operator|.
name|size
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
comment|/**    * update the map between operator and row resolver    * @param op operator being inserted    * @param rr row resolver of the operator    * @return    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|private
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|putOpInsertMap
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|op
parameter_list|,
name|RowResolver
name|rr
parameter_list|)
block|{
name|OpParseContext
name|ctx
init|=
operator|new
name|OpParseContext
argument_list|(
name|rr
argument_list|)
decl_stmt|;
name|pctx
operator|.
name|getOpParseCtx
argument_list|()
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
return|return
name|op
return|;
block|}
comment|/**    * insert a select to include only columns needed by the query    * @param input operator for the base table    * @param colNames columns needed    * @return    * @throws SemanticException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|private
name|Operator
name|genSelectPlan
parameter_list|(
name|Operator
name|input
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|SemanticException
block|{
name|RowResolver
name|inputRR
init|=
name|pctx
operator|.
name|getOpParseCtx
argument_list|()
operator|.
name|get
argument_list|(
name|input
argument_list|)
operator|.
name|getRR
argument_list|()
decl_stmt|;
name|RowResolver
name|outputRR
init|=
operator|new
name|RowResolver
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
name|col_list
init|=
operator|new
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
comment|// Iterate over the selects
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|colNames
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|String
name|internalName
init|=
name|colNames
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|String
index|[]
name|colName
init|=
name|inputRR
operator|.
name|reverseLookup
argument_list|(
name|internalName
argument_list|)
decl_stmt|;
name|ColumnInfo
name|in
init|=
name|inputRR
operator|.
name|get
argument_list|(
name|colName
index|[
literal|0
index|]
argument_list|,
name|colName
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|outputRR
operator|.
name|put
argument_list|(
name|colName
index|[
literal|0
index|]
argument_list|,
name|colName
index|[
literal|1
index|]
argument_list|,
operator|new
name|ColumnInfo
argument_list|(
operator|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|pos
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
argument_list|,
name|in
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|col_list
operator|.
name|add
argument_list|(
operator|new
name|exprNodeColumnDesc
argument_list|(
name|in
operator|.
name|getType
argument_list|()
argument_list|,
name|internalName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Operator
name|output
init|=
name|putOpInsertMap
argument_list|(
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
operator|new
name|selectDesc
argument_list|(
name|col_list
argument_list|)
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|outputRR
operator|.
name|getColumnInfos
argument_list|()
argument_list|)
argument_list|,
name|input
argument_list|)
argument_list|,
name|outputRR
argument_list|)
decl_stmt|;
return|return
name|output
return|;
block|}
comment|/**    * reset parse context    * @param pctx parse context    */
specifier|private
name|void
name|resetParseContext
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
block|{
name|pctx
operator|.
name|getAliasToPruner
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pctx
operator|.
name|getAliasToSamplePruner
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pctx
operator|.
name|getLoadTableWork
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pctx
operator|.
name|getLoadFileWork
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|iter
init|=
name|pctx
operator|.
name|getOpParseCtx
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|op
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|pctx
operator|.
name|getTopOps
argument_list|()
operator|.
name|containsValue
argument_list|(
name|op
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|pctx
operator|.
name|getTopSelOps
argument_list|()
operator|.
name|containsValue
argument_list|(
name|op
argument_list|)
operator|)
condition|)
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Transform the query tree. For each table under consideration, check if all columns are needed. If not, only select the operators needed at    * the beginning and proceed     */
specifier|public
name|ParseContext
name|transform
parameter_list|(
name|ParseContext
name|pactx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|this
operator|.
name|pctx
operator|=
name|pactx
expr_stmt|;
name|boolean
name|done
init|=
literal|true
decl_stmt|;
comment|// generate useful columns for all the sources so that they can be pushed immediately after the table scan
for|for
control|(
name|String
name|alias_id
range|:
name|pctx
operator|.
name|getTopOps
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|topOp
init|=
name|pctx
operator|.
name|getTopOps
argument_list|()
operator|.
name|get
argument_list|(
name|alias_id
argument_list|)
decl_stmt|;
comment|// Scan the tree bottom-up and generate columns needed for the top operator
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
name|topOp
operator|.
name|genColLists
argument_list|(
name|pctx
operator|.
name|getOpParseCtx
argument_list|()
argument_list|)
decl_stmt|;
comment|// do we need to push a SELECT - all the columns of the table are not used
if|if
condition|(
name|pushSelect
argument_list|(
name|topOp
argument_list|,
name|colNames
argument_list|)
condition|)
block|{
name|topOp
operator|.
name|setChildOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// Generate a select and make it a child of the table scan
name|Operator
name|select
init|=
name|genSelectPlan
argument_list|(
name|topOp
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
name|pctx
operator|.
name|getTopSelOps
argument_list|()
operator|.
name|put
argument_list|(
name|alias_id
argument_list|,
name|select
argument_list|)
expr_stmt|;
name|done
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|// a select was pushed on top of the table. The old plan is no longer valid. Generate the plan again.
comment|// The current tables and the select pushed above (after column pruning) are maintained in the parse context.
if|if
condition|(
operator|!
name|done
condition|)
block|{
name|SemanticAnalyzer
name|sem
init|=
operator|(
name|SemanticAnalyzer
operator|)
name|SemanticAnalyzerFactory
operator|.
name|get
argument_list|(
name|pctx
operator|.
name|getConf
argument_list|()
argument_list|,
name|pctx
operator|.
name|getParseTree
argument_list|()
argument_list|)
decl_stmt|;
name|resetParseContext
argument_list|(
name|pctx
argument_list|)
expr_stmt|;
name|sem
operator|.
name|init
argument_list|(
name|pctx
argument_list|)
expr_stmt|;
name|QB
name|qb
init|=
operator|new
name|QB
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|sem
operator|.
name|doPhase1
argument_list|(
name|pctx
operator|.
name|getParseTree
argument_list|()
argument_list|,
name|qb
argument_list|,
name|sem
operator|.
name|initPhase1Ctx
argument_list|()
argument_list|)
expr_stmt|;
name|sem
operator|.
name|getMetaData
argument_list|(
name|qb
argument_list|)
expr_stmt|;
name|sem
operator|.
name|genPlan
argument_list|(
name|qb
argument_list|)
expr_stmt|;
name|pctx
operator|=
name|sem
operator|.
name|getParseContext
argument_list|()
expr_stmt|;
block|}
return|return
name|pctx
return|;
block|}
block|}
end_class

end_unit

