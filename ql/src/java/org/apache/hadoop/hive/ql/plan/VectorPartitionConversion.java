begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_comment
comment|/**  * PartitionConversion.  *  */
end_comment

begin_class
specifier|public
class|class
name|VectorPartitionConversion
block|{
comment|// Currently, we only support these no-precision-loss or promotion data type conversions:
comment|//
comment|//  TinyInt --> SmallInt
comment|//  TinyInt --> Int
comment|//  TinyInt --> BigInt
comment|//
comment|//  SmallInt -> Int
comment|//  SmallInt -> BigInt
comment|//
comment|//  Int --> BigInt
comment|//
comment|//  Float -> Double
comment|//
comment|//  Since we stare Char without padding, it can become a String implicitly.
comment|//  (Char | VarChar) -> String
comment|//
specifier|private
specifier|static
name|HashMap
argument_list|<
name|PrimitiveCategory
argument_list|,
name|PrimitiveCategory
index|[]
argument_list|>
name|implicitPrimitiveMap
init|=
operator|new
name|HashMap
argument_list|<
name|PrimitiveCategory
argument_list|,
name|PrimitiveCategory
index|[]
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|implicitPrimitiveMap
operator|.
name|put
argument_list|(
name|PrimitiveCategory
operator|.
name|BOOLEAN
argument_list|,
operator|new
name|PrimitiveCategory
index|[]
block|{
name|PrimitiveCategory
operator|.
name|BYTE
block|,
name|PrimitiveCategory
operator|.
name|SHORT
block|,
name|PrimitiveCategory
operator|.
name|INT
block|,
name|PrimitiveCategory
operator|.
name|LONG
block|}
argument_list|)
expr_stmt|;
name|implicitPrimitiveMap
operator|.
name|put
argument_list|(
name|PrimitiveCategory
operator|.
name|BYTE
argument_list|,
operator|new
name|PrimitiveCategory
index|[]
block|{
name|PrimitiveCategory
operator|.
name|SHORT
block|,
name|PrimitiveCategory
operator|.
name|INT
block|,
name|PrimitiveCategory
operator|.
name|LONG
block|}
argument_list|)
expr_stmt|;
name|implicitPrimitiveMap
operator|.
name|put
argument_list|(
name|PrimitiveCategory
operator|.
name|SHORT
argument_list|,
operator|new
name|PrimitiveCategory
index|[]
block|{
name|PrimitiveCategory
operator|.
name|INT
block|,
name|PrimitiveCategory
operator|.
name|LONG
block|}
argument_list|)
expr_stmt|;
name|implicitPrimitiveMap
operator|.
name|put
argument_list|(
name|PrimitiveCategory
operator|.
name|INT
argument_list|,
operator|new
name|PrimitiveCategory
index|[]
block|{
name|PrimitiveCategory
operator|.
name|LONG
block|}
argument_list|)
expr_stmt|;
name|implicitPrimitiveMap
operator|.
name|put
argument_list|(
name|PrimitiveCategory
operator|.
name|FLOAT
argument_list|,
operator|new
name|PrimitiveCategory
index|[]
block|{
name|PrimitiveCategory
operator|.
name|DOUBLE
block|}
argument_list|)
expr_stmt|;
name|implicitPrimitiveMap
operator|.
name|put
argument_list|(
name|PrimitiveCategory
operator|.
name|CHAR
argument_list|,
operator|new
name|PrimitiveCategory
index|[]
block|{
name|PrimitiveCategory
operator|.
name|STRING
block|}
argument_list|)
expr_stmt|;
name|implicitPrimitiveMap
operator|.
name|put
argument_list|(
name|PrimitiveCategory
operator|.
name|VARCHAR
argument_list|,
operator|new
name|PrimitiveCategory
index|[]
block|{
name|PrimitiveCategory
operator|.
name|STRING
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|isImplicitVectorColumnConversion
parameter_list|(
name|TypeInfo
name|fromTypeInfo
parameter_list|,
name|TypeInfo
name|toTypeInfo
parameter_list|)
block|{
if|if
condition|(
name|fromTypeInfo
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|PRIMITIVE
operator|&&
name|toTypeInfo
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
name|PrimitiveCategory
name|fromPrimitiveCategory
init|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|fromTypeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
name|PrimitiveCategory
name|toPrimitiveCategory
init|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|toTypeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
name|PrimitiveCategory
index|[]
name|toPrimitiveCategories
init|=
name|implicitPrimitiveMap
operator|.
name|get
argument_list|(
name|fromPrimitiveCategory
argument_list|)
decl_stmt|;
if|if
condition|(
name|toPrimitiveCategories
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PrimitiveCategory
name|candidatePrimitiveCategory
range|:
name|toPrimitiveCategories
control|)
block|{
if|if
condition|(
name|candidatePrimitiveCategory
operator|==
name|toPrimitiveCategory
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

