begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_comment
comment|/**  * PartitionConversion.  *  */
end_comment

begin_class
specifier|public
class|class
name|VectorPartitionConversion
block|{
specifier|private
specifier|static
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|boolean
name|validConversion
decl_stmt|;
specifier|private
name|boolean
index|[]
name|resultConversionFlags
decl_stmt|;
specifier|private
name|TypeInfo
name|invalidFromTypeInfo
decl_stmt|;
specifier|private
name|TypeInfo
name|invalidToTypeInfo
decl_stmt|;
specifier|public
name|boolean
name|getValidConversion
parameter_list|()
block|{
return|return
name|validConversion
return|;
block|}
specifier|public
name|boolean
index|[]
name|getResultConversionFlags
parameter_list|()
block|{
return|return
name|resultConversionFlags
return|;
block|}
specifier|public
name|TypeInfo
name|getInvalidFromTypeInfo
parameter_list|()
block|{
return|return
name|invalidFromTypeInfo
return|;
block|}
specifier|public
name|TypeInfo
name|getInvalidToTypeInfo
parameter_list|()
block|{
return|return
name|invalidToTypeInfo
return|;
block|}
comment|// Currently, we only support these no-precision-loss or promotion data type conversions:
comment|//  //
comment|//  Short -> Int                  IMPLICIT WITH VECTORIZATION
comment|//  Short -> BigInt               IMPLICIT WITH VECTORIZATION
comment|//  Int --> BigInt                IMPLICIT WITH VECTORIZATION
comment|//
comment|// CONSIDER ADDING:
comment|//  Float -> Double               IMPLICIT WITH VECTORIZATION
comment|//  (Char | VarChar) -> String    IMPLICIT WITH VECTORIZATION
comment|//
specifier|private
specifier|static
name|HashMap
argument_list|<
name|PrimitiveCategory
argument_list|,
name|PrimitiveCategory
index|[]
argument_list|>
name|validFromPrimitiveMap
init|=
operator|new
name|HashMap
argument_list|<
name|PrimitiveCategory
argument_list|,
name|PrimitiveCategory
index|[]
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|validFromPrimitiveMap
operator|.
name|put
argument_list|(
name|PrimitiveCategory
operator|.
name|SHORT
argument_list|,
operator|new
name|PrimitiveCategory
index|[]
block|{
name|PrimitiveCategory
operator|.
name|INT
block|,
name|PrimitiveCategory
operator|.
name|LONG
block|}
argument_list|)
expr_stmt|;
name|validFromPrimitiveMap
operator|.
name|put
argument_list|(
name|PrimitiveCategory
operator|.
name|INT
argument_list|,
operator|new
name|PrimitiveCategory
index|[]
block|{
name|PrimitiveCategory
operator|.
name|LONG
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|validateOne
parameter_list|(
name|TypeInfo
name|fromTypeInfo
parameter_list|,
name|TypeInfo
name|toTypeInfo
parameter_list|)
block|{
if|if
condition|(
name|fromTypeInfo
operator|.
name|equals
argument_list|(
name|toTypeInfo
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|fromTypeInfo
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|PRIMITIVE
operator|&&
name|toTypeInfo
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
name|PrimitiveCategory
name|fromPrimitiveCategory
init|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|fromTypeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
name|PrimitiveCategory
name|toPrimitiveCategory
init|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|toTypeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
name|PrimitiveCategory
index|[]
name|toPrimitiveCategories
init|=
name|validFromPrimitiveMap
operator|.
name|get
argument_list|(
name|fromPrimitiveCategory
argument_list|)
decl_stmt|;
if|if
condition|(
name|toPrimitiveCategories
operator|==
literal|null
operator|||
operator|!
name|ArrayUtils
operator|.
name|contains
argument_list|(
name|toPrimitiveCategories
argument_list|,
name|toPrimitiveCategory
argument_list|)
condition|)
block|{
name|invalidFromTypeInfo
operator|=
name|fromTypeInfo
expr_stmt|;
name|invalidToTypeInfo
operator|=
name|toTypeInfo
expr_stmt|;
comment|// Tell caller a bad one was found.
name|validConversion
operator|=
literal|false
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|// Ignore checking complex types.  Assume they will not be included in the query.
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|validateConversion
parameter_list|(
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fromTypeInfoList
parameter_list|,
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|toTypeInfoList
parameter_list|)
block|{
specifier|final
name|int
name|columnCount
init|=
name|fromTypeInfoList
operator|.
name|size
argument_list|()
decl_stmt|;
name|resultConversionFlags
operator|=
operator|new
name|boolean
index|[
name|columnCount
index|]
expr_stmt|;
comment|// The method validateOne will turn this off when invalid conversion is found.
name|validConversion
operator|=
literal|true
expr_stmt|;
name|boolean
name|atLeastOneConversion
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnCount
condition|;
name|i
operator|++
control|)
block|{
name|TypeInfo
name|fromTypeInfo
init|=
name|fromTypeInfoList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|TypeInfo
name|toTypeInfo
init|=
name|toTypeInfoList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|resultConversionFlags
index|[
name|i
index|]
operator|=
name|validateOne
argument_list|(
name|fromTypeInfo
argument_list|,
name|toTypeInfo
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validConversion
condition|)
block|{
return|return;
block|}
block|}
if|if
condition|(
name|atLeastOneConversion
condition|)
block|{
comment|// Leave resultConversionFlags set.
block|}
else|else
block|{
name|resultConversionFlags
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|validateConversion
parameter_list|(
name|TypeInfo
index|[]
name|fromTypeInfos
parameter_list|,
name|TypeInfo
index|[]
name|toTypeInfos
parameter_list|)
block|{
specifier|final
name|int
name|columnCount
init|=
name|fromTypeInfos
operator|.
name|length
decl_stmt|;
name|resultConversionFlags
operator|=
operator|new
name|boolean
index|[
name|columnCount
index|]
expr_stmt|;
comment|// The method validateOne will turn this off when invalid conversion is found.
name|validConversion
operator|=
literal|true
expr_stmt|;
name|boolean
name|atLeastOneConversion
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnCount
condition|;
name|i
operator|++
control|)
block|{
name|TypeInfo
name|fromTypeInfo
init|=
name|fromTypeInfos
index|[
name|i
index|]
decl_stmt|;
name|TypeInfo
name|toTypeInfo
init|=
name|toTypeInfos
index|[
name|i
index|]
decl_stmt|;
name|resultConversionFlags
index|[
name|i
index|]
operator|=
name|validateOne
argument_list|(
name|fromTypeInfo
argument_list|,
name|toTypeInfo
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validConversion
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|resultConversionFlags
index|[
name|i
index|]
condition|)
block|{
name|atLeastOneConversion
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|atLeastOneConversion
condition|)
block|{
comment|// Leave resultConversionFlags set.
block|}
else|else
block|{
name|resultConversionFlags
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

