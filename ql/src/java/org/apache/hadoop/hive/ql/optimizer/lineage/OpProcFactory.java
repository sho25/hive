begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|lineage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FilterOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ForwardOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|LateralViewJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|LimitOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ScriptOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|LineageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|LineageInfo
operator|.
name|BaseColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|LineageInfo
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|LineageInfo
operator|.
name|DependencyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|LineageInfo
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|LineageInfo
operator|.
name|TableAliasInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|VirtualColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AggregationDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FilterDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinCondDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceSinkDesc
import|;
end_import

begin_comment
comment|/**  * Operator factory for the rule processors for lineage.  */
end_comment

begin_class
specifier|public
class|class
name|OpProcFactory
block|{
comment|/**    * Returns the parent operator in the walk path to the current operator.    *    * @param stack The stack encoding the path.    *    * @return Operator The parent operator in the current path.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
specifier|static
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|getParent
parameter_list|(
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|)
block|{
return|return
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
operator|)
name|Utils
operator|.
name|getNthAncestor
argument_list|(
name|stack
argument_list|,
literal|1
argument_list|)
return|;
block|}
comment|/**    * Processor for Script and UDTF Operators.    */
specifier|public
specifier|static
class|class
name|TransformLineage
extends|extends
name|DefaultLineage
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// LineageCTx
name|LineageCtx
name|lCtx
init|=
operator|(
name|LineageCtx
operator|)
name|procCtx
decl_stmt|;
comment|// The operators
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
init|=
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
operator|)
name|nd
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|inpOp
init|=
name|getParent
argument_list|(
name|stack
argument_list|)
decl_stmt|;
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|copyPredicates
argument_list|(
name|inpOp
argument_list|,
name|op
argument_list|)
expr_stmt|;
comment|// Create a single dependency list by concatenating the dependencies of all
comment|// the cols
name|Dependency
name|dep
init|=
operator|new
name|Dependency
argument_list|()
decl_stmt|;
name|DependencyType
name|new_type
init|=
name|LineageInfo
operator|.
name|DependencyType
operator|.
name|SCRIPT
decl_stmt|;
name|dep
operator|.
name|setType
argument_list|(
name|LineageInfo
operator|.
name|DependencyType
operator|.
name|SCRIPT
argument_list|)
expr_stmt|;
comment|// TODO: Fix this to a non null value.
name|dep
operator|.
name|setExpr
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|LinkedHashSet
argument_list|<
name|BaseColumnInfo
argument_list|>
name|col_set
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|BaseColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnInfo
name|ci
range|:
name|inpOp
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
control|)
block|{
name|Dependency
name|d
init|=
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|getDependency
argument_list|(
name|inpOp
argument_list|,
name|ci
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|new_type
operator|=
name|LineageCtx
operator|.
name|getNewDependencyType
argument_list|(
name|d
operator|.
name|getType
argument_list|()
argument_list|,
name|new_type
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ci
operator|.
name|isHiddenVirtualCol
argument_list|()
condition|)
block|{
name|col_set
operator|.
name|addAll
argument_list|(
name|d
operator|.
name|getBaseCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|dep
operator|.
name|setType
argument_list|(
name|new_type
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setBaseCols
argument_list|(
name|col_set
argument_list|)
expr_stmt|;
name|boolean
name|isScript
init|=
name|op
operator|instanceof
name|ScriptOperator
decl_stmt|;
comment|// This dependency is then set for all the colinfos of the script operator
for|for
control|(
name|ColumnInfo
name|ci
range|:
name|op
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
control|)
block|{
name|Dependency
name|d
init|=
name|dep
decl_stmt|;
if|if
condition|(
operator|!
name|isScript
condition|)
block|{
name|Dependency
name|dep_ci
init|=
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|getDependency
argument_list|(
name|inpOp
argument_list|,
name|ci
argument_list|)
decl_stmt|;
if|if
condition|(
name|dep_ci
operator|!=
literal|null
condition|)
block|{
name|d
operator|=
name|dep_ci
expr_stmt|;
block|}
block|}
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|putDependency
argument_list|(
name|op
argument_list|,
name|ci
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Processor for TableScan Operator. This actually creates the base column mappings.    */
specifier|public
specifier|static
class|class
name|TableScanLineage
extends|extends
name|DefaultLineage
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// LineageCtx
name|LineageCtx
name|lCtx
init|=
operator|(
name|LineageCtx
operator|)
name|procCtx
decl_stmt|;
name|ParseContext
name|pctx
init|=
name|lCtx
operator|.
name|getParseCtx
argument_list|()
decl_stmt|;
comment|// Table scan operator.
name|TableScanOperator
name|top
init|=
operator|(
name|TableScanOperator
operator|)
name|nd
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
name|t
init|=
name|top
operator|.
name|getConf
argument_list|()
operator|.
name|getTableMetadata
argument_list|()
decl_stmt|;
name|Table
name|tab
init|=
name|t
operator|.
name|getTTable
argument_list|()
decl_stmt|;
comment|// Generate the mappings
name|RowSchema
name|rs
init|=
name|top
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|t
operator|.
name|getAllCols
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FieldSchema
argument_list|>
name|fieldSchemaMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|col
range|:
name|cols
control|)
block|{
name|fieldSchemaMap
operator|.
name|put
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|,
name|col
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|VirtualColumn
argument_list|>
name|vcs
init|=
name|VirtualColumn
operator|.
name|getRegistry
argument_list|(
name|pctx
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|vcs
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|VirtualColumn
name|vc
init|=
name|vcs
operator|.
name|next
argument_list|()
decl_stmt|;
name|fieldSchemaMap
operator|.
name|put
argument_list|(
name|vc
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|FieldSchema
argument_list|(
name|vc
operator|.
name|getName
argument_list|()
argument_list|,
name|vc
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|getTypeName
argument_list|()
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TableAliasInfo
name|tai
init|=
operator|new
name|TableAliasInfo
argument_list|()
decl_stmt|;
name|tai
operator|.
name|setAlias
argument_list|(
name|top
operator|.
name|getConf
argument_list|()
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
name|tai
operator|.
name|setTable
argument_list|(
name|tab
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnInfo
name|ci
range|:
name|rs
operator|.
name|getSignature
argument_list|()
control|)
block|{
comment|// Create a dependency
name|Dependency
name|dep
init|=
operator|new
name|Dependency
argument_list|()
decl_stmt|;
name|BaseColumnInfo
name|bci
init|=
operator|new
name|BaseColumnInfo
argument_list|()
decl_stmt|;
name|bci
operator|.
name|setTabAlias
argument_list|(
name|tai
argument_list|)
expr_stmt|;
name|bci
operator|.
name|setColumn
argument_list|(
name|fieldSchemaMap
operator|.
name|get
argument_list|(
name|ci
operator|.
name|getInternalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Populate the dependency
name|dep
operator|.
name|setType
argument_list|(
name|LineageInfo
operator|.
name|DependencyType
operator|.
name|SIMPLE
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setBaseCols
argument_list|(
operator|new
name|LinkedHashSet
argument_list|<
name|BaseColumnInfo
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|dep
operator|.
name|getBaseCols
argument_list|()
operator|.
name|add
argument_list|(
name|bci
argument_list|)
expr_stmt|;
comment|// Put the dependency in the map
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|putDependency
argument_list|(
name|top
argument_list|,
name|ci
argument_list|,
name|dep
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Processor for Join Operator.    */
specifier|public
specifier|static
class|class
name|JoinLineage
extends|extends
name|DefaultLineage
implements|implements
name|NodeProcessor
block|{
specifier|private
specifier|final
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|outputMap
init|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// Assert that there is at least one item in the stack. This should never
comment|// be called for leafs.
assert|assert
operator|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
operator|)
assert|;
comment|// LineageCtx
name|LineageCtx
name|lCtx
init|=
operator|(
name|LineageCtx
operator|)
name|procCtx
decl_stmt|;
name|JoinOperator
name|op
init|=
operator|(
name|JoinOperator
operator|)
name|nd
decl_stmt|;
name|JoinDesc
name|jd
init|=
name|op
operator|.
name|getConf
argument_list|()
decl_stmt|;
comment|// The input operator to the join is always a reduce sink operator
name|ReduceSinkOperator
name|inpOp
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|getParent
argument_list|(
name|stack
argument_list|)
decl_stmt|;
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|copyPredicates
argument_list|(
name|inpOp
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|Predicate
name|cond
init|=
name|getPredicate
argument_list|(
name|op
argument_list|,
name|lCtx
argument_list|)
decl_stmt|;
if|if
condition|(
name|cond
operator|!=
literal|null
condition|)
block|{
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|addPredicate
argument_list|(
name|op
argument_list|,
name|cond
argument_list|)
expr_stmt|;
block|}
name|ReduceSinkDesc
name|rd
init|=
name|inpOp
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|int
name|tag
init|=
name|rd
operator|.
name|getTag
argument_list|()
decl_stmt|;
comment|// Iterate over the outputs of the join operator and merge the
comment|// dependencies of the columns that corresponding to the tag.
name|int
name|cnt
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|exprs
init|=
name|jd
operator|.
name|getExprs
argument_list|()
operator|.
name|get
argument_list|(
operator|(
name|byte
operator|)
name|tag
argument_list|)
decl_stmt|;
for|for
control|(
name|ColumnInfo
name|ci
range|:
name|op
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
control|)
block|{
if|if
condition|(
name|jd
operator|.
name|getReversedExprs
argument_list|()
operator|.
name|get
argument_list|(
name|ci
operator|.
name|getInternalName
argument_list|()
argument_list|)
operator|!=
name|tag
condition|)
block|{
continue|continue;
block|}
comment|// Otherwise look up the expression corresponding to this ci
name|ExprNodeDesc
name|expr
init|=
name|exprs
operator|.
name|get
argument_list|(
name|cnt
operator|++
argument_list|)
decl_stmt|;
name|Dependency
name|dependency
init|=
name|ExprProcFactory
operator|.
name|getExprDependency
argument_list|(
name|lCtx
argument_list|,
name|inpOp
argument_list|,
name|expr
argument_list|,
name|outputMap
argument_list|)
decl_stmt|;
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|mergeDependency
argument_list|(
name|op
argument_list|,
name|ci
argument_list|,
name|dependency
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Predicate
name|getPredicate
parameter_list|(
name|JoinOperator
name|jop
parameter_list|,
name|LineageCtx
name|lctx
parameter_list|)
block|{
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|parentOperators
init|=
name|jop
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
name|JoinDesc
name|jd
init|=
name|jop
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|ExprNodeDesc
index|[]
index|[]
name|joinKeys
init|=
name|jd
operator|.
name|getJoinKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|joinKeys
operator|==
literal|null
operator|||
name|parentOperators
operator|==
literal|null
operator|||
name|parentOperators
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LineageCtx
operator|.
name|Index
name|index
init|=
name|lctx
operator|.
name|getIndex
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
range|:
name|parentOperators
control|)
block|{
if|if
condition|(
name|index
operator|.
name|getDependencies
argument_list|(
name|op
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
name|Predicate
name|cond
init|=
operator|new
name|Predicate
argument_list|()
decl_stmt|;
name|JoinCondDesc
index|[]
name|conds
init|=
name|jd
operator|.
name|getConds
argument_list|()
decl_stmt|;
name|int
name|parents
init|=
name|parentOperators
operator|.
name|size
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"("
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|conds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" AND "
argument_list|)
expr_stmt|;
block|}
name|int
name|left
init|=
name|conds
index|[
name|i
index|]
operator|.
name|getLeft
argument_list|()
decl_stmt|;
name|int
name|right
init|=
name|conds
index|[
name|i
index|]
operator|.
name|getRight
argument_list|()
decl_stmt|;
if|if
condition|(
name|joinKeys
operator|.
name|length
operator|<
name|left
operator|||
name|joinKeys
index|[
name|left
index|]
operator|.
name|length
operator|==
literal|0
operator|||
name|joinKeys
operator|.
name|length
operator|<
name|right
operator|||
name|joinKeys
index|[
name|right
index|]
operator|.
name|length
operator|==
literal|0
operator|||
name|parents
operator|<
name|left
operator|||
name|parents
operator|<
name|right
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ExprNodeDesc
name|expr
init|=
name|joinKeys
index|[
name|left
index|]
index|[
literal|0
index|]
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
init|=
name|parentOperators
operator|.
name|get
argument_list|(
name|left
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|p
init|=
name|op
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
operator|||
name|p
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|ExprProcFactory
operator|.
name|getExprString
argument_list|(
name|op
operator|.
name|getSchema
argument_list|()
argument_list|,
name|expr
argument_list|,
name|lctx
argument_list|,
name|p
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cond
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
expr_stmt|;
name|expr
operator|=
name|joinKeys
index|[
name|right
index|]
index|[
literal|0
index|]
expr_stmt|;
name|op
operator|=
name|parentOperators
operator|.
name|get
argument_list|(
name|right
argument_list|)
expr_stmt|;
name|p
operator|=
name|op
operator|.
name|getParentOperators
argument_list|()
expr_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
operator|||
name|p
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|ExprProcFactory
operator|.
name|getExprString
argument_list|(
name|op
operator|.
name|getSchema
argument_list|()
argument_list|,
name|expr
argument_list|,
name|lctx
argument_list|,
name|p
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cond
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|cond
operator|.
name|setExpr
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cond
return|;
block|}
block|}
comment|/**    * Processor for Join Operator.    */
specifier|public
specifier|static
class|class
name|LateralViewJoinLineage
extends|extends
name|DefaultLineage
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// Assert that there is at least one item in the stack. This should never
comment|// be called for leafs.
assert|assert
operator|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
operator|)
assert|;
comment|// LineageCtx
name|LineageCtx
name|lCtx
init|=
operator|(
name|LineageCtx
operator|)
name|procCtx
decl_stmt|;
name|LateralViewJoinOperator
name|op
init|=
operator|(
name|LateralViewJoinOperator
operator|)
name|nd
decl_stmt|;
name|boolean
name|isUdtfPath
init|=
literal|true
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|inpOp
init|=
name|getParent
argument_list|(
name|stack
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|cols
init|=
name|inpOp
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
decl_stmt|;
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|copyPredicates
argument_list|(
name|inpOp
argument_list|,
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|inpOp
operator|instanceof
name|SelectOperator
condition|)
block|{
name|isUdtfPath
operator|=
literal|false
expr_stmt|;
block|}
comment|// Dirty hack!!
comment|// For the select path the columns are the ones at the beginning of the
comment|// current operators schema and for the udtf path the columns are
comment|// at the end of the operator schema.
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|out_cols
init|=
name|op
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
decl_stmt|;
name|int
name|out_cols_size
init|=
name|out_cols
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|cols_size
init|=
name|cols
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|outColOffset
init|=
name|isUdtfPath
condition|?
name|out_cols_size
operator|-
name|cols_size
else|:
literal|0
decl_stmt|;
for|for
control|(
name|int
name|cnt
init|=
literal|0
init|;
name|cnt
operator|<
name|cols_size
condition|;
name|cnt
operator|++
control|)
block|{
name|ColumnInfo
name|outCol
init|=
name|out_cols
operator|.
name|get
argument_list|(
name|outColOffset
operator|+
name|cnt
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|outCol
operator|.
name|isHiddenVirtualCol
argument_list|()
condition|)
block|{
name|ColumnInfo
name|col
init|=
name|cols
operator|.
name|get
argument_list|(
name|cnt
argument_list|)
decl_stmt|;
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|mergeDependency
argument_list|(
name|op
argument_list|,
name|outCol
argument_list|,
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|getDependency
argument_list|(
name|inpOp
argument_list|,
name|col
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Processor for Select operator.    */
specifier|public
specifier|static
class|class
name|SelectLineage
extends|extends
name|DefaultLineage
implements|implements
name|NodeProcessor
block|{
specifier|private
specifier|final
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|outputMap
init|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|LineageCtx
name|lctx
init|=
operator|(
name|LineageCtx
operator|)
name|procCtx
decl_stmt|;
name|SelectOperator
name|sop
init|=
operator|(
name|SelectOperator
operator|)
name|nd
decl_stmt|;
comment|// if this is a selStarNoCompute then this select operator
comment|// is treated like a default operator, so just call the super classes
comment|// process method.
if|if
condition|(
name|sop
operator|.
name|getConf
argument_list|()
operator|.
name|isSelStarNoCompute
argument_list|()
condition|)
block|{
return|return
name|super
operator|.
name|process
argument_list|(
name|nd
argument_list|,
name|stack
argument_list|,
name|procCtx
argument_list|,
name|nodeOutputs
argument_list|)
return|;
block|}
comment|// Otherwise we treat this as a normal select operator and look at
comment|// the expressions.
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|inpOp
init|=
name|getParent
argument_list|(
name|stack
argument_list|)
decl_stmt|;
name|lctx
operator|.
name|getIndex
argument_list|()
operator|.
name|copyPredicates
argument_list|(
name|inpOp
argument_list|,
name|sop
argument_list|)
expr_stmt|;
name|RowSchema
name|rs
init|=
name|sop
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|col_infos
init|=
name|rs
operator|.
name|getSignature
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|expr
range|:
name|sop
operator|.
name|getConf
argument_list|()
operator|.
name|getColList
argument_list|()
control|)
block|{
name|Dependency
name|dep
init|=
name|ExprProcFactory
operator|.
name|getExprDependency
argument_list|(
name|lctx
argument_list|,
name|inpOp
argument_list|,
name|expr
argument_list|,
name|outputMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|dep
operator|!=
literal|null
operator|&&
name|dep
operator|.
name|getExpr
argument_list|()
operator|==
literal|null
operator|&&
operator|(
name|dep
operator|.
name|getBaseCols
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|dep
operator|.
name|getType
argument_list|()
operator|!=
name|LineageInfo
operator|.
name|DependencyType
operator|.
name|SIMPLE
operator|)
condition|)
block|{
name|dep
operator|.
name|setExpr
argument_list|(
name|ExprProcFactory
operator|.
name|getExprString
argument_list|(
name|rs
argument_list|,
name|expr
argument_list|,
name|lctx
argument_list|,
name|inpOp
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lctx
operator|.
name|getIndex
argument_list|()
operator|.
name|putDependency
argument_list|(
name|sop
argument_list|,
name|col_infos
operator|.
name|get
argument_list|(
name|cnt
operator|++
argument_list|)
argument_list|,
name|dep
argument_list|)
expr_stmt|;
block|}
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|sop
operator|.
name|getChildOperators
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|op
operator|=
name|sop
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|op
operator|instanceof
name|LimitOperator
condition|)
block|{
name|op
operator|=
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|op
operator|==
literal|null
operator|||
operator|(
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|op
operator|instanceof
name|FileSinkOperator
operator|)
condition|)
block|{
name|lctx
operator|.
name|getIndex
argument_list|()
operator|.
name|addFinalSelectOp
argument_list|(
name|sop
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Processor for GroupBy operator.    */
specifier|public
specifier|static
class|class
name|GroupByLineage
extends|extends
name|DefaultLineage
implements|implements
name|NodeProcessor
block|{
specifier|private
specifier|final
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|outputMap
init|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|LineageCtx
name|lctx
init|=
operator|(
name|LineageCtx
operator|)
name|procCtx
decl_stmt|;
name|GroupByOperator
name|gop
init|=
operator|(
name|GroupByOperator
operator|)
name|nd
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|col_infos
init|=
name|gop
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|inpOp
init|=
name|getParent
argument_list|(
name|stack
argument_list|)
decl_stmt|;
name|lctx
operator|.
name|getIndex
argument_list|()
operator|.
name|copyPredicates
argument_list|(
name|inpOp
argument_list|,
name|gop
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|expr
range|:
name|gop
operator|.
name|getConf
argument_list|()
operator|.
name|getKeys
argument_list|()
control|)
block|{
name|lctx
operator|.
name|getIndex
argument_list|()
operator|.
name|putDependency
argument_list|(
name|gop
argument_list|,
name|col_infos
operator|.
name|get
argument_list|(
name|cnt
operator|++
argument_list|)
argument_list|,
name|ExprProcFactory
operator|.
name|getExprDependency
argument_list|(
name|lctx
argument_list|,
name|inpOp
argument_list|,
name|expr
argument_list|,
name|outputMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// If this is a reduce side GroupBy operator, check if there is
comment|// a corresponding map side one. If so, some expression could have
comment|// already been resolved in the map side.
name|boolean
name|reduceSideGop
init|=
operator|(
name|inpOp
operator|instanceof
name|ReduceSinkOperator
operator|)
operator|&&
operator|(
name|Utils
operator|.
name|getNthAncestor
argument_list|(
name|stack
argument_list|,
literal|2
argument_list|)
operator|instanceof
name|GroupByOperator
operator|)
decl_stmt|;
name|RowSchema
name|rs
init|=
name|gop
operator|.
name|getSchema
argument_list|()
decl_stmt|;
for|for
control|(
name|AggregationDesc
name|agg
range|:
name|gop
operator|.
name|getConf
argument_list|()
operator|.
name|getAggregators
argument_list|()
control|)
block|{
comment|// Concatenate the dependencies of all the parameters to
comment|// create the new dependency
name|Dependency
name|dep
init|=
operator|new
name|Dependency
argument_list|()
decl_stmt|;
name|DependencyType
name|new_type
init|=
name|LineageInfo
operator|.
name|DependencyType
operator|.
name|EXPRESSION
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|LinkedHashSet
argument_list|<
name|BaseColumnInfo
argument_list|>
name|bci_set
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|BaseColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|expr
range|:
name|agg
operator|.
name|getParameters
argument_list|()
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|Dependency
name|expr_dep
init|=
name|ExprProcFactory
operator|.
name|getExprDependency
argument_list|(
name|lctx
argument_list|,
name|inpOp
argument_list|,
name|expr
argument_list|,
name|outputMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|expr_dep
operator|!=
literal|null
operator|&&
operator|!
name|expr_dep
operator|.
name|getBaseCols
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|new_type
operator|=
name|LineageCtx
operator|.
name|getNewDependencyType
argument_list|(
name|expr_dep
operator|.
name|getType
argument_list|()
argument_list|,
name|new_type
argument_list|)
expr_stmt|;
name|bci_set
operator|.
name|addAll
argument_list|(
name|expr_dep
operator|.
name|getBaseCols
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expr_dep
operator|.
name|getType
argument_list|()
operator|==
name|LineageInfo
operator|.
name|DependencyType
operator|.
name|SIMPLE
condition|)
block|{
name|BaseColumnInfo
name|col
init|=
name|expr_dep
operator|.
name|getBaseCols
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Table
name|t
init|=
name|col
operator|.
name|getTabAlias
argument_list|()
operator|.
name|getTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|Warehouse
operator|.
name|getQualifiedName
argument_list|(
name|t
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|col
operator|.
name|getColumn
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|expr_dep
operator|==
literal|null
operator|||
name|expr_dep
operator|.
name|getBaseCols
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|expr_dep
operator|.
name|getType
argument_list|()
operator|!=
name|LineageInfo
operator|.
name|DependencyType
operator|.
name|SIMPLE
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|expr_dep
operator|!=
literal|null
operator|&&
name|expr_dep
operator|.
name|getExpr
argument_list|()
operator|!=
literal|null
condition|?
name|expr_dep
operator|.
name|getExpr
argument_list|()
else|:
name|ExprProcFactory
operator|.
name|getExprString
argument_list|(
name|rs
argument_list|,
name|expr
argument_list|,
name|lctx
argument_list|,
name|inpOp
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|expr
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|udafName
init|=
name|agg
operator|.
name|getGenericUDAFName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|reduceSideGop
operator|&&
name|expr
operator|.
name|startsWith
argument_list|(
name|udafName
argument_list|)
operator|)
condition|)
block|{
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// reset the buffer
name|sb
operator|.
name|append
argument_list|(
name|udafName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
if|if
condition|(
name|agg
operator|.
name|getDistinct
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"DISTINCT "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|expr
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
condition|)
block|{
comment|// No parameter, count(*)
name|sb
operator|.
name|append
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|expr
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|dep
operator|.
name|setExpr
argument_list|(
name|expr
argument_list|)
expr_stmt|;
comment|// If the bci_set is empty, this means that the inputs to this
comment|// aggregate function were all constants (e.g. count(1)). In this case
comment|// the aggregate function is just dependent on all the tables that are in
comment|// the dependency list of the input operator.
if|if
condition|(
name|bci_set
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|TableAliasInfo
argument_list|>
name|tai_set
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|TableAliasInfo
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|inpOp
operator|.
name|getSchema
argument_list|()
operator|!=
literal|null
operator|&&
name|inpOp
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ColumnInfo
name|ci
range|:
name|inpOp
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
control|)
block|{
name|Dependency
name|inp_dep
init|=
name|lctx
operator|.
name|getIndex
argument_list|()
operator|.
name|getDependency
argument_list|(
name|inpOp
argument_list|,
name|ci
argument_list|)
decl_stmt|;
comment|// The dependency can be null as some of the input cis may not have
comment|// been set in case of joins.
if|if
condition|(
name|inp_dep
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BaseColumnInfo
name|bci
range|:
name|inp_dep
operator|.
name|getBaseCols
argument_list|()
control|)
block|{
name|new_type
operator|=
name|LineageCtx
operator|.
name|getNewDependencyType
argument_list|(
name|inp_dep
operator|.
name|getType
argument_list|()
argument_list|,
name|new_type
argument_list|)
expr_stmt|;
name|tai_set
operator|.
name|add
argument_list|(
name|bci
operator|.
name|getTabAlias
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Create the BaseColumnInfos and set them in the bci_set
for|for
control|(
name|TableAliasInfo
name|tai
range|:
name|tai_set
control|)
block|{
name|BaseColumnInfo
name|bci
init|=
operator|new
name|BaseColumnInfo
argument_list|()
decl_stmt|;
name|bci
operator|.
name|setTabAlias
argument_list|(
name|tai
argument_list|)
expr_stmt|;
comment|// This is set to null to reflect that the dependency is not on any
comment|// particular column of the table.
name|bci
operator|.
name|setColumn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|bci_set
operator|.
name|add
argument_list|(
name|bci
argument_list|)
expr_stmt|;
block|}
block|}
name|dep
operator|.
name|setBaseCols
argument_list|(
name|bci_set
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setType
argument_list|(
name|new_type
argument_list|)
expr_stmt|;
name|lctx
operator|.
name|getIndex
argument_list|()
operator|.
name|putDependency
argument_list|(
name|gop
argument_list|,
name|col_infos
operator|.
name|get
argument_list|(
name|cnt
operator|++
argument_list|)
argument_list|,
name|dep
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Union processor.    * In this case we call mergeDependency as opposed to putDependency    * in order to account for visits from different parents.    */
specifier|public
specifier|static
class|class
name|UnionLineage
extends|extends
name|DefaultLineage
implements|implements
name|NodeProcessor
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// Assert that there is at least one item in the stack. This should never
comment|// be called for leafs.
assert|assert
operator|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
operator|)
assert|;
comment|// LineageCtx
name|LineageCtx
name|lCtx
init|=
operator|(
name|LineageCtx
operator|)
name|procCtx
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
init|=
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
operator|)
name|nd
decl_stmt|;
comment|// Get the row schema of the input operator.
comment|// The row schema of the parent operator
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|inpOp
init|=
name|getParent
argument_list|(
name|stack
argument_list|)
decl_stmt|;
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|copyPredicates
argument_list|(
name|inpOp
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|RowSchema
name|rs
init|=
name|op
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|inp_cols
init|=
name|inpOp
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
decl_stmt|;
comment|// check only for input cols
for|for
control|(
name|ColumnInfo
name|input
range|:
name|inp_cols
control|)
block|{
name|Dependency
name|inp_dep
init|=
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|getDependency
argument_list|(
name|inpOp
argument_list|,
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|inp_dep
operator|!=
literal|null
condition|)
block|{
comment|//merge it with rs colInfo
name|ColumnInfo
name|ci
init|=
name|rs
operator|.
name|getColumnInfo
argument_list|(
name|input
operator|.
name|getInternalName
argument_list|()
argument_list|)
decl_stmt|;
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|mergeDependency
argument_list|(
name|op
argument_list|,
name|ci
argument_list|,
name|inp_dep
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/**    * ReduceSink processor.    */
specifier|public
specifier|static
class|class
name|ReduceSinkLineage
implements|implements
name|NodeProcessor
block|{
specifier|private
specifier|final
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|outputMap
init|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// Assert that there is at least one item in the stack. This should never
comment|// be called for leafs.
assert|assert
operator|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
operator|)
assert|;
comment|// LineageCtx
name|LineageCtx
name|lCtx
init|=
operator|(
name|LineageCtx
operator|)
name|procCtx
decl_stmt|;
name|ReduceSinkOperator
name|rop
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|nd
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|inpOp
init|=
name|getParent
argument_list|(
name|stack
argument_list|)
decl_stmt|;
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|copyPredicates
argument_list|(
name|inpOp
argument_list|,
name|rop
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
comment|// The keys are included only in case the reduce sink feeds into
comment|// a group by operator through a chain of forward operators
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
init|=
name|rop
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
name|op
operator|instanceof
name|ForwardOperator
condition|)
block|{
name|op
operator|=
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|op
operator|instanceof
name|GroupByOperator
condition|)
block|{
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|col_infos
init|=
name|rop
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|expr
range|:
name|rop
operator|.
name|getConf
argument_list|()
operator|.
name|getKeyCols
argument_list|()
control|)
block|{
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|putDependency
argument_list|(
name|rop
argument_list|,
name|col_infos
operator|.
name|get
argument_list|(
name|cnt
operator|++
argument_list|)
argument_list|,
name|ExprProcFactory
operator|.
name|getExprDependency
argument_list|(
name|lCtx
argument_list|,
name|inpOp
argument_list|,
name|expr
argument_list|,
name|outputMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ExprNodeDesc
name|expr
range|:
name|rop
operator|.
name|getConf
argument_list|()
operator|.
name|getValueCols
argument_list|()
control|)
block|{
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|putDependency
argument_list|(
name|rop
argument_list|,
name|col_infos
operator|.
name|get
argument_list|(
name|cnt
operator|++
argument_list|)
argument_list|,
name|ExprProcFactory
operator|.
name|getExprDependency
argument_list|(
name|lCtx
argument_list|,
name|inpOp
argument_list|,
name|expr
argument_list|,
name|outputMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|RowSchema
name|schema
init|=
name|rop
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|ReduceSinkDesc
name|desc
init|=
name|rop
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keyCols
init|=
name|desc
operator|.
name|getKeyCols
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|keyColNames
init|=
name|desc
operator|.
name|getOutputKeyColumnNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// order-bys, joins
name|ColumnInfo
name|column
init|=
name|schema
operator|.
name|getColumnInfo
argument_list|(
name|Utilities
operator|.
name|ReduceField
operator|.
name|KEY
operator|+
literal|"."
operator|+
name|keyColNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|column
operator|==
literal|null
condition|)
block|{
continue|continue;
comment|// key in values
block|}
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|putDependency
argument_list|(
name|rop
argument_list|,
name|column
argument_list|,
name|ExprProcFactory
operator|.
name|getExprDependency
argument_list|(
name|lCtx
argument_list|,
name|inpOp
argument_list|,
name|keyCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|outputMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|valCols
init|=
name|desc
operator|.
name|getValueCols
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|valColNames
init|=
name|desc
operator|.
name|getOutputValueColumnNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// todo: currently, bucketing,etc. makes RS differently with those for order-bys or joins
name|ColumnInfo
name|column
init|=
name|schema
operator|.
name|getColumnInfo
argument_list|(
name|valColNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|column
operator|==
literal|null
condition|)
block|{
comment|// order-bys, joins
name|column
operator|=
name|schema
operator|.
name|getColumnInfo
argument_list|(
name|Utilities
operator|.
name|ReduceField
operator|.
name|VALUE
operator|+
literal|"."
operator|+
name|valColNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|putDependency
argument_list|(
name|rop
argument_list|,
name|column
argument_list|,
name|ExprProcFactory
operator|.
name|getExprDependency
argument_list|(
name|lCtx
argument_list|,
name|inpOp
argument_list|,
name|valCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|outputMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Filter processor.    */
specifier|public
specifier|static
class|class
name|FilterLineage
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// Assert that there is at least one item in the stack. This should never
comment|// be called for leafs.
assert|assert
operator|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
operator|)
assert|;
comment|// LineageCtx
name|LineageCtx
name|lCtx
init|=
operator|(
name|LineageCtx
operator|)
name|procCtx
decl_stmt|;
name|FilterOperator
name|fop
init|=
operator|(
name|FilterOperator
operator|)
name|nd
decl_stmt|;
comment|// Get the row schema of the input operator.
comment|// The row schema of the parent operator
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|inpOp
init|=
name|getParent
argument_list|(
name|stack
argument_list|)
decl_stmt|;
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|copyPredicates
argument_list|(
name|inpOp
argument_list|,
name|fop
argument_list|)
expr_stmt|;
name|FilterDesc
name|filterDesc
init|=
name|fop
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|RowSchema
name|rs
init|=
name|fop
operator|.
name|getSchema
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|filterDesc
operator|.
name|isGenerated
argument_list|()
condition|)
block|{
name|Predicate
name|cond
init|=
operator|new
name|Predicate
argument_list|()
decl_stmt|;
name|cond
operator|.
name|setExpr
argument_list|(
name|ExprProcFactory
operator|.
name|getExprString
argument_list|(
name|rs
argument_list|,
name|filterDesc
operator|.
name|getPredicate
argument_list|()
argument_list|,
name|lCtx
argument_list|,
name|inpOp
argument_list|,
name|cond
argument_list|)
argument_list|)
expr_stmt|;
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|addPredicate
argument_list|(
name|fop
argument_list|,
name|cond
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|inp_cols
init|=
name|inpOp
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ColumnInfo
name|ci
range|:
name|rs
operator|.
name|getSignature
argument_list|()
control|)
block|{
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|putDependency
argument_list|(
name|fop
argument_list|,
name|ci
argument_list|,
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|getDependency
argument_list|(
name|inpOp
argument_list|,
name|inp_cols
operator|.
name|get
argument_list|(
name|cnt
operator|++
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Default processor. This basically passes the input dependencies as such    * to the output dependencies.    */
specifier|public
specifier|static
class|class
name|DefaultLineage
implements|implements
name|NodeProcessor
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// Assert that there is at least one item in the stack. This should never
comment|// be called for leafs.
assert|assert
operator|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
operator|)
assert|;
comment|// LineageCtx
name|LineageCtx
name|lCtx
init|=
operator|(
name|LineageCtx
operator|)
name|procCtx
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
init|=
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
operator|)
name|nd
decl_stmt|;
comment|// Get the row schema of the input operator.
comment|// The row schema of the parent operator
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|inpOp
init|=
name|getParent
argument_list|(
name|stack
argument_list|)
decl_stmt|;
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|copyPredicates
argument_list|(
name|inpOp
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|RowSchema
name|rs
init|=
name|op
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|inp_cols
init|=
name|inpOp
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ColumnInfo
name|ci
range|:
name|rs
operator|.
name|getSignature
argument_list|()
control|)
block|{
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|putDependency
argument_list|(
name|op
argument_list|,
name|ci
argument_list|,
name|lCtx
operator|.
name|getIndex
argument_list|()
operator|.
name|getDependency
argument_list|(
name|inpOp
argument_list|,
name|inp_cols
operator|.
name|get
argument_list|(
name|cnt
operator|++
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getJoinProc
parameter_list|()
block|{
return|return
operator|new
name|JoinLineage
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getLateralViewJoinProc
parameter_list|()
block|{
return|return
operator|new
name|LateralViewJoinLineage
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getTSProc
parameter_list|()
block|{
return|return
operator|new
name|TableScanLineage
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getTransformProc
parameter_list|()
block|{
return|return
operator|new
name|TransformLineage
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getSelProc
parameter_list|()
block|{
return|return
operator|new
name|SelectLineage
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getGroupByProc
parameter_list|()
block|{
return|return
operator|new
name|GroupByLineage
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getUnionProc
parameter_list|()
block|{
return|return
operator|new
name|UnionLineage
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getReduceSinkProc
parameter_list|()
block|{
return|return
operator|new
name|ReduceSinkLineage
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getDefaultProc
parameter_list|()
block|{
return|return
operator|new
name|DefaultLineage
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getFilterProc
parameter_list|()
block|{
return|return
operator|new
name|FilterLineage
argument_list|()
return|;
block|}
block|}
end_class

end_unit

