begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * Does authorization using post semantic analysis information from the semantic analyzer.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|CommandAuthorizer
block|{
specifier|private
name|CommandAuthorizer
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"CommandAuthorizer should not be instantiated"
argument_list|)
throw|;
block|}
comment|/** @param command Passed so that authorization interface can provide more useful information in logs. */
specifier|public
specifier|static
name|void
name|doAuthorization
parameter_list|(
name|HiveOperation
name|op
parameter_list|,
name|BaseSemanticAnalyzer
name|sem
parameter_list|,
name|String
name|command
parameter_list|)
throws|throws
name|HiveException
throws|,
name|AuthorizationException
block|{
if|if
condition|(
name|skip
argument_list|(
name|op
argument_list|,
name|sem
argument_list|)
condition|)
block|{
return|return;
block|}
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
init|=
name|getInputs
argument_list|(
name|sem
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
init|=
name|getOutputs
argument_list|(
name|sem
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ss
operator|.
name|isAuthorizationModeV2
argument_list|()
condition|)
block|{
name|CommandAuthorizerV1
operator|.
name|doAuthorization
argument_list|(
name|op
argument_list|,
name|sem
argument_list|,
name|ss
argument_list|,
name|inputs
argument_list|,
name|outputs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CommandAuthorizerV2
operator|.
name|doAuthorization
argument_list|(
name|op
argument_list|,
name|sem
argument_list|,
name|ss
argument_list|,
name|inputs
argument_list|,
name|outputs
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|skip
parameter_list|(
name|HiveOperation
name|op
parameter_list|,
name|BaseSemanticAnalyzer
name|sem
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// skipping the auth check for the "CREATE DATABASE" operation if database already exists
comment|// we know that if the database already exists then "CREATE DATABASE" operation will fail.
if|if
condition|(
name|op
operator|==
name|HiveOperation
operator|.
name|CREATEDATABASE
condition|)
block|{
for|for
control|(
name|WriteEntity
name|e
range|:
name|sem
operator|.
name|getOutputs
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getType
argument_list|()
operator|==
name|Entity
operator|.
name|Type
operator|.
name|DATABASE
operator|&&
name|sem
operator|.
name|getDb
argument_list|()
operator|.
name|databaseExists
argument_list|(
name|e
operator|.
name|getName
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|getInputs
parameter_list|(
name|BaseSemanticAnalyzer
name|sem
parameter_list|)
block|{
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|additionalInputs
init|=
operator|new
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entity
name|e
range|:
name|sem
operator|.
name|getInputs
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getType
argument_list|()
operator|==
name|Entity
operator|.
name|Type
operator|.
name|PARTITION
condition|)
block|{
name|additionalInputs
operator|.
name|add
argument_list|(
operator|new
name|ReadEntity
argument_list|(
name|e
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Sets.union keeps the values from the first set if they are present in both
return|return
name|Sets
operator|.
name|union
argument_list|(
name|sem
operator|.
name|getInputs
argument_list|()
argument_list|,
name|additionalInputs
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|getOutputs
parameter_list|(
name|BaseSemanticAnalyzer
name|sem
parameter_list|)
block|{
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|additionalOutputs
init|=
operator|new
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|WriteEntity
name|e
range|:
name|sem
operator|.
name|getOutputs
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getType
argument_list|()
operator|==
name|Entity
operator|.
name|Type
operator|.
name|PARTITION
condition|)
block|{
name|additionalOutputs
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|e
operator|.
name|getTable
argument_list|()
argument_list|,
name|e
operator|.
name|getWriteType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Sets.union keeps the values from the first set if they are present in both
return|return
name|Sets
operator|.
name|union
argument_list|(
name|sem
operator|.
name|getOutputs
argument_list|()
argument_list|,
name|additionalOutputs
argument_list|)
return|;
block|}
block|}
end_class

end_unit

