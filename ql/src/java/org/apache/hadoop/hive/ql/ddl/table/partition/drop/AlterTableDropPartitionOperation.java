begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|partition
operator|.
name|drop
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|PartitionDropOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SerializationUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|InvalidTableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveTableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ReplicationSpec
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_comment
comment|/**  * Operation process of dropping some partitions of a table.  */
end_comment

begin_class
specifier|public
class|class
name|AlterTableDropPartitionOperation
extends|extends
name|DDLOperation
argument_list|<
name|AlterTableDropPartitionDesc
argument_list|>
block|{
specifier|public
name|AlterTableDropPartitionOperation
parameter_list|(
name|DDLOperationContext
name|context
parameter_list|,
name|AlterTableDropPartitionDesc
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|()
throws|throws
name|HiveException
block|{
comment|// We need to fetch the table before it is dropped so that it can be passed to post-execution hook
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|getTable
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidTableException
name|e
parameter_list|)
block|{
comment|// drop table is idempotent
block|}
name|ReplicationSpec
name|replicationSpec
init|=
name|desc
operator|.
name|getReplicationSpec
argument_list|()
decl_stmt|;
if|if
condition|(
name|replicationSpec
operator|.
name|isInReplicationScope
argument_list|()
condition|)
block|{
name|dropPartitionForReplication
argument_list|(
name|table
argument_list|,
name|replicationSpec
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dropPartitions
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|void
name|dropPartitionForReplication
parameter_list|(
name|Table
name|table
parameter_list|,
name|ReplicationSpec
name|replicationSpec
parameter_list|)
throws|throws
name|HiveException
block|{
comment|/**      * ALTER TABLE DROP PARTITION ... FOR REPLICATION(x) behaves as a DROP PARTITION IF OLDER THAN x      *      * So, we check each partition that matches our DropTableDesc.getPartSpecs(), and drop it only      * if it's older than the event that spawned this replicated request to drop partition      */
comment|// TODO: Current implementation of replication will result in DROP_PARTITION under replication
comment|// scope being called per-partition instead of multiple partitions. However, to be robust, we
comment|// must still handle the case of multiple partitions in case this assumption changes in the
comment|// future. However, if this assumption changes, we will not be very performant if we fetch
comment|// each partition one-by-one, and then decide on inspection whether or not this is a candidate
comment|// for dropping. Thus, we need a way to push this filter (replicationSpec.allowEventReplacementInto)
comment|// to the  metastore to allow it to do drop a partition or not, depending on a Predicate on the
comment|// parameter key values.
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
comment|// If table is missing, then partitions are also would've been dropped. Just no-op.
return|return;
block|}
for|for
control|(
name|AlterTableDropPartitionDesc
operator|.
name|PartitionDesc
name|partSpec
range|:
name|desc
operator|.
name|getPartSpecs
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|getPartitionsByExpr
argument_list|(
name|table
argument_list|,
name|partSpec
operator|.
name|getPartSpec
argument_list|()
argument_list|,
name|context
operator|.
name|getConf
argument_list|()
argument_list|,
name|partitions
argument_list|)
expr_stmt|;
for|for
control|(
name|Partition
name|p
range|:
name|Iterables
operator|.
name|filter
argument_list|(
name|partitions
argument_list|,
name|replicationSpec
operator|.
name|allowEventReplacementInto
argument_list|()
argument_list|)
control|)
block|{
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|dropPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|p
operator|.
name|getValues
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// ignore NSOE because that means there's nothing to drop.
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|dropPartitions
parameter_list|()
throws|throws
name|HiveException
block|{
comment|// ifExists is currently verified in DDLSemanticAnalyzer
name|TableName
name|tablenName
init|=
name|HiveTableName
operator|.
name|of
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|partitionExpressions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|desc
operator|.
name|getPartSpecs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AlterTableDropPartitionDesc
operator|.
name|PartitionDesc
name|partSpec
range|:
name|desc
operator|.
name|getPartSpecs
argument_list|()
control|)
block|{
name|partitionExpressions
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|partSpec
operator|.
name|getPrefixLength
argument_list|()
argument_list|,
name|SerializationUtilities
operator|.
name|serializeExpressionToKryo
argument_list|(
name|partSpec
operator|.
name|getPartSpec
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PartitionDropOptions
name|options
init|=
name|PartitionDropOptions
operator|.
name|instance
argument_list|()
operator|.
name|deleteData
argument_list|(
literal|true
argument_list|)
operator|.
name|ifExists
argument_list|(
literal|true
argument_list|)
operator|.
name|purgeData
argument_list|(
name|desc
operator|.
name|getIfPurge
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|droppedPartitions
init|=
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|dropPartitions
argument_list|(
name|tablenName
operator|.
name|getDb
argument_list|()
argument_list|,
name|tablenName
operator|.
name|getTable
argument_list|()
argument_list|,
name|partitionExpressions
argument_list|,
name|options
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|droppedPartitions
control|)
block|{
name|context
operator|.
name|getConsole
argument_list|()
operator|.
name|printInfo
argument_list|(
literal|"Dropped the partition "
operator|+
name|partition
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// We have already locked the table, don't lock the partitions.
name|DDLUtils
operator|.
name|addIfAbsentByName
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|partition
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

