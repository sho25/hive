begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Explain
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Join conditions Descriptor implementation.  *  */
end_comment

begin_class
specifier|public
class|class
name|JoinCondDesc
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|int
name|left
decl_stmt|;
specifier|private
name|int
name|right
decl_stmt|;
specifier|private
name|int
name|type
decl_stmt|;
specifier|private
name|boolean
name|preserved
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JoinCondDesc
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|JoinCondDesc
parameter_list|()
block|{   }
specifier|public
name|JoinCondDesc
parameter_list|(
name|int
name|left
parameter_list|,
name|int
name|right
parameter_list|,
name|int
name|type
parameter_list|)
block|{
name|this
operator|.
name|left
operator|=
name|left
expr_stmt|;
name|this
operator|.
name|right
operator|=
name|right
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|JoinCondDesc
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|JoinCond
name|condn
parameter_list|)
block|{
name|left
operator|=
name|condn
operator|.
name|getLeft
argument_list|()
expr_stmt|;
name|right
operator|=
name|condn
operator|.
name|getRight
argument_list|()
expr_stmt|;
name|preserved
operator|=
name|condn
operator|.
name|getPreserved
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|condn
operator|.
name|getJoinType
argument_list|()
condition|)
block|{
case|case
name|INNER
case|:
name|type
operator|=
name|JoinDesc
operator|.
name|INNER_JOIN
expr_stmt|;
break|break;
case|case
name|LEFTOUTER
case|:
name|type
operator|=
name|JoinDesc
operator|.
name|LEFT_OUTER_JOIN
expr_stmt|;
break|break;
case|case
name|RIGHTOUTER
case|:
name|type
operator|=
name|JoinDesc
operator|.
name|RIGHT_OUTER_JOIN
expr_stmt|;
break|break;
case|case
name|FULLOUTER
case|:
name|type
operator|=
name|JoinDesc
operator|.
name|FULL_OUTER_JOIN
expr_stmt|;
break|break;
case|case
name|UNIQUE
case|:
name|type
operator|=
name|JoinDesc
operator|.
name|UNIQUE_JOIN
expr_stmt|;
break|break;
case|case
name|LEFTSEMI
case|:
name|type
operator|=
name|JoinDesc
operator|.
name|LEFT_SEMI_JOIN
expr_stmt|;
break|break;
default|default:
assert|assert
literal|false
assert|;
block|}
block|}
comment|/**    * @return true if table is preserved, false otherwise    */
specifier|public
name|boolean
name|getPreserved
parameter_list|()
block|{
return|return
name|preserved
return|;
block|}
comment|/**    * @param preserved    *          if table is preserved, false otherwise    */
specifier|public
name|void
name|setPreserved
parameter_list|(
specifier|final
name|boolean
name|preserved
parameter_list|)
block|{
name|this
operator|.
name|preserved
operator|=
name|preserved
expr_stmt|;
block|}
specifier|public
name|int
name|getLeft
parameter_list|()
block|{
return|return
name|left
return|;
block|}
specifier|public
name|void
name|setLeft
parameter_list|(
specifier|final
name|int
name|left
parameter_list|)
block|{
name|this
operator|.
name|left
operator|=
name|left
expr_stmt|;
block|}
specifier|public
name|int
name|getRight
parameter_list|()
block|{
return|return
name|right
return|;
block|}
specifier|public
name|void
name|setRight
parameter_list|(
specifier|final
name|int
name|right
parameter_list|)
block|{
name|this
operator|.
name|right
operator|=
name|right
expr_stmt|;
block|}
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
specifier|final
name|int
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|String
name|getJoinCondString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|JoinDesc
operator|.
name|INNER_JOIN
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"Inner Join "
argument_list|)
expr_stmt|;
break|break;
case|case
name|JoinDesc
operator|.
name|FULL_OUTER_JOIN
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"Outer Join "
argument_list|)
expr_stmt|;
break|break;
case|case
name|JoinDesc
operator|.
name|LEFT_OUTER_JOIN
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"Left Outer Join "
argument_list|)
expr_stmt|;
break|break;
case|case
name|JoinDesc
operator|.
name|RIGHT_OUTER_JOIN
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"Right Outer Join "
argument_list|)
expr_stmt|;
break|break;
case|case
name|JoinDesc
operator|.
name|UNIQUE_JOIN
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"Unique Join "
argument_list|)
expr_stmt|;
break|break;
case|case
name|JoinDesc
operator|.
name|LEFT_SEMI_JOIN
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"Left Semi Join "
argument_list|)
expr_stmt|;
break|break;
default|default:
name|sb
operator|.
name|append
argument_list|(
literal|"Unknown Join "
argument_list|)
expr_stmt|;
break|break;
block|}
name|sb
operator|.
name|append
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" to "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|right
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|}
argument_list|)
specifier|public
name|String
name|getUserLevelJoinCondString
parameter_list|()
block|{
name|JSONObject
name|join
init|=
operator|new
name|JSONObject
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|JoinDesc
operator|.
name|INNER_JOIN
case|:
name|join
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"Inner"
argument_list|)
expr_stmt|;
break|break;
case|case
name|JoinDesc
operator|.
name|FULL_OUTER_JOIN
case|:
name|join
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"Outer"
argument_list|)
expr_stmt|;
break|break;
case|case
name|JoinDesc
operator|.
name|LEFT_OUTER_JOIN
case|:
name|join
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"Left Outer"
argument_list|)
expr_stmt|;
break|break;
case|case
name|JoinDesc
operator|.
name|RIGHT_OUTER_JOIN
case|:
name|join
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"Right Outer"
argument_list|)
expr_stmt|;
break|break;
case|case
name|JoinDesc
operator|.
name|UNIQUE_JOIN
case|:
name|join
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"Unique"
argument_list|)
expr_stmt|;
break|break;
case|case
name|JoinDesc
operator|.
name|LEFT_SEMI_JOIN
case|:
name|join
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"Left Semi"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|join
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"Unknown Join"
argument_list|)
expr_stmt|;
break|break;
block|}
name|join
operator|.
name|put
argument_list|(
literal|"left"
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|join
operator|.
name|put
argument_list|(
literal|"right"
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
comment|// impossible to throw any json exceptions.
name|LOG
operator|.
name|trace
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|join
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|JoinCondDesc
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|JoinCondDesc
name|other
init|=
operator|(
name|JoinCondDesc
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|type
operator|!=
name|other
operator|.
name|type
operator|||
name|this
operator|.
name|left
operator|!=
name|other
operator|.
name|left
operator|||
name|this
operator|.
name|right
operator|!=
name|other
operator|.
name|right
operator|||
name|this
operator|.
name|preserved
operator|!=
name|other
operator|.
name|preserved
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|// XXX: is hashCode missing here?
block|}
end_class

end_unit

