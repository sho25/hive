begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|DependencyCollectionTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FetchTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ForwardOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|HashTableDummyOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SMBMapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SerializationUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UnionOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|GenMapRedUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|spark
operator|.
name|SparkPartitionPruningSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|spark
operator|.
name|SparkSortMergeJoinFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PrunedPartitionList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|BaseWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FileSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MoveWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SparkEdgeProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SparkWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_comment
comment|/**  * GenSparkUtils is a collection of shared helper methods to produce SparkWork  * Cloned from GenTezUtils.  */
end_comment

begin_class
specifier|public
class|class
name|GenSparkUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GenSparkUtils
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// sequence number is used to name vertices (e.g.: Map 1, Reduce 14, ...)
specifier|private
name|int
name|sequenceNumber
init|=
literal|0
decl_stmt|;
comment|// singleton
specifier|private
specifier|static
name|GenSparkUtils
name|utils
decl_stmt|;
specifier|public
specifier|static
name|GenSparkUtils
name|getUtils
parameter_list|()
block|{
if|if
condition|(
name|utils
operator|==
literal|null
condition|)
block|{
name|utils
operator|=
operator|new
name|GenSparkUtils
argument_list|()
expr_stmt|;
block|}
return|return
name|utils
return|;
block|}
specifier|protected
name|GenSparkUtils
parameter_list|()
block|{   }
specifier|public
name|void
name|resetSequenceNumber
parameter_list|()
block|{
name|sequenceNumber
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|ReduceWork
name|createReduceWork
parameter_list|(
name|GenSparkProcContext
name|context
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|root
parameter_list|,
name|SparkWork
name|sparkWork
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|root
operator|.
name|getParentOperators
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"AssertionError: expected root.getParentOperators() to be non-empty"
argument_list|)
expr_stmt|;
name|ReduceWork
name|reduceWork
init|=
operator|new
name|ReduceWork
argument_list|(
literal|"Reducer "
operator|+
operator|(
operator|++
name|sequenceNumber
operator|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding reduce work ("
operator|+
name|reduceWork
operator|.
name|getName
argument_list|()
operator|+
literal|") for "
operator|+
name|root
argument_list|)
expr_stmt|;
name|reduceWork
operator|.
name|setReducer
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|reduceWork
operator|.
name|setNeedsTagging
argument_list|(
name|GenMapRedUtils
operator|.
name|needsTagging
argument_list|(
name|reduceWork
argument_list|)
argument_list|)
expr_stmt|;
comment|// Pick the maximum # reducers across all parents as the # of reduce tasks.
name|int
name|maxExecutors
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOfRoot
range|:
name|root
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|parentOfRoot
operator|instanceof
name|ReduceSinkOperator
argument_list|,
literal|"AssertionError: expected parentOfRoot to be an "
operator|+
literal|"instance of ReduceSinkOperator, but was "
operator|+
name|parentOfRoot
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ReduceSinkOperator
name|reduceSink
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|parentOfRoot
decl_stmt|;
name|maxExecutors
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxExecutors
argument_list|,
name|reduceSink
operator|.
name|getConf
argument_list|()
operator|.
name|getNumReducers
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|reduceWork
operator|.
name|setNumReduceTasks
argument_list|(
name|maxExecutors
argument_list|)
expr_stmt|;
name|ReduceSinkOperator
name|reduceSink
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|context
operator|.
name|parentOfRoot
decl_stmt|;
name|setupReduceSink
argument_list|(
name|context
argument_list|,
name|reduceWork
argument_list|,
name|reduceSink
argument_list|)
expr_stmt|;
name|sparkWork
operator|.
name|add
argument_list|(
name|reduceWork
argument_list|)
expr_stmt|;
name|SparkEdgeProperty
name|edgeProp
init|=
name|getEdgeProperty
argument_list|(
name|context
operator|.
name|conf
argument_list|,
name|reduceSink
argument_list|,
name|reduceWork
argument_list|)
decl_stmt|;
name|sparkWork
operator|.
name|connect
argument_list|(
name|context
operator|.
name|preceedingWork
argument_list|,
name|reduceWork
argument_list|,
name|edgeProp
argument_list|)
expr_stmt|;
return|return
name|reduceWork
return|;
block|}
specifier|protected
name|void
name|setupReduceSink
parameter_list|(
name|GenSparkProcContext
name|context
parameter_list|,
name|ReduceWork
name|reduceWork
parameter_list|,
name|ReduceSinkOperator
name|reduceSink
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting up reduce sink: "
operator|+
name|reduceSink
operator|+
literal|" with following reduce work: "
operator|+
name|reduceWork
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// need to fill in information about the key and value in the reducer
name|GenMapRedUtils
operator|.
name|setKeyAndValueDesc
argument_list|(
name|reduceWork
argument_list|,
name|reduceSink
argument_list|)
expr_stmt|;
comment|// remember which parent belongs to which tag
name|reduceWork
operator|.
name|getTagToInput
argument_list|()
operator|.
name|put
argument_list|(
name|reduceSink
operator|.
name|getConf
argument_list|()
operator|.
name|getTag
argument_list|()
argument_list|,
name|context
operator|.
name|preceedingWork
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// remember the output name of the reduce sink
name|reduceSink
operator|.
name|getConf
argument_list|()
operator|.
name|setOutputName
argument_list|(
name|reduceWork
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MapWork
name|createMapWork
parameter_list|(
name|GenSparkProcContext
name|context
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|root
parameter_list|,
name|SparkWork
name|sparkWork
parameter_list|,
name|PrunedPartitionList
name|partitions
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
name|createMapWork
argument_list|(
name|context
argument_list|,
name|root
argument_list|,
name|sparkWork
argument_list|,
name|partitions
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|MapWork
name|createMapWork
parameter_list|(
name|GenSparkProcContext
name|context
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|root
parameter_list|,
name|SparkWork
name|sparkWork
parameter_list|,
name|PrunedPartitionList
name|partitions
parameter_list|,
name|boolean
name|deferSetup
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|root
operator|.
name|getParentOperators
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"AssertionError: expected root.getParentOperators() to be empty"
argument_list|)
expr_stmt|;
name|MapWork
name|mapWork
init|=
operator|new
name|MapWork
argument_list|(
literal|"Map "
operator|+
operator|(
operator|++
name|sequenceNumber
operator|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding map work ("
operator|+
name|mapWork
operator|.
name|getName
argument_list|()
operator|+
literal|") for "
operator|+
name|root
argument_list|)
expr_stmt|;
comment|// map work starts with table scan operators
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|root
operator|instanceof
name|TableScanOperator
argument_list|,
literal|"AssertionError: expected root to be an instance of TableScanOperator, but was "
operator|+
name|root
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|alias_id
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|parseContext
operator|!=
literal|null
operator|&&
name|context
operator|.
name|parseContext
operator|.
name|getTopOps
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|currentAliasID
range|:
name|context
operator|.
name|parseContext
operator|.
name|getTopOps
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|currOp
init|=
name|context
operator|.
name|parseContext
operator|.
name|getTopOps
argument_list|()
operator|.
name|get
argument_list|(
name|currentAliasID
argument_list|)
decl_stmt|;
if|if
condition|(
name|currOp
operator|==
name|root
condition|)
block|{
name|alias_id
operator|=
name|currentAliasID
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|alias_id
operator|==
literal|null
condition|)
name|alias_id
operator|=
operator|(
operator|(
name|TableScanOperator
operator|)
name|root
operator|)
operator|.
name|getConf
argument_list|()
operator|.
name|getAlias
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|deferSetup
condition|)
block|{
name|setupMapWork
argument_list|(
name|mapWork
argument_list|,
name|context
argument_list|,
name|partitions
argument_list|,
operator|(
name|TableScanOperator
operator|)
name|root
argument_list|,
name|alias_id
argument_list|)
expr_stmt|;
block|}
comment|// add new item to the Spark work
name|sparkWork
operator|.
name|add
argument_list|(
name|mapWork
argument_list|)
expr_stmt|;
return|return
name|mapWork
return|;
block|}
comment|// this method's main use is to help unit testing this class
specifier|protected
name|void
name|setupMapWork
parameter_list|(
name|MapWork
name|mapWork
parameter_list|,
name|GenSparkProcContext
name|context
parameter_list|,
name|PrunedPartitionList
name|partitions
parameter_list|,
name|TableScanOperator
name|root
parameter_list|,
name|String
name|alias_id
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// All the setup is done in GenMapRedUtils
name|GenMapRedUtils
operator|.
name|setMapWork
argument_list|(
name|mapWork
argument_list|,
name|context
operator|.
name|parseContext
argument_list|,
name|context
operator|.
name|inputs
argument_list|,
name|partitions
argument_list|,
name|root
argument_list|,
name|alias_id
argument_list|,
name|context
operator|.
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|collectOperators
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|op
parameter_list|,
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|opList
parameter_list|)
block|{
name|opList
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|child
range|:
name|op
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
name|collectOperators
argument_list|(
operator|(
name|Operator
argument_list|<
name|?
argument_list|>
operator|)
name|child
argument_list|,
name|opList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// removes any union operator and clones the plan
specifier|public
name|void
name|removeUnionOperators
parameter_list|(
name|GenSparkProcContext
name|context
parameter_list|,
name|BaseWork
name|work
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|roots
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// For MapWork, getAllRootOperators is not suitable, since it checks
comment|// getPathToAliases, and will return null if this is empty. Here we are
comment|// replacing getAliasToWork, so should use that information instead.
if|if
condition|(
name|work
operator|instanceof
name|MapWork
condition|)
block|{
name|roots
operator|.
name|addAll
argument_list|(
operator|(
operator|(
name|MapWork
operator|)
name|work
operator|)
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|roots
operator|.
name|addAll
argument_list|(
name|work
operator|.
name|getAllRootOperators
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|work
operator|.
name|getDummyOps
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|roots
operator|.
name|addAll
argument_list|(
name|work
operator|.
name|getDummyOps
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// need to clone the plan.
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|newRoots
init|=
name|SerializationUtilities
operator|.
name|cloneOperatorTree
argument_list|(
name|roots
argument_list|)
decl_stmt|;
comment|// Build a map to map the original FileSinkOperator and the cloned FileSinkOperators
comment|// This map is used for set the stats flag for the cloned FileSinkOperators in later process
name|Iterator
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|newRootsIt
init|=
name|newRoots
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|root
range|:
name|roots
control|)
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|newRoot
init|=
name|newRootsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|newOpQueue
init|=
operator|new
name|LinkedList
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|collectOperators
argument_list|(
name|newRoot
argument_list|,
name|newOpQueue
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|opQueue
init|=
operator|new
name|LinkedList
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|collectOperators
argument_list|(
name|root
argument_list|,
name|opQueue
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|newOpQueueIt
init|=
name|newOpQueue
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|op
range|:
name|opQueue
control|)
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|newOp
init|=
name|newOpQueueIt
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// We need to update rootToWorkMap in case the op is a key, since even
comment|// though we clone the op tree, we're still using the same MapWork/ReduceWork.
if|if
condition|(
name|context
operator|.
name|rootToWorkMap
operator|.
name|containsKey
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|context
operator|.
name|rootToWorkMap
operator|.
name|put
argument_list|(
name|newOp
argument_list|,
name|context
operator|.
name|rootToWorkMap
operator|.
name|get
argument_list|(
name|op
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Don't remove the old entry - in SparkPartitionPruningSink it still
comment|// refers to the old TS, and we need to lookup it later in
comment|// processPartitionPruningSink.
if|if
condition|(
name|op
operator|instanceof
name|FileSinkOperator
condition|)
block|{
name|List
argument_list|<
name|FileSinkOperator
argument_list|>
name|fileSinkList
init|=
name|context
operator|.
name|fileSinkMap
operator|.
name|get
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileSinkList
operator|==
literal|null
condition|)
block|{
name|fileSinkList
operator|=
operator|new
name|LinkedList
argument_list|<
name|FileSinkOperator
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|fileSinkList
operator|.
name|add
argument_list|(
operator|(
name|FileSinkOperator
operator|)
name|newOp
argument_list|)
expr_stmt|;
name|context
operator|.
name|fileSinkMap
operator|.
name|put
argument_list|(
operator|(
name|FileSinkOperator
operator|)
name|op
argument_list|,
name|fileSinkList
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|instanceof
name|SparkPartitionPruningSinkOperator
condition|)
block|{
name|SparkPartitionPruningSinkOperator
name|oldPruningSink
init|=
operator|(
name|SparkPartitionPruningSinkOperator
operator|)
name|op
decl_stmt|;
name|SparkPartitionPruningSinkOperator
name|newPruningSink
init|=
operator|(
name|SparkPartitionPruningSinkOperator
operator|)
name|newOp
decl_stmt|;
name|newPruningSink
operator|.
name|getConf
argument_list|()
operator|.
name|setTableScan
argument_list|(
name|oldPruningSink
operator|.
name|getConf
argument_list|()
operator|.
name|getTableScan
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|pruningSinkSet
operator|.
name|add
argument_list|(
name|newPruningSink
argument_list|)
expr_stmt|;
name|context
operator|.
name|pruningSinkSet
operator|.
name|remove
argument_list|(
name|oldPruningSink
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// we're cloning the operator plan but we're retaining the original work. That means
comment|// that root operators have to be replaced with the cloned ops. The replacement map
comment|// tells you what that mapping is.
name|Map
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|,
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|replacementMap
init|=
operator|new
name|HashMap
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|,
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// there's some special handling for dummyOps required. Mapjoins won't be properly
comment|// initialized if their dummy parents aren't initialized. Since we cloned the plan
comment|// we need to replace the dummy operators in the work with the cloned ones.
name|List
argument_list|<
name|HashTableDummyOperator
argument_list|>
name|dummyOps
init|=
operator|new
name|LinkedList
argument_list|<
name|HashTableDummyOperator
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|it
init|=
name|newRoots
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|orig
range|:
name|roots
control|)
block|{
name|Set
argument_list|<
name|FileSinkOperator
argument_list|>
name|fsOpSet
init|=
name|OperatorUtils
operator|.
name|findOperators
argument_list|(
name|orig
argument_list|,
name|FileSinkOperator
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|FileSinkOperator
name|fsOp
range|:
name|fsOpSet
control|)
block|{
name|context
operator|.
name|fileSinkSet
operator|.
name|remove
argument_list|(
name|fsOp
argument_list|)
expr_stmt|;
block|}
name|Operator
argument_list|<
name|?
argument_list|>
name|newRoot
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|newRoot
operator|instanceof
name|HashTableDummyOperator
condition|)
block|{
name|dummyOps
operator|.
name|add
argument_list|(
operator|(
name|HashTableDummyOperator
operator|)
name|newRoot
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|replacementMap
operator|.
name|put
argument_list|(
name|orig
argument_list|,
name|newRoot
argument_list|)
expr_stmt|;
block|}
block|}
comment|// now we remove all the unions. we throw away any branch that's not reachable from
comment|// the current set of roots. The reason is that those branches will be handled in
comment|// different tasks.
name|Deque
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|operators
init|=
operator|new
name|LinkedList
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|operators
operator|.
name|addAll
argument_list|(
name|newRoots
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|seen
init|=
operator|new
name|HashSet
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|operators
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|current
init|=
name|operators
operator|.
name|pop
argument_list|()
decl_stmt|;
name|seen
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|instanceof
name|FileSinkOperator
condition|)
block|{
name|FileSinkOperator
name|fileSink
init|=
operator|(
name|FileSinkOperator
operator|)
name|current
decl_stmt|;
comment|// remember it for additional processing later
name|context
operator|.
name|fileSinkSet
operator|.
name|add
argument_list|(
name|fileSink
argument_list|)
expr_stmt|;
name|FileSinkDesc
name|desc
init|=
name|fileSink
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|desc
operator|.
name|getDirName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FileSinkDesc
argument_list|>
name|linked
decl_stmt|;
if|if
condition|(
operator|!
name|context
operator|.
name|linkedFileSinks
operator|.
name|containsKey
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|linked
operator|=
operator|new
name|ArrayList
argument_list|<
name|FileSinkDesc
argument_list|>
argument_list|()
expr_stmt|;
name|context
operator|.
name|linkedFileSinks
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|linked
argument_list|)
expr_stmt|;
block|}
name|linked
operator|=
name|context
operator|.
name|linkedFileSinks
operator|.
name|get
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|linked
operator|.
name|add
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setLinkedFileSinkDesc
argument_list|(
name|linked
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|current
operator|instanceof
name|UnionOperator
condition|)
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|parent
init|=
literal|null
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|op
range|:
name|current
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
if|if
condition|(
name|seen
operator|.
name|contains
argument_list|(
name|op
argument_list|)
condition|)
block|{
operator|++
name|count
expr_stmt|;
name|parent
operator|=
name|op
expr_stmt|;
block|}
block|}
comment|// we should have been able to reach the union from only one side.
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|count
operator|<=
literal|1
argument_list|,
literal|"AssertionError: expected count to be<= 1, but was "
operator|+
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
comment|// root operator is union (can happen in reducers)
name|replacementMap
operator|.
name|put
argument_list|(
name|current
argument_list|,
name|current
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|removeChildAndAdoptItsChildren
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|current
operator|instanceof
name|FileSinkOperator
operator|||
name|current
operator|instanceof
name|ReduceSinkOperator
condition|)
block|{
name|current
operator|.
name|setChildOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|operators
operator|.
name|addAll
argument_list|(
name|current
operator|.
name|getChildOperators
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|work
operator|.
name|setDummyOps
argument_list|(
name|dummyOps
argument_list|)
expr_stmt|;
name|work
operator|.
name|replaceRoots
argument_list|(
name|replacementMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|processFileSink
parameter_list|(
name|GenSparkProcContext
name|context
parameter_list|,
name|FileSinkOperator
name|fileSink
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ParseContext
name|parseContext
init|=
name|context
operator|.
name|parseContext
decl_stmt|;
name|boolean
name|isInsertTable
init|=
comment|// is INSERT OVERWRITE TABLE
name|GenMapRedUtils
operator|.
name|isInsertInto
argument_list|(
name|parseContext
argument_list|,
name|fileSink
argument_list|)
decl_stmt|;
name|HiveConf
name|hconf
init|=
name|parseContext
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|boolean
name|chDir
init|=
name|GenMapRedUtils
operator|.
name|isMergeRequired
argument_list|(
name|context
operator|.
name|moveTask
argument_list|,
name|hconf
argument_list|,
name|fileSink
argument_list|,
name|context
operator|.
name|currentTask
argument_list|,
name|isInsertTable
argument_list|)
decl_stmt|;
comment|// Set stats config for FileSinkOperators which are cloned from the fileSink
name|List
argument_list|<
name|FileSinkOperator
argument_list|>
name|fileSinkList
init|=
name|context
operator|.
name|fileSinkMap
operator|.
name|get
argument_list|(
name|fileSink
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileSinkList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FileSinkOperator
name|fsOp
range|:
name|fileSinkList
control|)
block|{
name|fsOp
operator|.
name|getConf
argument_list|()
operator|.
name|setGatherStats
argument_list|(
name|fileSink
operator|.
name|getConf
argument_list|()
operator|.
name|isGatherStats
argument_list|()
argument_list|)
expr_stmt|;
name|fsOp
operator|.
name|getConf
argument_list|()
operator|.
name|setStatsReliable
argument_list|(
name|fileSink
operator|.
name|getConf
argument_list|()
operator|.
name|isStatsReliable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Path
name|finalName
init|=
name|createMoveTask
argument_list|(
name|context
operator|.
name|currentTask
argument_list|,
name|chDir
argument_list|,
name|fileSink
argument_list|,
name|parseContext
argument_list|,
name|context
operator|.
name|moveTask
argument_list|,
name|hconf
argument_list|,
name|context
operator|.
name|dependencyTask
argument_list|)
decl_stmt|;
if|if
condition|(
name|chDir
condition|)
block|{
comment|// Merge the files in the destination table/partitions by creating Map-only merge job
comment|// If underlying data is RCFile a RCFileBlockMerge task would be created.
name|LOG
operator|.
name|info
argument_list|(
literal|"using CombineHiveInputformat for the merge job"
argument_list|)
expr_stmt|;
name|GenMapRedUtils
operator|.
name|createMRWorkForMergingFiles
argument_list|(
name|fileSink
argument_list|,
name|finalName
argument_list|,
name|context
operator|.
name|dependencyTask
argument_list|,
name|context
operator|.
name|moveTask
argument_list|,
name|hconf
argument_list|,
name|context
operator|.
name|currentTask
argument_list|,
name|parseContext
operator|.
name|getQueryState
argument_list|()
operator|.
name|getLineageState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|FetchTask
name|fetchTask
init|=
name|parseContext
operator|.
name|getFetchTask
argument_list|()
decl_stmt|;
if|if
condition|(
name|fetchTask
operator|!=
literal|null
operator|&&
name|context
operator|.
name|currentTask
operator|.
name|getNumChild
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|fetchTask
operator|.
name|isFetchFrom
argument_list|(
name|fileSink
operator|.
name|getConf
argument_list|()
argument_list|)
condition|)
block|{
name|context
operator|.
name|currentTask
operator|.
name|setFetchSource
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Create and add any dependent move tasks.    *    * This is forked from {@link GenMapRedUtils}. The difference is that it doesn't check    * 'isLinkedFileSink' and does not set parent dir for the linked file sinks.    */
specifier|public
specifier|static
name|Path
name|createMoveTask
parameter_list|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|currTask
parameter_list|,
name|boolean
name|chDir
parameter_list|,
name|FileSinkOperator
name|fsOp
parameter_list|,
name|ParseContext
name|parseCtx
parameter_list|,
name|List
argument_list|<
name|Task
argument_list|<
name|MoveWork
argument_list|>
argument_list|>
name|mvTasks
parameter_list|,
name|HiveConf
name|hconf
parameter_list|,
name|DependencyCollectionTask
name|dependencyTask
parameter_list|)
block|{
name|Path
name|dest
init|=
literal|null
decl_stmt|;
name|FileSinkDesc
name|fileSinkDesc
init|=
name|fsOp
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|chDir
condition|)
block|{
name|dest
operator|=
name|fsOp
operator|.
name|getConf
argument_list|()
operator|.
name|getFinalDirName
argument_list|()
expr_stmt|;
comment|// generate the temporary file
comment|// it must be on the same file system as the current destination
name|Context
name|baseCtx
init|=
name|parseCtx
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|Path
name|tmpDir
init|=
name|baseCtx
operator|.
name|getExternalTmpPath
argument_list|(
name|dest
argument_list|)
decl_stmt|;
comment|// Change all the linked file sink descriptors
if|if
condition|(
name|fileSinkDesc
operator|.
name|getLinkedFileSinkDesc
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FileSinkDesc
name|fsConf
range|:
name|fileSinkDesc
operator|.
name|getLinkedFileSinkDesc
argument_list|()
control|)
block|{
name|fsConf
operator|.
name|setDirName
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fileSinkDesc
operator|.
name|setDirName
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
block|}
block|}
name|Task
argument_list|<
name|MoveWork
argument_list|>
name|mvTask
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|chDir
condition|)
block|{
name|mvTask
operator|=
name|GenMapRedUtils
operator|.
name|findMoveTaskForFsopOutput
argument_list|(
name|mvTasks
argument_list|,
name|fileSinkDesc
operator|.
name|getFinalDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Set the move task to be dependent on the current task
if|if
condition|(
name|mvTask
operator|!=
literal|null
condition|)
block|{
name|GenMapRedUtils
operator|.
name|addDependentMoveTasks
argument_list|(
name|mvTask
argument_list|,
name|hconf
argument_list|,
name|currTask
argument_list|,
name|dependencyTask
argument_list|)
expr_stmt|;
block|}
return|return
name|dest
return|;
block|}
comment|/**    * Populate partition pruning information from the pruning sink operator to the    * target MapWork (the MapWork for the big table side). The information include the source table    * name, column name, and partition key expression. It also set up the temporary path used to    * communicate between the target MapWork and source BaseWork.    *    * Here "source" refers to the small table side, while "target" refers to the big    * table side.    *    * @param context the spark context.    * @param pruningSink the pruner sink operator being processed.    */
specifier|public
name|void
name|processPartitionPruningSink
parameter_list|(
name|GenSparkProcContext
name|context
parameter_list|,
name|SparkPartitionPruningSinkOperator
name|pruningSink
parameter_list|)
block|{
name|SparkPartitionPruningSinkDesc
name|desc
init|=
name|pruningSink
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|TableScanOperator
name|ts
init|=
name|desc
operator|.
name|getTableScan
argument_list|()
decl_stmt|;
name|MapWork
name|targetWork
init|=
operator|(
name|MapWork
operator|)
name|context
operator|.
name|rootToWorkMap
operator|.
name|get
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|targetWork
operator|!=
literal|null
argument_list|,
literal|"No targetWork found for tablescan "
operator|+
name|ts
argument_list|)
expr_stmt|;
name|String
name|sourceId
init|=
name|pruningSink
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
comment|// set up temporary path to communicate between the small/big table
name|Path
name|tmpPath
init|=
name|targetWork
operator|.
name|getTmpPathForPartitionPruning
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmpPath
operator|==
literal|null
condition|)
block|{
name|tmpPath
operator|=
name|getDPPOutputPath
argument_list|(
name|context
operator|.
name|parseContext
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|targetWork
operator|.
name|setTmpPathForPartitionPruning
argument_list|(
name|tmpPath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting tmp path between source work and target work:\n"
operator|+
name|tmpPath
argument_list|)
expr_stmt|;
block|}
name|desc
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpPath
argument_list|,
name|sourceId
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setTargetMapWork
argument_list|(
name|targetWork
argument_list|)
expr_stmt|;
comment|// store table descriptor in map-targetWork
if|if
condition|(
operator|!
name|targetWork
operator|.
name|getEventSourceTableDescMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|sourceId
argument_list|)
condition|)
block|{
name|targetWork
operator|.
name|getEventSourceTableDescMap
argument_list|()
operator|.
name|put
argument_list|(
name|sourceId
argument_list|,
operator|new
name|LinkedList
argument_list|<
name|TableDesc
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|TableDesc
argument_list|>
name|tables
init|=
name|targetWork
operator|.
name|getEventSourceTableDescMap
argument_list|()
operator|.
name|get
argument_list|(
name|sourceId
argument_list|)
decl_stmt|;
name|tables
operator|.
name|add
argument_list|(
name|pruningSink
operator|.
name|getConf
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
comment|// store column name in map-targetWork
if|if
condition|(
operator|!
name|targetWork
operator|.
name|getEventSourceColumnNameMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|sourceId
argument_list|)
condition|)
block|{
name|targetWork
operator|.
name|getEventSourceColumnNameMap
argument_list|()
operator|.
name|put
argument_list|(
name|sourceId
argument_list|,
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
name|targetWork
operator|.
name|getEventSourceColumnNameMap
argument_list|()
operator|.
name|get
argument_list|(
name|sourceId
argument_list|)
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|desc
operator|.
name|getTargetColumnName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|targetWork
operator|.
name|getEventSourceColumnTypeMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|sourceId
argument_list|)
condition|)
block|{
name|targetWork
operator|.
name|getEventSourceColumnTypeMap
argument_list|()
operator|.
name|put
argument_list|(
name|sourceId
argument_list|,
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|columnTypes
init|=
name|targetWork
operator|.
name|getEventSourceColumnTypeMap
argument_list|()
operator|.
name|get
argument_list|(
name|sourceId
argument_list|)
decl_stmt|;
name|columnTypes
operator|.
name|add
argument_list|(
name|desc
operator|.
name|getTargetColumnType
argument_list|()
argument_list|)
expr_stmt|;
comment|// store partition key expr in map-targetWork
if|if
condition|(
operator|!
name|targetWork
operator|.
name|getEventSourcePartKeyExprMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|sourceId
argument_list|)
condition|)
block|{
name|targetWork
operator|.
name|getEventSourcePartKeyExprMap
argument_list|()
operator|.
name|put
argument_list|(
name|sourceId
argument_list|,
operator|new
name|LinkedList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keys
init|=
name|targetWork
operator|.
name|getEventSourcePartKeyExprMap
argument_list|()
operator|.
name|get
argument_list|(
name|sourceId
argument_list|)
decl_stmt|;
name|keys
operator|.
name|add
argument_list|(
name|desc
operator|.
name|getTargetPartKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Path
name|getDPPOutputPath
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|context
operator|.
name|getMRScratchDir
argument_list|()
argument_list|,
literal|"_dpp_output_"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SparkEdgeProperty
name|getEdgeProperty
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|ReduceSinkOperator
name|reduceSink
parameter_list|,
name|ReduceWork
name|reduceWork
parameter_list|)
throws|throws
name|SemanticException
block|{
name|boolean
name|useSparkGroupBy
init|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SPARK_USE_GROUPBY_SHUFFLE
argument_list|)
decl_stmt|;
name|SparkEdgeProperty
name|edgeProperty
init|=
operator|new
name|SparkEdgeProperty
argument_list|(
name|SparkEdgeProperty
operator|.
name|SHUFFLE_NONE
argument_list|)
decl_stmt|;
name|edgeProperty
operator|.
name|setNumPartitions
argument_list|(
name|reduceWork
operator|.
name|getNumReduceTasks
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|sortOrder
init|=
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|reduceSink
operator|.
name|getConf
argument_list|()
operator|.
name|getOrder
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasGBYOperator
argument_list|(
name|reduceSink
argument_list|)
condition|)
block|{
name|edgeProperty
operator|.
name|setShuffleGroup
argument_list|()
expr_stmt|;
comment|// test if the group by needs partition level sort, if so, use the MR style shuffle
comment|// SHUFFLE_SORT shouldn't be used for this purpose, see HIVE-8542
if|if
condition|(
operator|!
name|useSparkGroupBy
operator|||
operator|(
operator|!
name|sortOrder
operator|.
name|isEmpty
argument_list|()
operator|&&
name|groupByNeedParLevelOrder
argument_list|(
name|reduceSink
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|useSparkGroupBy
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"hive.spark.use.groupby.shuffle is off. Use repartition shuffle instead."
argument_list|)
expr_stmt|;
block|}
name|edgeProperty
operator|.
name|setMRShuffle
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|reduceWork
operator|.
name|getReducer
argument_list|()
operator|instanceof
name|JoinOperator
condition|)
block|{
comment|//reduce-side join, use MR-style shuffle
name|edgeProperty
operator|.
name|setMRShuffle
argument_list|()
expr_stmt|;
block|}
comment|//If its a FileSink to bucketed files, also use MR-style shuffle to
comment|// get compatible taskId for bucket-name
name|FileSinkOperator
name|fso
init|=
name|getChildOperator
argument_list|(
name|reduceWork
operator|.
name|getReducer
argument_list|()
argument_list|,
name|FileSinkOperator
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|fso
operator|!=
literal|null
condition|)
block|{
name|String
name|bucketCount
init|=
name|fso
operator|.
name|getConf
argument_list|()
operator|.
name|getTableInfo
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
name|hive_metastoreConstants
operator|.
name|BUCKET_COUNT
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucketCount
operator|!=
literal|null
operator|&&
name|Integer
operator|.
name|parseInt
argument_list|(
name|bucketCount
argument_list|)
operator|>
literal|1
condition|)
block|{
name|edgeProperty
operator|.
name|setMRShuffle
argument_list|()
expr_stmt|;
block|}
block|}
comment|// test if we need partition/global order, SHUFFLE_SORT should only be used for global order
if|if
condition|(
name|edgeProperty
operator|.
name|isShuffleNone
argument_list|()
operator|&&
operator|!
name|sortOrder
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|reduceSink
operator|.
name|getConf
argument_list|()
operator|.
name|getPartitionCols
argument_list|()
operator|==
literal|null
operator|||
name|reduceSink
operator|.
name|getConf
argument_list|()
operator|.
name|getPartitionCols
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|isSame
argument_list|(
name|reduceSink
operator|.
name|getConf
argument_list|()
operator|.
name|getPartitionCols
argument_list|()
argument_list|,
name|reduceSink
operator|.
name|getConf
argument_list|()
operator|.
name|getKeyCols
argument_list|()
argument_list|)
operator|)
operator|&&
name|reduceSink
operator|.
name|getConf
argument_list|()
operator|.
name|hasOrderBy
argument_list|()
condition|)
block|{
name|edgeProperty
operator|.
name|setShuffleSort
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|edgeProperty
operator|.
name|setMRShuffle
argument_list|()
expr_stmt|;
block|}
block|}
comment|// simple distribute-by goes here
if|if
condition|(
name|edgeProperty
operator|.
name|isShuffleNone
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|useSparkGroupBy
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"hive.spark.use.groupby.shuffle is off. Use repartition shuffle instead."
argument_list|)
expr_stmt|;
name|edgeProperty
operator|.
name|setMRShuffle
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|edgeProperty
operator|.
name|setShuffleGroup
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|edgeProperty
return|;
block|}
comment|/**    * Test if we need partition level order for group by query.    * GBY needs partition level order when distinct is present. Therefore, if the sorting    * keys, partitioning keys and grouping keys are the same, we ignore the sort and use    * GroupByShuffler to shuffle the data. In this case a group-by transformation should be    * sufficient to produce the correct results, i.e. data is properly grouped by the keys    * but keys are not guaranteed to be sorted.    */
specifier|private
specifier|static
name|boolean
name|groupByNeedParLevelOrder
parameter_list|(
name|ReduceSinkOperator
name|reduceSinkOperator
parameter_list|)
block|{
comment|// whether we have to enforce sort anyway, e.g. in case of RS deduplication
if|if
condition|(
name|reduceSinkOperator
operator|.
name|getConf
argument_list|()
operator|.
name|isDeduplicated
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|children
init|=
name|reduceSinkOperator
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
operator|&&
name|children
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|GroupByOperator
condition|)
block|{
name|GroupByOperator
name|child
init|=
operator|(
name|GroupByOperator
operator|)
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSame
argument_list|(
name|reduceSinkOperator
operator|.
name|getConf
argument_list|()
operator|.
name|getKeyCols
argument_list|()
argument_list|,
name|reduceSinkOperator
operator|.
name|getConf
argument_list|()
operator|.
name|getPartitionCols
argument_list|()
argument_list|)
operator|&&
name|reduceSinkOperator
operator|.
name|getConf
argument_list|()
operator|.
name|getKeyCols
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|child
operator|.
name|getConf
argument_list|()
operator|.
name|getKeys
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Test if two lists of ExprNodeDesc are semantically same.    */
specifier|private
specifier|static
name|boolean
name|isSame
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|list1
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|list2
parameter_list|)
block|{
if|if
condition|(
name|list1
operator|!=
name|list2
condition|)
block|{
if|if
condition|(
name|list1
operator|!=
literal|null
operator|&&
name|list2
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|list1
operator|.
name|size
argument_list|()
operator|!=
name|list2
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list1
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|list1
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isSame
argument_list|(
name|list2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getChildOperator
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|root
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|klazz
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|root
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|HashSet
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|visited
init|=
operator|new
name|HashSet
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Stack
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|stack
init|=
operator|new
name|Stack
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|visited
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|op
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|klazz
operator|.
name|isInstance
argument_list|(
name|op
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|op
return|;
block|}
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|childOperators
init|=
name|op
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|childOp
range|:
name|childOperators
control|)
block|{
if|if
condition|(
operator|!
name|visited
operator|.
name|contains
argument_list|(
name|childOp
argument_list|)
condition|)
block|{
name|stack
operator|.
name|push
argument_list|(
name|childOp
argument_list|)
expr_stmt|;
name|visited
operator|.
name|add
argument_list|(
name|childOp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Fill MapWork with 'local' work and bucket information for SMB Join.    * @param context context, containing references to MapWorks and their SMB information.    * @throws SemanticException    */
specifier|public
name|void
name|annotateMapWork
parameter_list|(
name|GenSparkProcContext
name|context
parameter_list|)
throws|throws
name|SemanticException
block|{
for|for
control|(
name|SMBMapJoinOperator
name|smbMapJoinOp
range|:
name|context
operator|.
name|smbMapJoinCtxMap
operator|.
name|keySet
argument_list|()
control|)
block|{
comment|//initialize mapwork with smbMapJoin information.
name|SparkSMBMapJoinInfo
name|smbMapJoinInfo
init|=
name|context
operator|.
name|smbMapJoinCtxMap
operator|.
name|get
argument_list|(
name|smbMapJoinOp
argument_list|)
decl_stmt|;
name|MapWork
name|work
init|=
name|smbMapJoinInfo
operator|.
name|mapWork
decl_stmt|;
name|SparkSortMergeJoinFactory
operator|.
name|annotateMapWork
argument_list|(
name|context
argument_list|,
name|work
argument_list|,
name|smbMapJoinOp
argument_list|,
operator|(
name|TableScanOperator
operator|)
name|smbMapJoinInfo
operator|.
name|bigTableRootOp
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|smallTableRootOp
range|:
name|smbMapJoinInfo
operator|.
name|smallTableRootOps
control|)
block|{
name|SparkSortMergeJoinFactory
operator|.
name|annotateMapWork
argument_list|(
name|context
argument_list|,
name|work
argument_list|,
name|smbMapJoinOp
argument_list|,
operator|(
name|TableScanOperator
operator|)
name|smallTableRootOp
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|int
name|getNextSeqNumber
parameter_list|()
block|{
return|return
operator|++
name|sequenceNumber
return|;
block|}
comment|// test if we need group-by shuffle
specifier|private
specifier|static
name|boolean
name|hasGBYOperator
parameter_list|(
name|ReduceSinkOperator
name|rs
parameter_list|)
block|{
if|if
condition|(
name|rs
operator|.
name|getChildOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|rs
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|GroupByOperator
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|rs
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ForwardOperator
condition|)
block|{
for|for
control|(
name|Operator
name|grandChild
range|:
name|rs
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|grandChild
operator|instanceof
name|GroupByOperator
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

