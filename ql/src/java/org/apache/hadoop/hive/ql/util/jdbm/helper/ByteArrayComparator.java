begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  * JDBM LICENSE v1.00  *  * Redistribution and use of this software and associated documentation  * ("Software"), with or without modification, are permitted provided  * that the following conditions are met:  *  * 1. Redistributions of source code must retain copyright  *    statements and notices.  Redistributions must also contain a  *    copy of this document.  *  * 2. Redistributions in binary form must reproduce the  *    above copyright notice, this list of conditions and the  *    following disclaimer in the documentation and/or other  *    materials provided with the distribution.  *  * 3. The name "JDBM" must not be used to endorse or promote  *    products derived from this Software without prior written  *    permission of Cees de Groot.  For written permission,  *    please contact cg@cdegroot.com.  *  * 4. Products derived from this Software may not be called "JDBM"  *    nor may "JDBM" appear in their names without prior written  *    permission of Cees de Groot.  *  * 5. Due credit should be given to the JDBM Project  *    (http://jdbm.sourceforge.net/).  *  * THIS SOFTWARE IS PROVIDED BY THE JDBM PROJECT AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT  * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND  * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL  * CEES DE GROOT OR ANY CONTRIBUTORS BE LIABLE FOR ANY DIRECT,  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  *  * Copyright 2001 (C) Alex Boisvert. All Rights Reserved.  * Contributions are Copyright (C) 2001 by their associated contributors.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|helper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_comment
comment|/**  * Comparator for byte arrays.  *  * @author<a href="mailto:boisvert@intalio.com">Alex Boisvert</a>  * @version $Id: ByteArrayComparator.java,v 1.4 2002/05/31 06:33:20 boisvert Exp $  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ByteArrayComparator
implements|implements
name|Comparator
implements|,
name|Serializable
block|{
comment|/**      * Version id for serialization.      */
specifier|final
specifier|static
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/**      * Compare two objects.      *      * @param obj1 First object      * @param obj2 Second object      * @return a positive integer if obj1> obj2, 0 if obj1 == obj2,      *         and a negative integer if obj1< obj2      */
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|obj1
parameter_list|,
name|Object
name|obj2
parameter_list|)
block|{
if|if
condition|(
name|obj1
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Argument 'obj1' is null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|obj2
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Argument 'obj2' is null"
argument_list|)
throw|;
block|}
return|return
name|compareByteArray
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|obj1
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|obj2
argument_list|)
return|;
block|}
comment|/**      * Compare two byte arrays.      */
specifier|public
specifier|static
name|int
name|compareByteArray
parameter_list|(
name|byte
index|[]
name|thisKey
parameter_list|,
name|byte
index|[]
name|otherKey
parameter_list|)
block|{
name|int
name|len
init|=
name|Math
operator|.
name|min
argument_list|(
name|thisKey
operator|.
name|length
argument_list|,
name|otherKey
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// compare the byte arrays
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|thisKey
index|[
name|i
index|]
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|otherKey
index|[
name|i
index|]
operator|>=
literal|0
condition|)
block|{
comment|// both positive
if|if
condition|(
name|thisKey
index|[
name|i
index|]
operator|<
name|otherKey
index|[
name|i
index|]
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|thisKey
index|[
name|i
index|]
operator|>
name|otherKey
index|[
name|i
index|]
condition|)
block|{
return|return
literal|1
return|;
block|}
block|}
else|else
block|{
comment|// otherKey is negative => greater (because MSB is 1)
return|return
operator|-
literal|1
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|otherKey
index|[
name|i
index|]
operator|>=
literal|0
condition|)
block|{
comment|// thisKey is negative => greater (because MSB is 1)
return|return
literal|1
return|;
block|}
else|else
block|{
comment|// both negative
if|if
condition|(
name|thisKey
index|[
name|i
index|]
operator|<
name|otherKey
index|[
name|i
index|]
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|thisKey
index|[
name|i
index|]
operator|>
name|otherKey
index|[
name|i
index|]
condition|)
block|{
return|return
literal|1
return|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|thisKey
operator|.
name|length
operator|==
name|otherKey
operator|.
name|length
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|thisKey
operator|.
name|length
operator|<
name|otherKey
operator|.
name|length
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|1
return|;
block|}
block|}
end_class

end_unit

