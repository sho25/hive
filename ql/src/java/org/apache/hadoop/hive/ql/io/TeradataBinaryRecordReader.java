begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Hex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|EndianUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Seekable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodecFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_comment
comment|/**  * The TeradataBinaryRecordReader reads the record from Teradata binary files.  *  * In the Teradata Binary File, each record constructs as below:  * The first 2 bytes represents the length of the bytes next for this record.  * Then the null bitmap whose length is depended on the number of fields is followed.  * Then each field of the record is serialized into bytes - the serialization strategy is decided by the type of field.  * At last, there is one byte (0x0a) in the end of the record.  *  * This InputFormat currently doesn't support the split of the file.  * Teradata binary files are using little endian.  */
end_comment

begin_class
specifier|public
class|class
name|TeradataBinaryRecordReader
implements|implements
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|BytesWritable
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TeradataBinaryRecordReader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|CompressionCodecFactory
name|compressionCodecs
init|=
literal|null
decl_stmt|;
specifier|private
name|InputStream
name|in
decl_stmt|;
specifier|private
name|long
name|start
decl_stmt|;
specifier|private
name|long
name|pos
decl_stmt|;
specifier|private
name|long
name|end
decl_stmt|;
specifier|private
specifier|final
name|Seekable
name|filePosition
decl_stmt|;
specifier|private
name|CompressionCodec
name|codec
decl_stmt|;
specifier|static
specifier|final
name|String
name|TD_ROW_LENGTH
init|=
literal|"teradata.row.length"
decl_stmt|;
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|TD_ROW_LENGTH_TO_BYTE_NUM
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"64kb"
argument_list|,
literal|2
argument_list|,
literal|"1mb"
argument_list|,
literal|4
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|DEFAULT_TD_ROW_LENGTH
init|=
literal|"64kb"
decl_stmt|;
specifier|static
specifier|final
name|String
name|TD_ROW_LENGTH_1MB
init|=
literal|"1mb"
decl_stmt|;
specifier|private
name|byte
index|[]
name|recordLengthBytes
decl_stmt|;
specifier|private
name|byte
index|[]
name|valueByteArray
init|=
operator|new
name|byte
index|[
literal|65536
index|]
decl_stmt|;
comment|// max byte array
specifier|private
name|byte
index|[]
name|endOfRecord
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
specifier|private
name|int
name|recordLength
init|=
literal|0
decl_stmt|;
specifier|public
name|TeradataBinaryRecordReader
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|FileSplit
name|fileSplit
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"initialize the TeradataBinaryRecordReader"
argument_list|)
expr_stmt|;
name|String
name|rowLength
init|=
name|job
operator|.
name|get
argument_list|(
name|TD_ROW_LENGTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowLength
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No table property in JobConf. Try to recover the table directly"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PartitionDesc
argument_list|>
name|partitionDescMap
init|=
name|Utilities
operator|.
name|getMapRedWork
argument_list|(
name|job
argument_list|)
operator|.
name|getMapWork
argument_list|()
operator|.
name|getAliasToPartnInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|Utilities
operator|.
name|getMapRedWork
argument_list|(
name|job
argument_list|)
operator|.
name|getMapWork
argument_list|()
operator|.
name|getAliasToPartnInfo
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|format
argument_list|(
literal|"the current alias: %s"
argument_list|,
name|alias
argument_list|)
argument_list|)
expr_stmt|;
name|rowLength
operator|=
name|partitionDescMap
operator|.
name|get
argument_list|(
name|alias
argument_list|)
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
name|TD_ROW_LENGTH
argument_list|)
expr_stmt|;
if|if
condition|(
name|rowLength
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|rowLength
operator|==
literal|null
condition|)
block|{
name|rowLength
operator|=
name|DEFAULT_TD_ROW_LENGTH
expr_stmt|;
block|}
else|else
block|{
name|rowLength
operator|=
name|rowLength
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|TD_ROW_LENGTH_TO_BYTE_NUM
operator|.
name|containsKey
argument_list|(
name|rowLength
argument_list|)
condition|)
block|{
name|recordLengthBytes
operator|=
operator|new
name|byte
index|[
name|TD_ROW_LENGTH_TO_BYTE_NUM
operator|.
name|get
argument_list|(
name|rowLength
argument_list|)
index|]
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|format
argument_list|(
literal|"%s doesn't support the value %s, the supported values are %s"
argument_list|,
name|TD_ROW_LENGTH
argument_list|,
name|rowLength
argument_list|,
name|TD_ROW_LENGTH_TO_BYTE_NUM
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|start
operator|=
name|fileSplit
operator|.
name|getStart
argument_list|()
expr_stmt|;
name|end
operator|=
name|start
operator|+
name|fileSplit
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|format
argument_list|(
literal|"The start of the file split is: %s"
argument_list|,
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|format
argument_list|(
literal|"The end of the file split is: %s"
argument_list|,
name|end
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
name|fileSplit
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|compressionCodecs
operator|=
operator|new
name|CompressionCodecFactory
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|codec
operator|=
name|compressionCodecs
operator|.
name|getCodec
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|file
operator|.
name|getFileSystem
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|fileIn
init|=
name|fs
operator|.
name|open
argument_list|(
name|fileSplit
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
comment|/* currently the TeradataBinaryRecord file doesn't support file split at all */
name|filePosition
operator|=
name|fileIn
expr_stmt|;
if|if
condition|(
name|isCompressedInput
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|format
argument_list|(
literal|"Input file is compressed. Using compression code %s"
argument_list|,
name|codec
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|=
name|codec
operator|.
name|createInputStream
argument_list|(
name|fileIn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The input file is not compressed"
argument_list|)
expr_stmt|;
name|in
operator|=
name|fileIn
expr_stmt|;
block|}
name|pos
operator|=
name|start
expr_stmt|;
block|}
comment|/**    * Reads the next key/value pair from the input for processing.    *    * @param key the key to read data into    * @param value the value to read data into    * @return true iff a key/value was read, false if at EOF    */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|next
parameter_list|(
name|NullWritable
name|key
parameter_list|,
name|BytesWritable
name|value
parameter_list|)
throws|throws
name|IOException
block|{
comment|/* read the record length */
name|int
name|lengthExpected
init|=
name|recordLengthBytes
operator|.
name|length
decl_stmt|;
name|int
name|hasConsumed
init|=
name|readExpectedBytes
argument_list|(
name|recordLengthBytes
argument_list|,
name|lengthExpected
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasConsumed
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reach the End of File. No more record"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|hasConsumed
operator|<
name|lengthExpected
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|format
argument_list|(
literal|"We expect %s bytes for the record length but read %d byte and reach the End of File."
argument_list|,
name|lengthExpected
argument_list|,
name|hasConsumed
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|format
argument_list|(
literal|"The current position in the file : %s"
argument_list|,
name|getFilePosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|format
argument_list|(
literal|"The current consumed bytes: %s"
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|format
argument_list|(
literal|"The bytes for the current record is: %s"
argument_list|,
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|recordLengthBytes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"When reading the record length, reach the unexpected end of file."
argument_list|)
throw|;
block|}
comment|/* get the record contend length to prepare to read the content */
name|recordLength
operator|=
name|EndianUtils
operator|.
name|readSwappedUnsignedShort
argument_list|(
name|recordLengthBytes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|lengthExpected
expr_stmt|;
comment|/* read the record content */
name|lengthExpected
operator|=
name|recordLength
expr_stmt|;
name|hasConsumed
operator|=
name|readExpectedBytes
argument_list|(
name|valueByteArray
argument_list|,
name|lengthExpected
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasConsumed
operator|<
name|lengthExpected
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|format
argument_list|(
literal|"We expect %s bytes for the record content but read %d byte and reach the End of File."
argument_list|,
name|lengthExpected
argument_list|,
name|hasConsumed
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|format
argument_list|(
literal|"The current position in the file : %s"
argument_list|,
name|getFilePosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|format
argument_list|(
literal|"The current consumed bytes: %s"
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|format
argument_list|(
literal|"The bytes for the current record is: %s"
argument_list|,
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|recordLengthBytes
argument_list|)
operator|+
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|valueByteArray
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"When reading the contend of the record, reach the unexpected end of file."
argument_list|)
throw|;
block|}
name|value
operator|.
name|set
argument_list|(
name|valueByteArray
argument_list|,
literal|0
argument_list|,
name|recordLength
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|lengthExpected
expr_stmt|;
comment|/* read the record end */
name|lengthExpected
operator|=
name|endOfRecord
operator|.
name|length
expr_stmt|;
name|hasConsumed
operator|=
name|readExpectedBytes
argument_list|(
name|endOfRecord
argument_list|,
name|lengthExpected
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasConsumed
operator|<
name|lengthExpected
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|format
argument_list|(
literal|"We expect %s bytes for the record end symbol but read %d byte and reach the End of File."
argument_list|,
name|lengthExpected
argument_list|,
name|hasConsumed
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|format
argument_list|(
literal|"The current position in the file : %s"
argument_list|,
name|getFilePosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|format
argument_list|(
literal|"The current consumed bytes: %s"
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|format
argument_list|(
literal|"The bytes for the current record is: %s"
argument_list|,
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|recordLengthBytes
argument_list|)
operator|+
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|valueByteArray
argument_list|)
operator|+
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|endOfRecord
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"When reading the end of record, reach the unexpected end of file."
argument_list|)
throw|;
block|}
if|if
condition|(
name|endOfRecord
index|[
literal|0
index|]
operator|!=
name|TeradataBinaryFileOutputFormat
operator|.
name|RECORD_END_BYTE
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|format
argument_list|(
literal|"We expect 0x0a as the record end but get %s."
argument_list|,
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|endOfRecord
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
name|pos
operator|+=
name|lengthExpected
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Create an object of the appropriate type to be used as a key.    *    * @return a new key object.    */
annotation|@
name|Override
specifier|public
name|NullWritable
name|createKey
parameter_list|()
block|{
return|return
name|NullWritable
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Create an object of the appropriate type to be used as a value.    *    * @return a new value object.    */
annotation|@
name|Override
specifier|public
name|BytesWritable
name|createValue
parameter_list|()
block|{
return|return
operator|new
name|BytesWritable
argument_list|()
return|;
block|}
comment|/**    * Returns the current position in the input.    *    * @return the current position in the input.    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|pos
return|;
block|}
comment|/**    *    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * How much of the input has the {@link RecordReader} consumed i.e.    * has been processed by?    *    * @return progress from<code>0.0</code> to<code>1.0</code>.    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|start
operator|==
name|end
condition|)
block|{
return|return
literal|0.0F
return|;
block|}
else|else
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
literal|1.0F
argument_list|,
call|(
name|float
call|)
argument_list|(
name|getFilePosition
argument_list|()
operator|-
name|start
argument_list|)
operator|/
call|(
name|float
call|)
argument_list|(
name|end
operator|-
name|start
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
name|boolean
name|isCompressedInput
parameter_list|()
block|{
return|return
name|codec
operator|!=
literal|null
return|;
block|}
specifier|private
specifier|synchronized
name|long
name|getFilePosition
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|retVal
decl_stmt|;
if|if
condition|(
name|isCompressedInput
argument_list|()
operator|&&
name|filePosition
operator|!=
literal|null
condition|)
block|{
name|retVal
operator|=
name|filePosition
operator|.
name|getPos
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|retVal
operator|=
name|getPos
argument_list|()
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
specifier|private
specifier|synchronized
name|int
name|readExpectedBytes
parameter_list|(
name|byte
index|[]
name|toWrite
parameter_list|,
name|int
name|lengthExpected
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|curPos
init|=
literal|0
decl_stmt|;
do|do
block|{
name|int
name|numOfByteRead
init|=
name|in
operator|.
name|read
argument_list|(
name|toWrite
argument_list|,
name|curPos
argument_list|,
name|lengthExpected
operator|-
name|curPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|numOfByteRead
operator|<
literal|0
condition|)
block|{
return|return
name|curPos
return|;
block|}
else|else
block|{
name|curPos
operator|+=
name|numOfByteRead
expr_stmt|;
block|}
block|}
do|while
condition|(
name|curPos
operator|<
name|lengthExpected
condition|)
do|;
return|return
name|curPos
return|;
block|}
block|}
end_class

end_unit

