begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|sqlstd
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalPrivilegeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeBag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeGrantInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzPluginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzSessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzSessionContext
operator|.
name|CLIENT_TYPE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveOperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
operator|.
name|HivePrivilegeObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_class
specifier|public
class|class
name|SQLAuthorizationUtils
block|{
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|SUPPORTED_PRIVS
init|=
block|{
literal|"INSERT"
block|,
literal|"UPDATE"
block|,
literal|"DELETE"
block|,
literal|"SELECT"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|SUPPORTED_PRIVS_SET
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|SUPPORTED_PRIVS
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SQLAuthorizationUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Create thrift privileges bag    *    * @param hivePrincipals    * @param hivePrivileges    * @param hivePrivObject    * @param grantorPrincipal    * @param grantOption    * @return    * @throws HiveAuthzPluginException    */
specifier|static
name|PrivilegeBag
name|getThriftPrivilegesBag
parameter_list|(
name|List
argument_list|<
name|HivePrincipal
argument_list|>
name|hivePrincipals
parameter_list|,
name|List
argument_list|<
name|HivePrivilege
argument_list|>
name|hivePrivileges
parameter_list|,
name|HivePrivilegeObject
name|hivePrivObject
parameter_list|,
name|HivePrincipal
name|grantorPrincipal
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|HiveAuthzPluginException
block|{
name|HiveObjectRef
name|privObj
init|=
name|getThriftHiveObjectRef
argument_list|(
name|hivePrivObject
argument_list|)
decl_stmt|;
name|PrivilegeBag
name|privBag
init|=
operator|new
name|PrivilegeBag
argument_list|()
decl_stmt|;
for|for
control|(
name|HivePrivilege
name|privilege
range|:
name|hivePrivileges
control|)
block|{
if|if
condition|(
name|privilege
operator|.
name|getColumns
argument_list|()
operator|!=
literal|null
operator|&&
name|privilege
operator|.
name|getColumns
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|HiveAuthzPluginException
argument_list|(
literal|"Privileges on columns not supported currently"
operator|+
literal|" in sql standard authorization mode"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|SUPPORTED_PRIVS_SET
operator|.
name|contains
argument_list|(
name|privilege
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveAuthzPluginException
argument_list|(
literal|"Privilege: "
operator|+
name|privilege
operator|.
name|getName
argument_list|()
operator|+
literal|" is not supported in sql standard authorization mode"
argument_list|)
throw|;
block|}
name|PrivilegeGrantInfo
name|grantInfo
init|=
name|getThriftPrivilegeGrantInfo
argument_list|(
name|privilege
argument_list|,
name|grantorPrincipal
argument_list|,
name|grantOption
argument_list|,
literal|0
comment|/*real grant time added by metastore*/
argument_list|)
decl_stmt|;
for|for
control|(
name|HivePrincipal
name|principal
range|:
name|hivePrincipals
control|)
block|{
name|HiveObjectPrivilege
name|objPriv
init|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|privObj
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|,
name|AuthorizationUtils
operator|.
name|getThriftPrincipalType
argument_list|(
name|principal
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|grantInfo
argument_list|)
decl_stmt|;
name|privBag
operator|.
name|addToPrivileges
argument_list|(
name|objPriv
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|privBag
return|;
block|}
specifier|static
name|PrivilegeGrantInfo
name|getThriftPrivilegeGrantInfo
parameter_list|(
name|HivePrivilege
name|privilege
parameter_list|,
name|HivePrincipal
name|grantorPrincipal
parameter_list|,
name|boolean
name|grantOption
parameter_list|,
name|int
name|grantTime
parameter_list|)
throws|throws
name|HiveAuthzPluginException
block|{
try|try
block|{
return|return
name|AuthorizationUtils
operator|.
name|getThriftPrivilegeGrantInfo
argument_list|(
name|privilege
argument_list|,
name|grantorPrincipal
argument_list|,
name|grantOption
argument_list|,
name|grantTime
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveAuthzPluginException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Create a thrift privilege object from the plugin interface privilege object    *    * @param privObj    * @return    * @throws HiveAuthzPluginException    */
specifier|static
name|HiveObjectRef
name|getThriftHiveObjectRef
parameter_list|(
name|HivePrivilegeObject
name|privObj
parameter_list|)
throws|throws
name|HiveAuthzPluginException
block|{
try|try
block|{
return|return
name|AuthorizationUtils
operator|.
name|getThriftHiveObjectRef
argument_list|(
name|privObj
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveAuthzPluginException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|static
name|HivePrivilegeObjectType
name|getPluginObjType
parameter_list|(
name|HiveObjectType
name|objectType
parameter_list|)
throws|throws
name|HiveAuthzPluginException
block|{
switch|switch
condition|(
name|objectType
condition|)
block|{
case|case
name|DATABASE
case|:
return|return
name|HivePrivilegeObjectType
operator|.
name|DATABASE
return|;
case|case
name|TABLE
case|:
return|return
name|HivePrivilegeObjectType
operator|.
name|TABLE_OR_VIEW
return|;
case|case
name|COLUMN
case|:
case|case
name|GLOBAL
case|:
case|case
name|PARTITION
case|:
throw|throw
operator|new
name|HiveAuthzPluginException
argument_list|(
literal|"Unsupported object type "
operator|+
name|objectType
argument_list|)
throw|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unexpected object type "
operator|+
name|objectType
argument_list|)
throw|;
block|}
block|}
comment|/**    * Check if the privileges are acceptable for SQL Standard authorization implementation    * @param hivePrivileges    * @throws HiveAuthzPluginException    */
specifier|public
specifier|static
name|void
name|validatePrivileges
parameter_list|(
name|List
argument_list|<
name|HivePrivilege
argument_list|>
name|hivePrivileges
parameter_list|)
throws|throws
name|HiveAuthzPluginException
block|{
for|for
control|(
name|HivePrivilege
name|hivePrivilege
range|:
name|hivePrivileges
control|)
block|{
if|if
condition|(
name|hivePrivilege
operator|.
name|getColumns
argument_list|()
operator|!=
literal|null
operator|&&
name|hivePrivilege
operator|.
name|getColumns
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|HiveAuthzPluginException
argument_list|(
literal|"Privilege with columns are not currently supported with sql standard authorization:"
operator|+
name|hivePrivilege
argument_list|)
throw|;
block|}
comment|//try converting to the enum to verify that this is a valid privilege type
name|SQLPrivilegeType
operator|.
name|getRequirePrivilege
argument_list|(
name|hivePrivilege
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the privileges this user(userName argument) has on the object    * (hivePrivObject argument) If isAdmin is true, adds an admin privilege as    * well.    *    * @param metastoreClient    * @param userName    * @param hivePrivObject    * @param curRoles    *          current active roles for user    * @param isAdmin    *          if user can run as admin user    * @return    * @throws HiveAuthzPluginException    */
specifier|static
name|RequiredPrivileges
name|getPrivilegesFromMetaStore
parameter_list|(
name|IMetaStoreClient
name|metastoreClient
parameter_list|,
name|String
name|userName
parameter_list|,
name|HivePrivilegeObject
name|hivePrivObject
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|curRoles
parameter_list|,
name|boolean
name|isAdmin
parameter_list|)
throws|throws
name|HiveAuthzPluginException
block|{
comment|// get privileges for this user and its role on this object
name|PrincipalPrivilegeSet
name|thrifPrivs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HiveObjectRef
name|objectRef
init|=
name|AuthorizationUtils
operator|.
name|getThriftHiveObjectRef
argument_list|(
name|hivePrivObject
argument_list|)
decl_stmt|;
if|if
condition|(
name|objectRef
operator|.
name|getObjectType
argument_list|()
operator|==
literal|null
condition|)
block|{
name|objectRef
operator|.
name|setObjectType
argument_list|(
name|HiveObjectType
operator|.
name|GLOBAL
argument_list|)
expr_stmt|;
block|}
name|thrifPrivs
operator|=
name|metastoreClient
operator|.
name|get_privilege_set
argument_list|(
name|objectRef
argument_list|,
name|userName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|throwGetPrivErr
argument_list|(
name|e
argument_list|,
name|hivePrivObject
argument_list|,
name|userName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|throwGetPrivErr
argument_list|(
name|e
argument_list|,
name|hivePrivObject
argument_list|,
name|userName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|throwGetPrivErr
argument_list|(
name|e
argument_list|,
name|hivePrivObject
argument_list|,
name|userName
argument_list|)
expr_stmt|;
block|}
name|filterPrivsByCurrentRoles
argument_list|(
name|thrifPrivs
argument_list|,
name|curRoles
argument_list|)
expr_stmt|;
comment|// convert to RequiredPrivileges
name|RequiredPrivileges
name|privs
init|=
name|getRequiredPrivsFromThrift
argument_list|(
name|thrifPrivs
argument_list|)
decl_stmt|;
comment|// add owner privilege if user is owner of the object
if|if
condition|(
name|isOwner
argument_list|(
name|metastoreClient
argument_list|,
name|userName
argument_list|,
name|curRoles
argument_list|,
name|hivePrivObject
argument_list|)
condition|)
block|{
name|privs
operator|.
name|addPrivilege
argument_list|(
name|SQLPrivTypeGrant
operator|.
name|OWNER_PRIV
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isAdmin
condition|)
block|{
name|privs
operator|.
name|addPrivilege
argument_list|(
name|SQLPrivTypeGrant
operator|.
name|ADMIN_PRIV
argument_list|)
expr_stmt|;
block|}
return|return
name|privs
return|;
block|}
comment|/**    * Remove any role privileges that don't belong to the roles in curRoles    * @param thriftPrivs    * @param curRoles    * @return    */
specifier|private
specifier|static
name|void
name|filterPrivsByCurrentRoles
parameter_list|(
name|PrincipalPrivilegeSet
name|thriftPrivs
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|curRoles
parameter_list|)
block|{
comment|// check if there are privileges to be filtered
if|if
condition|(
name|thriftPrivs
operator|==
literal|null
operator|||
name|thriftPrivs
operator|.
name|getRolePrivileges
argument_list|()
operator|==
literal|null
operator|||
name|thriftPrivs
operator|.
name|getRolePrivilegesSize
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// no privileges to filter
return|return;
block|}
comment|// add the privs for roles in curRoles to new role-to-priv map
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|filteredRolePrivs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|role
range|:
name|curRoles
control|)
block|{
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|privs
init|=
name|thriftPrivs
operator|.
name|getRolePrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|role
argument_list|)
decl_stmt|;
if|if
condition|(
name|privs
operator|!=
literal|null
condition|)
block|{
name|filteredRolePrivs
operator|.
name|put
argument_list|(
name|role
argument_list|,
name|privs
argument_list|)
expr_stmt|;
block|}
block|}
name|thriftPrivs
operator|.
name|setRolePrivileges
argument_list|(
name|filteredRolePrivs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check if user is owner of the given object    *    * @param metastoreClient    * @param userName    *          current user    * @param curRoles    *          current roles for userName    * @param hivePrivObject    *          given object    * @return true if user is owner    * @throws HiveAuthzPluginException    */
specifier|private
specifier|static
name|boolean
name|isOwner
parameter_list|(
name|IMetaStoreClient
name|metastoreClient
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|curRoles
parameter_list|,
name|HivePrivilegeObject
name|hivePrivObject
parameter_list|)
throws|throws
name|HiveAuthzPluginException
block|{
comment|// for now, check only table& db
switch|switch
condition|(
name|hivePrivObject
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|TABLE_OR_VIEW
case|:
block|{
name|Table
name|thriftTableObj
init|=
literal|null
decl_stmt|;
try|try
block|{
name|thriftTableObj
operator|=
name|metastoreClient
operator|.
name|getTable
argument_list|(
name|hivePrivObject
operator|.
name|getDbname
argument_list|()
argument_list|,
name|hivePrivObject
operator|.
name|getObjectName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|throwGetObjErr
argument_list|(
name|e
argument_list|,
name|hivePrivObject
argument_list|)
expr_stmt|;
block|}
return|return
name|userName
operator|.
name|equals
argument_list|(
name|thriftTableObj
operator|.
name|getOwner
argument_list|()
argument_list|)
return|;
block|}
case|case
name|DATABASE
case|:
block|{
if|if
condition|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
operator|.
name|equalsIgnoreCase
argument_list|(
name|hivePrivObject
operator|.
name|getDbname
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Database
name|db
init|=
literal|null
decl_stmt|;
try|try
block|{
name|db
operator|=
name|metastoreClient
operator|.
name|getDatabase
argument_list|(
name|hivePrivObject
operator|.
name|getDbname
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|throwGetObjErr
argument_list|(
name|e
argument_list|,
name|hivePrivObject
argument_list|)
expr_stmt|;
block|}
comment|// a db owner can be a user or a role
if|if
condition|(
name|db
operator|.
name|getOwnerType
argument_list|()
operator|==
name|PrincipalType
operator|.
name|USER
condition|)
block|{
return|return
name|userName
operator|.
name|equals
argument_list|(
name|db
operator|.
name|getOwnerName
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|db
operator|.
name|getOwnerType
argument_list|()
operator|==
name|PrincipalType
operator|.
name|ROLE
condition|)
block|{
comment|// check if any of the roles of this user is an owner
return|return
name|curRoles
operator|.
name|contains
argument_list|(
name|db
operator|.
name|getOwnerName
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
comment|// looks like owner is an unsupported type
name|LOG
operator|.
name|warn
argument_list|(
literal|"Owner of database "
operator|+
name|db
operator|.
name|getName
argument_list|()
operator|+
literal|" is of unsupported type "
operator|+
name|db
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
case|case
name|DFS_URI
case|:
case|case
name|LOCAL_URI
case|:
case|case
name|PARTITION
case|:
default|default:
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|static
name|void
name|throwGetObjErr
parameter_list|(
name|Exception
name|e
parameter_list|,
name|HivePrivilegeObject
name|hivePrivObject
parameter_list|)
throws|throws
name|HiveAuthzPluginException
block|{
name|String
name|msg
init|=
literal|"Error getting object from metastore for "
operator|+
name|hivePrivObject
decl_stmt|;
throw|throw
operator|new
name|HiveAuthzPluginException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|void
name|throwGetPrivErr
parameter_list|(
name|Exception
name|e
parameter_list|,
name|HivePrivilegeObject
name|hivePrivObject
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|HiveAuthzPluginException
block|{
name|String
name|msg
init|=
literal|"Error getting privileges on "
operator|+
name|hivePrivObject
operator|+
literal|" for "
operator|+
name|userName
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|HiveAuthzPluginException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|RequiredPrivileges
name|getRequiredPrivsFromThrift
parameter_list|(
name|PrincipalPrivilegeSet
name|thrifPrivs
parameter_list|)
throws|throws
name|HiveAuthzPluginException
block|{
name|RequiredPrivileges
name|reqPrivs
init|=
operator|new
name|RequiredPrivileges
argument_list|()
decl_stmt|;
comment|// add user privileges
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|userPrivs
init|=
name|thrifPrivs
operator|.
name|getUserPrivileges
argument_list|()
decl_stmt|;
if|if
condition|(
name|userPrivs
operator|!=
literal|null
operator|&&
name|userPrivs
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|HiveAuthzPluginException
argument_list|(
literal|"Invalid number of user privilege objects: "
operator|+
name|userPrivs
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|addRequiredPrivs
argument_list|(
name|reqPrivs
argument_list|,
name|userPrivs
argument_list|)
expr_stmt|;
comment|// add role privileges
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|rolePrivs
init|=
name|thrifPrivs
operator|.
name|getRolePrivileges
argument_list|()
decl_stmt|;
name|addRequiredPrivs
argument_list|(
name|reqPrivs
argument_list|,
name|rolePrivs
argument_list|)
expr_stmt|;
return|return
name|reqPrivs
return|;
block|}
comment|/**    * Add privileges to RequiredPrivileges object reqPrivs from thrift availPrivs    * object    * @param reqPrivs    * @param availPrivs    * @throws HiveAuthzPluginException    */
specifier|private
specifier|static
name|void
name|addRequiredPrivs
parameter_list|(
name|RequiredPrivileges
name|reqPrivs
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|availPrivs
parameter_list|)
throws|throws
name|HiveAuthzPluginException
block|{
if|if
condition|(
name|availPrivs
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|userPriv
range|:
name|availPrivs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|userPrivGInfos
init|=
name|userPriv
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|PrivilegeGrantInfo
name|userPrivGInfo
range|:
name|userPrivGInfos
control|)
block|{
name|reqPrivs
operator|.
name|addPrivilege
argument_list|(
name|userPrivGInfo
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|userPrivGInfo
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|addMissingPrivMsg
parameter_list|(
name|Collection
argument_list|<
name|SQLPrivTypeGrant
argument_list|>
name|missingPrivs
parameter_list|,
name|HivePrivilegeObject
name|hivePrivObject
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|deniedMessages
parameter_list|)
block|{
if|if
condition|(
name|missingPrivs
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// there are some required privileges missing, create error message
comment|// sort the privileges so that error message is deterministic (for tests)
name|List
argument_list|<
name|SQLPrivTypeGrant
argument_list|>
name|sortedmissingPrivs
init|=
operator|new
name|ArrayList
argument_list|<
name|SQLPrivTypeGrant
argument_list|>
argument_list|(
name|missingPrivs
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedmissingPrivs
argument_list|)
expr_stmt|;
name|String
name|errMsg
init|=
name|sortedmissingPrivs
operator|+
literal|" on "
operator|+
name|hivePrivObject
decl_stmt|;
name|deniedMessages
operator|.
name|add
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Map permissions for this uri to SQL Standard privileges    * @param filePath    * @param conf    * @param userName    * @return    * @throws HiveAuthzPluginException    */
specifier|public
specifier|static
name|RequiredPrivileges
name|getPrivilegesFromFS
parameter_list|(
name|Path
name|filePath
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|HiveAuthzPluginException
block|{
comment|// get the 'available privileges' from file system
name|RequiredPrivileges
name|availPrivs
init|=
operator|new
name|RequiredPrivileges
argument_list|()
decl_stmt|;
comment|// check file system permission
name|FileSystem
name|fs
decl_stmt|;
try|try
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|filePath
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|FileUtils
operator|.
name|getPathOrParentThatExists
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|)
decl_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|FileUtils
operator|.
name|isOwnerOfFileHierarchy
argument_list|(
name|fs
argument_list|,
name|fileStatus
argument_list|,
name|userName
argument_list|)
condition|)
block|{
name|availPrivs
operator|.
name|addPrivilege
argument_list|(
name|SQLPrivTypeGrant
operator|.
name|OWNER_PRIV
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|FileUtils
operator|.
name|isActionPermittedForFileHierarchy
argument_list|(
name|fs
argument_list|,
name|fileStatus
argument_list|,
name|userName
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
condition|)
block|{
name|availPrivs
operator|.
name|addPrivilege
argument_list|(
name|SQLPrivTypeGrant
operator|.
name|INSERT_NOGRANT
argument_list|)
expr_stmt|;
name|availPrivs
operator|.
name|addPrivilege
argument_list|(
name|SQLPrivTypeGrant
operator|.
name|DELETE_NOGRANT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|FileUtils
operator|.
name|isActionPermittedForFileHierarchy
argument_list|(
name|fs
argument_list|,
name|fileStatus
argument_list|,
name|userName
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
condition|)
block|{
name|availPrivs
operator|.
name|addPrivilege
argument_list|(
name|SQLPrivTypeGrant
operator|.
name|SELECT_NOGRANT
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error getting permissions for "
operator|+
name|filePath
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|HiveAuthzPluginException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|availPrivs
return|;
block|}
specifier|public
specifier|static
name|void
name|assertNoDeniedPermissions
parameter_list|(
name|HivePrincipal
name|hivePrincipal
parameter_list|,
name|HiveOperationType
name|hiveOpType
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|deniedMessages
parameter_list|)
throws|throws
name|HiveAccessControlException
block|{
if|if
condition|(
name|deniedMessages
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|deniedMessages
argument_list|)
expr_stmt|;
name|String
name|errorMessage
init|=
literal|"Permission denied: "
operator|+
name|hivePrincipal
operator|+
literal|" does not have following privileges for operation "
operator|+
name|hiveOpType
operator|+
literal|" "
operator|+
name|deniedMessages
decl_stmt|;
throw|throw
operator|new
name|HiveAccessControlException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
block|}
specifier|static
name|HiveAuthzPluginException
name|getPluginException
parameter_list|(
name|String
name|prefix
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
return|return
operator|new
name|HiveAuthzPluginException
argument_list|(
name|prefix
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
return|;
block|}
comment|/**    * Validate the principal type, and convert role name to lower case    * @param hPrincipal    * @return validated principal    * @throws HiveAuthzPluginException    */
specifier|public
specifier|static
name|HivePrincipal
name|getValidatedPrincipal
parameter_list|(
name|HivePrincipal
name|hPrincipal
parameter_list|)
throws|throws
name|HiveAuthzPluginException
block|{
if|if
condition|(
name|hPrincipal
operator|==
literal|null
operator|||
name|hPrincipal
operator|.
name|getType
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// null principal
return|return
name|hPrincipal
return|;
block|}
switch|switch
condition|(
name|hPrincipal
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|USER
case|:
return|return
name|hPrincipal
return|;
case|case
name|ROLE
case|:
comment|// lower case role names, for case insensitive behavior
return|return
operator|new
name|HivePrincipal
argument_list|(
name|hPrincipal
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|hPrincipal
operator|.
name|getType
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|HiveAuthzPluginException
argument_list|(
literal|"Invalid principal type in principal "
operator|+
name|hPrincipal
argument_list|)
throw|;
block|}
block|}
comment|/**    * Calls getValidatedPrincipal on each principal in list and updates the list    * @param hivePrincipals    * @return    * @return    * @throws HiveAuthzPluginException    */
specifier|public
specifier|static
name|List
argument_list|<
name|HivePrincipal
argument_list|>
name|getValidatedPrincipals
parameter_list|(
name|List
argument_list|<
name|HivePrincipal
argument_list|>
name|hivePrincipals
parameter_list|)
throws|throws
name|HiveAuthzPluginException
block|{
name|ListIterator
argument_list|<
name|HivePrincipal
argument_list|>
name|it
init|=
name|hivePrincipals
operator|.
name|listIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|set
argument_list|(
name|getValidatedPrincipal
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|hivePrincipals
return|;
block|}
comment|/**    * Change the session context based on configuration to aid in testing of sql    * std auth    *    * @param ctx    * @param conf    * @return    */
specifier|static
name|HiveAuthzSessionContext
name|applyTestSettings
parameter_list|(
name|HiveAuthzSessionContext
name|ctx
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_TEST_AUTHORIZATION_SQLSTD_HS2_MODE
argument_list|)
operator|&&
name|ctx
operator|.
name|getClientType
argument_list|()
operator|==
name|CLIENT_TYPE
operator|.
name|HIVECLI
condition|)
block|{
comment|// create new session ctx object with HS2 as client type
name|HiveAuthzSessionContext
operator|.
name|Builder
name|ctxBuilder
init|=
operator|new
name|HiveAuthzSessionContext
operator|.
name|Builder
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|ctxBuilder
operator|.
name|setClientType
argument_list|(
name|CLIENT_TYPE
operator|.
name|HIVESERVER2
argument_list|)
expr_stmt|;
return|return
name|ctxBuilder
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|ctx
return|;
block|}
block|}
end_class

end_unit

