begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapredContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_comment
comment|/**  * A Generic User-defined Table Generating Function (UDTF)  *  * Generates a variable number of output rows for a single input row. Useful for  * explode(array)...  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
specifier|public
specifier|abstract
class|class
name|GenericUDTF
block|{
name|Collector
name|collector
init|=
literal|null
decl_stmt|;
comment|/**    * Additionally setup GenericUDTF with MapredContext before initializing.    * This is only called in runtime of MapRedTask.    *    * @param mapredContext context    */
specifier|public
name|void
name|configure
parameter_list|(
name|MapredContext
name|mapredContext
parameter_list|)
block|{   }
specifier|public
name|StructObjectInspector
name|initialize
parameter_list|(
name|StructObjectInspector
name|argOIs
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|inputFields
init|=
name|argOIs
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|ObjectInspector
index|[]
name|udtfInputOIs
init|=
operator|new
name|ObjectInspector
index|[
name|inputFields
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputFields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|udtfInputOIs
index|[
name|i
index|]
operator|=
name|inputFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
block|}
return|return
name|initialize
argument_list|(
name|udtfInputOIs
argument_list|)
return|;
block|}
comment|/**    * Initialize this GenericUDTF. This will be called only once per instance.    *    * @param argOIs    *          An array of ObjectInspectors for the arguments    * @return A StructObjectInspector for output. The output struct represents a    *         row of the table where the fields of the stuct are the columns. The    *         field names are unimportant as they will be overridden by user    *         supplied column aliases.    */
annotation|@
name|Deprecated
specifier|public
name|StructObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|argOIs
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Should not be called directly"
argument_list|)
throw|;
block|}
comment|/**    * Give a set of arguments for the UDTF to process.    *    * @param args    *          object array of arguments    */
specifier|public
specifier|abstract
name|void
name|process
parameter_list|(
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|HiveException
function_decl|;
comment|/**    * Called to notify the UDTF that there are no more rows to process.    * Clean up code or additional forward() calls can be made here.    */
specifier|public
specifier|abstract
name|void
name|close
parameter_list|()
throws|throws
name|HiveException
function_decl|;
comment|/**    * Associates a collector with this UDTF. Can't be specified in the    * constructor as the UDTF may be initialized before the collector has been    * constructed.    *    * @param collector    */
specifier|public
specifier|final
name|void
name|setCollector
parameter_list|(
name|Collector
name|collector
parameter_list|)
block|{
name|this
operator|.
name|collector
operator|=
name|collector
expr_stmt|;
block|}
comment|/**    * Passes an output row to the collector.    *    * @param o    * @throws HiveException    */
specifier|protected
specifier|final
name|void
name|forward
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|HiveException
block|{
name|collector
operator|.
name|collect
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

