begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|CorrelationCompositeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
operator|.
name|ObjectInspectorCopyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_comment
comment|/**  * Correlation composite operator implementation. This operator is used only in map phase for  * sharing table scan. Suppose that there are multiple operation paths (e.g. two different  * predicates on a table ) that share a common table. A row will be processed by these operation  * paths. To tag which operation paths actually forward this row, CorrelationCompositeOperator is  * used. For a row, this operator will buffer forwarded rows from its parents and then tag this row  * with a operation path tag indicating which paths forwarded this row. Right now, since operation  * path tag used in ReduceSinkOperator has 1 byte, this operator can have at most 8 parents  * (operation paths). For example, suppose that the common table is T and predicates P1 and P2 will  * be used in sub-queries SQ1 and SQ2, respectively. The CorrelationCompositeOperator  * will apply P1 and P2 on the row and tag the record based on if P1 or P2 is true.  **/
end_comment

begin_class
specifier|public
class|class
name|CorrelationCompositeOperator
extends|extends
name|Operator
argument_list|<
name|CorrelationCompositeDesc
argument_list|>
implements|implements
name|Serializable
block|{
specifier|public
specifier|static
enum|enum
name|Counter
block|{
name|FORWARDED
block|}
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|ReduceSinkOperator
name|correspondingReduceSinkOperators
decl_stmt|;
specifier|private
specifier|transient
specifier|final
name|LongWritable
name|forwarded_count
decl_stmt|;
specifier|private
specifier|transient
name|boolean
name|isFirstRow
decl_stmt|;
specifier|private
name|int
index|[]
name|allOperationPathTags
decl_stmt|;
specifier|private
name|Object
index|[]
name|rowBuffer
decl_stmt|;
comment|// buffer the output from multiple parents
specifier|public
name|CorrelationCompositeOperator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|forwarded_count
operator|=
operator|new
name|LongWritable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|isFirstRow
operator|=
literal|true
expr_stmt|;
name|rowBuffer
operator|=
operator|new
name|Object
index|[
name|parentOperators
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|correspondingReduceSinkOperators
operator|=
name|conf
operator|.
name|getCorrespondingReduceSinkOperator
argument_list|()
expr_stmt|;
name|allOperationPathTags
operator|=
name|conf
operator|.
name|getAllOperationPathTags
argument_list|()
expr_stmt|;
name|statsMap
operator|.
name|put
argument_list|(
name|Counter
operator|.
name|FORWARDED
argument_list|,
name|forwarded_count
argument_list|)
expr_stmt|;
name|outputObjInspector
operator|=
name|ObjectInspectorUtils
operator|.
name|getStandardObjectInspector
argument_list|(
name|outputObjInspector
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|JAVA
argument_list|)
expr_stmt|;
comment|// initialize its children
name|initializeChildren
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|processOp
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
name|rowBuffer
index|[
name|tag
index|]
operator|=
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|row
argument_list|,
name|inputObjInspectors
index|[
name|tag
index|]
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|evaluateBuffer
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|operationPathTags
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|isForward
init|=
literal|false
decl_stmt|;
name|Object
name|forwardedRow
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowBuffer
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|rowBuffer
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|isForward
operator|=
literal|true
expr_stmt|;
name|operationPathTags
operator|.
name|add
argument_list|(
name|allOperationPathTags
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|forwardedRow
operator|==
literal|null
condition|)
block|{
name|forwardedRow
operator|=
name|rowBuffer
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|isForward
condition|)
block|{
assert|assert
name|correspondingReduceSinkOperators
operator|!=
literal|null
assert|;
name|correspondingReduceSinkOperators
operator|.
name|setOperationPathTags
argument_list|(
name|operationPathTags
argument_list|)
expr_stmt|;
name|forwarded_count
operator|.
name|set
argument_list|(
name|forwarded_count
operator|.
name|get
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|forward
argument_list|(
name|forwardedRow
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowBuffer
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|rowBuffer
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRowNumber
parameter_list|(
name|long
name|rowNumber
parameter_list|)
throws|throws
name|HiveException
block|{
name|this
operator|.
name|rowNumber
operator|=
name|rowNumber
expr_stmt|;
if|if
condition|(
name|childOperators
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childOperatorsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
assert|assert
name|rowNumber
operator|>=
name|childOperatorsArray
index|[
name|i
index|]
operator|.
name|getRowNumber
argument_list|()
assert|;
if|if
condition|(
name|rowNumber
operator|!=
name|childOperatorsArray
index|[
name|i
index|]
operator|.
name|getRowNumber
argument_list|()
condition|)
block|{
name|childOperatorsArray
index|[
name|i
index|]
operator|.
name|setRowNumber
argument_list|(
name|rowNumber
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isFirstRow
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowBuffer
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|rowBuffer
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|isFirstRow
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|evaluateBuffer
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|closeOp
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|abort
condition|)
block|{
name|evaluateBuffer
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @return the name of the operator    */
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getOperatorName
argument_list|()
return|;
block|}
specifier|static
specifier|public
name|String
name|getOperatorName
parameter_list|()
block|{
return|return
literal|"CCO"
return|;
block|}
annotation|@
name|Override
specifier|public
name|OperatorType
name|getType
parameter_list|()
block|{
return|return
name|OperatorType
operator|.
name|CORRELATIONCOMPOSITE
return|;
block|}
block|}
end_class

end_unit

