begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|signature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonIdentityInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|ObjectIdGenerators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Signature of the operator(non-recursive).  */
end_comment

begin_class
annotation|@
name|JsonIdentityInfo
argument_list|(
name|generator
operator|=
name|ObjectIdGenerators
operator|.
name|IntSequenceGenerator
operator|.
name|class
argument_list|,
name|property
operator|=
literal|"@id"
argument_list|)
specifier|public
specifier|final
class|class
name|OpSignature
block|{
comment|/**    * Holds the signature of the operator; the keys are are the methods name marked by {@link Signature}.    */
annotation|@
name|JsonProperty
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sigMap
decl_stmt|;
comment|// need this for Jackson to work
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|OpSignature
parameter_list|()
block|{   }
specifier|private
name|OpSignature
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|)
block|{
name|sigMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
comment|// FIXME: consider other operator info as well..not just conf?
name|SignatureUtils
operator|.
name|write
argument_list|(
name|sigMap
argument_list|,
name|op
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|OpSignature
name|of
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|)
block|{
return|return
operator|new
name|OpSignature
argument_list|(
name|op
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|sigMap
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|OpSignature
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
name|OpSignature
name|o
init|=
operator|(
name|OpSignature
operator|)
name|obj
decl_stmt|;
return|return
name|signatureCompare
argument_list|(
name|o
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|signatureCompare
parameter_list|(
name|OpSignature
name|other
parameter_list|)
block|{
return|return
name|sigMap
operator|.
name|equals
argument_list|(
name|other
operator|.
name|sigMap
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|void
name|proveEquals
parameter_list|(
name|OpSignature
name|other
parameter_list|)
block|{
name|proveEquals
argument_list|(
name|sigMap
argument_list|,
name|other
operator|.
name|sigMap
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|proveEquals
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m1
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m2
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|m1
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|v1
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Object
name|v2
init|=
name|m2
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|v1
operator|==
name|v2
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|v1
operator|==
literal|null
operator|||
name|v2
operator|==
literal|null
operator|||
operator|!
name|v1
operator|.
name|equals
argument_list|(
name|v2
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"equals fails: %s (%s!=%s)"
argument_list|,
name|key
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toString
argument_list|(
literal|""
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|pad
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|sigMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|pad
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSigMap
parameter_list|()
block|{
return|return
name|sigMap
return|;
block|}
block|}
end_class

end_unit

