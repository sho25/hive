begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|sqlstd
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|HiveAuthenticationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAccessController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzPluginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzSessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveMetastoreClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveRoleGrant
import|;
end_import

begin_comment
comment|/**  * Wrapper for {@link SQLStdHiveAccessController} that does validation of  * arguments and then calls the real object. Doing the validation in this  * separate class, so that the chances of missing any validation is small.  *  * Validations/Conversions to be done  * 1. Call SQLAuthorizationUtils.getValidatedPrincipals on HivePrincipal to validate and  * update  * 2. Convert roleName to lower case  *  */
end_comment

begin_class
annotation|@
name|Private
specifier|public
class|class
name|SQLStdHiveAccessControllerWrapper
implements|implements
name|HiveAccessController
block|{
specifier|private
specifier|final
name|SQLStdHiveAccessController
name|hiveAccessController
decl_stmt|;
specifier|public
name|SQLStdHiveAccessControllerWrapper
parameter_list|(
name|HiveMetastoreClientFactory
name|metastoreClientFactory
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|HiveAuthenticationProvider
name|authenticator
parameter_list|,
name|HiveAuthzSessionContext
name|ctx
parameter_list|)
throws|throws
name|HiveAuthzPluginException
block|{
name|this
operator|.
name|hiveAccessController
operator|=
operator|new
name|SQLStdHiveAccessController
argument_list|(
name|metastoreClientFactory
argument_list|,
name|conf
argument_list|,
name|authenticator
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|grantPrivileges
parameter_list|(
name|List
argument_list|<
name|HivePrincipal
argument_list|>
name|hivePrincipals
parameter_list|,
name|List
argument_list|<
name|HivePrivilege
argument_list|>
name|hivePrivileges
parameter_list|,
name|HivePrivilegeObject
name|hivePrivObject
parameter_list|,
name|HivePrincipal
name|grantorPrincipal
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|HiveAuthzPluginException
throws|,
name|HiveAccessControlException
block|{
comment|// validate principals
name|hivePrincipals
operator|=
name|SQLAuthorizationUtils
operator|.
name|getValidatedPrincipals
argument_list|(
name|hivePrincipals
argument_list|)
expr_stmt|;
name|grantorPrincipal
operator|=
name|SQLAuthorizationUtils
operator|.
name|getValidatedPrincipal
argument_list|(
name|grantorPrincipal
argument_list|)
expr_stmt|;
name|hiveAccessController
operator|.
name|grantPrivileges
argument_list|(
name|hivePrincipals
argument_list|,
name|hivePrivileges
argument_list|,
name|hivePrivObject
argument_list|,
name|grantorPrincipal
argument_list|,
name|grantOption
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|revokePrivileges
parameter_list|(
name|List
argument_list|<
name|HivePrincipal
argument_list|>
name|hivePrincipals
parameter_list|,
name|List
argument_list|<
name|HivePrivilege
argument_list|>
name|hivePrivileges
parameter_list|,
name|HivePrivilegeObject
name|hivePrivObject
parameter_list|,
name|HivePrincipal
name|grantorPrincipal
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|HiveAuthzPluginException
throws|,
name|HiveAccessControlException
block|{
comment|// validate principals
name|hivePrincipals
operator|=
name|SQLAuthorizationUtils
operator|.
name|getValidatedPrincipals
argument_list|(
name|hivePrincipals
argument_list|)
expr_stmt|;
name|grantorPrincipal
operator|=
name|SQLAuthorizationUtils
operator|.
name|getValidatedPrincipal
argument_list|(
name|grantorPrincipal
argument_list|)
expr_stmt|;
name|hiveAccessController
operator|.
name|revokePrivileges
argument_list|(
name|hivePrincipals
argument_list|,
name|hivePrivileges
argument_list|,
name|hivePrivObject
argument_list|,
name|grantorPrincipal
argument_list|,
name|grantOption
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createRole
parameter_list|(
name|String
name|roleName
parameter_list|,
name|HivePrincipal
name|adminGrantor
parameter_list|)
throws|throws
name|HiveAuthzPluginException
throws|,
name|HiveAccessControlException
block|{
comment|// validate principals
name|roleName
operator|=
name|roleName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|adminGrantor
operator|=
name|SQLAuthorizationUtils
operator|.
name|getValidatedPrincipal
argument_list|(
name|adminGrantor
argument_list|)
expr_stmt|;
name|hiveAccessController
operator|.
name|createRole
argument_list|(
name|roleName
argument_list|,
name|adminGrantor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropRole
parameter_list|(
name|String
name|roleName
parameter_list|)
throws|throws
name|HiveAuthzPluginException
throws|,
name|HiveAccessControlException
block|{
comment|// lower case roleName
name|roleName
operator|=
name|roleName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|hiveAccessController
operator|.
name|dropRole
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|grantRole
parameter_list|(
name|List
argument_list|<
name|HivePrincipal
argument_list|>
name|hivePrincipals
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|roles
parameter_list|,
name|boolean
name|grantOption
parameter_list|,
name|HivePrincipal
name|grantorPrinc
parameter_list|)
throws|throws
name|HiveAuthzPluginException
throws|,
name|HiveAccessControlException
block|{
comment|// validate principals
name|hivePrincipals
operator|=
name|SQLAuthorizationUtils
operator|.
name|getValidatedPrincipals
argument_list|(
name|hivePrincipals
argument_list|)
expr_stmt|;
name|roles
operator|=
name|getLowerCaseRoleNames
argument_list|(
name|roles
argument_list|)
expr_stmt|;
name|grantorPrinc
operator|=
name|SQLAuthorizationUtils
operator|.
name|getValidatedPrincipal
argument_list|(
name|grantorPrinc
argument_list|)
expr_stmt|;
name|hiveAccessController
operator|.
name|grantRole
argument_list|(
name|hivePrincipals
argument_list|,
name|roles
argument_list|,
name|grantOption
argument_list|,
name|grantorPrinc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|revokeRole
parameter_list|(
name|List
argument_list|<
name|HivePrincipal
argument_list|>
name|hivePrincipals
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|roles
parameter_list|,
name|boolean
name|grantOption
parameter_list|,
name|HivePrincipal
name|grantorPrinc
parameter_list|)
throws|throws
name|HiveAuthzPluginException
throws|,
name|HiveAccessControlException
block|{
comment|// validate
name|hivePrincipals
operator|=
name|SQLAuthorizationUtils
operator|.
name|getValidatedPrincipals
argument_list|(
name|hivePrincipals
argument_list|)
expr_stmt|;
name|roles
operator|=
name|getLowerCaseRoleNames
argument_list|(
name|roles
argument_list|)
expr_stmt|;
name|grantorPrinc
operator|=
name|SQLAuthorizationUtils
operator|.
name|getValidatedPrincipal
argument_list|(
name|grantorPrinc
argument_list|)
expr_stmt|;
name|hiveAccessController
operator|.
name|revokeRole
argument_list|(
name|hivePrincipals
argument_list|,
name|roles
argument_list|,
name|grantOption
argument_list|,
name|grantorPrinc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllRoles
parameter_list|()
throws|throws
name|HiveAuthzPluginException
throws|,
name|HiveAccessControlException
block|{
return|return
name|hiveAccessController
operator|.
name|getAllRoles
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HivePrivilegeInfo
argument_list|>
name|showPrivileges
parameter_list|(
name|HivePrincipal
name|principal
parameter_list|,
name|HivePrivilegeObject
name|privObj
parameter_list|)
throws|throws
name|HiveAuthzPluginException
throws|,
name|HiveAccessControlException
block|{
comment|// validate
name|principal
operator|=
name|SQLAuthorizationUtils
operator|.
name|getValidatedPrincipal
argument_list|(
name|principal
argument_list|)
expr_stmt|;
return|return
name|hiveAccessController
operator|.
name|showPrivileges
argument_list|(
name|principal
argument_list|,
name|privObj
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCurrentRole
parameter_list|(
name|String
name|roleName
parameter_list|)
throws|throws
name|HiveAuthzPluginException
throws|,
name|HiveAccessControlException
block|{
comment|// validate
name|roleName
operator|=
name|roleName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|hiveAccessController
operator|.
name|setCurrentRole
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCurrentRoleNames
parameter_list|()
throws|throws
name|HiveAuthzPluginException
block|{
return|return
name|hiveAccessController
operator|.
name|getCurrentRoleNames
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveRoleGrant
argument_list|>
name|getPrincipalGrantInfoForRole
parameter_list|(
name|String
name|roleName
parameter_list|)
throws|throws
name|HiveAuthzPluginException
throws|,
name|HiveAccessControlException
block|{
comment|// validate
name|roleName
operator|=
name|roleName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
return|return
name|hiveAccessController
operator|.
name|getPrincipalGrantInfoForRole
argument_list|(
name|roleName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveRoleGrant
argument_list|>
name|getRoleGrantInfoForPrincipal
parameter_list|(
name|HivePrincipal
name|principal
parameter_list|)
throws|throws
name|HiveAuthzPluginException
throws|,
name|HiveAccessControlException
block|{
comment|// validate
name|principal
operator|=
name|SQLAuthorizationUtils
operator|.
name|getValidatedPrincipal
argument_list|(
name|principal
argument_list|)
expr_stmt|;
return|return
name|hiveAccessController
operator|.
name|getRoleGrantInfoForPrincipal
argument_list|(
name|principal
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|applyAuthorizationConfigPolicy
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
block|{
name|hiveAccessController
operator|.
name|applyAuthorizationConfigPolicy
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUserAdmin
parameter_list|()
throws|throws
name|HiveAuthzPluginException
block|{
return|return
name|hiveAccessController
operator|.
name|isUserAdmin
argument_list|()
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getLowerCaseRoleNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|roles
parameter_list|)
block|{
name|ListIterator
argument_list|<
name|String
argument_list|>
name|roleIter
init|=
name|roles
operator|.
name|listIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|roleIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|roleIter
operator|.
name|set
argument_list|(
name|roleIter
operator|.
name|next
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|roles
return|;
block|}
block|}
end_class

end_unit

