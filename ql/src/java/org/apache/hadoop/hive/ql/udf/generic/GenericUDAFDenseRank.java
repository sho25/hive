begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|DirectionUtils
operator|.
name|ASCENDING_CODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|DirectionUtils
operator|.
name|DESCENDING_CODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|WindowFunctionDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"dense_rank"
argument_list|,
name|value
operator|=
literal|"_FUNC_(x) The difference between RANK and DENSE_RANK is that DENSE_RANK leaves no "
operator|+
literal|"gaps in ranking sequence when there are ties. That is, if you were "
operator|+
literal|"ranking a competition using DENSE_RANK and had three people tie for "
operator|+
literal|"second place, you would say that all three were in second place and "
operator|+
literal|"that the next person came in third."
argument_list|)
annotation|@
name|WindowFunctionDescription
argument_list|(
name|supportsWindow
operator|=
literal|false
argument_list|,
name|pivotResult
operator|=
literal|true
argument_list|,
name|rankingFunction
operator|=
literal|true
argument_list|,
name|orderedAggregate
operator|=
literal|true
argument_list|)
specifier|public
class|class
name|GenericUDAFDenseRank
extends|extends
name|GenericUDAFRank
block|{
annotation|@
name|Override
specifier|protected
name|GenericUDAFAbstractRankEvaluator
name|createWindowingEvaluator
parameter_list|()
block|{
return|return
operator|new
name|GenericUDAFDenseRankEvaluator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|GenericUDAFHypotheticalSetRankEvaluator
name|createHypotheticalSetEvaluator
parameter_list|()
block|{
return|return
operator|new
name|GenericUDAFHypotheticalSetDenseRankEvaluator
argument_list|()
return|;
block|}
specifier|public
specifier|static
class|class
name|GenericUDAFDenseRankEvaluator
extends|extends
name|GenericUDAFRankEvaluator
block|{
comment|/*      * Called when the value in the partition has changed. Update the currentRank      */
annotation|@
name|Override
specifier|protected
name|void
name|nextRank
parameter_list|(
name|RankBuffer
name|rb
parameter_list|)
block|{
name|rb
operator|.
name|currentRank
operator|++
expr_stmt|;
block|}
block|}
comment|/**    * Evaluator for calculating the dense rank.    * SELECT dense_rank(expression1[, expressionn]*) WITHIN GROUP (ORDER BY col1[, coln]*)    * Implementation is based on hypothetical rank calculation but the group of values are considered distinct.    * Since the source of the input stream is not sorted a HashSet is used for filter out duplicate values    * which can lead to OOM in large data sets.    */
specifier|public
specifier|static
class|class
name|GenericUDAFHypotheticalSetDenseRankEvaluator
extends|extends
name|GenericUDAFHypotheticalSetRankEvaluator
block|{
specifier|public
name|GenericUDAFHypotheticalSetDenseRankEvaluator
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
name|writableLongObjectInspector
argument_list|,
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initPartial2AndFinalOI
parameter_list|(
name|ObjectInspector
index|[]
name|parameters
parameter_list|)
block|{
comment|// nop
block|}
specifier|private
specifier|static
specifier|final
class|class
name|RowData
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|columnValues
decl_stmt|;
specifier|private
name|RowData
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|columnValues
parameter_list|)
block|{
name|this
operator|.
name|columnValues
operator|=
name|columnValues
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|RowData
name|rowData
init|=
operator|(
name|RowData
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|columnValues
argument_list|,
name|rowData
operator|.
name|columnValues
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|columnValues
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|HypotheticalSetDenseRankBuffer
extends|extends
name|AbstractAggregationBuffer
block|{
specifier|protected
name|Set
argument_list|<
name|RowData
argument_list|>
name|elements
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|long
name|rank
init|=
literal|0
decl_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|AggregationBuffer
name|getNewAggregationBuffer
parameter_list|()
throws|throws
name|HiveException
block|{
return|return
operator|new
name|HypotheticalSetDenseRankBuffer
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|HypotheticalSetDenseRankBuffer
name|rankBuffer
init|=
operator|(
name|HypotheticalSetDenseRankBuffer
operator|)
name|agg
decl_stmt|;
name|rankBuffer
operator|.
name|elements
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rankBuffer
operator|.
name|rank
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
name|HypotheticalSetDenseRankBuffer
name|rankBuffer
init|=
operator|(
name|HypotheticalSetDenseRankBuffer
operator|)
name|agg
decl_stmt|;
name|CompareResult
name|compareResult
init|=
name|compare
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
if|if
condition|(
name|compareResult
operator|.
name|getCompareResult
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|compareResult
operator|.
name|getOrder
argument_list|()
operator|==
name|ASCENDING_CODE
operator|&&
name|compareResult
operator|.
name|getCompareResult
argument_list|()
operator|<
literal|0
operator|||
name|compareResult
operator|.
name|getOrder
argument_list|()
operator|==
name|DESCENDING_CODE
operator|&&
name|compareResult
operator|.
name|getCompareResult
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|parameters
operator|.
name|length
operator|/
literal|4
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameters
operator|.
name|length
operator|/
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|columnValues
operator|.
name|add
argument_list|(
name|parameters
index|[
name|i
operator|*
literal|4
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|RowData
name|rowData
init|=
operator|new
name|RowData
argument_list|(
name|columnValues
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rankBuffer
operator|.
name|elements
operator|.
name|contains
argument_list|(
name|rowData
argument_list|)
condition|)
block|{
name|rankBuffer
operator|.
name|elements
operator|.
name|add
argument_list|(
name|rowData
argument_list|)
expr_stmt|;
name|rankBuffer
operator|.
name|rank
operator|++
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminatePartial
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|HypotheticalSetDenseRankBuffer
name|rankBuffer
init|=
operator|(
name|HypotheticalSetDenseRankBuffer
operator|)
name|agg
decl_stmt|;
return|return
operator|new
name|LongWritable
argument_list|(
name|rankBuffer
operator|.
name|rank
operator|+
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|merge
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
name|partial
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|partial
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|HypotheticalSetDenseRankBuffer
name|rankBuffer
init|=
operator|(
name|HypotheticalSetDenseRankBuffer
operator|)
name|agg
decl_stmt|;
name|rankBuffer
operator|.
name|rank
operator|+=
operator|(
operator|(
name|LongWritable
operator|)
name|partial
operator|)
operator|.
name|get
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|HypotheticalSetDenseRankBuffer
name|rankBuffer
init|=
operator|(
name|HypotheticalSetDenseRankBuffer
operator|)
name|agg
decl_stmt|;
return|return
operator|new
name|LongWritable
argument_list|(
name|rankBuffer
operator|.
name|rank
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

