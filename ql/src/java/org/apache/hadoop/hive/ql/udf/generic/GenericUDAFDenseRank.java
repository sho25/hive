begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|WindowFunctionDescription
import|;
end_import

begin_class
annotation|@
name|WindowFunctionDescription
argument_list|(
name|description
operator|=
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"dense_rank"
argument_list|,
name|value
operator|=
literal|"_FUNC_(x) The difference between RANK and DENSE_RANK is that DENSE_RANK leaves no "
operator|+
literal|"gaps in ranking sequence when there are ties. That is, if you were "
operator|+
literal|"ranking a competition using DENSE_RANK and had three people tie for "
operator|+
literal|"second place, you would say that all three were in second place and "
operator|+
literal|"that the next person came in third."
argument_list|)
argument_list|,
name|supportsWindow
operator|=
literal|false
argument_list|,
name|pivotResult
operator|=
literal|true
argument_list|,
name|rankingFunction
operator|=
literal|true
argument_list|,
name|impliesOrder
operator|=
literal|true
argument_list|)
specifier|public
class|class
name|GenericUDAFDenseRank
extends|extends
name|GenericUDAFRank
block|{
annotation|@
name|Override
specifier|protected
name|GenericUDAFAbstractRankEvaluator
name|createEvaluator
parameter_list|()
block|{
return|return
operator|new
name|GenericUDAFDenseRankEvaluator
argument_list|()
return|;
block|}
specifier|public
specifier|static
class|class
name|GenericUDAFDenseRankEvaluator
extends|extends
name|GenericUDAFRankEvaluator
block|{
comment|/*      * Called when the value in the partition has changed. Update the currentRank      */
annotation|@
name|Override
specifier|protected
name|void
name|nextRank
parameter_list|(
name|RankBuffer
name|rb
parameter_list|)
block|{
name|rb
operator|.
name|currentRank
operator|++
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

