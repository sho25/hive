begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|typeinfo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_comment
comment|/** There are limited number of Primitive Types.  *  All Primitive Types are defined by TypeInfoFactory.isPrimitiveClass().  *    *  Always use the TypeInfoFactory to create new TypeInfo objects, instead  *  of directly creating an instance of this class.   */
end_comment

begin_class
specifier|public
class|class
name|PrimitiveTypeInfo
extends|extends
name|TypeInfo
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
name|Class
name|primitiveClass
decl_stmt|;
comment|/** For java serialization use only.    */
specifier|public
name|PrimitiveTypeInfo
parameter_list|()
block|{}
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|ObjectInspectorUtils
operator|.
name|getClassShortName
argument_list|(
name|primitiveClass
argument_list|)
return|;
block|}
comment|/** For java serialization use only.    */
specifier|public
name|void
name|setPrimitiveClass
parameter_list|(
name|Class
name|primitiveClass
parameter_list|)
block|{
name|this
operator|.
name|primitiveClass
operator|=
name|primitiveClass
expr_stmt|;
block|}
comment|/** For TypeInfoFactory use only.    */
name|PrimitiveTypeInfo
parameter_list|(
name|Class
name|primitiveClass
parameter_list|)
block|{
name|this
operator|.
name|primitiveClass
operator|=
name|primitiveClass
expr_stmt|;
block|}
specifier|public
name|Category
name|getCategory
parameter_list|()
block|{
return|return
name|Category
operator|.
name|PRIMITIVE
return|;
block|}
specifier|public
name|Class
name|getPrimitiveClass
parameter_list|()
block|{
return|return
name|primitiveClass
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|TypeInfo
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|TypeInfo
name|o
init|=
operator|(
name|TypeInfo
operator|)
name|other
decl_stmt|;
return|return
name|o
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|getCategory
argument_list|()
argument_list|)
operator|&&
name|o
operator|.
name|getPrimitiveClass
argument_list|()
operator|.
name|equals
argument_list|(
name|getPrimitiveClass
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|primitiveClass
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

