begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|database
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_comment
comment|/**  * Operation process of altering a database.  */
end_comment

begin_class
specifier|public
class|class
name|AlterDatabaseOperation
extends|extends
name|DDLOperation
block|{
specifier|private
specifier|final
name|AlterDatabaseDesc
name|desc
decl_stmt|;
specifier|public
name|AlterDatabaseOperation
parameter_list|(
name|DDLOperationContext
name|context
parameter_list|,
name|AlterDatabaseDesc
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|desc
operator|=
name|desc
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|()
throws|throws
name|HiveException
block|{
name|String
name|dbName
init|=
name|desc
operator|.
name|getDatabaseName
argument_list|()
decl_stmt|;
name|Database
name|database
init|=
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
name|database
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|DATABASE_NOT_EXISTS
argument_list|,
name|dbName
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|database
operator|.
name|getParameters
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
literal|null
operator|!=
name|desc
operator|.
name|getReplicationSpec
argument_list|()
operator|)
operator|&&
operator|!
name|desc
operator|.
name|getReplicationSpec
argument_list|()
operator|.
name|allowEventReplacementInto
argument_list|(
name|params
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"DDLTask: Alter Database {} is skipped as database is newer than update"
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
comment|// no replacement, the existing database state is newer than our update.
block|}
switch|switch
condition|(
name|desc
operator|.
name|getAlterType
argument_list|()
condition|)
block|{
case|case
name|ALTER_PROPERTY
case|:
name|alterProperties
argument_list|(
name|database
argument_list|,
name|params
argument_list|)
expr_stmt|;
break|break;
case|case
name|ALTER_OWNER
case|:
name|alterOwner
argument_list|(
name|database
argument_list|)
expr_stmt|;
break|break;
case|case
name|ALTER_LOCATION
case|:
name|alterLocation
argument_list|(
name|database
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unsupported alter database type! : "
operator|+
name|desc
operator|.
name|getAlterType
argument_list|()
argument_list|)
throw|;
block|}
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|alterDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|,
name|database
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|private
name|void
name|alterProperties
parameter_list|(
name|Database
name|database
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newParams
init|=
name|desc
operator|.
name|getDatabaseProperties
argument_list|()
decl_stmt|;
comment|// if both old and new params are not null, merge them
if|if
condition|(
name|params
operator|!=
literal|null
operator|&&
name|newParams
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|putAll
argument_list|(
name|newParams
argument_list|)
expr_stmt|;
name|database
operator|.
name|setParameters
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if one of them is null, replace the old params with the new one
name|database
operator|.
name|setParameters
argument_list|(
name|newParams
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|alterOwner
parameter_list|(
name|Database
name|database
parameter_list|)
block|{
name|database
operator|.
name|setOwnerName
argument_list|(
name|desc
operator|.
name|getOwnerPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|database
operator|.
name|setOwnerType
argument_list|(
name|desc
operator|.
name|getOwnerPrincipal
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|alterLocation
parameter_list|(
name|Database
name|database
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|String
name|newLocation
init|=
name|desc
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|URI
name|locationURI
init|=
operator|new
name|URI
argument_list|(
name|newLocation
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|locationURI
operator|.
name|isAbsolute
argument_list|()
operator|||
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|locationURI
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|BAD_LOCATION_VALUE
argument_list|,
name|newLocation
argument_list|)
throw|;
block|}
if|if
condition|(
name|newLocation
operator|.
name|equals
argument_list|(
name|database
operator|.
name|getLocationUri
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"AlterDatabase skipped. No change in location."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|database
operator|.
name|setLocationUri
argument_list|(
name|newLocation
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

