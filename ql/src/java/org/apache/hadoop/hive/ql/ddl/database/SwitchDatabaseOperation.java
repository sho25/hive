begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|database
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_comment
comment|/**  * Operation process of switching to another database.  */
end_comment

begin_class
specifier|public
class|class
name|SwitchDatabaseOperation
extends|extends
name|DDLOperation
block|{
specifier|private
specifier|final
name|SwitchDatabaseDesc
name|desc
decl_stmt|;
specifier|public
name|SwitchDatabaseOperation
parameter_list|(
name|DDLOperationContext
name|context
parameter_list|,
name|SwitchDatabaseDesc
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|desc
operator|=
name|desc
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|()
throws|throws
name|HiveException
block|{
name|String
name|dbName
init|=
name|desc
operator|.
name|getDatabaseName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|databaseExists
argument_list|(
name|dbName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|DATABASE_NOT_EXISTS
argument_list|,
name|dbName
argument_list|)
throw|;
block|}
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setCurrentDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
comment|// set database specific parameters
name|Database
name|database
init|=
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|database
operator|!=
literal|null
operator|)
assert|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dbParams
init|=
name|database
operator|.
name|getParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbParams
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|HiveConf
operator|.
name|ConfVars
name|var
range|:
name|HiveConf
operator|.
name|dbVars
control|)
block|{
name|String
name|newValue
init|=
name|dbParams
operator|.
name|get
argument_list|(
name|var
operator|.
name|varname
argument_list|)
decl_stmt|;
if|if
condition|(
name|newValue
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Changing {} from {} to {}"
argument_list|,
name|var
operator|.
name|varname
argument_list|,
name|context
operator|.
name|getConf
argument_list|()
operator|.
name|getVar
argument_list|(
name|var
argument_list|)
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|getConf
argument_list|()
operator|.
name|setVar
argument_list|(
name|var
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

