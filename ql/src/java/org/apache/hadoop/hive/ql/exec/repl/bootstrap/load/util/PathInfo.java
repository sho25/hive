begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*   Licensed to the Apache Software Foundation (ASF) under one   or more contributor license agreements.  See the NOTICE file   distributed with this work for additional information   regarding copyright ownership.  The ASF licenses this file   to you under the Apache License, Version 2.0 (the   "License"); you may not use this file except in compliance   with the License.  You may obtain a copy of the License at        http://www.apache.org/licenses/LICENSE-2.0    Unless required by applicable law or agreed to in writing, software   distributed under the License is distributed on an "AS IS" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions and   limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|bootstrap
operator|.
name|load
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
operator|.
name|generateExecutionId
import|;
end_import

begin_class
specifier|public
class|class
name|PathInfo
block|{
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PathUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|fsScratchDirs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|stagingDir
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|public
name|PathInfo
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
block|{
name|this
operator|.
name|hiveConf
operator|=
name|hiveConf
expr_stmt|;
name|stagingDir
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|STAGINGDIR
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|getFsScratchDirs
parameter_list|()
block|{
return|return
name|fsScratchDirs
return|;
block|}
name|Path
name|computeStagingDir
parameter_list|(
name|Path
name|inputPath
parameter_list|)
block|{
specifier|final
name|URI
name|inputPathUri
init|=
name|inputPath
operator|.
name|toUri
argument_list|()
decl_stmt|;
specifier|final
name|String
name|inputPathName
init|=
name|inputPathUri
operator|.
name|getPath
argument_list|()
decl_stmt|;
specifier|final
name|String
name|fileSystemAsString
init|=
name|inputPathUri
operator|.
name|getScheme
argument_list|()
operator|+
literal|":"
operator|+
name|inputPathUri
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
name|String
name|stagingPathName
decl_stmt|;
if|if
condition|(
operator|!
name|inputPathName
operator|.
name|contains
argument_list|(
name|stagingDir
argument_list|)
condition|)
block|{
name|stagingPathName
operator|=
operator|new
name|Path
argument_list|(
name|inputPathName
argument_list|,
name|stagingDir
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|stagingPathName
operator|=
name|inputPathName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|inputPathName
operator|.
name|indexOf
argument_list|(
name|stagingDir
argument_list|)
operator|+
name|stagingDir
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|key
init|=
name|fileSystemAsString
operator|+
literal|"-"
operator|+
name|stagingPathName
operator|+
literal|"-"
operator|+
name|TaskRunner
operator|.
name|getTaskRunnerID
argument_list|()
decl_stmt|;
name|Path
name|dir
init|=
name|fsScratchDirs
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
try|try
block|{
name|FileSystem
name|fileSystem
init|=
name|inputPath
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
block|{
comment|// Append task specific info to stagingPathName, instead of creating a sub-directory.
comment|// This way we don't have to worry about deleting the stagingPathName separately at
comment|// end of query execution.
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|stagingPathName
operator|+
literal|"_"
operator|+
name|generateExecutionId
argument_list|()
operator|+
literal|"-"
operator|+
name|TaskRunner
operator|.
name|getTaskRunnerID
argument_list|()
argument_list|)
decl_stmt|;
name|dir
operator|=
name|fileSystem
operator|.
name|makeQualified
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created staging dir = "
operator|+
name|dir
operator|+
literal|" for path = "
operator|+
name|inputPath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|FileUtils
operator|.
name|mkdir
argument_list|(
name|fileSystem
argument_list|,
name|dir
argument_list|,
name|hiveConf
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot create staging directory  '"
operator|+
name|dir
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|fileSystem
operator|.
name|deleteOnExit
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
name|fsScratchDirs
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|dir
argument_list|)
expr_stmt|;
return|return
name|dir
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot create staging directory '"
operator|+
name|dir
operator|.
name|toString
argument_list|()
operator|+
literal|"': "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

