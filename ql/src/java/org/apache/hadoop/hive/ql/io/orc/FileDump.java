begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * A tool for printing out the file structure of ORC files.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|FileDump
block|{
comment|// not used
specifier|private
name|FileDump
parameter_list|()
block|{}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|filename
range|:
name|args
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Structure for "
operator|+
name|filename
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|,
name|path
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|RecordReaderImpl
name|rows
init|=
operator|(
name|RecordReaderImpl
operator|)
name|reader
operator|.
name|rows
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Rows: "
operator|+
name|reader
operator|.
name|getNumberOfRows
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Compression: "
operator|+
name|reader
operator|.
name|getCompression
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|reader
operator|.
name|getCompression
argument_list|()
operator|!=
name|CompressionKind
operator|.
name|NONE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Compression size: "
operator|+
name|reader
operator|.
name|getCompressionSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Type: "
operator|+
name|reader
operator|.
name|getObjectInspector
argument_list|()
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nStripe Statistics:"
argument_list|)
expr_stmt|;
name|Metadata
name|metadata
init|=
name|reader
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|metadata
operator|.
name|getStripeStatistics
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|n
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  Stripe "
operator|+
operator|(
name|n
operator|+
literal|1
operator|)
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|StripeStatistics
name|ss
init|=
name|metadata
operator|.
name|getStripeStatistics
argument_list|()
operator|.
name|get
argument_list|(
name|n
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ss
operator|.
name|getColumnStatistics
argument_list|()
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    Column "
operator|+
name|i
operator|+
literal|": "
operator|+
name|ss
operator|.
name|getColumnStatistics
argument_list|()
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|ColumnStatistics
index|[]
name|stats
init|=
name|reader
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nFile Statistics:"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  Column "
operator|+
name|i
operator|+
literal|": "
operator|+
name|stats
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nStripes:"
argument_list|)
expr_stmt|;
for|for
control|(
name|StripeInformation
name|stripe
range|:
name|reader
operator|.
name|getStripes
argument_list|()
control|)
block|{
name|long
name|stripeStart
init|=
name|stripe
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  Stripe: "
operator|+
name|stripe
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|OrcProto
operator|.
name|StripeFooter
name|footer
init|=
name|rows
operator|.
name|readStripeFooter
argument_list|(
name|stripe
argument_list|)
decl_stmt|;
name|long
name|sectionStart
init|=
name|stripeStart
decl_stmt|;
for|for
control|(
name|OrcProto
operator|.
name|Stream
name|section
range|:
name|footer
operator|.
name|getStreamsList
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    Stream: column "
operator|+
name|section
operator|.
name|getColumn
argument_list|()
operator|+
literal|" section "
operator|+
name|section
operator|.
name|getKind
argument_list|()
operator|+
literal|" start: "
operator|+
name|sectionStart
operator|+
literal|" length "
operator|+
name|section
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|sectionStart
operator|+=
name|section
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|footer
operator|.
name|getColumnsCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
init|=
name|footer
operator|.
name|getColumns
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"    Encoding column "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|==
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DICTIONARY
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|encoding
operator|.
name|getDictionarySize
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
name|rows
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

