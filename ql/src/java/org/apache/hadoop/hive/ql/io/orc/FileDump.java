begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|filters
operator|.
name|BloomFilterIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|TypeDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|ColumnStatisticsImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|OrcIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|StripeInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|StripeStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONWriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * A tool for printing out the file structure of ORC files.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|FileDump
block|{
specifier|public
specifier|static
specifier|final
name|String
name|UNKNOWN
init|=
literal|"UNKNOWN"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SEPARATOR
init|=
name|Strings
operator|.
name|repeat
argument_list|(
literal|"_"
argument_list|,
literal|120
argument_list|)
operator|+
literal|"\n"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_BLOCK_SIZE
init|=
literal|256
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_BACKUP_PATH
init|=
literal|"/tmp"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PathFilter
name|HIDDEN_AND_SIDE_FILE_FILTER
init|=
operator|new
name|PathFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
name|String
name|name
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
operator|&&
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
operator|&&
operator|!
name|name
operator|.
name|endsWith
argument_list|(
name|AcidUtils
operator|.
name|DELTA_SIDE_FILE_SUFFIX
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// not used
specifier|private
name|FileDump
parameter_list|()
block|{   }
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|rowIndexCols
init|=
literal|null
decl_stmt|;
name|Options
name|opts
init|=
name|createOptions
argument_list|()
decl_stmt|;
name|CommandLine
name|cli
init|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|'h'
argument_list|)
condition|)
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"orcfiledump"
argument_list|,
name|opts
argument_list|)
expr_stmt|;
return|return;
block|}
name|boolean
name|dumpData
init|=
name|cli
operator|.
name|hasOption
argument_list|(
literal|'d'
argument_list|)
decl_stmt|;
name|boolean
name|recover
init|=
name|cli
operator|.
name|hasOption
argument_list|(
literal|"recover"
argument_list|)
decl_stmt|;
name|boolean
name|skipDump
init|=
name|cli
operator|.
name|hasOption
argument_list|(
literal|"skip-dump"
argument_list|)
decl_stmt|;
name|String
name|backupPath
init|=
name|DEFAULT_BACKUP_PATH
decl_stmt|;
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|"backup-path"
argument_list|)
condition|)
block|{
name|backupPath
operator|=
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"backup-path"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|"r"
argument_list|)
condition|)
block|{
name|String
index|[]
name|colStrs
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"r"
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|rowIndexCols
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|colStrs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|colStr
range|:
name|colStrs
control|)
block|{
name|rowIndexCols
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|colStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|printTimeZone
init|=
name|cli
operator|.
name|hasOption
argument_list|(
literal|'t'
argument_list|)
decl_stmt|;
name|boolean
name|jsonFormat
init|=
name|cli
operator|.
name|hasOption
argument_list|(
literal|'j'
argument_list|)
decl_stmt|;
name|String
index|[]
name|files
init|=
name|cli
operator|.
name|getArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error : ORC files are not specified"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// if the specified path is directory, iterate through all files and print the file dump
name|List
argument_list|<
name|String
argument_list|>
name|filesInPath
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|filename
range|:
name|files
control|)
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|filesInPath
operator|.
name|addAll
argument_list|(
name|getAllFilesInPath
argument_list|(
name|path
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dumpData
condition|)
block|{
name|printData
argument_list|(
name|filesInPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|recover
operator|&&
name|skipDump
condition|)
block|{
name|recoverFiles
argument_list|(
name|filesInPath
argument_list|,
name|conf
argument_list|,
name|backupPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|jsonFormat
condition|)
block|{
name|boolean
name|prettyPrint
init|=
name|cli
operator|.
name|hasOption
argument_list|(
literal|'p'
argument_list|)
decl_stmt|;
name|JsonFileDump
operator|.
name|printJsonMetaData
argument_list|(
name|filesInPath
argument_list|,
name|conf
argument_list|,
name|rowIndexCols
argument_list|,
name|prettyPrint
argument_list|,
name|printTimeZone
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printMetaData
argument_list|(
name|filesInPath
argument_list|,
name|conf
argument_list|,
name|rowIndexCols
argument_list|,
name|printTimeZone
argument_list|,
name|recover
argument_list|,
name|backupPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This method returns an ORC reader object if the specified file is readable. If the specified    * file has side file (_flush_length) file, then max footer offset will be read from the side    * file and orc reader will be created from that offset. Since both data file and side file    * use hflush() for flushing the data, there could be some inconsistencies and both files could be    * out-of-sync. Following are the cases under which null will be returned    *    * 1) If the file specified by path or its side file is still open for writes    * 2) If *_flush_length file does not return any footer offset    * 3) If *_flush_length returns a valid footer offset but the data file is not readable at that    *    position (incomplete data file)    * 4) If *_flush_length file length is not a multiple of 8, then reader will be created from    *    previous valid footer. If there is no such footer (file length> 0 and< 8), then null will    *    be returned    *    * Also, if this method detects any file corruption (mismatch between data file and side file)    * then it will add the corresponding file to the specified input list for corrupted files.    *    * In all other cases, where the file is readable this method will return a reader object.    *    * @param path - file to get reader for    * @param conf - configuration object    * @param corruptFiles - fills this list with all possible corrupted files    * @return - reader for the specified file or null    * @throws IOException    */
specifier|static
name|Reader
name|getReader
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|corruptFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|long
name|dataFileLen
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Processing data file "
operator|+
name|path
operator|+
literal|" [length: "
operator|+
name|dataFileLen
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|Path
name|sideFile
init|=
name|OrcRecordUpdater
operator|.
name|getSideFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|sideFileExists
init|=
name|fs
operator|.
name|exists
argument_list|(
name|sideFile
argument_list|)
decl_stmt|;
name|boolean
name|openDataFile
init|=
literal|false
decl_stmt|;
name|boolean
name|openSideFile
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fs
operator|instanceof
name|DistributedFileSystem
condition|)
block|{
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
decl_stmt|;
name|openDataFile
operator|=
operator|!
name|dfs
operator|.
name|isFileClosed
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|openSideFile
operator|=
name|sideFileExists
operator|&&
operator|!
name|dfs
operator|.
name|isFileClosed
argument_list|(
name|sideFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|openDataFile
operator|||
name|openSideFile
condition|)
block|{
if|if
condition|(
name|openDataFile
operator|&&
name|openSideFile
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to perform file dump as "
operator|+
name|path
operator|+
literal|" and "
operator|+
name|sideFile
operator|+
literal|" are still open for writes."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|openSideFile
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to perform file dump as "
operator|+
name|sideFile
operator|+
literal|" is still open for writes."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to perform file dump as "
operator|+
name|path
operator|+
literal|" is still open for writes."
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sideFileExists
condition|)
block|{
specifier|final
name|long
name|maxLen
init|=
name|OrcRawRecordMerger
operator|.
name|getLastFlushLength
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
decl_stmt|;
specifier|final
name|long
name|sideFileLen
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|sideFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Found flush length file "
operator|+
name|sideFile
operator|+
literal|" [length: "
operator|+
name|sideFileLen
operator|+
literal|", maxFooterOffset: "
operator|+
name|maxLen
operator|+
literal|"]"
argument_list|)
expr_stmt|;
comment|// no offsets read from side file
if|if
condition|(
name|maxLen
operator|==
operator|-
literal|1
condition|)
block|{
comment|// if data file is larger than last flush length, then additional data could be recovered
if|if
condition|(
name|dataFileLen
operator|>
name|maxLen
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Data file has more data than max footer offset:"
operator|+
name|maxLen
operator|+
literal|". Adding data file to recovery list."
argument_list|)
expr_stmt|;
if|if
condition|(
name|corruptFiles
operator|!=
literal|null
condition|)
block|{
name|corruptFiles
operator|.
name|add
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
try|try
block|{
name|reader
operator|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|path
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|maxLength
argument_list|(
name|maxLen
argument_list|)
argument_list|)
expr_stmt|;
comment|// if data file is larger than last flush length, then additional data could be recovered
if|if
condition|(
name|dataFileLen
operator|>
name|maxLen
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Data file has more data than max footer offset:"
operator|+
name|maxLen
operator|+
literal|". Adding data file to recovery list."
argument_list|)
expr_stmt|;
if|if
condition|(
name|corruptFiles
operator|!=
literal|null
condition|)
block|{
name|corruptFiles
operator|.
name|add
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|corruptFiles
operator|!=
literal|null
condition|)
block|{
name|corruptFiles
operator|.
name|add
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to read data from max footer offset."
operator|+
literal|" Adding data file to recovery list."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
name|reader
operator|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|path
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|reader
return|;
block|}
specifier|public
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|getAllFilesInPath
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|filesInPath
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|FileStatus
index|[]
name|fileStatuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|,
name|HIDDEN_AND_SIDE_FILE_FILTER
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|fileInPath
range|:
name|fileStatuses
control|)
block|{
if|if
condition|(
name|fileInPath
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|filesInPath
operator|.
name|addAll
argument_list|(
name|getAllFilesInPath
argument_list|(
name|fileInPath
operator|.
name|getPath
argument_list|()
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filesInPath
operator|.
name|add
argument_list|(
name|fileInPath
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|filesInPath
operator|.
name|add
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|filesInPath
return|;
block|}
specifier|private
specifier|static
name|void
name|printData
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|JSONException
block|{
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
try|try
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
name|getReader
argument_list|(
name|path
argument_list|,
name|conf
argument_list|,
name|Lists
operator|.
expr|<
name|String
operator|>
name|newArrayList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|printJsonData
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to dump data for file: "
operator|+
name|file
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|printMetaData
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|rowIndexCols
parameter_list|,
name|boolean
name|printTimeZone
parameter_list|,
specifier|final
name|boolean
name|recover
parameter_list|,
specifier|final
name|String
name|backupPath
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|corruptFiles
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|filename
range|:
name|files
control|)
block|{
name|printMetaDataImpl
argument_list|(
name|filename
argument_list|,
name|conf
argument_list|,
name|rowIndexCols
argument_list|,
name|printTimeZone
argument_list|,
name|corruptFiles
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|corruptFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|recover
condition|)
block|{
name|recoverFiles
argument_list|(
name|corruptFiles
argument_list|,
name|conf
argument_list|,
name|backupPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|corruptFiles
operator|.
name|size
argument_list|()
operator|+
literal|" file(s) are corrupted."
operator|+
literal|" Run the following command to recover corrupted files.\n"
argument_list|)
expr_stmt|;
name|String
name|fileNames
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|" "
argument_list|)
operator|.
name|skipNulls
argument_list|()
operator|.
name|join
argument_list|(
name|corruptFiles
argument_list|)
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"hive --orcfiledump --recover --skip-dump "
operator|+
name|fileNames
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|printMetaDataImpl
parameter_list|(
specifier|final
name|String
name|filename
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|rowIndexCols
parameter_list|,
specifier|final
name|boolean
name|printTimeZone
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|corruptFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
name|getReader
argument_list|(
name|file
argument_list|,
name|conf
argument_list|,
name|corruptFiles
argument_list|)
decl_stmt|;
comment|// if we can create reader then footer is not corrupt and file will readable
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Structure for "
operator|+
name|filename
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"File Version: "
operator|+
name|reader
operator|.
name|getFileVersion
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" with "
operator|+
name|reader
operator|.
name|getWriterVersion
argument_list|()
argument_list|)
expr_stmt|;
name|RecordReaderImpl
name|rows
init|=
operator|(
name|RecordReaderImpl
operator|)
name|reader
operator|.
name|rows
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Rows: "
operator|+
name|reader
operator|.
name|getNumberOfRows
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Compression: "
operator|+
name|reader
operator|.
name|getCompression
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|reader
operator|.
name|getCompression
argument_list|()
operator|!=
name|CompressionKind
operator|.
name|NONE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Compression size: "
operator|+
name|reader
operator|.
name|getCompressionSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Type: "
operator|+
name|reader
operator|.
name|getObjectInspector
argument_list|()
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nStripe Statistics:"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|StripeStatistics
argument_list|>
name|stripeStats
init|=
name|reader
operator|.
name|getStripeStatistics
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|stripeStats
operator|.
name|size
argument_list|()
condition|;
name|n
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  Stripe "
operator|+
operator|(
name|n
operator|+
literal|1
operator|)
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|StripeStatistics
name|ss
init|=
name|stripeStats
operator|.
name|get
argument_list|(
name|n
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ss
operator|.
name|getColumnStatistics
argument_list|()
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    Column "
operator|+
name|i
operator|+
literal|": "
operator|+
name|ss
operator|.
name|getColumnStatistics
argument_list|()
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|ColumnStatistics
index|[]
name|stats
init|=
name|reader
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|int
name|colCount
init|=
name|stats
operator|.
name|length
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nFile Statistics:"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  Column "
operator|+
name|i
operator|+
literal|": "
operator|+
name|stats
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nStripes:"
argument_list|)
expr_stmt|;
name|int
name|stripeIx
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|StripeInformation
name|stripe
range|:
name|reader
operator|.
name|getStripes
argument_list|()
control|)
block|{
operator|++
name|stripeIx
expr_stmt|;
name|long
name|stripeStart
init|=
name|stripe
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|OrcProto
operator|.
name|StripeFooter
name|footer
init|=
name|rows
operator|.
name|readStripeFooter
argument_list|(
name|stripe
argument_list|)
decl_stmt|;
if|if
condition|(
name|printTimeZone
condition|)
block|{
name|String
name|tz
init|=
name|footer
operator|.
name|getWriterTimezone
argument_list|()
decl_stmt|;
if|if
condition|(
name|tz
operator|==
literal|null
operator|||
name|tz
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tz
operator|=
name|UNKNOWN
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  Stripe: "
operator|+
name|stripe
operator|.
name|toString
argument_list|()
operator|+
literal|" timezone: "
operator|+
name|tz
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  Stripe: "
operator|+
name|stripe
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|sectionStart
init|=
name|stripeStart
decl_stmt|;
for|for
control|(
name|OrcProto
operator|.
name|Stream
name|section
range|:
name|footer
operator|.
name|getStreamsList
argument_list|()
control|)
block|{
name|String
name|kind
init|=
name|section
operator|.
name|hasKind
argument_list|()
condition|?
name|section
operator|.
name|getKind
argument_list|()
operator|.
name|name
argument_list|()
else|:
name|UNKNOWN
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    Stream: column "
operator|+
name|section
operator|.
name|getColumn
argument_list|()
operator|+
literal|" section "
operator|+
name|kind
operator|+
literal|" start: "
operator|+
name|sectionStart
operator|+
literal|" length "
operator|+
name|section
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|sectionStart
operator|+=
name|section
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|footer
operator|.
name|getColumnsCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
init|=
name|footer
operator|.
name|getColumns
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"    Encoding column "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|==
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DICTIONARY
operator|||
name|encoding
operator|.
name|getKind
argument_list|()
operator|==
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DICTIONARY_V2
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|encoding
operator|.
name|getDictionarySize
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rowIndexCols
operator|!=
literal|null
operator|&&
operator|!
name|rowIndexCols
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// include the columns that are specified, only if the columns are included, bloom filter
comment|// will be read
name|boolean
index|[]
name|sargColumns
init|=
operator|new
name|boolean
index|[
name|colCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|colIdx
range|:
name|rowIndexCols
control|)
block|{
name|sargColumns
index|[
name|colIdx
index|]
operator|=
literal|true
expr_stmt|;
block|}
name|OrcIndex
name|indices
init|=
name|rows
operator|.
name|readRowIndex
argument_list|(
name|stripeIx
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|sargColumns
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|col
range|:
name|rowIndexCols
control|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|rowIdxString
init|=
name|getFormattedRowIndices
argument_list|(
name|col
argument_list|,
name|indices
operator|.
name|getRowGroupIndex
argument_list|()
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|rowIdxString
argument_list|)
expr_stmt|;
name|String
name|bloomFilString
init|=
name|getFormattedBloomFilters
argument_list|(
name|col
argument_list|,
name|indices
operator|.
name|getBloomFilterIndex
argument_list|()
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|bloomFilString
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|FileSystem
name|fs
init|=
name|file
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|long
name|fileLen
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|long
name|paddedBytes
init|=
name|getTotalPaddingSize
argument_list|(
name|reader
argument_list|)
decl_stmt|;
comment|// empty ORC file is ~45 bytes. Assumption here is file length always>0
name|double
name|percentPadding
init|=
operator|(
operator|(
name|double
operator|)
name|paddedBytes
operator|/
operator|(
name|double
operator|)
name|fileLen
operator|)
operator|*
literal|100
decl_stmt|;
name|DecimalFormat
name|format
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"##.##"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nFile length: "
operator|+
name|fileLen
operator|+
literal|" bytes"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Padding length: "
operator|+
name|paddedBytes
operator|+
literal|" bytes"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Padding ratio: "
operator|+
name|format
operator|.
name|format
argument_list|(
name|percentPadding
argument_list|)
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|OrcRecordUpdater
operator|.
name|AcidStats
name|acidStats
init|=
name|OrcRecordUpdater
operator|.
name|parseAcidStats
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|acidStats
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ACID stats:"
operator|+
name|acidStats
argument_list|)
expr_stmt|;
block|}
name|rows
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|recoverFiles
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|corruptFiles
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|backup
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|corruptFile
range|:
name|corruptFiles
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Recovering file "
operator|+
name|corruptFile
argument_list|)
expr_stmt|;
name|Path
name|corruptPath
init|=
operator|new
name|Path
argument_list|(
name|corruptFile
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|corruptPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|fdis
init|=
name|fs
operator|.
name|open
argument_list|(
name|corruptPath
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|corruptFileLen
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|corruptPath
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|long
name|remaining
init|=
name|corruptFileLen
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|footerOffsets
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// start reading the data file form top to bottom and record the valid footers
while|while
condition|(
name|remaining
operator|>
literal|0
condition|)
block|{
name|int
name|toRead
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|DEFAULT_BLOCK_SIZE
argument_list|,
name|remaining
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|toRead
index|]
decl_stmt|;
name|long
name|startPos
init|=
name|corruptFileLen
operator|-
name|remaining
decl_stmt|;
name|fdis
operator|.
name|readFully
argument_list|(
name|startPos
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|toRead
argument_list|)
expr_stmt|;
comment|// find all MAGIC string and see if the file is readable from there
name|int
name|index
init|=
literal|0
decl_stmt|;
name|long
name|nextFooterOffset
decl_stmt|;
while|while
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|index
operator|=
name|indexOf
argument_list|(
name|data
argument_list|,
name|OrcFile
operator|.
name|MAGIC
operator|.
name|getBytes
argument_list|()
argument_list|,
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|nextFooterOffset
operator|=
name|startPos
operator|+
name|index
operator|+
name|OrcFile
operator|.
name|MAGIC
operator|.
name|length
argument_list|()
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|isReadable
argument_list|(
name|corruptPath
argument_list|,
name|conf
argument_list|,
name|nextFooterOffset
argument_list|)
condition|)
block|{
name|footerOffsets
operator|.
name|add
argument_list|(
name|nextFooterOffset
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Scanning for valid footers - startPos: "
operator|+
name|startPos
operator|+
literal|" toRead: "
operator|+
name|toRead
operator|+
literal|" remaining: "
operator|+
name|remaining
argument_list|)
expr_stmt|;
name|remaining
operator|=
name|remaining
operator|-
name|toRead
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Readable footerOffsets: "
operator|+
name|footerOffsets
argument_list|)
expr_stmt|;
name|recoverFile
argument_list|(
name|corruptPath
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|footerOffsets
argument_list|,
name|backup
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Path
name|recoveryFile
init|=
name|getRecoveryFile
argument_list|(
name|corruptPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|recoveryFile
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|recoveryFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to recover file "
operator|+
name|corruptFile
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
continue|continue;
block|}
finally|finally
block|{
name|fdis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|corruptFile
operator|+
literal|" recovered successfully!"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|recoverFile
parameter_list|(
specifier|final
name|Path
name|corruptPath
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|List
argument_list|<
name|Long
argument_list|>
name|footerOffsets
parameter_list|,
specifier|final
name|String
name|backup
parameter_list|)
throws|throws
name|IOException
block|{
comment|// first recover the file to .recovered file and then once successful rename it to actual file
name|Path
name|recoveredPath
init|=
name|getRecoveryFile
argument_list|(
name|corruptPath
argument_list|)
decl_stmt|;
comment|// make sure that file does not exist
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|recoveredPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|recoveredPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// if there are no valid footers, the file should still be readable so create an empty orc file
if|if
condition|(
name|footerOffsets
operator|==
literal|null
operator|||
name|footerOffsets
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"No readable footers found. Creating empty orc file."
argument_list|)
expr_stmt|;
name|TypeDescription
name|schema
init|=
name|TypeDescription
operator|.
name|createStruct
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|recoveredPath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|FSDataInputStream
name|fdis
init|=
name|fs
operator|.
name|open
argument_list|(
name|corruptPath
argument_list|)
decl_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|corruptPath
argument_list|)
decl_stmt|;
comment|// read corrupt file and copy it to recovered file until last valid footer
name|FSDataOutputStream
name|fdos
init|=
name|fs
operator|.
name|create
argument_list|(
name|recoveredPath
argument_list|,
literal|true
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
argument_list|,
name|fileStatus
operator|.
name|getReplication
argument_list|()
argument_list|,
name|fileStatus
operator|.
name|getBlockSize
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|fileLen
init|=
name|footerOffsets
operator|.
name|get
argument_list|(
name|footerOffsets
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|long
name|remaining
init|=
name|fileLen
decl_stmt|;
while|while
condition|(
name|remaining
operator|>
literal|0
condition|)
block|{
name|int
name|toRead
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|DEFAULT_BLOCK_SIZE
argument_list|,
name|remaining
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|toRead
index|]
decl_stmt|;
name|long
name|startPos
init|=
name|fileLen
operator|-
name|remaining
decl_stmt|;
name|fdis
operator|.
name|readFully
argument_list|(
name|startPos
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|toRead
argument_list|)
expr_stmt|;
name|fdos
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Copying data to recovery file - startPos: "
operator|+
name|startPos
operator|+
literal|" toRead: "
operator|+
name|toRead
operator|+
literal|" remaining: "
operator|+
name|remaining
argument_list|)
expr_stmt|;
name|remaining
operator|=
name|remaining
operator|-
name|toRead
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|recoveredPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|fdis
operator|.
name|close
argument_list|()
expr_stmt|;
name|fdos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// validate the recovered file once again and start moving corrupt files to backup folder
if|if
condition|(
name|isReadable
argument_list|(
name|recoveredPath
argument_list|,
name|conf
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
condition|)
block|{
name|Path
name|backupDataPath
decl_stmt|;
name|String
name|scheme
init|=
name|corruptPath
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|String
name|authority
init|=
name|corruptPath
operator|.
name|toUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
name|String
name|filePath
init|=
name|corruptPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// use the same filesystem as corrupt file if backup-path is not explicitly specified
if|if
condition|(
name|backup
operator|.
name|equals
argument_list|(
name|DEFAULT_BACKUP_PATH
argument_list|)
condition|)
block|{
name|backupDataPath
operator|=
operator|new
name|Path
argument_list|(
name|scheme
argument_list|,
name|authority
argument_list|,
name|DEFAULT_BACKUP_PATH
operator|+
name|filePath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|backupDataPath
operator|=
operator|new
name|Path
argument_list|(
name|backup
operator|+
name|filePath
argument_list|)
expr_stmt|;
block|}
comment|// Move data file to backup path
name|moveFiles
argument_list|(
name|fs
argument_list|,
name|corruptPath
argument_list|,
name|backupDataPath
argument_list|)
expr_stmt|;
comment|// Move side file to backup path
name|Path
name|sideFilePath
init|=
name|OrcRecordUpdater
operator|.
name|getSideFile
argument_list|(
name|corruptPath
argument_list|)
decl_stmt|;
name|Path
name|backupSideFilePath
init|=
operator|new
name|Path
argument_list|(
name|backupDataPath
operator|.
name|getParent
argument_list|()
argument_list|,
name|sideFilePath
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|moveFiles
argument_list|(
name|fs
argument_list|,
name|sideFilePath
argument_list|,
name|backupSideFilePath
argument_list|)
expr_stmt|;
comment|// finally move recovered file to actual file
name|moveFiles
argument_list|(
name|fs
argument_list|,
name|recoveredPath
argument_list|,
name|corruptPath
argument_list|)
expr_stmt|;
comment|// we are done recovering, backing up and validating
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Validation of recovered file successful!"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|moveFiles
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|src
parameter_list|,
specifier|final
name|Path
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// create the dest directory if not exist
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|dest
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|dest
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// if the destination file exists for some reason delete it
name|fs
operator|.
name|delete
argument_list|(
name|dest
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dest
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Moved "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dest
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to move "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dest
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to move "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dest
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|Path
name|getRecoveryFile
parameter_list|(
specifier|final
name|Path
name|corruptPath
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|corruptPath
operator|.
name|getParent
argument_list|()
argument_list|,
name|corruptPath
operator|.
name|getName
argument_list|()
operator|+
literal|".recovered"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isReadable
parameter_list|(
specifier|final
name|Path
name|corruptPath
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|long
name|maxLen
parameter_list|)
block|{
try|try
block|{
name|OrcFile
operator|.
name|createReader
argument_list|(
name|corruptPath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|maxLength
argument_list|(
name|maxLen
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore this exception as maxLen is unreadable
return|return
literal|false
return|;
block|}
block|}
comment|// search for byte pattern in another byte array
specifier|private
specifier|static
name|int
name|indexOf
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|,
specifier|final
name|byte
index|[]
name|pattern
parameter_list|,
specifier|final
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|length
operator|==
literal|0
operator|||
name|pattern
operator|==
literal|null
operator|||
name|pattern
operator|.
name|length
operator|==
literal|0
operator|||
name|index
operator|>
name|data
operator|.
name|length
operator|||
name|index
operator|<
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|index
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|pattern
index|[
name|j
index|]
operator|==
name|data
index|[
name|i
index|]
condition|)
block|{
name|j
operator|++
expr_stmt|;
block|}
else|else
block|{
name|j
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|j
operator|==
name|pattern
operator|.
name|length
condition|)
block|{
return|return
name|i
operator|-
name|pattern
operator|.
name|length
operator|+
literal|1
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|private
specifier|static
name|String
name|getFormattedBloomFilters
parameter_list|(
name|int
name|col
parameter_list|,
name|OrcProto
operator|.
name|BloomFilterIndex
index|[]
name|bloomFilterIndex
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|BloomFilterIO
name|stripeLevelBF
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bloomFilterIndex
operator|!=
literal|null
operator|&&
name|bloomFilterIndex
index|[
name|col
index|]
operator|!=
literal|null
condition|)
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\n    Bloom filters for column "
argument_list|)
operator|.
name|append
argument_list|(
name|col
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
for|for
control|(
name|OrcProto
operator|.
name|BloomFilter
name|bf
range|:
name|bloomFilterIndex
index|[
name|col
index|]
operator|.
name|getBloomFilterList
argument_list|()
control|)
block|{
name|BloomFilterIO
name|toMerge
init|=
operator|new
name|BloomFilterIO
argument_list|(
name|bf
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\n      Entry "
argument_list|)
operator|.
name|append
argument_list|(
name|idx
operator|++
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|getBloomFilterStats
argument_list|(
name|toMerge
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|stripeLevelBF
operator|==
literal|null
condition|)
block|{
name|stripeLevelBF
operator|=
name|toMerge
expr_stmt|;
block|}
else|else
block|{
name|stripeLevelBF
operator|.
name|merge
argument_list|(
name|toMerge
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|bloomFilterStats
init|=
name|getBloomFilterStats
argument_list|(
name|stripeLevelBF
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\n      Stripe level merge:"
argument_list|)
operator|.
name|append
argument_list|(
name|bloomFilterStats
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|getBloomFilterStats
parameter_list|(
name|BloomFilterIO
name|bf
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|bitCount
init|=
name|bf
operator|.
name|getBitSize
argument_list|()
decl_stmt|;
name|int
name|popCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|l
range|:
name|bf
operator|.
name|getBitSet
argument_list|()
control|)
block|{
name|popCount
operator|+=
name|Long
operator|.
name|bitCount
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
name|int
name|k
init|=
name|bf
operator|.
name|getNumHashFunctions
argument_list|()
decl_stmt|;
name|float
name|loadFactor
init|=
operator|(
name|float
operator|)
name|popCount
operator|/
operator|(
name|float
operator|)
name|bitCount
decl_stmt|;
name|float
name|expectedFpp
init|=
operator|(
name|float
operator|)
name|Math
operator|.
name|pow
argument_list|(
name|loadFactor
argument_list|,
name|k
argument_list|)
decl_stmt|;
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"###.####"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" numHashFunctions: "
argument_list|)
operator|.
name|append
argument_list|(
name|k
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" bitCount: "
argument_list|)
operator|.
name|append
argument_list|(
name|bitCount
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" popCount: "
argument_list|)
operator|.
name|append
argument_list|(
name|popCount
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" loadFactor: "
argument_list|)
operator|.
name|append
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|loadFactor
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" expectedFpp: "
argument_list|)
operator|.
name|append
argument_list|(
name|expectedFpp
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|getFormattedRowIndices
parameter_list|(
name|int
name|col
parameter_list|,
name|OrcProto
operator|.
name|RowIndex
index|[]
name|rowGroupIndex
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|OrcProto
operator|.
name|RowIndex
name|index
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"    Row group indices for column "
argument_list|)
operator|.
name|append
argument_list|(
name|col
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
if|if
condition|(
name|rowGroupIndex
operator|==
literal|null
operator|||
operator|(
name|col
operator|>=
name|rowGroupIndex
operator|.
name|length
operator|)
operator|||
operator|(
operator|(
name|index
operator|=
name|rowGroupIndex
index|[
name|col
index|]
operator|)
operator|==
literal|null
operator|)
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" not found\n"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
for|for
control|(
name|int
name|entryIx
init|=
literal|0
init|;
name|entryIx
operator|<
name|index
operator|.
name|getEntryCount
argument_list|()
condition|;
operator|++
name|entryIx
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\n      Entry "
argument_list|)
operator|.
name|append
argument_list|(
name|entryIx
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|OrcProto
operator|.
name|RowIndexEntry
name|entry
init|=
name|index
operator|.
name|getEntry
argument_list|(
name|entryIx
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"unknown\n"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|OrcProto
operator|.
name|ColumnStatistics
name|colStats
init|=
name|entry
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
if|if
condition|(
name|colStats
operator|==
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"no stats at "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ColumnStatistics
name|cs
init|=
name|ColumnStatisticsImpl
operator|.
name|deserialize
argument_list|(
name|colStats
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|cs
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|" positions: "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|posIx
init|=
literal|0
init|;
name|posIx
operator|<
name|entry
operator|.
name|getPositionsCount
argument_list|()
condition|;
operator|++
name|posIx
control|)
block|{
if|if
condition|(
name|posIx
operator|!=
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getPositions
argument_list|(
name|posIx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|long
name|getTotalPaddingSize
parameter_list|(
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|paddedBytes
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|StripeInformation
argument_list|>
name|stripes
init|=
name|reader
operator|.
name|getStripes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|stripes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|long
name|prevStripeOffset
init|=
name|stripes
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|long
name|prevStripeLen
init|=
name|stripes
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|paddedBytes
operator|+=
name|stripes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getOffset
argument_list|()
operator|-
operator|(
name|prevStripeOffset
operator|+
name|prevStripeLen
operator|)
expr_stmt|;
block|}
return|return
name|paddedBytes
return|;
block|}
specifier|static
name|Options
name|createOptions
parameter_list|()
block|{
name|Options
name|result
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
comment|// add -d and --data to print the rows
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"data"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Should the data be printed"
argument_list|)
operator|.
name|create
argument_list|(
literal|'d'
argument_list|)
argument_list|)
expr_stmt|;
comment|// to avoid breaking unit tests (when run in different time zones) for file dump, printing
comment|// of timezone is made optional
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"timezone"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Print writer's time zone"
argument_list|)
operator|.
name|create
argument_list|(
literal|'t'
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"help"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"print help message"
argument_list|)
operator|.
name|create
argument_list|(
literal|'h'
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"rowindex"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"comma separated list of column ids for which row index should be printed"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Dump stats for column number(s)"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'r'
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"json"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Print metadata in JSON format"
argument_list|)
operator|.
name|create
argument_list|(
literal|'j'
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"pretty"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Pretty print json metadata output"
argument_list|)
operator|.
name|create
argument_list|(
literal|'p'
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"recover"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"recover corrupted orc files generated by streaming"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"skip-dump"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"used along with --recover to directly recover files without dumping"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"backup-path"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"specify a backup path to store the corrupted files (default: /tmp)"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|void
name|printMap
parameter_list|(
name|JSONWriter
name|writer
parameter_list|,
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|obj
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
parameter_list|,
name|OrcProto
operator|.
name|Type
name|type
parameter_list|)
throws|throws
name|IOException
throws|,
name|JSONException
block|{
name|writer
operator|.
name|array
argument_list|()
expr_stmt|;
name|int
name|keyType
init|=
name|type
operator|.
name|getSubtypes
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|valueType
init|=
name|type
operator|.
name|getSubtypes
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|item
range|:
name|obj
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|writer
operator|.
name|object
argument_list|()
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"_key"
argument_list|)
expr_stmt|;
name|printObject
argument_list|(
name|writer
argument_list|,
name|item
operator|.
name|getKey
argument_list|()
argument_list|,
name|types
argument_list|,
name|keyType
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"_value"
argument_list|)
expr_stmt|;
name|printObject
argument_list|(
name|writer
argument_list|,
name|item
operator|.
name|getValue
argument_list|()
argument_list|,
name|types
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|printList
parameter_list|(
name|JSONWriter
name|writer
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|obj
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
parameter_list|,
name|OrcProto
operator|.
name|Type
name|type
parameter_list|)
throws|throws
name|IOException
throws|,
name|JSONException
block|{
name|int
name|subtype
init|=
name|type
operator|.
name|getSubtypes
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writer
operator|.
name|array
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|item
range|:
name|obj
control|)
block|{
name|printObject
argument_list|(
name|writer
argument_list|,
name|item
argument_list|,
name|types
argument_list|,
name|subtype
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|printUnion
parameter_list|(
name|JSONWriter
name|writer
parameter_list|,
name|OrcUnion
name|obj
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
parameter_list|,
name|OrcProto
operator|.
name|Type
name|type
parameter_list|)
throws|throws
name|IOException
throws|,
name|JSONException
block|{
name|int
name|subtype
init|=
name|type
operator|.
name|getSubtypes
argument_list|(
name|obj
operator|.
name|getTag
argument_list|()
argument_list|)
decl_stmt|;
name|printObject
argument_list|(
name|writer
argument_list|,
name|obj
operator|.
name|getObject
argument_list|()
argument_list|,
name|types
argument_list|,
name|subtype
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|printStruct
parameter_list|(
name|JSONWriter
name|writer
parameter_list|,
name|OrcStruct
name|obj
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
parameter_list|,
name|OrcProto
operator|.
name|Type
name|type
parameter_list|)
throws|throws
name|IOException
throws|,
name|JSONException
block|{
name|writer
operator|.
name|object
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|fieldTypes
init|=
name|type
operator|.
name|getSubtypesList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldTypes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|key
argument_list|(
name|type
operator|.
name|getFieldNames
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|printObject
argument_list|(
name|writer
argument_list|,
name|obj
operator|.
name|getFieldValue
argument_list|(
name|i
argument_list|)
argument_list|,
name|types
argument_list|,
name|fieldTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
specifier|static
name|void
name|printObject
parameter_list|(
name|JSONWriter
name|writer
parameter_list|,
name|Object
name|obj
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
parameter_list|,
name|int
name|typeId
parameter_list|)
throws|throws
name|IOException
throws|,
name|JSONException
block|{
name|OrcProto
operator|.
name|Type
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|typeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
name|writer
operator|.
name|value
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|type
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|STRUCT
case|:
name|printStruct
argument_list|(
name|writer
argument_list|,
operator|(
name|OrcStruct
operator|)
name|obj
argument_list|,
name|types
argument_list|,
name|type
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNION
case|:
name|printUnion
argument_list|(
name|writer
argument_list|,
operator|(
name|OrcUnion
operator|)
name|obj
argument_list|,
name|types
argument_list|,
name|type
argument_list|)
expr_stmt|;
break|break;
case|case
name|LIST
case|:
name|printList
argument_list|(
name|writer
argument_list|,
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|obj
argument_list|,
name|types
argument_list|,
name|type
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAP
case|:
name|printMap
argument_list|(
name|writer
argument_list|,
operator|(
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|obj
argument_list|,
name|types
argument_list|,
name|type
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|writer
operator|.
name|value
argument_list|(
operator|(
operator|(
name|ByteWritable
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|writer
operator|.
name|value
argument_list|(
operator|(
operator|(
name|ShortWritable
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|writer
operator|.
name|value
argument_list|(
operator|(
operator|(
name|IntWritable
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|writer
operator|.
name|value
argument_list|(
operator|(
operator|(
name|LongWritable
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|writer
operator|.
name|value
argument_list|(
operator|(
operator|(
name|FloatWritable
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|writer
operator|.
name|value
argument_list|(
operator|(
operator|(
name|DoubleWritable
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|BOOLEAN
case|:
name|writer
operator|.
name|value
argument_list|(
operator|(
operator|(
name|BooleanWritable
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|writer
operator|.
name|value
argument_list|(
name|obj
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|static
name|void
name|printJsonData
parameter_list|(
specifier|final
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
throws|,
name|JSONException
block|{
name|PrintStream
name|printStream
init|=
name|System
operator|.
name|out
decl_stmt|;
name|OutputStreamWriter
name|out
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|printStream
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|RecordReader
name|rows
init|=
name|reader
operator|.
name|rows
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Object
name|row
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
init|=
name|reader
operator|.
name|getTypes
argument_list|()
decl_stmt|;
while|while
condition|(
name|rows
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|row
operator|=
name|rows
operator|.
name|next
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|JSONWriter
name|writer
init|=
operator|new
name|JSONWriter
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|printObject
argument_list|(
name|writer
argument_list|,
name|row
argument_list|,
name|types
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|printStream
operator|.
name|checkError
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error encountered when writing to stdout."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

