begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Encapsulates HS2 compile lock logic.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|CompileLock
implements|implements
name|AutoCloseable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CompileLock
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LOCK_ACQUIRED_MSG
init|=
literal|"Acquired the compile lock."
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WAIT_LOCK_ACQUIRE_MSG
init|=
literal|"Waiting to acquire compile lock: "
decl_stmt|;
specifier|private
specifier|final
name|Lock
name|underlying
decl_stmt|;
specifier|private
specifier|final
name|long
name|defaultTimeout
decl_stmt|;
specifier|private
specifier|final
name|String
name|command
decl_stmt|;
specifier|private
name|boolean
name|isLocked
init|=
literal|false
decl_stmt|;
name|CompileLock
parameter_list|(
name|Lock
name|underlying
parameter_list|,
name|long
name|timeout
parameter_list|,
name|String
name|command
parameter_list|)
block|{
name|this
operator|.
name|underlying
operator|=
name|underlying
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|this
operator|.
name|defaultTimeout
operator|=
name|timeout
expr_stmt|;
block|}
comment|/**    * Acquires the compile lock. If the compile lock wait timeout is configured,    * it will acquire the lock if it is not held by another thread within the given    * waiting time.    *    * @return {@code true} if the lock was successfully acquired,    * or {@code false} if compile lock wait timeout is configured and    * either the waiting time elapsed before the lock could be acquired    * or the current thread was interrupted.    */
specifier|public
name|boolean
name|tryAcquire
parameter_list|()
block|{
return|return
name|tryAcquire
argument_list|(
name|defaultTimeout
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|tryAcquire
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
comment|// First shot without waiting.
try|try
block|{
if|if
condition|(
name|underlying
operator|.
name|tryLock
argument_list|(
literal|0
argument_list|,
name|unit
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|LOCK_ACQUIRED_MSG
argument_list|)
expr_stmt|;
return|return
name|aquired
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupted Exception ignored"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|failedToAquire
argument_list|()
return|;
block|}
comment|// If the first shot fails, then we log the waiting messages.
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|WAIT_LOCK_ACQUIRE_MSG
operator|+
name|command
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timeout
operator|>
literal|0
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|underlying
operator|.
name|tryLock
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ErrorMsg
operator|.
name|COMPILE_LOCK_TIMED_OUT
operator|.
name|getErrorCodedMsg
argument_list|()
operator|+
literal|": "
operator|+
name|command
argument_list|)
expr_stmt|;
return|return
name|failedToAquire
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupted Exception ignored"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|failedToAquire
argument_list|()
return|;
block|}
block|}
else|else
block|{
name|underlying
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|LOCK_ACQUIRED_MSG
argument_list|)
expr_stmt|;
return|return
name|aquired
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|aquired
parameter_list|()
block|{
return|return
name|locked
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|failedToAquire
parameter_list|()
block|{
return|return
name|locked
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|locked
parameter_list|(
name|boolean
name|isLocked
parameter_list|)
block|{
name|this
operator|.
name|isLocked
operator|=
name|isLocked
expr_stmt|;
return|return
name|isLocked
return|;
block|}
comment|/**    * Releases the compile lock.    *    * An underlying {@code Lock} implementation will usually impose restrictions on which    * thread can release a lock (typically only the holder of the lock can release it)    * and may throw an (unchecked) exception if the restriction is violated.    */
specifier|public
name|void
name|release
parameter_list|()
block|{
name|underlying
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|isLocked
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|isLocked
condition|)
block|{
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

