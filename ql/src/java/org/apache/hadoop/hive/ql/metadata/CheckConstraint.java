begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|generic
operator|.
name|GenericData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLCheckConstraint
import|;
end_import

begin_comment
comment|/**  * CheckConstraintInfo is a metadata structure containing the Check constraints  * associated with a table.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|public
class|class
name|CheckConstraint
implements|implements
name|Serializable
block|{
specifier|public
class|class
name|CheckConstraintCol
block|{
specifier|public
name|String
name|colName
decl_stmt|;
specifier|public
name|String
name|checkExpression
decl_stmt|;
specifier|public
name|CheckConstraintCol
parameter_list|(
name|String
name|colName
parameter_list|,
name|String
name|checkExpression
parameter_list|)
block|{
name|this
operator|.
name|colName
operator|=
name|colName
expr_stmt|;
name|this
operator|.
name|checkExpression
operator|=
name|checkExpression
expr_stmt|;
block|}
block|}
comment|// Mapping from constraint name to list of Check constraints
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CheckConstraintCol
argument_list|>
argument_list|>
name|checkConstraints
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|checkExpressionList
decl_stmt|;
comment|// Mapping from column name to Check expr
name|String
name|tableName
decl_stmt|;
name|String
name|databaseName
decl_stmt|;
specifier|public
name|CheckConstraint
parameter_list|()
block|{}
specifier|public
name|CheckConstraint
parameter_list|(
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|checkConstraintsList
parameter_list|)
block|{
name|checkConstraints
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CheckConstraintCol
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|checkExpressionList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
if|if
condition|(
name|checkConstraintsList
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|checkConstraintsList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|checkConstraintsList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_name
argument_list|()
expr_stmt|;
name|this
operator|.
name|databaseName
operator|=
name|checkConstraintsList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable_db
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|SQLCheckConstraint
name|uk
range|:
name|checkConstraintsList
control|)
block|{
name|String
name|colName
init|=
name|uk
operator|.
name|getColumn_name
argument_list|()
decl_stmt|;
name|String
name|check_expression
init|=
name|uk
operator|.
name|getCheck_expression
argument_list|()
decl_stmt|;
name|checkExpressionList
operator|.
name|add
argument_list|(
name|check_expression
argument_list|)
expr_stmt|;
name|CheckConstraintCol
name|currCol
init|=
operator|new
name|CheckConstraintCol
argument_list|(
name|colName
argument_list|,
name|check_expression
argument_list|)
decl_stmt|;
name|String
name|constraintName
init|=
name|uk
operator|.
name|getDc_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkConstraints
operator|.
name|containsKey
argument_list|(
name|constraintName
argument_list|)
condition|)
block|{
name|checkConstraints
operator|.
name|get
argument_list|(
name|constraintName
argument_list|)
operator|.
name|add
argument_list|(
name|currCol
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|CheckConstraintCol
argument_list|>
name|currList
init|=
operator|new
name|ArrayList
argument_list|<
name|CheckConstraintCol
argument_list|>
argument_list|()
decl_stmt|;
name|currList
operator|.
name|add
argument_list|(
name|currCol
argument_list|)
expr_stmt|;
name|checkConstraints
operator|.
name|put
argument_list|(
name|constraintName
argument_list|,
name|currList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
specifier|public
name|String
name|getDatabaseName
parameter_list|()
block|{
return|return
name|databaseName
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCheckExpressionList
parameter_list|()
block|{
return|return
name|checkExpressionList
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CheckConstraintCol
argument_list|>
argument_list|>
name|getCheckConstraints
parameter_list|()
block|{
return|return
name|checkConstraints
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Check Constraints for "
operator|+
name|databaseName
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkConstraints
operator|!=
literal|null
operator|&&
name|checkConstraints
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CheckConstraintCol
argument_list|>
argument_list|>
name|me
range|:
name|checkConstraints
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" {Constraint Name: "
operator|+
name|me
operator|.
name|getKey
argument_list|()
operator|+
literal|","
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CheckConstraintCol
argument_list|>
name|currCol
init|=
name|me
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|currCol
operator|!=
literal|null
operator|&&
name|currCol
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|CheckConstraintCol
name|ukc
range|:
name|currCol
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" (Column Name: "
operator|+
name|ukc
operator|.
name|colName
operator|+
literal|", Check Expression : "
operator|+
name|ukc
operator|.
name|checkExpression
operator|+
literal|"),"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|setLength
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"},"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|setLength
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isCheckConstraintNotEmpty
parameter_list|(
name|CheckConstraint
name|info
parameter_list|)
block|{
return|return
name|info
operator|!=
literal|null
operator|&&
operator|!
name|info
operator|.
name|getCheckConstraints
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

