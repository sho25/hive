begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|errors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Detects when a query has failed because a user's script that was specified in  * transform returns a non-zero error code.  *  * Conditions to check:  *  * 1. "Script failed with code<some number>" is in the log  *  */
end_comment

begin_class
specifier|public
class|class
name|ScriptErrorHeuristic
extends|extends
name|RegexErrorHeuristic
block|{
specifier|private
specifier|static
specifier|final
name|String
name|FAILED_REGEX
init|=
literal|"Script failed with code [0-9]+"
decl_stmt|;
specifier|public
name|ScriptErrorHeuristic
parameter_list|()
block|{
name|setQueryRegex
argument_list|(
literal|".*"
argument_list|)
expr_stmt|;
name|getLogRegexes
argument_list|()
operator|.
name|add
argument_list|(
name|FAILED_REGEX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ErrorAndSolution
name|getErrorAndSolution
parameter_list|()
block|{
name|ErrorAndSolution
name|es
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getQueryMatches
argument_list|()
condition|)
block|{
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|matchingLines
range|:
name|getRegexToLogLines
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
comment|// There should really only be one line with "Script failed..."
if|if
condition|(
name|matchingLines
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
assert|assert
operator|(
name|matchingLines
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
comment|// Get "Script failed with code<some number>"
name|Matcher
name|m1
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|FAILED_REGEX
argument_list|)
operator|.
name|matcher
argument_list|(
name|matchingLines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|m1
operator|.
name|find
argument_list|()
expr_stmt|;
name|String
name|failedStr
init|=
name|m1
operator|.
name|group
argument_list|()
decl_stmt|;
comment|// Get "<some number>"
name|Matcher
name|m2
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[0-9]+"
argument_list|)
operator|.
name|matcher
argument_list|(
name|failedStr
argument_list|)
decl_stmt|;
name|m2
operator|.
name|find
argument_list|()
expr_stmt|;
name|String
name|errorCode
init|=
name|m2
operator|.
name|group
argument_list|()
decl_stmt|;
name|es
operator|=
operator|new
name|ErrorAndSolution
argument_list|(
literal|"A user-supplied transfrom script has exited with error code "
operator|+
name|errorCode
operator|+
literal|" instead of 0."
argument_list|,
literal|"Verify that the script can properly handle all the input rows "
operator|+
literal|"without throwing exceptions and exits properly."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|reset
argument_list|()
expr_stmt|;
return|return
name|es
return|;
block|}
block|}
end_class

end_unit

