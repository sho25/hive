begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|StringUnaryUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFConv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_comment
comment|/**  * Implement vectorized function conv(string, int,  int) returning string.  * Support for use on numbers instead of strings shall be implemented  * by inserting an explicit cast to string. There will not be VectorExpression  * classes specifically for conv applied to numbers.  */
end_comment

begin_class
specifier|public
class|class
name|StringConv
extends|extends
name|StringUnaryUDF
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
name|StringConv
parameter_list|(
name|int
name|colNum
parameter_list|,
name|int
name|outputColumn
parameter_list|,
name|int
name|fromBase
parameter_list|,
name|int
name|toBase
parameter_list|)
block|{
name|super
argument_list|(
name|colNum
argument_list|,
name|outputColumn
argument_list|,
operator|(
name|IUDFUnaryString
operator|)
operator|new
name|ConvWrapper
argument_list|(
name|fromBase
argument_list|,
name|toBase
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StringConv
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/* This wrapper class implements the evaluate() method expected    * by the superclass for use in the inner loop of vectorized expression    * evaluation. It holds the fromBase and toBase arguments to    * make the interface simply "Text evaluate(Text)" as expected.    */
specifier|static
class|class
name|ConvWrapper
implements|implements
name|IUDFUnaryString
block|{
name|UDFConv
name|conv
decl_stmt|;
name|IntWritable
name|fromBase
decl_stmt|;
name|IntWritable
name|toBase
decl_stmt|;
name|ConvWrapper
parameter_list|(
name|int
name|fromBase
parameter_list|,
name|int
name|toBase
parameter_list|)
block|{
name|conv
operator|=
operator|new
name|UDFConv
argument_list|()
expr_stmt|;
name|this
operator|.
name|fromBase
operator|=
operator|new
name|IntWritable
argument_list|(
name|fromBase
argument_list|)
expr_stmt|;
name|this
operator|.
name|toBase
operator|=
operator|new
name|IntWritable
argument_list|(
name|toBase
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Text
name|evaluate
parameter_list|(
name|Text
name|s
parameter_list|)
block|{
return|return
name|conv
operator|.
name|evaluate
argument_list|(
name|s
argument_list|,
name|fromBase
argument_list|,
name|toBase
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

