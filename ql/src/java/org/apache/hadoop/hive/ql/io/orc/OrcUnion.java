begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|UnionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|UnionObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|UnionTypeInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * An in-memory representation of a union type.  */
end_comment

begin_class
specifier|final
class|class
name|OrcUnion
implements|implements
name|UnionObject
block|{
specifier|private
name|byte
name|tag
decl_stmt|;
specifier|private
name|Object
name|object
decl_stmt|;
name|void
name|set
parameter_list|(
name|byte
name|tag
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
name|this
operator|.
name|tag
operator|=
name|tag
expr_stmt|;
name|this
operator|.
name|object
operator|=
name|object
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getTag
parameter_list|()
block|{
return|return
name|tag
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
return|return
name|object
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
operator|||
name|other
operator|.
name|getClass
argument_list|()
operator|!=
name|OrcUnion
operator|.
name|class
condition|)
block|{
return|return
literal|false
return|;
block|}
name|OrcUnion
name|oth
init|=
operator|(
name|OrcUnion
operator|)
name|other
decl_stmt|;
if|if
condition|(
name|tag
operator|!=
name|oth
operator|.
name|tag
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
name|oth
operator|.
name|object
operator|==
literal|null
return|;
block|}
else|else
block|{
return|return
name|object
operator|.
name|equals
argument_list|(
name|oth
operator|.
name|object
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|tag
decl_stmt|;
if|if
condition|(
name|object
operator|!=
literal|null
condition|)
block|{
name|result
operator|^=
name|object
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"union("
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|tag
operator|&
literal|0xff
argument_list|)
operator|+
literal|", "
operator|+
name|object
operator|.
name|toString
argument_list|()
operator|+
literal|")"
return|;
block|}
specifier|static
class|class
name|OrcUnionObjectInspector
implements|implements
name|UnionObjectInspector
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|children
decl_stmt|;
name|OrcUnionObjectInspector
parameter_list|(
name|int
name|columnId
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
parameter_list|)
block|{
name|OrcProto
operator|.
name|Type
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
decl_stmt|;
name|children
operator|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|type
operator|.
name|getSubtypesCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|type
operator|.
name|getSubtypesCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|children
operator|.
name|add
argument_list|(
name|OrcStruct
operator|.
name|createObjectInspector
argument_list|(
name|type
operator|.
name|getSubtypes
argument_list|(
name|i
argument_list|)
argument_list|,
name|types
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|OrcUnionObjectInspector
parameter_list|(
name|UnionTypeInfo
name|info
parameter_list|)
block|{
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|unionChildren
init|=
name|info
operator|.
name|getAllUnionObjectTypeInfos
argument_list|()
decl_stmt|;
name|this
operator|.
name|children
operator|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|unionChildren
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TypeInfo
name|child
range|:
name|info
operator|.
name|getAllUnionObjectTypeInfos
argument_list|()
control|)
block|{
name|this
operator|.
name|children
operator|.
name|add
argument_list|(
name|OrcStruct
operator|.
name|createObjectInspector
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|getObjectInspectors
parameter_list|()
block|{
return|return
name|children
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getTag
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
operator|(
operator|(
name|OrcUnion
operator|)
name|obj
operator|)
operator|.
name|tag
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getField
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
operator|(
operator|(
name|OrcUnion
operator|)
name|obj
operator|)
operator|.
name|object
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"uniontype<"
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ObjectInspector
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|child
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Category
name|getCategory
parameter_list|()
block|{
return|return
name|Category
operator|.
name|UNION
return|;
block|}
block|}
block|}
end_class

end_unit

