begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|OpParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|RowResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AggregationDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|GroupByDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableScanDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_comment
comment|/**  * This class defines a procedure factory used to rewrite the operator plan  * Each method replaces the necessary base table data structures with  * the index table data structures for each operator.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|RewriteQueryUsingAggregateIndex
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RewriteQueryUsingAggregateIndex
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|RewriteQueryUsingAggregateIndexCtx
name|rewriteQueryCtx
init|=
literal|null
decl_stmt|;
specifier|private
name|RewriteQueryUsingAggregateIndex
parameter_list|()
block|{
comment|//this prevents the class from getting instantiated
block|}
specifier|private
specifier|static
class|class
name|NewQuerySelectSchemaProc
implements|implements
name|NodeProcessor
block|{
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|SelectOperator
name|operator
init|=
operator|(
name|SelectOperator
operator|)
name|nd
decl_stmt|;
name|rewriteQueryCtx
operator|=
operator|(
name|RewriteQueryUsingAggregateIndexCtx
operator|)
name|ctx
expr_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|childOps
init|=
name|operator
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|childOp
init|=
name|childOps
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//we need to set the colList, outputColumnNames, colExprMap,
comment|// rowSchema for only that SelectOperator which precedes the GroupByOperator
comment|// count(indexed_key_column) needs to be replaced by sum(`_count_of_indexed_key_column`)
if|if
condition|(
name|childOp
operator|instanceof
name|GroupByOperator
condition|)
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|selColList
init|=
name|operator
operator|.
name|getConf
argument_list|()
operator|.
name|getColList
argument_list|()
decl_stmt|;
name|selColList
operator|.
name|add
argument_list|(
name|rewriteQueryCtx
operator|.
name|getAggrExprNode
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|selOutputColNames
init|=
name|operator
operator|.
name|getConf
argument_list|()
operator|.
name|getOutputColumnNames
argument_list|()
decl_stmt|;
name|selOutputColNames
operator|.
name|add
argument_list|(
name|rewriteQueryCtx
operator|.
name|getAggrExprNode
argument_list|()
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|RowSchema
name|selRS
init|=
name|operator
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|selRSSignature
init|=
name|selRS
operator|.
name|getSignature
argument_list|()
decl_stmt|;
comment|//Need to create a new type for Column[_count_of_indexed_key_column] node
name|PrimitiveTypeInfo
name|pti
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"bigint"
argument_list|)
decl_stmt|;
name|pti
operator|.
name|setTypeName
argument_list|(
literal|"bigint"
argument_list|)
expr_stmt|;
name|ColumnInfo
name|newCI
init|=
operator|new
name|ColumnInfo
argument_list|(
name|rewriteQueryCtx
operator|.
name|getAggregateFunction
argument_list|()
argument_list|,
name|pti
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|selRSSignature
operator|.
name|add
argument_list|(
name|newCI
argument_list|)
expr_stmt|;
name|selRS
operator|.
name|setSignature
argument_list|(
operator|(
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
operator|)
name|selRSSignature
argument_list|)
expr_stmt|;
name|operator
operator|.
name|setSchema
argument_list|(
name|selRS
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|NewQuerySelectSchemaProc
name|getNewQuerySelectSchemaProc
parameter_list|()
block|{
return|return
operator|new
name|NewQuerySelectSchemaProc
argument_list|()
return|;
block|}
comment|/**    * This processor replaces the original TableScanOperator with    * the new TableScanOperator and metadata that scans over the    * index table rather than scanning over the orginal table.    *    */
specifier|private
specifier|static
class|class
name|ReplaceTableScanOpProc
implements|implements
name|NodeProcessor
block|{
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TableScanOperator
name|scanOperator
init|=
operator|(
name|TableScanOperator
operator|)
name|nd
decl_stmt|;
name|rewriteQueryCtx
operator|=
operator|(
name|RewriteQueryUsingAggregateIndexCtx
operator|)
name|ctx
expr_stmt|;
name|String
name|baseTableName
init|=
name|rewriteQueryCtx
operator|.
name|getBaseTableName
argument_list|()
decl_stmt|;
name|String
name|alias
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|baseTableName
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|alias
operator|=
operator|(
name|baseTableName
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
operator|)
index|[
literal|0
index|]
expr_stmt|;
block|}
comment|//Need to remove the original TableScanOperators from these data structures
comment|// and add new ones
name|Map
argument_list|<
name|TableScanOperator
argument_list|,
name|Table
argument_list|>
name|topToTable
init|=
name|rewriteQueryCtx
operator|.
name|getParseContext
argument_list|()
operator|.
name|getTopToTable
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|topOps
init|=
name|rewriteQueryCtx
operator|.
name|getParseContext
argument_list|()
operator|.
name|getTopOps
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|,
name|OpParseContext
argument_list|>
name|opParseContext
init|=
name|rewriteQueryCtx
operator|.
name|getParseContext
argument_list|()
operator|.
name|getOpParseCtx
argument_list|()
decl_stmt|;
comment|//need this to set rowResolver for new scanOperator
name|OpParseContext
name|operatorContext
init|=
name|opParseContext
operator|.
name|get
argument_list|(
name|scanOperator
argument_list|)
decl_stmt|;
comment|//remove original TableScanOperator
name|topToTable
operator|.
name|remove
argument_list|(
name|scanOperator
argument_list|)
expr_stmt|;
name|topOps
operator|.
name|remove
argument_list|(
name|baseTableName
argument_list|)
expr_stmt|;
name|opParseContext
operator|.
name|remove
argument_list|(
name|scanOperator
argument_list|)
expr_stmt|;
comment|//construct a new descriptor for the index table scan
name|TableScanDesc
name|indexTableScanDesc
init|=
operator|new
name|TableScanDesc
argument_list|()
decl_stmt|;
name|indexTableScanDesc
operator|.
name|setGatherStats
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|indexTableName
init|=
name|rewriteQueryCtx
operator|.
name|getIndexName
argument_list|()
decl_stmt|;
name|Table
name|indexTableHandle
init|=
literal|null
decl_stmt|;
try|try
block|{
name|indexTableHandle
operator|=
name|rewriteQueryCtx
operator|.
name|getHiveDb
argument_list|()
operator|.
name|getTable
argument_list|(
name|indexTableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while getting the table handle for index table."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|String
name|k
init|=
name|indexTableName
operator|+
name|Path
operator|.
name|SEPARATOR
decl_stmt|;
name|indexTableScanDesc
operator|.
name|setStatsAggPrefix
argument_list|(
name|k
argument_list|)
expr_stmt|;
name|scanOperator
operator|.
name|setConf
argument_list|(
name|indexTableScanDesc
argument_list|)
expr_stmt|;
comment|//Construct the new RowResolver for the new TableScanOperator
name|RowResolver
name|rr
init|=
operator|new
name|RowResolver
argument_list|()
decl_stmt|;
try|try
block|{
name|StructObjectInspector
name|rowObjectInspector
init|=
operator|(
name|StructObjectInspector
operator|)
name|indexTableHandle
operator|.
name|getDeserializer
argument_list|()
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|rowObjectInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|rr
operator|.
name|put
argument_list|(
name|indexTableName
argument_list|,
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldName
argument_list|()
argument_list|,
operator|new
name|ColumnInfo
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
argument_list|,
name|indexTableName
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while creating the RowResolver for new TableScanOperator."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|//Set row resolver for new table
name|operatorContext
operator|.
name|setRowResolver
argument_list|(
name|rr
argument_list|)
expr_stmt|;
name|String
name|tabNameWithAlias
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|alias
operator|!=
literal|null
condition|)
block|{
name|tabNameWithAlias
operator|=
name|alias
operator|+
literal|":"
operator|+
name|indexTableName
expr_stmt|;
block|}
else|else
block|{
name|tabNameWithAlias
operator|=
name|indexTableName
expr_stmt|;
block|}
comment|//Scan operator now points to other table
name|topToTable
operator|.
name|put
argument_list|(
name|scanOperator
argument_list|,
name|indexTableHandle
argument_list|)
expr_stmt|;
name|scanOperator
operator|.
name|getConf
argument_list|()
operator|.
name|setAlias
argument_list|(
name|tabNameWithAlias
argument_list|)
expr_stmt|;
name|scanOperator
operator|.
name|setAlias
argument_list|(
name|indexTableName
argument_list|)
expr_stmt|;
name|topOps
operator|.
name|put
argument_list|(
name|tabNameWithAlias
argument_list|,
name|scanOperator
argument_list|)
expr_stmt|;
name|opParseContext
operator|.
name|put
argument_list|(
name|scanOperator
argument_list|,
name|operatorContext
argument_list|)
expr_stmt|;
name|rewriteQueryCtx
operator|.
name|getParseContext
argument_list|()
operator|.
name|setTopToTable
argument_list|(
operator|(
name|HashMap
argument_list|<
name|TableScanOperator
argument_list|,
name|Table
argument_list|>
operator|)
name|topToTable
argument_list|)
expr_stmt|;
name|rewriteQueryCtx
operator|.
name|getParseContext
argument_list|()
operator|.
name|setTopOps
argument_list|(
operator|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
operator|)
name|topOps
argument_list|)
expr_stmt|;
name|rewriteQueryCtx
operator|.
name|getParseContext
argument_list|()
operator|.
name|setOpParseCtx
argument_list|(
operator|(
name|LinkedHashMap
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|,
name|OpParseContext
argument_list|>
operator|)
name|opParseContext
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|ReplaceTableScanOpProc
name|getReplaceTableScanProc
parameter_list|()
block|{
return|return
operator|new
name|ReplaceTableScanOpProc
argument_list|()
return|;
block|}
comment|/**    * We need to replace the count(indexed_column_key) GenericUDAF aggregation function for    * group-by construct to "sum" GenericUDAF.    * This processor creates a new operator tree for a sample query that creates a GroupByOperator    * with sum aggregation function and uses that GroupByOperator information to replace    * the original GroupByOperator aggregation information.    * It replaces the AggregationDesc (aggregation descriptor) of the old GroupByOperator with the    * new Aggregation Desc of the new GroupByOperator.    */
specifier|private
specifier|static
class|class
name|NewQueryGroupbySchemaProc
implements|implements
name|NodeProcessor
block|{
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|GroupByOperator
name|operator
init|=
operator|(
name|GroupByOperator
operator|)
name|nd
decl_stmt|;
name|rewriteQueryCtx
operator|=
operator|(
name|RewriteQueryUsingAggregateIndexCtx
operator|)
name|ctx
expr_stmt|;
comment|//We need to replace the GroupByOperator which is in
comment|//groupOpToInputTables map with the new GroupByOperator
if|if
condition|(
name|rewriteQueryCtx
operator|.
name|getParseContext
argument_list|()
operator|.
name|getGroupOpToInputTables
argument_list|()
operator|.
name|containsKey
argument_list|(
name|operator
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|gbyKeyList
init|=
name|operator
operator|.
name|getConf
argument_list|()
operator|.
name|getKeys
argument_list|()
decl_stmt|;
name|String
name|gbyKeys
init|=
literal|null
decl_stmt|;
name|Iterator
argument_list|<
name|ExprNodeDesc
argument_list|>
name|gbyKeyListItr
init|=
name|gbyKeyList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|gbyKeyListItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExprNodeDesc
name|expr
init|=
name|gbyKeyListItr
operator|.
name|next
argument_list|()
operator|.
name|clone
argument_list|()
decl_stmt|;
if|if
condition|(
name|expr
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|ExprNodeColumnDesc
name|colExpr
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|expr
decl_stmt|;
name|gbyKeys
operator|=
name|colExpr
operator|.
name|getColumn
argument_list|()
expr_stmt|;
if|if
condition|(
name|gbyKeyListItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|gbyKeys
operator|=
name|gbyKeys
operator|+
literal|","
expr_stmt|;
block|}
block|}
block|}
comment|//the query contains the sum aggregation GenericUDAF
name|String
name|selReplacementCommand
init|=
literal|"select sum(`"
operator|+
name|rewriteQueryCtx
operator|.
name|getAggregateFunction
argument_list|()
operator|+
literal|"`)"
operator|+
literal|" from "
operator|+
name|rewriteQueryCtx
operator|.
name|getIndexName
argument_list|()
operator|+
literal|" group by "
operator|+
name|gbyKeys
operator|+
literal|" "
decl_stmt|;
comment|//create a new ParseContext for the query to retrieve its operator tree,
comment|//and the required GroupByOperator from it
name|ParseContext
name|newDAGContext
init|=
name|RewriteParseContextGenerator
operator|.
name|generateOperatorTree
argument_list|(
name|rewriteQueryCtx
operator|.
name|getParseContext
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|,
name|selReplacementCommand
argument_list|)
decl_stmt|;
comment|//we get our new GroupByOperator here
name|Map
argument_list|<
name|GroupByOperator
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|newGbyOpMap
init|=
name|newDAGContext
operator|.
name|getGroupOpToInputTables
argument_list|()
decl_stmt|;
name|GroupByOperator
name|newGbyOperator
init|=
name|newGbyOpMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|GroupByDesc
name|oldConf
init|=
name|operator
operator|.
name|getConf
argument_list|()
decl_stmt|;
comment|//we need this information to set the correct colList, outputColumnNames in SelectOperator
name|ExprNodeColumnDesc
name|aggrExprNode
init|=
literal|null
decl_stmt|;
comment|//Construct the new AggregationDesc to get rid of the current
comment|//internal names and replace them with new internal names
comment|//as required by the operator tree
name|GroupByDesc
name|newConf
init|=
name|newGbyOperator
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AggregationDesc
argument_list|>
name|newAggrList
init|=
name|newConf
operator|.
name|getAggregators
argument_list|()
decl_stmt|;
if|if
condition|(
name|newAggrList
operator|!=
literal|null
operator|&&
name|newAggrList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|AggregationDesc
name|aggregationDesc
range|:
name|newAggrList
control|)
block|{
name|rewriteQueryCtx
operator|.
name|setEval
argument_list|(
name|aggregationDesc
operator|.
name|getGenericUDAFEvaluator
argument_list|()
argument_list|)
expr_stmt|;
name|aggrExprNode
operator|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|aggregationDesc
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|rewriteQueryCtx
operator|.
name|setAggrExprNode
argument_list|(
name|aggrExprNode
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Now the GroupByOperator has the new AggregationList; sum(`_count_of_indexed_key`)
comment|//instead of count(indexed_key)
name|OpParseContext
name|gbyOPC
init|=
name|rewriteQueryCtx
operator|.
name|getOpc
argument_list|()
operator|.
name|get
argument_list|(
name|operator
argument_list|)
decl_stmt|;
name|RowResolver
name|gbyRR
init|=
name|newDAGContext
operator|.
name|getOpParseCtx
argument_list|()
operator|.
name|get
argument_list|(
name|newGbyOperator
argument_list|)
operator|.
name|getRowResolver
argument_list|()
decl_stmt|;
name|gbyOPC
operator|.
name|setRowResolver
argument_list|(
name|gbyRR
argument_list|)
expr_stmt|;
name|rewriteQueryCtx
operator|.
name|getOpc
argument_list|()
operator|.
name|put
argument_list|(
name|operator
argument_list|,
name|gbyOPC
argument_list|)
expr_stmt|;
name|oldConf
operator|.
name|setAggregators
argument_list|(
operator|(
name|ArrayList
argument_list|<
name|AggregationDesc
argument_list|>
operator|)
name|newAggrList
argument_list|)
expr_stmt|;
name|operator
operator|.
name|setConf
argument_list|(
name|oldConf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//we just need to reset the GenericUDAFEvaluator and its name for this
comment|//GroupByOperator whose parent is the ReduceSinkOperator
name|GroupByDesc
name|childConf
init|=
operator|(
name|GroupByDesc
operator|)
name|operator
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AggregationDesc
argument_list|>
name|childAggrList
init|=
name|childConf
operator|.
name|getAggregators
argument_list|()
decl_stmt|;
if|if
condition|(
name|childAggrList
operator|!=
literal|null
operator|&&
name|childAggrList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|AggregationDesc
name|aggregationDesc
range|:
name|childAggrList
control|)
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|paraList
init|=
name|aggregationDesc
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|parametersTypeInfoList
init|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|expr
range|:
name|paraList
control|)
block|{
name|parametersTypeInfoList
operator|.
name|add
argument_list|(
name|expr
operator|.
name|getTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|GenericUDAFEvaluator
name|evaluator
init|=
name|FunctionRegistry
operator|.
name|getGenericUDAFEvaluator
argument_list|(
literal|"sum"
argument_list|,
name|parametersTypeInfoList
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|aggregationDesc
operator|.
name|setGenericUDAFEvaluator
argument_list|(
name|evaluator
argument_list|)
expr_stmt|;
name|aggregationDesc
operator|.
name|setGenericUDAFName
argument_list|(
literal|"sum"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|NewQueryGroupbySchemaProc
name|getNewQueryGroupbySchemaProc
parameter_list|()
block|{
return|return
operator|new
name|NewQueryGroupbySchemaProc
argument_list|()
return|;
block|}
block|}
end_class

end_unit

