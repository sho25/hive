begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|CorrelationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|SetOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalTableFunctionScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalTableModify
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCorrelVariable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexDynamicParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexFieldAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexPermuteInputsShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlExplainFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlExplainLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
operator|.
name|CorrelationReferenceFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Bug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ReflectUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ReflectiveVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|IntPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|MappingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mappings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class comes from Calcite almost as-is. The only change concerns  * the dispatcher and the builder, so the trimmer is thread-safe and can  * be reused across different queries. Definition follows.  *  *<p>Transformer that walks over a tree of relational expressions, replacing each  * {@link RelNode} with a 'slimmed down' relational expression that projects  * only the columns required by its consumer.  *  *<p>Uses multi-methods to fire the right rule for each type of relational  * expression. This allows the transformer to be extended without having to  * add a new method to RelNode, and without requiring a collection of rule  * classes scattered to the four winds.  */
end_comment

begin_class
specifier|public
class|class
name|RelFieldTrimmer
implements|implements
name|ReflectiveVisitor
block|{
comment|//~ Static fields/initializers ---------------------------------------------
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RelFieldTrimmer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|RelBuilder
argument_list|>
name|REL_BUILDER
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
comment|//~ Instance fields --------------------------------------------------------
specifier|protected
specifier|final
name|HiveReflectUtil
operator|.
name|ClassMethodDispatcher
argument_list|<
name|TrimResult
argument_list|,
name|RelNode
argument_list|>
name|trimFieldsDispatcher
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a RelFieldTrimmer.    * @param useLMFBasedDispatcher True if we want to create a dispatcher based on    *                              {@link java.lang.invoke.LambdaMetafactory} that is    *                              thread-safe, or false if we want to create a    *                              Calcite dispatcher based on reflection that is not    *                              thread-safe. False should only be used for    *                              testing/benchmarking purposes    */
specifier|protected
name|RelFieldTrimmer
parameter_list|(
name|boolean
name|useLMFBasedDispatcher
parameter_list|)
block|{
if|if
condition|(
name|useLMFBasedDispatcher
condition|)
block|{
name|this
operator|.
name|trimFieldsDispatcher
operator|=
name|HiveReflectUtil
operator|.
name|createMethodDispatcher
argument_list|(
name|TrimResult
operator|.
name|class
argument_list|,
name|this
argument_list|,
literal|"trimFields"
argument_list|,
name|RelNode
operator|.
name|class
argument_list|,
name|ImmutableBitSet
operator|.
name|class
argument_list|,
name|Set
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|trimFieldsDispatcher
operator|=
name|HiveReflectUtil
operator|.
name|createCalciteMethodDispatcherWrapper
argument_list|(
name|ReflectUtil
operator|.
name|createMethodDispatcher
argument_list|(
name|TrimResult
operator|.
name|class
argument_list|,
name|this
argument_list|,
literal|"trimFields"
argument_list|,
name|RelNode
operator|.
name|class
argument_list|,
name|ImmutableBitSet
operator|.
name|class
argument_list|,
name|Set
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**    * Trims unused fields from a relational expression.    *    *<p>We presume that all fields of the relational expression are wanted by    * its consumer, so only trim fields that are not used within the tree.    *    * @param relBuilder Rel builder    * @param root Root node of relational expression    * @return Trimmed relational expression    */
specifier|public
name|RelNode
name|trim
parameter_list|(
name|RelBuilder
name|relBuilder
parameter_list|,
name|RelNode
name|root
parameter_list|)
block|{
try|try
block|{
name|REL_BUILDER
operator|.
name|set
argument_list|(
name|relBuilder
argument_list|)
expr_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|root
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|fieldsUsed
init|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|fieldCount
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
specifier|final
name|TrimResult
name|trimResult
init|=
name|dispatchTrimFields
argument_list|(
name|root
argument_list|,
name|fieldsUsed
argument_list|,
name|extraFields
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|trimResult
operator|.
name|right
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|RelOptUtil
operator|.
name|dumpPlan
argument_list|(
literal|"Plan after trimming unused fields"
argument_list|,
name|trimResult
operator|.
name|left
argument_list|,
name|SqlExplainFormat
operator|.
name|TEXT
argument_list|,
name|SqlExplainLevel
operator|.
name|EXPPLAN_ATTRIBUTES
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|trimResult
operator|.
name|left
return|;
block|}
finally|finally
block|{
name|REL_BUILDER
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Trims the fields of an input relational expression.    *    * @param rel        Relational expression    * @param input      Input relational expression, whose fields to trim    * @param fieldsUsed Bitmap of fields needed by the consumer    * @return New relational expression and its field mapping    */
specifier|protected
name|TrimResult
name|trimChild
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|RelNode
name|input
parameter_list|,
specifier|final
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
specifier|final
name|ImmutableBitSet
operator|.
name|Builder
name|fieldsUsedBuilder
init|=
name|fieldsUsed
operator|.
name|rebuild
argument_list|()
decl_stmt|;
comment|// Fields that define the collation cannot be discarded.
specifier|final
name|RelMetadataQuery
name|mq
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableList
argument_list|<
name|RelCollation
argument_list|>
name|collations
init|=
name|mq
operator|.
name|collations
argument_list|(
name|input
argument_list|)
decl_stmt|;
for|for
control|(
name|RelCollation
name|collation
range|:
name|collations
control|)
block|{
for|for
control|(
name|RelFieldCollation
name|fieldCollation
range|:
name|collation
operator|.
name|getFieldCollations
argument_list|()
control|)
block|{
name|fieldsUsedBuilder
operator|.
name|set
argument_list|(
name|fieldCollation
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Correlating variables are a means for other relational expressions to use
comment|// fields.
for|for
control|(
specifier|final
name|CorrelationId
name|correlation
range|:
name|rel
operator|.
name|getVariablesSet
argument_list|()
control|)
block|{
name|rel
operator|.
name|accept
argument_list|(
operator|new
name|CorrelationReferenceFinder
argument_list|()
block|{
specifier|protected
name|RexNode
name|handle
parameter_list|(
name|RexFieldAccess
name|fieldAccess
parameter_list|)
block|{
specifier|final
name|RexCorrelVariable
name|v
init|=
operator|(
name|RexCorrelVariable
operator|)
name|fieldAccess
operator|.
name|getReferenceExpr
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|id
operator|.
name|equals
argument_list|(
name|correlation
argument_list|)
condition|)
block|{
name|fieldsUsedBuilder
operator|.
name|set
argument_list|(
name|fieldAccess
operator|.
name|getField
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|fieldAccess
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|dispatchTrimFields
argument_list|(
name|input
argument_list|,
name|fieldsUsedBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|extraFields
argument_list|)
return|;
block|}
comment|/**    * Trims a child relational expression, then adds back a dummy project to    * restore the fields that were removed.    *    *<p>Sounds pointless? It causes unused fields to be removed    * further down the tree (towards the leaves), but it ensure that the    * consuming relational expression continues to see the same fields.    *    * @param rel        Relational expression    * @param input      Input relational expression, whose fields to trim    * @param fieldsUsed Bitmap of fields needed by the consumer    * @return New relational expression and its field mapping    */
specifier|protected
name|TrimResult
name|trimChildRestore
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
name|TrimResult
name|trimResult
init|=
name|trimChild
argument_list|(
name|rel
argument_list|,
name|input
argument_list|,
name|fieldsUsed
argument_list|,
name|extraFields
argument_list|)
decl_stmt|;
if|if
condition|(
name|trimResult
operator|.
name|right
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
return|return
name|trimResult
return|;
block|}
specifier|final
name|RelDataType
name|rowType
init|=
name|input
operator|.
name|getRowType
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|fieldList
init|=
name|rowType
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|exprList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nameList
init|=
name|rowType
operator|.
name|getFieldNames
argument_list|()
decl_stmt|;
name|RexBuilder
name|rexBuilder
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
assert|assert
name|trimResult
operator|.
name|right
operator|.
name|getSourceCount
argument_list|()
operator|==
name|fieldList
operator|.
name|size
argument_list|()
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|source
init|=
name|trimResult
operator|.
name|right
operator|.
name|getTargetOpt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|RelDataTypeField
name|field
init|=
name|fieldList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|exprList
operator|.
name|add
argument_list|(
name|source
operator|<
literal|0
condition|?
name|rexBuilder
operator|.
name|makeZeroLiteral
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
else|:
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|REL_BUILDER
operator|.
name|get
argument_list|()
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|trimResult
operator|.
name|left
argument_list|)
operator|.
name|project
argument_list|(
name|exprList
argument_list|,
name|nameList
argument_list|)
expr_stmt|;
return|return
name|result
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|Mappings
operator|.
name|createIdentity
argument_list|(
name|fieldList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Invokes {@link #trimFields}, or the appropriate method for the type    * of the rel parameter, using multi-method dispatch.    *    * @param rel        Relational expression    * @param fieldsUsed Bitmap of fields needed by the consumer    * @return New relational expression and its field mapping    */
specifier|protected
specifier|final
name|TrimResult
name|dispatchTrimFields
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
specifier|final
name|TrimResult
name|trimResult
init|=
name|trimFieldsDispatcher
operator|.
name|invoke
argument_list|(
name|rel
argument_list|,
name|fieldsUsed
argument_list|,
name|extraFields
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|newRel
init|=
name|trimResult
operator|.
name|left
decl_stmt|;
specifier|final
name|Mapping
name|mapping
init|=
name|trimResult
operator|.
name|right
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|rel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
assert|assert
name|mapping
operator|.
name|getSourceCount
argument_list|()
operator|==
name|fieldCount
operator|:
literal|"source: "
operator|+
name|mapping
operator|.
name|getSourceCount
argument_list|()
operator|+
literal|" != "
operator|+
name|fieldCount
assert|;
specifier|final
name|int
name|newFieldCount
init|=
name|newRel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
assert|assert
name|mapping
operator|.
name|getTargetCount
argument_list|()
operator|+
name|extraFields
operator|.
name|size
argument_list|()
operator|==
name|newFieldCount
operator|||
name|Bug
operator|.
name|TODO_FIXED
operator|:
literal|"target: "
operator|+
name|mapping
operator|.
name|getTargetCount
argument_list|()
operator|+
literal|" + "
operator|+
name|extraFields
operator|.
name|size
argument_list|()
operator|+
literal|" != "
operator|+
name|newFieldCount
assert|;
if|if
condition|(
name|Bug
operator|.
name|TODO_FIXED
condition|)
block|{
assert|assert
name|newFieldCount
operator|>
literal|0
operator|:
literal|"rel has no fields after trim: "
operator|+
name|rel
assert|;
block|}
if|if
condition|(
name|newRel
operator|.
name|equals
argument_list|(
name|rel
argument_list|)
condition|)
block|{
return|return
name|result
argument_list|(
name|rel
argument_list|,
name|mapping
argument_list|)
return|;
block|}
return|return
name|trimResult
return|;
block|}
specifier|protected
name|TrimResult
name|result
parameter_list|(
name|RelNode
name|r
parameter_list|,
specifier|final
name|Mapping
name|mapping
parameter_list|)
block|{
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|REL_BUILDER
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|relBuilder
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|CorrelationId
name|correlation
range|:
name|r
operator|.
name|getVariablesSet
argument_list|()
control|)
block|{
name|r
operator|=
name|r
operator|.
name|accept
argument_list|(
operator|new
name|CorrelationReferenceFinder
argument_list|()
block|{
specifier|protected
name|RexNode
name|handle
parameter_list|(
name|RexFieldAccess
name|fieldAccess
parameter_list|)
block|{
specifier|final
name|RexCorrelVariable
name|v
init|=
operator|(
name|RexCorrelVariable
operator|)
name|fieldAccess
operator|.
name|getReferenceExpr
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|id
operator|.
name|equals
argument_list|(
name|correlation
argument_list|)
operator|&&
name|v
operator|.
name|getType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
operator|==
name|mapping
operator|.
name|getSourceCount
argument_list|()
condition|)
block|{
specifier|final
name|int
name|old
init|=
name|fieldAccess
operator|.
name|getField
argument_list|()
operator|.
name|getIndex
argument_list|()
decl_stmt|;
specifier|final
name|int
name|new_
init|=
name|mapping
operator|.
name|getTarget
argument_list|(
name|old
argument_list|)
decl_stmt|;
specifier|final
name|RelDataTypeFactory
operator|.
name|Builder
name|typeBuilder
init|=
name|relBuilder
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|target
range|:
name|Util
operator|.
name|range
argument_list|(
name|mapping
operator|.
name|getTargetCount
argument_list|()
argument_list|)
control|)
block|{
name|typeBuilder
operator|.
name|add
argument_list|(
name|v
operator|.
name|getType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|mapping
operator|.
name|getSource
argument_list|(
name|target
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RexNode
name|newV
init|=
name|rexBuilder
operator|.
name|makeCorrel
argument_list|(
name|typeBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|v
operator|.
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
name|new_
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeFieldAccess
argument_list|(
name|newV
argument_list|,
name|new_
argument_list|)
return|;
block|}
block|}
return|return
name|fieldAccess
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TrimResult
argument_list|(
name|r
argument_list|,
name|mapping
argument_list|)
return|;
block|}
comment|/**    * Visit method, per {@link org.apache.calcite.util.ReflectiveVisitor}.    *    *<p>This method is invoked reflectively, so there may not be any apparent    * calls to it. The class (or derived classes) may contain overloads of    * this method with more specific types for the {@code rel} parameter.    *    *<p>Returns a pair: the relational expression created, and the mapping    * between the original fields and the fields of the newly created    * relational expression.    *    * @param rel        Relational expression    * @param fieldsUsed Fields needed by the consumer    * @return relational expression and mapping    */
specifier|public
name|TrimResult
name|trimFields
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
comment|// We don't know how to trim this kind of relational expression, so give
comment|// it back intact.
name|Util
operator|.
name|discard
argument_list|(
name|fieldsUsed
argument_list|)
expr_stmt|;
return|return
name|result
argument_list|(
name|rel
argument_list|,
name|Mappings
operator|.
name|createIdentity
argument_list|(
name|rel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Variant of {@link #trimFields(RelNode, ImmutableBitSet, Set)} for    * {@link org.apache.calcite.rel.logical.LogicalProject}.    */
specifier|public
name|TrimResult
name|trimFields
parameter_list|(
name|Project
name|project
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
specifier|final
name|RelDataType
name|rowType
init|=
name|project
operator|.
name|getRowType
argument_list|()
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|rowType
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|input
init|=
name|project
operator|.
name|getInput
argument_list|()
decl_stmt|;
comment|// Which fields are required from the input?
specifier|final
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|inputExtraFields
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|extraFields
argument_list|)
decl_stmt|;
name|RelOptUtil
operator|.
name|InputFinder
name|inputFinder
init|=
operator|new
name|RelOptUtil
operator|.
name|InputFinder
argument_list|(
name|inputExtraFields
argument_list|)
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|RexNode
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|fieldsUsed
operator|.
name|get
argument_list|(
name|ord
operator|.
name|i
argument_list|)
condition|)
block|{
name|ord
operator|.
name|e
operator|.
name|accept
argument_list|(
name|inputFinder
argument_list|)
expr_stmt|;
block|}
block|}
name|ImmutableBitSet
name|inputFieldsUsed
init|=
name|inputFinder
operator|.
name|inputBitSet
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Create input with trimmed columns.
name|TrimResult
name|trimResult
init|=
name|trimChild
argument_list|(
name|project
argument_list|,
name|input
argument_list|,
name|inputFieldsUsed
argument_list|,
name|inputExtraFields
argument_list|)
decl_stmt|;
name|RelNode
name|newInput
init|=
name|trimResult
operator|.
name|left
decl_stmt|;
specifier|final
name|Mapping
name|inputMapping
init|=
name|trimResult
operator|.
name|right
decl_stmt|;
comment|// If the input is unchanged, and we need to project all columns,
comment|// there's nothing we can do.
if|if
condition|(
name|newInput
operator|==
name|input
operator|&&
name|fieldsUsed
operator|.
name|cardinality
argument_list|()
operator|==
name|fieldCount
condition|)
block|{
return|return
name|result
argument_list|(
name|project
argument_list|,
name|Mappings
operator|.
name|createIdentity
argument_list|(
name|fieldCount
argument_list|)
argument_list|)
return|;
block|}
comment|// Some parts of the system can't handle rows with zero fields, so
comment|// pretend that one field is used.
if|if
condition|(
name|fieldsUsed
operator|.
name|cardinality
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|dummyProject
argument_list|(
name|fieldCount
argument_list|,
name|newInput
argument_list|)
return|;
block|}
comment|// Build new project expressions, and populate the mapping.
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|newProjects
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RexVisitor
argument_list|<
name|RexNode
argument_list|>
name|shuttle
init|=
operator|new
name|RexPermuteInputsShuttle
argument_list|(
name|inputMapping
argument_list|,
name|newInput
argument_list|)
decl_stmt|;
specifier|final
name|Mapping
name|mapping
init|=
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|INVERSE_SURJECTION
argument_list|,
name|fieldCount
argument_list|,
name|fieldsUsed
operator|.
name|cardinality
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|RexNode
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|fieldsUsed
operator|.
name|get
argument_list|(
name|ord
operator|.
name|i
argument_list|)
condition|)
block|{
name|mapping
operator|.
name|set
argument_list|(
name|ord
operator|.
name|i
argument_list|,
name|newProjects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RexNode
name|newProjectExpr
init|=
name|ord
operator|.
name|e
operator|.
name|accept
argument_list|(
name|shuttle
argument_list|)
decl_stmt|;
name|newProjects
operator|.
name|add
argument_list|(
name|newProjectExpr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|RelDataType
name|newRowType
init|=
name|RelOptUtil
operator|.
name|permute
argument_list|(
name|project
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|rowType
argument_list|,
name|mapping
argument_list|)
decl_stmt|;
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|REL_BUILDER
operator|.
name|get
argument_list|()
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|newInput
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|project
argument_list|(
name|newProjects
argument_list|,
name|newRowType
operator|.
name|getFieldNames
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|mapping
argument_list|)
return|;
block|}
comment|/** Creates a project with a dummy column, to protect the parts of the system    * that cannot handle a relational expression with no columns.    *    * @param fieldCount Number of fields in the original relational expression    * @param input Trimmed input    * @return Dummy project, or null if no dummy is required    */
specifier|protected
name|TrimResult
name|dummyProject
parameter_list|(
name|int
name|fieldCount
parameter_list|,
name|RelNode
name|input
parameter_list|)
block|{
specifier|final
name|RelOptCluster
name|cluster
init|=
name|input
operator|.
name|getCluster
argument_list|()
decl_stmt|;
specifier|final
name|Mapping
name|mapping
init|=
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|INVERSE_SURJECTION
argument_list|,
name|fieldCount
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|input
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// Input already has one field (and may in fact be a dummy project we
comment|// created for the child). We can't do better.
return|return
name|result
argument_list|(
name|input
argument_list|,
name|mapping
argument_list|)
return|;
block|}
specifier|final
name|RexLiteral
name|expr
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|ZERO
argument_list|)
decl_stmt|;
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|REL_BUILDER
operator|.
name|get
argument_list|()
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|project
argument_list|(
name|ImmutableList
operator|.
expr|<
name|RexNode
operator|>
name|of
argument_list|(
name|expr
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"DUMMY"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|mapping
argument_list|)
return|;
block|}
comment|/**    * Variant of {@link #trimFields(RelNode, ImmutableBitSet, Set)} for    * {@link org.apache.calcite.rel.logical.LogicalFilter}.    */
specifier|public
name|TrimResult
name|trimFields
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
specifier|final
name|RelDataType
name|rowType
init|=
name|filter
operator|.
name|getRowType
argument_list|()
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|rowType
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|conditionExpr
init|=
name|filter
operator|.
name|getCondition
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|input
init|=
name|filter
operator|.
name|getInput
argument_list|()
decl_stmt|;
comment|// We use the fields used by the consumer, plus any fields used in the
comment|// filter.
specifier|final
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|inputExtraFields
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|extraFields
argument_list|)
decl_stmt|;
name|RelOptUtil
operator|.
name|InputFinder
name|inputFinder
init|=
operator|new
name|RelOptUtil
operator|.
name|InputFinder
argument_list|(
name|inputExtraFields
argument_list|)
decl_stmt|;
name|inputFinder
operator|.
name|inputBitSet
operator|.
name|addAll
argument_list|(
name|fieldsUsed
argument_list|)
expr_stmt|;
name|conditionExpr
operator|.
name|accept
argument_list|(
name|inputFinder
argument_list|)
expr_stmt|;
specifier|final
name|ImmutableBitSet
name|inputFieldsUsed
init|=
name|inputFinder
operator|.
name|inputBitSet
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Create input with trimmed columns.
name|TrimResult
name|trimResult
init|=
name|trimChild
argument_list|(
name|filter
argument_list|,
name|input
argument_list|,
name|inputFieldsUsed
argument_list|,
name|inputExtraFields
argument_list|)
decl_stmt|;
name|RelNode
name|newInput
init|=
name|trimResult
operator|.
name|left
decl_stmt|;
specifier|final
name|Mapping
name|inputMapping
init|=
name|trimResult
operator|.
name|right
decl_stmt|;
comment|// If the input is unchanged, and we need to project all columns,
comment|// there's nothing we can do.
if|if
condition|(
name|newInput
operator|==
name|input
operator|&&
name|fieldsUsed
operator|.
name|cardinality
argument_list|()
operator|==
name|fieldCount
condition|)
block|{
return|return
name|result
argument_list|(
name|filter
argument_list|,
name|Mappings
operator|.
name|createIdentity
argument_list|(
name|fieldCount
argument_list|)
argument_list|)
return|;
block|}
comment|// Build new project expressions, and populate the mapping.
specifier|final
name|RexVisitor
argument_list|<
name|RexNode
argument_list|>
name|shuttle
init|=
operator|new
name|RexPermuteInputsShuttle
argument_list|(
name|inputMapping
argument_list|,
name|newInput
argument_list|)
decl_stmt|;
name|RexNode
name|newConditionExpr
init|=
name|conditionExpr
operator|.
name|accept
argument_list|(
name|shuttle
argument_list|)
decl_stmt|;
comment|// Build new filter with trimmed input and condition.
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|REL_BUILDER
operator|.
name|get
argument_list|()
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|newInput
argument_list|)
operator|.
name|filter
argument_list|(
name|filter
operator|.
name|getVariablesSet
argument_list|()
argument_list|,
name|newConditionExpr
argument_list|)
expr_stmt|;
comment|// The result has the same mapping as the input gave us. Sometimes we
comment|// return fields that the consumer didn't ask for, because the filter
comment|// needs them for its condition.
return|return
name|result
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|inputMapping
argument_list|)
return|;
block|}
comment|/**    * Variant of {@link #trimFields(RelNode, ImmutableBitSet, Set)} for    * {@link org.apache.calcite.rel.core.Sort}.    */
specifier|public
name|TrimResult
name|trimFields
parameter_list|(
name|Sort
name|sort
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
specifier|final
name|RelDataType
name|rowType
init|=
name|sort
operator|.
name|getRowType
argument_list|()
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|rowType
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
specifier|final
name|RelCollation
name|collation
init|=
name|sort
operator|.
name|getCollation
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|input
init|=
name|sort
operator|.
name|getInput
argument_list|()
decl_stmt|;
comment|// We use the fields used by the consumer, plus any fields used as sort
comment|// keys.
specifier|final
name|ImmutableBitSet
operator|.
name|Builder
name|inputFieldsUsed
init|=
name|fieldsUsed
operator|.
name|rebuild
argument_list|()
decl_stmt|;
for|for
control|(
name|RelFieldCollation
name|field
range|:
name|collation
operator|.
name|getFieldCollations
argument_list|()
control|)
block|{
name|inputFieldsUsed
operator|.
name|set
argument_list|(
name|field
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Create input with trimmed columns.
specifier|final
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|inputExtraFields
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
name|TrimResult
name|trimResult
init|=
name|trimChild
argument_list|(
name|sort
argument_list|,
name|input
argument_list|,
name|inputFieldsUsed
operator|.
name|build
argument_list|()
argument_list|,
name|inputExtraFields
argument_list|)
decl_stmt|;
name|RelNode
name|newInput
init|=
name|trimResult
operator|.
name|left
decl_stmt|;
specifier|final
name|Mapping
name|inputMapping
init|=
name|trimResult
operator|.
name|right
decl_stmt|;
comment|// If the input is unchanged, and we need to project all columns,
comment|// there's nothing we can do.
if|if
condition|(
name|newInput
operator|==
name|input
operator|&&
name|inputMapping
operator|.
name|isIdentity
argument_list|()
operator|&&
name|fieldsUsed
operator|.
name|cardinality
argument_list|()
operator|==
name|fieldCount
condition|)
block|{
return|return
name|result
argument_list|(
name|sort
argument_list|,
name|Mappings
operator|.
name|createIdentity
argument_list|(
name|fieldCount
argument_list|)
argument_list|)
return|;
block|}
comment|// leave the Sort unchanged in case we have dynamic limits
if|if
condition|(
name|sort
operator|.
name|offset
operator|instanceof
name|RexDynamicParam
operator|||
name|sort
operator|.
name|fetch
operator|instanceof
name|RexDynamicParam
condition|)
block|{
return|return
name|result
argument_list|(
name|sort
argument_list|,
name|inputMapping
argument_list|)
return|;
block|}
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|REL_BUILDER
operator|.
name|get
argument_list|()
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|newInput
argument_list|)
expr_stmt|;
specifier|final
name|int
name|offset
init|=
name|sort
operator|.
name|offset
operator|==
literal|null
condition|?
literal|0
else|:
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|sort
operator|.
name|offset
argument_list|)
decl_stmt|;
specifier|final
name|int
name|fetch
init|=
name|sort
operator|.
name|fetch
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|sort
operator|.
name|fetch
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|fields
init|=
name|relBuilder
operator|.
name|fields
argument_list|(
name|RexUtil
operator|.
name|apply
argument_list|(
name|inputMapping
argument_list|,
name|collation
argument_list|)
argument_list|)
decl_stmt|;
name|relBuilder
operator|.
name|sortLimit
argument_list|(
name|offset
argument_list|,
name|fetch
argument_list|,
name|fields
argument_list|)
expr_stmt|;
comment|// The result has the same mapping as the input gave us. Sometimes we
comment|// return fields that the consumer didn't ask for, because the filter
comment|// needs them for its condition.
return|return
name|result
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|inputMapping
argument_list|)
return|;
block|}
comment|/**    * Variant of {@link #trimFields(RelNode, ImmutableBitSet, Set)} for    * {@link org.apache.calcite.rel.logical.LogicalJoin}.    */
specifier|public
name|TrimResult
name|trimFields
parameter_list|(
name|Join
name|join
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
specifier|final
name|int
name|fieldCount
init|=
name|join
operator|.
name|getSystemFieldList
argument_list|()
operator|.
name|size
argument_list|()
operator|+
name|join
operator|.
name|getLeft
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
operator|+
name|join
operator|.
name|getRight
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|conditionExpr
init|=
name|join
operator|.
name|getCondition
argument_list|()
decl_stmt|;
specifier|final
name|int
name|systemFieldCount
init|=
name|join
operator|.
name|getSystemFieldList
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Add in fields used in the condition.
specifier|final
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|combinedInputExtraFields
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|extraFields
argument_list|)
decl_stmt|;
name|RelOptUtil
operator|.
name|InputFinder
name|inputFinder
init|=
operator|new
name|RelOptUtil
operator|.
name|InputFinder
argument_list|(
name|combinedInputExtraFields
argument_list|)
decl_stmt|;
name|inputFinder
operator|.
name|inputBitSet
operator|.
name|addAll
argument_list|(
name|fieldsUsed
argument_list|)
expr_stmt|;
name|conditionExpr
operator|.
name|accept
argument_list|(
name|inputFinder
argument_list|)
expr_stmt|;
specifier|final
name|ImmutableBitSet
name|fieldsUsedPlus
init|=
name|inputFinder
operator|.
name|inputBitSet
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// If no system fields are used, we can remove them.
name|int
name|systemFieldUsedCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|systemFieldCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|fieldsUsed
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
operator|++
name|systemFieldUsedCount
expr_stmt|;
block|}
block|}
specifier|final
name|int
name|newSystemFieldCount
decl_stmt|;
if|if
condition|(
name|systemFieldUsedCount
operator|==
literal|0
condition|)
block|{
name|newSystemFieldCount
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|newSystemFieldCount
operator|=
name|systemFieldCount
expr_stmt|;
block|}
name|int
name|offset
init|=
name|systemFieldCount
decl_stmt|;
name|int
name|changeCount
init|=
literal|0
decl_stmt|;
name|int
name|newFieldCount
init|=
name|newSystemFieldCount
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelNode
argument_list|>
name|newInputs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Mapping
argument_list|>
name|inputMappings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|inputExtraFieldCounts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|join
operator|.
name|getInputs
argument_list|()
control|)
block|{
specifier|final
name|RelDataType
name|inputRowType
init|=
name|input
operator|.
name|getRowType
argument_list|()
decl_stmt|;
specifier|final
name|int
name|inputFieldCount
init|=
name|inputRowType
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
comment|// Compute required mapping.
name|ImmutableBitSet
operator|.
name|Builder
name|inputFieldsUsed
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|bit
range|:
name|fieldsUsedPlus
control|)
block|{
if|if
condition|(
name|bit
operator|>=
name|offset
operator|&&
name|bit
operator|<
name|offset
operator|+
name|inputFieldCount
condition|)
block|{
name|inputFieldsUsed
operator|.
name|set
argument_list|(
name|bit
operator|-
name|offset
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If there are system fields, we automatically use the
comment|// corresponding field in each input.
name|inputFieldsUsed
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|newSystemFieldCount
argument_list|)
expr_stmt|;
comment|// FIXME: We ought to collect extra fields for each input
comment|// individually. For now, we assume that just one input has
comment|// on-demand fields.
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|inputExtraFields
init|=
name|RelDataTypeImpl
operator|.
name|extra
argument_list|(
name|inputRowType
argument_list|)
operator|==
literal|null
condition|?
name|Collections
operator|.
name|emptySet
argument_list|()
else|:
name|combinedInputExtraFields
decl_stmt|;
name|inputExtraFieldCounts
operator|.
name|add
argument_list|(
name|inputExtraFields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TrimResult
name|trimResult
init|=
name|trimChild
argument_list|(
name|join
argument_list|,
name|input
argument_list|,
name|inputFieldsUsed
operator|.
name|build
argument_list|()
argument_list|,
name|inputExtraFields
argument_list|)
decl_stmt|;
name|newInputs
operator|.
name|add
argument_list|(
name|trimResult
operator|.
name|left
argument_list|)
expr_stmt|;
if|if
condition|(
name|trimResult
operator|.
name|left
operator|!=
name|input
condition|)
block|{
operator|++
name|changeCount
expr_stmt|;
block|}
specifier|final
name|Mapping
name|inputMapping
init|=
name|trimResult
operator|.
name|right
decl_stmt|;
name|inputMappings
operator|.
name|add
argument_list|(
name|inputMapping
argument_list|)
expr_stmt|;
comment|// Move offset to point to start of next input.
name|offset
operator|+=
name|inputFieldCount
expr_stmt|;
name|newFieldCount
operator|+=
name|inputMapping
operator|.
name|getTargetCount
argument_list|()
operator|+
name|inputExtraFields
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|Mapping
name|mapping
init|=
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|INVERSE_SURJECTION
argument_list|,
name|fieldCount
argument_list|,
name|newFieldCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newSystemFieldCount
condition|;
operator|++
name|i
control|)
block|{
name|mapping
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|offset
operator|=
name|systemFieldCount
expr_stmt|;
name|int
name|newOffset
init|=
name|newSystemFieldCount
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputMappings
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Mapping
name|inputMapping
init|=
name|inputMappings
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|IntPair
name|pair
range|:
name|inputMapping
control|)
block|{
name|mapping
operator|.
name|set
argument_list|(
name|pair
operator|.
name|source
operator|+
name|offset
argument_list|,
name|pair
operator|.
name|target
operator|+
name|newOffset
argument_list|)
expr_stmt|;
block|}
name|offset
operator|+=
name|inputMapping
operator|.
name|getSourceCount
argument_list|()
expr_stmt|;
name|newOffset
operator|+=
name|inputMapping
operator|.
name|getTargetCount
argument_list|()
operator|+
name|inputExtraFieldCounts
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|changeCount
operator|==
literal|0
operator|&&
name|mapping
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
return|return
name|result
argument_list|(
name|join
argument_list|,
name|Mappings
operator|.
name|createIdentity
argument_list|(
name|fieldCount
argument_list|)
argument_list|)
return|;
block|}
comment|// Build new join.
specifier|final
name|RexVisitor
argument_list|<
name|RexNode
argument_list|>
name|shuttle
init|=
operator|new
name|RexPermuteInputsShuttle
argument_list|(
name|mapping
argument_list|,
name|newInputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|newInputs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|RexNode
name|newConditionExpr
init|=
name|conditionExpr
operator|.
name|accept
argument_list|(
name|shuttle
argument_list|)
decl_stmt|;
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|REL_BUILDER
operator|.
name|get
argument_list|()
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|newInputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|newInputs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
condition|)
block|{
case|case
name|SEMI
case|:
case|case
name|ANTI
case|:
comment|// For SemiJoins and AntiJoins only map fields from the left-side
if|if
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
operator|==
name|JoinRelType
operator|.
name|SEMI
condition|)
block|{
name|relBuilder
operator|.
name|semiJoin
argument_list|(
name|newConditionExpr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|relBuilder
operator|.
name|antiJoin
argument_list|(
name|newConditionExpr
argument_list|)
expr_stmt|;
block|}
name|Mapping
name|inputMapping
init|=
name|inputMappings
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|mapping
operator|=
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|INVERSE_SURJECTION
argument_list|,
name|join
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|,
name|newSystemFieldCount
operator|+
name|inputMapping
operator|.
name|getTargetCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newSystemFieldCount
condition|;
operator|++
name|i
control|)
block|{
name|mapping
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|offset
operator|=
name|systemFieldCount
expr_stmt|;
name|newOffset
operator|=
name|newSystemFieldCount
expr_stmt|;
for|for
control|(
name|IntPair
name|pair
range|:
name|inputMapping
control|)
block|{
name|mapping
operator|.
name|set
argument_list|(
name|pair
operator|.
name|source
operator|+
name|offset
argument_list|,
name|pair
operator|.
name|target
operator|+
name|newOffset
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|relBuilder
operator|.
name|join
argument_list|(
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|,
name|newConditionExpr
argument_list|)
expr_stmt|;
block|}
return|return
name|result
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|mapping
argument_list|)
return|;
block|}
comment|/**    * Variant of {@link #trimFields(RelNode, ImmutableBitSet, Set)} for    * {@link org.apache.calcite.rel.core.SetOp} (including UNION and UNION ALL).    */
specifier|public
name|TrimResult
name|trimFields
parameter_list|(
name|SetOp
name|setOp
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
specifier|final
name|RelDataType
name|rowType
init|=
name|setOp
operator|.
name|getRowType
argument_list|()
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|rowType
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
name|int
name|changeCount
init|=
literal|0
decl_stmt|;
comment|// Fennel abhors an empty row type, so pretend that the parent rel
comment|// wants the last field. (The last field is the least likely to be a
comment|// system field.)
if|if
condition|(
name|fieldsUsed
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fieldsUsed
operator|=
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|rowType
operator|.
name|getFieldCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Compute the desired field mapping. Give the consumer the fields they
comment|// want, in the order that they appear in the bitset.
specifier|final
name|Mapping
name|mapping
init|=
name|createMapping
argument_list|(
name|fieldsUsed
argument_list|,
name|fieldCount
argument_list|)
decl_stmt|;
comment|// Create input with trimmed columns.
for|for
control|(
name|RelNode
name|input
range|:
name|setOp
operator|.
name|getInputs
argument_list|()
control|)
block|{
name|TrimResult
name|trimResult
init|=
name|trimChild
argument_list|(
name|setOp
argument_list|,
name|input
argument_list|,
name|fieldsUsed
argument_list|,
name|extraFields
argument_list|)
decl_stmt|;
comment|// We want "mapping", the input gave us "inputMapping", compute
comment|// "remaining" mapping.
comment|//    |                   |                |
comment|//    |---------------- mapping ---------->|
comment|//    |-- inputMapping -->|                |
comment|//    |                   |-- remaining -->|
comment|//
comment|// For instance, suppose we have columns [a, b, c, d],
comment|// the consumer asked for mapping = [b, d],
comment|// and the transformed input has columns inputMapping = [d, a, b].
comment|// remaining will permute [b, d] to [d, a, b].
name|Mapping
name|remaining
init|=
name|Mappings
operator|.
name|divide
argument_list|(
name|mapping
argument_list|,
name|trimResult
operator|.
name|right
argument_list|)
decl_stmt|;
comment|// Create a projection; does nothing if remaining is identity.
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|REL_BUILDER
operator|.
name|get
argument_list|()
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|trimResult
operator|.
name|left
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|permute
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
if|if
condition|(
name|input
operator|!=
name|relBuilder
operator|.
name|peek
argument_list|()
condition|)
block|{
operator|++
name|changeCount
expr_stmt|;
block|}
block|}
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|REL_BUILDER
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// If the input is unchanged, and we need to project all columns,
comment|// there's to do.
if|if
condition|(
name|changeCount
operator|==
literal|0
operator|&&
name|mapping
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
for|for
control|(
name|RelNode
name|input
range|:
name|setOp
operator|.
name|getInputs
argument_list|()
control|)
block|{
name|relBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
name|result
argument_list|(
name|setOp
argument_list|,
name|mapping
argument_list|)
return|;
block|}
switch|switch
condition|(
name|setOp
operator|.
name|kind
condition|)
block|{
case|case
name|UNION
case|:
name|relBuilder
operator|.
name|union
argument_list|(
name|setOp
operator|.
name|all
argument_list|,
name|setOp
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTERSECT
case|:
name|relBuilder
operator|.
name|intersect
argument_list|(
name|setOp
operator|.
name|all
argument_list|,
name|setOp
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXCEPT
case|:
assert|assert
name|setOp
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
assert|;
name|relBuilder
operator|.
name|minus
argument_list|(
name|setOp
operator|.
name|all
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unknown setOp "
operator|+
name|setOp
argument_list|)
throw|;
block|}
return|return
name|result
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|mapping
argument_list|)
return|;
block|}
comment|/**    * Variant of {@link #trimFields(RelNode, ImmutableBitSet, Set)} for    * {@link org.apache.calcite.rel.logical.LogicalAggregate}.    */
specifier|public
name|TrimResult
name|trimFields
parameter_list|(
name|Aggregate
name|aggregate
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
comment|// Fields:
comment|//
comment|// | sys fields | group fields | indicator fields | agg functions |
comment|//
comment|// Two kinds of trimming:
comment|//
comment|// 1. If agg rel has system fields but none of these are used, create an
comment|// agg rel with no system fields.
comment|//
comment|// 2. If aggregate functions are not used, remove them.
comment|//
comment|// But group and indicator fields stay, even if they are not used.
specifier|final
name|RelDataType
name|rowType
init|=
name|aggregate
operator|.
name|getRowType
argument_list|()
decl_stmt|;
comment|// Compute which input fields are used.
comment|// 1. group fields are always used
specifier|final
name|ImmutableBitSet
operator|.
name|Builder
name|inputFieldsUsed
init|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|rebuild
argument_list|()
decl_stmt|;
comment|// 2. agg functions
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggregate
operator|.
name|getAggCallList
argument_list|()
control|)
block|{
name|inputFieldsUsed
operator|.
name|addAll
argument_list|(
name|aggCall
operator|.
name|getArgList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|aggCall
operator|.
name|filterArg
operator|>=
literal|0
condition|)
block|{
name|inputFieldsUsed
operator|.
name|set
argument_list|(
name|aggCall
operator|.
name|filterArg
argument_list|)
expr_stmt|;
block|}
name|inputFieldsUsed
operator|.
name|addAll
argument_list|(
name|RelCollations
operator|.
name|ordinals
argument_list|(
name|aggCall
operator|.
name|collation
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Create input with trimmed columns.
specifier|final
name|RelNode
name|input
init|=
name|aggregate
operator|.
name|getInput
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|inputExtraFields
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
specifier|final
name|TrimResult
name|trimResult
init|=
name|trimChild
argument_list|(
name|aggregate
argument_list|,
name|input
argument_list|,
name|inputFieldsUsed
operator|.
name|build
argument_list|()
argument_list|,
name|inputExtraFields
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|newInput
init|=
name|trimResult
operator|.
name|left
decl_stmt|;
specifier|final
name|Mapping
name|inputMapping
init|=
name|trimResult
operator|.
name|right
decl_stmt|;
comment|// We have to return group keys and (if present) indicators.
comment|// So, pretend that the consumer asked for them.
specifier|final
name|int
name|groupCount
init|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|cardinality
argument_list|()
decl_stmt|;
name|fieldsUsed
operator|=
name|fieldsUsed
operator|.
name|union
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|groupCount
argument_list|)
argument_list|)
expr_stmt|;
comment|// If the input is unchanged, and we need to project all columns,
comment|// there's nothing to do.
if|if
condition|(
name|input
operator|==
name|newInput
operator|&&
name|fieldsUsed
operator|.
name|equals
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|rowType
operator|.
name|getFieldCount
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|result
argument_list|(
name|aggregate
argument_list|,
name|Mappings
operator|.
name|createIdentity
argument_list|(
name|rowType
operator|.
name|getFieldCount
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|// Which agg calls are used by our consumer?
name|int
name|j
init|=
name|groupCount
decl_stmt|;
name|int
name|usedAggCallCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregate
operator|.
name|getAggCallList
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fieldsUsed
operator|.
name|get
argument_list|(
name|j
operator|++
argument_list|)
condition|)
block|{
operator|++
name|usedAggCallCount
expr_stmt|;
block|}
block|}
comment|// Offset due to the number of system fields having changed.
name|Mapping
name|mapping
init|=
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|INVERSE_SURJECTION
argument_list|,
name|rowType
operator|.
name|getFieldCount
argument_list|()
argument_list|,
name|groupCount
operator|+
name|usedAggCallCount
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|newGroupSet
init|=
name|Mappings
operator|.
name|apply
argument_list|(
name|inputMapping
argument_list|,
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableList
argument_list|<
name|ImmutableBitSet
argument_list|>
name|newGroupSets
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|Iterables
operator|.
name|transform
argument_list|(
name|aggregate
operator|.
name|getGroupSets
argument_list|()
argument_list|,
name|input1
lambda|->
name|Mappings
operator|.
name|apply
argument_list|(
name|inputMapping
argument_list|,
name|input1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Populate mapping of where to find the fields. System, group key and
comment|// indicator fields first.
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|groupCount
condition|;
name|j
operator|++
control|)
block|{
name|mapping
operator|.
name|set
argument_list|(
name|j
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
comment|// Now create new agg calls, and populate mapping for them.
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|REL_BUILDER
operator|.
name|get
argument_list|()
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|newInput
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RelBuilder
operator|.
name|AggCall
argument_list|>
name|newAggCallList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|j
operator|=
name|groupCount
expr_stmt|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggregate
operator|.
name|getAggCallList
argument_list|()
control|)
block|{
if|if
condition|(
name|fieldsUsed
operator|.
name|get
argument_list|(
name|j
argument_list|)
condition|)
block|{
specifier|final
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|args
init|=
name|relBuilder
operator|.
name|fields
argument_list|(
name|Mappings
operator|.
name|apply2
argument_list|(
name|inputMapping
argument_list|,
name|aggCall
operator|.
name|getArgList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|filterArg
init|=
name|aggCall
operator|.
name|filterArg
operator|<
literal|0
condition|?
literal|null
else|:
name|relBuilder
operator|.
name|field
argument_list|(
name|Mappings
operator|.
name|apply
argument_list|(
name|inputMapping
argument_list|,
name|aggCall
operator|.
name|filterArg
argument_list|)
argument_list|)
decl_stmt|;
name|RelBuilder
operator|.
name|AggCall
name|newAggCall
init|=
name|relBuilder
operator|.
name|aggregateCall
argument_list|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
argument_list|,
name|args
argument_list|)
operator|.
name|distinct
argument_list|(
name|aggCall
operator|.
name|isDistinct
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|filterArg
argument_list|)
operator|.
name|approximate
argument_list|(
name|aggCall
operator|.
name|isApproximate
argument_list|()
argument_list|)
operator|.
name|sort
argument_list|(
name|relBuilder
operator|.
name|fields
argument_list|(
name|aggCall
operator|.
name|collation
argument_list|)
argument_list|)
operator|.
name|as
argument_list|(
name|aggCall
operator|.
name|name
argument_list|)
decl_stmt|;
name|mapping
operator|.
name|set
argument_list|(
name|j
argument_list|,
name|groupCount
operator|+
name|newAggCallList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|newAggCallList
operator|.
name|add
argument_list|(
name|newAggCall
argument_list|)
expr_stmt|;
block|}
operator|++
name|j
expr_stmt|;
block|}
specifier|final
name|RelBuilder
operator|.
name|GroupKey
name|groupKey
init|=
name|relBuilder
operator|.
name|groupKey
argument_list|(
name|newGroupSet
argument_list|,
name|newGroupSets
argument_list|)
decl_stmt|;
name|relBuilder
operator|.
name|aggregate
argument_list|(
name|groupKey
argument_list|,
name|newAggCallList
argument_list|)
expr_stmt|;
return|return
name|result
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|mapping
argument_list|)
return|;
block|}
comment|/**    * Variant of {@link #trimFields(RelNode, ImmutableBitSet, Set)} for    * {@link org.apache.calcite.rel.logical.LogicalTableModify}.    */
specifier|public
name|TrimResult
name|trimFields
parameter_list|(
name|LogicalTableModify
name|modifier
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
comment|// Ignore what consumer wants. We always project all columns.
name|Util
operator|.
name|discard
argument_list|(
name|fieldsUsed
argument_list|)
expr_stmt|;
specifier|final
name|RelDataType
name|rowType
init|=
name|modifier
operator|.
name|getRowType
argument_list|()
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|rowType
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
name|RelNode
name|input
init|=
name|modifier
operator|.
name|getInput
argument_list|()
decl_stmt|;
comment|// We want all fields from the child.
specifier|final
name|int
name|inputFieldCount
init|=
name|input
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|inputFieldsUsed
init|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|inputFieldCount
argument_list|)
decl_stmt|;
comment|// Create input with trimmed columns.
specifier|final
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|inputExtraFields
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
name|TrimResult
name|trimResult
init|=
name|trimChild
argument_list|(
name|modifier
argument_list|,
name|input
argument_list|,
name|inputFieldsUsed
argument_list|,
name|inputExtraFields
argument_list|)
decl_stmt|;
name|RelNode
name|newInput
init|=
name|trimResult
operator|.
name|left
decl_stmt|;
specifier|final
name|Mapping
name|inputMapping
init|=
name|trimResult
operator|.
name|right
decl_stmt|;
if|if
condition|(
operator|!
name|inputMapping
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
comment|// We asked for all fields. Can't believe that the child decided
comment|// to permute them!
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Expected identity mapping, got "
operator|+
name|inputMapping
argument_list|)
throw|;
block|}
name|LogicalTableModify
name|newModifier
init|=
name|modifier
decl_stmt|;
if|if
condition|(
name|newInput
operator|!=
name|input
condition|)
block|{
name|newModifier
operator|=
name|modifier
operator|.
name|copy
argument_list|(
name|modifier
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|newInput
argument_list|)
argument_list|)
expr_stmt|;
block|}
assert|assert
name|newModifier
operator|.
name|getClass
argument_list|()
operator|==
name|modifier
operator|.
name|getClass
argument_list|()
assert|;
comment|// Always project all fields.
name|Mapping
name|mapping
init|=
name|Mappings
operator|.
name|createIdentity
argument_list|(
name|fieldCount
argument_list|)
decl_stmt|;
return|return
name|result
argument_list|(
name|newModifier
argument_list|,
name|mapping
argument_list|)
return|;
block|}
comment|/**    * Variant of {@link #trimFields(RelNode, ImmutableBitSet, Set)} for    * {@link org.apache.calcite.rel.logical.LogicalTableFunctionScan}.    */
specifier|public
name|TrimResult
name|trimFields
parameter_list|(
name|LogicalTableFunctionScan
name|tabFun
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
specifier|final
name|RelDataType
name|rowType
init|=
name|tabFun
operator|.
name|getRowType
argument_list|()
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|rowType
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelNode
argument_list|>
name|newInputs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|tabFun
operator|.
name|getInputs
argument_list|()
control|)
block|{
specifier|final
name|int
name|inputFieldCount
init|=
name|input
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
name|ImmutableBitSet
name|inputFieldsUsed
init|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|inputFieldCount
argument_list|)
decl_stmt|;
comment|// Create input with trimmed columns.
specifier|final
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|inputExtraFields
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
name|TrimResult
name|trimResult
init|=
name|trimChildRestore
argument_list|(
name|tabFun
argument_list|,
name|input
argument_list|,
name|inputFieldsUsed
argument_list|,
name|inputExtraFields
argument_list|)
decl_stmt|;
assert|assert
name|trimResult
operator|.
name|right
operator|.
name|isIdentity
argument_list|()
assert|;
name|newInputs
operator|.
name|add
argument_list|(
name|trimResult
operator|.
name|left
argument_list|)
expr_stmt|;
block|}
name|LogicalTableFunctionScan
name|newTabFun
init|=
name|tabFun
decl_stmt|;
if|if
condition|(
operator|!
name|tabFun
operator|.
name|getInputs
argument_list|()
operator|.
name|equals
argument_list|(
name|newInputs
argument_list|)
condition|)
block|{
name|newTabFun
operator|=
name|tabFun
operator|.
name|copy
argument_list|(
name|tabFun
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|newInputs
argument_list|,
name|tabFun
operator|.
name|getCall
argument_list|()
argument_list|,
name|tabFun
operator|.
name|getElementType
argument_list|()
argument_list|,
name|tabFun
operator|.
name|getRowType
argument_list|()
argument_list|,
name|tabFun
operator|.
name|getColumnMappings
argument_list|()
argument_list|)
expr_stmt|;
block|}
assert|assert
name|newTabFun
operator|.
name|getClass
argument_list|()
operator|==
name|tabFun
operator|.
name|getClass
argument_list|()
assert|;
comment|// Always project all fields.
name|Mapping
name|mapping
init|=
name|Mappings
operator|.
name|createIdentity
argument_list|(
name|fieldCount
argument_list|)
decl_stmt|;
return|return
name|result
argument_list|(
name|newTabFun
argument_list|,
name|mapping
argument_list|)
return|;
block|}
comment|/**    * Variant of {@link #trimFields(RelNode, ImmutableBitSet, Set)} for    * {@link org.apache.calcite.rel.logical.LogicalValues}.    */
specifier|public
name|TrimResult
name|trimFields
parameter_list|(
name|LogicalValues
name|values
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
specifier|final
name|RelDataType
name|rowType
init|=
name|values
operator|.
name|getRowType
argument_list|()
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|rowType
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
comment|// If they are asking for no fields, we can't give them what they want,
comment|// because zero-column records are illegal. Give them the last field,
comment|// which is unlikely to be a system field.
if|if
condition|(
name|fieldsUsed
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fieldsUsed
operator|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|fieldCount
operator|-
literal|1
argument_list|,
name|fieldCount
argument_list|)
expr_stmt|;
block|}
comment|// If all fields are used, return unchanged.
if|if
condition|(
name|fieldsUsed
operator|.
name|equals
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|fieldCount
argument_list|)
argument_list|)
condition|)
block|{
name|Mapping
name|mapping
init|=
name|Mappings
operator|.
name|createIdentity
argument_list|(
name|fieldCount
argument_list|)
decl_stmt|;
return|return
name|result
argument_list|(
name|values
argument_list|,
name|mapping
argument_list|)
return|;
block|}
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|ImmutableList
argument_list|<
name|RexLiteral
argument_list|>
argument_list|>
name|newTuples
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|ImmutableList
argument_list|<
name|RexLiteral
argument_list|>
name|tuple
range|:
name|values
operator|.
name|getTuples
argument_list|()
control|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RexLiteral
argument_list|>
name|newTuple
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|field
range|:
name|fieldsUsed
control|)
block|{
name|newTuple
operator|.
name|add
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newTuples
operator|.
name|add
argument_list|(
name|newTuple
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Mapping
name|mapping
init|=
name|createMapping
argument_list|(
name|fieldsUsed
argument_list|,
name|fieldCount
argument_list|)
decl_stmt|;
specifier|final
name|RelDataType
name|newRowType
init|=
name|RelOptUtil
operator|.
name|permute
argument_list|(
name|values
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|rowType
argument_list|,
name|mapping
argument_list|)
decl_stmt|;
specifier|final
name|LogicalValues
name|newValues
init|=
name|LogicalValues
operator|.
name|create
argument_list|(
name|values
operator|.
name|getCluster
argument_list|()
argument_list|,
name|newRowType
argument_list|,
name|newTuples
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|result
argument_list|(
name|newValues
argument_list|,
name|mapping
argument_list|)
return|;
block|}
specifier|protected
name|Mapping
name|createMapping
parameter_list|(
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|int
name|fieldCount
parameter_list|)
block|{
specifier|final
name|Mapping
name|mapping
init|=
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|INVERSE_SURJECTION
argument_list|,
name|fieldCount
argument_list|,
name|fieldsUsed
operator|.
name|cardinality
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|field
range|:
name|fieldsUsed
control|)
block|{
name|mapping
operator|.
name|set
argument_list|(
name|field
argument_list|,
name|i
operator|++
argument_list|)
expr_stmt|;
block|}
return|return
name|mapping
return|;
block|}
comment|/**    * Variant of {@link #trimFields(RelNode, ImmutableBitSet, Set)} for    * {@link org.apache.calcite.rel.logical.LogicalTableScan}.    */
specifier|public
name|TrimResult
name|trimFields
parameter_list|(
specifier|final
name|TableScan
name|tableAccessRel
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
specifier|final
name|int
name|fieldCount
init|=
name|tableAccessRel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldsUsed
operator|.
name|equals
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|fieldCount
argument_list|)
argument_list|)
operator|&&
name|extraFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// if there is nothing to project or if we are projecting everything
comment|// then no need to introduce another RelNode
return|return
name|trimFields
argument_list|(
operator|(
name|RelNode
operator|)
name|tableAccessRel
argument_list|,
name|fieldsUsed
argument_list|,
name|extraFields
argument_list|)
return|;
block|}
specifier|final
name|RelNode
name|newTableAccessRel
init|=
name|tableAccessRel
operator|.
name|project
argument_list|(
name|fieldsUsed
argument_list|,
name|extraFields
argument_list|,
name|REL_BUILDER
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
comment|// Some parts of the system can't handle rows with zero fields, so
comment|// pretend that one field is used.
if|if
condition|(
name|fieldsUsed
operator|.
name|cardinality
argument_list|()
operator|==
literal|0
condition|)
block|{
name|RelNode
name|input
init|=
name|newTableAccessRel
decl_stmt|;
if|if
condition|(
name|input
operator|instanceof
name|Project
condition|)
block|{
comment|// The table has implemented the project in the obvious way - by
comment|// creating project with 0 fields. Strip it away, and create our own
comment|// project with one field.
name|Project
name|project
init|=
operator|(
name|Project
operator|)
name|input
decl_stmt|;
if|if
condition|(
name|project
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|input
operator|=
name|project
operator|.
name|getInput
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|dummyProject
argument_list|(
name|fieldCount
argument_list|,
name|input
argument_list|)
return|;
block|}
specifier|final
name|Mapping
name|mapping
init|=
name|createMapping
argument_list|(
name|fieldsUsed
argument_list|,
name|fieldCount
argument_list|)
decl_stmt|;
return|return
name|result
argument_list|(
name|newTableAccessRel
argument_list|,
name|mapping
argument_list|)
return|;
block|}
comment|//~ Inner Classes ----------------------------------------------------------
comment|/**    * Result of an attempt to trim columns from a relational expression.    *    *<p>The mapping describes where to find the columns wanted by the parent    * of the current relational expression.    *    *<p>The mapping is a    * {@link org.apache.calcite.util.mapping.Mappings.SourceMapping}, which means    * that no column can be used more than once, and some columns are not used.    * {@code columnsUsed.getSource(i)} returns the source of the i'th output    * field.    *    *<p>For example, consider the mapping for a relational expression that    * has 4 output columns but only two are being used. The mapping    * {2&rarr; 1, 3&rarr; 0} would give the following behavior:    *    *<ul>    *<li>columnsUsed.getSourceCount() returns 4    *<li>columnsUsed.getTargetCount() returns 2    *<li>columnsUsed.getSource(0) returns 3    *<li>columnsUsed.getSource(1) returns 2    *<li>columnsUsed.getSource(2) throws IndexOutOfBounds    *<li>columnsUsed.getTargetOpt(3) returns 0    *<li>columnsUsed.getTargetOpt(0) returns -1    *</ul>    */
specifier|protected
specifier|static
class|class
name|TrimResult
extends|extends
name|Pair
argument_list|<
name|RelNode
argument_list|,
name|Mapping
argument_list|>
block|{
comment|/**      * Creates a TrimResult.      *      * @param left  New relational expression      * @param right Mapping of fields onto original fields      */
specifier|public
name|TrimResult
parameter_list|(
name|RelNode
name|left
parameter_list|,
name|Mapping
name|right
parameter_list|)
block|{
name|super
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
assert|assert
name|right
operator|.
name|getTargetCount
argument_list|()
operator|==
name|left
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
operator|:
literal|"rowType: "
operator|+
name|left
operator|.
name|getRowType
argument_list|()
operator|+
literal|", mapping: "
operator|+
name|right
assert|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End RelFieldTrimmer.java
end_comment

end_unit

