begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|EnvironmentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|privilege
operator|.
name|PrincipalDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ReplicationSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Explain
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * AlterTableDesc.  *  */
end_comment

begin_class
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Alter Table"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|,
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
class|class
name|AlterTableDesc
extends|extends
name|DDLDesc
implements|implements
name|Serializable
implements|,
name|DDLDesc
operator|.
name|DDLDescWithWriteId
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/**    * alterTableTypes.    *    */
specifier|public
specifier|static
enum|enum
name|AlterTableTypes
block|{
name|RENAME
argument_list|(
literal|"rename"
argument_list|)
block|,
name|ADD_COLUMNS
argument_list|(
literal|"add columns"
argument_list|)
block|,
name|REPLACE_COLUMNS
argument_list|(
literal|"replace columns"
argument_list|)
block|,
name|ADDPROPS
argument_list|(
literal|"add props"
argument_list|)
block|,
name|DROPPROPS
argument_list|(
literal|"drop props"
argument_list|)
block|,
name|SET_SERDE
argument_list|(
literal|"set serde"
argument_list|)
block|,
name|SET_SERDE_PROPS
argument_list|(
literal|"set serde props"
argument_list|)
block|,
name|SET_FILE_FORMAT
argument_list|(
literal|"add fileformat"
argument_list|)
block|,
name|CLUSTERED_BY
argument_list|(
literal|"clustered by"
argument_list|)
block|,
name|NOT_SORTED
argument_list|(
literal|"not sorted"
argument_list|)
block|,
name|NOT_CLUSTERED
argument_list|(
literal|"not clustered"
argument_list|)
block|,
name|RENAME_COLUMN
argument_list|(
literal|"rename column"
argument_list|)
block|,
name|ADDPARTITION
argument_list|(
literal|"add partition"
argument_list|)
block|,
name|TOUCH
argument_list|(
literal|"touch"
argument_list|)
block|,
name|ARCHIVE
argument_list|(
literal|"archieve"
argument_list|)
block|,
name|UNARCHIVE
argument_list|(
literal|"unarchieve"
argument_list|)
block|,
name|SET_LOCATION
argument_list|(
literal|"set location"
argument_list|)
block|,
name|DROPPARTITION
argument_list|(
literal|"drop partition"
argument_list|)
block|,
name|RENAMEPARTITION
argument_list|(
literal|"rename partition"
argument_list|)
block|,
comment|// Note: used in RenamePartitionDesc, not here.
name|SKEWED_BY
argument_list|(
literal|"skewed by"
argument_list|)
block|,
name|NOT_SKEWED
argument_list|(
literal|"not skewed"
argument_list|)
block|,
name|SET_SKEWED_LOCATION
argument_list|(
literal|"alter skew location"
argument_list|)
block|,
name|INTO_BUCKETS
argument_list|(
literal|"alter bucket number"
argument_list|)
block|,
name|ALTERPARTITION
argument_list|(
literal|"alter partition"
argument_list|)
block|,
comment|// Note: this is never used in AlterTableDesc.
name|COMPACT
argument_list|(
literal|"compact"
argument_list|)
block|,
name|TRUNCATE
argument_list|(
literal|"truncate"
argument_list|)
block|,
name|MERGEFILES
argument_list|(
literal|"merge files"
argument_list|)
block|,
name|DROP_CONSTRAINT
argument_list|(
literal|"drop constraint"
argument_list|)
block|,
name|ADD_CONSTRAINT
argument_list|(
literal|"add constraint"
argument_list|)
block|,
name|UPDATE_COLUMNS
argument_list|(
literal|"update columns"
argument_list|)
block|,
name|OWNER
argument_list|(
literal|"set owner"
argument_list|)
block|,
name|UPDATESTATS
argument_list|(
literal|"update stats"
argument_list|)
block|;
comment|// Note: used in ColumnStatsUpdateWork, not here.
block|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
name|AlterTableTypes
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
specifier|static
specifier|final
name|List
argument_list|<
name|AlterTableTypes
argument_list|>
name|nonNativeTableAllowedTypes
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|ADDPROPS
argument_list|,
name|DROPPROPS
argument_list|,
name|ADD_COLUMNS
argument_list|)
decl_stmt|;
block|}
specifier|public
specifier|static
enum|enum
name|ProtectModeType
block|{
name|NO_DROP
block|,
name|OFFLINE
block|,
name|READ_ONLY
block|,
name|NO_DROP_CASCADE
block|}
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|AlterTableTypes
argument_list|>
name|alterTableTypesWithPartialSpec
init|=
operator|new
name|HashSet
argument_list|<
name|AlterTableDesc
operator|.
name|AlterTableTypes
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|alterTableTypesWithPartialSpec
operator|.
name|add
argument_list|(
name|AlterTableDesc
operator|.
name|AlterTableTypes
operator|.
name|ADD_COLUMNS
argument_list|)
expr_stmt|;
name|alterTableTypesWithPartialSpec
operator|.
name|add
argument_list|(
name|AlterTableDesc
operator|.
name|AlterTableTypes
operator|.
name|REPLACE_COLUMNS
argument_list|)
expr_stmt|;
name|alterTableTypesWithPartialSpec
operator|.
name|add
argument_list|(
name|AlterTableDesc
operator|.
name|AlterTableTypes
operator|.
name|RENAME_COLUMN
argument_list|)
expr_stmt|;
name|alterTableTypesWithPartialSpec
operator|.
name|add
argument_list|(
name|AlterTableDesc
operator|.
name|AlterTableTypes
operator|.
name|ADDPROPS
argument_list|)
expr_stmt|;
name|alterTableTypesWithPartialSpec
operator|.
name|add
argument_list|(
name|AlterTableDesc
operator|.
name|AlterTableTypes
operator|.
name|DROPPROPS
argument_list|)
expr_stmt|;
name|alterTableTypesWithPartialSpec
operator|.
name|add
argument_list|(
name|AlterTableDesc
operator|.
name|AlterTableTypes
operator|.
name|SET_SERDE
argument_list|)
expr_stmt|;
name|alterTableTypesWithPartialSpec
operator|.
name|add
argument_list|(
name|AlterTableDesc
operator|.
name|AlterTableTypes
operator|.
name|SET_SERDE_PROPS
argument_list|)
expr_stmt|;
name|alterTableTypesWithPartialSpec
operator|.
name|add
argument_list|(
name|AlterTableDesc
operator|.
name|AlterTableTypes
operator|.
name|SET_FILE_FORMAT
argument_list|)
expr_stmt|;
block|}
name|AlterTableTypes
name|op
decl_stmt|;
name|String
name|oldName
decl_stmt|;
name|String
name|newName
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
decl_stmt|;
name|boolean
name|expectView
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
decl_stmt|;
name|boolean
name|protectModeEnable
decl_stmt|;
name|ProtectModeType
name|protectModeType
decl_stmt|;
name|boolean
name|isTurnOffSkewed
init|=
literal|false
decl_stmt|;
name|boolean
name|isDropIfExists
init|=
literal|false
decl_stmt|;
name|boolean
name|isCascade
init|=
literal|false
decl_stmt|;
name|EnvironmentContext
name|environmentContext
decl_stmt|;
name|ReplicationSpec
name|replicationSpec
decl_stmt|;
specifier|private
name|Long
name|writeId
init|=
literal|null
decl_stmt|;
name|PrincipalDesc
name|ownerPrincipal
decl_stmt|;
specifier|private
name|boolean
name|isExplicitStatsUpdate
decl_stmt|,
name|isFullAcidConversion
decl_stmt|;
specifier|public
name|AlterTableDesc
parameter_list|()
block|{   }
comment|/**    * @param oldName    *          old name of the table    * @param newName    *          new name of the table    * @param expectView    *          Flag to denote if current table can be a view    * @param replicationSpec    *          Replication specification with current event ID    * @throws SemanticException    */
specifier|public
name|AlterTableDesc
parameter_list|(
name|String
name|oldName
parameter_list|,
name|String
name|newName
parameter_list|,
name|boolean
name|expectView
parameter_list|,
name|ReplicationSpec
name|replicationSpec
parameter_list|)
throws|throws
name|SemanticException
block|{
name|op
operator|=
name|AlterTableTypes
operator|.
name|RENAME
expr_stmt|;
name|setOldName
argument_list|(
name|oldName
argument_list|)
expr_stmt|;
name|this
operator|.
name|newName
operator|=
name|newName
expr_stmt|;
name|this
operator|.
name|expectView
operator|=
name|expectView
expr_stmt|;
name|this
operator|.
name|replicationSpec
operator|=
name|replicationSpec
expr_stmt|;
block|}
comment|/**    * @param alterType    *          type of alter op    * @param replicationSpec    *          Replication specification with current event ID    */
specifier|public
name|AlterTableDesc
parameter_list|(
name|AlterTableTypes
name|alterType
parameter_list|,
name|ReplicationSpec
name|replicationSpec
parameter_list|)
block|{
name|op
operator|=
name|alterType
expr_stmt|;
name|this
operator|.
name|replicationSpec
operator|=
name|replicationSpec
expr_stmt|;
block|}
comment|/**    * @param alterType    *          type of alter op    */
specifier|public
name|AlterTableDesc
parameter_list|(
name|AlterTableTypes
name|alterType
parameter_list|)
block|{
name|this
argument_list|(
name|alterType
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param alterType    *          type of alter op    * @param expectView    *          Flag to denote if current table can be a view    * @param partSpec    *          Partition specifier with map of key and values.    */
specifier|public
name|AlterTableDesc
parameter_list|(
name|AlterTableTypes
name|alterType
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|,
name|boolean
name|expectView
parameter_list|)
block|{
name|op
operator|=
name|alterType
expr_stmt|;
name|this
operator|.
name|partSpec
operator|=
name|partSpec
expr_stmt|;
name|this
operator|.
name|expectView
operator|=
name|expectView
expr_stmt|;
block|}
specifier|public
name|AlterTableDesc
parameter_list|(
name|String
name|tableName
parameter_list|,
name|PrincipalDesc
name|ownerPrincipal
parameter_list|)
block|{
name|op
operator|=
name|AlterTableTypes
operator|.
name|OWNER
expr_stmt|;
name|this
operator|.
name|oldName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|ownerPrincipal
operator|=
name|ownerPrincipal
expr_stmt|;
block|}
comment|/**    * @param ownerPrincipal the owner principal of the table    */
specifier|public
name|void
name|setOwnerPrincipal
parameter_list|(
name|PrincipalDesc
name|ownerPrincipal
parameter_list|)
block|{
name|this
operator|.
name|ownerPrincipal
operator|=
name|ownerPrincipal
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"owner"
argument_list|)
specifier|public
name|PrincipalDesc
name|getOwnerPrincipal
parameter_list|()
block|{
return|return
name|this
operator|.
name|ownerPrincipal
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"type"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|,
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|String
name|getAlterTableTypeString
parameter_list|()
block|{
return|return
name|op
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**    * @return the old name of the table    */
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"old name"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|,
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|String
name|getOldName
parameter_list|()
block|{
return|return
name|oldName
return|;
block|}
comment|/**    * @param oldName    *          the oldName to set    */
specifier|public
name|void
name|setOldName
parameter_list|(
name|String
name|oldName
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// Make sure we qualify the name from the outset so there's no ambiguity.
name|this
operator|.
name|oldName
operator|=
name|String
operator|.
name|join
argument_list|(
literal|"."
argument_list|,
name|Utilities
operator|.
name|getDbTableName
argument_list|(
name|oldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the newName    */
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"new name"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|,
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|String
name|getNewName
parameter_list|()
block|{
return|return
name|newName
return|;
block|}
comment|/**    * @param newName    *          the newName to set    */
specifier|public
name|void
name|setNewName
parameter_list|(
name|String
name|newName
parameter_list|)
block|{
name|this
operator|.
name|newName
operator|=
name|newName
expr_stmt|;
block|}
comment|/**    * @return the op    */
specifier|public
name|AlterTableTypes
name|getOp
parameter_list|()
block|{
return|return
name|op
return|;
block|}
comment|/**    * @param op    *          the op to set    */
specifier|public
name|void
name|setOp
parameter_list|(
name|AlterTableTypes
name|op
parameter_list|)
block|{
name|this
operator|.
name|op
operator|=
name|op
expr_stmt|;
block|}
comment|/**    * @return the props    */
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"properties"
argument_list|)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getProps
parameter_list|()
block|{
return|return
name|props
return|;
block|}
comment|/**    * @param props    *          the props to set    */
specifier|public
name|void
name|setProps
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
block|{
name|this
operator|.
name|props
operator|=
name|props
expr_stmt|;
block|}
comment|/**    * @return whether to expect a view being altered    */
specifier|public
name|boolean
name|getExpectView
parameter_list|()
block|{
return|return
name|expectView
return|;
block|}
comment|/**    * @param expectView    *          set whether to expect a view being altered    */
specifier|public
name|void
name|setExpectView
parameter_list|(
name|boolean
name|expectView
parameter_list|)
block|{
name|this
operator|.
name|expectView
operator|=
name|expectView
expr_stmt|;
block|}
comment|/**    * @return part specification    */
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPartSpec
parameter_list|()
block|{
return|return
name|partSpec
return|;
block|}
comment|/**    * @param partSpec    */
specifier|public
name|void
name|setPartSpec
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|)
block|{
name|this
operator|.
name|partSpec
operator|=
name|partSpec
expr_stmt|;
block|}
specifier|public
name|boolean
name|isProtectModeEnable
parameter_list|()
block|{
return|return
name|protectModeEnable
return|;
block|}
specifier|public
name|void
name|setProtectModeEnable
parameter_list|(
name|boolean
name|protectModeEnable
parameter_list|)
block|{
name|this
operator|.
name|protectModeEnable
operator|=
name|protectModeEnable
expr_stmt|;
block|}
specifier|public
name|ProtectModeType
name|getProtectModeType
parameter_list|()
block|{
return|return
name|protectModeType
return|;
block|}
specifier|public
name|void
name|setProtectModeType
parameter_list|(
name|ProtectModeType
name|protectModeType
parameter_list|)
block|{
name|this
operator|.
name|protectModeType
operator|=
name|protectModeType
expr_stmt|;
block|}
comment|/**    * @return the turnOffSkewed    */
specifier|public
name|boolean
name|isTurnOffSkewed
parameter_list|()
block|{
return|return
name|isTurnOffSkewed
return|;
block|}
comment|/**    * @param turnOffSkewed the turnOffSkewed to set    */
specifier|public
name|void
name|setTurnOffSkewed
parameter_list|(
name|boolean
name|turnOffSkewed
parameter_list|)
block|{
name|this
operator|.
name|isTurnOffSkewed
operator|=
name|turnOffSkewed
expr_stmt|;
block|}
comment|/**    * @param isDropIfExists the isDropIfExists to set    */
specifier|public
name|void
name|setDropIfExists
parameter_list|(
name|boolean
name|isDropIfExists
parameter_list|)
block|{
name|this
operator|.
name|isDropIfExists
operator|=
name|isDropIfExists
expr_stmt|;
block|}
comment|/**    * @return isDropIfExists    */
specifier|public
name|boolean
name|getIsDropIfExists
parameter_list|()
block|{
return|return
name|isDropIfExists
return|;
block|}
comment|/**    * @return isCascade    */
specifier|public
name|boolean
name|getIsCascade
parameter_list|()
block|{
return|return
name|isCascade
return|;
block|}
comment|/**    * @param isCascade the isCascade to set    */
specifier|public
name|void
name|setIsCascade
parameter_list|(
name|boolean
name|isCascade
parameter_list|)
block|{
name|this
operator|.
name|isCascade
operator|=
name|isCascade
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|doesAlterTableTypeSupportPartialPartitionSpec
parameter_list|(
name|AlterTableTypes
name|type
parameter_list|)
block|{
return|return
name|alterTableTypesWithPartialSpec
operator|.
name|contains
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
name|EnvironmentContext
name|getEnvironmentContext
parameter_list|()
block|{
return|return
name|environmentContext
return|;
block|}
specifier|public
name|void
name|setEnvironmentContext
parameter_list|(
name|EnvironmentContext
name|environmentContext
parameter_list|)
block|{
name|this
operator|.
name|environmentContext
operator|=
name|environmentContext
expr_stmt|;
block|}
comment|/**    * @return what kind of replication scope this alter is running under.    * This can result in a "ALTER IF NEWER THAN" kind of semantic    */
specifier|public
name|ReplicationSpec
name|getReplicationSpec
parameter_list|()
block|{
return|return
name|this
operator|.
name|replicationSpec
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setWriteId
parameter_list|(
name|long
name|writeId
parameter_list|)
block|{
name|this
operator|.
name|writeId
operator|=
name|writeId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFullTableName
parameter_list|()
block|{
return|return
name|getOldName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|mayNeedWriteId
parameter_list|()
block|{
switch|switch
condition|(
name|getOp
argument_list|()
condition|)
block|{
case|case
name|ADDPROPS
case|:
block|{
return|return
name|isExplicitStatsUpdate
operator|||
name|AcidUtils
operator|.
name|isToInsertOnlyTable
argument_list|(
literal|null
argument_list|,
name|getProps
argument_list|()
argument_list|)
operator|||
operator|(
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|getProps
argument_list|()
argument_list|)
operator|&&
operator|!
name|isFullAcidConversion
operator|)
return|;
block|}
case|case
name|DROPPROPS
case|:
return|return
name|isExplicitStatsUpdate
return|;
comment|// The check for the following ones is performed before setting AlterTableDesc into the acid field.
comment|// These need write ID and stuff because they invalidate column stats.
case|case
name|RENAME_COLUMN
case|:
case|case
name|RENAME
case|:
case|case
name|REPLACE_COLUMNS
case|:
case|case
name|ADD_COLUMNS
case|:
case|case
name|SET_LOCATION
case|:
case|case
name|UPDATE_COLUMNS
case|:
return|return
literal|true
return|;
comment|// RENAMEPARTITION is handled in RenamePartitionDesc
default|default:
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|Long
name|getWriteId
parameter_list|()
block|{
return|return
name|this
operator|.
name|writeId
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" for "
operator|+
name|getFullTableName
argument_list|()
return|;
block|}
specifier|public
name|void
name|setIsExplicitStatsUpdate
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|this
operator|.
name|isExplicitStatsUpdate
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|void
name|setIsFullAcidConversion
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|this
operator|.
name|isFullAcidConversion
operator|=
name|b
expr_stmt|;
block|}
block|}
end_class

end_unit

