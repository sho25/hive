begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_class
specifier|public
class|class
name|MapJoinRowContainer
parameter_list|<
name|Row
parameter_list|>
extends|extends
name|AbstractRowContainer
argument_list|<
name|Row
argument_list|>
block|{
specifier|private
name|List
argument_list|<
name|Row
argument_list|>
name|list
decl_stmt|;
specifier|private
name|int
name|index
decl_stmt|;
specifier|public
name|MapJoinRowContainer
parameter_list|()
block|{
name|index
operator|=
literal|0
expr_stmt|;
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|Row
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|Row
name|t
parameter_list|)
throws|throws
name|HiveException
block|{
name|list
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Row
name|first
parameter_list|()
throws|throws
name|HiveException
block|{
name|index
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|index
operator|<
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|list
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Row
name|next
parameter_list|()
throws|throws
name|HiveException
block|{
name|index
operator|++
expr_stmt|;
if|if
condition|(
name|index
operator|<
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|list
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Get the number of elements in the RowContainer.    *    * @return number of elements in the RowContainer    */
annotation|@
name|Override
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|list
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Remove all elements in the RowContainer.    */
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
throws|throws
name|HiveException
block|{
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
name|index
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Row
argument_list|>
name|getList
parameter_list|()
block|{
return|return
name|list
return|;
block|}
specifier|public
name|void
name|setList
parameter_list|(
name|List
argument_list|<
name|Row
argument_list|>
name|list
parameter_list|)
block|{
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|MapJoinRowContainer
argument_list|<
name|Object
index|[]
argument_list|>
name|other
parameter_list|)
throws|throws
name|HiveException
block|{
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Object
index|[]
name|obj
decl_stmt|;
for|for
control|(
name|obj
operator|=
name|other
operator|.
name|first
argument_list|()
init|;
name|obj
operator|!=
literal|null
condition|;
name|obj
operator|=
name|other
operator|.
name|next
argument_list|()
control|)
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|ele
init|=
operator|new
name|ArrayList
argument_list|(
name|obj
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|obj
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ele
operator|.
name|add
argument_list|(
name|obj
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
operator|(
name|Row
operator|)
name|ele
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

