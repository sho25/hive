begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|translator
operator|.
name|opconventer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|translator
operator|.
name|opconventer
operator|.
name|HiveOpConverter
operator|.
name|OpAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|type
operator|.
name|ExprNodeTypeCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SelectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|UnionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_class
class|class
name|HiveUnionVisitor
extends|extends
name|HiveRelNodeVisitor
argument_list|<
name|HiveUnion
argument_list|>
block|{
name|HiveUnionVisitor
parameter_list|(
name|HiveOpConverter
name|hiveOpConverter
parameter_list|)
block|{
name|super
argument_list|(
name|hiveOpConverter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|OpAttr
name|visit
parameter_list|(
name|HiveUnion
name|unionRel
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// 1. Convert inputs
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputsList
init|=
name|extractRelNodeFromUnion
argument_list|(
name|unionRel
argument_list|)
decl_stmt|;
name|OpAttr
index|[]
name|inputs
init|=
operator|new
name|OpAttr
index|[
name|inputsList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inputs
index|[
name|i
index|]
operator|=
name|hiveOpConverter
operator|.
name|dispatch
argument_list|(
name|inputsList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Translating operator rel#"
operator|+
name|unionRel
operator|.
name|getId
argument_list|()
operator|+
literal|":"
operator|+
name|unionRel
operator|.
name|getRelTypeName
argument_list|()
operator|+
literal|" with row type: ["
operator|+
name|unionRel
operator|.
name|getRowType
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
comment|// 2. Create a new union operator
name|UnionDesc
name|unionDesc
init|=
operator|new
name|UnionDesc
argument_list|()
decl_stmt|;
name|unionDesc
operator|.
name|setNumInputs
argument_list|(
name|inputs
operator|.
name|length
argument_list|)
expr_stmt|;
name|String
name|tableAlias
init|=
name|hiveOpConverter
operator|.
name|getHiveDerivedTableAlias
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|cinfoLst
init|=
name|createColInfos
argument_list|(
name|inputs
index|[
literal|0
index|]
operator|.
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|tableAlias
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
argument_list|>
index|[]
name|children
init|=
operator|new
name|Operator
argument_list|<
name|?
argument_list|>
index|[
name|inputs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|children
index|[
name|i
index|]
operator|=
name|inputs
index|[
name|i
index|]
operator|.
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|op
init|=
name|inputs
index|[
name|i
index|]
operator|.
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// We need to check if the other input branches for union is following the first branch
comment|// We may need to cast the data types for specific columns.
name|children
index|[
name|i
index|]
operator|=
name|genInputSelectForUnion
argument_list|(
name|op
argument_list|,
name|cinfoLst
argument_list|)
expr_stmt|;
block|}
block|}
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|unionOp
init|=
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|hiveOpConverter
operator|.
name|getSemanticAnalyzer
argument_list|()
operator|.
name|getOpContext
argument_list|()
argument_list|,
name|unionDesc
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|cinfoLst
argument_list|)
argument_list|,
name|children
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generated "
operator|+
name|unionOp
operator|+
literal|" with row schema: ["
operator|+
name|unionOp
operator|.
name|getSchema
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
comment|//TODO: Can columns retain virtualness out of union
comment|// 3. Return result
return|return
operator|new
name|OpAttr
argument_list|(
name|tableAlias
argument_list|,
name|inputs
index|[
literal|0
index|]
operator|.
name|vcolsInCalcite
argument_list|,
name|unionOp
argument_list|)
return|;
block|}
comment|// use this function to make the union "flat" for both execution and explain purpose
specifier|private
name|List
argument_list|<
name|RelNode
argument_list|>
name|extractRelNodeFromUnion
parameter_list|(
name|HiveUnion
name|unionRel
parameter_list|)
block|{
name|List
argument_list|<
name|RelNode
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|RelNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|unionRel
operator|.
name|getInputs
argument_list|()
control|)
block|{
if|if
condition|(
name|input
operator|instanceof
name|HiveUnion
condition|)
block|{
name|ret
operator|.
name|addAll
argument_list|(
name|extractRelNodeFromUnion
argument_list|(
operator|(
name|HiveUnion
operator|)
name|input
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|add
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
comment|//create column info with new tableAlias
specifier|private
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|createColInfos
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|input
parameter_list|,
name|String
name|tableAlias
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|cInfoLst
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnInfo
name|ci
range|:
name|input
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
control|)
block|{
name|ColumnInfo
name|copyOfColumnInfo
init|=
operator|new
name|ColumnInfo
argument_list|(
name|ci
argument_list|)
decl_stmt|;
name|copyOfColumnInfo
operator|.
name|setTabAlias
argument_list|(
name|tableAlias
argument_list|)
expr_stmt|;
name|cInfoLst
operator|.
name|add
argument_list|(
name|copyOfColumnInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|cInfoLst
return|;
block|}
specifier|private
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|genInputSelectForUnion
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|origInputOp
parameter_list|,
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|uColumnInfo
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Iterator
argument_list|<
name|ColumnInfo
argument_list|>
name|oIter
init|=
name|origInputOp
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|ColumnInfo
argument_list|>
name|uIter
init|=
name|uColumnInfo
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colName
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|columnExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|needSelectOp
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|oIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ColumnInfo
name|oInfo
init|=
name|oIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ColumnInfo
name|uInfo
init|=
name|uIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|oInfo
operator|.
name|isSameColumnForRR
argument_list|(
name|uInfo
argument_list|)
condition|)
block|{
name|needSelectOp
operator|=
literal|true
expr_stmt|;
block|}
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|oInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|oInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|oInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|oInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|,
name|oInfo
operator|.
name|isSkewedCol
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|oInfo
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|uInfo
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|column
operator|=
name|ExprNodeTypeCheck
operator|.
name|getExprNodeDefaultExprProcessor
argument_list|()
operator|.
name|createConversionCast
argument_list|(
name|column
argument_list|,
operator|(
name|PrimitiveTypeInfo
operator|)
name|uInfo
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|columns
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|colName
operator|.
name|add
argument_list|(
name|uInfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
expr_stmt|;
name|columnExprMap
operator|.
name|put
argument_list|(
name|uInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|column
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|needSelectOp
condition|)
block|{
return|return
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
operator|new
name|SelectDesc
argument_list|(
name|columns
argument_list|,
name|colName
argument_list|)
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|uColumnInfo
argument_list|)
argument_list|,
name|columnExprMap
argument_list|,
name|origInputOp
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|origInputOp
return|;
block|}
block|}
block|}
end_class

end_unit

