begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|UserPoolMapping
operator|.
name|MappingInput
import|;
end_import

begin_class
specifier|public
class|class
name|WorkloadManagerFederation
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WorkloadManagerFederation
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|TezSessionState
name|getSession
parameter_list|(
name|TezSessionState
name|session
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|MappingInput
name|input
parameter_list|,
name|boolean
name|isUnmanagedLlapMode
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|desiredCounters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// 1. If WM is not present just go to unmanaged.
name|WorkloadManager
name|wm
init|=
name|WorkloadManager
operator|.
name|getInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|wm
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using unmanaged session - WM is not initialized"
argument_list|)
expr_stmt|;
return|return
name|getUnmanagedSession
argument_list|(
name|session
argument_list|,
name|conf
argument_list|,
name|desiredCounters
argument_list|,
name|isUnmanagedLlapMode
argument_list|)
return|;
block|}
comment|// 2. We will ask WM for a preliminary mapping. This allows us to escape to the unmanaged path
comment|//    quickly in the common case. It's still possible that resource plan will be updated and
comment|//    our preliminary mapping won't work out. We'll handle that below.
if|if
condition|(
operator|!
name|wm
operator|.
name|isManaged
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using unmanaged session - no mapping for "
operator|+
name|input
argument_list|)
expr_stmt|;
return|return
name|getUnmanagedSession
argument_list|(
name|session
argument_list|,
name|conf
argument_list|,
name|desiredCounters
argument_list|,
name|isUnmanagedLlapMode
argument_list|)
return|;
block|}
comment|// 3. Finally, try WM.
try|try
block|{
comment|// Note: this may just block to wait for a session based on parallelism.
name|LOG
operator|.
name|info
argument_list|(
literal|"Getting a WM session for "
operator|+
name|input
argument_list|)
expr_stmt|;
name|TezSessionState
name|result
init|=
name|wm
operator|.
name|getSession
argument_list|(
name|session
argument_list|,
name|input
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|desiredCounters
operator|.
name|addAll
argument_list|(
name|wm
operator|.
name|getTriggerCounterNames
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|WorkloadManager
operator|.
name|NoPoolMappingException
name|ex
parameter_list|)
block|{
return|return
name|getUnmanagedSession
argument_list|(
name|session
argument_list|,
name|conf
argument_list|,
name|desiredCounters
argument_list|,
name|isUnmanagedLlapMode
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|TezSessionState
name|getUnmanagedSession
parameter_list|(
name|TezSessionState
name|session
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|desiredCounters
parameter_list|,
name|boolean
name|isWorkLlapNode
parameter_list|)
throws|throws
name|Exception
block|{
name|TezSessionPoolManager
name|pm
init|=
name|TezSessionPoolManager
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|session
operator|=
name|pm
operator|.
name|getSession
argument_list|(
name|session
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|,
name|isWorkLlapNode
argument_list|)
expr_stmt|;
name|desiredCounters
operator|.
name|addAll
argument_list|(
name|pm
operator|.
name|getTriggerCounterNames
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|session
return|;
block|}
block|}
end_class

end_unit

