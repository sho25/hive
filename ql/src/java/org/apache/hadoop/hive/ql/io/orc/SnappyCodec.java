begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
operator|.
name|DirectDecompressorShim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
operator|.
name|DirectCompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|snappy
operator|.
name|Snappy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_class
class|class
name|SnappyCodec
implements|implements
name|CompressionCodec
implements|,
name|DirectDecompressionCodec
block|{
name|Boolean
name|direct
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|compress
parameter_list|(
name|ByteBuffer
name|in
parameter_list|,
name|ByteBuffer
name|out
parameter_list|,
name|ByteBuffer
name|overflow
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|inBytes
init|=
name|in
operator|.
name|remaining
argument_list|()
decl_stmt|;
comment|// I should work on a patch for Snappy to support an overflow buffer
comment|// to prevent the extra buffer copy.
name|byte
index|[]
name|compressed
init|=
operator|new
name|byte
index|[
name|Snappy
operator|.
name|maxCompressedLength
argument_list|(
name|inBytes
argument_list|)
index|]
decl_stmt|;
name|int
name|outBytes
init|=
name|Snappy
operator|.
name|compress
argument_list|(
name|in
operator|.
name|array
argument_list|()
argument_list|,
name|in
operator|.
name|arrayOffset
argument_list|()
operator|+
name|in
operator|.
name|position
argument_list|()
argument_list|,
name|inBytes
argument_list|,
name|compressed
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|outBytes
operator|<
name|inBytes
condition|)
block|{
name|int
name|remaining
init|=
name|out
operator|.
name|remaining
argument_list|()
decl_stmt|;
if|if
condition|(
name|remaining
operator|>=
name|outBytes
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|compressed
argument_list|,
literal|0
argument_list|,
name|out
operator|.
name|array
argument_list|()
argument_list|,
name|out
operator|.
name|arrayOffset
argument_list|()
operator|+
name|out
operator|.
name|position
argument_list|()
argument_list|,
name|outBytes
argument_list|)
expr_stmt|;
name|out
operator|.
name|position
argument_list|(
name|out
operator|.
name|position
argument_list|()
operator|+
name|outBytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|compressed
argument_list|,
literal|0
argument_list|,
name|out
operator|.
name|array
argument_list|()
argument_list|,
name|out
operator|.
name|arrayOffset
argument_list|()
operator|+
name|out
operator|.
name|position
argument_list|()
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
name|out
operator|.
name|position
argument_list|(
name|out
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|compressed
argument_list|,
name|remaining
argument_list|,
name|overflow
operator|.
name|array
argument_list|()
argument_list|,
name|overflow
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|outBytes
operator|-
name|remaining
argument_list|)
expr_stmt|;
name|overflow
operator|.
name|position
argument_list|(
name|outBytes
operator|-
name|remaining
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|decompress
parameter_list|(
name|ByteBuffer
name|in
parameter_list|,
name|ByteBuffer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|.
name|isDirect
argument_list|()
operator|&&
name|out
operator|.
name|isDirect
argument_list|()
condition|)
block|{
name|directDecompress
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|inOffset
init|=
name|in
operator|.
name|position
argument_list|()
decl_stmt|;
name|int
name|uncompressLen
init|=
name|Snappy
operator|.
name|uncompress
argument_list|(
name|in
operator|.
name|array
argument_list|()
argument_list|,
name|in
operator|.
name|arrayOffset
argument_list|()
operator|+
name|inOffset
argument_list|,
name|in
operator|.
name|limit
argument_list|()
operator|-
name|inOffset
argument_list|,
name|out
operator|.
name|array
argument_list|()
argument_list|,
name|out
operator|.
name|arrayOffset
argument_list|()
operator|+
name|out
operator|.
name|position
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|position
argument_list|(
name|uncompressLen
operator|+
name|out
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|flip
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
if|if
condition|(
name|direct
operator|==
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getDirectDecompressor
argument_list|(
name|DirectCompressionType
operator|.
name|SNAPPY
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|direct
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|direct
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsatisfiedLinkError
name|ule
parameter_list|)
block|{
name|direct
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|direct
operator|.
name|booleanValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|directDecompress
parameter_list|(
name|ByteBuffer
name|in
parameter_list|,
name|ByteBuffer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|DirectDecompressorShim
name|decompressShim
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getDirectDecompressor
argument_list|(
name|DirectCompressionType
operator|.
name|SNAPPY
argument_list|)
decl_stmt|;
name|decompressShim
operator|.
name|decompress
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flip
argument_list|()
expr_stmt|;
comment|// flip for read
block|}
annotation|@
name|Override
specifier|public
name|CompressionCodec
name|modify
parameter_list|(
name|EnumSet
argument_list|<
name|Modifier
argument_list|>
name|modifiers
parameter_list|)
block|{
comment|// snappy allows no modifications
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

