begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|translator
operator|.
name|opconventer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveMultiJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveSemiJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveSortExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|translator
operator|.
name|opconventer
operator|.
name|HiveOpConverter
operator|.
name|OpAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|JoinCond
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|JoinType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinCondDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceSinkDesc
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
class|class
name|JoinVisitor
extends|extends
name|HiveRelNodeVisitor
argument_list|<
name|RelNode
argument_list|>
block|{
name|JoinVisitor
parameter_list|(
name|HiveOpConverter
name|hiveOpConverter
parameter_list|)
block|{
name|super
argument_list|(
name|hiveOpConverter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|OpAttr
name|visit
parameter_list|(
name|RelNode
name|joinRel
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// 0. Additional data structures needed for the join optimization
comment|// through Hive
name|String
index|[]
name|baseSrc
init|=
operator|new
name|String
index|[
name|joinRel
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|String
name|tabAlias
init|=
name|hiveOpConverter
operator|.
name|getHiveDerivedTableAlias
argument_list|()
decl_stmt|;
comment|// 1. Convert inputs
name|OpAttr
index|[]
name|inputs
init|=
operator|new
name|OpAttr
index|[
name|joinRel
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|joinRel
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inputs
index|[
name|i
index|]
operator|=
name|hiveOpConverter
operator|.
name|dispatch
argument_list|(
name|joinRel
operator|.
name|getInput
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|inputs
index|[
name|i
index|]
operator|.
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|baseSrc
index|[
name|i
index|]
operator|=
name|inputs
index|[
name|i
index|]
operator|.
name|tabAlias
expr_stmt|;
block|}
comment|// 2. Generate tags
for|for
control|(
name|int
name|tag
init|=
literal|0
init|;
name|tag
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
name|tag
operator|++
control|)
block|{
name|ReduceSinkOperator
name|reduceSinkOp
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|children
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
name|reduceSinkOp
operator|.
name|getConf
argument_list|()
operator|.
name|setTag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
comment|// 3. Virtual columns
name|Set
argument_list|<
name|Integer
argument_list|>
name|newVcolsInCalcite
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|newVcolsInCalcite
operator|.
name|addAll
argument_list|(
name|inputs
index|[
literal|0
index|]
operator|.
name|vcolsInCalcite
argument_list|)
expr_stmt|;
if|if
condition|(
name|joinRel
operator|instanceof
name|HiveMultiJoin
operator|||
operator|!
operator|(
operator|(
name|joinRel
operator|instanceof
name|Join
operator|)
operator|&&
operator|(
operator|(
name|Join
operator|)
name|joinRel
operator|)
operator|.
name|isSemiJoin
argument_list|()
operator|)
condition|)
block|{
name|int
name|shift
init|=
name|inputs
index|[
literal|0
index|]
operator|.
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|newVcolsInCalcite
operator|.
name|addAll
argument_list|(
name|HiveCalciteUtil
operator|.
name|shiftVColsSet
argument_list|(
name|inputs
index|[
name|i
index|]
operator|.
name|vcolsInCalcite
argument_list|,
name|shift
argument_list|)
argument_list|)
expr_stmt|;
name|shift
operator|+=
name|inputs
index|[
name|i
index|]
operator|.
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Translating operator rel#"
operator|+
name|joinRel
operator|.
name|getId
argument_list|()
operator|+
literal|":"
operator|+
name|joinRel
operator|.
name|getRelTypeName
argument_list|()
operator|+
literal|" with row type: ["
operator|+
name|joinRel
operator|.
name|getRowType
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
comment|// 4. Extract join key expressions from HiveSortExchange
name|ExprNodeDesc
index|[]
index|[]
name|joinExpressions
init|=
operator|new
name|ExprNodeDesc
index|[
name|inputs
operator|.
name|length
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|joinExpressions
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|HiveSortExchange
operator|)
name|joinRel
operator|.
name|getInput
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getJoinExpressions
argument_list|()
expr_stmt|;
block|}
comment|// 5. Extract rest of join predicate info. We infer the rest of join condition
comment|//    that will be added to the filters (join conditions that are not part of
comment|//    the join key)
name|List
argument_list|<
name|RexNode
argument_list|>
name|joinFilters
decl_stmt|;
if|if
condition|(
name|joinRel
operator|instanceof
name|HiveJoin
condition|)
block|{
name|joinFilters
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
operator|(
operator|(
name|HiveJoin
operator|)
name|joinRel
operator|)
operator|.
name|getJoinFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|joinRel
operator|instanceof
name|HiveMultiJoin
condition|)
block|{
name|joinFilters
operator|=
operator|(
operator|(
name|HiveMultiJoin
operator|)
name|joinRel
operator|)
operator|.
name|getJoinFilters
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|joinRel
operator|instanceof
name|HiveSemiJoin
condition|)
block|{
name|joinFilters
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
operator|(
operator|(
name|HiveSemiJoin
operator|)
name|joinRel
operator|)
operator|.
name|getJoinFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Can't handle join type: "
operator|+
name|joinRel
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|filterExpressions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|joinFilters
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|filterExpressionsForInput
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|joinFilters
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RexNode
name|conj
range|:
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|joinFilters
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
control|)
block|{
name|ExprNodeDesc
name|expr
init|=
name|HiveOpConverterUtils
operator|.
name|convertToExprNode
argument_list|(
name|conj
argument_list|,
name|joinRel
argument_list|,
literal|null
argument_list|,
name|newVcolsInCalcite
argument_list|)
decl_stmt|;
name|filterExpressionsForInput
operator|.
name|add
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
block|}
name|filterExpressions
operator|.
name|add
argument_list|(
name|filterExpressionsForInput
argument_list|)
expr_stmt|;
block|}
comment|// 6. Generate Join operator
name|JoinOperator
name|joinOp
init|=
name|genJoin
argument_list|(
name|joinRel
argument_list|,
name|joinExpressions
argument_list|,
name|filterExpressions
argument_list|,
name|children
argument_list|,
name|baseSrc
argument_list|,
name|tabAlias
argument_list|)
decl_stmt|;
comment|// 7. Return result
return|return
operator|new
name|OpAttr
argument_list|(
name|tabAlias
argument_list|,
name|newVcolsInCalcite
argument_list|,
name|joinOp
argument_list|)
return|;
block|}
specifier|private
name|JoinOperator
name|genJoin
parameter_list|(
name|RelNode
name|join
parameter_list|,
name|ExprNodeDesc
index|[]
index|[]
name|joinExpressions
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|filterExpressions
parameter_list|,
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|children
parameter_list|,
name|String
index|[]
name|baseSrc
parameter_list|,
name|String
name|tabAlias
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// 1. Extract join type
name|JoinCondDesc
index|[]
name|joinCondns
decl_stmt|;
name|boolean
name|semiJoin
decl_stmt|;
name|boolean
name|noOuterJoin
decl_stmt|;
if|if
condition|(
name|join
operator|instanceof
name|HiveMultiJoin
condition|)
block|{
name|HiveMultiJoin
name|hmj
init|=
operator|(
name|HiveMultiJoin
operator|)
name|join
decl_stmt|;
name|joinCondns
operator|=
operator|new
name|JoinCondDesc
index|[
name|hmj
operator|.
name|getJoinInputs
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hmj
operator|.
name|getJoinInputs
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|joinCondns
index|[
name|i
index|]
operator|=
operator|new
name|JoinCondDesc
argument_list|(
operator|new
name|JoinCond
argument_list|(
name|hmj
operator|.
name|getJoinInputs
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|left
argument_list|,
name|hmj
operator|.
name|getJoinInputs
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|right
argument_list|,
name|transformJoinType
argument_list|(
name|hmj
operator|.
name|getJoinTypes
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|semiJoin
operator|=
literal|false
expr_stmt|;
name|noOuterJoin
operator|=
operator|!
name|hmj
operator|.
name|isOuterJoin
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|joinCondns
operator|=
operator|new
name|JoinCondDesc
index|[
literal|1
index|]
expr_stmt|;
name|semiJoin
operator|=
operator|(
name|join
operator|instanceof
name|Join
operator|)
operator|&&
operator|(
operator|(
name|Join
operator|)
name|join
operator|)
operator|.
name|isSemiJoin
argument_list|()
expr_stmt|;
name|JoinType
name|joinType
decl_stmt|;
if|if
condition|(
name|semiJoin
condition|)
block|{
name|joinType
operator|=
name|JoinType
operator|.
name|LEFTSEMI
expr_stmt|;
block|}
else|else
block|{
name|joinType
operator|=
name|transformJoinType
argument_list|(
operator|(
operator|(
name|Join
operator|)
name|join
operator|)
operator|.
name|getJoinType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|joinCondns
index|[
literal|0
index|]
operator|=
operator|new
name|JoinCondDesc
argument_list|(
operator|new
name|JoinCond
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|joinType
argument_list|)
argument_list|)
expr_stmt|;
name|noOuterJoin
operator|=
name|joinType
operator|!=
name|JoinType
operator|.
name|FULLOUTER
operator|&&
name|joinType
operator|!=
name|JoinType
operator|.
name|LEFTOUTER
operator|&&
name|joinType
operator|!=
name|JoinType
operator|.
name|RIGHTOUTER
expr_stmt|;
block|}
comment|// 2. We create the join aux structures
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|outputColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputColumnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|join
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
argument_list|>
index|[]
name|childOps
init|=
operator|new
name|Operator
index|[
name|children
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Byte
argument_list|>
name|reversedExprs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Byte
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|exprMap
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|filters
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|colExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|posToAliasMap
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|outputPos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
comment|// 2.1. Backtracking from RS
name|ReduceSinkOperator
name|inputRS
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|children
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputRS
operator|.
name|getNumParent
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"RS should have single parent"
argument_list|)
throw|;
block|}
name|Operator
argument_list|<
name|?
argument_list|>
name|parent
init|=
name|inputRS
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ReduceSinkDesc
name|rsDesc
init|=
name|inputRS
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|int
index|[]
name|index
init|=
name|inputRS
operator|.
name|getValueIndex
argument_list|()
decl_stmt|;
name|Byte
name|tag
init|=
operator|(
name|byte
operator|)
name|rsDesc
operator|.
name|getTag
argument_list|()
decl_stmt|;
comment|// 2.1.1. If semijoin...
if|if
condition|(
name|semiJoin
operator|&&
name|pos
operator|!=
literal|0
condition|)
block|{
name|exprMap
operator|.
name|put
argument_list|(
name|tag
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|childOps
index|[
name|pos
index|]
operator|=
name|inputRS
expr_stmt|;
continue|continue;
block|}
name|posToAliasMap
operator|.
name|put
argument_list|(
name|pos
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|inputRS
operator|.
name|getSchema
argument_list|()
operator|.
name|getTableNames
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|keyColNames
init|=
name|rsDesc
operator|.
name|getOutputKeyColumnNames
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|valColNames
init|=
name|rsDesc
operator|.
name|getOutputValueColumnNames
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|descriptors
init|=
name|buildBacktrackFromReduceSinkForJoin
argument_list|(
name|outputPos
argument_list|,
name|outputColumnNames
argument_list|,
name|keyColNames
argument_list|,
name|valColNames
argument_list|,
name|index
argument_list|,
name|parent
argument_list|,
name|baseSrc
index|[
name|pos
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|parentColumns
init|=
name|parent
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ColumnInfo
name|info
init|=
operator|new
name|ColumnInfo
argument_list|(
name|parentColumns
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|info
operator|.
name|setInternalName
argument_list|(
name|outputColumnNames
operator|.
name|get
argument_list|(
name|outputPos
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setTabAlias
argument_list|(
name|tabAlias
argument_list|)
expr_stmt|;
name|outputColumns
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|reversedExprs
operator|.
name|put
argument_list|(
name|outputColumnNames
operator|.
name|get
argument_list|(
name|outputPos
argument_list|)
argument_list|,
name|tag
argument_list|)
expr_stmt|;
name|outputPos
operator|++
expr_stmt|;
block|}
name|exprMap
operator|.
name|put
argument_list|(
name|tag
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
name|descriptors
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|colExprMap
operator|.
name|putAll
argument_list|(
name|descriptors
argument_list|)
expr_stmt|;
name|childOps
index|[
name|pos
index|]
operator|=
name|inputRS
expr_stmt|;
block|}
comment|// 3. We populate the filters and filterMap structure needed in the join descriptor
name|List
argument_list|<
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|filtersPerInput
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|int
index|[]
index|[]
name|filterMap
init|=
operator|new
name|int
index|[
name|children
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|filtersPerInput
operator|.
name|add
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// 3. We populate the filters structure
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filterExpressions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|leftPos
init|=
name|joinCondns
index|[
name|i
index|]
operator|.
name|getLeft
argument_list|()
decl_stmt|;
name|int
name|rightPos
init|=
name|joinCondns
index|[
name|i
index|]
operator|.
name|getRight
argument_list|()
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|expr
range|:
name|filterExpressions
operator|.
name|get
argument_list|(
name|i
argument_list|)
control|)
block|{
comment|// We need to update the exprNode, as currently
comment|// they refer to columns in the output of the join;
comment|// they should refer to the columns output by the RS
name|int
name|inputPos
init|=
name|updateExprNode
argument_list|(
name|expr
argument_list|,
name|reversedExprs
argument_list|,
name|colExprMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputPos
operator|==
operator|-
literal|1
condition|)
block|{
name|inputPos
operator|=
name|leftPos
expr_stmt|;
block|}
name|filtersPerInput
operator|.
name|get
argument_list|(
name|inputPos
argument_list|)
operator|.
name|add
argument_list|(
name|expr
argument_list|)
expr_stmt|;
if|if
condition|(
name|joinCondns
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
operator|==
name|JoinDesc
operator|.
name|FULL_OUTER_JOIN
operator|||
name|joinCondns
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
operator|==
name|JoinDesc
operator|.
name|LEFT_OUTER_JOIN
operator|||
name|joinCondns
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
operator|==
name|JoinDesc
operator|.
name|RIGHT_OUTER_JOIN
condition|)
block|{
if|if
condition|(
name|inputPos
operator|==
name|leftPos
condition|)
block|{
name|updateFilterMap
argument_list|(
name|filterMap
argument_list|,
name|leftPos
argument_list|,
name|rightPos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updateFilterMap
argument_list|(
name|filterMap
argument_list|,
name|rightPos
argument_list|,
name|leftPos
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|ReduceSinkOperator
name|inputRS
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|children
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|ReduceSinkDesc
name|rsDesc
init|=
name|inputRS
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|Byte
name|tag
init|=
operator|(
name|byte
operator|)
name|rsDesc
operator|.
name|getTag
argument_list|()
decl_stmt|;
name|filters
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|filtersPerInput
operator|.
name|get
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// 4. We create the join operator with its descriptor
name|JoinDesc
name|desc
init|=
operator|new
name|JoinDesc
argument_list|(
name|exprMap
argument_list|,
name|outputColumnNames
argument_list|,
name|noOuterJoin
argument_list|,
name|joinCondns
argument_list|,
name|filters
argument_list|,
name|joinExpressions
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setReversedExprs
argument_list|(
name|reversedExprs
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setFilterMap
argument_list|(
name|filterMap
argument_list|)
expr_stmt|;
name|JoinOperator
name|joinOp
init|=
operator|(
name|JoinOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|childOps
index|[
literal|0
index|]
operator|.
name|getCompilationOpContext
argument_list|()
argument_list|,
name|desc
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|outputColumns
argument_list|)
argument_list|,
name|childOps
argument_list|)
decl_stmt|;
name|joinOp
operator|.
name|setColumnExprMap
argument_list|(
name|colExprMap
argument_list|)
expr_stmt|;
name|joinOp
operator|.
name|setPosToAliasMap
argument_list|(
name|posToAliasMap
argument_list|)
expr_stmt|;
name|joinOp
operator|.
name|getConf
argument_list|()
operator|.
name|setBaseSrc
argument_list|(
name|baseSrc
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generated "
operator|+
name|joinOp
operator|+
literal|" with row schema: ["
operator|+
name|joinOp
operator|.
name|getSchema
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
name|joinOp
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|buildBacktrackFromReduceSinkForJoin
parameter_list|(
name|int
name|initialPos
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|outputColumnNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|keyColNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|valueColNames
parameter_list|,
name|int
index|[]
name|index
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|inputOp
parameter_list|,
name|String
name|tabAlias
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|columnDescriptors
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ColumnInfo
name|info
init|=
operator|new
name|ColumnInfo
argument_list|(
name|inputOp
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|field
decl_stmt|;
if|if
condition|(
name|index
index|[
name|i
index|]
operator|>=
literal|0
condition|)
block|{
name|field
operator|=
name|Utilities
operator|.
name|ReduceField
operator|.
name|KEY
operator|+
literal|"."
operator|+
name|keyColNames
operator|.
name|get
argument_list|(
name|index
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|field
operator|=
name|Utilities
operator|.
name|ReduceField
operator|.
name|VALUE
operator|+
literal|"."
operator|+
name|valueColNames
operator|.
name|get
argument_list|(
operator|-
name|index
index|[
name|i
index|]
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|ExprNodeColumnDesc
name|desc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|info
operator|.
name|getType
argument_list|()
argument_list|,
name|field
argument_list|,
name|tabAlias
argument_list|,
name|info
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|)
decl_stmt|;
name|columnDescriptors
operator|.
name|put
argument_list|(
name|outputColumnNames
operator|.
name|get
argument_list|(
name|initialPos
operator|+
name|i
argument_list|)
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
return|return
name|columnDescriptors
return|;
block|}
comment|/*    * This method updates the input expr, changing all the    * ExprNodeColumnDesc in it to refer to columns given by the    * colExprMap.    *    * For instance, "col_0 = 1" would become "VALUE.col_0 = 1";    * the execution engine expects filters in the Join operators    * to be expressed that way.    */
specifier|private
name|int
name|updateExprNode
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Byte
argument_list|>
name|reversedExprs
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|colExprMap
parameter_list|)
throws|throws
name|SemanticException
block|{
name|int
name|inputPos
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|expr
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
name|ExprNodeGenericFuncDesc
name|func
init|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|expr
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|newChildren
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|functionChild
range|:
name|func
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|functionChild
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|String
name|colRef
init|=
name|functionChild
operator|.
name|getExprString
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|reversedExprs
operator|.
name|get
argument_list|(
name|colRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|inputPos
operator|==
operator|-
literal|1
condition|)
block|{
name|inputPos
operator|=
name|pos
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inputPos
operator|!=
name|pos
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"UpdateExprNode is expecting only one position for join operator convert. But there are more than one."
argument_list|)
throw|;
block|}
block|}
name|newChildren
operator|.
name|add
argument_list|(
name|colExprMap
operator|.
name|get
argument_list|(
name|colRef
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|pos
init|=
name|updateExprNode
argument_list|(
name|functionChild
argument_list|,
name|reversedExprs
argument_list|,
name|colExprMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|inputPos
operator|==
operator|-
literal|1
condition|)
block|{
name|inputPos
operator|=
name|pos
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inputPos
operator|!=
name|pos
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"UpdateExprNode is expecting only one position for join operator convert. But there are more than one."
argument_list|)
throw|;
block|}
block|}
name|newChildren
operator|.
name|add
argument_list|(
name|functionChild
argument_list|)
expr_stmt|;
block|}
block|}
name|func
operator|.
name|setChildren
argument_list|(
name|newChildren
argument_list|)
expr_stmt|;
block|}
return|return
name|inputPos
return|;
block|}
specifier|private
name|void
name|updateFilterMap
parameter_list|(
name|int
index|[]
index|[]
name|filterMap
parameter_list|,
name|int
name|inputPos
parameter_list|,
name|int
name|joinPos
parameter_list|)
block|{
name|int
index|[]
name|map
init|=
name|filterMap
index|[
name|inputPos
index|]
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|filterMap
index|[
name|inputPos
index|]
operator|=
operator|new
name|int
index|[
literal|2
index|]
expr_stmt|;
name|filterMap
index|[
name|inputPos
index|]
index|[
literal|0
index|]
operator|=
name|joinPos
expr_stmt|;
name|filterMap
index|[
name|inputPos
index|]
index|[
literal|1
index|]
operator|++
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|inserted
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|map
operator|.
name|length
operator|/
literal|2
operator|&&
operator|!
name|inserted
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|map
index|[
name|j
operator|*
literal|2
index|]
operator|==
name|joinPos
condition|)
block|{
name|map
index|[
name|j
operator|*
literal|2
operator|+
literal|1
index|]
operator|++
expr_stmt|;
name|inserted
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|inserted
condition|)
block|{
name|int
index|[]
name|newMap
init|=
operator|new
name|int
index|[
name|map
operator|.
name|length
operator|+
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|map
argument_list|,
literal|0
argument_list|,
name|newMap
argument_list|,
literal|0
argument_list|,
name|map
operator|.
name|length
argument_list|)
expr_stmt|;
name|newMap
index|[
name|map
operator|.
name|length
index|]
operator|=
name|joinPos
expr_stmt|;
name|newMap
index|[
name|map
operator|.
name|length
operator|+
literal|1
index|]
operator|++
expr_stmt|;
name|filterMap
index|[
name|inputPos
index|]
operator|=
name|newMap
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|JoinType
name|transformJoinType
parameter_list|(
name|JoinRelType
name|type
parameter_list|)
block|{
name|JoinType
name|resultJoinType
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|FULL
case|:
name|resultJoinType
operator|=
name|JoinType
operator|.
name|FULLOUTER
expr_stmt|;
break|break;
case|case
name|LEFT
case|:
name|resultJoinType
operator|=
name|JoinType
operator|.
name|LEFTOUTER
expr_stmt|;
break|break;
case|case
name|RIGHT
case|:
name|resultJoinType
operator|=
name|JoinType
operator|.
name|RIGHTOUTER
expr_stmt|;
break|break;
default|default:
name|resultJoinType
operator|=
name|JoinType
operator|.
name|INNER
expr_stmt|;
break|break;
block|}
return|return
name|resultJoinType
return|;
block|}
block|}
end_class

end_unit

