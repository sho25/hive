begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|ChainedRelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|ReflectiveRelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMdDistinctRowCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMdUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|BuiltInMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|NumberUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|cost
operator|.
name|HiveCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveSemiJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveTableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ColStatistics
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_class
specifier|public
class|class
name|HiveRelMdDistinctRowCount
extends|extends
name|RelMdDistinctRowCount
block|{
specifier|private
specifier|static
specifier|final
name|HiveRelMdDistinctRowCount
name|INSTANCE
init|=
operator|new
name|HiveRelMdDistinctRowCount
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|RelMetadataProvider
name|SOURCE
init|=
name|ChainedRelMetadataProvider
operator|.
name|of
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|ReflectiveRelMetadataProvider
operator|.
name|reflectiveSource
argument_list|(
name|BuiltInMethod
operator|.
name|DISTINCT_ROW_COUNT
operator|.
name|method
argument_list|,
name|INSTANCE
argument_list|)
argument_list|,
name|ReflectiveRelMetadataProvider
operator|.
name|reflectiveSource
argument_list|(
name|BuiltInMethod
operator|.
name|CUMULATIVE_COST
operator|.
name|method
argument_list|,
name|INSTANCE
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|HiveRelMdDistinctRowCount
parameter_list|()
block|{   }
specifier|public
name|Double
name|getDistinctRowCount
parameter_list|(
name|HiveTableScan
name|htRel
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|,
name|ImmutableBitSet
name|groupKey
parameter_list|,
name|RexNode
name|predicate
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|projIndxLst
init|=
name|HiveCalciteUtil
operator|.
name|translateBitSetToProjIndx
argument_list|(
name|groupKey
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ColStatistics
argument_list|>
name|colStats
init|=
name|htRel
operator|.
name|getColStat
argument_list|(
name|projIndxLst
argument_list|)
decl_stmt|;
name|Double
name|noDistinctRows
init|=
literal|1.0
decl_stmt|;
for|for
control|(
name|ColStatistics
name|cStat
range|:
name|colStats
control|)
block|{
name|noDistinctRows
operator|*=
name|cStat
operator|.
name|getCountDistint
argument_list|()
expr_stmt|;
block|}
return|return
name|Math
operator|.
name|min
argument_list|(
name|noDistinctRows
argument_list|,
name|mq
operator|.
name|getRowCount
argument_list|(
name|htRel
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Double
name|getDistinctRowCount
parameter_list|(
name|RelNode
name|r
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|,
name|int
name|indx
parameter_list|)
block|{
name|ImmutableBitSet
name|bitSetOfRqdProj
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|indx
argument_list|)
decl_stmt|;
return|return
name|mq
operator|.
name|getDistinctRowCount
argument_list|(
name|r
argument_list|,
name|bitSetOfRqdProj
argument_list|,
name|r
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Double
name|getDistinctRowCount
parameter_list|(
name|HiveSemiJoin
name|rel
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|,
name|ImmutableBitSet
name|groupKey
parameter_list|,
name|RexNode
name|predicate
parameter_list|)
block|{
return|return
name|super
operator|.
name|getDistinctRowCount
argument_list|(
name|rel
argument_list|,
name|mq
argument_list|,
name|groupKey
argument_list|,
name|predicate
argument_list|)
return|;
block|}
specifier|public
name|Double
name|getDistinctRowCount
parameter_list|(
name|HiveJoin
name|rel
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|,
name|ImmutableBitSet
name|groupKey
parameter_list|,
name|RexNode
name|predicate
parameter_list|)
block|{
return|return
name|getJoinDistinctRowCount
argument_list|(
name|mq
argument_list|,
name|rel
argument_list|,
name|rel
operator|.
name|getJoinType
argument_list|()
argument_list|,
name|groupKey
argument_list|,
name|predicate
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * TODO: This method is a copy of {@link RelMdUtil#getJoinDistinctRowCount}.    * We will remove it once we replace Math.max with a null-safe method in    * Calcite.    *    * Computes the number of distinct rows for a set of keys returned from a    * join. Also known as NDV (number of distinct values).    *    * @param joinRel   RelNode representing the join    * @param joinType  type of join    * @param groupKey  keys that the distinct row count will be computed for    * @param predicate join predicate    * @param useMaxNdv If true use formula<code>max(left NDV, right NDV)</code>,    *                  otherwise use<code>left NDV * right NDV</code>.    * @return number of distinct rows    */
specifier|private
specifier|static
name|Double
name|getJoinDistinctRowCount
parameter_list|(
name|RelMetadataQuery
name|mq
parameter_list|,
name|RelNode
name|joinRel
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|,
name|ImmutableBitSet
name|groupKey
parameter_list|,
name|RexNode
name|predicate
parameter_list|,
name|boolean
name|useMaxNdv
parameter_list|)
block|{
name|Double
name|distRowCount
init|=
literal|null
decl_stmt|;
name|ImmutableBitSet
operator|.
name|Builder
name|leftMask
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|ImmutableBitSet
operator|.
name|Builder
name|rightMask
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|RelNode
name|left
init|=
name|joinRel
operator|.
name|getInputs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RelNode
name|right
init|=
name|joinRel
operator|.
name|getInputs
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RelMdUtil
operator|.
name|setLeftRightBitmaps
argument_list|(
name|groupKey
argument_list|,
name|leftMask
argument_list|,
name|rightMask
argument_list|,
name|left
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// determine which filters apply to the left vs right
name|RexNode
name|leftPred
init|=
literal|null
decl_stmt|;
name|RexNode
name|rightPred
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|predicate
operator|!=
literal|null
condition|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|leftFilters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|rightFilters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|joinFilters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|predList
init|=
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|predicate
argument_list|)
decl_stmt|;
name|RelOptUtil
operator|.
name|classifyFilters
argument_list|(
name|joinRel
argument_list|,
name|predList
argument_list|,
name|joinType
argument_list|,
name|joinType
operator|==
name|JoinRelType
operator|.
name|INNER
argument_list|,
operator|!
name|joinType
operator|.
name|generatesNullsOnLeft
argument_list|()
argument_list|,
operator|!
name|joinType
operator|.
name|generatesNullsOnRight
argument_list|()
argument_list|,
name|joinFilters
argument_list|,
name|leftFilters
argument_list|,
name|rightFilters
argument_list|)
expr_stmt|;
name|RexBuilder
name|rexBuilder
init|=
name|joinRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|leftPred
operator|=
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|leftFilters
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rightPred
operator|=
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|rightFilters
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|Double
name|leftDistRowCount
init|=
name|mq
operator|.
name|getDistinctRowCount
argument_list|(
name|left
argument_list|,
name|leftMask
operator|.
name|build
argument_list|()
argument_list|,
name|leftPred
argument_list|)
decl_stmt|;
name|Double
name|rightDistRowCount
init|=
name|mq
operator|.
name|getDistinctRowCount
argument_list|(
name|right
argument_list|,
name|rightMask
operator|.
name|build
argument_list|()
argument_list|,
name|rightPred
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftDistRowCount
operator|!=
literal|null
operator|&&
name|rightDistRowCount
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|useMaxNdv
condition|)
block|{
name|distRowCount
operator|=
name|Math
operator|.
name|max
argument_list|(
name|leftDistRowCount
argument_list|,
name|rightDistRowCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|distRowCount
operator|=
name|NumberUtil
operator|.
name|multiply
argument_list|(
name|leftDistRowCount
argument_list|,
name|rightDistRowCount
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|RelMdUtil
operator|.
name|numDistinctVals
argument_list|(
name|distRowCount
argument_list|,
name|mq
operator|.
name|getRowCount
argument_list|(
name|joinRel
argument_list|)
argument_list|)
return|;
block|}
comment|/*    * Favor Broad Plans over Deep Plans.    */
specifier|public
name|RelOptCost
name|getCumulativeCost
parameter_list|(
name|HiveJoin
name|rel
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
name|RelOptCost
name|cost
init|=
name|mq
operator|.
name|getNonCumulativeCost
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
init|=
name|rel
operator|.
name|getInputs
argument_list|()
decl_stmt|;
name|RelOptCost
name|maxICost
init|=
name|HiveCost
operator|.
name|ZERO
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|inputs
control|)
block|{
name|RelOptCost
name|iCost
init|=
name|mq
operator|.
name|getCumulativeCost
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxICost
operator|.
name|isLt
argument_list|(
name|iCost
argument_list|)
condition|)
block|{
name|maxICost
operator|=
name|iCost
expr_stmt|;
block|}
block|}
return|return
name|cost
operator|.
name|plus
argument_list|(
name|maxICost
argument_list|)
return|;
block|}
block|}
end_class

end_unit

