begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|isBlank
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_comment
comment|/**  * CommandProcessorFactory.  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|CommandProcessorFactory
block|{
specifier|private
name|CommandProcessorFactory
parameter_list|()
block|{
comment|// prevent instantiation
block|}
specifier|static
name|Map
argument_list|<
name|HiveConf
argument_list|,
name|Driver
argument_list|>
name|mapDrivers
init|=
operator|new
name|HashMap
argument_list|<
name|HiveConf
argument_list|,
name|Driver
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|CommandProcessor
name|get
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|cmd
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|CommandProcessor
name|get
parameter_list|(
name|String
name|cmd
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
block|{
name|String
name|cmdl
init|=
name|cmd
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"set"
operator|.
name|equals
argument_list|(
name|cmdl
argument_list|)
condition|)
block|{
return|return
operator|new
name|SetProcessor
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"reset"
operator|.
name|equals
argument_list|(
name|cmdl
argument_list|)
condition|)
block|{
return|return
operator|new
name|ResetProcessor
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"dfs"
operator|.
name|equals
argument_list|(
name|cmdl
argument_list|)
condition|)
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
operator|new
name|DfsProcessor
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"add"
operator|.
name|equals
argument_list|(
name|cmdl
argument_list|)
condition|)
block|{
return|return
operator|new
name|AddResourceProcessor
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"delete"
operator|.
name|equals
argument_list|(
name|cmdl
argument_list|)
condition|)
block|{
return|return
operator|new
name|DeleteResourceProcessor
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isBlank
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|Driver
argument_list|()
return|;
block|}
name|Driver
name|drv
init|=
name|mapDrivers
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|drv
operator|==
literal|null
condition|)
block|{
name|drv
operator|=
operator|new
name|Driver
argument_list|()
expr_stmt|;
name|mapDrivers
operator|.
name|put
argument_list|(
name|conf
argument_list|,
name|drv
argument_list|)
expr_stmt|;
block|}
name|drv
operator|.
name|init
argument_list|()
expr_stmt|;
return|return
name|drv
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|void
name|clean
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|Driver
name|drv
init|=
name|mapDrivers
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|drv
operator|!=
literal|null
condition|)
block|{
name|drv
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
name|mapDrivers
operator|.
name|remove
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

