begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|JavaDataModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableDoubleObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableIntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableLongObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableStringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * GenericUDAFComputeStats  *  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"compute_stats"
argument_list|,
name|value
operator|=
literal|"_FUNC_(x) - Returns the statistical summary of a set of primitive type values."
argument_list|)
specifier|public
class|class
name|GenericUDAFComputeStats
extends|extends
name|AbstractGenericUDAFResolver
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GenericUDAFComputeStats
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|GenericUDAFEvaluator
name|getEvaluator
parameter_list|(
name|TypeInfo
index|[]
name|parameters
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|parameters
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
name|parameters
operator|.
name|length
operator|-
literal|1
argument_list|,
literal|"Exactly two arguments are expected."
argument_list|)
throw|;
block|}
if|if
condition|(
name|parameters
index|[
literal|0
index|]
operator|.
name|getCategory
argument_list|()
operator|!=
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"Only primitive type arguments are accepted but "
operator|+
name|parameters
index|[
literal|0
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" is passed."
argument_list|)
throw|;
block|}
switch|switch
condition|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|parameters
index|[
literal|0
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
operator|new
name|GenericUDAFBooleanStatsEvaluator
argument_list|()
return|;
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|GenericUDAFLongStatsEvaluator
argument_list|()
return|;
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
return|return
operator|new
name|GenericUDAFDoubleStatsEvaluator
argument_list|()
return|;
case|case
name|STRING
case|:
return|return
operator|new
name|GenericUDAFStringStatsEvaluator
argument_list|()
return|;
case|case
name|BINARY
case|:
return|return
operator|new
name|GenericUDAFBinaryStatsEvaluator
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"Only integer/long/timestamp/float/double/string/binary/boolean type argument "
operator|+
literal|"is accepted but "
operator|+
name|parameters
index|[
literal|0
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" is passed."
argument_list|)
throw|;
block|}
block|}
comment|/**    * GenericUDAFBooleanStatsEvaluator.    *    */
specifier|public
specifier|static
class|class
name|GenericUDAFBooleanStatsEvaluator
extends|extends
name|GenericUDAFEvaluator
block|{
comment|/* Object Inspector corresponding to the input parameter.      */
specifier|private
name|PrimitiveObjectInspector
name|inputOI
decl_stmt|;
comment|/* Partial aggregation result returned by TerminatePartial. Partial result is a struct      * containing a long field named "count".      */
specifier|private
name|Object
index|[]
name|partialResult
decl_stmt|;
comment|/* Object Inspectors corresponding to the struct returned by TerminatePartial and the long      * field within the struct - "count"      */
specifier|private
specifier|transient
name|StructObjectInspector
name|soi
decl_stmt|;
specifier|private
specifier|transient
name|StructField
name|countTruesField
decl_stmt|;
specifier|private
name|WritableLongObjectInspector
name|countTruesFieldOI
decl_stmt|;
specifier|private
specifier|transient
name|StructField
name|countFalsesField
decl_stmt|;
specifier|private
name|WritableLongObjectInspector
name|countFalsesFieldOI
decl_stmt|;
specifier|private
specifier|transient
name|StructField
name|countNullsField
decl_stmt|;
specifier|private
name|WritableLongObjectInspector
name|countNullsFieldOI
decl_stmt|;
comment|/* Output of final result of the aggregation      */
specifier|private
name|Object
index|[]
name|result
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|init
parameter_list|(
name|Mode
name|m
parameter_list|,
name|ObjectInspector
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// initialize input
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|PARTIAL1
operator|||
name|mode
operator|==
name|Mode
operator|.
name|COMPLETE
condition|)
block|{
name|inputOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|parameters
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|soi
operator|=
operator|(
name|StructObjectInspector
operator|)
name|parameters
index|[
literal|0
index|]
expr_stmt|;
name|countTruesField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"CountTrues"
argument_list|)
expr_stmt|;
name|countTruesFieldOI
operator|=
operator|(
name|WritableLongObjectInspector
operator|)
name|countTruesField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
name|countFalsesField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"CountFalses"
argument_list|)
expr_stmt|;
name|countFalsesFieldOI
operator|=
operator|(
name|WritableLongObjectInspector
operator|)
name|countFalsesField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
name|countNullsField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"CountNulls"
argument_list|)
expr_stmt|;
name|countNullsFieldOI
operator|=
operator|(
name|WritableLongObjectInspector
operator|)
name|countNullsField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
block|}
comment|// initialize output
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|foi
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fname
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"ColumnType"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"CountTrues"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"CountFalses"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"CountNulls"
argument_list|)
expr_stmt|;
name|partialResult
operator|=
operator|new
name|Object
index|[
literal|4
index|]
expr_stmt|;
name|partialResult
index|[
literal|0
index|]
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|partialResult
index|[
literal|1
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|partialResult
index|[
literal|2
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|partialResult
index|[
literal|3
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Object
index|[
literal|4
index|]
expr_stmt|;
name|result
index|[
literal|0
index|]
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
index|[
literal|2
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
index|[
literal|3
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fname
argument_list|,
name|foi
argument_list|)
return|;
block|}
annotation|@
name|AggregationType
argument_list|(
name|estimable
operator|=
literal|true
argument_list|)
specifier|public
specifier|static
class|class
name|BooleanStatsAgg
extends|extends
name|AbstractAggregationBuffer
block|{
specifier|public
name|String
name|columnType
decl_stmt|;
comment|/* Datatype of column */
specifier|public
name|long
name|countTrues
decl_stmt|;
comment|/* Count of number of true values seen so far */
specifier|public
name|long
name|countFalses
decl_stmt|;
comment|/* Count of number of false values seen so far */
specifier|public
name|long
name|countNulls
decl_stmt|;
comment|/* Count of number of null values seen so far */
annotation|@
name|Override
specifier|public
name|int
name|estimate
parameter_list|()
block|{
name|JavaDataModel
name|model
init|=
name|JavaDataModel
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|model
operator|.
name|primitive2
argument_list|()
operator|*
literal|3
operator|+
name|model
operator|.
name|lengthFor
argument_list|(
name|columnType
argument_list|)
return|;
block|}
block|}
empty_stmt|;
annotation|@
name|Override
specifier|public
name|AggregationBuffer
name|getNewAggregationBuffer
parameter_list|()
throws|throws
name|HiveException
block|{
name|BooleanStatsAgg
name|result
init|=
operator|new
name|BooleanStatsAgg
argument_list|()
decl_stmt|;
name|reset
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|BooleanStatsAgg
name|myagg
init|=
operator|(
name|BooleanStatsAgg
operator|)
name|agg
decl_stmt|;
name|myagg
operator|.
name|columnType
operator|=
operator|new
name|String
argument_list|(
literal|"Boolean"
argument_list|)
expr_stmt|;
name|myagg
operator|.
name|countTrues
operator|=
literal|0
expr_stmt|;
name|myagg
operator|.
name|countFalses
operator|=
literal|0
expr_stmt|;
name|myagg
operator|.
name|countNulls
operator|=
literal|0
expr_stmt|;
block|}
specifier|private
name|void
name|printDebugOutput
parameter_list|(
name|String
name|functionName
parameter_list|,
name|AggregationBuffer
name|agg
parameter_list|)
block|{
name|BooleanStatsAgg
name|myagg
init|=
operator|(
name|BooleanStatsAgg
operator|)
name|agg
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|functionName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Count of True Values:"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|myagg
operator|.
name|countTrues
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Count of False Values:"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|myagg
operator|.
name|countFalses
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Count of Null Values:"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|myagg
operator|.
name|countNulls
argument_list|)
expr_stmt|;
block|}
name|boolean
name|warned
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|p
init|=
name|parameters
index|[
literal|0
index|]
decl_stmt|;
name|BooleanStatsAgg
name|myagg
init|=
operator|(
name|BooleanStatsAgg
operator|)
name|agg
decl_stmt|;
name|boolean
name|emptyTable
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|parameters
index|[
literal|1
index|]
operator|==
literal|null
condition|)
block|{
name|emptyTable
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|emptyTable
condition|)
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|myagg
operator|.
name|countNulls
operator|++
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|boolean
name|v
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getBoolean
argument_list|(
name|p
argument_list|,
name|inputOI
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|false
condition|)
block|{
name|myagg
operator|.
name|countFalses
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v
operator|==
literal|true
condition|)
block|{
name|myagg
operator|.
name|countTrues
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|warned
condition|)
block|{
name|warned
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" ignoring similar exceptions."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminatePartial
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|BooleanStatsAgg
name|myagg
init|=
operator|(
name|BooleanStatsAgg
operator|)
name|agg
decl_stmt|;
operator|(
operator|(
name|Text
operator|)
name|partialResult
index|[
literal|0
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|columnType
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|partialResult
index|[
literal|1
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|countTrues
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|partialResult
index|[
literal|2
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|countFalses
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|partialResult
index|[
literal|3
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|countNulls
argument_list|)
expr_stmt|;
return|return
name|partialResult
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|merge
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
name|partial
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|partial
operator|!=
literal|null
condition|)
block|{
name|BooleanStatsAgg
name|myagg
init|=
operator|(
name|BooleanStatsAgg
operator|)
name|agg
decl_stmt|;
name|Object
name|partialCount
init|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|countTruesField
argument_list|)
decl_stmt|;
name|myagg
operator|.
name|countTrues
operator|+=
name|countTruesFieldOI
operator|.
name|get
argument_list|(
name|partialCount
argument_list|)
expr_stmt|;
name|partialCount
operator|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|countFalsesField
argument_list|)
expr_stmt|;
name|myagg
operator|.
name|countFalses
operator|+=
name|countFalsesFieldOI
operator|.
name|get
argument_list|(
name|partialCount
argument_list|)
expr_stmt|;
name|partialCount
operator|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|countNullsField
argument_list|)
expr_stmt|;
name|myagg
operator|.
name|countNulls
operator|+=
name|countNullsFieldOI
operator|.
name|get
argument_list|(
name|partialCount
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|BooleanStatsAgg
name|myagg
init|=
operator|(
name|BooleanStatsAgg
operator|)
name|agg
decl_stmt|;
operator|(
operator|(
name|Text
operator|)
name|result
index|[
literal|0
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|columnType
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|result
index|[
literal|1
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|countTrues
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|result
index|[
literal|2
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|countFalses
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|result
index|[
literal|3
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|countNulls
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
comment|/**    * GenericUDAFLongStatsEvaluator.    *    */
specifier|public
specifier|static
class|class
name|GenericUDAFLongStatsEvaluator
extends|extends
name|GenericUDAFEvaluator
block|{
comment|/* Object Inspector corresponding to the input parameter.      */
specifier|private
name|PrimitiveObjectInspector
name|inputOI
decl_stmt|;
specifier|private
specifier|transient
name|PrimitiveObjectInspector
name|numVectorsOI
decl_stmt|;
comment|/* Partial aggregation result returned by TerminatePartial. Partial result is a struct      * containing a long field named "count".      */
specifier|private
name|Object
index|[]
name|partialResult
decl_stmt|;
comment|/* Object Inspectors corresponding to the struct returned by TerminatePartial and the long      * field within the struct - "count"      */
specifier|private
specifier|transient
name|StructObjectInspector
name|soi
decl_stmt|;
specifier|private
specifier|transient
name|StructField
name|minField
decl_stmt|;
specifier|private
name|WritableLongObjectInspector
name|minFieldOI
decl_stmt|;
specifier|private
specifier|transient
name|StructField
name|maxField
decl_stmt|;
specifier|private
name|WritableLongObjectInspector
name|maxFieldOI
decl_stmt|;
specifier|private
specifier|transient
name|StructField
name|countNullsField
decl_stmt|;
specifier|private
name|WritableLongObjectInspector
name|countNullsFieldOI
decl_stmt|;
specifier|private
specifier|transient
name|StructField
name|ndvField
decl_stmt|;
specifier|private
name|WritableStringObjectInspector
name|ndvFieldOI
decl_stmt|;
specifier|private
specifier|transient
name|StructField
name|numBitVectorsField
decl_stmt|;
specifier|private
name|WritableIntObjectInspector
name|numBitVectorsFieldOI
decl_stmt|;
comment|/* Output of final result of the aggregation      */
specifier|private
name|Object
index|[]
name|result
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|init
parameter_list|(
name|Mode
name|m
parameter_list|,
name|ObjectInspector
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// initialize input
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|PARTIAL1
operator|||
name|mode
operator|==
name|Mode
operator|.
name|COMPLETE
condition|)
block|{
name|inputOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|parameters
index|[
literal|0
index|]
expr_stmt|;
name|numVectorsOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|parameters
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
name|soi
operator|=
operator|(
name|StructObjectInspector
operator|)
name|parameters
index|[
literal|0
index|]
expr_stmt|;
name|minField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"Min"
argument_list|)
expr_stmt|;
name|minFieldOI
operator|=
operator|(
name|WritableLongObjectInspector
operator|)
name|minField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
name|maxField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"Max"
argument_list|)
expr_stmt|;
name|maxFieldOI
operator|=
operator|(
name|WritableLongObjectInspector
operator|)
name|maxField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
name|countNullsField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"CountNulls"
argument_list|)
expr_stmt|;
name|countNullsFieldOI
operator|=
operator|(
name|WritableLongObjectInspector
operator|)
name|countNullsField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
name|ndvField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"BitVector"
argument_list|)
expr_stmt|;
name|ndvFieldOI
operator|=
operator|(
name|WritableStringObjectInspector
operator|)
name|ndvField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
name|numBitVectorsField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"NumBitVectors"
argument_list|)
expr_stmt|;
name|numBitVectorsFieldOI
operator|=
operator|(
name|WritableIntObjectInspector
operator|)
name|numBitVectorsField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
block|}
comment|// initialize output
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|PARTIAL1
operator|||
name|mode
operator|==
name|Mode
operator|.
name|PARTIAL2
condition|)
block|{
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|foi
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableIntObjectInspector
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fname
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"ColumnType"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"Min"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"Max"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"CountNulls"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"BitVector"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"NumBitVectors"
argument_list|)
expr_stmt|;
name|partialResult
operator|=
operator|new
name|Object
index|[
literal|6
index|]
expr_stmt|;
name|partialResult
index|[
literal|0
index|]
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|partialResult
index|[
literal|1
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|partialResult
index|[
literal|2
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|partialResult
index|[
literal|3
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|partialResult
index|[
literal|4
index|]
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|partialResult
index|[
literal|5
index|]
operator|=
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fname
argument_list|,
name|foi
argument_list|)
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|foi
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fname
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"ColumnType"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"Min"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"Max"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"CountNulls"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"NumDistinctValues"
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Object
index|[
literal|5
index|]
expr_stmt|;
name|result
index|[
literal|0
index|]
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
index|[
literal|2
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
index|[
literal|3
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
index|[
literal|4
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fname
argument_list|,
name|foi
argument_list|)
return|;
block|}
block|}
annotation|@
name|AggregationType
argument_list|(
name|estimable
operator|=
literal|true
argument_list|)
specifier|public
specifier|static
class|class
name|LongStatsAgg
extends|extends
name|AbstractAggregationBuffer
block|{
specifier|public
name|String
name|columnType
decl_stmt|;
specifier|public
name|long
name|min
decl_stmt|;
comment|/* Minimum value seen so far */
specifier|public
name|long
name|max
decl_stmt|;
comment|/* Maximum value seen so far */
specifier|public
name|long
name|countNulls
decl_stmt|;
comment|/* Count of number of null values seen so far */
specifier|public
name|LongNumDistinctValueEstimator
name|numDV
decl_stmt|;
comment|/* Distinct value estimator */
specifier|public
name|boolean
name|firstItem
decl_stmt|;
comment|/* First item in the aggBuf? */
specifier|public
name|int
name|numBitVectors
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|estimate
parameter_list|()
block|{
name|JavaDataModel
name|model
init|=
name|JavaDataModel
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|model
operator|.
name|primitive1
argument_list|()
operator|*
literal|2
operator|+
name|model
operator|.
name|primitive2
argument_list|()
operator|*
literal|3
operator|+
name|model
operator|.
name|lengthFor
argument_list|(
name|columnType
argument_list|)
operator|+
name|model
operator|.
name|lengthFor
argument_list|(
name|numDV
argument_list|)
return|;
block|}
block|}
empty_stmt|;
annotation|@
name|Override
specifier|public
name|AggregationBuffer
name|getNewAggregationBuffer
parameter_list|()
throws|throws
name|HiveException
block|{
name|LongStatsAgg
name|result
init|=
operator|new
name|LongStatsAgg
argument_list|()
decl_stmt|;
name|reset
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|void
name|initNDVEstimator
parameter_list|(
name|LongStatsAgg
name|aggBuffer
parameter_list|,
name|int
name|numBitVectors
parameter_list|)
block|{
name|aggBuffer
operator|.
name|numDV
operator|=
operator|new
name|LongNumDistinctValueEstimator
argument_list|(
name|numBitVectors
argument_list|)
expr_stmt|;
name|aggBuffer
operator|.
name|numDV
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|LongStatsAgg
name|myagg
init|=
operator|(
name|LongStatsAgg
operator|)
name|agg
decl_stmt|;
name|myagg
operator|.
name|columnType
operator|=
operator|new
name|String
argument_list|(
literal|"Long"
argument_list|)
expr_stmt|;
name|myagg
operator|.
name|min
operator|=
literal|0
expr_stmt|;
name|myagg
operator|.
name|max
operator|=
literal|0
expr_stmt|;
name|myagg
operator|.
name|countNulls
operator|=
literal|0
expr_stmt|;
name|myagg
operator|.
name|firstItem
operator|=
literal|true
expr_stmt|;
block|}
name|boolean
name|warned
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|p
init|=
name|parameters
index|[
literal|0
index|]
decl_stmt|;
name|LongStatsAgg
name|myagg
init|=
operator|(
name|LongStatsAgg
operator|)
name|agg
decl_stmt|;
name|boolean
name|emptyTable
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|parameters
index|[
literal|1
index|]
operator|==
literal|null
condition|)
block|{
name|emptyTable
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|myagg
operator|.
name|firstItem
condition|)
block|{
name|int
name|numVectors
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|emptyTable
condition|)
block|{
name|numVectors
operator|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getInt
argument_list|(
name|parameters
index|[
literal|1
index|]
argument_list|,
name|numVectorsOI
argument_list|)
expr_stmt|;
block|}
name|initNDVEstimator
argument_list|(
name|myagg
argument_list|,
name|numVectors
argument_list|)
expr_stmt|;
name|myagg
operator|.
name|firstItem
operator|=
literal|false
expr_stmt|;
name|myagg
operator|.
name|numBitVectors
operator|=
name|numVectors
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|emptyTable
condition|)
block|{
comment|//Update null counter if a null value is seen
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|myagg
operator|.
name|countNulls
operator|++
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|long
name|v
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getLong
argument_list|(
name|p
argument_list|,
name|inputOI
argument_list|)
decl_stmt|;
comment|//Update min counter if new value is less than min seen so far
if|if
condition|(
name|v
operator|<
name|myagg
operator|.
name|min
condition|)
block|{
name|myagg
operator|.
name|min
operator|=
name|v
expr_stmt|;
block|}
comment|//Update max counter if new value is greater than max seen so far
if|if
condition|(
name|v
operator|>
name|myagg
operator|.
name|max
condition|)
block|{
name|myagg
operator|.
name|max
operator|=
name|v
expr_stmt|;
block|}
comment|// Add value to NumDistinctValue Estimator
name|myagg
operator|.
name|numDV
operator|.
name|addToEstimator
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|warned
condition|)
block|{
name|warned
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" ignoring similar exceptions."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminatePartial
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|LongStatsAgg
name|myagg
init|=
operator|(
name|LongStatsAgg
operator|)
name|agg
decl_stmt|;
comment|// Serialize numDistinctValue Estimator
name|Text
name|t
init|=
name|myagg
operator|.
name|numDV
operator|.
name|serialize
argument_list|()
decl_stmt|;
comment|// Serialize rest of the field in the AggBuffer
operator|(
operator|(
name|Text
operator|)
name|partialResult
index|[
literal|0
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|columnType
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|partialResult
index|[
literal|1
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|min
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|partialResult
index|[
literal|2
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|max
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|partialResult
index|[
literal|3
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|countNulls
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Text
operator|)
name|partialResult
index|[
literal|4
index|]
operator|)
operator|.
name|set
argument_list|(
name|t
argument_list|)
expr_stmt|;
operator|(
operator|(
name|IntWritable
operator|)
name|partialResult
index|[
literal|5
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|numDV
operator|.
name|getnumBitVectors
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|partialResult
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|merge
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
name|partial
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|partial
operator|!=
literal|null
condition|)
block|{
name|LongStatsAgg
name|myagg
init|=
operator|(
name|LongStatsAgg
operator|)
name|agg
decl_stmt|;
if|if
condition|(
name|myagg
operator|.
name|firstItem
condition|)
block|{
name|Object
name|partialValue
init|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|numBitVectorsField
argument_list|)
decl_stmt|;
name|int
name|numVectors
init|=
name|numBitVectorsFieldOI
operator|.
name|get
argument_list|(
name|partialValue
argument_list|)
decl_stmt|;
name|initNDVEstimator
argument_list|(
name|myagg
argument_list|,
name|numVectors
argument_list|)
expr_stmt|;
name|myagg
operator|.
name|firstItem
operator|=
literal|false
expr_stmt|;
name|myagg
operator|.
name|numBitVectors
operator|=
name|numVectors
expr_stmt|;
block|}
comment|// Update min if min is lesser than the smallest value seen so far
name|Object
name|partialValue
init|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|minField
argument_list|)
decl_stmt|;
if|if
condition|(
name|myagg
operator|.
name|min
operator|>
name|minFieldOI
operator|.
name|get
argument_list|(
name|partialValue
argument_list|)
condition|)
block|{
name|myagg
operator|.
name|min
operator|=
name|minFieldOI
operator|.
name|get
argument_list|(
name|partialValue
argument_list|)
expr_stmt|;
block|}
comment|// Update max if max is greater than the largest value seen so far
name|partialValue
operator|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|maxField
argument_list|)
expr_stmt|;
if|if
condition|(
name|myagg
operator|.
name|max
operator|<
name|maxFieldOI
operator|.
name|get
argument_list|(
name|partialValue
argument_list|)
condition|)
block|{
name|myagg
operator|.
name|max
operator|=
name|maxFieldOI
operator|.
name|get
argument_list|(
name|partialValue
argument_list|)
expr_stmt|;
block|}
comment|// Update the null counter
name|partialValue
operator|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|countNullsField
argument_list|)
expr_stmt|;
name|myagg
operator|.
name|countNulls
operator|+=
name|countNullsFieldOI
operator|.
name|get
argument_list|(
name|partialValue
argument_list|)
expr_stmt|;
comment|// Merge numDistinctValue Estimators
name|partialValue
operator|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|ndvField
argument_list|)
expr_stmt|;
name|String
name|v
init|=
name|ndvFieldOI
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|partialValue
argument_list|)
decl_stmt|;
name|NumDistinctValueEstimator
name|o
init|=
operator|new
name|NumDistinctValueEstimator
argument_list|(
name|v
argument_list|,
name|myagg
operator|.
name|numBitVectors
argument_list|)
decl_stmt|;
name|myagg
operator|.
name|numDV
operator|.
name|mergeEstimators
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|LongStatsAgg
name|myagg
init|=
operator|(
name|LongStatsAgg
operator|)
name|agg
decl_stmt|;
name|long
name|numDV
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|myagg
operator|.
name|numBitVectors
operator|!=
literal|0
condition|)
block|{
name|numDV
operator|=
name|myagg
operator|.
name|numDV
operator|.
name|estimateNumDistinctValues
argument_list|()
expr_stmt|;
block|}
comment|// Serialize the result struct
operator|(
operator|(
name|Text
operator|)
name|result
index|[
literal|0
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|columnType
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|result
index|[
literal|1
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|min
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|result
index|[
literal|2
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|max
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|result
index|[
literal|3
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|countNulls
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|result
index|[
literal|4
index|]
operator|)
operator|.
name|set
argument_list|(
name|numDV
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
comment|/**    * GenericUDAFDoubleStatsEvaluator.    *    */
specifier|public
specifier|static
class|class
name|GenericUDAFDoubleStatsEvaluator
extends|extends
name|GenericUDAFEvaluator
block|{
comment|/* Object Inspector corresponding to the input parameter.      */
specifier|private
name|PrimitiveObjectInspector
name|inputOI
decl_stmt|;
specifier|private
specifier|transient
name|PrimitiveObjectInspector
name|numVectorsOI
decl_stmt|;
comment|/* Partial aggregation result returned by TerminatePartial. Partial result is a struct      * containing a long field named "count".      */
specifier|private
name|Object
index|[]
name|partialResult
decl_stmt|;
comment|/* Object Inspectors corresponding to the struct returned by TerminatePartial and the long      * field within the struct - "count"      */
specifier|private
specifier|transient
name|StructObjectInspector
name|soi
decl_stmt|;
specifier|private
specifier|transient
name|StructField
name|minField
decl_stmt|;
specifier|private
name|WritableDoubleObjectInspector
name|minFieldOI
decl_stmt|;
specifier|private
specifier|transient
name|StructField
name|maxField
decl_stmt|;
specifier|private
name|WritableDoubleObjectInspector
name|maxFieldOI
decl_stmt|;
specifier|private
specifier|transient
name|StructField
name|countNullsField
decl_stmt|;
specifier|private
name|WritableLongObjectInspector
name|countNullsFieldOI
decl_stmt|;
specifier|private
specifier|transient
name|StructField
name|ndvField
decl_stmt|;
specifier|private
name|WritableStringObjectInspector
name|ndvFieldOI
decl_stmt|;
specifier|private
specifier|transient
name|StructField
name|numBitVectorsField
decl_stmt|;
specifier|private
name|WritableIntObjectInspector
name|numBitVectorsFieldOI
decl_stmt|;
comment|/* Output of final result of the aggregation      */
specifier|private
name|Object
index|[]
name|result
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|init
parameter_list|(
name|Mode
name|m
parameter_list|,
name|ObjectInspector
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// initialize input
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|PARTIAL1
operator|||
name|mode
operator|==
name|Mode
operator|.
name|COMPLETE
condition|)
block|{
name|inputOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|parameters
index|[
literal|0
index|]
expr_stmt|;
name|numVectorsOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|parameters
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
name|soi
operator|=
operator|(
name|StructObjectInspector
operator|)
name|parameters
index|[
literal|0
index|]
expr_stmt|;
name|minField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"Min"
argument_list|)
expr_stmt|;
name|minFieldOI
operator|=
operator|(
name|WritableDoubleObjectInspector
operator|)
name|minField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
name|maxField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"Max"
argument_list|)
expr_stmt|;
name|maxFieldOI
operator|=
operator|(
name|WritableDoubleObjectInspector
operator|)
name|maxField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
name|countNullsField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"CountNulls"
argument_list|)
expr_stmt|;
name|countNullsFieldOI
operator|=
operator|(
name|WritableLongObjectInspector
operator|)
name|countNullsField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
name|ndvField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"BitVector"
argument_list|)
expr_stmt|;
name|ndvFieldOI
operator|=
operator|(
name|WritableStringObjectInspector
operator|)
name|ndvField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
name|numBitVectorsField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"NumBitVectors"
argument_list|)
expr_stmt|;
name|numBitVectorsFieldOI
operator|=
operator|(
name|WritableIntObjectInspector
operator|)
name|numBitVectorsField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
block|}
comment|// initialize output
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|PARTIAL1
operator|||
name|mode
operator|==
name|Mode
operator|.
name|PARTIAL2
condition|)
block|{
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|foi
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableIntObjectInspector
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fname
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"ColumnType"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"Min"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"Max"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"CountNulls"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"BitVector"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"NumBitVectors"
argument_list|)
expr_stmt|;
name|partialResult
operator|=
operator|new
name|Object
index|[
literal|6
index|]
expr_stmt|;
name|partialResult
index|[
literal|0
index|]
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|partialResult
index|[
literal|1
index|]
operator|=
operator|new
name|DoubleWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|partialResult
index|[
literal|2
index|]
operator|=
operator|new
name|DoubleWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|partialResult
index|[
literal|3
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|partialResult
index|[
literal|4
index|]
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|partialResult
index|[
literal|5
index|]
operator|=
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fname
argument_list|,
name|foi
argument_list|)
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|foi
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fname
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"ColumnType"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"Min"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"Max"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"CountNulls"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"NumDistinctValues"
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Object
index|[
literal|5
index|]
expr_stmt|;
name|result
index|[
literal|0
index|]
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|=
operator|new
name|DoubleWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
index|[
literal|2
index|]
operator|=
operator|new
name|DoubleWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
index|[
literal|3
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
index|[
literal|4
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fname
argument_list|,
name|foi
argument_list|)
return|;
block|}
block|}
annotation|@
name|AggregationType
argument_list|(
name|estimable
operator|=
literal|true
argument_list|)
specifier|public
specifier|static
class|class
name|DoubleStatsAgg
extends|extends
name|AbstractAggregationBuffer
block|{
specifier|public
name|String
name|columnType
decl_stmt|;
specifier|public
name|double
name|min
decl_stmt|;
comment|/* Minimum value seen so far */
specifier|public
name|double
name|max
decl_stmt|;
comment|/* Maximum value seen so far */
specifier|public
name|long
name|countNulls
decl_stmt|;
comment|/* Count of number of null values seen so far */
specifier|public
name|DoubleNumDistinctValueEstimator
name|numDV
decl_stmt|;
comment|/* Distinct value estimator */
specifier|public
name|boolean
name|firstItem
decl_stmt|;
comment|/* First item in the aggBuf? */
specifier|public
name|int
name|numBitVectors
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|estimate
parameter_list|()
block|{
name|JavaDataModel
name|model
init|=
name|JavaDataModel
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|model
operator|.
name|primitive1
argument_list|()
operator|*
literal|2
operator|+
name|model
operator|.
name|primitive2
argument_list|()
operator|*
literal|3
operator|+
name|model
operator|.
name|lengthFor
argument_list|(
name|columnType
argument_list|)
operator|+
name|model
operator|.
name|lengthFor
argument_list|(
name|numDV
argument_list|)
return|;
block|}
block|}
empty_stmt|;
annotation|@
name|Override
specifier|public
name|AggregationBuffer
name|getNewAggregationBuffer
parameter_list|()
throws|throws
name|HiveException
block|{
name|DoubleStatsAgg
name|result
init|=
operator|new
name|DoubleStatsAgg
argument_list|()
decl_stmt|;
name|reset
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|void
name|initNDVEstimator
parameter_list|(
name|DoubleStatsAgg
name|aggBuffer
parameter_list|,
name|int
name|numBitVectors
parameter_list|)
block|{
name|aggBuffer
operator|.
name|numDV
operator|=
operator|new
name|DoubleNumDistinctValueEstimator
argument_list|(
name|numBitVectors
argument_list|)
expr_stmt|;
name|aggBuffer
operator|.
name|numDV
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|DoubleStatsAgg
name|myagg
init|=
operator|(
name|DoubleStatsAgg
operator|)
name|agg
decl_stmt|;
name|myagg
operator|.
name|columnType
operator|=
operator|new
name|String
argument_list|(
literal|"Double"
argument_list|)
expr_stmt|;
name|myagg
operator|.
name|min
operator|=
literal|0.0
expr_stmt|;
name|myagg
operator|.
name|max
operator|=
literal|0.0
expr_stmt|;
name|myagg
operator|.
name|countNulls
operator|=
literal|0
expr_stmt|;
name|myagg
operator|.
name|firstItem
operator|=
literal|true
expr_stmt|;
block|}
name|boolean
name|warned
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|p
init|=
name|parameters
index|[
literal|0
index|]
decl_stmt|;
name|DoubleStatsAgg
name|myagg
init|=
operator|(
name|DoubleStatsAgg
operator|)
name|agg
decl_stmt|;
name|boolean
name|emptyTable
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|parameters
index|[
literal|1
index|]
operator|==
literal|null
condition|)
block|{
name|emptyTable
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|myagg
operator|.
name|firstItem
condition|)
block|{
name|int
name|numVectors
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|emptyTable
condition|)
block|{
name|numVectors
operator|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getInt
argument_list|(
name|parameters
index|[
literal|1
index|]
argument_list|,
name|numVectorsOI
argument_list|)
expr_stmt|;
block|}
name|initNDVEstimator
argument_list|(
name|myagg
argument_list|,
name|numVectors
argument_list|)
expr_stmt|;
name|myagg
operator|.
name|firstItem
operator|=
literal|false
expr_stmt|;
name|myagg
operator|.
name|numBitVectors
operator|=
name|numVectors
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|emptyTable
condition|)
block|{
comment|//Update null counter if a null value is seen
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|myagg
operator|.
name|countNulls
operator|++
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|double
name|v
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getDouble
argument_list|(
name|p
argument_list|,
name|inputOI
argument_list|)
decl_stmt|;
comment|//Update min counter if new value is less than min seen so far
if|if
condition|(
name|v
operator|<
name|myagg
operator|.
name|min
condition|)
block|{
name|myagg
operator|.
name|min
operator|=
name|v
expr_stmt|;
block|}
comment|//Update max counter if new value is greater than max seen so far
if|if
condition|(
name|v
operator|>
name|myagg
operator|.
name|max
condition|)
block|{
name|myagg
operator|.
name|max
operator|=
name|v
expr_stmt|;
block|}
comment|// Add value to NumDistinctValue Estimator
name|myagg
operator|.
name|numDV
operator|.
name|addToEstimator
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|warned
condition|)
block|{
name|warned
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" ignoring similar exceptions."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminatePartial
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|DoubleStatsAgg
name|myagg
init|=
operator|(
name|DoubleStatsAgg
operator|)
name|agg
decl_stmt|;
comment|// Serialize numDistinctValue Estimator
name|Text
name|t
init|=
name|myagg
operator|.
name|numDV
operator|.
name|serialize
argument_list|()
decl_stmt|;
comment|// Serialize the rest of the values in the AggBuffer
operator|(
operator|(
name|Text
operator|)
name|partialResult
index|[
literal|0
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|columnType
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DoubleWritable
operator|)
name|partialResult
index|[
literal|1
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|min
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DoubleWritable
operator|)
name|partialResult
index|[
literal|2
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|max
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|partialResult
index|[
literal|3
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|countNulls
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Text
operator|)
name|partialResult
index|[
literal|4
index|]
operator|)
operator|.
name|set
argument_list|(
name|t
argument_list|)
expr_stmt|;
operator|(
operator|(
name|IntWritable
operator|)
name|partialResult
index|[
literal|5
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|numBitVectors
argument_list|)
expr_stmt|;
return|return
name|partialResult
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|merge
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
name|partial
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|partial
operator|!=
literal|null
condition|)
block|{
name|DoubleStatsAgg
name|myagg
init|=
operator|(
name|DoubleStatsAgg
operator|)
name|agg
decl_stmt|;
if|if
condition|(
name|myagg
operator|.
name|firstItem
condition|)
block|{
name|Object
name|partialValue
init|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|numBitVectorsField
argument_list|)
decl_stmt|;
name|int
name|numVectors
init|=
name|numBitVectorsFieldOI
operator|.
name|get
argument_list|(
name|partialValue
argument_list|)
decl_stmt|;
name|initNDVEstimator
argument_list|(
name|myagg
argument_list|,
name|numVectors
argument_list|)
expr_stmt|;
name|myagg
operator|.
name|firstItem
operator|=
literal|false
expr_stmt|;
name|myagg
operator|.
name|numBitVectors
operator|=
name|numVectors
expr_stmt|;
block|}
comment|// Update min if min is lesser than the smallest value seen so far
name|Object
name|partialValue
init|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|minField
argument_list|)
decl_stmt|;
if|if
condition|(
name|myagg
operator|.
name|min
operator|>
name|minFieldOI
operator|.
name|get
argument_list|(
name|partialValue
argument_list|)
condition|)
block|{
name|myagg
operator|.
name|min
operator|=
name|minFieldOI
operator|.
name|get
argument_list|(
name|partialValue
argument_list|)
expr_stmt|;
block|}
comment|// Update max if max is greater than the largest value seen so far
name|partialValue
operator|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|maxField
argument_list|)
expr_stmt|;
if|if
condition|(
name|myagg
operator|.
name|max
operator|<
name|maxFieldOI
operator|.
name|get
argument_list|(
name|partialValue
argument_list|)
condition|)
block|{
name|myagg
operator|.
name|max
operator|=
name|maxFieldOI
operator|.
name|get
argument_list|(
name|partialValue
argument_list|)
expr_stmt|;
block|}
comment|// Update the null counter
name|partialValue
operator|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|countNullsField
argument_list|)
expr_stmt|;
name|myagg
operator|.
name|countNulls
operator|+=
name|countNullsFieldOI
operator|.
name|get
argument_list|(
name|partialValue
argument_list|)
expr_stmt|;
comment|// Merge numDistinctValue Estimators
name|partialValue
operator|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|ndvField
argument_list|)
expr_stmt|;
name|String
name|v
init|=
name|ndvFieldOI
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|partialValue
argument_list|)
decl_stmt|;
name|NumDistinctValueEstimator
name|o
init|=
operator|new
name|NumDistinctValueEstimator
argument_list|(
name|v
argument_list|,
name|myagg
operator|.
name|numBitVectors
argument_list|)
decl_stmt|;
name|myagg
operator|.
name|numDV
operator|.
name|mergeEstimators
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|DoubleStatsAgg
name|myagg
init|=
operator|(
name|DoubleStatsAgg
operator|)
name|agg
decl_stmt|;
name|long
name|numDV
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|myagg
operator|.
name|numBitVectors
operator|!=
literal|0
condition|)
block|{
name|numDV
operator|=
name|myagg
operator|.
name|numDV
operator|.
name|estimateNumDistinctValues
argument_list|()
expr_stmt|;
block|}
comment|// Serialize the result struct
operator|(
operator|(
name|Text
operator|)
name|result
index|[
literal|0
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|columnType
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DoubleWritable
operator|)
name|result
index|[
literal|1
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|min
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DoubleWritable
operator|)
name|result
index|[
literal|2
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|max
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|result
index|[
literal|3
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|countNulls
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|result
index|[
literal|4
index|]
operator|)
operator|.
name|set
argument_list|(
name|numDV
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
comment|/**    * GenericUDAFStringStatsEvaluator.    *    */
specifier|public
specifier|static
class|class
name|GenericUDAFStringStatsEvaluator
extends|extends
name|GenericUDAFEvaluator
block|{
comment|/* Object Inspector corresponding to the input parameter.      */
specifier|private
name|PrimitiveObjectInspector
name|inputOI
decl_stmt|;
specifier|private
specifier|transient
name|PrimitiveObjectInspector
name|numVectorsOI
decl_stmt|;
comment|/* Partial aggregation result returned by TerminatePartial. Partial result is a struct      * containing a long field named "count".      */
specifier|private
name|Object
index|[]
name|partialResult
decl_stmt|;
comment|/* Object Inspectors corresponding to the struct returned by TerminatePartial and the      * fields within the struct - "maxLength", "sumLength", "count", "countNulls", "ndv"      */
specifier|private
specifier|transient
name|StructObjectInspector
name|soi
decl_stmt|;
specifier|private
specifier|transient
name|StructField
name|maxLengthField
decl_stmt|;
specifier|private
name|WritableLongObjectInspector
name|maxLengthFieldOI
decl_stmt|;
specifier|private
specifier|transient
name|StructField
name|sumLengthField
decl_stmt|;
specifier|private
name|WritableLongObjectInspector
name|sumLengthFieldOI
decl_stmt|;
specifier|private
specifier|transient
name|StructField
name|countField
decl_stmt|;
specifier|private
name|WritableLongObjectInspector
name|countFieldOI
decl_stmt|;
specifier|private
specifier|transient
name|StructField
name|countNullsField
decl_stmt|;
specifier|private
name|WritableLongObjectInspector
name|countNullsFieldOI
decl_stmt|;
specifier|private
specifier|transient
name|StructField
name|ndvField
decl_stmt|;
specifier|private
name|WritableStringObjectInspector
name|ndvFieldOI
decl_stmt|;
specifier|private
specifier|transient
name|StructField
name|numBitVectorsField
decl_stmt|;
specifier|private
name|WritableIntObjectInspector
name|numBitVectorsFieldOI
decl_stmt|;
comment|/* Output of final result of the aggregation      */
specifier|private
name|Object
index|[]
name|result
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|init
parameter_list|(
name|Mode
name|m
parameter_list|,
name|ObjectInspector
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// initialize input
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|PARTIAL1
operator|||
name|mode
operator|==
name|Mode
operator|.
name|COMPLETE
condition|)
block|{
name|inputOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|parameters
index|[
literal|0
index|]
expr_stmt|;
name|numVectorsOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|parameters
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
name|soi
operator|=
operator|(
name|StructObjectInspector
operator|)
name|parameters
index|[
literal|0
index|]
expr_stmt|;
name|maxLengthField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"MaxLength"
argument_list|)
expr_stmt|;
name|maxLengthFieldOI
operator|=
operator|(
name|WritableLongObjectInspector
operator|)
name|maxLengthField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
name|sumLengthField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"SumLength"
argument_list|)
expr_stmt|;
name|sumLengthFieldOI
operator|=
operator|(
name|WritableLongObjectInspector
operator|)
name|sumLengthField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
name|countField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"Count"
argument_list|)
expr_stmt|;
name|countFieldOI
operator|=
operator|(
name|WritableLongObjectInspector
operator|)
name|countField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
name|countNullsField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"CountNulls"
argument_list|)
expr_stmt|;
name|countNullsFieldOI
operator|=
operator|(
name|WritableLongObjectInspector
operator|)
name|countNullsField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
name|ndvField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"BitVector"
argument_list|)
expr_stmt|;
name|ndvFieldOI
operator|=
operator|(
name|WritableStringObjectInspector
operator|)
name|ndvField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
name|numBitVectorsField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"NumBitVectors"
argument_list|)
expr_stmt|;
name|numBitVectorsFieldOI
operator|=
operator|(
name|WritableIntObjectInspector
operator|)
name|numBitVectorsField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
block|}
comment|// initialize output
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|PARTIAL1
operator|||
name|mode
operator|==
name|Mode
operator|.
name|PARTIAL2
condition|)
block|{
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|foi
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableIntObjectInspector
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fname
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"ColumnType"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"MaxLength"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"SumLength"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"Count"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"CountNulls"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"BitVector"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"NumBitVectors"
argument_list|)
expr_stmt|;
name|partialResult
operator|=
operator|new
name|Object
index|[
literal|7
index|]
expr_stmt|;
name|partialResult
index|[
literal|0
index|]
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|partialResult
index|[
literal|1
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|partialResult
index|[
literal|2
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|partialResult
index|[
literal|3
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|partialResult
index|[
literal|4
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|partialResult
index|[
literal|5
index|]
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|partialResult
index|[
literal|6
index|]
operator|=
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fname
argument_list|,
name|foi
argument_list|)
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|foi
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fname
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"ColumnType"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"MaxLength"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"AvgLength"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"CountNulls"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"NumDistinctValues"
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Object
index|[
literal|5
index|]
expr_stmt|;
name|result
index|[
literal|0
index|]
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
index|[
literal|2
index|]
operator|=
operator|new
name|DoubleWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
index|[
literal|3
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
index|[
literal|4
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fname
argument_list|,
name|foi
argument_list|)
return|;
block|}
block|}
annotation|@
name|AggregationType
argument_list|(
name|estimable
operator|=
literal|true
argument_list|)
specifier|public
specifier|static
class|class
name|StringStatsAgg
extends|extends
name|AbstractAggregationBuffer
block|{
specifier|public
name|String
name|columnType
decl_stmt|;
specifier|public
name|long
name|maxLength
decl_stmt|;
comment|/* Maximum length seen so far */
specifier|public
name|long
name|sumLength
decl_stmt|;
comment|/* Sum of lengths of all values seen so far */
specifier|public
name|long
name|count
decl_stmt|;
comment|/* Count of all values seen so far */
specifier|public
name|long
name|countNulls
decl_stmt|;
comment|/* Count of number of null values seen so far */
specifier|public
name|StringNumDistinctValueEstimator
name|numDV
decl_stmt|;
comment|/* Distinct value estimator */
specifier|public
name|int
name|numBitVectors
decl_stmt|;
specifier|public
name|boolean
name|firstItem
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|estimate
parameter_list|()
block|{
name|JavaDataModel
name|model
init|=
name|JavaDataModel
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|model
operator|.
name|primitive1
argument_list|()
operator|*
literal|2
operator|+
name|model
operator|.
name|primitive2
argument_list|()
operator|*
literal|4
operator|+
name|model
operator|.
name|lengthFor
argument_list|(
name|columnType
argument_list|)
operator|+
name|model
operator|.
name|lengthFor
argument_list|(
name|numDV
argument_list|)
return|;
block|}
block|}
empty_stmt|;
annotation|@
name|Override
specifier|public
name|AggregationBuffer
name|getNewAggregationBuffer
parameter_list|()
throws|throws
name|HiveException
block|{
name|StringStatsAgg
name|result
init|=
operator|new
name|StringStatsAgg
argument_list|()
decl_stmt|;
name|reset
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|void
name|initNDVEstimator
parameter_list|(
name|StringStatsAgg
name|aggBuffer
parameter_list|,
name|int
name|numBitVectors
parameter_list|)
block|{
name|aggBuffer
operator|.
name|numDV
operator|=
operator|new
name|StringNumDistinctValueEstimator
argument_list|(
name|numBitVectors
argument_list|)
expr_stmt|;
name|aggBuffer
operator|.
name|numDV
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|StringStatsAgg
name|myagg
init|=
operator|(
name|StringStatsAgg
operator|)
name|agg
decl_stmt|;
name|myagg
operator|.
name|columnType
operator|=
operator|new
name|String
argument_list|(
literal|"String"
argument_list|)
expr_stmt|;
name|myagg
operator|.
name|maxLength
operator|=
literal|0
expr_stmt|;
name|myagg
operator|.
name|sumLength
operator|=
literal|0
expr_stmt|;
name|myagg
operator|.
name|count
operator|=
literal|0
expr_stmt|;
name|myagg
operator|.
name|countNulls
operator|=
literal|0
expr_stmt|;
name|myagg
operator|.
name|firstItem
operator|=
literal|true
expr_stmt|;
block|}
name|boolean
name|warned
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|p
init|=
name|parameters
index|[
literal|0
index|]
decl_stmt|;
name|StringStatsAgg
name|myagg
init|=
operator|(
name|StringStatsAgg
operator|)
name|agg
decl_stmt|;
name|boolean
name|emptyTable
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|parameters
index|[
literal|1
index|]
operator|==
literal|null
condition|)
block|{
name|emptyTable
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|myagg
operator|.
name|firstItem
condition|)
block|{
name|int
name|numVectors
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|emptyTable
condition|)
block|{
name|numVectors
operator|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getInt
argument_list|(
name|parameters
index|[
literal|1
index|]
argument_list|,
name|numVectorsOI
argument_list|)
expr_stmt|;
block|}
name|initNDVEstimator
argument_list|(
name|myagg
argument_list|,
name|numVectors
argument_list|)
expr_stmt|;
name|myagg
operator|.
name|firstItem
operator|=
literal|false
expr_stmt|;
name|myagg
operator|.
name|numBitVectors
operator|=
name|numVectors
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|emptyTable
condition|)
block|{
comment|// Update null counter if a null value is seen
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|myagg
operator|.
name|countNulls
operator|++
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|String
name|v
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getString
argument_list|(
name|p
argument_list|,
name|inputOI
argument_list|)
decl_stmt|;
comment|// Update max length if new length is greater than the ones seen so far
name|int
name|len
init|=
name|v
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|>
name|myagg
operator|.
name|maxLength
condition|)
block|{
name|myagg
operator|.
name|maxLength
operator|=
name|len
expr_stmt|;
block|}
comment|// Update sum length with the new length
name|myagg
operator|.
name|sumLength
operator|+=
name|len
expr_stmt|;
comment|// Increment count of values seen so far
name|myagg
operator|.
name|count
operator|++
expr_stmt|;
comment|// Add string value to NumDistinctValue Estimator
name|myagg
operator|.
name|numDV
operator|.
name|addToEstimator
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|warned
condition|)
block|{
name|warned
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" ignoring similar exceptions."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminatePartial
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|StringStatsAgg
name|myagg
init|=
operator|(
name|StringStatsAgg
operator|)
name|agg
decl_stmt|;
comment|// Serialize numDistinctValue Estimator
name|Text
name|t
init|=
name|myagg
operator|.
name|numDV
operator|.
name|serialize
argument_list|()
decl_stmt|;
comment|// Serialize the rest of the values in the AggBuffer
operator|(
operator|(
name|Text
operator|)
name|partialResult
index|[
literal|0
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|columnType
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|partialResult
index|[
literal|1
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|maxLength
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|partialResult
index|[
literal|2
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|sumLength
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|partialResult
index|[
literal|3
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|count
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|partialResult
index|[
literal|4
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|countNulls
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Text
operator|)
name|partialResult
index|[
literal|5
index|]
operator|)
operator|.
name|set
argument_list|(
name|t
argument_list|)
expr_stmt|;
operator|(
operator|(
name|IntWritable
operator|)
name|partialResult
index|[
literal|6
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|numBitVectors
argument_list|)
expr_stmt|;
return|return
name|partialResult
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|merge
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
name|partial
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|partial
operator|!=
literal|null
condition|)
block|{
name|StringStatsAgg
name|myagg
init|=
operator|(
name|StringStatsAgg
operator|)
name|agg
decl_stmt|;
if|if
condition|(
name|myagg
operator|.
name|firstItem
condition|)
block|{
name|Object
name|partialValue
init|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|numBitVectorsField
argument_list|)
decl_stmt|;
name|int
name|numVectors
init|=
name|numBitVectorsFieldOI
operator|.
name|get
argument_list|(
name|partialValue
argument_list|)
decl_stmt|;
name|initNDVEstimator
argument_list|(
name|myagg
argument_list|,
name|numVectors
argument_list|)
expr_stmt|;
name|myagg
operator|.
name|firstItem
operator|=
literal|false
expr_stmt|;
name|myagg
operator|.
name|numBitVectors
operator|=
name|numVectors
expr_stmt|;
block|}
comment|// Update maxLength if length is greater than the largest value seen so far
name|Object
name|partialValue
init|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|maxLengthField
argument_list|)
decl_stmt|;
if|if
condition|(
name|myagg
operator|.
name|maxLength
operator|<
name|maxLengthFieldOI
operator|.
name|get
argument_list|(
name|partialValue
argument_list|)
condition|)
block|{
name|myagg
operator|.
name|maxLength
operator|=
name|maxLengthFieldOI
operator|.
name|get
argument_list|(
name|partialValue
argument_list|)
expr_stmt|;
block|}
comment|// Update sum of the length of the values seen so far
name|partialValue
operator|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|sumLengthField
argument_list|)
expr_stmt|;
name|myagg
operator|.
name|sumLength
operator|+=
name|sumLengthFieldOI
operator|.
name|get
argument_list|(
name|partialValue
argument_list|)
expr_stmt|;
comment|// Update the count of the number of values seen so far
name|partialValue
operator|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|countField
argument_list|)
expr_stmt|;
name|myagg
operator|.
name|count
operator|+=
name|countFieldOI
operator|.
name|get
argument_list|(
name|partialValue
argument_list|)
expr_stmt|;
comment|// Update the null counter
name|partialValue
operator|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|countNullsField
argument_list|)
expr_stmt|;
name|myagg
operator|.
name|countNulls
operator|+=
name|countNullsFieldOI
operator|.
name|get
argument_list|(
name|partialValue
argument_list|)
expr_stmt|;
comment|// Merge numDistinctValue Estimators
name|partialValue
operator|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|ndvField
argument_list|)
expr_stmt|;
name|String
name|v
init|=
name|ndvFieldOI
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|partialValue
argument_list|)
decl_stmt|;
name|NumDistinctValueEstimator
name|o
init|=
operator|new
name|NumDistinctValueEstimator
argument_list|(
name|v
argument_list|,
name|myagg
operator|.
name|numBitVectors
argument_list|)
decl_stmt|;
name|myagg
operator|.
name|numDV
operator|.
name|mergeEstimators
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|StringStatsAgg
name|myagg
init|=
operator|(
name|StringStatsAgg
operator|)
name|agg
decl_stmt|;
name|long
name|numDV
init|=
literal|0
decl_stmt|;
name|double
name|avgLength
init|=
literal|0.0
decl_stmt|;
name|long
name|total
init|=
name|myagg
operator|.
name|count
operator|+
name|myagg
operator|.
name|countNulls
decl_stmt|;
if|if
condition|(
name|myagg
operator|.
name|numBitVectors
operator|!=
literal|0
condition|)
block|{
name|numDV
operator|=
name|myagg
operator|.
name|numDV
operator|.
name|estimateNumDistinctValues
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|total
operator|!=
literal|0
condition|)
block|{
name|avgLength
operator|=
call|(
name|double
call|)
argument_list|(
name|myagg
operator|.
name|sumLength
operator|/
operator|(
literal|1.0
operator|*
name|total
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// Serialize the result struct
operator|(
operator|(
name|Text
operator|)
name|result
index|[
literal|0
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|columnType
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|result
index|[
literal|1
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|maxLength
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DoubleWritable
operator|)
name|result
index|[
literal|2
index|]
operator|)
operator|.
name|set
argument_list|(
name|avgLength
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|result
index|[
literal|3
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|countNulls
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|result
index|[
literal|4
index|]
operator|)
operator|.
name|set
argument_list|(
name|numDV
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
comment|/**    * GenericUDAFBinaryStatsEvaluator.    *    */
specifier|public
specifier|static
class|class
name|GenericUDAFBinaryStatsEvaluator
extends|extends
name|GenericUDAFEvaluator
block|{
comment|/* Object Inspector corresponding to the input parameter.      */
specifier|private
name|PrimitiveObjectInspector
name|inputOI
decl_stmt|;
comment|/* Partial aggregation result returned by TerminatePartial. Partial result is a struct      * containing a long field named "count".      */
specifier|private
name|Object
index|[]
name|partialResult
decl_stmt|;
comment|/* Object Inspectors corresponding to the struct returned by TerminatePartial and the      * fields within the struct - "maxLength", "sumLength", "count", "countNulls"      */
specifier|private
specifier|transient
name|StructObjectInspector
name|soi
decl_stmt|;
specifier|private
specifier|transient
name|StructField
name|maxLengthField
decl_stmt|;
specifier|private
name|WritableLongObjectInspector
name|maxLengthFieldOI
decl_stmt|;
specifier|private
specifier|transient
name|StructField
name|sumLengthField
decl_stmt|;
specifier|private
name|WritableLongObjectInspector
name|sumLengthFieldOI
decl_stmt|;
specifier|private
specifier|transient
name|StructField
name|countField
decl_stmt|;
specifier|private
name|WritableLongObjectInspector
name|countFieldOI
decl_stmt|;
specifier|private
specifier|transient
name|StructField
name|countNullsField
decl_stmt|;
specifier|private
name|WritableLongObjectInspector
name|countNullsFieldOI
decl_stmt|;
comment|/* Output of final result of the aggregation      */
specifier|private
name|Object
index|[]
name|result
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|init
parameter_list|(
name|Mode
name|m
parameter_list|,
name|ObjectInspector
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// initialize input
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|PARTIAL1
operator|||
name|mode
operator|==
name|Mode
operator|.
name|COMPLETE
condition|)
block|{
name|inputOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|parameters
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|soi
operator|=
operator|(
name|StructObjectInspector
operator|)
name|parameters
index|[
literal|0
index|]
expr_stmt|;
name|maxLengthField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"MaxLength"
argument_list|)
expr_stmt|;
name|maxLengthFieldOI
operator|=
operator|(
name|WritableLongObjectInspector
operator|)
name|maxLengthField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
name|sumLengthField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"SumLength"
argument_list|)
expr_stmt|;
name|sumLengthFieldOI
operator|=
operator|(
name|WritableLongObjectInspector
operator|)
name|sumLengthField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
name|countField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"Count"
argument_list|)
expr_stmt|;
name|countFieldOI
operator|=
operator|(
name|WritableLongObjectInspector
operator|)
name|countField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
name|countNullsField
operator|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"CountNulls"
argument_list|)
expr_stmt|;
name|countNullsFieldOI
operator|=
operator|(
name|WritableLongObjectInspector
operator|)
name|countNullsField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
block|}
comment|// initialize output
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|PARTIAL1
operator|||
name|mode
operator|==
name|Mode
operator|.
name|PARTIAL2
condition|)
block|{
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|foi
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fname
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"ColumnType"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"MaxLength"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"SumLength"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"Count"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"CountNulls"
argument_list|)
expr_stmt|;
name|partialResult
operator|=
operator|new
name|Object
index|[
literal|5
index|]
expr_stmt|;
name|partialResult
index|[
literal|0
index|]
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|partialResult
index|[
literal|1
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|partialResult
index|[
literal|2
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|partialResult
index|[
literal|3
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|partialResult
index|[
literal|4
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fname
argument_list|,
name|foi
argument_list|)
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|foi
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fname
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"ColumnType"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"MaxLength"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"AvgLength"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"CountNulls"
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Object
index|[
literal|4
index|]
expr_stmt|;
name|result
index|[
literal|0
index|]
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
index|[
literal|2
index|]
operator|=
operator|new
name|DoubleWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
index|[
literal|3
index|]
operator|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fname
argument_list|,
name|foi
argument_list|)
return|;
block|}
block|}
annotation|@
name|AggregationType
argument_list|(
name|estimable
operator|=
literal|true
argument_list|)
specifier|public
specifier|static
class|class
name|BinaryStatsAgg
extends|extends
name|AbstractAggregationBuffer
block|{
specifier|public
name|String
name|columnType
decl_stmt|;
specifier|public
name|long
name|maxLength
decl_stmt|;
comment|/* Maximum length seen so far */
specifier|public
name|long
name|sumLength
decl_stmt|;
comment|/* Sum of lengths of all values seen so far */
specifier|public
name|long
name|count
decl_stmt|;
comment|/* Count of all values seen so far */
specifier|public
name|long
name|countNulls
decl_stmt|;
comment|/* Count of number of null values seen so far */
annotation|@
name|Override
specifier|public
name|int
name|estimate
parameter_list|()
block|{
name|JavaDataModel
name|model
init|=
name|JavaDataModel
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|model
operator|.
name|primitive2
argument_list|()
operator|*
literal|4
operator|+
name|model
operator|.
name|lengthFor
argument_list|(
name|columnType
argument_list|)
return|;
block|}
block|}
empty_stmt|;
annotation|@
name|Override
specifier|public
name|AggregationBuffer
name|getNewAggregationBuffer
parameter_list|()
throws|throws
name|HiveException
block|{
name|BinaryStatsAgg
name|result
init|=
operator|new
name|BinaryStatsAgg
argument_list|()
decl_stmt|;
name|reset
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|BinaryStatsAgg
name|myagg
init|=
operator|(
name|BinaryStatsAgg
operator|)
name|agg
decl_stmt|;
name|myagg
operator|.
name|columnType
operator|=
operator|new
name|String
argument_list|(
literal|"Binary"
argument_list|)
expr_stmt|;
name|myagg
operator|.
name|maxLength
operator|=
literal|0
expr_stmt|;
name|myagg
operator|.
name|sumLength
operator|=
literal|0
expr_stmt|;
name|myagg
operator|.
name|count
operator|=
literal|0
expr_stmt|;
name|myagg
operator|.
name|countNulls
operator|=
literal|0
expr_stmt|;
block|}
name|boolean
name|warned
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|p
init|=
name|parameters
index|[
literal|0
index|]
decl_stmt|;
name|BinaryStatsAgg
name|myagg
init|=
operator|(
name|BinaryStatsAgg
operator|)
name|agg
decl_stmt|;
name|boolean
name|emptyTable
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|parameters
index|[
literal|1
index|]
operator|==
literal|null
condition|)
block|{
name|emptyTable
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|emptyTable
condition|)
block|{
comment|// Update null counter if a null value is seen
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|myagg
operator|.
name|countNulls
operator|++
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|BytesWritable
name|v
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getBinary
argument_list|(
name|p
argument_list|,
name|inputOI
argument_list|)
decl_stmt|;
comment|// Update max length if new length is greater than the ones seen so far
name|int
name|len
init|=
name|v
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|>
name|myagg
operator|.
name|maxLength
condition|)
block|{
name|myagg
operator|.
name|maxLength
operator|=
name|len
expr_stmt|;
block|}
comment|// Update sum length with the new length
name|myagg
operator|.
name|sumLength
operator|+=
name|len
expr_stmt|;
comment|// Increment count of values seen so far
name|myagg
operator|.
name|count
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|warned
condition|)
block|{
name|warned
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" ignoring similar exceptions."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminatePartial
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|BinaryStatsAgg
name|myagg
init|=
operator|(
name|BinaryStatsAgg
operator|)
name|agg
decl_stmt|;
comment|// Serialize AggBuffer
operator|(
operator|(
name|Text
operator|)
name|partialResult
index|[
literal|0
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|columnType
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|partialResult
index|[
literal|1
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|maxLength
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|partialResult
index|[
literal|2
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|sumLength
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|partialResult
index|[
literal|3
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|count
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|partialResult
index|[
literal|4
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|countNulls
argument_list|)
expr_stmt|;
return|return
name|partialResult
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|merge
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
name|partial
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|partial
operator|!=
literal|null
condition|)
block|{
name|BinaryStatsAgg
name|myagg
init|=
operator|(
name|BinaryStatsAgg
operator|)
name|agg
decl_stmt|;
comment|// Update maxLength if length is greater than the largest value seen so far
name|Object
name|partialValue
init|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|maxLengthField
argument_list|)
decl_stmt|;
if|if
condition|(
name|myagg
operator|.
name|maxLength
operator|<
name|maxLengthFieldOI
operator|.
name|get
argument_list|(
name|partialValue
argument_list|)
condition|)
block|{
name|myagg
operator|.
name|maxLength
operator|=
name|maxLengthFieldOI
operator|.
name|get
argument_list|(
name|partialValue
argument_list|)
expr_stmt|;
block|}
comment|// Update sum of the length of the values seen so far
name|partialValue
operator|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|sumLengthField
argument_list|)
expr_stmt|;
name|myagg
operator|.
name|sumLength
operator|+=
name|sumLengthFieldOI
operator|.
name|get
argument_list|(
name|partialValue
argument_list|)
expr_stmt|;
comment|// Update the count of the number of values seen so far
name|partialValue
operator|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|countField
argument_list|)
expr_stmt|;
name|myagg
operator|.
name|count
operator|+=
name|countFieldOI
operator|.
name|get
argument_list|(
name|partialValue
argument_list|)
expr_stmt|;
comment|// Update the null counter
name|partialValue
operator|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|partial
argument_list|,
name|countNullsField
argument_list|)
expr_stmt|;
name|myagg
operator|.
name|countNulls
operator|+=
name|countNullsFieldOI
operator|.
name|get
argument_list|(
name|partialValue
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|BinaryStatsAgg
name|myagg
init|=
operator|(
name|BinaryStatsAgg
operator|)
name|agg
decl_stmt|;
name|double
name|avgLength
init|=
literal|0.0
decl_stmt|;
name|long
name|count
init|=
name|myagg
operator|.
name|count
operator|+
name|myagg
operator|.
name|countNulls
decl_stmt|;
if|if
condition|(
name|count
operator|!=
literal|0
condition|)
block|{
name|avgLength
operator|=
call|(
name|double
call|)
argument_list|(
name|myagg
operator|.
name|sumLength
operator|/
operator|(
literal|1.0
operator|*
operator|(
name|myagg
operator|.
name|count
operator|+
name|myagg
operator|.
name|countNulls
operator|)
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// Serialize the result struct
operator|(
operator|(
name|Text
operator|)
name|result
index|[
literal|0
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|columnType
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|result
index|[
literal|1
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|maxLength
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DoubleWritable
operator|)
name|result
index|[
literal|2
index|]
operator|)
operator|.
name|set
argument_list|(
name|avgLength
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongWritable
operator|)
name|result
index|[
literal|3
index|]
operator|)
operator|.
name|set
argument_list|(
name|myagg
operator|.
name|countNulls
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
block|}
end_class

end_unit

