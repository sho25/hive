begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|function
operator|.
name|drop
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Operation process of dropping a function.  */
end_comment

begin_class
specifier|public
class|class
name|DropFunctionOperation
extends|extends
name|DDLOperation
argument_list|<
name|DropFunctionDesc
argument_list|>
block|{
specifier|public
name|DropFunctionOperation
parameter_list|(
name|DDLOperationContext
name|context
parameter_list|,
name|DropFunctionDesc
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|()
throws|throws
name|HiveException
block|{
if|if
condition|(
name|desc
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
return|return
name|dropTemporaryFunction
argument_list|()
return|;
block|}
else|else
block|{
try|try
block|{
return|return
name|dropPermanentFunction
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|context
operator|.
name|getTask
argument_list|()
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to drop function"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
block|}
specifier|private
name|int
name|dropTemporaryFunction
parameter_list|()
block|{
try|try
block|{
name|FunctionRegistry
operator|.
name|unregisterTemporaryUDF
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"drop function: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
comment|// todo authorization
specifier|private
name|int
name|dropPermanentFunction
parameter_list|()
throws|throws
name|HiveException
block|{
name|String
index|[]
name|qualifiedNameParts
init|=
name|FunctionUtils
operator|.
name|getQualifiedFunctionNameParts
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|dbName
init|=
name|qualifiedNameParts
index|[
literal|0
index|]
decl_stmt|;
name|String
name|functionName
init|=
name|qualifiedNameParts
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|skipIfNewerThenUpdate
argument_list|(
name|dbName
argument_list|,
name|functionName
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
try|try
block|{
name|String
name|registeredName
init|=
name|FunctionUtils
operator|.
name|qualifyFunctionName
argument_list|(
name|functionName
argument_list|,
name|dbName
argument_list|)
decl_stmt|;
name|FunctionRegistry
operator|.
name|unregisterPermanentFunction
argument_list|(
name|registeredName
argument_list|)
expr_stmt|;
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|dropFunction
argument_list|(
name|dbName
argument_list|,
name|functionName
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// For repl load flow, function may not exist for first incremental phase. So, just return success.
if|if
condition|(
name|desc
operator|.
name|getReplicationSpec
argument_list|()
operator|.
name|isInReplicationScope
argument_list|()
operator|&&
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NoSuchObjectException
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Drop function is idempotent as function: "
operator|+
name|desc
operator|.
name|getName
argument_list|()
operator|+
literal|" doesn't exist."
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"drop function: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|context
operator|.
name|getConsole
argument_list|()
operator|.
name|printError
argument_list|(
literal|"FAILED: error during drop function: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
specifier|private
name|boolean
name|skipIfNewerThenUpdate
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|functionName
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|desc
operator|.
name|getReplicationSpec
argument_list|()
operator|.
name|isInReplicationScope
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dbProps
init|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|getParameters
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|desc
operator|.
name|getReplicationSpec
argument_list|()
operator|.
name|allowEventReplacementInto
argument_list|(
name|dbProps
argument_list|)
condition|)
block|{
comment|// If the database is newer than the drop event, then noop it.
name|LOG
operator|.
name|debug
argument_list|(
literal|"FunctionTask: Drop Function {} is skipped as database {} is newer than update"
argument_list|,
name|functionName
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

