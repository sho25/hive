begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepProgram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepProgramBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepRelVertex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveRelFactories
import|;
end_import

begin_comment
comment|/**  * Rule that triggers the field trimmer on the root of a plan.  */
end_comment

begin_class
specifier|public
class|class
name|HiveFieldTrimmerRule
extends|extends
name|RelOptRule
block|{
specifier|private
specifier|static
specifier|final
name|HepProgram
name|PROGRAM
init|=
operator|new
name|HepProgramBuilder
argument_list|()
operator|.
name|addRuleInstance
argument_list|(
name|HiveHepExtractRelNodeRule
operator|.
name|INSTANCE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|fetchStats
decl_stmt|;
specifier|private
name|boolean
name|triggered
decl_stmt|;
specifier|public
name|HiveFieldTrimmerRule
parameter_list|(
name|boolean
name|fetchStats
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|RelNode
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
name|HiveRelFactories
operator|.
name|HIVE_BUILDER
argument_list|,
literal|"HiveFieldTrimmerRule"
argument_list|)
expr_stmt|;
name|this
operator|.
name|fetchStats
operator|=
name|fetchStats
expr_stmt|;
name|triggered
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
if|if
condition|(
name|triggered
condition|)
block|{
comment|// Bail out
return|return;
block|}
name|RelNode
name|node
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|HepRelVertex
name|root
init|=
operator|(
name|HepRelVertex
operator|)
name|call
operator|.
name|getPlanner
argument_list|()
operator|.
name|getRoot
argument_list|()
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|getCurrentRel
argument_list|()
operator|!=
name|node
condition|)
block|{
comment|// Bail out
return|return;
block|}
comment|// The node is the root, release the kraken!
specifier|final
name|HepPlanner
name|tmpPlanner
init|=
operator|new
name|HepPlanner
argument_list|(
name|PROGRAM
argument_list|)
decl_stmt|;
name|tmpPlanner
operator|.
name|setRoot
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|node
operator|=
name|tmpPlanner
operator|.
name|findBestExp
argument_list|()
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|HiveRelFieldTrimmer
operator|.
name|get
argument_list|(
name|fetchStats
argument_list|)
operator|.
name|trim
argument_list|(
name|call
operator|.
name|builder
argument_list|()
argument_list|,
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|triggered
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * The goal of this rule is to extract the RelNode from the    * HepRelVertex node so the trimmer can be applied correctly.    */
specifier|private
specifier|static
class|class
name|HiveHepExtractRelNodeRule
extends|extends
name|RelOptRule
block|{
specifier|private
specifier|static
specifier|final
name|HiveHepExtractRelNodeRule
name|INSTANCE
init|=
operator|new
name|HiveHepExtractRelNodeRule
argument_list|()
decl_stmt|;
specifier|private
name|HiveHepExtractRelNodeRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|HepRelVertex
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|HepRelVertex
name|rel
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|rel
operator|.
name|getCurrentRel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

