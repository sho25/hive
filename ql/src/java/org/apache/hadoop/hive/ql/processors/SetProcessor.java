begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
operator|.
name|SERIALIZATION_NULL_FORMAT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|MetadataTypedColumnsetSerDe
operator|.
name|defaultNullString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|SystemVariables
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveVariableSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|VariableSubstitution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * SetProcessor.  *  */
end_comment

begin_class
specifier|public
class|class
name|SetProcessor
implements|implements
name|CommandProcessor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SetProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|prefix
init|=
literal|"set: "
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|removedConfigs
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"hive.mapred.supports.subdirectories"
argument_list|,
literal|"hive.enforce.sorting"
argument_list|,
literal|"hive.enforce.bucketing"
argument_list|,
literal|"hive.outerjoin.supports.filters"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|getBoolean
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
literal|"on"
argument_list|)
operator|||
name|value
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
literal|"off"
argument_list|)
operator|||
name|value
operator|.
name|equals
argument_list|(
literal|"false"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|prefix
operator|+
literal|"'"
operator|+
name|value
operator|+
literal|"' is not a boolean"
argument_list|)
throw|;
block|}
specifier|private
name|void
name|dumpOptions
parameter_list|(
name|Properties
name|p
parameter_list|)
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sortedMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|sortedMap
operator|.
name|put
argument_list|(
literal|"silent"
argument_list|,
operator|(
name|ss
operator|.
name|getIsSilent
argument_list|()
condition|?
literal|"on"
else|:
literal|"off"
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|one
range|:
name|p
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|oneProp
init|=
operator|(
name|String
operator|)
name|one
decl_stmt|;
name|String
name|oneValue
init|=
name|p
operator|.
name|getProperty
argument_list|(
name|oneProp
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getConf
argument_list|()
operator|.
name|isHiddenConfig
argument_list|(
name|oneProp
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|sortedMap
operator|.
name|put
argument_list|(
name|oneProp
argument_list|,
name|oneValue
argument_list|)
expr_stmt|;
block|}
comment|// Inserting hive variables
for|for
control|(
name|String
name|s
range|:
name|ss
operator|.
name|getHiveVariables
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|sortedMap
operator|.
name|put
argument_list|(
name|HIVEVAR_PREFIX
operator|+
name|s
argument_list|,
name|ss
operator|.
name|getHiveVariables
argument_list|()
operator|.
name|get
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entries
range|:
name|sortedMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|entries
operator|.
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|entries
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|mapToSortedMap
argument_list|(
name|System
operator|.
name|getenv
argument_list|()
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|ENV_PREFIX
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|propertiesToSortedMap
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|SYSTEM_PREFIX
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|dumpOption
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getConf
argument_list|()
operator|.
name|isHiddenConfig
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
operator|+
literal|" is a hidden config"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ss
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
operator|+
literal|"="
operator|+
name|ss
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ss
operator|.
name|getHiveVariables
argument_list|()
operator|.
name|containsKey
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
operator|+
literal|"="
operator|+
name|ss
operator|.
name|getHiveVariables
argument_list|()
operator|.
name|get
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
operator|+
literal|" is undefined"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|()
block|{   }
specifier|public
name|CommandProcessorResponse
name|executeSetVariable
parameter_list|(
name|String
name|varname
parameter_list|,
name|String
name|varvalue
parameter_list|)
block|{
try|try
block|{
return|return
name|setVariable
argument_list|(
name|varname
argument_list|,
name|varvalue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|1
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"42000"
argument_list|,
name|e
operator|instanceof
name|IllegalArgumentException
condition|?
literal|null
else|:
name|e
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|CommandProcessorResponse
name|setVariable
parameter_list|(
name|String
name|varname
parameter_list|,
name|String
name|varvalue
parameter_list|)
throws|throws
name|Exception
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|varvalue
operator|.
name|contains
argument_list|(
literal|"\n"
argument_list|)
condition|)
block|{
name|ss
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Warning: Value had a \\n character in it."
argument_list|)
expr_stmt|;
block|}
name|varname
operator|=
name|varname
operator|.
name|trim
argument_list|()
expr_stmt|;
name|String
name|nonErrorMessage
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|varname
operator|.
name|startsWith
argument_list|(
name|ENV_PREFIX
argument_list|)
condition|)
block|{
name|ss
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"env:* variables can not be set."
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|1
argument_list|)
return|;
comment|// Should we propagate the error message properly?
block|}
elseif|else
if|if
condition|(
name|varname
operator|.
name|startsWith
argument_list|(
name|SYSTEM_PREFIX
argument_list|)
condition|)
block|{
name|String
name|propName
init|=
name|varname
operator|.
name|substring
argument_list|(
name|SYSTEM_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|propName
argument_list|,
operator|new
name|VariableSubstitution
argument_list|(
operator|new
name|HiveVariableSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHiveVariable
parameter_list|()
block|{
return|return
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveVariables
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|substitute
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
argument_list|,
name|varvalue
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|varname
operator|.
name|startsWith
argument_list|(
name|HIVECONF_PREFIX
argument_list|)
condition|)
block|{
name|String
name|propName
init|=
name|varname
operator|.
name|substring
argument_list|(
name|HIVECONF_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|nonErrorMessage
operator|=
name|setConf
argument_list|(
name|varname
argument_list|,
name|propName
argument_list|,
name|varvalue
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|varname
operator|.
name|startsWith
argument_list|(
name|HIVEVAR_PREFIX
argument_list|)
condition|)
block|{
name|String
name|propName
init|=
name|varname
operator|.
name|substring
argument_list|(
name|HIVEVAR_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|ss
operator|.
name|getHiveVariables
argument_list|()
operator|.
name|put
argument_list|(
name|propName
argument_list|,
operator|new
name|VariableSubstitution
argument_list|(
operator|new
name|HiveVariableSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHiveVariable
parameter_list|()
block|{
return|return
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveVariables
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|substitute
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
argument_list|,
name|varvalue
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|varname
operator|.
name|startsWith
argument_list|(
name|METACONF_PREFIX
argument_list|)
condition|)
block|{
name|String
name|propName
init|=
name|varname
operator|.
name|substring
argument_list|(
name|METACONF_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|Hive
name|hive
init|=
name|Hive
operator|.
name|get
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|hive
operator|.
name|setMetaConf
argument_list|(
name|propName
argument_list|,
operator|new
name|VariableSubstitution
argument_list|(
operator|new
name|HiveVariableSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHiveVariable
parameter_list|()
block|{
return|return
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveVariables
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|substitute
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
argument_list|,
name|varvalue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nonErrorMessage
operator|=
name|setConf
argument_list|(
name|varname
argument_list|,
name|varname
argument_list|,
name|varvalue
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|varname
operator|.
name|equals
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SESSION_HISTORY_ENABLED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|updateHistory
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|varvalue
argument_list|)
argument_list|,
name|ss
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|nonErrorMessage
operator|==
literal|null
condition|?
operator|new
name|CommandProcessorResponse
argument_list|(
literal|0
argument_list|)
else|:
operator|new
name|CommandProcessorResponse
argument_list|(
literal|0
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|nonErrorMessage
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @return A console message that is not strong enough to fail the command (e.g. deprecation).    */
specifier|private
specifier|static
name|String
name|setConf
parameter_list|(
name|String
name|varname
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|varvalue
parameter_list|,
name|boolean
name|register
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
name|HiveConf
name|conf
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|String
name|value
init|=
operator|new
name|VariableSubstitution
argument_list|(
operator|new
name|HiveVariableSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHiveVariable
parameter_list|()
block|{
return|return
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveVariables
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|substitute
argument_list|(
name|conf
argument_list|,
name|varvalue
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVECONFVALIDATION
argument_list|)
condition|)
block|{
name|HiveConf
operator|.
name|ConfVars
name|confVars
init|=
name|HiveConf
operator|.
name|getConfVars
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|confVars
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|confVars
operator|.
name|isType
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"'SET "
argument_list|)
operator|.
name|append
argument_list|(
name|varname
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|varvalue
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"' FAILED because "
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
literal|" expects "
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|confVars
operator|.
name|typeString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" type value."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|fail
init|=
name|confVars
operator|.
name|validate
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|fail
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"'SET "
argument_list|)
operator|.
name|append
argument_list|(
name|varname
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|varvalue
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"' FAILED in validation : "
argument_list|)
operator|.
name|append
argument_list|(
name|fail
argument_list|)
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|removedConfigs
operator|.
name|contains
argument_list|(
name|key
argument_list|)
operator|&&
name|key
operator|.
name|startsWith
argument_list|(
literal|"hive."
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"hive configuration "
operator|+
name|key
operator|+
literal|" does not exists."
argument_list|)
throw|;
block|}
block|}
name|conf
operator|.
name|verifyAndSet
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
operator|.
name|varname
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
literal|"spark"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|closeSparkSession
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"mr"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|result
operator|=
name|HiveConf
operator|.
name|generateMrDeprecationWarning
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|register
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getOverriddenConfigurations
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|propertiesToSortedMap
parameter_list|(
name|Properties
name|p
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sortedPropMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|p
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sortedPropMap
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sortedPropMap
return|;
block|}
specifier|private
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapToSortedMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sortedEnvMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|sortedEnvMap
operator|.
name|putAll
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|sortedEnvMap
return|;
block|}
specifier|private
name|CommandProcessorResponse
name|getVariable
parameter_list|(
name|String
name|varname
parameter_list|)
throws|throws
name|Exception
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|varname
operator|.
name|equals
argument_list|(
literal|"silent"
argument_list|)
condition|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"silent"
operator|+
literal|"="
operator|+
name|ss
operator|.
name|getIsSilent
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|createProcessorSuccessResponse
argument_list|()
return|;
block|}
if|if
condition|(
name|varname
operator|.
name|startsWith
argument_list|(
name|SYSTEM_PREFIX
argument_list|)
condition|)
block|{
name|String
name|propName
init|=
name|varname
operator|.
name|substring
argument_list|(
name|SYSTEM_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|SYSTEM_PREFIX
operator|+
name|propName
operator|+
literal|"="
operator|+
name|result
argument_list|)
expr_stmt|;
return|return
name|createProcessorSuccessResponse
argument_list|()
return|;
block|}
else|else
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|propName
operator|+
literal|" is undefined as a system property"
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|varname
operator|.
name|indexOf
argument_list|(
name|ENV_PREFIX
argument_list|)
operator|==
literal|0
condition|)
block|{
name|String
name|var
init|=
name|varname
operator|.
name|substring
argument_list|(
name|ENV_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|System
operator|.
name|getenv
argument_list|(
name|var
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|ENV_PREFIX
operator|+
name|var
operator|+
literal|"="
operator|+
name|System
operator|.
name|getenv
argument_list|(
name|var
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|createProcessorSuccessResponse
argument_list|()
return|;
block|}
else|else
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|varname
operator|+
literal|" is undefined as an environmental variable"
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|varname
operator|.
name|indexOf
argument_list|(
name|HIVECONF_PREFIX
argument_list|)
operator|==
literal|0
condition|)
block|{
name|String
name|var
init|=
name|varname
operator|.
name|substring
argument_list|(
name|HIVECONF_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getConf
argument_list|()
operator|.
name|isHiddenConfig
argument_list|(
name|var
argument_list|)
condition|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|HIVECONF_PREFIX
operator|+
name|var
operator|+
literal|" is a hidden config"
argument_list|)
expr_stmt|;
return|return
name|createProcessorSuccessResponse
argument_list|()
return|;
block|}
if|if
condition|(
name|ss
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|var
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|HIVECONF_PREFIX
operator|+
name|var
operator|+
literal|"="
operator|+
name|ss
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|var
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|createProcessorSuccessResponse
argument_list|()
return|;
block|}
else|else
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|varname
operator|+
literal|" is undefined as a hive configuration variable"
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|varname
operator|.
name|indexOf
argument_list|(
name|HIVEVAR_PREFIX
argument_list|)
operator|==
literal|0
condition|)
block|{
name|String
name|var
init|=
name|varname
operator|.
name|substring
argument_list|(
name|HIVEVAR_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getHiveVariables
argument_list|()
operator|.
name|get
argument_list|(
name|var
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|HIVEVAR_PREFIX
operator|+
name|var
operator|+
literal|"="
operator|+
name|ss
operator|.
name|getHiveVariables
argument_list|()
operator|.
name|get
argument_list|(
name|var
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|createProcessorSuccessResponse
argument_list|()
return|;
block|}
else|else
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|varname
operator|+
literal|" is undefined as a hive variable"
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|varname
operator|.
name|indexOf
argument_list|(
name|METACONF_PREFIX
argument_list|)
operator|==
literal|0
condition|)
block|{
name|String
name|var
init|=
name|varname
operator|.
name|substring
argument_list|(
name|METACONF_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|Hive
name|hive
init|=
name|Hive
operator|.
name|get
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|hive
operator|.
name|getMetaConf
argument_list|(
name|var
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|METACONF_PREFIX
operator|+
name|var
operator|+
literal|"="
operator|+
name|value
argument_list|)
expr_stmt|;
return|return
name|createProcessorSuccessResponse
argument_list|()
return|;
block|}
else|else
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|varname
operator|+
literal|" is undefined as a hive meta variable"
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|dumpOption
argument_list|(
name|varname
argument_list|)
expr_stmt|;
return|return
name|createProcessorSuccessResponse
argument_list|()
return|;
block|}
block|}
specifier|private
name|CommandProcessorResponse
name|createProcessorSuccessResponse
parameter_list|()
block|{
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|getSchema
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CommandProcessorResponse
name|run
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|nwcmd
init|=
name|command
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|nwcmd
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|dumpOptions
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
operator|.
name|getChangedProperties
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|createProcessorSuccessResponse
argument_list|()
return|;
block|}
if|if
condition|(
name|nwcmd
operator|.
name|equals
argument_list|(
literal|"-v"
argument_list|)
condition|)
block|{
name|Properties
name|properties
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getConf
argument_list|()
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
argument_list|)
operator|.
name|equals
argument_list|(
literal|"tez"
argument_list|)
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
decl_stmt|;
try|try
block|{
name|clazz
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.tez.dag.api.TezConfiguration"
argument_list|)
expr_stmt|;
name|Configuration
name|tezConf
init|=
operator|(
name|Configuration
operator|)
name|clazz
operator|.
name|getConstructor
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|properties
operator|=
name|HiveConf
operator|.
name|getProperties
argument_list|(
name|tezConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|1
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"42000"
argument_list|,
name|e
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|properties
operator|=
name|ss
operator|.
name|getConf
argument_list|()
operator|.
name|getAllProperties
argument_list|()
expr_stmt|;
block|}
name|dumpOptions
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
name|createProcessorSuccessResponse
argument_list|()
return|;
block|}
name|String
index|[]
name|part
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|int
name|eqIndex
init|=
name|nwcmd
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|nwcmd
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
if|if
condition|(
name|eqIndex
operator|==
name|nwcmd
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
comment|//x=
name|part
index|[
literal|0
index|]
operator|=
name|nwcmd
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|nwcmd
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|part
index|[
literal|1
index|]
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
comment|//x=y
name|part
index|[
literal|0
index|]
operator|=
name|nwcmd
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|eqIndex
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|part
index|[
literal|1
index|]
operator|=
name|nwcmd
operator|.
name|substring
argument_list|(
name|eqIndex
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|part
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"silent"
argument_list|)
condition|)
block|{
name|ss
operator|.
name|setIsSilent
argument_list|(
name|getBoolean
argument_list|(
name|part
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
name|executeSetVariable
argument_list|(
name|part
index|[
literal|0
index|]
argument_list|,
name|part
index|[
literal|1
index|]
argument_list|)
return|;
block|}
try|try
block|{
return|return
name|getVariable
argument_list|(
name|nwcmd
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|1
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"42000"
argument_list|,
name|e
argument_list|)
return|;
block|}
block|}
comment|// create a Schema object containing the give column
specifier|private
name|Schema
name|getSchema
parameter_list|()
block|{
name|Schema
name|sch
init|=
operator|new
name|Schema
argument_list|()
decl_stmt|;
name|FieldSchema
name|tmpFieldSchema
init|=
operator|new
name|FieldSchema
argument_list|()
decl_stmt|;
name|tmpFieldSchema
operator|.
name|setName
argument_list|(
name|SET_COLUMN_NAME
argument_list|)
expr_stmt|;
name|tmpFieldSchema
operator|.
name|setType
argument_list|(
name|STRING_TYPE_NAME
argument_list|)
expr_stmt|;
name|sch
operator|.
name|putToProperties
argument_list|(
name|SERIALIZATION_NULL_FORMAT
argument_list|,
name|defaultNullString
argument_list|)
expr_stmt|;
name|sch
operator|.
name|addToFieldSchemas
argument_list|(
name|tmpFieldSchema
argument_list|)
expr_stmt|;
return|return
name|sch
return|;
block|}
block|}
end_class

end_unit

