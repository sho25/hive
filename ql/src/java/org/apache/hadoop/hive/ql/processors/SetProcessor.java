begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|VariableSubstitution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_comment
comment|/**  * SetProcessor.  *  */
end_comment

begin_class
specifier|public
class|class
name|SetProcessor
implements|implements
name|CommandProcessor
block|{
specifier|private
specifier|static
name|String
name|prefix
init|=
literal|"set: "
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ENV_PREFIX
init|=
literal|"env:"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SYSTEM_PREFIX
init|=
literal|"system:"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HIVECONF_PREFIX
init|=
literal|"hiveconf:"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HIVEVAR_PREFIX
init|=
literal|"hivevar:"
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|getBoolean
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
literal|"on"
argument_list|)
operator|||
name|value
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
literal|"off"
argument_list|)
operator|||
name|value
operator|.
name|equals
argument_list|(
literal|"false"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|prefix
operator|+
literal|"'"
operator|+
name|value
operator|+
literal|"' is not a boolean"
argument_list|)
throw|;
block|}
specifier|private
name|void
name|dumpOptions
parameter_list|(
name|Properties
name|p
parameter_list|)
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sortedMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|sortedMap
operator|.
name|put
argument_list|(
literal|"silent"
argument_list|,
operator|(
name|ss
operator|.
name|getIsSilent
argument_list|()
condition|?
literal|"on"
else|:
literal|"off"
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|one
range|:
name|p
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|oneProp
init|=
operator|(
name|String
operator|)
name|one
decl_stmt|;
name|String
name|oneValue
init|=
name|p
operator|.
name|getProperty
argument_list|(
name|oneProp
argument_list|)
decl_stmt|;
name|sortedMap
operator|.
name|put
argument_list|(
name|oneProp
argument_list|,
name|oneValue
argument_list|)
expr_stmt|;
block|}
comment|// Inserting hive variables
for|for
control|(
name|String
name|s
range|:
name|ss
operator|.
name|getHiveVariables
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|sortedMap
operator|.
name|put
argument_list|(
name|SetProcessor
operator|.
name|HIVEVAR_PREFIX
operator|+
name|s
argument_list|,
name|ss
operator|.
name|getHiveVariables
argument_list|()
operator|.
name|get
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entries
range|:
name|sortedMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|entries
operator|.
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|entries
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|mapToSortedMap
argument_list|(
name|System
operator|.
name|getenv
argument_list|()
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|ENV_PREFIX
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|propertiesToSortedMap
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|SYSTEM_PREFIX
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|dumpOption
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
operator|+
literal|"="
operator|+
name|ss
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ss
operator|.
name|getHiveVariables
argument_list|()
operator|.
name|containsKey
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
operator|+
literal|"="
operator|+
name|ss
operator|.
name|getHiveVariables
argument_list|()
operator|.
name|get
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
operator|+
literal|" is undefined"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|init
parameter_list|()
block|{   }
specifier|private
name|CommandProcessorResponse
name|setVariable
parameter_list|(
name|String
name|varname
parameter_list|,
name|String
name|varvalue
parameter_list|)
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|varname
operator|.
name|startsWith
argument_list|(
name|SetProcessor
operator|.
name|ENV_PREFIX
argument_list|)
condition|)
block|{
name|ss
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"env:* variables can not be set."
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|1
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|varname
operator|.
name|startsWith
argument_list|(
name|SetProcessor
operator|.
name|SYSTEM_PREFIX
argument_list|)
condition|)
block|{
name|String
name|propName
init|=
name|varname
operator|.
name|substring
argument_list|(
name|SetProcessor
operator|.
name|SYSTEM_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|propName
argument_list|,
operator|new
name|VariableSubstitution
argument_list|()
operator|.
name|substitute
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
argument_list|,
name|varvalue
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|0
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|varname
operator|.
name|startsWith
argument_list|(
name|SetProcessor
operator|.
name|HIVECONF_PREFIX
argument_list|)
condition|)
block|{
name|String
name|propName
init|=
name|varname
operator|.
name|substring
argument_list|(
name|SetProcessor
operator|.
name|HIVECONF_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|ss
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|propName
argument_list|,
operator|new
name|VariableSubstitution
argument_list|()
operator|.
name|substitute
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
argument_list|,
name|varvalue
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|0
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|varname
operator|.
name|startsWith
argument_list|(
name|SetProcessor
operator|.
name|HIVEVAR_PREFIX
argument_list|)
condition|)
block|{
name|String
name|propName
init|=
name|varname
operator|.
name|substring
argument_list|(
name|SetProcessor
operator|.
name|HIVEVAR_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|ss
operator|.
name|getHiveVariables
argument_list|()
operator|.
name|put
argument_list|(
name|propName
argument_list|,
operator|new
name|VariableSubstitution
argument_list|()
operator|.
name|substitute
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
argument_list|,
name|varvalue
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
name|ss
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|varname
argument_list|,
operator|new
name|VariableSubstitution
argument_list|()
operator|.
name|substitute
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
argument_list|,
name|varvalue
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
specifier|private
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|propertiesToSortedMap
parameter_list|(
name|Properties
name|p
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sortedPropMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sortedPropMap
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sortedPropMap
return|;
block|}
specifier|private
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapToSortedMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sortedEnvMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|sortedEnvMap
operator|.
name|putAll
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|sortedEnvMap
return|;
block|}
specifier|private
name|CommandProcessorResponse
name|getVariable
parameter_list|(
name|String
name|varname
parameter_list|)
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|varname
operator|.
name|equals
argument_list|(
literal|"silent"
argument_list|)
condition|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"silent"
operator|+
literal|"="
operator|+
name|ss
operator|.
name|getIsSilent
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|0
argument_list|)
return|;
block|}
if|if
condition|(
name|varname
operator|.
name|startsWith
argument_list|(
name|SetProcessor
operator|.
name|SYSTEM_PREFIX
argument_list|)
condition|)
block|{
name|String
name|propName
init|=
name|varname
operator|.
name|substring
argument_list|(
name|SetProcessor
operator|.
name|SYSTEM_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|SetProcessor
operator|.
name|SYSTEM_PREFIX
operator|+
name|propName
operator|+
literal|"="
operator|+
name|result
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|propName
operator|+
literal|" is undefined as a system property"
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|varname
operator|.
name|indexOf
argument_list|(
name|SetProcessor
operator|.
name|ENV_PREFIX
argument_list|)
operator|==
literal|0
condition|)
block|{
name|String
name|var
init|=
name|varname
operator|.
name|substring
argument_list|(
name|ENV_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|System
operator|.
name|getenv
argument_list|(
name|var
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|SetProcessor
operator|.
name|ENV_PREFIX
operator|+
name|var
operator|+
literal|"="
operator|+
name|System
operator|.
name|getenv
argument_list|(
name|var
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|varname
operator|+
literal|" is undefined as an environmental variable"
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|varname
operator|.
name|indexOf
argument_list|(
name|SetProcessor
operator|.
name|HIVECONF_PREFIX
argument_list|)
operator|==
literal|0
condition|)
block|{
name|String
name|var
init|=
name|varname
operator|.
name|substring
argument_list|(
name|SetProcessor
operator|.
name|HIVECONF_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|var
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|SetProcessor
operator|.
name|HIVECONF_PREFIX
operator|+
name|var
operator|+
literal|"="
operator|+
name|ss
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|var
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|varname
operator|+
literal|" is undefined as a hive configuration variable"
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|varname
operator|.
name|indexOf
argument_list|(
name|SetProcessor
operator|.
name|HIVEVAR_PREFIX
argument_list|)
operator|==
literal|0
condition|)
block|{
name|String
name|var
init|=
name|varname
operator|.
name|substring
argument_list|(
name|SetProcessor
operator|.
name|HIVEVAR_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getHiveVariables
argument_list|()
operator|.
name|get
argument_list|(
name|var
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|SetProcessor
operator|.
name|HIVEVAR_PREFIX
operator|+
name|var
operator|+
literal|"="
operator|+
name|ss
operator|.
name|getHiveVariables
argument_list|()
operator|.
name|get
argument_list|(
name|var
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
name|ss
operator|.
name|out
operator|.
name|println
argument_list|(
name|varname
operator|+
literal|" is undefined as a hive variable"
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|dumpOption
argument_list|(
name|varname
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
specifier|public
name|CommandProcessorResponse
name|run
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|nwcmd
init|=
name|command
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|nwcmd
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|dumpOptions
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
operator|.
name|getChangedProperties
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|0
argument_list|)
return|;
block|}
if|if
condition|(
name|nwcmd
operator|.
name|equals
argument_list|(
literal|"-v"
argument_list|)
condition|)
block|{
name|dumpOptions
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
operator|.
name|getAllProperties
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|String
index|[]
name|part
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|int
name|eqIndex
init|=
name|nwcmd
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|nwcmd
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
if|if
condition|(
name|eqIndex
operator|==
name|nwcmd
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
comment|//x=
name|part
index|[
literal|0
index|]
operator|=
name|nwcmd
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|nwcmd
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|part
index|[
literal|1
index|]
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
comment|//x=y
name|part
index|[
literal|0
index|]
operator|=
name|nwcmd
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|eqIndex
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|part
index|[
literal|1
index|]
operator|=
name|nwcmd
operator|.
name|substring
argument_list|(
name|eqIndex
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|part
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"silent"
argument_list|)
condition|)
block|{
name|ss
operator|.
name|setIsSilent
argument_list|(
name|getBoolean
argument_list|(
name|part
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
name|setVariable
argument_list|(
name|part
index|[
literal|0
index|]
argument_list|,
name|part
index|[
literal|1
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getVariable
argument_list|(
name|nwcmd
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

