begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|jdbc
operator|.
name|JdbcRules
operator|.
name|JdbcFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|jdbc
operator|.
name|JdbcRules
operator|.
name|JdbcJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|jdbc
operator|.
name|JdbcRules
operator|.
name|JdbcProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleOperand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * JDBCExpandExpressionsRule that rewrites IN clauses over struct operators  * into OR/AND expressions.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|JDBCExpandExpressionsRule
extends|extends
name|RelOptRule
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JDBCExpandExpressionsRule
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|JDBCExpandExpressionsRule
operator|.
name|FilterCondition
name|FILTER_INSTANCE
init|=
operator|new
name|JDBCExpandExpressionsRule
operator|.
name|FilterCondition
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|JDBCExpandExpressionsRule
operator|.
name|JoinCondition
name|JOIN_INSTANCE
init|=
operator|new
name|JDBCExpandExpressionsRule
operator|.
name|JoinCondition
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|JDBCExpandExpressionsRule
operator|.
name|ProjectionExpressions
name|PROJECT_INSTANCE
init|=
operator|new
name|JDBCExpandExpressionsRule
operator|.
name|ProjectionExpressions
argument_list|()
decl_stmt|;
specifier|private
name|JDBCExpandExpressionsRule
parameter_list|(
name|RelOptRuleOperand
name|operand
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|)
expr_stmt|;
block|}
comment|/** Rule adapter to apply the transformation to Filter conditions. */
specifier|private
specifier|static
class|class
name|FilterCondition
extends|extends
name|JDBCExpandExpressionsRule
block|{
specifier|private
name|FilterCondition
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|JdbcFilter
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"JDBCExpandExpressionsRule.FilterCondition has been called"
argument_list|)
expr_stmt|;
specifier|final
name|JdbcFilter
name|filter
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|condition
init|=
name|filter
operator|.
name|getCondition
argument_list|()
decl_stmt|;
name|RexNode
name|newCondition
init|=
name|analyzeRexNode
argument_list|(
name|filter
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
argument_list|,
name|condition
argument_list|)
decl_stmt|;
comment|// If we could not transform anything, we bail out
if|if
condition|(
name|newCondition
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|condition
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|RelNode
name|newNode
init|=
name|filter
operator|.
name|copy
argument_list|(
name|filter
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|filter
operator|.
name|getInput
argument_list|()
argument_list|,
name|newCondition
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Rule adapter to apply the transformation to Join conditions. */
specifier|private
specifier|static
class|class
name|JoinCondition
extends|extends
name|JDBCExpandExpressionsRule
block|{
specifier|private
name|JoinCondition
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|JdbcJoin
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"JDBCExpandExpressionsRule.JoinCondition has been called"
argument_list|)
expr_stmt|;
specifier|final
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|condition
init|=
name|RexUtil
operator|.
name|pullFactors
argument_list|(
name|join
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|)
decl_stmt|;
name|RexNode
name|newCondition
init|=
name|analyzeRexNode
argument_list|(
name|join
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
argument_list|,
name|condition
argument_list|)
decl_stmt|;
comment|// If we could not transform anything, we bail out
if|if
condition|(
name|newCondition
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|condition
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|RelNode
name|newNode
init|=
name|join
operator|.
name|copy
argument_list|(
name|join
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|newCondition
argument_list|,
name|join
operator|.
name|getLeft
argument_list|()
argument_list|,
name|join
operator|.
name|getRight
argument_list|()
argument_list|,
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|,
name|join
operator|.
name|isSemiJoinDone
argument_list|()
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Rule adapter to apply the transformation to Projections. */
specifier|private
specifier|static
class|class
name|ProjectionExpressions
extends|extends
name|JDBCExpandExpressionsRule
block|{
specifier|private
name|ProjectionExpressions
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|JdbcProject
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"JDBCExpandExpressionsRule.ProjectionExpressions has been called"
argument_list|)
expr_stmt|;
specifier|final
name|Project
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|project
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|newProjects
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|oldNode
range|:
name|project
operator|.
name|getProjects
argument_list|()
control|)
block|{
name|RexNode
name|newNode
init|=
name|analyzeRexNode
argument_list|(
name|rexBuilder
argument_list|,
name|oldNode
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newNode
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|oldNode
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
name|newProjects
operator|.
name|add
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newProjects
operator|.
name|add
argument_list|(
name|oldNode
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|changed
condition|)
block|{
return|return;
block|}
name|Project
name|newProject
init|=
name|project
operator|.
name|copy
argument_list|(
name|project
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|project
operator|.
name|getInput
argument_list|()
argument_list|,
name|newProjects
argument_list|,
name|project
operator|.
name|getRowType
argument_list|()
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newProject
argument_list|)
expr_stmt|;
block|}
block|}
name|RexNode
name|analyzeRexNode
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RexNode
name|condition
parameter_list|)
block|{
name|RexTransformIntoOrAndClause
name|transformIntoInClause
init|=
operator|new
name|RexTransformIntoOrAndClause
argument_list|(
name|rexBuilder
argument_list|)
decl_stmt|;
name|RexNode
name|newCondition
init|=
name|transformIntoInClause
operator|.
name|apply
argument_list|(
name|condition
argument_list|)
decl_stmt|;
return|return
name|newCondition
return|;
block|}
comment|/**    * Transforms IN clauses into OR/AND clauses, when possible.    */
specifier|protected
specifier|static
class|class
name|RexTransformIntoOrAndClause
extends|extends
name|RexShuttle
block|{
specifier|private
specifier|final
name|RexBuilder
name|rexBuilder
decl_stmt|;
name|RexTransformIntoOrAndClause
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|)
block|{
name|this
operator|.
name|rexBuilder
operator|=
name|rexBuilder
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitCall
parameter_list|(
name|RexCall
name|inputCall
parameter_list|)
block|{
name|RexNode
name|node
init|=
name|super
operator|.
name|visitCall
argument_list|(
name|inputCall
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|RexCall
condition|)
block|{
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|node
decl_stmt|;
switch|switch
condition|(
name|call
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|IN
case|:
return|return
name|transformIntoOrAndClause
argument_list|(
name|rexBuilder
argument_list|,
name|call
argument_list|)
return|;
default|default:
break|break;
block|}
block|}
return|return
name|node
return|;
block|}
specifier|private
name|RexNode
name|transformIntoOrAndClause
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RexCall
name|expression
parameter_list|)
block|{
assert|assert
name|expression
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|IN
assert|;
if|if
condition|(
name|expression
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKind
argument_list|()
operator|!=
name|SqlKind
operator|.
name|ROW
condition|)
block|{
comment|// Nothing to do, return expression
return|return
name|expression
return|;
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|disjuncts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|expression
operator|.
name|getOperands
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|RexCall
name|columnExpressions
init|=
operator|(
name|RexCall
operator|)
name|expression
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|expression
operator|.
name|getOperands
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|conjuncts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|columnExpressions
operator|.
name|getOperands
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|RexCall
name|valueExpressions
init|=
operator|(
name|RexCall
operator|)
name|expression
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|columnExpressions
operator|.
name|getOperands
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|conjuncts
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|columnExpressions
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|,
name|valueExpressions
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conjuncts
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|disjuncts
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|AND
argument_list|,
name|conjuncts
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|disjuncts
operator|.
name|add
argument_list|(
name|conjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|disjuncts
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|OR
argument_list|,
name|disjuncts
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

