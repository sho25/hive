begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|serde
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|SettableMapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ArrayWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractParquetMapInspector
implements|implements
name|SettableMapObjectInspector
block|{
specifier|protected
specifier|final
name|ObjectInspector
name|keyInspector
decl_stmt|;
specifier|protected
specifier|final
name|ObjectInspector
name|valueInspector
decl_stmt|;
specifier|public
name|AbstractParquetMapInspector
parameter_list|(
specifier|final
name|ObjectInspector
name|keyInspector
parameter_list|,
specifier|final
name|ObjectInspector
name|valueInspector
parameter_list|)
block|{
name|this
operator|.
name|keyInspector
operator|=
name|keyInspector
expr_stmt|;
name|this
operator|.
name|valueInspector
operator|=
name|valueInspector
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
literal|"map<"
operator|+
name|keyInspector
operator|.
name|getTypeName
argument_list|()
operator|+
literal|","
operator|+
name|valueInspector
operator|.
name|getTypeName
argument_list|()
operator|+
literal|">"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Category
name|getCategory
parameter_list|()
block|{
return|return
name|Category
operator|.
name|MAP
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getMapKeyObjectInspector
parameter_list|()
block|{
return|return
name|keyInspector
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getMapValueObjectInspector
parameter_list|()
block|{
return|return
name|valueInspector
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|getMap
parameter_list|(
specifier|final
name|Object
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|data
operator|instanceof
name|ArrayWritable
condition|)
block|{
specifier|final
name|Writable
index|[]
name|mapContainer
init|=
operator|(
operator|(
name|ArrayWritable
operator|)
name|data
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapContainer
operator|==
literal|null
operator|||
name|mapContainer
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Writable
index|[]
name|mapArray
init|=
operator|(
operator|(
name|ArrayWritable
operator|)
name|mapContainer
index|[
literal|0
index|]
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Writable
argument_list|,
name|Writable
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Writable
argument_list|,
name|Writable
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Writable
name|obj
range|:
name|mapArray
control|)
block|{
specifier|final
name|ArrayWritable
name|mapObj
init|=
operator|(
name|ArrayWritable
operator|)
name|obj
decl_stmt|;
specifier|final
name|Writable
index|[]
name|arr
init|=
name|mapObj
operator|.
name|get
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|arr
index|[
literal|0
index|]
argument_list|,
name|arr
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
if|if
condition|(
name|data
operator|instanceof
name|Map
condition|)
block|{
return|return
operator|(
name|Map
operator|)
name|data
return|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot inspect "
operator|+
name|data
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMapSize
parameter_list|(
specifier|final
name|Object
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|data
operator|instanceof
name|ArrayWritable
condition|)
block|{
specifier|final
name|Writable
index|[]
name|mapContainer
init|=
operator|(
operator|(
name|ArrayWritable
operator|)
name|data
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapContainer
operator|==
literal|null
operator|||
name|mapContainer
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
name|ArrayWritable
operator|)
name|mapContainer
index|[
literal|0
index|]
operator|)
operator|.
name|get
argument_list|()
operator|.
name|length
return|;
block|}
block|}
if|if
condition|(
name|data
operator|instanceof
name|Map
condition|)
block|{
return|return
operator|(
operator|(
name|Map
operator|)
name|data
operator|)
operator|.
name|size
argument_list|()
return|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot inspect "
operator|+
name|data
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|create
parameter_list|()
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
return|return
name|m
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|put
parameter_list|(
name|Object
name|map
parameter_list|,
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|(
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|map
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|remove
parameter_list|(
name|Object
name|map
parameter_list|,
name|Object
name|key
parameter_list|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|(
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|map
decl_stmt|;
name|m
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|clear
parameter_list|(
name|Object
name|map
parameter_list|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|(
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|map
decl_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|m
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|keyInspector
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|keyInspector
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|valueInspector
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|valueInspector
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|AbstractParquetMapInspector
name|other
init|=
operator|(
name|AbstractParquetMapInspector
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|keyInspector
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|keyInspector
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|keyInspector
operator|.
name|equals
argument_list|(
name|other
operator|.
name|keyInspector
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|valueInspector
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|valueInspector
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|valueInspector
operator|.
name|equals
argument_list|(
name|other
operator|.
name|valueInspector
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

