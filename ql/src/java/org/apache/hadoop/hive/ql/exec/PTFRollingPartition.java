begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|WindowFunctionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
operator|.
name|ObjectInspectorCopyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_class
specifier|public
class|class
name|PTFRollingPartition
extends|extends
name|PTFPartition
block|{
comment|/*    * num rows whose output is evaluated.    */
name|int
name|numRowsProcessed
decl_stmt|;
comment|/*    * number rows to maintain before nextRowToProcess    */
name|int
name|precedingSpan
decl_stmt|;
comment|/*    * number rows to maintain after nextRowToProcess    */
name|int
name|followingSpan
decl_stmt|;
comment|/*    * number of rows received.    */
name|int
name|numRowsReceived
decl_stmt|;
comment|/*    * State of the Rolling Partition    *     * x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17    * ^                    ^                                     ^    * |                    |                                     |    * |--preceding span--numRowsProcessed---followingSpan --numRowsRecived    *     * a. index x7 : represents the last output row    * b. so preceding span rows before that are still held on for subsequent rows processing.    * c. The #of rows beyond numRowsProcessed = followingSpan    */
comment|/*    * cache of rows; guaranteed to contain precedingSpan rows before    * nextRowToProcess.    */
name|List
argument_list|<
name|Object
argument_list|>
name|currWindow
decl_stmt|;
specifier|protected
name|PTFRollingPartition
parameter_list|(
name|Configuration
name|cfg
parameter_list|,
name|SerDe
name|serDe
parameter_list|,
name|StructObjectInspector
name|inputOI
parameter_list|,
name|StructObjectInspector
name|outputOI
parameter_list|,
name|int
name|precedingSpan
parameter_list|,
name|int
name|succeedingSpan
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
argument_list|(
name|cfg
argument_list|,
name|serDe
argument_list|,
name|inputOI
argument_list|,
name|outputOI
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|precedingSpan
operator|=
name|precedingSpan
expr_stmt|;
name|this
operator|.
name|followingSpan
operator|=
name|succeedingSpan
expr_stmt|;
name|currWindow
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|precedingSpan
operator|+
name|followingSpan
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|HiveException
block|{
name|currWindow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|numRowsProcessed
operator|=
literal|0
expr_stmt|;
name|numRowsReceived
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|Object
name|getAt
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|rangeStart
init|=
name|numRowsReceived
operator|-
name|currWindow
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
name|currWindow
operator|.
name|get
argument_list|(
name|i
operator|-
name|rangeStart
argument_list|)
return|;
block|}
specifier|public
name|void
name|append
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|HiveException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|l
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|o
argument_list|,
name|inputOI
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
decl_stmt|;
name|currWindow
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|numRowsReceived
operator|++
expr_stmt|;
block|}
specifier|public
name|Object
name|nextOutputRow
parameter_list|()
throws|throws
name|HiveException
block|{
name|Object
name|row
init|=
name|getAt
argument_list|(
name|numRowsProcessed
argument_list|)
decl_stmt|;
name|numRowsProcessed
operator|++
expr_stmt|;
if|if
condition|(
name|numRowsProcessed
operator|>
name|precedingSpan
condition|)
block|{
name|currWindow
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|row
return|;
block|}
specifier|public
name|boolean
name|processedAllRows
parameter_list|()
block|{
return|return
name|numRowsProcessed
operator|>=
name|numRowsReceived
return|;
block|}
specifier|public
name|int
name|rowToProcess
parameter_list|(
name|WindowFunctionDef
name|wFn
parameter_list|)
block|{
name|int
name|rowToProcess
init|=
name|numRowsReceived
operator|-
name|wFn
operator|.
name|getWindowFrame
argument_list|()
operator|.
name|getEnd
argument_list|()
operator|.
name|getAmt
argument_list|()
operator|-
literal|1
decl_stmt|;
return|return
name|rowToProcess
operator|>=
literal|0
condition|?
name|rowToProcess
else|:
operator|-
literal|1
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|numRowsReceived
return|;
block|}
specifier|public
name|PTFPartitionIterator
argument_list|<
name|Object
argument_list|>
name|iterator
parameter_list|()
throws|throws
name|HiveException
block|{
return|return
operator|new
name|RollingPItr
argument_list|()
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{   }
class|class
name|RollingPItr
implements|implements
name|PTFPartitionIterator
argument_list|<
name|Object
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|next
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getIndex
parameter_list|()
block|{
return|return
name|PTFRollingPartition
operator|.
name|this
operator|.
name|numRowsProcessed
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|lead
parameter_list|(
name|int
name|amt
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|i
init|=
name|PTFRollingPartition
operator|.
name|this
operator|.
name|numRowsProcessed
operator|+
name|amt
decl_stmt|;
name|i
operator|=
name|i
operator|>=
name|PTFRollingPartition
operator|.
name|this
operator|.
name|numRowsReceived
condition|?
name|PTFRollingPartition
operator|.
name|this
operator|.
name|numRowsReceived
operator|-
literal|1
else|:
name|i
expr_stmt|;
return|return
name|PTFRollingPartition
operator|.
name|this
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|lag
parameter_list|(
name|int
name|amt
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|i
init|=
name|PTFRollingPartition
operator|.
name|this
operator|.
name|numRowsProcessed
operator|-
name|amt
decl_stmt|;
name|int
name|start
init|=
name|PTFRollingPartition
operator|.
name|this
operator|.
name|numRowsReceived
operator|-
name|PTFRollingPartition
operator|.
name|this
operator|.
name|currWindow
operator|.
name|size
argument_list|()
decl_stmt|;
name|i
operator|=
name|i
operator|<
name|start
condition|?
name|start
else|:
name|i
expr_stmt|;
return|return
name|PTFRollingPartition
operator|.
name|this
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|resetToIndex
parameter_list|(
name|int
name|idx
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
name|PTFRollingPartition
operator|.
name|this
operator|.
name|getAt
argument_list|(
name|idx
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PTFPartition
name|getPartition
parameter_list|()
block|{
return|return
name|PTFRollingPartition
operator|.
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|HiveException
block|{     }
block|}
block|}
end_class

end_unit

