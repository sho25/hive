begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|StructColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedBatchUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatchCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RecordIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Implement a RecordReader that stitches together base and delta files to  * support tables and partitions stored in the ACID format. It works by using  * the non-vectorized ACID reader and moving the data into a vectorized row  * batch.  */
end_comment

begin_class
specifier|public
class|class
name|VectorizedOrcAcidRowReader
implements|implements
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|VectorizedRowBatch
argument_list|>
block|{
specifier|private
specifier|final
name|AcidInputFormat
operator|.
name|RowReader
argument_list|<
name|OrcStruct
argument_list|>
name|innerReader
decl_stmt|;
specifier|private
specifier|final
name|RecordIdentifier
name|key
decl_stmt|;
specifier|private
specifier|final
name|OrcStruct
name|value
decl_stmt|;
specifier|private
name|VectorizedRowBatchCtx
name|rbCtx
decl_stmt|;
specifier|private
name|Object
index|[]
name|partitionValues
decl_stmt|;
specifier|private
specifier|final
name|ObjectInspector
name|objectInspector
decl_stmt|;
specifier|private
specifier|final
name|DataOutputBuffer
name|buffer
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|StructColumnVector
name|recordIdColumnVector
decl_stmt|;
specifier|private
specifier|final
name|LongColumnVector
name|transactionColumnVector
decl_stmt|;
specifier|private
specifier|final
name|LongColumnVector
name|bucketColumnVector
decl_stmt|;
specifier|private
specifier|final
name|LongColumnVector
name|rowIdColumnVector
decl_stmt|;
specifier|public
name|VectorizedOrcAcidRowReader
parameter_list|(
name|AcidInputFormat
operator|.
name|RowReader
argument_list|<
name|OrcStruct
argument_list|>
name|inner
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|VectorizedRowBatchCtx
name|vectorizedRowBatchCtx
parameter_list|,
name|FileSplit
name|split
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|innerReader
operator|=
name|inner
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|inner
operator|.
name|createKey
argument_list|()
expr_stmt|;
name|rbCtx
operator|=
name|vectorizedRowBatchCtx
expr_stmt|;
name|int
name|partitionColumnCount
init|=
name|rbCtx
operator|.
name|getPartitionColumnCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|partitionColumnCount
operator|>
literal|0
condition|)
block|{
name|partitionValues
operator|=
operator|new
name|Object
index|[
name|partitionColumnCount
index|]
expr_stmt|;
name|rbCtx
operator|.
name|getPartitionValues
argument_list|(
name|rbCtx
argument_list|,
name|conf
argument_list|,
name|split
argument_list|,
name|partitionValues
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|value
operator|=
name|inner
operator|.
name|createValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|objectInspector
operator|=
name|inner
operator|.
name|getObjectInspector
argument_list|()
expr_stmt|;
name|this
operator|.
name|transactionColumnVector
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|this
operator|.
name|bucketColumnVector
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|this
operator|.
name|rowIdColumnVector
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|this
operator|.
name|recordIdColumnVector
operator|=
operator|new
name|StructColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|transactionColumnVector
argument_list|,
name|bucketColumnVector
argument_list|,
name|rowIdColumnVector
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|NullWritable
name|nullWritable
parameter_list|,
name|VectorizedRowBatch
name|vectorizedRowBatch
parameter_list|)
throws|throws
name|IOException
block|{
name|vectorizedRowBatch
operator|.
name|reset
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|innerReader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|partitionValues
operator|!=
literal|null
condition|)
block|{
name|rbCtx
operator|.
name|addPartitionColsToBatch
argument_list|(
name|vectorizedRowBatch
argument_list|,
name|partitionValues
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|VectorizedBatchUtil
operator|.
name|acidAddRowToBatch
argument_list|(
name|value
argument_list|,
operator|(
name|StructObjectInspector
operator|)
name|objectInspector
argument_list|,
name|vectorizedRowBatch
operator|.
name|size
argument_list|,
name|vectorizedRowBatch
argument_list|,
name|rbCtx
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|addRecordId
argument_list|(
name|vectorizedRowBatch
operator|.
name|size
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|vectorizedRowBatch
operator|.
name|size
operator|++
expr_stmt|;
while|while
condition|(
name|vectorizedRowBatch
operator|.
name|size
operator|<
name|vectorizedRowBatch
operator|.
name|selected
operator|.
name|length
operator|&&
name|innerReader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|acidAddRowToBatch
argument_list|(
name|value
argument_list|,
operator|(
name|StructObjectInspector
operator|)
name|objectInspector
argument_list|,
name|vectorizedRowBatch
operator|.
name|size
argument_list|,
name|vectorizedRowBatch
argument_list|,
name|rbCtx
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|addRecordId
argument_list|(
name|vectorizedRowBatch
operator|.
name|size
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|vectorizedRowBatch
operator|.
name|size
operator|++
expr_stmt|;
block|}
name|rbCtx
operator|.
name|setRecordIdColumnVector
argument_list|(
name|recordIdColumnVector
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"error iterating"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|addRecordId
parameter_list|(
name|int
name|index
parameter_list|,
name|RecordIdentifier
name|key
parameter_list|)
block|{
name|transactionColumnVector
operator|.
name|vector
index|[
name|index
index|]
operator|=
name|key
operator|.
name|getTransactionId
argument_list|()
expr_stmt|;
name|bucketColumnVector
operator|.
name|vector
index|[
name|index
index|]
operator|=
name|key
operator|.
name|getBucketProperty
argument_list|()
expr_stmt|;
name|rowIdColumnVector
operator|.
name|vector
index|[
name|index
index|]
operator|=
name|key
operator|.
name|getRowId
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|NullWritable
name|createKey
parameter_list|()
block|{
return|return
name|NullWritable
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|VectorizedRowBatch
name|createValue
parameter_list|()
block|{
return|return
name|rbCtx
operator|.
name|createVectorizedRowBatch
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|innerReader
operator|.
name|getPos
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|innerReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|innerReader
operator|.
name|getProgress
argument_list|()
return|;
block|}
block|}
end_class

end_unit

