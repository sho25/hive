begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|EnvironmentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|constaint
operator|.
name|AlterTableAddConstraintOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|util
operator|.
name|ReplUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|DDLSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AlterTableDesc
operator|.
name|AlterTableTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_comment
comment|/**  * Operation process of running some alter table command that requires write id.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractAlterTableOperation
extends|extends
name|DDLOperation
block|{
specifier|private
specifier|final
name|AbstractAlterTableDesc
name|desc
decl_stmt|;
specifier|public
name|AbstractAlterTableOperation
parameter_list|(
name|DDLOperationContext
name|context
parameter_list|,
name|AbstractAlterTableDesc
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|desc
operator|=
name|desc
expr_stmt|;
block|}
specifier|protected
name|EnvironmentContext
name|environmentContext
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|()
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|AlterTableUtils
operator|.
name|allowOperationInReplicationScope
argument_list|(
name|context
operator|.
name|getDb
argument_list|()
argument_list|,
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|desc
operator|.
name|getReplicationSpec
argument_list|()
argument_list|)
condition|)
block|{
comment|// no alter, the table is missing either due to drop/rename which follows the alter.
comment|// or the existing table is newer than our update.
name|LOG
operator|.
name|debug
argument_list|(
literal|"DDLTask: Alter Table is skipped as table {} is newer than update"
argument_list|,
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|Table
name|oldTable
init|=
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|getTable
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|getPartitions
argument_list|(
name|oldTable
argument_list|,
name|desc
operator|.
name|getPartitionSpec
argument_list|()
argument_list|,
name|context
argument_list|)
decl_stmt|;
comment|// Don't change the table object returned by the metastore, as we'll mess with it's caches.
name|Table
name|table
init|=
name|oldTable
operator|.
name|copy
argument_list|()
decl_stmt|;
name|environmentContext
operator|=
name|initializeEnvironmentContext
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|partitions
operator|==
literal|null
condition|)
block|{
name|doAlteration
argument_list|(
name|table
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
name|doAlteration
argument_list|(
name|table
argument_list|,
name|partition
argument_list|)
expr_stmt|;
block|}
block|}
name|finalizeAlterTableWithWriteIdOp
argument_list|(
name|table
argument_list|,
name|oldTable
argument_list|,
name|partitions
argument_list|,
name|context
argument_list|,
name|environmentContext
argument_list|,
name|desc
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitions
parameter_list|(
name|Table
name|tbl
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|,
name|DDLOperationContext
name|context
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|partSpec
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|DDLSemanticAnalyzer
operator|.
name|isFullSpec
argument_list|(
name|tbl
argument_list|,
name|partSpec
argument_list|)
condition|)
block|{
name|partitions
operator|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
expr_stmt|;
name|Partition
name|part
init|=
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|getPartition
argument_list|(
name|tbl
argument_list|,
name|partSpec
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
comment|// User provided a fully specified partition spec but it doesn't exist, fail.
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_PARTITION
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|partSpec
operator|.
name|keySet
argument_list|()
argument_list|,
literal|','
argument_list|)
operator|+
literal|" for table "
operator|+
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
throw|;
block|}
name|partitions
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// DDLSemanticAnalyzer has already checked if partial partition specs are allowed,
comment|// thus we should not need to check it here.
name|partitions
operator|=
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|getPartitions
argument_list|(
name|tbl
argument_list|,
name|partSpec
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|partitions
return|;
block|}
specifier|private
name|EnvironmentContext
name|initializeEnvironmentContext
parameter_list|(
name|EnvironmentContext
name|environmentContext
parameter_list|)
block|{
name|EnvironmentContext
name|result
init|=
name|environmentContext
operator|==
literal|null
condition|?
operator|new
name|EnvironmentContext
argument_list|()
else|:
name|environmentContext
decl_stmt|;
comment|// do not need update stats in alter table/partition operations
if|if
condition|(
name|result
operator|.
name|getProperties
argument_list|()
operator|==
literal|null
operator|||
name|result
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|StatsSetupConst
operator|.
name|DO_NOT_UPDATE_STATS
argument_list|)
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|putToProperties
argument_list|(
name|StatsSetupConst
operator|.
name|DO_NOT_UPDATE_STATS
argument_list|,
name|StatsSetupConst
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|protected
specifier|abstract
name|void
name|doAlteration
parameter_list|(
name|Table
name|table
parameter_list|,
name|Partition
name|partition
parameter_list|)
throws|throws
name|HiveException
function_decl|;
specifier|protected
name|StorageDescriptor
name|getStorageDescriptor
parameter_list|(
name|Table
name|tbl
parameter_list|,
name|Partition
name|part
parameter_list|)
block|{
return|return
operator|(
name|part
operator|==
literal|null
condition|?
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
else|:
name|part
operator|.
name|getTPartition
argument_list|()
operator|.
name|getSd
argument_list|()
operator|)
return|;
block|}
specifier|public
name|void
name|finalizeAlterTableWithWriteIdOp
parameter_list|(
name|Table
name|table
parameter_list|,
name|Table
name|oldTable
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|,
name|DDLOperationContext
name|context
parameter_list|,
name|EnvironmentContext
name|environmentContext
parameter_list|,
name|AbstractAlterTableDesc
name|alterTable
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|partitions
operator|==
literal|null
condition|)
block|{
name|updateModifiedParameters
argument_list|(
name|table
operator|.
name|getTTable
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|,
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|checkValidity
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
name|updateModifiedParameters
argument_list|(
name|partition
operator|.
name|getParameters
argument_list|()
argument_list|,
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|environmentContext
operator|.
name|putToProperties
argument_list|(
name|HiveMetaHook
operator|.
name|ALTER_TABLE_OPERATION_TYPE
argument_list|,
name|alterTable
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|partitions
operator|==
literal|null
condition|)
block|{
name|long
name|writeId
init|=
name|alterTable
operator|.
name|getWriteId
argument_list|()
operator|!=
literal|null
condition|?
name|alterTable
operator|.
name|getWriteId
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|alterTable
operator|.
name|getReplicationSpec
argument_list|()
operator|!=
literal|null
operator|&&
name|alterTable
operator|.
name|getReplicationSpec
argument_list|()
operator|.
name|isMigratingToTxnTable
argument_list|()
condition|)
block|{
name|Long
name|tmpWriteId
init|=
name|ReplUtils
operator|.
name|getMigrationCurrentTblWriteId
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpWriteId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"DDLTask : Write id is not set in the config by open txn task for migration"
argument_list|)
throw|;
block|}
name|writeId
operator|=
name|tmpWriteId
expr_stmt|;
block|}
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|alterTable
argument_list|(
name|alterTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|table
argument_list|,
name|alterTable
operator|.
name|isCascade
argument_list|()
argument_list|,
name|environmentContext
argument_list|,
literal|true
argument_list|,
name|writeId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Note: this is necessary for UPDATE_STATISTICS command, that operates via ADDPROPS (why?).
comment|//       For any other updates, we don't want to do txn check on partitions when altering table.
name|boolean
name|isTxn
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|alterTable
operator|.
name|getPartitionSpec
argument_list|()
operator|!=
literal|null
operator|&&
name|alterTable
operator|.
name|getType
argument_list|()
operator|==
name|AlterTableTypes
operator|.
name|ADDPROPS
condition|)
block|{
comment|// ADDPROPS is used to add replication properties like repl.last.id, which isn't
comment|// transactional change. In case of replication check for transactional properties
comment|// explicitly.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
name|alterTable
operator|.
name|getProps
argument_list|()
decl_stmt|;
if|if
condition|(
name|alterTable
operator|.
name|getReplicationSpec
argument_list|()
operator|!=
literal|null
operator|&&
name|alterTable
operator|.
name|getReplicationSpec
argument_list|()
operator|.
name|isInReplicationScope
argument_list|()
condition|)
block|{
name|isTxn
operator|=
operator|(
name|props
operator|.
name|get
argument_list|(
name|StatsSetupConst
operator|.
name|COLUMN_STATS_ACCURATE
argument_list|)
operator|!=
literal|null
operator|)
expr_stmt|;
block|}
else|else
block|{
name|isTxn
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|String
name|qualifiedName
init|=
name|TableName
operator|.
name|getDbTable
argument_list|(
name|table
operator|.
name|getTTable
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|alterPartitions
argument_list|(
name|qualifiedName
argument_list|,
name|partitions
argument_list|,
name|environmentContext
argument_list|,
name|isTxn
argument_list|)
expr_stmt|;
block|}
comment|// Add constraints if necessary
if|if
condition|(
name|alterTable
operator|instanceof
name|AbstractAlterTableWithConstraintsDesc
condition|)
block|{
name|AlterTableAddConstraintOperation
operator|.
name|addConstraints
argument_list|(
operator|(
name|AbstractAlterTableWithConstraintsDesc
operator|)
name|alterTable
argument_list|,
name|context
operator|.
name|getDb
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"alter table: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|,
name|ErrorMsg
operator|.
name|GENERIC_ERROR
argument_list|)
throw|;
block|}
comment|// This is kind of hacky - the read entity contains the old table, whereas the write entity contains the new
comment|// table. This is needed for rename - both the old and the new table names are passed
comment|// Don't acquire locks for any of these, we have already asked for them in DDLSemanticAnalyzer.
if|if
condition|(
name|partitions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
name|context
operator|.
name|getWork
argument_list|()
operator|.
name|getInputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ReadEntity
argument_list|(
name|partition
argument_list|)
argument_list|)
expr_stmt|;
name|DDLUtils
operator|.
name|addIfAbsentByName
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|partition
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|context
operator|.
name|getWork
argument_list|()
operator|.
name|getInputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ReadEntity
argument_list|(
name|oldTable
argument_list|)
argument_list|)
expr_stmt|;
name|DDLUtils
operator|.
name|addIfAbsentByName
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|table
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|updateModifiedParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
name|user
init|=
name|SessionState
operator|.
name|getUserFromAuthenticator
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"last_modified_by"
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"last_modified_time"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

