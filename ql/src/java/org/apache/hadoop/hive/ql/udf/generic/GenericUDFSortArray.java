begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentLengthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_comment
comment|/**  * Generic UDF for array sort  *<code>SORT_ARRAY(array(obj1, obj2, obj3...))</code>.  *  * @see org.apache.hadoop.hive.ql.udf.generic.GenericUDF  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"sort_array"
argument_list|,
name|value
operator|=
literal|"_FUNC_(array(obj1, obj2,...)) - "
operator|+
literal|"Sorts the input array in ascending order according to the natural ordering"
operator|+
literal|" of the array elements."
argument_list|,
name|extended
operator|=
literal|"Example:\n"
operator|+
literal|"> SELECT _FUNC_(array('b', 'd', 'c', 'a')) FROM src LIMIT 1;\n"
operator|+
literal|"  'a', 'b', 'c', 'd'"
argument_list|)
specifier|public
class|class
name|GenericUDFSortArray
extends|extends
name|GenericUDF
block|{
specifier|private
name|Converter
index|[]
name|converters
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ObjectInspector
index|[]
name|argumentOIs
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|GenericUDFUtils
operator|.
name|ReturnObjectInspectorResolver
name|returnOIResolver
decl_stmt|;
name|returnOIResolver
operator|=
operator|new
name|GenericUDFUtils
operator|.
name|ReturnObjectInspectorResolver
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|arguments
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentLengthException
argument_list|(
literal|"The function SORT_ARRAY(array(obj1, obj2,...)) needs one argument."
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|arguments
index|[
literal|0
index|]
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|LIST
case|:
if|if
condition|(
operator|(
call|(
name|ListObjectInspector
call|)
argument_list|(
name|arguments
index|[
literal|0
index|]
argument_list|)
operator|)
operator|.
name|getListElementObjectInspector
argument_list|()
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|PRIMITIVE
argument_list|)
condition|)
block|{
break|break;
block|}
default|default:
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"Argument 1"
operator|+
literal|" of function SORT_ARRAY must be "
operator|+
name|Constants
operator|.
name|LIST_TYPE_NAME
operator|+
literal|"<"
operator|+
name|Category
operator|.
name|PRIMITIVE
operator|+
literal|">, but "
operator|+
name|arguments
index|[
literal|0
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" was found."
argument_list|)
throw|;
block|}
name|ObjectInspector
name|elementObjectInspector
init|=
operator|(
call|(
name|ListObjectInspector
call|)
argument_list|(
name|arguments
index|[
literal|0
index|]
argument_list|)
operator|)
operator|.
name|getListElementObjectInspector
argument_list|()
decl_stmt|;
name|argumentOIs
operator|=
name|arguments
expr_stmt|;
name|converters
operator|=
operator|new
name|Converter
index|[
name|arguments
operator|.
name|length
index|]
expr_stmt|;
name|ObjectInspector
name|returnOI
init|=
name|returnOIResolver
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|returnOI
operator|==
literal|null
condition|)
block|{
name|returnOI
operator|=
name|elementObjectInspector
expr_stmt|;
block|}
name|converters
index|[
literal|0
index|]
operator|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|elementObjectInspector
argument_list|,
name|returnOI
argument_list|)
expr_stmt|;
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|returnOI
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|array
init|=
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
decl_stmt|;
name|ListObjectInspector
name|arrayOI
init|=
operator|(
name|ListObjectInspector
operator|)
name|argumentOIs
index|[
literal|0
index|]
decl_stmt|;
name|List
name|retArray
init|=
operator|(
name|List
operator|)
name|arrayOI
operator|.
name|getList
argument_list|(
name|array
argument_list|)
decl_stmt|;
specifier|final
name|ObjectInspector
name|valInspector
init|=
name|arrayOI
operator|.
name|getListElementObjectInspector
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|retArray
argument_list|,
operator|new
name|Comparator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
return|return
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|valInspector
argument_list|,
name|o2
argument_list|,
name|valInspector
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ret
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|retArray
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|converters
index|[
literal|0
index|]
operator|.
name|convert
argument_list|(
name|retArray
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
assert|assert
operator|(
name|children
operator|.
name|length
operator|==
literal|1
operator|)
assert|;
return|return
literal|"sort_array("
operator|+
name|children
index|[
literal|0
index|]
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

