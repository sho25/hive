begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|translator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
operator|.
name|DruidQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnitRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|SemiJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableFunctionScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Union
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexFieldAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexOver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexVisitorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexWindow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexWindowBound
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|VirtualColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|CalciteSemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveExtractDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveFloorDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveGroupingID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveSortLimit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveTableFunctionScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveTableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|translator
operator|.
name|SqlFunctionConverter
operator|.
name|HiveToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_class
specifier|public
class|class
name|ASTConverter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ASTConverter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|RelNode
name|root
decl_stmt|;
specifier|private
specifier|final
name|HiveAST
name|hiveAST
decl_stmt|;
specifier|private
name|RelNode
name|from
decl_stmt|;
specifier|private
name|Filter
name|where
decl_stmt|;
specifier|private
name|Aggregate
name|groupBy
decl_stmt|;
specifier|private
name|Filter
name|having
decl_stmt|;
specifier|private
name|RelNode
name|select
decl_stmt|;
specifier|private
name|Sort
name|orderLimit
decl_stmt|;
specifier|private
name|Schema
name|schema
decl_stmt|;
specifier|private
name|long
name|derivedTableCount
decl_stmt|;
name|ASTConverter
parameter_list|(
name|RelNode
name|root
parameter_list|,
name|long
name|dtCounterInitVal
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|hiveAST
operator|=
operator|new
name|HiveAST
argument_list|()
expr_stmt|;
name|this
operator|.
name|derivedTableCount
operator|=
name|dtCounterInitVal
expr_stmt|;
block|}
specifier|public
specifier|static
name|ASTNode
name|convert
parameter_list|(
specifier|final
name|RelNode
name|relNode
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|resultSchema
parameter_list|,
name|boolean
name|alignColumns
parameter_list|)
throws|throws
name|CalciteSemanticException
block|{
name|RelNode
name|root
init|=
name|PlanModifierForASTConv
operator|.
name|convertOpTree
argument_list|(
name|relNode
argument_list|,
name|resultSchema
argument_list|,
name|alignColumns
argument_list|)
decl_stmt|;
name|ASTConverter
name|c
init|=
operator|new
name|ASTConverter
argument_list|(
name|root
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|c
operator|.
name|convert
argument_list|()
return|;
block|}
specifier|private
name|ASTNode
name|convert
parameter_list|()
throws|throws
name|CalciteSemanticException
block|{
comment|/*      * 1. Walk RelNode Graph; note from, where, gBy.. nodes.      */
operator|new
name|QBVisitor
argument_list|()
operator|.
name|go
argument_list|(
name|root
argument_list|)
expr_stmt|;
comment|/*      * 2. convert from node.      */
name|QueryBlockInfo
name|qb
init|=
name|convertSource
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|schema
operator|=
name|qb
operator|.
name|schema
expr_stmt|;
name|hiveAST
operator|.
name|from
operator|=
name|ASTBuilder
operator|.
name|construct
argument_list|(
name|HiveParser
operator|.
name|TOK_FROM
argument_list|,
literal|"TOK_FROM"
argument_list|)
operator|.
name|add
argument_list|(
name|qb
operator|.
name|ast
argument_list|)
operator|.
name|node
argument_list|()
expr_stmt|;
comment|/*      * 3. convert filterNode      */
if|if
condition|(
name|where
operator|!=
literal|null
condition|)
block|{
name|ASTNode
name|cond
init|=
name|where
operator|.
name|getCondition
argument_list|()
operator|.
name|accept
argument_list|(
operator|new
name|RexVisitor
argument_list|(
name|schema
argument_list|)
argument_list|)
decl_stmt|;
name|hiveAST
operator|.
name|where
operator|=
name|ASTBuilder
operator|.
name|where
argument_list|(
name|cond
argument_list|)
expr_stmt|;
block|}
comment|/*      * 4. GBy      */
if|if
condition|(
name|groupBy
operator|!=
literal|null
condition|)
block|{
name|ASTBuilder
name|b
decl_stmt|;
name|boolean
name|groupingSetsExpression
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|groupBy
operator|.
name|indicator
condition|)
block|{
name|Group
name|aggregateType
init|=
name|Aggregate
operator|.
name|Group
operator|.
name|induce
argument_list|(
name|groupBy
operator|.
name|getGroupSet
argument_list|()
argument_list|,
name|groupBy
operator|.
name|getGroupSets
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|aggregateType
operator|==
name|Group
operator|.
name|ROLLUP
condition|)
block|{
name|b
operator|=
name|ASTBuilder
operator|.
name|construct
argument_list|(
name|HiveParser
operator|.
name|TOK_ROLLUP_GROUPBY
argument_list|,
literal|"TOK_ROLLUP_GROUPBY"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|aggregateType
operator|==
name|Group
operator|.
name|CUBE
condition|)
block|{
name|b
operator|=
name|ASTBuilder
operator|.
name|construct
argument_list|(
name|HiveParser
operator|.
name|TOK_CUBE_GROUPBY
argument_list|,
literal|"TOK_CUBE_GROUPBY"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|=
name|ASTBuilder
operator|.
name|construct
argument_list|(
name|HiveParser
operator|.
name|TOK_GROUPING_SETS
argument_list|,
literal|"TOK_GROUPING_SETS"
argument_list|)
expr_stmt|;
name|groupingSetsExpression
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|b
operator|=
name|ASTBuilder
operator|.
name|construct
argument_list|(
name|HiveParser
operator|.
name|TOK_GROUPBY
argument_list|,
literal|"TOK_GROUPBY"
argument_list|)
expr_stmt|;
block|}
name|HiveAggregate
name|hiveAgg
init|=
operator|(
name|HiveAggregate
operator|)
name|groupBy
decl_stmt|;
for|for
control|(
name|int
name|pos
range|:
name|hiveAgg
operator|.
name|getAggregateColumnsOrder
argument_list|()
control|)
block|{
name|RexInputRef
name|iRef
init|=
operator|new
name|RexInputRef
argument_list|(
name|groupBy
operator|.
name|getGroupSet
argument_list|()
operator|.
name|nth
argument_list|(
name|pos
argument_list|)
argument_list|,
name|groupBy
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|ANY
argument_list|)
argument_list|)
decl_stmt|;
name|b
operator|.
name|add
argument_list|(
name|iRef
operator|.
name|accept
argument_list|(
operator|new
name|RexVisitor
argument_list|(
name|schema
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|groupBy
operator|.
name|getGroupCount
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|hiveAgg
operator|.
name|getAggregateColumnsOrder
argument_list|()
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
condition|)
block|{
name|RexInputRef
name|iRef
init|=
operator|new
name|RexInputRef
argument_list|(
name|groupBy
operator|.
name|getGroupSet
argument_list|()
operator|.
name|nth
argument_list|(
name|pos
argument_list|)
argument_list|,
name|groupBy
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|ANY
argument_list|)
argument_list|)
decl_stmt|;
name|b
operator|.
name|add
argument_list|(
name|iRef
operator|.
name|accept
argument_list|(
operator|new
name|RexVisitor
argument_list|(
name|schema
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Grouping sets expressions
if|if
condition|(
name|groupingSetsExpression
condition|)
block|{
for|for
control|(
name|ImmutableBitSet
name|groupSet
range|:
name|groupBy
operator|.
name|getGroupSets
argument_list|()
control|)
block|{
name|ASTBuilder
name|expression
init|=
name|ASTBuilder
operator|.
name|construct
argument_list|(
name|HiveParser
operator|.
name|TOK_GROUPING_SETS_EXPRESSION
argument_list|,
literal|"TOK_GROUPING_SETS_EXPRESSION"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|groupSet
control|)
block|{
name|RexInputRef
name|iRef
init|=
operator|new
name|RexInputRef
argument_list|(
name|i
argument_list|,
name|groupBy
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|ANY
argument_list|)
argument_list|)
decl_stmt|;
name|expression
operator|.
name|add
argument_list|(
name|iRef
operator|.
name|accept
argument_list|(
operator|new
name|RexVisitor
argument_list|(
name|schema
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|add
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|groupBy
operator|.
name|getGroupSet
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hiveAST
operator|.
name|groupBy
operator|=
name|b
operator|.
name|node
argument_list|()
expr_stmt|;
block|}
name|schema
operator|=
operator|new
name|Schema
argument_list|(
name|schema
argument_list|,
name|groupBy
argument_list|)
expr_stmt|;
block|}
comment|/*      * 5. Having      */
if|if
condition|(
name|having
operator|!=
literal|null
condition|)
block|{
name|ASTNode
name|cond
init|=
name|having
operator|.
name|getCondition
argument_list|()
operator|.
name|accept
argument_list|(
operator|new
name|RexVisitor
argument_list|(
name|schema
argument_list|)
argument_list|)
decl_stmt|;
name|hiveAST
operator|.
name|having
operator|=
name|ASTBuilder
operator|.
name|having
argument_list|(
name|cond
argument_list|)
expr_stmt|;
block|}
comment|/*      * 6. Project      */
name|ASTBuilder
name|b
init|=
name|ASTBuilder
operator|.
name|construct
argument_list|(
name|HiveParser
operator|.
name|TOK_SELECT
argument_list|,
literal|"TOK_SELECT"
argument_list|)
decl_stmt|;
if|if
condition|(
name|select
operator|instanceof
name|Project
condition|)
block|{
if|if
condition|(
name|select
operator|.
name|getChildExps
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RexLiteral
name|r
init|=
name|select
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeExactLiteral
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|ASTNode
name|selectExpr
init|=
name|ASTBuilder
operator|.
name|selectExpr
argument_list|(
name|ASTBuilder
operator|.
name|literal
argument_list|(
name|r
argument_list|)
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
name|b
operator|.
name|add
argument_list|(
name|selectExpr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RexNode
name|r
range|:
name|select
operator|.
name|getChildExps
argument_list|()
control|)
block|{
if|if
condition|(
name|RexUtil
operator|.
name|isNull
argument_list|(
name|r
argument_list|)
operator|&&
name|r
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|!=
name|SqlTypeName
operator|.
name|NULL
condition|)
block|{
comment|// It is NULL value with different type, we need to introduce a CAST
comment|// to keep it
name|r
operator|=
name|select
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeAbstractCast
argument_list|(
name|r
operator|.
name|getType
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|ASTNode
name|expr
init|=
name|r
operator|.
name|accept
argument_list|(
operator|new
name|RexVisitor
argument_list|(
name|schema
argument_list|,
name|r
operator|instanceof
name|RexLiteral
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|alias
init|=
name|select
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|ASTNode
name|selectExpr
init|=
name|ASTBuilder
operator|.
name|selectExpr
argument_list|(
name|expr
argument_list|,
name|alias
argument_list|)
decl_stmt|;
name|b
operator|.
name|add
argument_list|(
name|selectExpr
argument_list|)
expr_stmt|;
block|}
block|}
name|hiveAST
operator|.
name|select
operator|=
name|b
operator|.
name|node
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// select is UDTF
name|HiveTableFunctionScan
name|udtf
init|=
operator|(
name|HiveTableFunctionScan
operator|)
name|select
decl_stmt|;
name|List
argument_list|<
name|ASTNode
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|udtf
operator|.
name|getCall
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|r
range|:
name|call
operator|.
name|getOperands
argument_list|()
control|)
block|{
if|if
condition|(
name|RexUtil
operator|.
name|isNull
argument_list|(
name|r
argument_list|)
operator|&&
name|r
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|!=
name|SqlTypeName
operator|.
name|NULL
condition|)
block|{
comment|// It is NULL value with different type, we need to introduce a CAST
comment|// to keep it
name|r
operator|=
name|select
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeAbstractCast
argument_list|(
name|r
operator|.
name|getType
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|ASTNode
name|expr
init|=
name|r
operator|.
name|accept
argument_list|(
operator|new
name|RexVisitor
argument_list|(
name|schema
argument_list|,
name|r
operator|instanceof
name|RexLiteral
argument_list|)
argument_list|)
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
name|ASTBuilder
name|sel
init|=
name|ASTBuilder
operator|.
name|construct
argument_list|(
name|HiveParser
operator|.
name|TOK_SELEXPR
argument_list|,
literal|"TOK_SELEXPR"
argument_list|)
decl_stmt|;
name|ASTNode
name|function
init|=
name|buildUDTFAST
argument_list|(
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|sel
operator|.
name|add
argument_list|(
name|function
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|udtf
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
control|)
block|{
name|sel
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|Identifier
argument_list|,
name|alias
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|add
argument_list|(
name|sel
argument_list|)
expr_stmt|;
name|hiveAST
operator|.
name|select
operator|=
name|b
operator|.
name|node
argument_list|()
expr_stmt|;
block|}
comment|/*      * 7. Order Use in Order By from the block above. RelNode has no pointer to      * parent hence we need to go top down; but OB at each block really belong      * to its src/from. Hence the need to pass in sort for each block from      * its parent.      * 8. Limit      */
name|convertOrderLimitToASTNode
argument_list|(
operator|(
name|HiveSortLimit
operator|)
name|orderLimit
argument_list|)
expr_stmt|;
return|return
name|hiveAST
operator|.
name|getAST
argument_list|()
return|;
block|}
specifier|private
name|ASTNode
name|buildUDTFAST
parameter_list|(
name|String
name|functionName
parameter_list|,
name|List
argument_list|<
name|ASTNode
argument_list|>
name|children
parameter_list|)
block|{
name|ASTNode
name|node
init|=
operator|(
name|ASTNode
operator|)
name|ParseDriver
operator|.
name|adaptor
operator|.
name|create
argument_list|(
name|HiveParser
operator|.
name|TOK_FUNCTION
argument_list|,
literal|"TOK_FUNCTION"
argument_list|)
decl_stmt|;
name|node
operator|.
name|addChild
argument_list|(
operator|(
name|ASTNode
operator|)
name|ParseDriver
operator|.
name|adaptor
operator|.
name|create
argument_list|(
name|HiveParser
operator|.
name|Identifier
argument_list|,
name|functionName
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ASTNode
name|c
range|:
name|children
control|)
block|{
name|ParseDriver
operator|.
name|adaptor
operator|.
name|addChild
argument_list|(
name|node
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
specifier|private
name|void
name|convertOrderLimitToASTNode
parameter_list|(
name|HiveSortLimit
name|order
parameter_list|)
block|{
if|if
condition|(
name|order
operator|!=
literal|null
condition|)
block|{
name|HiveSortLimit
name|hiveSortLimit
init|=
name|order
decl_stmt|;
if|if
condition|(
operator|!
name|hiveSortLimit
operator|.
name|getCollation
argument_list|()
operator|.
name|getFieldCollations
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// 1 Add order by token
name|ASTNode
name|orderAst
init|=
name|ASTBuilder
operator|.
name|createAST
argument_list|(
name|HiveParser
operator|.
name|TOK_ORDERBY
argument_list|,
literal|"TOK_ORDERBY"
argument_list|)
decl_stmt|;
name|schema
operator|=
operator|new
name|Schema
argument_list|(
name|hiveSortLimit
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|RexNode
argument_list|>
name|obRefToCallMap
init|=
name|hiveSortLimit
operator|.
name|getInputRefToCallMap
argument_list|()
decl_stmt|;
name|RexNode
name|obExpr
decl_stmt|;
name|ASTNode
name|astCol
decl_stmt|;
for|for
control|(
name|RelFieldCollation
name|c
range|:
name|hiveSortLimit
operator|.
name|getCollation
argument_list|()
operator|.
name|getFieldCollations
argument_list|()
control|)
block|{
comment|// 2 Add Direction token
name|ASTNode
name|directionAST
init|=
name|c
operator|.
name|getDirection
argument_list|()
operator|==
name|RelFieldCollation
operator|.
name|Direction
operator|.
name|ASCENDING
condition|?
name|ASTBuilder
operator|.
name|createAST
argument_list|(
name|HiveParser
operator|.
name|TOK_TABSORTCOLNAMEASC
argument_list|,
literal|"TOK_TABSORTCOLNAMEASC"
argument_list|)
else|:
name|ASTBuilder
operator|.
name|createAST
argument_list|(
name|HiveParser
operator|.
name|TOK_TABSORTCOLNAMEDESC
argument_list|,
literal|"TOK_TABSORTCOLNAMEDESC"
argument_list|)
decl_stmt|;
name|ASTNode
name|nullDirectionAST
decl_stmt|;
comment|// Null direction
if|if
condition|(
name|c
operator|.
name|nullDirection
operator|==
name|RelFieldCollation
operator|.
name|NullDirection
operator|.
name|FIRST
condition|)
block|{
name|nullDirectionAST
operator|=
name|ASTBuilder
operator|.
name|createAST
argument_list|(
name|HiveParser
operator|.
name|TOK_NULLS_FIRST
argument_list|,
literal|"TOK_NULLS_FIRST"
argument_list|)
expr_stmt|;
name|directionAST
operator|.
name|addChild
argument_list|(
name|nullDirectionAST
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|nullDirection
operator|==
name|RelFieldCollation
operator|.
name|NullDirection
operator|.
name|LAST
condition|)
block|{
name|nullDirectionAST
operator|=
name|ASTBuilder
operator|.
name|createAST
argument_list|(
name|HiveParser
operator|.
name|TOK_NULLS_LAST
argument_list|,
literal|"TOK_NULLS_LAST"
argument_list|)
expr_stmt|;
name|directionAST
operator|.
name|addChild
argument_list|(
name|nullDirectionAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Default
if|if
condition|(
name|c
operator|.
name|getDirection
argument_list|()
operator|==
name|RelFieldCollation
operator|.
name|Direction
operator|.
name|ASCENDING
condition|)
block|{
name|nullDirectionAST
operator|=
name|ASTBuilder
operator|.
name|createAST
argument_list|(
name|HiveParser
operator|.
name|TOK_NULLS_FIRST
argument_list|,
literal|"TOK_NULLS_FIRST"
argument_list|)
expr_stmt|;
name|directionAST
operator|.
name|addChild
argument_list|(
name|nullDirectionAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nullDirectionAST
operator|=
name|ASTBuilder
operator|.
name|createAST
argument_list|(
name|HiveParser
operator|.
name|TOK_NULLS_LAST
argument_list|,
literal|"TOK_NULLS_LAST"
argument_list|)
expr_stmt|;
name|directionAST
operator|.
name|addChild
argument_list|(
name|nullDirectionAST
argument_list|)
expr_stmt|;
block|}
block|}
comment|// 3 Convert OB expr (OB Expr is usually an input ref except for top
comment|// level OB; top level OB will have RexCall kept in a map.)
name|obExpr
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|obRefToCallMap
operator|!=
literal|null
condition|)
name|obExpr
operator|=
name|obRefToCallMap
operator|.
name|get
argument_list|(
name|c
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|obExpr
operator|!=
literal|null
condition|)
block|{
name|astCol
operator|=
name|obExpr
operator|.
name|accept
argument_list|(
operator|new
name|RexVisitor
argument_list|(
name|schema
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ColumnInfo
name|cI
init|=
name|schema
operator|.
name|get
argument_list|(
name|c
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
decl_stmt|;
comment|/*              * The RowResolver setup for Select drops Table associations. So              * setup ASTNode on unqualified name.              */
name|astCol
operator|=
name|ASTBuilder
operator|.
name|unqualifiedName
argument_list|(
name|cI
operator|.
name|column
argument_list|)
expr_stmt|;
block|}
comment|// 4 buildup the ob expr AST
name|nullDirectionAST
operator|.
name|addChild
argument_list|(
name|astCol
argument_list|)
expr_stmt|;
name|orderAst
operator|.
name|addChild
argument_list|(
name|directionAST
argument_list|)
expr_stmt|;
block|}
name|hiveAST
operator|.
name|order
operator|=
name|orderAst
expr_stmt|;
block|}
name|RexNode
name|offsetExpr
init|=
name|hiveSortLimit
operator|.
name|getOffsetExpr
argument_list|()
decl_stmt|;
name|RexNode
name|fetchExpr
init|=
name|hiveSortLimit
operator|.
name|getFetchExpr
argument_list|()
decl_stmt|;
if|if
condition|(
name|fetchExpr
operator|!=
literal|null
condition|)
block|{
name|Object
name|offset
init|=
operator|(
name|offsetExpr
operator|==
literal|null
operator|)
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
operator|(
operator|(
name|RexLiteral
operator|)
name|offsetExpr
operator|)
operator|.
name|getValue2
argument_list|()
decl_stmt|;
name|Object
name|fetch
init|=
operator|(
operator|(
name|RexLiteral
operator|)
name|fetchExpr
operator|)
operator|.
name|getValue2
argument_list|()
decl_stmt|;
name|hiveAST
operator|.
name|limit
operator|=
name|ASTBuilder
operator|.
name|limit
argument_list|(
name|offset
argument_list|,
name|fetch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Schema
name|getRowSchema
parameter_list|(
name|String
name|tblAlias
parameter_list|)
block|{
if|if
condition|(
name|select
operator|instanceof
name|Project
condition|)
block|{
return|return
operator|new
name|Schema
argument_list|(
operator|(
name|Project
operator|)
name|select
argument_list|,
name|tblAlias
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Schema
argument_list|(
operator|(
name|TableFunctionScan
operator|)
name|select
argument_list|,
name|tblAlias
argument_list|)
return|;
block|}
block|}
specifier|private
name|QueryBlockInfo
name|convertSource
parameter_list|(
name|RelNode
name|r
parameter_list|)
throws|throws
name|CalciteSemanticException
block|{
name|Schema
name|s
init|=
literal|null
decl_stmt|;
name|ASTNode
name|ast
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|TableScan
condition|)
block|{
name|TableScan
name|f
init|=
operator|(
name|TableScan
operator|)
name|r
decl_stmt|;
name|s
operator|=
operator|new
name|Schema
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|ast
operator|=
name|ASTBuilder
operator|.
name|table
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|instanceof
name|DruidQuery
condition|)
block|{
name|DruidQuery
name|f
init|=
operator|(
name|DruidQuery
operator|)
name|r
decl_stmt|;
name|s
operator|=
operator|new
name|Schema
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|ast
operator|=
name|ASTBuilder
operator|.
name|table
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|instanceof
name|Join
condition|)
block|{
name|Join
name|join
init|=
operator|(
name|Join
operator|)
name|r
decl_stmt|;
name|QueryBlockInfo
name|left
init|=
name|convertSource
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
name|QueryBlockInfo
name|right
init|=
name|convertSource
argument_list|(
name|join
operator|.
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
name|s
operator|=
operator|new
name|Schema
argument_list|(
name|left
operator|.
name|schema
argument_list|,
name|right
operator|.
name|schema
argument_list|)
expr_stmt|;
name|ASTNode
name|cond
init|=
name|join
operator|.
name|getCondition
argument_list|()
operator|.
name|accept
argument_list|(
operator|new
name|RexVisitor
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|semiJoin
init|=
name|join
operator|instanceof
name|SemiJoin
decl_stmt|;
if|if
condition|(
name|join
operator|.
name|getRight
argument_list|()
operator|instanceof
name|Join
operator|&&
operator|!
name|semiJoin
condition|)
block|{
comment|// should not be done for semijoin since it will change the semantics
comment|// Invert join inputs; this is done because otherwise the SemanticAnalyzer
comment|// methods to merge joins will not kick in
name|JoinRelType
name|type
decl_stmt|;
if|if
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
operator|==
name|JoinRelType
operator|.
name|LEFT
condition|)
block|{
name|type
operator|=
name|JoinRelType
operator|.
name|RIGHT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
operator|==
name|JoinRelType
operator|.
name|RIGHT
condition|)
block|{
name|type
operator|=
name|JoinRelType
operator|.
name|LEFT
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|join
operator|.
name|getJoinType
argument_list|()
expr_stmt|;
block|}
name|ast
operator|=
name|ASTBuilder
operator|.
name|join
argument_list|(
name|right
operator|.
name|ast
argument_list|,
name|left
operator|.
name|ast
argument_list|,
name|type
argument_list|,
name|cond
argument_list|,
name|semiJoin
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ast
operator|=
name|ASTBuilder
operator|.
name|join
argument_list|(
name|left
operator|.
name|ast
argument_list|,
name|right
operator|.
name|ast
argument_list|,
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|,
name|cond
argument_list|,
name|semiJoin
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|semiJoin
condition|)
block|{
name|s
operator|=
name|left
operator|.
name|schema
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|r
operator|instanceof
name|Union
condition|)
block|{
name|Union
name|u
init|=
operator|(
operator|(
name|Union
operator|)
name|r
operator|)
decl_stmt|;
name|ASTNode
name|left
init|=
operator|new
name|ASTConverter
argument_list|(
operator|(
operator|(
name|Union
operator|)
name|r
operator|)
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
argument_list|,
name|this
operator|.
name|derivedTableCount
argument_list|)
operator|.
name|convert
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|ind
init|=
literal|1
init|;
name|ind
operator|<
name|u
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|ind
operator|++
control|)
block|{
name|left
operator|=
name|getUnionAllAST
argument_list|(
name|left
argument_list|,
operator|new
name|ASTConverter
argument_list|(
operator|(
operator|(
name|Union
operator|)
name|r
operator|)
operator|.
name|getInput
argument_list|(
name|ind
argument_list|)
argument_list|,
name|this
operator|.
name|derivedTableCount
argument_list|)
operator|.
name|convert
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|sqAlias
init|=
name|nextAlias
argument_list|()
decl_stmt|;
name|ast
operator|=
name|ASTBuilder
operator|.
name|subQuery
argument_list|(
name|left
argument_list|,
name|sqAlias
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Schema
argument_list|(
operator|(
name|Union
operator|)
name|r
argument_list|,
name|sqAlias
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ASTConverter
name|src
init|=
operator|new
name|ASTConverter
argument_list|(
name|r
argument_list|,
name|this
operator|.
name|derivedTableCount
argument_list|)
decl_stmt|;
name|ASTNode
name|srcAST
init|=
name|src
operator|.
name|convert
argument_list|()
decl_stmt|;
name|String
name|sqAlias
init|=
name|nextAlias
argument_list|()
decl_stmt|;
name|s
operator|=
name|src
operator|.
name|getRowSchema
argument_list|(
name|sqAlias
argument_list|)
expr_stmt|;
name|ast
operator|=
name|ASTBuilder
operator|.
name|subQuery
argument_list|(
name|srcAST
argument_list|,
name|sqAlias
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|QueryBlockInfo
argument_list|(
name|s
argument_list|,
name|ast
argument_list|)
return|;
block|}
class|class
name|QBVisitor
extends|extends
name|RelVisitor
block|{
specifier|public
name|void
name|handle
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
name|RelNode
name|child
init|=
name|filter
operator|.
name|getInput
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|Aggregate
operator|&&
operator|!
operator|(
operator|(
name|Aggregate
operator|)
name|child
operator|)
operator|.
name|getGroupSet
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ASTConverter
operator|.
name|this
operator|.
name|having
operator|=
name|filter
expr_stmt|;
block|}
else|else
block|{
name|ASTConverter
operator|.
name|this
operator|.
name|where
operator|=
name|filter
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|handle
parameter_list|(
name|Project
name|project
parameter_list|)
block|{
if|if
condition|(
name|ASTConverter
operator|.
name|this
operator|.
name|select
operator|==
literal|null
condition|)
block|{
name|ASTConverter
operator|.
name|this
operator|.
name|select
operator|=
name|project
expr_stmt|;
block|}
else|else
block|{
name|ASTConverter
operator|.
name|this
operator|.
name|from
operator|=
name|project
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|handle
parameter_list|(
name|TableFunctionScan
name|tableFunctionScan
parameter_list|)
block|{
if|if
condition|(
name|ASTConverter
operator|.
name|this
operator|.
name|select
operator|==
literal|null
condition|)
block|{
name|ASTConverter
operator|.
name|this
operator|.
name|select
operator|=
name|tableFunctionScan
expr_stmt|;
block|}
else|else
block|{
name|ASTConverter
operator|.
name|this
operator|.
name|from
operator|=
name|tableFunctionScan
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|RelNode
name|node
parameter_list|,
name|int
name|ordinal
parameter_list|,
name|RelNode
name|parent
parameter_list|)
block|{
if|if
condition|(
name|node
operator|instanceof
name|TableScan
operator|||
name|node
operator|instanceof
name|DruidQuery
condition|)
block|{
name|ASTConverter
operator|.
name|this
operator|.
name|from
operator|=
name|node
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|Filter
condition|)
block|{
name|handle
argument_list|(
operator|(
name|Filter
operator|)
name|node
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|Project
condition|)
block|{
name|handle
argument_list|(
operator|(
name|Project
operator|)
name|node
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|TableFunctionScan
condition|)
block|{
name|handle
argument_list|(
operator|(
name|TableFunctionScan
operator|)
name|node
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|Join
condition|)
block|{
name|ASTConverter
operator|.
name|this
operator|.
name|from
operator|=
name|node
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|Union
condition|)
block|{
name|ASTConverter
operator|.
name|this
operator|.
name|from
operator|=
name|node
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|Aggregate
condition|)
block|{
name|ASTConverter
operator|.
name|this
operator|.
name|groupBy
operator|=
operator|(
name|Aggregate
operator|)
name|node
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|Sort
condition|)
block|{
if|if
condition|(
name|ASTConverter
operator|.
name|this
operator|.
name|select
operator|!=
literal|null
condition|)
block|{
name|ASTConverter
operator|.
name|this
operator|.
name|from
operator|=
name|node
expr_stmt|;
block|}
else|else
block|{
name|ASTConverter
operator|.
name|this
operator|.
name|orderLimit
operator|=
operator|(
name|Sort
operator|)
name|node
expr_stmt|;
block|}
block|}
comment|/*        * once the source node is reached; stop traversal for this QB        */
if|if
condition|(
name|ASTConverter
operator|.
name|this
operator|.
name|from
operator|==
literal|null
condition|)
block|{
name|node
operator|.
name|childrenAccept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
class|class
name|RexVisitor
extends|extends
name|RexVisitorImpl
argument_list|<
name|ASTNode
argument_list|>
block|{
specifier|private
specifier|final
name|Schema
name|schema
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|useTypeQualInLiteral
decl_stmt|;
specifier|protected
name|RexVisitor
parameter_list|(
name|Schema
name|schema
parameter_list|)
block|{
name|this
argument_list|(
name|schema
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|RexVisitor
parameter_list|(
name|Schema
name|schema
parameter_list|,
name|boolean
name|useTypeQualInLiteral
parameter_list|)
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|useTypeQualInLiteral
operator|=
name|useTypeQualInLiteral
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ASTNode
name|visitFieldAccess
parameter_list|(
name|RexFieldAccess
name|fieldAccess
parameter_list|)
block|{
return|return
name|ASTBuilder
operator|.
name|construct
argument_list|(
name|HiveParser
operator|.
name|DOT
argument_list|,
literal|"."
argument_list|)
operator|.
name|add
argument_list|(
name|super
operator|.
name|visitFieldAccess
argument_list|(
name|fieldAccess
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|Identifier
argument_list|,
name|fieldAccess
operator|.
name|getField
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|node
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ASTNode
name|visitInputRef
parameter_list|(
name|RexInputRef
name|inputRef
parameter_list|)
block|{
name|ColumnInfo
name|cI
init|=
name|schema
operator|.
name|get
argument_list|(
name|inputRef
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cI
operator|.
name|agg
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|ASTNode
operator|)
name|ParseDriver
operator|.
name|adaptor
operator|.
name|dupTree
argument_list|(
name|cI
operator|.
name|agg
argument_list|)
return|;
block|}
if|if
condition|(
name|cI
operator|.
name|table
operator|==
literal|null
operator|||
name|cI
operator|.
name|table
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|ASTBuilder
operator|.
name|unqualifiedName
argument_list|(
name|cI
operator|.
name|column
argument_list|)
return|;
else|else
return|return
name|ASTBuilder
operator|.
name|qualifiedName
argument_list|(
name|cI
operator|.
name|table
argument_list|,
name|cI
operator|.
name|column
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ASTNode
name|visitLiteral
parameter_list|(
name|RexLiteral
name|literal
parameter_list|)
block|{
return|return
name|ASTBuilder
operator|.
name|literal
argument_list|(
name|literal
argument_list|,
name|useTypeQualInLiteral
argument_list|)
return|;
block|}
specifier|private
name|ASTNode
name|getPSpecAST
parameter_list|(
name|RexWindow
name|window
parameter_list|)
block|{
name|ASTNode
name|pSpecAst
init|=
literal|null
decl_stmt|;
name|ASTNode
name|dByAst
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|window
operator|.
name|partitionKeys
operator|!=
literal|null
operator|&&
operator|!
name|window
operator|.
name|partitionKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dByAst
operator|=
name|ASTBuilder
operator|.
name|createAST
argument_list|(
name|HiveParser
operator|.
name|TOK_DISTRIBUTEBY
argument_list|,
literal|"TOK_DISTRIBUTEBY"
argument_list|)
expr_stmt|;
for|for
control|(
name|RexNode
name|pk
range|:
name|window
operator|.
name|partitionKeys
control|)
block|{
name|ASTNode
name|astCol
init|=
name|pk
operator|.
name|accept
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|dByAst
operator|.
name|addChild
argument_list|(
name|astCol
argument_list|)
expr_stmt|;
block|}
block|}
name|ASTNode
name|oByAst
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|window
operator|.
name|orderKeys
operator|!=
literal|null
operator|&&
operator|!
name|window
operator|.
name|orderKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|oByAst
operator|=
name|ASTBuilder
operator|.
name|createAST
argument_list|(
name|HiveParser
operator|.
name|TOK_ORDERBY
argument_list|,
literal|"TOK_ORDERBY"
argument_list|)
expr_stmt|;
for|for
control|(
name|RexFieldCollation
name|ok
range|:
name|window
operator|.
name|orderKeys
control|)
block|{
name|ASTNode
name|directionAST
init|=
name|ok
operator|.
name|getDirection
argument_list|()
operator|==
name|RelFieldCollation
operator|.
name|Direction
operator|.
name|ASCENDING
condition|?
name|ASTBuilder
operator|.
name|createAST
argument_list|(
name|HiveParser
operator|.
name|TOK_TABSORTCOLNAMEASC
argument_list|,
literal|"TOK_TABSORTCOLNAMEASC"
argument_list|)
else|:
name|ASTBuilder
operator|.
name|createAST
argument_list|(
name|HiveParser
operator|.
name|TOK_TABSORTCOLNAMEDESC
argument_list|,
literal|"TOK_TABSORTCOLNAMEDESC"
argument_list|)
decl_stmt|;
name|ASTNode
name|nullDirectionAST
decl_stmt|;
comment|// Null direction
if|if
condition|(
name|ok
operator|.
name|right
operator|.
name|contains
argument_list|(
name|SqlKind
operator|.
name|NULLS_FIRST
argument_list|)
condition|)
block|{
name|nullDirectionAST
operator|=
name|ASTBuilder
operator|.
name|createAST
argument_list|(
name|HiveParser
operator|.
name|TOK_NULLS_FIRST
argument_list|,
literal|"TOK_NULLS_FIRST"
argument_list|)
expr_stmt|;
name|directionAST
operator|.
name|addChild
argument_list|(
name|nullDirectionAST
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ok
operator|.
name|right
operator|.
name|contains
argument_list|(
name|SqlKind
operator|.
name|NULLS_LAST
argument_list|)
condition|)
block|{
name|nullDirectionAST
operator|=
name|ASTBuilder
operator|.
name|createAST
argument_list|(
name|HiveParser
operator|.
name|TOK_NULLS_LAST
argument_list|,
literal|"TOK_NULLS_LAST"
argument_list|)
expr_stmt|;
name|directionAST
operator|.
name|addChild
argument_list|(
name|nullDirectionAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Default
if|if
condition|(
name|ok
operator|.
name|getDirection
argument_list|()
operator|==
name|RelFieldCollation
operator|.
name|Direction
operator|.
name|ASCENDING
condition|)
block|{
name|nullDirectionAST
operator|=
name|ASTBuilder
operator|.
name|createAST
argument_list|(
name|HiveParser
operator|.
name|TOK_NULLS_FIRST
argument_list|,
literal|"TOK_NULLS_FIRST"
argument_list|)
expr_stmt|;
name|directionAST
operator|.
name|addChild
argument_list|(
name|nullDirectionAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nullDirectionAST
operator|=
name|ASTBuilder
operator|.
name|createAST
argument_list|(
name|HiveParser
operator|.
name|TOK_NULLS_LAST
argument_list|,
literal|"TOK_NULLS_LAST"
argument_list|)
expr_stmt|;
name|directionAST
operator|.
name|addChild
argument_list|(
name|nullDirectionAST
argument_list|)
expr_stmt|;
block|}
block|}
name|ASTNode
name|astCol
init|=
name|ok
operator|.
name|left
operator|.
name|accept
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|nullDirectionAST
operator|.
name|addChild
argument_list|(
name|astCol
argument_list|)
expr_stmt|;
name|oByAst
operator|.
name|addChild
argument_list|(
name|directionAST
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dByAst
operator|!=
literal|null
operator|||
name|oByAst
operator|!=
literal|null
condition|)
block|{
name|pSpecAst
operator|=
name|ASTBuilder
operator|.
name|createAST
argument_list|(
name|HiveParser
operator|.
name|TOK_PARTITIONINGSPEC
argument_list|,
literal|"TOK_PARTITIONINGSPEC"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dByAst
operator|!=
literal|null
condition|)
name|pSpecAst
operator|.
name|addChild
argument_list|(
name|dByAst
argument_list|)
expr_stmt|;
if|if
condition|(
name|oByAst
operator|!=
literal|null
condition|)
name|pSpecAst
operator|.
name|addChild
argument_list|(
name|oByAst
argument_list|)
expr_stmt|;
block|}
return|return
name|pSpecAst
return|;
block|}
specifier|private
name|ASTNode
name|getWindowBound
parameter_list|(
name|RexWindowBound
name|wb
parameter_list|)
block|{
name|ASTNode
name|wbAST
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|wb
operator|.
name|isCurrentRow
argument_list|()
condition|)
block|{
name|wbAST
operator|=
name|ASTBuilder
operator|.
name|createAST
argument_list|(
name|HiveParser
operator|.
name|KW_CURRENT
argument_list|,
literal|"CURRENT"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|wb
operator|.
name|isPreceding
argument_list|()
condition|)
name|wbAST
operator|=
name|ASTBuilder
operator|.
name|createAST
argument_list|(
name|HiveParser
operator|.
name|KW_PRECEDING
argument_list|,
literal|"PRECEDING"
argument_list|)
expr_stmt|;
else|else
name|wbAST
operator|=
name|ASTBuilder
operator|.
name|createAST
argument_list|(
name|HiveParser
operator|.
name|KW_FOLLOWING
argument_list|,
literal|"FOLLOWING"
argument_list|)
expr_stmt|;
if|if
condition|(
name|wb
operator|.
name|isUnbounded
argument_list|()
condition|)
block|{
name|wbAST
operator|.
name|addChild
argument_list|(
name|ASTBuilder
operator|.
name|createAST
argument_list|(
name|HiveParser
operator|.
name|KW_UNBOUNDED
argument_list|,
literal|"UNBOUNDED"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ASTNode
name|offset
init|=
name|wb
operator|.
name|getOffset
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|wbAST
operator|.
name|addChild
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|wbAST
return|;
block|}
specifier|private
name|ASTNode
name|getWindowRangeAST
parameter_list|(
name|RexWindow
name|window
parameter_list|)
block|{
name|ASTNode
name|wRangeAst
init|=
literal|null
decl_stmt|;
name|ASTNode
name|startAST
init|=
literal|null
decl_stmt|;
name|RexWindowBound
name|ub
init|=
name|window
operator|.
name|getUpperBound
argument_list|()
decl_stmt|;
if|if
condition|(
name|ub
operator|!=
literal|null
condition|)
block|{
name|startAST
operator|=
name|getWindowBound
argument_list|(
name|ub
argument_list|)
expr_stmt|;
block|}
name|ASTNode
name|endAST
init|=
literal|null
decl_stmt|;
name|RexWindowBound
name|lb
init|=
name|window
operator|.
name|getLowerBound
argument_list|()
decl_stmt|;
if|if
condition|(
name|lb
operator|!=
literal|null
condition|)
block|{
name|endAST
operator|=
name|getWindowBound
argument_list|(
name|lb
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|startAST
operator|!=
literal|null
operator|||
name|endAST
operator|!=
literal|null
condition|)
block|{
comment|// NOTE: in Hive AST Rows->Range(Physical)& Range -> Values (logical)
if|if
condition|(
name|window
operator|.
name|isRows
argument_list|()
condition|)
name|wRangeAst
operator|=
name|ASTBuilder
operator|.
name|createAST
argument_list|(
name|HiveParser
operator|.
name|TOK_WINDOWRANGE
argument_list|,
literal|"TOK_WINDOWRANGE"
argument_list|)
expr_stmt|;
else|else
name|wRangeAst
operator|=
name|ASTBuilder
operator|.
name|createAST
argument_list|(
name|HiveParser
operator|.
name|TOK_WINDOWVALUES
argument_list|,
literal|"TOK_WINDOWVALUES"
argument_list|)
expr_stmt|;
if|if
condition|(
name|startAST
operator|!=
literal|null
condition|)
name|wRangeAst
operator|.
name|addChild
argument_list|(
name|startAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|endAST
operator|!=
literal|null
condition|)
name|wRangeAst
operator|.
name|addChild
argument_list|(
name|endAST
argument_list|)
expr_stmt|;
block|}
return|return
name|wRangeAst
return|;
block|}
annotation|@
name|Override
specifier|public
name|ASTNode
name|visitOver
parameter_list|(
name|RexOver
name|over
parameter_list|)
block|{
if|if
condition|(
operator|!
name|deep
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// 1. Translate the UDAF
specifier|final
name|ASTNode
name|wUDAFAst
init|=
name|visitCall
argument_list|(
name|over
argument_list|)
decl_stmt|;
comment|// 2. Add TOK_WINDOW as child of UDAF
name|ASTNode
name|wSpec
init|=
name|ASTBuilder
operator|.
name|createAST
argument_list|(
name|HiveParser
operator|.
name|TOK_WINDOWSPEC
argument_list|,
literal|"TOK_WINDOWSPEC"
argument_list|)
decl_stmt|;
name|wUDAFAst
operator|.
name|addChild
argument_list|(
name|wSpec
argument_list|)
expr_stmt|;
comment|// 3. Add Part Spec& Range Spec as child of TOK_WINDOW
specifier|final
name|RexWindow
name|window
init|=
name|over
operator|.
name|getWindow
argument_list|()
decl_stmt|;
specifier|final
name|ASTNode
name|wPSpecAst
init|=
name|getPSpecAST
argument_list|(
name|window
argument_list|)
decl_stmt|;
specifier|final
name|ASTNode
name|wRangeAst
init|=
name|getWindowRangeAST
argument_list|(
name|window
argument_list|)
decl_stmt|;
if|if
condition|(
name|wPSpecAst
operator|!=
literal|null
condition|)
name|wSpec
operator|.
name|addChild
argument_list|(
name|wPSpecAst
argument_list|)
expr_stmt|;
if|if
condition|(
name|wRangeAst
operator|!=
literal|null
condition|)
name|wSpec
operator|.
name|addChild
argument_list|(
name|wRangeAst
argument_list|)
expr_stmt|;
return|return
name|wUDAFAst
return|;
block|}
annotation|@
name|Override
specifier|public
name|ASTNode
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
if|if
condition|(
operator|!
name|deep
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SqlOperator
name|op
init|=
name|call
operator|.
name|getOperator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ASTNode
argument_list|>
name|astNodeLst
init|=
operator|new
name|LinkedList
argument_list|<
name|ASTNode
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|kind
operator|==
name|SqlKind
operator|.
name|CAST
condition|)
block|{
name|HiveToken
name|ht
init|=
name|TypeConverter
operator|.
name|hiveToken
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|ASTBuilder
name|astBldr
init|=
name|ASTBuilder
operator|.
name|construct
argument_list|(
name|ht
operator|.
name|type
argument_list|,
name|ht
operator|.
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|ht
operator|.
name|args
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|castArg
range|:
name|ht
operator|.
name|args
control|)
name|astBldr
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|Identifier
argument_list|,
name|castArg
argument_list|)
expr_stmt|;
block|}
name|astNodeLst
operator|.
name|add
argument_list|(
name|astBldr
operator|.
name|node
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|op
operator|.
name|kind
operator|==
name|SqlKind
operator|.
name|EXTRACT
condition|)
block|{
comment|// Extract on date: special handling since function in Hive does
comment|// include<time_unit>. Observe that<time_unit> information
comment|// is implicit in the function name, thus translation will
comment|// proceed correctly if we just ignore the<time_unit>
name|astNodeLst
operator|.
name|add
argument_list|(
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|accept
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|.
name|kind
operator|==
name|SqlKind
operator|.
name|FLOOR
operator|&&
name|call
operator|.
name|operands
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
comment|// Floor on date: special handling since function in Hive does
comment|// include<time_unit>. Observe that<time_unit> information
comment|// is implicit in the function name, thus translation will
comment|// proceed correctly if we just ignore the<time_unit>
name|astNodeLst
operator|.
name|add
argument_list|(
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|accept
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|RexNode
name|operand
range|:
name|call
operator|.
name|operands
control|)
block|{
name|astNodeLst
operator|.
name|add
argument_list|(
name|operand
operator|.
name|accept
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isFlat
argument_list|(
name|call
argument_list|)
condition|)
block|{
return|return
name|SqlFunctionConverter
operator|.
name|buildAST
argument_list|(
name|op
argument_list|,
name|astNodeLst
argument_list|,
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|SqlFunctionConverter
operator|.
name|buildAST
argument_list|(
name|op
argument_list|,
name|astNodeLst
argument_list|)
return|;
block|}
block|}
block|}
specifier|static
class|class
name|QueryBlockInfo
block|{
name|Schema
name|schema
decl_stmt|;
name|ASTNode
name|ast
decl_stmt|;
specifier|public
name|QueryBlockInfo
parameter_list|(
name|Schema
name|schema
parameter_list|,
name|ASTNode
name|ast
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|ast
operator|=
name|ast
expr_stmt|;
block|}
block|}
comment|/*    * represents the schema exposed by a QueryBlock.    */
specifier|static
class|class
name|Schema
extends|extends
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
name|Schema
parameter_list|(
name|TableScan
name|scan
parameter_list|)
block|{
name|HiveTableScan
name|hts
init|=
operator|(
name|HiveTableScan
operator|)
name|scan
decl_stmt|;
name|String
name|tabName
init|=
name|hts
operator|.
name|getTableAlias
argument_list|()
decl_stmt|;
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|scan
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
control|)
block|{
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
name|tabName
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Schema
parameter_list|(
name|DruidQuery
name|dq
parameter_list|)
block|{
name|HiveTableScan
name|hts
init|=
call|(
name|HiveTableScan
call|)
argument_list|(
operator|(
name|DruidQuery
operator|)
name|dq
argument_list|)
operator|.
name|getTableScan
argument_list|()
decl_stmt|;
name|String
name|tabName
init|=
name|hts
operator|.
name|getTableAlias
argument_list|()
decl_stmt|;
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|dq
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
control|)
block|{
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
name|tabName
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Schema
parameter_list|(
name|Project
name|select
parameter_list|,
name|String
name|alias
parameter_list|)
block|{
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|select
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
control|)
block|{
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
name|alias
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Schema
parameter_list|(
name|TableFunctionScan
name|select
parameter_list|,
name|String
name|alias
parameter_list|)
block|{
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|select
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
control|)
block|{
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
name|alias
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Schema
parameter_list|(
name|Union
name|unionRel
parameter_list|,
name|String
name|alias
parameter_list|)
block|{
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|unionRel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
control|)
block|{
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
name|alias
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Schema
parameter_list|(
name|Schema
name|left
parameter_list|,
name|Schema
name|right
parameter_list|)
block|{
for|for
control|(
name|ColumnInfo
name|cI
range|:
name|Iterables
operator|.
name|concat
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
control|)
block|{
name|add
argument_list|(
name|cI
argument_list|)
expr_stmt|;
block|}
block|}
name|Schema
parameter_list|(
name|Schema
name|src
parameter_list|,
name|Aggregate
name|gBy
parameter_list|)
block|{
for|for
control|(
name|int
name|i
range|:
name|gBy
operator|.
name|getGroupSet
argument_list|()
control|)
block|{
name|ColumnInfo
name|cI
init|=
name|src
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|cI
argument_list|)
expr_stmt|;
block|}
comment|// If we are using grouping sets, we add the
comment|// fields again, these correspond to the boolean
comment|// grouping in Calcite. They are not used by Hive.
if|if
condition|(
name|gBy
operator|.
name|indicator
condition|)
block|{
for|for
control|(
name|int
name|i
range|:
name|gBy
operator|.
name|getGroupSet
argument_list|()
control|)
block|{
name|ColumnInfo
name|cI
init|=
name|src
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|cI
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggs
init|=
name|gBy
operator|.
name|getAggCallList
argument_list|()
decl_stmt|;
for|for
control|(
name|AggregateCall
name|agg
range|:
name|aggs
control|)
block|{
if|if
condition|(
name|agg
operator|.
name|getAggregation
argument_list|()
operator|==
name|HiveGroupingID
operator|.
name|INSTANCE
condition|)
block|{
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
literal|null
argument_list|,
name|VirtualColumn
operator|.
name|GROUPINGID
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|int
name|argCount
init|=
name|agg
operator|.
name|getArgList
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|ASTBuilder
name|b
init|=
name|agg
operator|.
name|isDistinct
argument_list|()
condition|?
name|ASTBuilder
operator|.
name|construct
argument_list|(
name|HiveParser
operator|.
name|TOK_FUNCTIONDI
argument_list|,
literal|"TOK_FUNCTIONDI"
argument_list|)
else|:
name|argCount
operator|==
literal|0
condition|?
name|ASTBuilder
operator|.
name|construct
argument_list|(
name|HiveParser
operator|.
name|TOK_FUNCTIONSTAR
argument_list|,
literal|"TOK_FUNCTIONSTAR"
argument_list|)
else|:
name|ASTBuilder
operator|.
name|construct
argument_list|(
name|HiveParser
operator|.
name|TOK_FUNCTION
argument_list|,
literal|"TOK_FUNCTION"
argument_list|)
decl_stmt|;
name|b
operator|.
name|add
argument_list|(
name|HiveParser
operator|.
name|Identifier
argument_list|,
name|agg
operator|.
name|getAggregation
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
range|:
name|agg
operator|.
name|getArgList
argument_list|()
control|)
block|{
name|RexInputRef
name|iRef
init|=
operator|new
name|RexInputRef
argument_list|(
name|i
argument_list|,
name|gBy
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|ANY
argument_list|)
argument_list|)
decl_stmt|;
name|b
operator|.
name|add
argument_list|(
name|iRef
operator|.
name|accept
argument_list|(
operator|new
name|RexVisitor
argument_list|(
name|src
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
literal|null
argument_list|,
name|b
operator|.
name|node
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Assumption:<br>      * 1. Project will always be child of Sort.<br>      * 2. In Calcite every projection in Project is uniquely named      * (unambigous) without using table qualifier (table name).<br>      *      * @param order      *          Hive Sort Node      * @return Schema      */
specifier|public
name|Schema
parameter_list|(
name|HiveSortLimit
name|order
parameter_list|)
block|{
name|Project
name|select
init|=
operator|(
name|Project
operator|)
name|order
operator|.
name|getInput
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|projName
range|:
name|select
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
control|)
block|{
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
literal|null
argument_list|,
name|projName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Schema
parameter_list|(
name|String
name|tabAlias
parameter_list|,
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|fieldList
parameter_list|)
block|{
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|fieldList
control|)
block|{
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
name|tabAlias
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * represents Column information exposed by a QueryBlock.    */
specifier|static
class|class
name|ColumnInfo
block|{
name|String
name|table
decl_stmt|;
name|String
name|column
decl_stmt|;
name|ASTNode
name|agg
decl_stmt|;
name|ColumnInfo
parameter_list|(
name|String
name|table
parameter_list|,
name|String
name|column
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
block|}
name|ColumnInfo
parameter_list|(
name|String
name|table
parameter_list|,
name|ASTNode
name|agg
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|agg
operator|=
name|agg
expr_stmt|;
block|}
name|ColumnInfo
parameter_list|(
name|String
name|alias
parameter_list|,
name|ColumnInfo
name|srcCol
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|alias
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|srcCol
operator|.
name|column
expr_stmt|;
name|this
operator|.
name|agg
operator|=
name|srcCol
operator|.
name|agg
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|nextAlias
parameter_list|()
block|{
name|String
name|tabAlias
init|=
name|String
operator|.
name|format
argument_list|(
literal|"$hdt$_%d"
argument_list|,
name|derivedTableCount
argument_list|)
decl_stmt|;
name|derivedTableCount
operator|++
expr_stmt|;
return|return
name|tabAlias
return|;
block|}
specifier|static
class|class
name|HiveAST
block|{
name|ASTNode
name|from
decl_stmt|;
name|ASTNode
name|where
decl_stmt|;
name|ASTNode
name|groupBy
decl_stmt|;
name|ASTNode
name|having
decl_stmt|;
name|ASTNode
name|select
decl_stmt|;
name|ASTNode
name|order
decl_stmt|;
name|ASTNode
name|limit
decl_stmt|;
specifier|public
name|ASTNode
name|getAST
parameter_list|()
block|{
name|ASTBuilder
name|b
init|=
name|ASTBuilder
operator|.
name|construct
argument_list|(
name|HiveParser
operator|.
name|TOK_QUERY
argument_list|,
literal|"TOK_QUERY"
argument_list|)
operator|.
name|add
argument_list|(
name|from
argument_list|)
operator|.
name|add
argument_list|(
name|ASTBuilder
operator|.
name|construct
argument_list|(
name|HiveParser
operator|.
name|TOK_INSERT
argument_list|,
literal|"TOK_INSERT"
argument_list|)
operator|.
name|add
argument_list|(
name|ASTBuilder
operator|.
name|destNode
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|select
argument_list|)
operator|.
name|add
argument_list|(
name|where
argument_list|)
operator|.
name|add
argument_list|(
name|groupBy
argument_list|)
operator|.
name|add
argument_list|(
name|having
argument_list|)
operator|.
name|add
argument_list|(
name|order
argument_list|)
operator|.
name|add
argument_list|(
name|limit
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|b
operator|.
name|node
argument_list|()
return|;
block|}
block|}
specifier|public
name|ASTNode
name|getUnionAllAST
parameter_list|(
name|ASTNode
name|leftAST
parameter_list|,
name|ASTNode
name|rightAST
parameter_list|)
block|{
name|ASTNode
name|unionTokAST
init|=
name|ASTBuilder
operator|.
name|construct
argument_list|(
name|HiveParser
operator|.
name|TOK_UNIONALL
argument_list|,
literal|"TOK_UNIONALL"
argument_list|)
operator|.
name|add
argument_list|(
name|leftAST
argument_list|)
operator|.
name|add
argument_list|(
name|rightAST
argument_list|)
operator|.
name|node
argument_list|()
decl_stmt|;
return|return
name|unionTokAST
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isFlat
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
name|boolean
name|flat
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|call
operator|.
name|operands
operator|!=
literal|null
operator|&&
name|call
operator|.
name|operands
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|)
block|{
name|SqlOperator
name|op
init|=
name|call
operator|.
name|getOperator
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|AND
operator|||
name|op
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|OR
condition|)
block|{
name|flat
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|flat
return|;
block|}
block|}
end_class

end_unit

