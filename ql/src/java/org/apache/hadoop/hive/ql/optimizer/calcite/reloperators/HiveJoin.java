begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|InvalidRelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistribution
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
operator|.
name|JoinFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableIntList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
operator|.
name|JoinPredicateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|TraitsUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|cost
operator|.
name|HiveCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|cost
operator|.
name|HiveCostUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|//TODO: Should we convert MultiJoin to be a child of HiveJoin
end_comment

begin_class
specifier|public
class|class
name|HiveJoin
extends|extends
name|Join
implements|implements
name|HiveRelNode
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HiveJoin
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// NOTE: COMMON_JOIN& SMB_JOIN are Sort Merge Join (in case of COMMON_JOIN
comment|// each parallel computation handles multiple splits where as in case of SMB
comment|// each parallel computation handles one bucket). MAP_JOIN and BUCKET_JOIN is
comment|// hash joins where MAP_JOIN keeps the whole data set of non streaming tables
comment|// in memory where as BUCKET_JOIN keeps only the b
specifier|public
enum|enum
name|JoinAlgorithm
block|{
name|NONE
block|,
name|COMMON_JOIN
block|,
name|MAP_JOIN
block|,
name|BUCKET_JOIN
block|,
name|SMB_JOIN
block|}
specifier|public
enum|enum
name|MapJoinStreamingRelation
block|{
name|NONE
block|,
name|LEFT_RELATION
block|,
name|RIGHT_RELATION
block|}
specifier|public
specifier|static
specifier|final
name|JoinFactory
name|HIVE_JOIN_FACTORY
init|=
operator|new
name|HiveJoinFactoryImpl
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Double
name|maxMemory
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|leftSemiJoin
decl_stmt|;
specifier|private
name|JoinAlgorithm
name|joinAlgorithm
decl_stmt|;
specifier|private
name|MapJoinStreamingRelation
name|mapJoinStreamingSide
decl_stmt|;
specifier|private
name|RelOptCost
name|joinCost
decl_stmt|;
comment|// Whether inputs are already sorted
specifier|private
name|ImmutableBitSet
name|sortedInputs
decl_stmt|;
specifier|public
specifier|static
name|HiveJoin
name|getJoin
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|,
name|boolean
name|leftSemiJoin
parameter_list|)
block|{
try|try
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|variablesStopped
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
return|return
operator|new
name|HiveJoin
argument_list|(
name|cluster
argument_list|,
literal|null
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|condition
argument_list|,
name|joinType
argument_list|,
name|variablesStopped
argument_list|,
name|JoinAlgorithm
operator|.
name|NONE
argument_list|,
name|MapJoinStreamingRelation
operator|.
name|NONE
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|,
name|leftSemiJoin
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|HiveJoin
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|variablesStopped
parameter_list|,
name|JoinAlgorithm
name|joinAlgo
parameter_list|,
name|MapJoinStreamingRelation
name|streamingSideForMapJoin
parameter_list|,
name|ImmutableBitSet
name|sortedInputs
parameter_list|,
name|boolean
name|leftSemiJoin
parameter_list|)
throws|throws
name|InvalidRelException
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|TraitsUtil
operator|.
name|getDefaultTraitSet
argument_list|(
name|cluster
argument_list|)
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|condition
argument_list|,
name|joinType
argument_list|,
name|variablesStopped
argument_list|)
expr_stmt|;
name|this
operator|.
name|joinAlgorithm
operator|=
name|joinAlgo
expr_stmt|;
name|this
operator|.
name|mapJoinStreamingSide
operator|=
name|streamingSideForMapJoin
expr_stmt|;
name|this
operator|.
name|sortedInputs
operator|=
name|sortedInputs
expr_stmt|;
name|this
operator|.
name|leftSemiJoin
operator|=
name|leftSemiJoin
expr_stmt|;
name|this
operator|.
name|maxMemory
operator|=
operator|(
name|double
operator|)
name|HiveConf
operator|.
name|getLongVar
argument_list|(
name|cluster
operator|.
name|getPlanner
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|unwrap
argument_list|(
name|HiveConf
operator|.
name|class
argument_list|)
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVECONVERTJOINNOCONDITIONALTASKTHRESHOLD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|implement
parameter_list|(
name|Implementor
name|implementor
parameter_list|)
block|{   }
annotation|@
name|Override
specifier|public
specifier|final
name|HiveJoin
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RexNode
name|conditionExpr
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|,
name|boolean
name|semiJoinDone
parameter_list|)
block|{
try|try
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|variablesStopped
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
return|return
operator|new
name|HiveJoin
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|conditionExpr
argument_list|,
name|joinType
argument_list|,
name|variablesStopped
argument_list|,
name|joinAlgorithm
argument_list|,
name|mapJoinStreamingSide
argument_list|,
name|sortedInputs
argument_list|,
name|leftSemiJoin
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidRelException
name|e
parameter_list|)
block|{
comment|// Semantic error not possible. Must be a bug. Convert to
comment|// internal error.
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|JoinAlgorithm
name|getJoinAlgorithm
parameter_list|()
block|{
return|return
name|joinAlgorithm
return|;
block|}
specifier|public
name|MapJoinStreamingRelation
name|getMapJoinStreamingSide
parameter_list|()
block|{
return|return
name|mapJoinStreamingSide
return|;
block|}
specifier|public
name|boolean
name|isLeftSemiJoin
parameter_list|()
block|{
return|return
name|leftSemiJoin
return|;
block|}
comment|/**    * Model cost of join as size of Inputs.    */
annotation|@
name|Override
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{
name|this
operator|.
name|joinCost
operator|=
name|chooseJoinAlgorithmAndGetCost
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|joinCost
return|;
block|}
specifier|private
name|RelOptCost
name|chooseJoinAlgorithmAndGetCost
parameter_list|()
block|{
comment|// 1. Choose streaming side
name|chooseStreamingSide
argument_list|()
expr_stmt|;
comment|// 2. Store order inputs
name|checkInputsCorrectOrder
argument_list|()
expr_stmt|;
comment|// 3. Get possible algorithms
name|Set
argument_list|<
name|JoinAlgorithm
argument_list|>
name|possibleAlgorithms
init|=
name|obtainJoinAlgorithms
argument_list|()
decl_stmt|;
comment|// 4. For each possible algorithm, calculate cost, and select best
name|RelOptCost
name|selfCost
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Join algorithm selection for: "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|JoinAlgorithm
name|possibleAlgorithm
range|:
name|possibleAlgorithms
control|)
block|{
switch|switch
condition|(
name|possibleAlgorithm
condition|)
block|{
case|case
name|COMMON_JOIN
case|:
name|RelOptCost
name|commonJoinCost
init|=
name|computeSelfCostCommonJoin
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|JoinAlgorithm
operator|.
name|COMMON_JOIN
operator|+
literal|" cost: "
operator|+
name|commonJoinCost
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|selfCost
operator|==
literal|null
operator|||
name|commonJoinCost
operator|.
name|isLt
argument_list|(
name|selfCost
argument_list|)
condition|)
block|{
name|this
operator|.
name|joinAlgorithm
operator|=
name|JoinAlgorithm
operator|.
name|COMMON_JOIN
expr_stmt|;
name|selfCost
operator|=
name|commonJoinCost
expr_stmt|;
block|}
break|break;
case|case
name|MAP_JOIN
case|:
name|RelOptCost
name|mapJoinCost
init|=
name|computeSelfCostMapJoin
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|JoinAlgorithm
operator|.
name|MAP_JOIN
operator|+
literal|" cost: "
operator|+
name|mapJoinCost
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|selfCost
operator|==
literal|null
operator|||
name|mapJoinCost
operator|.
name|isLt
argument_list|(
name|selfCost
argument_list|)
condition|)
block|{
name|this
operator|.
name|joinAlgorithm
operator|=
name|JoinAlgorithm
operator|.
name|MAP_JOIN
expr_stmt|;
name|selfCost
operator|=
name|mapJoinCost
expr_stmt|;
block|}
break|break;
case|case
name|BUCKET_JOIN
case|:
name|RelOptCost
name|bucketJoinCost
init|=
name|computeSelfCostBucketJoin
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|JoinAlgorithm
operator|.
name|BUCKET_JOIN
operator|+
literal|" cost: "
operator|+
name|bucketJoinCost
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|selfCost
operator|==
literal|null
operator|||
name|bucketJoinCost
operator|.
name|isLt
argument_list|(
name|selfCost
argument_list|)
condition|)
block|{
name|this
operator|.
name|joinAlgorithm
operator|=
name|JoinAlgorithm
operator|.
name|BUCKET_JOIN
expr_stmt|;
name|selfCost
operator|=
name|bucketJoinCost
expr_stmt|;
block|}
break|break;
case|case
name|SMB_JOIN
case|:
name|RelOptCost
name|smbJoinCost
init|=
name|computeSelfCostSMBJoin
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|JoinAlgorithm
operator|.
name|SMB_JOIN
operator|+
literal|" cost: "
operator|+
name|smbJoinCost
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|selfCost
operator|==
literal|null
operator|||
name|smbJoinCost
operator|.
name|isLt
argument_list|(
name|selfCost
argument_list|)
condition|)
block|{
name|this
operator|.
name|joinAlgorithm
operator|=
name|JoinAlgorithm
operator|.
name|SMB_JOIN
expr_stmt|;
name|selfCost
operator|=
name|smbJoinCost
expr_stmt|;
block|}
break|break;
default|default:
comment|//TODO: Exception
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|this
operator|.
name|joinAlgorithm
operator|+
literal|" selected"
argument_list|)
expr_stmt|;
block|}
return|return
name|selfCost
return|;
block|}
specifier|private
name|void
name|chooseStreamingSide
parameter_list|()
block|{
name|Double
name|leftInputSize
init|=
name|RelMetadataQuery
operator|.
name|memory
argument_list|(
name|this
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
name|Double
name|rightInputSize
init|=
name|RelMetadataQuery
operator|.
name|memory
argument_list|(
name|this
operator|.
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftInputSize
operator|==
literal|null
operator|&&
name|rightInputSize
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|mapJoinStreamingSide
operator|=
name|MapJoinStreamingRelation
operator|.
name|NONE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|leftInputSize
operator|!=
literal|null
operator|&&
operator|(
name|rightInputSize
operator|==
literal|null
operator|||
operator|(
name|leftInputSize
operator|<
name|rightInputSize
operator|)
operator|)
condition|)
block|{
name|this
operator|.
name|mapJoinStreamingSide
operator|=
name|MapJoinStreamingRelation
operator|.
name|RIGHT_RELATION
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rightInputSize
operator|!=
literal|null
operator|&&
operator|(
name|leftInputSize
operator|==
literal|null
operator|||
operator|(
name|rightInputSize
operator|<=
name|leftInputSize
operator|)
operator|)
condition|)
block|{
name|this
operator|.
name|mapJoinStreamingSide
operator|=
name|MapJoinStreamingRelation
operator|.
name|LEFT_RELATION
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkInputsCorrectOrder
parameter_list|()
block|{
name|JoinPredicateInfo
name|joinPredInfo
init|=
name|HiveCalciteUtil
operator|.
name|JoinPredicateInfo
operator|.
name|constructJoinPredicateInfo
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ImmutableIntList
argument_list|>
name|joinKeysInChildren
init|=
operator|new
name|ArrayList
argument_list|<
name|ImmutableIntList
argument_list|>
argument_list|()
decl_stmt|;
name|joinKeysInChildren
operator|.
name|add
argument_list|(
name|ImmutableIntList
operator|.
name|copyOf
argument_list|(
name|joinPredInfo
operator|.
name|getProjsFromLeftPartOfJoinKeysInChildSchema
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|joinKeysInChildren
operator|.
name|add
argument_list|(
name|ImmutableIntList
operator|.
name|copyOf
argument_list|(
name|joinPredInfo
operator|.
name|getProjsFromRightPartOfJoinKeysInChildSchema
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|correctOrderFound
init|=
name|RelCollations
operator|.
name|contains
argument_list|(
name|RelMetadataQuery
operator|.
name|collations
argument_list|(
name|getInputs
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|joinKeysInChildren
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|correctOrderFound
condition|)
block|{
name|sortedInputs
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Set
argument_list|<
name|JoinAlgorithm
argument_list|>
name|obtainJoinAlgorithms
parameter_list|()
block|{
name|Set
argument_list|<
name|JoinAlgorithm
argument_list|>
name|possibleAlgorithms
init|=
operator|new
name|HashSet
argument_list|<
name|JoinAlgorithm
argument_list|>
argument_list|()
decl_stmt|;
comment|// Check streaming side
name|RelNode
name|smallInput
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|mapJoinStreamingSide
operator|==
name|MapJoinStreamingRelation
operator|.
name|LEFT_RELATION
condition|)
block|{
name|smallInput
operator|=
name|this
operator|.
name|getRight
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|mapJoinStreamingSide
operator|==
name|MapJoinStreamingRelation
operator|.
name|RIGHT_RELATION
condition|)
block|{
name|smallInput
operator|=
name|this
operator|.
name|getLeft
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|smallInput
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|smallInput
operator|!=
literal|null
condition|)
block|{
comment|// Requirements:
comment|// - For SMB, sorted by their keys on both sides and bucketed.
comment|// - For Bucket, bucketed by their keys on both sides. / Fitting in memory
comment|// - For Map, no additional requirement. / Fitting in memory
comment|// Get key columns
name|JoinPredicateInfo
name|joinPredInfo
init|=
name|HiveCalciteUtil
operator|.
name|JoinPredicateInfo
operator|.
name|constructJoinPredicateInfo
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ImmutableIntList
argument_list|>
name|joinKeysInChildren
init|=
operator|new
name|ArrayList
argument_list|<
name|ImmutableIntList
argument_list|>
argument_list|()
decl_stmt|;
name|joinKeysInChildren
operator|.
name|add
argument_list|(
name|ImmutableIntList
operator|.
name|copyOf
argument_list|(
name|joinPredInfo
operator|.
name|getProjsFromLeftPartOfJoinKeysInChildSchema
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|joinKeysInChildren
operator|.
name|add
argument_list|(
name|ImmutableIntList
operator|.
name|copyOf
argument_list|(
name|joinPredInfo
operator|.
name|getProjsFromRightPartOfJoinKeysInChildSchema
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Obtain number of buckets
name|Integer
name|buckets
init|=
name|RelMetadataQuery
operator|.
name|splitCount
argument_list|(
name|smallInput
argument_list|)
decl_stmt|;
comment|// Obtain map algorithms for which smallest input fits in memory
name|boolean
name|bucketFitsMemory
init|=
literal|false
decl_stmt|;
name|boolean
name|inputFitsMemory
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|buckets
operator|!=
literal|null
condition|)
block|{
name|bucketFitsMemory
operator|=
name|isFittingIntoMemory
argument_list|(
name|this
operator|.
name|maxMemory
argument_list|,
name|smallInput
argument_list|,
name|buckets
argument_list|)
expr_stmt|;
block|}
name|inputFitsMemory
operator|=
name|bucketFitsMemory
condition|?
name|isFittingIntoMemory
argument_list|(
name|this
operator|.
name|maxMemory
argument_list|,
name|smallInput
argument_list|,
literal|1
argument_list|)
else|:
literal|false
expr_stmt|;
name|boolean
name|orderedBucketed
init|=
literal|true
decl_stmt|;
name|boolean
name|bucketed
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RelNode
name|input
init|=
name|getInputs
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Is smbJoin possible? We need correct order
if|if
condition|(
name|orderedBucketed
condition|)
block|{
name|boolean
name|orderFound
init|=
name|sortedInputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|orderFound
condition|)
block|{
name|orderedBucketed
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|// Is smbJoin or bucketJoin possible? We need correct bucketing
if|if
condition|(
name|bucketFitsMemory
operator|&&
name|bucketed
condition|)
block|{
name|RelDistribution
name|distribution
init|=
name|RelMetadataQuery
operator|.
name|distribution
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|distribution
operator|.
name|getType
argument_list|()
operator|!=
name|Type
operator|.
name|HASH_DISTRIBUTED
condition|)
block|{
name|orderedBucketed
operator|=
literal|false
expr_stmt|;
name|bucketed
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|distribution
operator|.
name|getKeys
argument_list|()
operator|.
name|containsAll
argument_list|(
name|joinKeysInChildren
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|orderedBucketed
operator|=
literal|false
expr_stmt|;
name|bucketed
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
comment|// Add chosen map join algorithm
if|if
condition|(
name|orderedBucketed
condition|)
block|{
name|possibleAlgorithms
operator|.
name|add
argument_list|(
name|JoinAlgorithm
operator|.
name|SMB_JOIN
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bucketFitsMemory
operator|&&
name|bucketed
condition|)
block|{
name|possibleAlgorithms
operator|.
name|add
argument_list|(
name|JoinAlgorithm
operator|.
name|BUCKET_JOIN
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inputFitsMemory
condition|)
block|{
name|possibleAlgorithms
operator|.
name|add
argument_list|(
name|JoinAlgorithm
operator|.
name|MAP_JOIN
argument_list|)
expr_stmt|;
block|}
block|}
comment|// A reduce side (common) join does not have special
comment|// requirements.
name|possibleAlgorithms
operator|.
name|add
argument_list|(
name|JoinAlgorithm
operator|.
name|COMMON_JOIN
argument_list|)
expr_stmt|;
return|return
name|possibleAlgorithms
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isFittingIntoMemory
parameter_list|(
name|Double
name|maxSize
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|int
name|buckets
parameter_list|)
block|{
name|Double
name|currentMemory
init|=
name|RelMetadataQuery
operator|.
name|cumulativeMemoryWithinPhase
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentMemory
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|currentMemory
operator|/
name|buckets
operator|>
name|maxSize
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|RelOptCost
name|computeSelfCostCommonJoin
parameter_list|()
block|{
comment|// 1. Sum of input cardinalities
specifier|final
name|Double
name|leftRCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Double
name|rightRCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftRCount
operator|==
literal|null
operator|||
name|rightRCount
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|double
name|rCount
init|=
name|leftRCount
operator|+
name|rightRCount
decl_stmt|;
comment|// 2. CPU cost = sorting cost (for each relation) +
comment|//               total merge cost
name|ImmutableList
argument_list|<
name|Double
argument_list|>
name|cardinalities
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Double
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
name|leftRCount
argument_list|)
operator|.
name|add
argument_list|(
name|rightRCount
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|double
name|cpuCost
init|=
name|HiveCostUtil
operator|.
name|computeSortMergeCPUCost
argument_list|(
name|cardinalities
argument_list|,
name|sortedInputs
argument_list|)
decl_stmt|;
comment|// 3. IO cost = cost of writing intermediary results to local FS +
comment|//              cost of reading from local FS for transferring to join +
comment|//              cost of transferring map outputs to Join operator
specifier|final
name|Double
name|leftRAverageSize
init|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Double
name|rightRAverageSize
init|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftRAverageSize
operator|==
literal|null
operator|||
name|rightRAverageSize
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ImmutableList
argument_list|<
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
name|relationInfos
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|(
name|leftRCount
argument_list|,
name|leftRAverageSize
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|(
name|rightRCount
argument_list|,
name|rightRAverageSize
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|double
name|ioCost
init|=
name|HiveCostUtil
operator|.
name|computeSortMergeIOCost
argument_list|(
name|relationInfos
argument_list|)
decl_stmt|;
comment|// 4. Result
return|return
name|HiveCost
operator|.
name|FACTORY
operator|.
name|makeCost
argument_list|(
name|rCount
argument_list|,
name|cpuCost
argument_list|,
name|ioCost
argument_list|)
return|;
block|}
specifier|private
name|RelOptCost
name|computeSelfCostMapJoin
parameter_list|()
block|{
comment|// 1. Sum of input cardinalities
specifier|final
name|Double
name|leftRCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Double
name|rightRCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftRCount
operator|==
literal|null
operator|||
name|rightRCount
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|double
name|rCount
init|=
name|leftRCount
operator|+
name|rightRCount
decl_stmt|;
comment|// 2. CPU cost = HashTable  construction  cost  +
comment|//               join cost
name|ImmutableList
argument_list|<
name|Double
argument_list|>
name|cardinalities
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Double
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
name|leftRCount
argument_list|)
operator|.
name|add
argument_list|(
name|rightRCount
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableBitSet
operator|.
name|Builder
name|streamingBuilder
init|=
operator|new
name|ImmutableBitSet
operator|.
name|Builder
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|mapJoinStreamingSide
condition|)
block|{
case|case
name|LEFT_RELATION
case|:
name|streamingBuilder
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|RIGHT_RELATION
case|:
name|streamingBuilder
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
break|break;
default|default:
return|return
literal|null
return|;
block|}
name|ImmutableBitSet
name|streaming
init|=
name|streamingBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|double
name|cpuCost
init|=
name|HiveCostUtil
operator|.
name|computeMapJoinCPUCost
argument_list|(
name|cardinalities
argument_list|,
name|streaming
argument_list|)
decl_stmt|;
comment|// 3. IO cost = cost of transferring small tables to join node *
comment|//              degree of parallelism
specifier|final
name|Double
name|leftRAverageSize
init|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Double
name|rightRAverageSize
init|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftRAverageSize
operator|==
literal|null
operator|||
name|rightRAverageSize
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ImmutableList
argument_list|<
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
name|relationInfos
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|(
name|leftRCount
argument_list|,
name|leftRAverageSize
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|(
name|rightRCount
argument_list|,
name|rightRAverageSize
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|int
name|parallelism
init|=
name|RelMetadataQuery
operator|.
name|splitCount
argument_list|(
name|this
argument_list|)
operator|==
literal|null
condition|?
literal|1
else|:
name|RelMetadataQuery
operator|.
name|splitCount
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|final
name|double
name|ioCost
init|=
name|HiveCostUtil
operator|.
name|computeMapJoinIOCost
argument_list|(
name|relationInfos
argument_list|,
name|streaming
argument_list|,
name|parallelism
argument_list|)
decl_stmt|;
comment|// 4. Result
return|return
name|HiveCost
operator|.
name|FACTORY
operator|.
name|makeCost
argument_list|(
name|rCount
argument_list|,
name|cpuCost
argument_list|,
name|ioCost
argument_list|)
return|;
block|}
specifier|private
name|RelOptCost
name|computeSelfCostBucketJoin
parameter_list|()
block|{
comment|// 1. Sum of input cardinalities
specifier|final
name|Double
name|leftRCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Double
name|rightRCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftRCount
operator|==
literal|null
operator|||
name|rightRCount
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|double
name|rCount
init|=
name|leftRCount
operator|+
name|rightRCount
decl_stmt|;
comment|// 2. CPU cost = HashTable  construction  cost  +
comment|//               join cost
name|ImmutableList
argument_list|<
name|Double
argument_list|>
name|cardinalities
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Double
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
name|leftRCount
argument_list|)
operator|.
name|add
argument_list|(
name|rightRCount
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableBitSet
operator|.
name|Builder
name|streamingBuilder
init|=
operator|new
name|ImmutableBitSet
operator|.
name|Builder
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|mapJoinStreamingSide
condition|)
block|{
case|case
name|LEFT_RELATION
case|:
name|streamingBuilder
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|RIGHT_RELATION
case|:
name|streamingBuilder
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
break|break;
default|default:
return|return
literal|null
return|;
block|}
name|ImmutableBitSet
name|streaming
init|=
name|streamingBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|double
name|cpuCost
init|=
name|HiveCostUtil
operator|.
name|computeBucketMapJoinCPUCost
argument_list|(
name|cardinalities
argument_list|,
name|streaming
argument_list|)
decl_stmt|;
comment|// 3. IO cost = cost of transferring small tables to join node *
comment|//              degree of parallelism
specifier|final
name|Double
name|leftRAverageSize
init|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Double
name|rightRAverageSize
init|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftRAverageSize
operator|==
literal|null
operator|||
name|rightRAverageSize
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ImmutableList
argument_list|<
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
name|relationInfos
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|(
name|leftRCount
argument_list|,
name|leftRAverageSize
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|(
name|rightRCount
argument_list|,
name|rightRAverageSize
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|int
name|parallelism
init|=
name|RelMetadataQuery
operator|.
name|splitCount
argument_list|(
name|this
argument_list|)
operator|==
literal|null
condition|?
literal|1
else|:
name|RelMetadataQuery
operator|.
name|splitCount
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|final
name|double
name|ioCost
init|=
name|HiveCostUtil
operator|.
name|computeBucketMapJoinIOCost
argument_list|(
name|relationInfos
argument_list|,
name|streaming
argument_list|,
name|parallelism
argument_list|)
decl_stmt|;
comment|// 4. Result
return|return
name|HiveCost
operator|.
name|FACTORY
operator|.
name|makeCost
argument_list|(
name|rCount
argument_list|,
name|cpuCost
argument_list|,
name|ioCost
argument_list|)
return|;
block|}
specifier|private
name|RelOptCost
name|computeSelfCostSMBJoin
parameter_list|()
block|{
comment|// 1. Sum of input cardinalities
specifier|final
name|Double
name|leftRCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Double
name|rightRCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftRCount
operator|==
literal|null
operator|||
name|rightRCount
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|double
name|rCount
init|=
name|leftRCount
operator|+
name|rightRCount
decl_stmt|;
comment|// 2. CPU cost = HashTable  construction  cost  +
comment|//               join cost
name|ImmutableList
argument_list|<
name|Double
argument_list|>
name|cardinalities
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Double
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
name|leftRCount
argument_list|)
operator|.
name|add
argument_list|(
name|rightRCount
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableBitSet
operator|.
name|Builder
name|streamingBuilder
init|=
operator|new
name|ImmutableBitSet
operator|.
name|Builder
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|mapJoinStreamingSide
condition|)
block|{
case|case
name|LEFT_RELATION
case|:
name|streamingBuilder
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|RIGHT_RELATION
case|:
name|streamingBuilder
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
break|break;
default|default:
return|return
literal|null
return|;
block|}
name|ImmutableBitSet
name|streaming
init|=
name|streamingBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|double
name|cpuCost
init|=
name|HiveCostUtil
operator|.
name|computeSMBMapJoinCPUCost
argument_list|(
name|cardinalities
argument_list|)
decl_stmt|;
comment|// 3. IO cost = cost of transferring small tables to join node *
comment|//              degree of parallelism
specifier|final
name|Double
name|leftRAverageSize
init|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Double
name|rightRAverageSize
init|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftRAverageSize
operator|==
literal|null
operator|||
name|rightRAverageSize
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ImmutableList
argument_list|<
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
name|relationInfos
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|(
name|leftRCount
argument_list|,
name|leftRAverageSize
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|(
name|rightRCount
argument_list|,
name|rightRAverageSize
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|int
name|parallelism
init|=
name|RelMetadataQuery
operator|.
name|splitCount
argument_list|(
name|this
argument_list|)
operator|==
literal|null
condition|?
literal|1
else|:
name|RelMetadataQuery
operator|.
name|splitCount
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|final
name|double
name|ioCost
init|=
name|HiveCostUtil
operator|.
name|computeSMBMapJoinIOCost
argument_list|(
name|relationInfos
argument_list|,
name|streaming
argument_list|,
name|parallelism
argument_list|)
decl_stmt|;
comment|// 4. Result
return|return
name|HiveCost
operator|.
name|FACTORY
operator|.
name|makeCost
argument_list|(
name|rCount
argument_list|,
name|cpuCost
argument_list|,
name|ioCost
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelWriter
name|explainTerms
parameter_list|(
name|RelWriter
name|pw
parameter_list|)
block|{
return|return
name|super
operator|.
name|explainTerms
argument_list|(
name|pw
argument_list|)
operator|.
name|item
argument_list|(
literal|"joinAlgorithm"
argument_list|,
name|joinAlgorithm
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|item
argument_list|(
literal|"cost"
argument_list|,
name|joinCost
argument_list|)
return|;
block|}
comment|/**    * @return returns rowtype representing only the left join input    */
annotation|@
name|Override
specifier|public
name|RelDataType
name|deriveRowType
parameter_list|()
block|{
if|if
condition|(
name|leftSemiJoin
condition|)
block|{
return|return
name|deriveJoinRowType
argument_list|(
name|left
operator|.
name|getRowType
argument_list|()
argument_list|,
literal|null
argument_list|,
name|JoinRelType
operator|.
name|INNER
argument_list|,
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|RelDataTypeField
operator|>
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|deriveRowType
argument_list|()
return|;
block|}
specifier|private
specifier|static
class|class
name|HiveJoinFactoryImpl
implements|implements
name|JoinFactory
block|{
comment|/**      * Creates a join.      *      * @param left      *          Left input      * @param right      *          Right input      * @param condition      *          Join condition      * @param joinType      *          Join type      * @param variablesStopped      *          Set of names of variables which are set by the LHS and used by      *          the RHS and are not available to nodes above this JoinRel in the      *          tree      * @param semiJoinDone      *          Whether this join has been translated to a semi-join      */
annotation|@
name|Override
specifier|public
name|RelNode
name|createJoin
parameter_list|(
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|JoinRelType
name|joinType
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|variablesStopped
parameter_list|,
name|boolean
name|semiJoinDone
parameter_list|)
block|{
return|return
name|getJoin
argument_list|(
name|left
operator|.
name|getCluster
argument_list|()
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|condition
argument_list|,
name|joinType
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

