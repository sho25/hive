begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|split
operator|.
name|TezGroupedSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|MRReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
operator|.
name|ObjectInspectorCopyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|library
operator|.
name|api
operator|.
name|KeyValueReader
import|;
end_import

begin_comment
comment|/**  * A KeyValuesReader implementation that returns a sorted stream of key-values  * by doing a sorted merge of the key-value in LogicalInputs.  * Tags are in the last byte of the key, so no special handling for tags is required.  * Uses a priority queue to pick the KeyValuesReader of the input that is next in  * sort order.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|KeyValueInputMerger
extends|extends
name|KeyValueReader
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|l4j
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KeyValueInputMerger
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|PriorityQueue
argument_list|<
name|KeyValueReader
argument_list|>
name|pQueue
init|=
literal|null
decl_stmt|;
specifier|private
name|KeyValueReader
name|nextKVReader
init|=
literal|null
decl_stmt|;
specifier|private
name|KeyValueReader
name|prevKVReader
init|=
literal|null
decl_stmt|;
specifier|private
name|ObjectInspector
index|[]
name|inputObjInspectors
init|=
literal|null
decl_stmt|;
specifier|private
name|Deserializer
name|deserializer
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|StructField
argument_list|>
name|structFields
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldOIs
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|KeyValueReader
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|kvReaderStandardObjMap
init|=
operator|new
name|HashMap
argument_list|<
name|KeyValueReader
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|KeyValueReader
argument_list|,
name|Path
argument_list|>
name|kvReaderPathMap
init|=
operator|new
name|IdentityHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|IOContext
name|ioCxt
init|=
literal|null
decl_stmt|;
specifier|public
name|KeyValueInputMerger
parameter_list|(
name|List
argument_list|<
name|KeyValueReader
argument_list|>
name|multiMRInputs
parameter_list|,
name|Deserializer
name|deserializer
parameter_list|,
name|ObjectInspector
index|[]
name|inputObjInspectors
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|sortCols
parameter_list|)
throws|throws
name|Exception
block|{
comment|//get KeyValuesReaders from the LogicalInput and add them to priority queue
name|int
name|initialCapacity
init|=
name|multiMRInputs
operator|.
name|size
argument_list|()
decl_stmt|;
name|pQueue
operator|=
operator|new
name|PriorityQueue
argument_list|<
name|KeyValueReader
argument_list|>
argument_list|(
name|initialCapacity
argument_list|,
operator|new
name|KVReaderComparator
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|inputObjInspectors
operator|=
name|inputObjInspectors
expr_stmt|;
name|this
operator|.
name|deserializer
operator|=
name|deserializer
expr_stmt|;
name|fieldOIs
operator|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
expr_stmt|;
name|structFields
operator|=
operator|new
name|ArrayList
argument_list|<
name|StructField
argument_list|>
argument_list|()
expr_stmt|;
name|StructObjectInspector
name|structOI
init|=
operator|(
name|StructObjectInspector
operator|)
name|inputObjInspectors
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|sortCols
control|)
block|{
name|StructField
name|sf
init|=
name|structOI
operator|.
name|getStructFieldRef
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|structFields
operator|.
name|add
argument_list|(
name|sf
argument_list|)
expr_stmt|;
name|ObjectInspector
name|stdOI
init|=
name|ObjectInspectorUtils
operator|.
name|getStandardObjectInspector
argument_list|(
name|sf
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
name|fieldOIs
operator|.
name|add
argument_list|(
name|stdOI
argument_list|)
expr_stmt|;
block|}
name|l4j
operator|.
name|info
argument_list|(
literal|"Initialized the priority queue with multi mr inputs: "
operator|+
name|multiMRInputs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|KeyValueReader
name|input
range|:
name|multiMRInputs
control|)
block|{
name|TezGroupedSplit
name|split
init|=
call|(
name|TezGroupedSplit
call|)
argument_list|(
operator|(
name|MRReader
operator|)
name|input
argument_list|)
operator|.
name|getSplit
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
name|split
operator|.
name|getGroupedSplits
argument_list|()
decl_stmt|;
comment|// There maybe more than 1 splits in the group, however, they all have 1 unique path.
comment|// Assert that.
name|Path
name|path0
init|=
operator|(
operator|(
name|HiveInputFormat
operator|.
name|HiveInputSplit
operator|)
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|kvReaderPathMap
operator|.
name|put
argument_list|(
name|input
argument_list|,
name|path0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|splits
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|path
init|=
operator|(
operator|(
name|HiveInputFormat
operator|.
name|HiveInputSplit
operator|)
name|splits
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
assert|assert
name|path0
operator|.
name|equals
argument_list|(
name|path
argument_list|)
assert|;
block|}
name|addToQueue
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set the IOContext reference so that input path can be changed.    * This is needed because there can be more than one inputs at play    * at a given time, however, there is one IOContext which needs    * correct input path. In other joins, even when there are multiple    * inputs, they are read sequentially which is not the case here.    */
specifier|public
name|void
name|setIOCxt
parameter_list|(
name|IOContext
name|ioCxt
parameter_list|)
block|{
name|this
operator|.
name|ioCxt
operator|=
name|ioCxt
expr_stmt|;
block|}
comment|/**    * Add KeyValueReader to queue if it has more key-value    *    * @param kvReader    * @throws IOException    */
specifier|private
name|void
name|addToQueue
parameter_list|(
name|KeyValueReader
name|kvReader
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|kvReader
operator|.
name|next
argument_list|()
condition|)
block|{
name|kvReaderStandardObjMap
operator|.
name|remove
argument_list|(
name|kvReader
argument_list|)
expr_stmt|;
name|pQueue
operator|.
name|add
argument_list|(
name|kvReader
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return true if there are more key-values and advances to next key-values    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|IOException
block|{
comment|//add the previous nextKVReader back to queue
if|if
condition|(
name|nextKVReader
operator|!=
literal|null
condition|)
block|{
name|addToQueue
argument_list|(
name|nextKVReader
argument_list|)
expr_stmt|;
block|}
comment|//get the new nextKVReader with lowest key
name|nextKVReader
operator|=
name|pQueue
operator|.
name|poll
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextKVReader
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|nextKVReader
operator|!=
name|prevKVReader
condition|)
block|{
name|prevKVReader
operator|=
name|nextKVReader
expr_stmt|;
comment|// update path in IOContext
name|ioCxt
operator|.
name|setInputPath
argument_list|(
name|kvReaderPathMap
operator|.
name|get
argument_list|(
name|nextKVReader
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getCurrentKey
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|nextKVReader
operator|.
name|getCurrentKey
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getCurrentValue
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|nextKVReader
operator|.
name|getCurrentValue
argument_list|()
return|;
block|}
comment|/**    * Cleanup references    */
specifier|public
name|void
name|clean
parameter_list|()
block|{
name|ioCxt
operator|=
literal|null
expr_stmt|;
name|prevKVReader
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Comparator that compares KeyValuesReader on their current key    */
class|class
name|KVReaderComparator
implements|implements
name|Comparator
argument_list|<
name|KeyValueReader
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|KeyValueReader
name|kvReadr1
parameter_list|,
name|KeyValueReader
name|kvReadr2
parameter_list|)
block|{
try|try
block|{
name|ObjectInspector
name|oi
init|=
name|inputObjInspectors
index|[
literal|0
index|]
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|row1
decl_stmt|,
name|row2
decl_stmt|;
try|try
block|{
if|if
condition|(
name|kvReaderStandardObjMap
operator|.
name|containsKey
argument_list|(
name|kvReadr1
argument_list|)
condition|)
block|{
name|row1
operator|=
name|kvReaderStandardObjMap
operator|.
name|get
argument_list|(
name|kvReadr1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we need to copy to standard object otherwise deserializer overwrites the values
name|row1
operator|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|deserializer
operator|.
name|deserialize
argument_list|(
operator|(
name|Writable
operator|)
name|kvReadr1
operator|.
name|getCurrentValue
argument_list|()
argument_list|)
argument_list|,
name|oi
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
expr_stmt|;
name|kvReaderStandardObjMap
operator|.
name|put
argument_list|(
name|kvReadr1
argument_list|,
name|row1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kvReaderStandardObjMap
operator|.
name|containsKey
argument_list|(
name|kvReadr2
argument_list|)
condition|)
block|{
name|row2
operator|=
name|kvReaderStandardObjMap
operator|.
name|get
argument_list|(
name|kvReadr2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row2
operator|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|deserializer
operator|.
name|deserialize
argument_list|(
operator|(
name|Writable
operator|)
name|kvReadr2
operator|.
name|getCurrentValue
argument_list|()
argument_list|)
argument_list|,
name|oi
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
expr_stmt|;
name|kvReaderStandardObjMap
operator|.
name|put
argument_list|(
name|kvReadr2
argument_list|,
name|row2
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|StructObjectInspector
name|structOI
init|=
operator|(
name|StructObjectInspector
operator|)
name|oi
decl_stmt|;
name|int
name|compare
init|=
literal|0
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StructField
name|sf
range|:
name|structFields
control|)
block|{
name|int
name|pos
init|=
name|structOI
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|indexOf
argument_list|(
name|sf
argument_list|)
decl_stmt|;
name|Object
name|key1
init|=
name|row1
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|Object
name|key2
init|=
name|row2
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|ObjectInspector
name|stdOI
init|=
name|fieldOIs
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|compare
operator|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|key1
argument_list|,
name|stdOI
argument_list|,
name|key2
argument_list|,
name|stdOI
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
if|if
condition|(
name|compare
operator|!=
literal|0
condition|)
block|{
return|return
name|compare
return|;
block|}
block|}
return|return
name|compare
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|l4j
operator|.
name|error
argument_list|(
literal|"Caught exception while reading shuffle input"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//die!
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

