begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * wrapper over composite hive object that attaches names to each field  * (instead of the positional names of CompositeHiveObject)  */
end_comment

begin_class
specifier|public
class|class
name|LabeledCompositeHiveObject
extends|extends
name|CompositeHiveObject
block|{
name|String
index|[]
name|labels
decl_stmt|;
specifier|public
name|LabeledCompositeHiveObject
parameter_list|(
name|int
name|width
parameter_list|)
block|{
name|super
argument_list|(
name|width
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Labaled Hive Objects require field names"
argument_list|)
throw|;
block|}
specifier|public
name|LabeledCompositeHiveObject
parameter_list|(
name|String
index|[]
name|labels
parameter_list|)
block|{
name|super
argument_list|(
name|labels
operator|.
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|labels
operator|=
name|labels
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SerDeField
name|getFieldFromExpression
parameter_list|(
name|String
name|expr
parameter_list|)
block|{
name|int
name|dot
init|=
name|expr
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|label
init|=
name|expr
decl_stmt|;
if|if
condition|(
name|dot
operator|!=
operator|-
literal|1
condition|)
block|{
assert|assert
operator|(
name|dot
operator|!=
operator|(
name|expr
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
operator|)
assert|;
name|label
operator|=
name|expr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dot
argument_list|)
expr_stmt|;
name|expr
operator|=
name|expr
operator|.
name|substring
argument_list|(
name|dot
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expr
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|width
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|label
operator|.
name|equals
argument_list|(
name|labels
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
operator|new
name|CompositeSerDeField
argument_list|(
name|i
argument_list|,
name|expr
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot match expression "
operator|+
name|label
operator|+
literal|"."
operator|+
name|expr
operator|+
literal|" against any label!"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

