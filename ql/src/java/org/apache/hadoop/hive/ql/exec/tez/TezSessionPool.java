begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Distinct from TezSessionPool manager in that it implements a session pool, and nothing else.  */
end_comment

begin_class
class|class
name|TezSessionPool
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TezSessionPool
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** A queue for initial sessions that have not been started yet. */
specifier|private
specifier|final
name|Queue
argument_list|<
name|TezSessionPoolSession
argument_list|>
name|initialSessions
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<
name|TezSessionPoolSession
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|initConf
decl_stmt|;
specifier|private
specifier|final
name|BlockingDeque
argument_list|<
name|TezSessionPoolSession
argument_list|>
name|defaultQueuePool
decl_stmt|;
name|TezSessionPool
parameter_list|(
name|HiveConf
name|initConf
parameter_list|,
name|int
name|numSessionsTotal
parameter_list|)
block|{
name|this
operator|.
name|initConf
operator|=
name|initConf
expr_stmt|;
assert|assert
name|numSessionsTotal
operator|>
literal|0
assert|;
name|defaultQueuePool
operator|=
operator|new
name|LinkedBlockingDeque
argument_list|<
name|TezSessionPoolSession
argument_list|>
argument_list|(
name|numSessionsTotal
argument_list|)
expr_stmt|;
block|}
name|void
name|startInitialSessions
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|initialSessions
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|int
name|threadCount
init|=
name|Math
operator|.
name|min
argument_list|(
name|initialSessions
operator|.
name|size
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|initConf
argument_list|,
name|ConfVars
operator|.
name|HIVE_SERVER2_TEZ_SESSION_MAX_INIT_THREADS
argument_list|)
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|threadCount
operator|>
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|threadCount
operator|==
literal|1
condition|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|TezSessionPoolSession
name|session
init|=
name|initialSessions
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
break|break;
name|startInitialSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|SessionState
name|parentSessionState
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// The runnable has no mutable state, so each thread can run the same thing.
specifier|final
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|firstError
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Runnable
name|runnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|parentSessionState
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|setCurrentSessionState
argument_list|(
name|parentSessionState
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|TezSessionPoolSession
name|session
init|=
name|initialSessions
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
break|break;
if|if
condition|(
name|firstError
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
break|break;
comment|// Best-effort.
try|try
block|{
name|startInitialSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|firstError
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|e
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to start session; ignoring due to previous error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|threadCount
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
name|runnable
argument_list|,
literal|"Tez session init "
operator|+
name|i
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|Exception
name|ex
init|=
name|firstError
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
name|void
name|addInitialSession
parameter_list|(
name|TezSessionPoolSession
name|session
parameter_list|)
block|{
name|initialSessions
operator|.
name|add
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
name|TezSessionState
name|getSession
parameter_list|()
throws|throws
name|Exception
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|TezSessionPoolSession
name|result
init|=
name|defaultQueuePool
operator|.
name|take
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|tryUse
argument_list|()
condition|)
return|return
name|result
return|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Couldn't use a session ["
operator|+
name|result
operator|+
literal|"]; attempting another one"
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|returnSession
parameter_list|(
name|TezSessionPoolSession
name|session
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO: should this be in pool, or pool manager? Probably common to all the use cases.
name|SessionState
name|sessionState
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionState
operator|!=
literal|null
condition|)
block|{
name|sessionState
operator|.
name|setTezSession
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|session
operator|.
name|returnAfterUse
argument_list|()
condition|)
block|{
name|defaultQueuePool
operator|.
name|putFirst
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|replaceSession
parameter_list|(
name|TezSessionPoolSession
name|oldSession
parameter_list|,
name|TezSessionPoolSession
name|newSession
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Retain the stuff from the old session.
comment|// Re-setting the queue config is an old hack that we may remove in future.
name|Path
name|scratchDir
init|=
name|oldSession
operator|.
name|getTezScratchDir
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|additionalFiles
init|=
name|oldSession
operator|.
name|getAdditionalFilesNotFromConf
argument_list|()
decl_stmt|;
name|HiveConf
name|conf
init|=
name|oldSession
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|String
name|queueName
init|=
name|oldSession
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
try|try
block|{
name|oldSession
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|wasRemoved
init|=
name|defaultQueuePool
operator|.
name|remove
argument_list|(
name|oldSession
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|wasRemoved
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Old session was closed but it was not in the pool"
argument_list|,
name|oldSession
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// There's some bogus code that can modify the queue name. Force-set it for pool sessions.
comment|// TODO: this might only be applicable to TezSessionPoolManager; try moving it there?
name|conf
operator|.
name|set
argument_list|(
name|TezConfiguration
operator|.
name|TEZ_QUEUE_NAME
argument_list|,
name|queueName
argument_list|)
expr_stmt|;
name|newSession
operator|.
name|open
argument_list|(
name|conf
argument_list|,
name|additionalFiles
argument_list|,
name|scratchDir
argument_list|)
expr_stmt|;
name|defaultQueuePool
operator|.
name|put
argument_list|(
name|newSession
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|startInitialSession
parameter_list|(
name|TezSessionPoolSession
name|sessionState
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveConf
name|newConf
init|=
operator|new
name|HiveConf
argument_list|(
name|initConf
argument_list|)
decl_stmt|;
comment|// Makes no senses for it to be mixed up like this.
name|boolean
name|isUsable
init|=
name|sessionState
operator|.
name|tryUse
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isUsable
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
name|sessionState
operator|+
literal|" is not usable at pool startup"
argument_list|)
throw|;
name|newConf
operator|.
name|set
argument_list|(
name|TezConfiguration
operator|.
name|TEZ_QUEUE_NAME
argument_list|,
name|sessionState
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|sessionState
operator|.
name|open
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
if|if
condition|(
name|sessionState
operator|.
name|returnAfterUse
argument_list|()
condition|)
block|{
name|defaultQueuePool
operator|.
name|put
argument_list|(
name|sessionState
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

