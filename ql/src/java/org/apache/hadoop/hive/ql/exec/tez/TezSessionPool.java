begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFutureTask
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SettableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|registry
operator|.
name|ServiceInstanceStateChangeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|registry
operator|.
name|impl
operator|.
name|TezAmInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|registry
operator|.
name|impl
operator|.
name|TezAmRegistryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Distinct from TezSessionPool manager in that it implements a session pool, and nothing else.  */
end_comment

begin_class
class|class
name|TezSessionPool
parameter_list|<
name|SessionType
extends|extends
name|TezSessionPoolSession
parameter_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TezSessionPool
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
interface|interface
name|SessionObjectFactory
parameter_list|<
name|SessionType
parameter_list|>
block|{
name|SessionType
name|create
parameter_list|(
name|SessionType
name|oldSession
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|final
name|HiveConf
name|initConf
decl_stmt|;
specifier|private
name|int
name|initialSize
init|=
literal|0
decl_stmt|;
comment|// For testing only.
specifier|private
specifier|final
name|SessionObjectFactory
argument_list|<
name|SessionType
argument_list|>
name|sessionObjFactory
decl_stmt|;
specifier|private
specifier|final
name|ReentrantLock
name|poolLock
init|=
operator|new
name|ReentrantLock
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Condition
name|notEmpty
init|=
name|poolLock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|SessionType
argument_list|>
name|pool
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|SettableFuture
argument_list|<
name|SessionType
argument_list|>
argument_list|>
name|asyncRequests
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * The number of sessions that needs to be started or killed because of the resize calls on    * the pool. When increasing the size, we set this to a positive number and start new sessions    * on background threads, gradually bringing it back to 0.    * When decreasing the size, we try to kill as many existing sessions as we can; if that is    * not enough because the sessions are in use or being restarted, we kill them as they are    * re-added to the pool.    * Repeated calls to resize adjust the delta to ensure correctness between different resizes.    */
specifier|private
specifier|final
name|AtomicInteger
name|deltaRemaining
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|amRegistryName
decl_stmt|;
specifier|private
specifier|final
name|TezAmRegistryImpl
name|amRegistry
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|SessionType
argument_list|>
name|bySessionId
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Preserved at initialization time to have a session to use during resize.
comment|// TODO: rather, Tez sessions should not depend on SessionState.
specifier|private
name|SessionState
name|parentSessionState
decl_stmt|;
name|TezSessionPool
parameter_list|(
name|HiveConf
name|initConf
parameter_list|,
name|int
name|numSessionsTotal
parameter_list|,
name|boolean
name|useAmRegistryIfPresent
parameter_list|,
name|SessionObjectFactory
argument_list|<
name|SessionType
argument_list|>
name|sessionFactory
parameter_list|)
block|{
name|this
operator|.
name|initConf
operator|=
name|initConf
expr_stmt|;
name|this
operator|.
name|initialSize
operator|=
name|numSessionsTotal
expr_stmt|;
name|this
operator|.
name|amRegistry
operator|=
name|useAmRegistryIfPresent
condition|?
name|TezAmRegistryImpl
operator|.
name|create
argument_list|(
name|initConf
argument_list|,
literal|true
argument_list|)
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|amRegistryName
operator|=
name|amRegistry
operator|==
literal|null
condition|?
literal|null
else|:
name|amRegistry
operator|.
name|getRegistryName
argument_list|()
expr_stmt|;
name|this
operator|.
name|sessionObjFactory
operator|=
name|sessionFactory
expr_stmt|;
block|}
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|amRegistry
operator|!=
literal|null
condition|)
block|{
name|amRegistry
operator|.
name|start
argument_list|()
expr_stmt|;
name|amRegistry
operator|.
name|initializeWithoutRegistering
argument_list|()
expr_stmt|;
comment|// Note: we may later have special logic to pick up old AMs, if any.
name|amRegistry
operator|.
name|registerStateChangeListener
argument_list|(
operator|new
name|ChangeListener
argument_list|()
argument_list|)
expr_stmt|;
name|amRegistry
operator|.
name|populateCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|int
name|threadCount
init|=
name|Math
operator|.
name|min
argument_list|(
name|initialSize
argument_list|,
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|initConf
argument_list|,
name|ConfVars
operator|.
name|HIVE_SERVER2_TEZ_SESSION_MAX_INIT_THREADS
argument_list|)
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|threadCount
operator|>
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|threadCount
operator|==
literal|1
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|initialSize
condition|;
operator|++
name|i
control|)
block|{
name|SessionType
name|session
init|=
name|sessionObjFactory
operator|.
name|create
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
break|break;
name|startInitialSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|AtomicInteger
name|remaining
init|=
operator|new
name|AtomicInteger
argument_list|(
name|initialSize
argument_list|)
decl_stmt|;
name|this
operator|.
name|parentSessionState
operator|=
name|SessionState
operator|.
name|get
argument_list|()
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|FutureTask
argument_list|<
name|Boolean
argument_list|>
index|[]
name|threadTasks
init|=
operator|new
name|FutureTask
index|[
name|threadCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|threadTasks
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|threadTasks
index|[
name|i
index|]
operator|=
operator|new
name|FutureTask
argument_list|<
name|Boolean
argument_list|>
argument_list|(
operator|new
name|CreateSessionsRunnable
argument_list|(
name|remaining
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|// Start is blocking, so run one of the tasks on the main thread.
name|threadTasks
index|[
name|i
index|]
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
else|else
block|{
operator|new
name|Thread
argument_list|(
name|threadTasks
index|[
name|i
index|]
argument_list|,
literal|"Tez session init "
operator|+
name|i
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadTasks
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|threadTasks
index|[
name|i
index|]
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|SessionType
name|getSession
parameter_list|()
throws|throws
name|Exception
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|SessionType
name|result
init|=
literal|null
decl_stmt|;
name|poolLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|result
operator|=
name|pool
operator|.
name|poll
argument_list|()
operator|)
operator|==
literal|null
condition|)
block|{
name|notEmpty
operator|.
name|await
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|poolLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|tryUse
argument_list|(
literal|false
argument_list|)
condition|)
return|return
name|result
return|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Couldn't use a session ["
operator|+
name|result
operator|+
literal|"]; attempting another one"
argument_list|)
expr_stmt|;
block|}
block|}
name|ListenableFuture
argument_list|<
name|SessionType
argument_list|>
name|getSessionAsync
parameter_list|()
throws|throws
name|Exception
block|{
name|SettableFuture
argument_list|<
name|SessionType
argument_list|>
name|future
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|poolLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Try to get the session quickly.
while|while
condition|(
literal|true
condition|)
block|{
name|SessionType
name|result
init|=
name|pool
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
break|break;
if|if
condition|(
operator|!
name|result
operator|.
name|tryUse
argument_list|(
literal|false
argument_list|)
condition|)
continue|continue;
name|future
operator|.
name|set
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
comment|// The pool is empty; queue the request.
name|asyncRequests
operator|.
name|add
argument_list|(
name|future
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
finally|finally
block|{
name|poolLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|returnSession
parameter_list|(
name|SessionType
name|session
parameter_list|)
block|{
name|returnSessionInternal
argument_list|(
name|session
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|boolean
name|returnSessionAsync
parameter_list|(
name|SessionType
name|session
parameter_list|)
block|{
return|return
name|returnSessionInternal
argument_list|(
name|session
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|returnSessionInternal
parameter_list|(
name|SessionType
name|session
parameter_list|,
name|boolean
name|isAsync
parameter_list|)
block|{
comment|// Make sure that if the session is returned to the pool, it doesn't live in the global.
name|SessionState
name|sessionState
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionState
operator|!=
literal|null
condition|)
block|{
name|sessionState
operator|.
name|setTezSession
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|session
operator|.
name|stopUsing
argument_list|()
condition|)
return|return
literal|true
return|;
comment|// The session will be restarted and return to us.
name|boolean
name|canPutBack
init|=
name|putSessionBack
argument_list|(
name|session
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|canPutBack
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closing an unneeded returned session "
operator|+
name|session
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isAsync
condition|)
return|return
literal|false
return|;
comment|// The caller is responsible for destroying the session.
try|try
block|{
name|session
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to close "
operator|+
name|session
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Puts session back into the pool.    * @return true if the session has been put back; false if it's not needed and should be killed.    */
specifier|private
name|boolean
name|putSessionBack
parameter_list|(
name|SessionType
name|session
parameter_list|,
name|boolean
name|isFirst
parameter_list|)
block|{
name|SettableFuture
argument_list|<
name|SessionType
argument_list|>
name|future
init|=
literal|null
decl_stmt|;
name|poolLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// See if we need to kill some sessions because the pool was resized down while
comment|// a bunch of sessions were outstanding. See also deltaRemaining javadoc.
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|remainingToKill
init|=
operator|-
name|deltaRemaining
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|remainingToKill
operator|<=
literal|0
condition|)
break|break;
comment|// No need to kill anything.
if|if
condition|(
name|deltaRemaining
operator|.
name|compareAndSet
argument_list|(
operator|-
name|remainingToKill
argument_list|,
operator|-
name|remainingToKill
operator|+
literal|1
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// If there are async requests, satisfy them first.
if|if
condition|(
operator|!
name|asyncRequests
operator|.
name|isEmpty
argument_list|()
operator|&&
name|session
operator|.
name|tryUse
argument_list|(
literal|false
argument_list|)
condition|)
block|{
name|future
operator|=
name|asyncRequests
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|future
operator|==
literal|null
condition|)
block|{
comment|// Put session into the pool.
if|if
condition|(
name|isFirst
condition|)
block|{
name|pool
operator|.
name|addFirst
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pool
operator|.
name|addLast
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
name|notEmpty
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|poolLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|future
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|set
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
name|void
name|replaceSession
parameter_list|(
name|SessionType
name|oldSession
parameter_list|,
name|boolean
name|keepTmpDir
parameter_list|,
name|String
index|[]
name|additionalFilesArray
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Retain the stuff from the old session.
comment|// Re-setting the queue config is an old hack that we may remove in future.
name|SessionType
name|newSession
init|=
name|sessionObjFactory
operator|.
name|create
argument_list|(
name|oldSession
argument_list|)
decl_stmt|;
name|Path
name|scratchDir
init|=
name|oldSession
operator|.
name|getTezScratchDir
argument_list|()
decl_stmt|;
name|String
name|queueName
init|=
name|oldSession
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|additionalFiles
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|additionalFilesArray
operator|!=
literal|null
condition|)
block|{
name|additionalFiles
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|file
range|:
name|additionalFilesArray
control|)
block|{
name|additionalFiles
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|additionalFiles
operator|=
name|oldSession
operator|.
name|getAdditionalFilesNotFromConf
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|oldSession
operator|.
name|close
argument_list|(
name|keepTmpDir
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|poolLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// The expiring session may or may not be in the pool.
name|pool
operator|.
name|remove
argument_list|(
name|oldSession
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|poolLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|bySessionId
operator|.
name|remove
argument_list|(
name|oldSession
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
comment|// There's some bogus code that can modify the queue name. Force-set it for pool sessions.
comment|// TODO: this might only be applicable to TezSessionPoolManager; try moving it there?
name|newSession
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|TezConfiguration
operator|.
name|TEZ_QUEUE_NAME
argument_list|,
name|queueName
argument_list|)
expr_stmt|;
comment|// The caller probably created the new session with the old config, but update the
comment|// registry again just in case. TODO: maybe we should enforce that.
name|configureAmRegistry
argument_list|(
name|newSession
argument_list|)
expr_stmt|;
name|newSession
operator|.
name|open
argument_list|(
name|additionalFiles
argument_list|,
name|scratchDir
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|putSessionBack
argument_list|(
name|newSession
argument_list|,
literal|false
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closing an unneeded session "
operator|+
name|newSession
operator|+
literal|"; trying to replace "
operator|+
name|oldSession
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|newSession
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to close an unneeded session"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|startInitialSession
parameter_list|(
name|SessionType
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|isUsable
init|=
name|session
operator|.
name|tryUse
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isUsable
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
name|session
operator|+
literal|" is not usable at pool startup"
argument_list|)
throw|;
name|session
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|TezConfiguration
operator|.
name|TEZ_QUEUE_NAME
argument_list|,
name|session
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|configureAmRegistry
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|session
operator|.
name|open
argument_list|()
expr_stmt|;
if|if
condition|(
name|session
operator|.
name|stopUsing
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|putSessionBack
argument_list|(
name|session
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't add a session during initialization"
argument_list|)
expr_stmt|;
try|try
block|{
name|session
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to close an unneeded session"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|configureAmRegistry
parameter_list|(
name|SessionType
name|session
parameter_list|)
block|{
if|if
condition|(
name|amRegistryName
operator|!=
literal|null
condition|)
block|{
name|bySessionId
operator|.
name|put
argument_list|(
name|session
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|HiveConf
name|conf
init|=
name|session
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ConfVars
operator|.
name|LLAP_TASK_SCHEDULER_AM_REGISTRY_NAME
operator|.
name|varname
argument_list|,
name|amRegistryName
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ConfVars
operator|.
name|HIVESESSIONID
operator|.
name|varname
argument_list|,
name|session
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: can be enable temporarily for testing
comment|// conf.set(LlapTaskSchedulerService.LLAP_PLUGIN_ENDPOINT_ENABLED, "true");
block|}
block|}
specifier|private
specifier|final
class|class
name|ChangeListener
implements|implements
name|ServiceInstanceStateChangeListener
argument_list|<
name|TezAmInstance
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCreate
parameter_list|(
name|TezAmInstance
name|si
parameter_list|)
block|{
name|String
name|sessionId
init|=
name|si
operator|.
name|getSessionId
argument_list|()
decl_stmt|;
name|SessionType
name|session
init|=
name|bySessionId
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"AM for "
operator|+
name|sessionId
operator|+
literal|" has registered; updating ["
operator|+
name|session
operator|+
literal|"] with an endpoint at "
operator|+
name|si
operator|.
name|getPluginPort
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|updateFromRegistry
argument_list|(
name|si
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"AM for an unknown "
operator|+
name|sessionId
operator|+
literal|" has registered; ignoring"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onUpdate
parameter_list|(
name|TezAmInstance
name|serviceInstance
parameter_list|)
block|{
comment|// Presumably we'd get those later if AM updates its stuff.
name|LOG
operator|.
name|info
argument_list|(
literal|"Received an unexpected update for instance={}. Ignoring"
argument_list|,
name|serviceInstance
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onRemove
parameter_list|(
name|TezAmInstance
name|serviceInstance
parameter_list|)
block|{
name|String
name|sessionId
init|=
name|serviceInstance
operator|.
name|getSessionId
argument_list|()
decl_stmt|;
comment|// For now, we don't take any action. In future, we might restore the session based
comment|// on this and get rid of the logic outside of the pool that replaces/reopens/etc.
name|LOG
operator|.
name|warn
argument_list|(
literal|"AM for "
operator|+
name|sessionId
operator|+
literal|" has disappeared from the registry"
argument_list|)
expr_stmt|;
comment|// TODO: this might race if AM for the same session is restarted internally by Tez.
comment|//        It is possible to receive the create before remove and remove the wrong one.
comment|//        We need some identity in the value to make sure that doesn't happen.
name|bySessionId
operator|.
name|remove
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
name|int
name|getInitialSize
parameter_list|()
block|{
return|return
name|initialSize
return|;
block|}
comment|/**    * Resizes the pool asynchronously.    * @param delta A number of threads to add or remove.    * @param toClose An output list to which newly-unneeded sessions, to be closed by the caller.    */
specifier|public
name|ListenableFuture
argument_list|<
name|?
argument_list|>
name|resizeAsync
parameter_list|(
name|int
name|delta
parameter_list|,
name|List
argument_list|<
name|SessionType
argument_list|>
name|toClose
parameter_list|)
block|{
if|if
condition|(
name|delta
operator|==
literal|0
condition|)
return|return
name|createDummyFuture
argument_list|()
return|;
name|poolLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|delta
operator|<
literal|0
condition|)
block|{
return|return
name|resizeDownInternal
argument_list|(
operator|-
name|delta
argument_list|,
name|toClose
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|resizeUpInternal
argument_list|(
name|delta
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
name|poolLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|ListenableFuture
argument_list|<
name|?
argument_list|>
name|resizeUpInternal
parameter_list|(
name|int
name|delta
parameter_list|)
block|{
comment|// 1) Cancel the kills if any, to avoid killing the returned sessions.
comment|//    Also sets the count for the async initialization.
name|int
name|oldVal
decl_stmt|;
do|do
block|{
name|oldVal
operator|=
name|deltaRemaining
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|deltaRemaining
operator|.
name|compareAndSet
argument_list|(
name|oldVal
argument_list|,
name|oldVal
operator|+
name|delta
argument_list|)
condition|)
do|;
name|int
name|toStart
init|=
name|oldVal
operator|+
name|delta
decl_stmt|;
if|if
condition|(
name|toStart
operator|<=
literal|0
condition|)
return|return
name|createDummyFuture
argument_list|()
return|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Resizing the pool; adding "
operator|+
name|toStart
operator|+
literal|" sessions"
argument_list|)
expr_stmt|;
comment|// 2) If we need to create some extra sessions, we'd do it just like startup does.
name|int
name|threadCount
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|toStart
argument_list|,
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|initConf
argument_list|,
name|ConfVars
operator|.
name|HIVE_SERVER2_TEZ_SESSION_MAX_INIT_THREADS
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ListenableFutureTask
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|threadTasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|threadCount
argument_list|)
decl_stmt|;
comment|// This is an async method, so always launch threads, even for a single task.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
operator|++
name|i
control|)
block|{
name|ListenableFutureTask
argument_list|<
name|Boolean
argument_list|>
name|task
init|=
name|ListenableFutureTask
operator|.
name|create
argument_list|(
operator|new
name|CreateSessionsRunnable
argument_list|(
name|deltaRemaining
argument_list|)
argument_list|)
decl_stmt|;
operator|new
name|Thread
argument_list|(
name|task
argument_list|,
literal|"Tez pool resize "
operator|+
name|i
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|threadTasks
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
return|return
name|Futures
operator|.
name|allAsList
argument_list|(
name|threadTasks
argument_list|)
return|;
block|}
specifier|private
name|ListenableFuture
argument_list|<
name|Boolean
argument_list|>
name|resizeDownInternal
parameter_list|(
name|int
name|delta
parameter_list|,
name|List
argument_list|<
name|SessionType
argument_list|>
name|toClose
parameter_list|)
block|{
comment|// 1) Cancel the previous expansion, if any.
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|expansionCount
init|=
name|deltaRemaining
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|expansionCount
operator|<=
literal|0
condition|)
break|break;
name|int
name|expansionCancelled
init|=
name|Math
operator|.
name|min
argument_list|(
name|expansionCount
argument_list|,
name|delta
argument_list|)
decl_stmt|;
if|if
condition|(
name|deltaRemaining
operator|.
name|compareAndSet
argument_list|(
name|expansionCount
argument_list|,
name|expansionCount
operator|-
name|expansionCancelled
argument_list|)
condition|)
block|{
name|delta
operator|-=
name|expansionCancelled
expr_stmt|;
break|break;
block|}
block|}
comment|// 2) Drain unused sessions; the close() is sync so delegate to the caller.
while|while
condition|(
name|delta
operator|>
literal|0
condition|)
block|{
name|SessionType
name|session
init|=
name|pool
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
break|break;
if|if
condition|(
operator|!
name|session
operator|.
name|tryUse
argument_list|(
literal|true
argument_list|)
condition|)
continue|continue;
name|toClose
operator|.
name|add
argument_list|(
name|session
argument_list|)
expr_stmt|;
operator|--
name|delta
expr_stmt|;
block|}
comment|// 3) If too many sessions are outstanding (e.g. due to expiration restarts - should
comment|//    not happen with in-use sessions because WM already kills the extras), we will kill
comment|//    them as they come back from restarts.
if|if
condition|(
name|delta
operator|>
literal|0
condition|)
block|{
name|int
name|oldVal
decl_stmt|;
do|do
block|{
name|oldVal
operator|=
name|deltaRemaining
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|deltaRemaining
operator|.
name|compareAndSet
argument_list|(
name|oldVal
argument_list|,
name|oldVal
operator|-
name|delta
argument_list|)
condition|)
do|;
block|}
return|return
name|createDummyFuture
argument_list|()
return|;
block|}
specifier|private
name|ListenableFuture
argument_list|<
name|Boolean
argument_list|>
name|createDummyFuture
parameter_list|()
block|{
name|SettableFuture
argument_list|<
name|Boolean
argument_list|>
name|f
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|f
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
specifier|private
specifier|final
class|class
name|CreateSessionsRunnable
implements|implements
name|Callable
argument_list|<
name|Boolean
argument_list|>
block|{
specifier|private
specifier|final
name|AtomicInteger
name|remaining
decl_stmt|;
specifier|private
name|CreateSessionsRunnable
parameter_list|(
name|AtomicInteger
name|remaining
parameter_list|)
block|{
name|this
operator|.
name|remaining
operator|=
name|remaining
expr_stmt|;
block|}
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|parentSessionState
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|setCurrentSessionState
argument_list|(
name|parentSessionState
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|oldVal
init|=
name|remaining
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldVal
operator|<=
literal|0
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|remaining
operator|.
name|compareAndSet
argument_list|(
name|oldVal
argument_list|,
name|oldVal
operator|-
literal|1
argument_list|)
condition|)
continue|continue;
name|startInitialSession
argument_list|(
name|sessionObjFactory
operator|.
name|create
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
name|int
name|getCurrentSize
parameter_list|()
block|{
name|poolLock
operator|.
name|tryLock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|pool
operator|.
name|size
argument_list|()
return|;
block|}
finally|finally
block|{
name|poolLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

