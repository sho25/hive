begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_comment
comment|/**  * A high-performance set implementation used to support fast set membership testing,  * using Cuckoo hashing. This is used to support fast tests of the form  *  *       column IN ( list-of-values )  *  * For double, we simply layer over the implementation for long. Double.doubleToRawLongBits  * is used to convert a 64-bit double to a 64-bit long with bit-for-bit fidelity.  */
end_comment

begin_class
specifier|public
class|class
name|CuckooSetDouble
block|{
name|CuckooSetLong
name|setLong
decl_stmt|;
specifier|public
name|CuckooSetDouble
parameter_list|(
name|int
name|expectedSize
parameter_list|)
block|{
name|setLong
operator|=
operator|new
name|CuckooSetLong
argument_list|(
name|expectedSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return true if and only if the value x is present in the set.    */
specifier|public
name|boolean
name|lookup
parameter_list|(
name|double
name|x
parameter_list|)
block|{
return|return
name|setLong
operator|.
name|lookup
argument_list|(
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
name|x
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Insert a single value into the set.    */
specifier|public
name|void
name|insert
parameter_list|(
name|double
name|x
parameter_list|)
block|{
name|setLong
operator|.
name|insert
argument_list|(
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Insert all values in the input array into the set.    */
specifier|public
name|void
name|load
parameter_list|(
name|double
index|[]
name|a
parameter_list|)
block|{
for|for
control|(
name|Double
name|x
range|:
name|a
control|)
block|{
name|insert
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

