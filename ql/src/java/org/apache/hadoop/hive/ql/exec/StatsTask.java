begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
operator|.
name|tableSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DynamicPartitionCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LoadTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|StatsWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|StageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * StatsTask implementation.  **/
end_comment

begin_class
specifier|public
class|class
name|StatsTask
extends|extends
name|Task
argument_list|<
name|StatsWork
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Table
name|table
decl_stmt|;
specifier|private
name|List
argument_list|<
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|dpPartSpecs
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|supportedStats
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|collectableStats
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nameMapping
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
comment|// supported statistics
name|supportedStats
operator|.
name|add
argument_list|(
name|StatsSetupConst
operator|.
name|NUM_FILES
argument_list|)
expr_stmt|;
name|supportedStats
operator|.
name|add
argument_list|(
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|)
expr_stmt|;
name|supportedStats
operator|.
name|add
argument_list|(
name|StatsSetupConst
operator|.
name|TOTAL_SIZE
argument_list|)
expr_stmt|;
name|supportedStats
operator|.
name|add
argument_list|(
name|StatsSetupConst
operator|.
name|RAW_DATA_SIZE
argument_list|)
expr_stmt|;
comment|// statistics that need to be collected throughout the execution
name|collectableStats
operator|.
name|add
argument_list|(
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|)
expr_stmt|;
name|collectableStats
operator|.
name|add
argument_list|(
name|StatsSetupConst
operator|.
name|RAW_DATA_SIZE
argument_list|)
expr_stmt|;
name|nameMapping
operator|.
name|put
argument_list|(
name|StatsSetupConst
operator|.
name|NUM_FILES
argument_list|,
literal|"num_files"
argument_list|)
expr_stmt|;
name|nameMapping
operator|.
name|put
argument_list|(
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
literal|"num_rows"
argument_list|)
expr_stmt|;
name|nameMapping
operator|.
name|put
argument_list|(
name|StatsSetupConst
operator|.
name|TOTAL_SIZE
argument_list|,
literal|"total_size"
argument_list|)
expr_stmt|;
name|nameMapping
operator|.
name|put
argument_list|(
name|StatsSetupConst
operator|.
name|RAW_DATA_SIZE
argument_list|,
literal|"raw_data_size"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StatsTask
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|dpPartSpecs
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    *    * Partition Level Statistics.    *    */
class|class
name|PartitionStatistics
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|LongWritable
argument_list|>
name|stats
decl_stmt|;
specifier|public
name|PartitionStatistics
parameter_list|()
block|{
name|stats
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LongWritable
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|statType
range|:
name|supportedStats
control|)
block|{
name|stats
operator|.
name|put
argument_list|(
name|statType
argument_list|,
operator|new
name|LongWritable
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|PartitionStatistics
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|st
parameter_list|)
block|{
name|stats
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LongWritable
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|statType
range|:
name|st
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Long
name|stValue
init|=
name|st
operator|.
name|get
argument_list|(
name|statType
argument_list|)
operator|==
literal|null
condition|?
literal|0L
else|:
name|st
operator|.
name|get
argument_list|(
name|statType
argument_list|)
decl_stmt|;
name|stats
operator|.
name|put
argument_list|(
name|statType
argument_list|,
operator|new
name|LongWritable
argument_list|(
name|stValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|getStat
parameter_list|(
name|String
name|statType
parameter_list|)
block|{
return|return
name|stats
operator|.
name|get
argument_list|(
name|statType
argument_list|)
operator|==
literal|null
condition|?
literal|0L
else|:
name|stats
operator|.
name|get
argument_list|(
name|statType
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|setStat
parameter_list|(
name|String
name|statType
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|stats
operator|.
name|put
argument_list|(
name|statType
argument_list|,
operator|new
name|LongWritable
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|statType
range|:
name|supportedStats
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|nameMapping
operator|.
name|get
argument_list|(
name|statType
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
name|stats
operator|.
name|get
argument_list|(
name|statType
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|delete
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|,
name|sb
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * Table Level Statistics.    */
class|class
name|TableStatistics
extends|extends
name|PartitionStatistics
block|{
name|int
name|numPartitions
decl_stmt|;
comment|// number of partitions
specifier|public
name|TableStatistics
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|numPartitions
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|setNumPartitions
parameter_list|(
name|int
name|np
parameter_list|)
block|{
name|numPartitions
operator|=
name|np
expr_stmt|;
block|}
specifier|public
name|int
name|getNumPartitions
parameter_list|()
block|{
return|return
name|numPartitions
return|;
block|}
comment|/**      * Incrementally update the table statistics according to the old and new      * partition level statistics.      *      * @param oldStats      *          The old statistics of a partition.      * @param newStats      *          The new statistics of a partition.      */
specifier|public
name|void
name|updateStats
parameter_list|(
name|PartitionStatistics
name|oldStats
parameter_list|,
name|PartitionStatistics
name|newStats
parameter_list|)
block|{
name|deletePartitionStats
argument_list|(
name|oldStats
argument_list|)
expr_stmt|;
name|addPartitionStats
argument_list|(
name|newStats
argument_list|)
expr_stmt|;
block|}
comment|/**      * Update the table level statistics when a new partition is added.      *      * @param newStats      *          the new partition statistics.      */
specifier|public
name|void
name|addPartitionStats
parameter_list|(
name|PartitionStatistics
name|newStats
parameter_list|)
block|{
for|for
control|(
name|String
name|statType
range|:
name|supportedStats
control|)
block|{
name|LongWritable
name|value
init|=
name|stats
operator|.
name|get
argument_list|(
name|statType
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|stats
operator|.
name|put
argument_list|(
name|statType
argument_list|,
operator|new
name|LongWritable
argument_list|(
name|newStats
operator|.
name|getStat
argument_list|(
name|statType
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|.
name|set
argument_list|(
name|value
operator|.
name|get
argument_list|()
operator|+
name|newStats
operator|.
name|getStat
argument_list|(
name|statType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|numPartitions
operator|++
expr_stmt|;
block|}
comment|/**      * Update the table level statistics when an old partition is dropped.      *      * @param oldStats      *          the old partition statistics.      */
specifier|public
name|void
name|deletePartitionStats
parameter_list|(
name|PartitionStatistics
name|oldStats
parameter_list|)
block|{
for|for
control|(
name|String
name|statType
range|:
name|supportedStats
control|)
block|{
name|LongWritable
name|value
init|=
name|stats
operator|.
name|get
argument_list|(
name|statType
argument_list|)
decl_stmt|;
name|value
operator|.
name|set
argument_list|(
name|value
operator|.
name|get
argument_list|()
operator|-
name|oldStats
operator|.
name|getStat
argument_list|(
name|statType
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|numPartitions
operator|--
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"num_partitions: "
argument_list|)
operator|.
name|append
argument_list|(
name|numPartitions
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|super
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|receiveFeed
parameter_list|(
name|FeedType
name|feedType
parameter_list|,
name|Object
name|feedValue
parameter_list|)
block|{
comment|// this method should be called by MoveTask when there are dynamic partitions generated
if|if
condition|(
name|feedType
operator|==
name|FeedType
operator|.
name|DYNAMIC_PARTITIONS
condition|)
block|{
assert|assert
name|feedValue
operator|instanceof
name|List
argument_list|<
name|?
argument_list|>
assert|;
name|dpPartSpecs
operator|=
operator|(
name|List
argument_list|<
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
operator|)
name|feedValue
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|(
name|DriverContext
name|driverContext
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing stats task"
argument_list|)
expr_stmt|;
comment|// Make sure that it is either an ANALYZE command or an INSERT OVERWRITE command
assert|assert
operator|(
name|work
operator|.
name|getLoadTableDesc
argument_list|()
operator|!=
literal|null
operator|&&
name|work
operator|.
name|getTableSpecs
argument_list|()
operator|==
literal|null
operator|||
name|work
operator|.
name|getLoadTableDesc
argument_list|()
operator|==
literal|null
operator|&&
name|work
operator|.
name|getTableSpecs
argument_list|()
operator|!=
literal|null
operator|)
assert|;
name|String
name|tableName
init|=
literal|""
decl_stmt|;
try|try
block|{
if|if
condition|(
name|work
operator|.
name|getLoadTableDesc
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tableName
operator|=
name|work
operator|.
name|getLoadTableDesc
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|tableName
operator|=
name|work
operator|.
name|getTableSpecs
argument_list|()
operator|.
name|tableName
expr_stmt|;
block|}
name|table
operator|=
name|db
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot get table "
operator|+
name|tableName
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|console
operator|.
name|printError
argument_list|(
literal|"Cannot get table "
operator|+
name|tableName
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|aggregateStats
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|StageType
name|getType
parameter_list|()
block|{
return|return
name|StageType
operator|.
name|STATS
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"STATS"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|localizeMRTmpFilesImpl
parameter_list|(
name|Context
name|ctx
parameter_list|)
block|{
comment|// Nothing to do for StatsTask here.
block|}
specifier|private
name|int
name|aggregateStats
parameter_list|()
block|{
name|StatsAggregator
name|statsAggregator
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Stats setup:
name|Warehouse
name|wh
init|=
operator|new
name|Warehouse
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fileSys
decl_stmt|;
name|FileStatus
index|[]
name|fileStatus
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|getWork
argument_list|()
operator|.
name|getNoStatsAggregator
argument_list|()
condition|)
block|{
name|String
name|statsImplementationClass
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSDBCLASS
argument_list|)
decl_stmt|;
name|StatsFactory
operator|.
name|setImplementation
argument_list|(
name|statsImplementationClass
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|statsAggregator
operator|=
name|StatsFactory
operator|.
name|getStatsAggregator
argument_list|()
expr_stmt|;
comment|// manufacture a StatsAggregator
if|if
condition|(
operator|!
name|statsAggregator
operator|.
name|connect
argument_list|(
name|conf
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"StatsAggregator connect failed "
operator|+
name|statsImplementationClass
argument_list|)
throw|;
block|}
block|}
name|TableStatistics
name|tblStats
init|=
operator|new
name|TableStatistics
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|tTable
init|=
name|table
operator|.
name|getTTable
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
name|tTable
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|boolean
name|tableStatsExist
init|=
name|this
operator|.
name|existStats
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|statType
range|:
name|supportedStats
control|)
block|{
if|if
condition|(
name|parameters
operator|.
name|containsKey
argument_list|(
name|statType
argument_list|)
condition|)
block|{
name|tblStats
operator|.
name|setStat
argument_list|(
name|statType
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
name|statType
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|parameters
operator|.
name|containsKey
argument_list|(
name|StatsSetupConst
operator|.
name|NUM_PARTITIONS
argument_list|)
condition|)
block|{
name|tblStats
operator|.
name|setNumPartitions
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
name|StatsSetupConst
operator|.
name|NUM_PARTITIONS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|getPartitionsList
argument_list|()
decl_stmt|;
name|boolean
name|atomic
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_ATOMIC
argument_list|)
decl_stmt|;
if|if
condition|(
name|partitions
operator|==
literal|null
condition|)
block|{
comment|// non-partitioned tables:
if|if
condition|(
operator|!
name|tableStatsExist
operator|&&
name|atomic
condition|)
block|{
return|return
literal|0
return|;
block|}
name|Path
name|tablePath
init|=
name|wh
operator|.
name|getTablePath
argument_list|(
name|db
operator|.
name|getDatabase
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|fileSys
operator|=
name|tablePath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fileStatus
operator|=
name|Utilities
operator|.
name|getFileStatusRecurse
argument_list|(
name|tablePath
argument_list|,
literal|1
argument_list|,
name|fileSys
argument_list|)
expr_stmt|;
name|tblStats
operator|.
name|setStat
argument_list|(
name|StatsSetupConst
operator|.
name|NUM_FILES
argument_list|,
name|fileStatus
operator|.
name|length
argument_list|)
expr_stmt|;
name|long
name|tableSize
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileStatus
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tableSize
operator|+=
name|fileStatus
index|[
name|i
index|]
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
name|tblStats
operator|.
name|setStat
argument_list|(
name|StatsSetupConst
operator|.
name|TOTAL_SIZE
argument_list|,
name|tableSize
argument_list|)
expr_stmt|;
comment|// In case of a non-partitioned table, the key for stats temporary store is "rootDir"
if|if
condition|(
name|statsAggregator
operator|!=
literal|null
condition|)
block|{
name|String
name|value
decl_stmt|;
for|for
control|(
name|String
name|statType
range|:
name|collectableStats
control|)
block|{
name|value
operator|=
name|statsAggregator
operator|.
name|aggregateStats
argument_list|(
name|work
operator|.
name|getAggKey
argument_list|()
argument_list|,
name|statType
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|tblStats
operator|.
name|setStat
argument_list|(
name|statType
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|atomic
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"StatsAggregator failed to get statistics."
argument_list|)
throw|;
block|}
block|}
block|}
name|statsAggregator
operator|.
name|cleanUp
argument_list|(
name|work
operator|.
name|getAggKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Partitioned table:
comment|// Need to get the old stats of the partition
comment|// and update the table stats based on the old and new stats.
for|for
control|(
name|Partition
name|partn
range|:
name|partitions
control|)
block|{
comment|//
comment|// get the old partition stats
comment|//
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
name|tPart
init|=
name|partn
operator|.
name|getTPartition
argument_list|()
decl_stmt|;
name|parameters
operator|=
name|tPart
operator|.
name|getParameters
argument_list|()
expr_stmt|;
name|boolean
name|hasStats
init|=
name|this
operator|.
name|existStats
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasStats
operator|&&
name|atomic
condition|)
block|{
continue|continue;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|currentValues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|statType
range|:
name|supportedStats
control|)
block|{
name|Long
name|val
init|=
name|parameters
operator|.
name|containsKey
argument_list|(
name|statType
argument_list|)
condition|?
name|Long
operator|.
name|parseLong
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
name|statType
argument_list|)
argument_list|)
else|:
literal|0L
decl_stmt|;
name|currentValues
operator|.
name|put
argument_list|(
name|statType
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// get the new partition stats
comment|//
name|PartitionStatistics
name|newPartStats
init|=
operator|new
name|PartitionStatistics
argument_list|()
decl_stmt|;
comment|// In that case of a partition, the key for stats temporary store is
comment|// "rootDir/[dynamic_partition_specs/]%"
name|String
name|partitionID
init|=
name|work
operator|.
name|getAggKey
argument_list|()
operator|+
name|Warehouse
operator|.
name|makePartPath
argument_list|(
name|partn
operator|.
name|getSpec
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stats aggregator : "
operator|+
name|partitionID
argument_list|)
expr_stmt|;
if|if
condition|(
name|statsAggregator
operator|!=
literal|null
condition|)
block|{
name|String
name|value
decl_stmt|;
for|for
control|(
name|String
name|statType
range|:
name|collectableStats
control|)
block|{
name|value
operator|=
name|statsAggregator
operator|.
name|aggregateStats
argument_list|(
name|partitionID
argument_list|,
name|statType
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|newPartStats
operator|.
name|setStat
argument_list|(
name|statType
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|atomic
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"StatsAggregator failed to get statistics."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|statType
range|:
name|collectableStats
control|)
block|{
name|newPartStats
operator|.
name|setStat
argument_list|(
name|statType
argument_list|,
name|currentValues
operator|.
name|get
argument_list|(
name|statType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|fileSys
operator|=
name|partn
operator|.
name|getPartitionPath
argument_list|()
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fileStatus
operator|=
name|Utilities
operator|.
name|getFileStatusRecurse
argument_list|(
name|partn
operator|.
name|getPartitionPath
argument_list|()
argument_list|,
literal|1
argument_list|,
name|fileSys
argument_list|)
expr_stmt|;
name|newPartStats
operator|.
name|setStat
argument_list|(
name|StatsSetupConst
operator|.
name|NUM_FILES
argument_list|,
name|fileStatus
operator|.
name|length
argument_list|)
expr_stmt|;
name|long
name|partitionSize
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileStatus
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|partitionSize
operator|+=
name|fileStatus
index|[
name|i
index|]
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
name|newPartStats
operator|.
name|setStat
argument_list|(
name|StatsSetupConst
operator|.
name|TOTAL_SIZE
argument_list|,
name|partitionSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasStats
condition|)
block|{
name|PartitionStatistics
name|oldPartStats
init|=
operator|new
name|PartitionStatistics
argument_list|(
name|currentValues
argument_list|)
decl_stmt|;
name|tblStats
operator|.
name|updateStats
argument_list|(
name|oldPartStats
argument_list|,
name|newPartStats
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tblStats
operator|.
name|addPartitionStats
argument_list|(
name|newPartStats
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// update the metastore
comment|//
for|for
control|(
name|String
name|statType
range|:
name|supportedStats
control|)
block|{
name|long
name|statValue
init|=
name|newPartStats
operator|.
name|getStat
argument_list|(
name|statType
argument_list|)
decl_stmt|;
if|if
condition|(
name|statValue
operator|>=
literal|0
condition|)
block|{
name|parameters
operator|.
name|put
argument_list|(
name|statType
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|newPartStats
operator|.
name|getStat
argument_list|(
name|statType
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|tPart
operator|.
name|setParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|String
name|tableFullName
init|=
name|table
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|table
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|db
operator|.
name|alterPartition
argument_list|(
name|tableFullName
argument_list|,
operator|new
name|Partition
argument_list|(
name|table
argument_list|,
name|tPart
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|statsAggregator
operator|!=
literal|null
condition|)
block|{
name|statsAggregator
operator|.
name|cleanUp
argument_list|(
name|partitionID
argument_list|)
expr_stmt|;
block|}
name|console
operator|.
name|printInfo
argument_list|(
literal|"Partition "
operator|+
name|tableFullName
operator|+
name|partn
operator|.
name|getSpec
argument_list|()
operator|+
literal|" stats: ["
operator|+
name|newPartStats
operator|.
name|toString
argument_list|()
operator|+
literal|']'
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// write table stats to metastore
comment|//
name|parameters
operator|=
name|tTable
operator|.
name|getParameters
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|statType
range|:
name|supportedStats
control|)
block|{
name|parameters
operator|.
name|put
argument_list|(
name|statType
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|tblStats
operator|.
name|getStat
argument_list|(
name|statType
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|parameters
operator|.
name|put
argument_list|(
name|StatsSetupConst
operator|.
name|NUM_PARTITIONS
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|tblStats
operator|.
name|getNumPartitions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tTable
operator|.
name|setParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|String
name|tableFullName
init|=
name|table
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|table
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|db
operator|.
name|alterTable
argument_list|(
name|tableFullName
argument_list|,
operator|new
name|Table
argument_list|(
name|tTable
argument_list|)
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"Table "
operator|+
name|tableFullName
operator|+
literal|" stats: ["
operator|+
name|tblStats
operator|.
name|toString
argument_list|()
operator|+
literal|']'
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// return 0 since StatsTask should not fail the whole job
name|console
operator|.
name|printInfo
argument_list|(
literal|"[Warning] could not update stats."
argument_list|,
literal|"Failed with exception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|statsAggregator
operator|!=
literal|null
condition|)
block|{
name|statsAggregator
operator|.
name|closeConnection
argument_list|()
expr_stmt|;
block|}
block|}
comment|// StatsTask always return 0 so that the whole job won't fail
return|return
literal|0
return|;
block|}
specifier|private
name|boolean
name|existStats
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
return|return
name|parameters
operator|.
name|containsKey
argument_list|(
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|)
operator|||
name|parameters
operator|.
name|containsKey
argument_list|(
name|StatsSetupConst
operator|.
name|NUM_FILES
argument_list|)
operator|||
name|parameters
operator|.
name|containsKey
argument_list|(
name|StatsSetupConst
operator|.
name|TOTAL_SIZE
argument_list|)
operator|||
name|parameters
operator|.
name|containsKey
argument_list|(
name|StatsSetupConst
operator|.
name|RAW_DATA_SIZE
argument_list|)
operator|||
name|parameters
operator|.
name|containsKey
argument_list|(
name|StatsSetupConst
operator|.
name|NUM_PARTITIONS
argument_list|)
return|;
block|}
comment|/**    * Get the list of partitions that need to update statistics.    * TODO: we should reuse the Partitions generated at compile time    * since getting the list of partitions is quite expensive.    *    * @return a list of partitions that need to update statistics.    * @throws HiveException    */
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsList
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|work
operator|.
name|getTableSpecs
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// ANALYZE command
name|tableSpec
name|tblSpec
init|=
name|work
operator|.
name|getTableSpecs
argument_list|()
decl_stmt|;
name|table
operator|=
name|tblSpec
operator|.
name|tableHandle
expr_stmt|;
if|if
condition|(
operator|!
name|table
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// get all partitions that matches with the partition spec
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|tblSpec
operator|.
name|partitions
decl_stmt|;
if|if
condition|(
name|partitions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Partition
name|partn
range|:
name|partitions
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|partn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|work
operator|.
name|getLoadTableDesc
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// INSERT OVERWRITE command
name|LoadTableDesc
name|tbd
init|=
name|work
operator|.
name|getLoadTableDesc
argument_list|()
decl_stmt|;
name|table
operator|=
name|db
operator|.
name|getTable
argument_list|(
name|tbd
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|table
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DynamicPartitionCtx
name|dpCtx
init|=
name|tbd
operator|.
name|getDPCtx
argument_list|()
decl_stmt|;
if|if
condition|(
name|dpCtx
operator|!=
literal|null
operator|&&
name|dpCtx
operator|.
name|getNumDPCols
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// dynamic partitions
comment|// load the list of DP partitions and return the list of partition specs
for|for
control|(
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
range|:
name|dpPartSpecs
control|)
block|{
name|Partition
name|partn
init|=
name|db
operator|.
name|getPartition
argument_list|(
name|table
argument_list|,
name|partSpec
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|partn
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// static partition
name|Partition
name|partn
init|=
name|db
operator|.
name|getPartition
argument_list|(
name|table
argument_list|,
name|tbd
operator|.
name|getPartitionSpec
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|partn
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
comment|/**    * This method is static as it is called from the shutdown hook at the ExecDriver.    */
specifier|public
specifier|static
name|void
name|cleanUp
parameter_list|(
name|String
name|jobID
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
name|StatsAggregator
name|statsAggregator
decl_stmt|;
name|String
name|statsImplementationClass
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|config
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSDBCLASS
argument_list|)
decl_stmt|;
name|StatsFactory
operator|.
name|setImplementation
argument_list|(
name|statsImplementationClass
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|statsAggregator
operator|=
name|StatsFactory
operator|.
name|getStatsAggregator
argument_list|()
expr_stmt|;
if|if
condition|(
name|statsAggregator
operator|.
name|connect
argument_list|(
name|config
argument_list|)
condition|)
block|{
name|statsAggregator
operator|.
name|cleanUp
argument_list|(
name|jobID
operator|+
name|Path
operator|.
name|SEPARATOR
argument_list|)
expr_stmt|;
comment|// Adding the path separator to avoid an Id
comment|// being a prefix of another ID
name|statsAggregator
operator|.
name|closeConnection
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

