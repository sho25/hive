begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ExplainConfiguration
operator|.
name|AnalyzeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|StatsWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|StageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|BasicStatsNoJobTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|BasicStatsTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|ColStatsProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|IStatsProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * StatsTask implementation.  **/
end_comment

begin_class
specifier|public
class|class
name|StatsTask
extends|extends
name|Task
argument_list|<
name|StatsWork
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|transient
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StatsTask
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|StatsTask
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|IStatsProcessor
argument_list|>
name|processors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|QueryState
name|queryState
parameter_list|,
name|QueryPlan
name|queryPlan
parameter_list|,
name|DriverContext
name|ctx
parameter_list|,
name|CompilationOpContext
name|opContext
parameter_list|)
block|{
name|super
operator|.
name|initialize
argument_list|(
name|queryState
argument_list|,
name|queryPlan
argument_list|,
name|ctx
argument_list|,
name|opContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|work
operator|.
name|getBasicStatsWork
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|BasicStatsTask
name|task
init|=
operator|new
name|BasicStatsTask
argument_list|(
name|conf
argument_list|,
name|work
operator|.
name|getBasicStatsWork
argument_list|()
argument_list|)
decl_stmt|;
name|task
operator|.
name|followedColStats
operator|=
name|work
operator|.
name|hasColStats
argument_list|()
expr_stmt|;
name|processors
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|work
operator|.
name|isFooterScan
argument_list|()
condition|)
block|{
name|BasicStatsNoJobTask
name|t
init|=
operator|new
name|BasicStatsNoJobTask
argument_list|(
name|conf
argument_list|,
name|work
operator|.
name|getBasicStatsNoJobWork
argument_list|()
argument_list|)
decl_stmt|;
name|processors
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|work
operator|.
name|hasColStats
argument_list|()
condition|)
block|{
name|processors
operator|.
name|add
argument_list|(
operator|new
name|ColStatsProcessor
argument_list|(
name|work
operator|.
name|getColStats
argument_list|()
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|IStatsProcessor
name|p
range|:
name|processors
control|)
block|{
name|p
operator|.
name|initialize
argument_list|(
name|opContext
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|(
name|DriverContext
name|driverContext
parameter_list|)
block|{
if|if
condition|(
name|driverContext
operator|.
name|getCtx
argument_list|()
operator|.
name|getExplainAnalyze
argument_list|()
operator|==
name|AnalyzeState
operator|.
name|RUNNING
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|work
operator|.
name|isAggregating
argument_list|()
operator|&&
name|work
operator|.
name|isFooterScan
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can not have both basic stats work and stats no job work!"
argument_list|)
throw|;
block|}
name|int
name|ret
init|=
literal|0
decl_stmt|;
try|try
block|{
if|if
condition|(
name|work
operator|.
name|isFooterScan
argument_list|()
condition|)
block|{
name|work
operator|.
name|getBasicStatsNoJobWork
argument_list|()
operator|.
name|setPartitions
argument_list|(
name|work
operator|.
name|getPartitions
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Hive
name|db
init|=
name|getHive
argument_list|()
decl_stmt|;
name|Table
name|tbl
init|=
name|getTable
argument_list|(
name|db
argument_list|)
decl_stmt|;
for|for
control|(
name|IStatsProcessor
name|task
range|:
name|processors
control|)
block|{
name|task
operator|.
name|setDpPartSpecs
argument_list|(
name|dpPartSpecs
argument_list|)
expr_stmt|;
name|ret
operator|=
name|task
operator|.
name|process
argument_list|(
name|db
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
return|return
name|ret
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to run stats task"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|Table
name|getTable
parameter_list|(
name|Hive
name|db
parameter_list|)
throws|throws
name|SemanticException
throws|,
name|HiveException
block|{
name|Table
name|tbl
init|=
name|work
operator|.
name|getTable
argument_list|()
decl_stmt|;
comment|// FIXME for ctas this is still needed because location is not set sometimes
if|if
condition|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
name|tbl
operator|=
name|db
operator|.
name|getTable
argument_list|(
name|work
operator|.
name|getFullTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|tbl
return|;
block|}
annotation|@
name|Override
specifier|public
name|StageType
name|getType
parameter_list|()
block|{
return|return
name|StageType
operator|.
name|STATS
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"STATS TASK"
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|Partition
argument_list|>
name|dpPartSpecs
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|receiveFeed
parameter_list|(
name|FeedType
name|feedType
parameter_list|,
name|Object
name|feedValue
parameter_list|)
block|{
comment|// this method should be called by MoveTask when there are dynamic
comment|// partitions generated
if|if
condition|(
name|feedType
operator|==
name|FeedType
operator|.
name|DYNAMIC_PARTITIONS
condition|)
block|{
name|dpPartSpecs
operator|=
operator|(
name|Collection
argument_list|<
name|Partition
argument_list|>
operator|)
name|feedValue
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|ExecutorService
name|newThreadPool
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|int
name|numThreads
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_STATS_GATHER_NUM_THREADS
argument_list|)
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numThreads
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"StatsNoJobTask-Thread-%d"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialized threadpool for stats computation with {} threads"
argument_list|,
name|numThreads
argument_list|)
expr_stmt|;
return|return
name|executor
return|;
block|}
block|}
end_class

end_unit

