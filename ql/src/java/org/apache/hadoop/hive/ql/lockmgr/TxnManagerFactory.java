begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * A factory to get an instance of {@link HiveTxnManager}.  This should  * always be called rather than building a transaction manager via reflection.  * This factory will read the configuration file to determine which  * transaction manager to instantiate.  It will stash the chosen transaction  * manager into the Context object, and subsequently return it from there so  * that if there are multiple Hive threads running,  * each will get it's appropriate transaction manager.  */
end_comment

begin_class
specifier|public
class|class
name|TxnManagerFactory
block|{
specifier|private
specifier|static
name|TxnManagerFactory
name|self
decl_stmt|;
comment|/**    * Get the singleton instance of this factory.    * @return this factory    */
specifier|public
specifier|static
specifier|synchronized
name|TxnManagerFactory
name|getTxnManagerFactory
parameter_list|()
block|{
if|if
condition|(
name|self
operator|==
literal|null
condition|)
block|{
name|self
operator|=
operator|new
name|TxnManagerFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|self
return|;
block|}
comment|/**    * Create a new transaction manager.  The transaction manager to    * instantiate will be determined by the hive.txn.manager value in the    * configuration.  This should not be called if a transaction manager has    * already been constructed and stored in the Context object.    * @param conf HiveConf object used to construct the transaction manager    * @return the transaction manager    * @throws LockException if there is an error constructing the transaction    * manager.    */
specifier|public
name|HiveTxnManager
name|getTxnManager
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|LockException
block|{
name|HiveTxnManager
name|txnMgr
init|=
literal|null
decl_stmt|;
comment|// Determine the transaction manager to use from the configuration.
name|String
name|txnMgrName
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_MANAGER
argument_list|)
decl_stmt|;
if|if
condition|(
name|txnMgrName
operator|==
literal|null
operator|||
name|txnMgrName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
name|ErrorMsg
operator|.
name|TXNMGR_NOT_SPECIFIED
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
comment|// Instantiate the chosen transaction manager
try|try
block|{
name|HiveTxnManagerImpl
name|impl
init|=
operator|(
name|HiveTxnManagerImpl
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClassByName
argument_list|(
name|txnMgrName
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|impl
operator|.
name|setHiveConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|txnMgr
operator|=
name|impl
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
name|ErrorMsg
operator|.
name|TXNMGR_NOT_INSTANTIATED
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|txnMgr
return|;
block|}
specifier|private
name|TxnManagerFactory
parameter_list|()
block|{   }
block|}
end_class

end_unit

