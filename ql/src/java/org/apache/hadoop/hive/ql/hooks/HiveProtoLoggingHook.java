begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERDATABASE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERDATABASE_OWNER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERPARTITION_BUCKETNUM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERPARTITION_FILEFORMAT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERPARTITION_LOCATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERPARTITION_MERGEFILES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERPARTITION_SERDEPROPERTIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERPARTITION_SERIALIZER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_ADDCOLS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_ADDCONSTRAINT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_ADDPARTS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_ARCHIVE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_BUCKETNUM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_CLUSTER_SORT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_COMPACT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_DROPCONSTRAINT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_DROPPARTS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_EXCHANGEPARTITION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_FILEFORMAT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_LOCATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_MERGEFILES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_PARTCOLTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_PROPERTIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_RENAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_RENAMECOL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_RENAMEPART
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_REPLACECOLS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_SERDEPROPERTIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_SERIALIZER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_SKEWED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_TOUCH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_UNARCHIVE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_UPDATEPARTSTATS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTABLE_UPDATETABLESTATS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERTBLPART_SKEWED_LOCATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERVIEW_AS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERVIEW_PROPERTIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ALTERVIEW_RENAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|ANALYZE_TABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|CACHE_METADATA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|CREATEDATABASE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|CREATEFUNCTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|CREATEMACRO
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|CREATEROLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|CREATETABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|CREATETABLE_AS_SELECT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|CREATEVIEW
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|DROPDATABASE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|DROPFUNCTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|DROPMACRO
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|DROPROLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|DROPTABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|DROPVIEW
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|DROPVIEW_PROPERTIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|EXPORT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|IMPORT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|KILL_QUERY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|LOAD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|LOCKTABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|MSCK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|QUERY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|RELOADFUNCTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|TRUNCATETABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
operator|.
name|UNLOCKTABLE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|impl
operator|.
name|LlapRegistryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExplainTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|mr
operator|.
name|ExecDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|TezTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|proto
operator|.
name|HiveHookEvents
operator|.
name|HiveHookEventProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|proto
operator|.
name|HiveHookEvents
operator|.
name|MapFieldEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ExplainConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExplainWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|ShutdownHookManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * Log events from hive hook using protobuf serialized format, partitioned by date.  */
end_comment

begin_class
specifier|public
class|class
name|HiveProtoLoggingHook
implements|implements
name|ExecuteWithHookContext
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveProtoLoggingHook
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|includedOperationSet
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|VERSION
init|=
literal|1
decl_stmt|;
static|static
block|{
comment|// List of operation for which we log.
name|includedOperationSet
operator|=
name|Arrays
operator|.
name|stream
argument_list|(
operator|new
name|HiveOperation
index|[]
block|{
name|LOAD
block|,
name|EXPORT
block|,
name|IMPORT
block|,
name|CREATEDATABASE
block|,
name|DROPDATABASE
block|,
name|DROPTABLE
block|,
name|MSCK
block|,
name|ALTERTABLE_ADDCOLS
block|,
name|ALTERTABLE_REPLACECOLS
block|,
name|ALTERTABLE_RENAMECOL
block|,
name|ALTERTABLE_RENAMEPART
block|,
name|ALTERTABLE_UPDATEPARTSTATS
block|,
name|ALTERTABLE_UPDATETABLESTATS
block|,
name|ALTERTABLE_RENAME
block|,
name|ALTERTABLE_DROPPARTS
block|,
name|ALTERTABLE_ADDPARTS
block|,
name|ALTERTABLE_TOUCH
block|,
name|ALTERTABLE_ARCHIVE
block|,
name|ALTERTABLE_UNARCHIVE
block|,
name|ALTERTABLE_PROPERTIES
block|,
name|ALTERTABLE_SERIALIZER
block|,
name|ALTERPARTITION_SERIALIZER
block|,
name|ALTERTABLE_SERDEPROPERTIES
block|,
name|ALTERPARTITION_SERDEPROPERTIES
block|,
name|ALTERTABLE_CLUSTER_SORT
block|,
name|ANALYZE_TABLE
block|,
name|CACHE_METADATA
block|,
name|ALTERTABLE_BUCKETNUM
block|,
name|ALTERPARTITION_BUCKETNUM
block|,
name|CREATEFUNCTION
block|,
name|DROPFUNCTION
block|,
name|RELOADFUNCTION
block|,
name|CREATEMACRO
block|,
name|DROPMACRO
block|,
name|CREATEVIEW
block|,
name|DROPVIEW
block|,
name|ALTERVIEW_PROPERTIES
block|,
name|DROPVIEW_PROPERTIES
block|,
name|LOCKTABLE
block|,
name|UNLOCKTABLE
block|,
name|CREATEROLE
block|,
name|DROPROLE
block|,
name|ALTERTABLE_FILEFORMAT
block|,
name|ALTERPARTITION_FILEFORMAT
block|,
name|ALTERTABLE_LOCATION
block|,
name|ALTERPARTITION_LOCATION
block|,
name|CREATETABLE
block|,
name|TRUNCATETABLE
block|,
name|CREATETABLE_AS_SELECT
block|,
name|QUERY
block|,
name|ALTERDATABASE
block|,
name|ALTERDATABASE_OWNER
block|,
name|ALTERTABLE_MERGEFILES
block|,
name|ALTERPARTITION_MERGEFILES
block|,
name|ALTERTABLE_SKEWED
block|,
name|ALTERTBLPART_SKEWED_LOCATION
block|,
name|ALTERTABLE_PARTCOLTYPE
block|,
name|ALTERTABLE_EXCHANGEPARTITION
block|,
name|ALTERTABLE_DROPCONSTRAINT
block|,
name|ALTERTABLE_ADDCONSTRAINT
block|,
name|ALTERVIEW_RENAME
block|,
name|ALTERVIEW_AS
block|,
name|ALTERTABLE_COMPACT
block|,
name|KILL_QUERY
block|}
argument_list|)
operator|.
name|map
argument_list|(
name|HiveOperation
operator|::
name|getOperationName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|String
name|HIVE_EVENTS_BASE_PATH
init|=
literal|"hive.hook.proto.base-directory"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HIVE_HOOK_PROTO_QUEUE_CAPACITY
init|=
literal|"hive.hook.proto.queue.capacity"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|HIVE_HOOK_PROTO_QUEUE_CAPACITY_DEFAULT
init|=
literal|64
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|WAIT_TIME
init|=
literal|5
decl_stmt|;
specifier|public
enum|enum
name|EventType
block|{
name|QUERY_SUBMITTED
block|,
name|QUERY_COMPLETED
block|}
specifier|public
enum|enum
name|OtherInfoType
block|{
name|QUERY
block|,
name|STATUS
block|,
name|TEZ
block|,
name|MAPRED
block|,
name|INVOKER_INFO
block|,
name|SESSION_ID
block|,
name|THREAD_NAME
block|,
name|VERSION
block|,
name|CLIENT_IP_ADDRESS
block|,
name|HIVE_ADDRESS
block|,
name|HIVE_INSTANCE_TYPE
block|,
name|CONF
block|,
name|PERF
block|,
name|LLAP_APP_ID
block|}
specifier|public
enum|enum
name|ExecutionMode
block|{
name|MR
block|,
name|TEZ
block|,
name|LLAP
block|,
name|SPARK
block|,
name|NONE
block|}
specifier|static
class|class
name|EventLogger
block|{
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
specifier|private
specifier|final
name|String
name|logFileName
decl_stmt|;
specifier|private
specifier|final
name|DatePartitionedLogger
argument_list|<
name|HiveHookEventProto
argument_list|>
name|logger
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|eventHandler
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|logWriter
decl_stmt|;
name|EventLogger
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|Clock
name|clock
parameter_list|)
block|{
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
comment|// randomUUID is slow, since its cryptographically secure, only first query will take time.
name|this
operator|.
name|logFileName
operator|=
literal|"hive_"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|String
name|baseDir
init|=
name|conf
operator|.
name|get
argument_list|(
name|HIVE_EVENTS_BASE_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseDir
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|HIVE_EVENTS_BASE_PATH
operator|+
literal|" is not set, logging disabled."
argument_list|)
expr_stmt|;
block|}
name|DatePartitionedLogger
argument_list|<
name|HiveHookEventProto
argument_list|>
name|tmpLogger
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|baseDir
operator|!=
literal|null
condition|)
block|{
name|tmpLogger
operator|=
operator|new
name|DatePartitionedLogger
argument_list|<>
argument_list|(
name|HiveHookEventProto
operator|.
name|PARSER
argument_list|,
operator|new
name|Path
argument_list|(
name|baseDir
argument_list|)
argument_list|,
name|conf
argument_list|,
name|clock
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to intialize logger, logging disabled."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|logger
operator|=
name|tmpLogger
expr_stmt|;
if|if
condition|(
name|logger
operator|==
literal|null
condition|)
block|{
name|eventHandler
operator|=
literal|null
expr_stmt|;
name|logWriter
operator|=
literal|null
expr_stmt|;
return|return;
block|}
name|int
name|queueCapacity
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|HIVE_HOOK_PROTO_QUEUE_CAPACITY
argument_list|,
name|HIVE_HOOK_PROTO_QUEUE_CAPACITY_DEFAULT
argument_list|)
decl_stmt|;
name|ThreadFactory
name|threadFactory
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"Hive Hook Proto Event Handler %d"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|eventHandler
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|(
name|queueCapacity
argument_list|)
argument_list|,
name|threadFactory
argument_list|)
expr_stmt|;
name|threadFactory
operator|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"Hive Hook Proto Log Writer %d"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logWriter
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|(
name|queueCapacity
argument_list|)
argument_list|,
name|threadFactory
argument_list|)
expr_stmt|;
block|}
name|void
name|shutdown
parameter_list|()
block|{
comment|// Wait for all the events to be written off, the order of service is important
for|for
control|(
name|ExecutorService
name|service
range|:
operator|new
name|ExecutorService
index|[]
block|{
name|eventHandler
block|,
name|logWriter
block|}
control|)
block|{
if|if
condition|(
name|service
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|service
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
name|service
operator|.
name|awaitTermination
argument_list|(
name|WAIT_TIME
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got interrupted exception while waiting for events to be flushed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|handle
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|eventHandler
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
name|generateEvent
argument_list|(
name|hookContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Handler queue full ignoring event: "
operator|+
name|hookContext
operator|.
name|getHookType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|generateEvent
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
block|{
name|QueryPlan
name|plan
init|=
name|hookContext
operator|.
name|getQueryPlan
argument_list|()
decl_stmt|;
if|if
condition|(
name|plan
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received null query plan."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|includedOperationSet
operator|.
name|contains
argument_list|(
name|plan
operator|.
name|getOperationName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not logging events of operation type : {}"
argument_list|,
name|plan
operator|.
name|getOperationName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|HiveHookEventProto
name|event
decl_stmt|;
switch|switch
condition|(
name|hookContext
operator|.
name|getHookType
argument_list|()
condition|)
block|{
case|case
name|PRE_EXEC_HOOK
case|:
name|event
operator|=
name|getPreHookEvent
argument_list|(
name|hookContext
argument_list|)
expr_stmt|;
break|break;
case|case
name|POST_EXEC_HOOK
case|:
name|event
operator|=
name|getPostHookEvent
argument_list|(
name|hookContext
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|ON_FAILURE_HOOK
case|:
name|event
operator|=
name|getPostHookEvent
argument_list|(
name|hookContext
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring event of type: {}"
argument_list|,
name|hookContext
operator|.
name|getHookType
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|logWriter
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
name|writeEvent
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Writer queue full ignoring event {} for query {}"
argument_list|,
name|hookContext
operator|.
name|getHookType
argument_list|()
argument_list|,
name|plan
operator|.
name|getQueryId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|writeEvent
parameter_list|(
name|HiveHookEventProto
name|event
parameter_list|)
block|{
try|try
init|(
name|ProtoMessageWriter
argument_list|<
name|HiveHookEventProto
argument_list|>
name|writer
init|=
name|logger
operator|.
name|getWriter
argument_list|(
name|logFileName
argument_list|)
init|)
block|{
name|writer
operator|.
name|writeProto
argument_list|(
name|event
argument_list|)
expr_stmt|;
comment|// This does not work hence, opening and closing file for every event.
comment|// writer.hflush();
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error writing proto message for query {}, eventType: {}: "
argument_list|,
name|event
operator|.
name|getHiveQueryId
argument_list|()
argument_list|,
name|event
operator|.
name|getEventType
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|HiveHookEventProto
name|getPreHookEvent
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
block|{
name|QueryPlan
name|plan
init|=
name|hookContext
operator|.
name|getQueryPlan
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received pre-hook notification for: "
operator|+
name|plan
operator|.
name|getQueryId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make a copy so that we do not modify hookContext conf.
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|(
name|hookContext
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExecDriver
argument_list|>
name|mrTasks
init|=
name|Utilities
operator|.
name|getMRTasks
argument_list|(
name|plan
operator|.
name|getRootTasks
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TezTask
argument_list|>
name|tezTasks
init|=
name|Utilities
operator|.
name|getTezTasks
argument_list|(
name|plan
operator|.
name|getRootTasks
argument_list|()
argument_list|)
decl_stmt|;
name|ExecutionMode
name|executionMode
init|=
name|getExecutionMode
argument_list|(
name|plan
argument_list|,
name|mrTasks
argument_list|,
name|tezTasks
argument_list|)
decl_stmt|;
name|HiveHookEventProto
operator|.
name|Builder
name|builder
init|=
name|HiveHookEventProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setEventType
argument_list|(
name|EventType
operator|.
name|QUERY_SUBMITTED
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTimestamp
argument_list|(
name|plan
operator|.
name|getQueryStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setHiveQueryId
argument_list|(
name|plan
operator|.
name|getQueryId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setUser
argument_list|(
name|getUser
argument_list|(
name|hookContext
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setRequestUser
argument_list|(
name|getRequestUser
argument_list|(
name|hookContext
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setQueue
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"mapreduce.job.queuename"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setExecutionMode
argument_list|(
name|executionMode
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAllTablesRead
argument_list|(
name|getTablesFromEntitySet
argument_list|(
name|hookContext
operator|.
name|getInputs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAllTablesWritten
argument_list|(
name|getTablesFromEntitySet
argument_list|(
name|hookContext
operator|.
name|getOutputs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hookContext
operator|.
name|getOperationId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setOperationId
argument_list|(
name|hookContext
operator|.
name|getOperationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|JSONObject
name|queryObj
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|queryObj
operator|.
name|put
argument_list|(
literal|"queryText"
argument_list|,
name|plan
operator|.
name|getQueryStr
argument_list|()
argument_list|)
expr_stmt|;
name|queryObj
operator|.
name|put
argument_list|(
literal|"queryPlan"
argument_list|,
name|getExplainPlan
argument_list|(
name|plan
argument_list|,
name|conf
argument_list|,
name|hookContext
argument_list|)
argument_list|)
expr_stmt|;
name|addMapEntry
argument_list|(
name|builder
argument_list|,
name|OtherInfoType
operator|.
name|QUERY
argument_list|,
name|queryObj
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected exception while serializing json."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|addMapEntry
argument_list|(
name|builder
argument_list|,
name|OtherInfoType
operator|.
name|TEZ
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|tezTasks
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|addMapEntry
argument_list|(
name|builder
argument_list|,
name|OtherInfoType
operator|.
name|MAPRED
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|mrTasks
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|addMapEntry
argument_list|(
name|builder
argument_list|,
name|OtherInfoType
operator|.
name|SESSION_ID
argument_list|,
name|hookContext
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|logID
init|=
name|conf
operator|.
name|getLogIdVar
argument_list|(
name|hookContext
operator|.
name|getSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|addMapEntry
argument_list|(
name|builder
argument_list|,
name|OtherInfoType
operator|.
name|INVOKER_INFO
argument_list|,
name|logID
argument_list|)
expr_stmt|;
name|addMapEntry
argument_list|(
name|builder
argument_list|,
name|OtherInfoType
operator|.
name|THREAD_NAME
argument_list|,
name|hookContext
operator|.
name|getThreadId
argument_list|()
argument_list|)
expr_stmt|;
name|addMapEntry
argument_list|(
name|builder
argument_list|,
name|OtherInfoType
operator|.
name|VERSION
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|addMapEntry
argument_list|(
name|builder
argument_list|,
name|OtherInfoType
operator|.
name|CLIENT_IP_ADDRESS
argument_list|,
name|hookContext
operator|.
name|getIpAddress
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|hiveInstanceAddress
init|=
name|hookContext
operator|.
name|getHiveInstanceAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|hiveInstanceAddress
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|hiveInstanceAddress
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostAddress
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error tyring to get localhost address: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|addMapEntry
argument_list|(
name|builder
argument_list|,
name|OtherInfoType
operator|.
name|HIVE_ADDRESS
argument_list|,
name|hiveInstanceAddress
argument_list|)
expr_stmt|;
name|String
name|hiveInstanceType
init|=
name|hookContext
operator|.
name|isHiveServerQuery
argument_list|()
condition|?
literal|"HS2"
else|:
literal|"CLI"
decl_stmt|;
name|addMapEntry
argument_list|(
name|builder
argument_list|,
name|OtherInfoType
operator|.
name|HIVE_INSTANCE_TYPE
argument_list|,
name|hiveInstanceType
argument_list|)
expr_stmt|;
name|ApplicationId
name|llapId
init|=
name|determineLlapId
argument_list|(
name|conf
argument_list|,
name|executionMode
argument_list|)
decl_stmt|;
if|if
condition|(
name|llapId
operator|!=
literal|null
condition|)
block|{
name|addMapEntry
argument_list|(
name|builder
argument_list|,
name|OtherInfoType
operator|.
name|LLAP_APP_ID
argument_list|,
name|llapId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|stripHiddenConfigurations
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|JSONObject
name|confObj
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|setting
range|:
name|conf
control|)
block|{
name|confObj
operator|.
name|put
argument_list|(
name|setting
operator|.
name|getKey
argument_list|()
argument_list|,
name|setting
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addMapEntry
argument_list|(
name|builder
argument_list|,
name|OtherInfoType
operator|.
name|CONF
argument_list|,
name|confObj
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|HiveHookEventProto
name|getPostHookEvent
parameter_list|(
name|HookContext
name|hookContext
parameter_list|,
name|boolean
name|success
parameter_list|)
block|{
name|QueryPlan
name|plan
init|=
name|hookContext
operator|.
name|getQueryPlan
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received post-hook notification for: "
operator|+
name|plan
operator|.
name|getQueryId
argument_list|()
argument_list|)
expr_stmt|;
name|HiveHookEventProto
operator|.
name|Builder
name|builder
init|=
name|HiveHookEventProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setEventType
argument_list|(
name|EventType
operator|.
name|QUERY_COMPLETED
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTimestamp
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setHiveQueryId
argument_list|(
name|plan
operator|.
name|getQueryId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setUser
argument_list|(
name|getUser
argument_list|(
name|hookContext
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setRequestUser
argument_list|(
name|getRequestUser
argument_list|(
name|hookContext
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hookContext
operator|.
name|getOperationId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setOperationId
argument_list|(
name|hookContext
operator|.
name|getOperationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addMapEntry
argument_list|(
name|builder
argument_list|,
name|OtherInfoType
operator|.
name|STATUS
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|success
argument_list|)
argument_list|)
expr_stmt|;
name|JSONObject
name|perfObj
init|=
operator|new
name|JSONObject
argument_list|(
name|hookContext
operator|.
name|getPerfLogger
argument_list|()
operator|.
name|getEndTimes
argument_list|()
argument_list|)
decl_stmt|;
name|addMapEntry
argument_list|(
name|builder
argument_list|,
name|OtherInfoType
operator|.
name|PERF
argument_list|,
name|perfObj
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|void
name|addMapEntry
parameter_list|(
name|HiveHookEventProto
operator|.
name|Builder
name|builder
parameter_list|,
name|OtherInfoType
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addOtherInfo
argument_list|(
name|MapFieldEntry
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
name|key
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getUser
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
block|{
return|return
name|hookContext
operator|.
name|getUgi
argument_list|()
operator|.
name|getShortUserName
argument_list|()
return|;
block|}
specifier|private
name|String
name|getRequestUser
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
block|{
name|String
name|requestuser
init|=
name|hookContext
operator|.
name|getUserName
argument_list|()
decl_stmt|;
if|if
condition|(
name|requestuser
operator|==
literal|null
condition|)
block|{
name|requestuser
operator|=
name|hookContext
operator|.
name|getUgi
argument_list|()
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
return|return
name|requestuser
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getTablesFromEntitySet
parameter_list|(
name|Set
argument_list|<
name|?
extends|extends
name|Entity
argument_list|>
name|entities
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entity
name|entity
range|:
name|entities
control|)
block|{
if|if
condition|(
name|entity
operator|.
name|getType
argument_list|()
operator|==
name|Entity
operator|.
name|Type
operator|.
name|TABLE
condition|)
block|{
name|tableNames
operator|.
name|add
argument_list|(
name|entity
operator|.
name|getTable
argument_list|()
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|entity
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tableNames
return|;
block|}
specifier|private
name|ExecutionMode
name|getExecutionMode
parameter_list|(
name|QueryPlan
name|plan
parameter_list|,
name|List
argument_list|<
name|ExecDriver
argument_list|>
name|mrTasks
parameter_list|,
name|List
argument_list|<
name|TezTask
argument_list|>
name|tezTasks
parameter_list|)
block|{
if|if
condition|(
name|tezTasks
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Need to go in and check if any of the tasks is running in LLAP mode.
for|for
control|(
name|TezTask
name|tezTask
range|:
name|tezTasks
control|)
block|{
if|if
condition|(
name|tezTask
operator|.
name|getWork
argument_list|()
operator|.
name|getLlapMode
argument_list|()
condition|)
block|{
return|return
name|ExecutionMode
operator|.
name|LLAP
return|;
block|}
block|}
return|return
name|ExecutionMode
operator|.
name|TEZ
return|;
block|}
elseif|else
if|if
condition|(
name|mrTasks
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|ExecutionMode
operator|.
name|MR
return|;
block|}
elseif|else
if|if
condition|(
name|Utilities
operator|.
name|getSparkTasks
argument_list|(
name|plan
operator|.
name|getRootTasks
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|ExecutionMode
operator|.
name|SPARK
return|;
block|}
else|else
block|{
return|return
name|ExecutionMode
operator|.
name|NONE
return|;
block|}
block|}
specifier|private
name|JSONObject
name|getExplainPlan
parameter_list|(
name|QueryPlan
name|plan
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Get explain plan for the query.
name|ExplainConfiguration
name|config
init|=
operator|new
name|ExplainConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setFormatted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ExplainWork
name|work
init|=
operator|new
name|ExplainWork
argument_list|(
literal|null
argument_list|,
comment|// resFile
literal|null
argument_list|,
comment|// pCtx
name|plan
operator|.
name|getRootTasks
argument_list|()
argument_list|,
comment|// RootTasks
name|plan
operator|.
name|getFetchTask
argument_list|()
argument_list|,
comment|// FetchTask
literal|null
argument_list|,
comment|// analyzer
name|config
argument_list|,
comment|// explainConfig
literal|null
comment|// cboInfo
argument_list|)
decl_stmt|;
name|ExplainTask
name|explain
init|=
operator|(
name|ExplainTask
operator|)
name|TaskFactory
operator|.
name|get
argument_list|(
name|work
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|explain
operator|.
name|initialize
argument_list|(
name|hookContext
operator|.
name|getQueryState
argument_list|()
argument_list|,
name|plan
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|explain
operator|.
name|getJSONPlan
argument_list|(
literal|null
argument_list|,
name|work
argument_list|)
return|;
block|}
specifier|private
name|ApplicationId
name|determineLlapId
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|ExecutionMode
name|mode
parameter_list|)
block|{
comment|// Note: for now, LLAP is only supported in Tez tasks. Will never come to MR; others may
comment|// be added here, although this is only necessary to have extra debug information.
if|if
condition|(
name|mode
operator|==
name|ExecutionMode
operator|.
name|LLAP
condition|)
block|{
comment|// In HS2, the client should have been cached already for the common case.
comment|// Otherwise, this may actually introduce delay to compilation for the first query.
name|String
name|hosts
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_DAEMON_SERVICE_HOSTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|hosts
operator|!=
literal|null
operator|&&
operator|!
name|hosts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
return|return
name|LlapRegistryService
operator|.
name|getClient
argument_list|(
name|conf
argument_list|)
operator|.
name|getApplicationId
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error trying to get llap instance"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cannot determine LLAP instance on client - service hosts are not set"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|// Singleton using DCL.
specifier|private
specifier|static
specifier|volatile
name|EventLogger
name|instance
decl_stmt|;
specifier|static
name|EventLogger
name|getInstance
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|EventLogger
operator|.
name|class
init|)
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
operator|new
name|EventLogger
argument_list|(
name|conf
argument_list|,
name|SystemClock
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|ShutdownHookManager
operator|.
name|addShutdownHook
argument_list|(
name|instance
operator|::
name|shutdown
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|instance
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|EventLogger
name|logger
init|=
name|EventLogger
operator|.
name|getInstance
argument_list|(
name|hookContext
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|handle
argument_list|(
name|hookContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got exceptoin while processing event: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

