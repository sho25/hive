begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|ResourceDownloader
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ResourceDownloader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|DependencyResolver
name|dependencyResolver
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|File
name|resourceDir
decl_stmt|;
specifier|public
name|ResourceDownloader
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|resourceDirPath
parameter_list|)
block|{
name|this
operator|.
name|dependencyResolver
operator|=
operator|new
name|DependencyResolver
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|resourceDir
operator|=
operator|new
name|File
argument_list|(
name|resourceDirPath
argument_list|)
expr_stmt|;
name|ensureDirectory
argument_list|(
name|resourceDir
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param path    * @return URI corresponding to the path.    */
specifier|public
specifier|static
name|URI
name|createURI
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
operator|new
name|URI
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isIvyUri
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
literal|"ivy"
operator|.
name|equalsIgnoreCase
argument_list|(
name|createURI
argument_list|(
name|value
argument_list|)
operator|.
name|getScheme
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isHdfsUri
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
literal|"hdfs"
operator|.
name|equalsIgnoreCase
argument_list|(
name|createURI
argument_list|(
name|value
argument_list|)
operator|.
name|getScheme
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isFileUri
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|String
name|scheme
init|=
literal|null
decl_stmt|;
try|try
block|{
name|scheme
operator|=
name|createURI
argument_list|(
name|value
argument_list|)
operator|.
name|getScheme
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
return|return
operator|(
name|scheme
operator|==
literal|null
operator|)
operator|||
name|scheme
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"file"
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|URI
argument_list|>
name|resolveAndDownload
parameter_list|(
name|String
name|source
parameter_list|,
name|boolean
name|convertToUnix
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
return|return
name|resolveAndDownloadInternal
argument_list|(
name|createURI
argument_list|(
name|source
argument_list|)
argument_list|,
literal|null
argument_list|,
name|convertToUnix
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|URI
argument_list|>
name|downloadExternal
parameter_list|(
name|URI
name|source
parameter_list|,
name|String
name|subDir
parameter_list|,
name|boolean
name|convertToUnix
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
return|return
name|resolveAndDownloadInternal
argument_list|(
name|source
argument_list|,
name|subDir
argument_list|,
name|convertToUnix
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|URI
argument_list|>
name|resolveAndDownloadInternal
parameter_list|(
name|URI
name|source
parameter_list|,
name|String
name|subDir
parameter_list|,
name|boolean
name|convertToUnix
parameter_list|,
name|boolean
name|isLocalAllowed
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
switch|switch
condition|(
name|getURLType
argument_list|(
name|source
argument_list|)
condition|)
block|{
case|case
name|FILE
case|:
return|return
name|isLocalAllowed
condition|?
name|Lists
operator|.
name|newArrayList
argument_list|(
name|source
argument_list|)
else|:
literal|null
return|;
case|case
name|IVY
case|:
return|return
name|dependencyResolver
operator|.
name|downloadDependencies
argument_list|(
name|source
argument_list|)
return|;
case|case
name|HDFS
case|:
case|case
name|OTHER
case|:
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|createURI
argument_list|(
name|downloadResource
argument_list|(
name|source
argument_list|,
name|subDir
argument_list|,
name|convertToUnix
argument_list|)
argument_list|)
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|getURLType
argument_list|(
name|source
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|downloadResource
parameter_list|(
name|URI
name|srcUri
parameter_list|,
name|String
name|subDir
parameter_list|,
name|boolean
name|convertToUnix
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"converting to local "
operator|+
name|srcUri
argument_list|)
expr_stmt|;
name|File
name|destinationDir
init|=
operator|(
name|subDir
operator|==
literal|null
operator|)
condition|?
name|resourceDir
else|:
operator|new
name|File
argument_list|(
name|resourceDir
argument_list|,
name|subDir
argument_list|)
decl_stmt|;
name|ensureDirectory
argument_list|(
name|destinationDir
argument_list|)
expr_stmt|;
name|File
name|destinationFile
init|=
operator|new
name|File
argument_list|(
name|destinationDir
argument_list|,
operator|new
name|Path
argument_list|(
name|srcUri
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|dest
init|=
name|destinationFile
operator|.
name|getCanonicalPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|destinationFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|dest
return|;
block|}
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|srcUri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|copyToLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|srcUri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|dest
argument_list|)
argument_list|)
expr_stmt|;
comment|// add "execute" permission to downloaded resource file (needed when loading dll file)
name|FileUtil
operator|.
name|chmod
argument_list|(
name|dest
argument_list|,
literal|"ugo+rx"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|dest
return|;
block|}
specifier|private
specifier|static
name|void
name|ensureDirectory
parameter_list|(
name|File
name|resourceDir
parameter_list|)
block|{
name|boolean
name|doesExist
init|=
name|resourceDir
operator|.
name|exists
argument_list|()
decl_stmt|;
if|if
condition|(
name|doesExist
operator|&&
operator|!
name|resourceDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|resourceDir
operator|+
literal|" is not a directory"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|doesExist
operator|&&
operator|!
name|resourceDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't create directory "
operator|+
name|resourceDir
argument_list|)
throw|;
block|}
block|}
specifier|private
enum|enum
name|UriType
block|{
name|IVY
block|,
name|FILE
block|,
name|HDFS
block|,
name|OTHER
block|}
empty_stmt|;
specifier|private
specifier|static
name|ResourceDownloader
operator|.
name|UriType
name|getURLType
parameter_list|(
name|URI
name|value
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|String
name|scheme
init|=
name|value
operator|.
name|getScheme
argument_list|()
decl_stmt|;
if|if
condition|(
name|scheme
operator|==
literal|null
condition|)
return|return
name|UriType
operator|.
name|FILE
return|;
name|scheme
operator|=
name|scheme
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"ivy"
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
condition|)
return|return
name|UriType
operator|.
name|IVY
return|;
if|if
condition|(
literal|"file"
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
condition|)
return|return
name|UriType
operator|.
name|FILE
return|;
if|if
condition|(
literal|"hdfs"
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
condition|)
return|return
name|UriType
operator|.
name|HDFS
return|;
return|return
name|UriType
operator|.
name|OTHER
return|;
block|}
block|}
end_class

end_unit

