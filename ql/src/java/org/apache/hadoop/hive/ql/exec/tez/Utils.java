begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|LlapServiceInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|impl
operator|.
name|LlapRegistryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|split
operator|.
name|SplitLocationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_class
specifier|public
class|class
name|Utils
block|{
specifier|public
specifier|static
name|SplitLocationProvider
name|getSplitLocationProvider
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Logger
name|LOG
parameter_list|)
throws|throws
name|IOException
block|{
comment|// fall back to checking confs
return|return
name|getSplitLocationProvider
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|,
name|LOG
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SplitLocationProvider
name|getSplitLocationProvider
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|useCacheAffinity
parameter_list|,
name|Logger
name|LOG
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|useCustomLocations
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXECUTION_MODE
argument_list|)
operator|.
name|equals
argument_list|(
literal|"llap"
argument_list|)
operator|&&
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_CLIENT_CONSISTENT_SPLITS
argument_list|)
operator|&&
name|useCacheAffinity
decl_stmt|;
name|SplitLocationProvider
name|splitLocationProvider
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SplitGenerator using llap affinitized locations: "
operator|+
name|useCustomLocations
argument_list|)
expr_stmt|;
if|if
condition|(
name|useCustomLocations
condition|)
block|{
name|LlapRegistryService
name|serviceRegistry
init|=
name|LlapRegistryService
operator|.
name|getClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using LLAP instance "
operator|+
name|serviceRegistry
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|LlapServiceInstance
argument_list|>
name|serviceInstances
init|=
name|serviceRegistry
operator|.
name|getInstances
argument_list|()
operator|.
name|getAllInstancesOrdered
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|serviceInstances
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"No running LLAP daemons! Please check LLAP service status and zookeeper configuration"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|serviceInstances
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|LlapServiceInstance
name|serviceInstance
range|:
name|serviceInstances
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding "
operator|+
name|serviceInstance
operator|.
name|getWorkerIdentity
argument_list|()
operator|+
literal|" with hostname="
operator|+
name|serviceInstance
operator|.
name|getHost
argument_list|()
operator|+
literal|" to list for split locations"
argument_list|)
expr_stmt|;
block|}
name|locations
operator|.
name|add
argument_list|(
name|serviceInstance
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|splitLocationProvider
operator|=
operator|new
name|HostAffinitySplitLocationProvider
argument_list|(
name|locations
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|splitLocationProvider
operator|=
operator|new
name|SplitLocationProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getLocations
parameter_list|(
name|InputSplit
name|split
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|split
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
index|[]
name|locations
init|=
name|split
operator|.
name|getLocations
argument_list|()
decl_stmt|;
if|if
condition|(
name|locations
operator|!=
literal|null
operator|&&
name|locations
operator|.
name|length
operator|==
literal|1
condition|)
block|{
if|if
condition|(
literal|"localhost"
operator|.
name|equals
argument_list|(
name|locations
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
return|return
name|ArrayUtils
operator|.
name|EMPTY_STRING_ARRAY
return|;
block|}
block|}
return|return
name|locations
return|;
block|}
block|}
expr_stmt|;
block|}
return|return
name|splitLocationProvider
return|;
block|}
block|}
end_class

end_unit

