begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_comment
comment|/**  * AlterIndexDesc.  *  */
end_comment

begin_class
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Alter Index"
argument_list|)
specifier|public
class|class
name|AlterIndexDesc
extends|extends
name|DDLDesc
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|String
name|indexName
decl_stmt|;
specifier|private
name|String
name|baseTable
decl_stmt|;
specifier|private
name|String
name|dbName
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
decl_stmt|;
comment|/**    * alterIndexTypes.    *    */
specifier|public
specifier|static
enum|enum
name|AlterIndexTypes
block|{
name|ADDPROPS
block|}
empty_stmt|;
name|AlterIndexTypes
name|op
decl_stmt|;
specifier|public
name|AlterIndexDesc
parameter_list|()
block|{   }
specifier|public
name|AlterIndexDesc
parameter_list|(
name|AlterIndexTypes
name|type
parameter_list|)
block|{
name|this
operator|.
name|op
operator|=
name|type
expr_stmt|;
block|}
comment|/**    * @return the name of the index    */
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"name"
argument_list|)
specifier|public
name|String
name|getIndexName
parameter_list|()
block|{
return|return
name|indexName
return|;
block|}
comment|/**    * @param indexName    *          the indexName to set    */
specifier|public
name|void
name|setIndexName
parameter_list|(
name|String
name|indexName
parameter_list|)
block|{
name|this
operator|.
name|indexName
operator|=
name|indexName
expr_stmt|;
block|}
comment|/**    * @return the baseTable    */
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"new name"
argument_list|)
specifier|public
name|String
name|getBaseTableName
parameter_list|()
block|{
return|return
name|baseTable
return|;
block|}
comment|/**    * @param baseTable    *          the baseTable to set    */
specifier|public
name|void
name|setBaseTableName
parameter_list|(
name|String
name|baseTable
parameter_list|)
block|{
name|this
operator|.
name|baseTable
operator|=
name|baseTable
expr_stmt|;
block|}
comment|/**    * @return the name of the database that the base table is in    */
specifier|public
name|String
name|getDbName
parameter_list|()
block|{
return|return
name|dbName
return|;
block|}
comment|/**    * @param dbName    *          the dbName to set    */
specifier|public
name|void
name|setDbName
parameter_list|(
name|String
name|dbName
parameter_list|)
block|{
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
block|}
comment|/**    * @return the op    */
specifier|public
name|AlterIndexTypes
name|getOp
parameter_list|()
block|{
return|return
name|op
return|;
block|}
comment|/**    * @param op    *          the op to set    */
specifier|public
name|void
name|setOp
parameter_list|(
name|AlterIndexTypes
name|op
parameter_list|)
block|{
name|this
operator|.
name|op
operator|=
name|op
expr_stmt|;
block|}
comment|/**    * @return the props    */
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"properties"
argument_list|)
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getProps
parameter_list|()
block|{
return|return
name|props
return|;
block|}
comment|/**    * @param props    *          the props to set    */
specifier|public
name|void
name|setProps
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
block|{
name|this
operator|.
name|props
operator|=
name|props
expr_stmt|;
block|}
block|}
end_class

end_unit

