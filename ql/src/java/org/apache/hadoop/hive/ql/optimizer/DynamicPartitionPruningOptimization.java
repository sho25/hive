begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FilterOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|SparkUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|SemanticNodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|spark
operator|.
name|CombineEquivalentWorkResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|spark
operator|.
name|SparkPartitionPruningSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|GenTezUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|GenTezUtils
operator|.
name|DynamicListContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|GenTezUtils
operator|.
name|DynamicPartitionPrunerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|OptimizeTezProcContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PrunedPartitionList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|RuntimeValuesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemiJoinBranchInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemiJoinHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|spark
operator|.
name|OptimizeSparkProcContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|spark
operator|.
name|SparkPartitionPruningSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AggregationDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DynamicPruningEventDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DynamicValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDescUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDynamicValueDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FilterDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|GroupByDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SelectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFBloomFilter
operator|.
name|GenericUDAFBloomFilterEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
operator|.
name|Mode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFIn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|NullOrdering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * This optimization looks for expressions of the kind "x IN (RS[n])". If such  * an expression made it to a table scan operator and x is a partition column we  * can use an existing join to dynamically prune partitions. This class sets up  * the infrastructure for that.  */
end_comment

begin_class
specifier|public
class|class
name|DynamicPartitionPruningOptimization
implements|implements
name|SemanticNodeProcessor
block|{
specifier|static
specifier|final
specifier|private
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DynamicPartitionPruningOptimization
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ParseContext
name|parseContext
decl_stmt|;
if|if
condition|(
name|procCtx
operator|instanceof
name|OptimizeTezProcContext
condition|)
block|{
name|parseContext
operator|=
operator|(
operator|(
name|OptimizeTezProcContext
operator|)
name|procCtx
operator|)
operator|.
name|parseContext
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|procCtx
operator|instanceof
name|OptimizeSparkProcContext
condition|)
block|{
name|parseContext
operator|=
operator|(
operator|(
name|OptimizeSparkProcContext
operator|)
name|procCtx
operator|)
operator|.
name|getParseContext
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"expected parseContext to be either "
operator|+
literal|"OptimizeTezProcContext or OptimizeSparkProcContext, but found "
operator|+
name|procCtx
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|FilterOperator
name|filter
init|=
operator|(
name|FilterOperator
operator|)
name|nd
decl_stmt|;
name|FilterDesc
name|desc
init|=
name|filter
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|parseContext
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|TEZ_DYNAMIC_PARTITION_PRUNING
argument_list|)
operator|&&
operator|!
name|parseContext
operator|.
name|getConf
argument_list|()
operator|.
name|isSparkDPPAny
argument_list|()
condition|)
block|{
comment|// nothing to do when the optimization is off
return|return
literal|null
return|;
block|}
name|TableScanOperator
name|ts
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|getParentOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|filter
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|TableScanOperator
condition|)
block|{
name|ts
operator|=
operator|(
name|TableScanOperator
operator|)
name|filter
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parent: "
operator|+
name|filter
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Filter: "
operator|+
name|desc
operator|.
name|getPredicateString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"TableScan: "
operator|+
name|ts
argument_list|)
expr_stmt|;
block|}
name|DynamicPartitionPrunerContext
name|removerContext
init|=
operator|new
name|DynamicPartitionPrunerContext
argument_list|()
decl_stmt|;
comment|// collect the dynamic pruning conditions
name|removerContext
operator|.
name|dynLists
operator|.
name|clear
argument_list|()
expr_stmt|;
name|GenTezUtils
operator|.
name|collectDynamicPruningConditions
argument_list|(
name|desc
operator|.
name|getPredicate
argument_list|()
argument_list|,
name|removerContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|ts
operator|==
literal|null
condition|)
block|{
comment|// Replace the synthetic predicate with true and bail out
for|for
control|(
name|DynamicListContext
name|ctx
range|:
name|removerContext
control|)
block|{
name|ExprNodeDesc
name|constNode
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|ctx
operator|.
name|parent
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|replaceExprNode
argument_list|(
name|ctx
argument_list|,
name|desc
argument_list|,
name|constNode
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|boolean
name|semiJoin
init|=
name|parseContext
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|TEZ_DYNAMIC_SEMIJOIN_REDUCTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|parseContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
argument_list|)
operator|.
name|equals
argument_list|(
literal|"spark"
argument_list|)
condition|)
block|{
comment|//TODO HIVE-16862: Implement a similar feature like "hive.tez.dynamic.semijoin.reduction" in hive on spark
name|semiJoin
operator|=
literal|false
expr_stmt|;
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|newBetweenNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|newBloomFilterNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DynamicListContext
name|ctx
range|:
name|removerContext
control|)
block|{
name|String
name|column
init|=
name|ExprNodeDescUtils
operator|.
name|extractColName
argument_list|(
name|ctx
operator|.
name|parent
argument_list|)
decl_stmt|;
name|boolean
name|semiJoinAttempted
init|=
literal|false
decl_stmt|;
name|ExprNodeDesc
name|constNode
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|ctx
operator|.
name|parent
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|column
operator|!=
literal|null
condition|)
block|{
comment|// Need unique IDs to refer to each min/max key value in the DynamicValueRegistry
name|String
name|keyBaseAlias
init|=
literal|""
decl_stmt|;
name|Table
name|table
init|=
name|ts
operator|.
name|getConf
argument_list|()
operator|.
name|getTableMetadata
argument_list|()
decl_stmt|;
name|boolean
name|nonEquiJoin
init|=
name|isNonEquiJoin
argument_list|(
name|ctx
operator|.
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
operator|&&
name|table
operator|.
name|isPartitionKey
argument_list|(
name|column
argument_list|)
operator|&&
operator|!
name|nonEquiJoin
condition|)
block|{
name|String
name|columnType
init|=
name|table
operator|.
name|getPartColByName
argument_list|(
name|column
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|alias
init|=
name|ts
operator|.
name|getConf
argument_list|()
operator|.
name|getAlias
argument_list|()
decl_stmt|;
name|PrunedPartitionList
name|plist
init|=
name|parseContext
operator|.
name|getPrunedPartitions
argument_list|(
name|alias
argument_list|,
name|ts
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"alias: "
operator|+
name|alias
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"pruned partition list: "
argument_list|)
expr_stmt|;
if|if
condition|(
name|plist
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Partition
name|p
range|:
name|plist
operator|.
name|getPartitions
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|p
operator|.
name|getCompleteName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// If partKey is a constant, we can check whether the partitions
comment|// have been already filtered
if|if
condition|(
name|plist
operator|==
literal|null
operator|||
name|plist
operator|.
name|getPartitions
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Dynamic partitioning: "
operator|+
name|table
operator|.
name|getCompleteName
argument_list|()
operator|+
literal|"."
operator|+
name|column
argument_list|)
expr_stmt|;
name|generateEventOperatorPlan
argument_list|(
name|ctx
argument_list|,
name|parseContext
argument_list|,
name|ts
argument_list|,
name|column
argument_list|,
name|columnType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// all partitions have been statically removed
name|LOG
operator|.
name|debug
argument_list|(
literal|"No partition pruning necessary."
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|table
operator|.
name|isNonNative
argument_list|()
operator|&&
name|table
operator|.
name|getStorageHandler
argument_list|()
operator|.
name|addDynamicSplitPruningEdge
argument_list|(
name|desc
operator|.
name|getPredicate
argument_list|()
argument_list|)
condition|)
block|{
name|generateEventOperatorPlan
argument_list|(
name|ctx
argument_list|,
name|parseContext
argument_list|,
name|ts
argument_list|,
name|column
argument_list|,
name|table
operator|.
name|getCols
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|column
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// semijoin
name|LOG
operator|.
name|debug
argument_list|(
literal|"Column "
operator|+
name|column
operator|+
literal|" is not a partition column"
argument_list|)
expr_stmt|;
if|if
condition|(
name|semiJoin
operator|&&
operator|!
name|disableSemiJoinOptDueToExternalTable
argument_list|(
name|parseContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|ts
argument_list|,
name|ctx
argument_list|)
operator|&&
name|ts
operator|.
name|getConf
argument_list|()
operator|.
name|getFilterExpr
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|nonEquiJoin
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initiate semijoin reduction for "
operator|+
name|column
operator|+
literal|" ("
operator|+
name|ts
operator|.
name|getConf
argument_list|()
operator|.
name|getFilterExpr
argument_list|()
operator|.
name|getExprString
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuilder
name|internalColNameBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|colNameBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// Apply best effort to fetch the correct table alias. If not
comment|// found, fallback to old logic.
name|StringBuilder
name|tabAliasBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|getColumnInfo
argument_list|(
name|ctx
argument_list|,
name|internalColNameBuilder
argument_list|,
name|colNameBuilder
argument_list|,
name|tabAliasBuilder
argument_list|)
condition|)
block|{
name|String
name|colName
init|=
name|colNameBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|tableAlias
decl_stmt|;
if|if
condition|(
name|tabAliasBuilder
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tableAlias
operator|=
name|tabAliasBuilder
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|//falling back
name|Operator
argument_list|<
name|?
argument_list|>
name|op
init|=
name|ctx
operator|.
name|generator
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|op
operator|==
literal|null
operator|||
name|op
operator|instanceof
name|TableScanOperator
operator|)
condition|)
block|{
name|op
operator|=
name|op
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|tableAlias
operator|=
operator|(
name|op
operator|==
literal|null
condition|?
literal|""
else|:
operator|(
operator|(
name|TableScanOperator
operator|)
name|op
operator|)
operator|.
name|getConf
argument_list|()
operator|.
name|getAlias
argument_list|()
operator|)
expr_stmt|;
block|}
comment|// Use the tableAlias to generate keyBaseAlias
name|keyBaseAlias
operator|=
name|ctx
operator|.
name|generator
operator|.
name|getOperatorId
argument_list|()
operator|+
literal|"_"
operator|+
name|tableAlias
operator|+
literal|"_"
operator|+
name|colName
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SemiJoinHint
argument_list|>
argument_list|>
name|hints
init|=
name|parseContext
operator|.
name|getSemiJoinHints
argument_list|()
decl_stmt|;
if|if
condition|(
name|hints
operator|!=
literal|null
condition|)
block|{
comment|// Create semijoin optimizations ONLY for hinted columns
name|semiJoinAttempted
operator|=
name|processSemiJoinHints
argument_list|(
name|parseContext
argument_list|,
name|ctx
argument_list|,
name|hints
argument_list|,
name|tableAlias
argument_list|,
name|internalColNameBuilder
operator|.
name|toString
argument_list|()
argument_list|,
name|colName
argument_list|,
name|ts
argument_list|,
name|keyBaseAlias
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// fallback to regular logic
name|semiJoinAttempted
operator|=
name|generateSemiJoinOperatorPlan
argument_list|(
name|ctx
argument_list|,
name|parseContext
argument_list|,
name|ts
argument_list|,
name|keyBaseAlias
argument_list|,
name|internalColNameBuilder
operator|.
name|toString
argument_list|()
argument_list|,
name|colName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// If semijoin is attempted then replace the condition with a min-max filter
comment|// and bloom filter else,
comment|// we always remove the condition by replacing it with "true"
if|if
condition|(
name|semiJoinAttempted
condition|)
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|betweenArgs
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|betweenArgs
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Do not invert between result
comment|// add column expression here
name|betweenArgs
operator|.
name|add
argument_list|(
name|ctx
operator|.
name|parent
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|betweenArgs
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeDynamicValueDesc
argument_list|(
operator|new
name|DynamicValue
argument_list|(
name|keyBaseAlias
operator|+
literal|"_min"
argument_list|,
name|ctx
operator|.
name|desc
operator|.
name|getTypeInfo
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|betweenArgs
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeDynamicValueDesc
argument_list|(
operator|new
name|DynamicValue
argument_list|(
name|keyBaseAlias
operator|+
literal|"_max"
argument_list|,
name|ctx
operator|.
name|desc
operator|.
name|getTypeInfo
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|betweenNode
init|=
name|ExprNodeGenericFuncDesc
operator|.
name|newInstance
argument_list|(
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
literal|"between"
argument_list|)
operator|.
name|getGenericUDF
argument_list|()
argument_list|,
name|betweenArgs
argument_list|)
decl_stmt|;
comment|// add column expression for bloom filter
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|bloomFilterArgs
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|bloomFilterArgs
operator|.
name|add
argument_list|(
name|ctx
operator|.
name|parent
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|bloomFilterArgs
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeDynamicValueDesc
argument_list|(
operator|new
name|DynamicValue
argument_list|(
name|keyBaseAlias
operator|+
literal|"_bloom_filter"
argument_list|,
name|TypeInfoFactory
operator|.
name|binaryTypeInfo
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|bloomFilterNode
init|=
name|ExprNodeGenericFuncDesc
operator|.
name|newInstance
argument_list|(
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
literal|"in_bloom_filter"
argument_list|)
operator|.
name|getGenericUDF
argument_list|()
argument_list|,
name|bloomFilterArgs
argument_list|)
decl_stmt|;
name|newBetweenNodes
operator|.
name|add
argument_list|(
name|betweenNode
argument_list|)
expr_stmt|;
name|newBloomFilterNodes
operator|.
name|add
argument_list|(
name|bloomFilterNode
argument_list|)
expr_stmt|;
block|}
block|}
name|replaceExprNode
argument_list|(
name|ctx
argument_list|,
name|desc
argument_list|,
name|constNode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|newBetweenNodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// We need to add the new nodes: first the between nodes, then the bloom filters
if|if
condition|(
name|FunctionRegistry
operator|.
name|isOpAnd
argument_list|(
name|desc
operator|.
name|getPredicate
argument_list|()
argument_list|)
condition|)
block|{
comment|// AND
name|desc
operator|.
name|getPredicate
argument_list|()
operator|.
name|getChildren
argument_list|()
operator|.
name|addAll
argument_list|(
name|newBetweenNodes
argument_list|)
expr_stmt|;
name|desc
operator|.
name|getPredicate
argument_list|()
operator|.
name|getChildren
argument_list|()
operator|.
name|addAll
argument_list|(
name|newBloomFilterNodes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|andArgs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|andArgs
operator|.
name|add
argument_list|(
name|desc
operator|.
name|getPredicate
argument_list|()
argument_list|)
expr_stmt|;
name|andArgs
operator|.
name|addAll
argument_list|(
name|newBetweenNodes
argument_list|)
expr_stmt|;
name|andArgs
operator|.
name|addAll
argument_list|(
name|newBloomFilterNodes
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|andExpr
init|=
name|ExprNodeGenericFuncDesc
operator|.
name|newInstance
argument_list|(
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
literal|"and"
argument_list|)
operator|.
name|getGenericUDF
argument_list|()
argument_list|,
name|andArgs
argument_list|)
decl_stmt|;
comment|// Also pass in filter as tableScan filterExpr
name|ts
operator|.
name|getConf
argument_list|()
operator|.
name|setFilterExpr
argument_list|(
name|andExpr
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPredicate
argument_list|(
name|andExpr
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if we pushed the predicate into the table scan we need to remove the
comment|// synthetic conditions there.
name|cleanTableScanFilters
argument_list|(
name|ts
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|disableSemiJoinOptDueToExternalTable
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|TableScanOperator
name|ts
parameter_list|,
name|DynamicListContext
name|ctx
parameter_list|)
block|{
name|boolean
name|disableSemiJoin
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_DISABLE_UNSAFE_EXTERNALTABLE_OPERATIONS
argument_list|)
condition|)
block|{
comment|// We already have the TableScan for one side of the join. Check this now.
if|if
condition|(
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|ts
operator|.
name|getConf
argument_list|()
operator|.
name|getTableMetadata
argument_list|()
operator|.
name|getTTable
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Disabling semijoin optimzation on {} since it is an external table."
argument_list|,
name|ts
operator|.
name|getConf
argument_list|()
operator|.
name|getTableMetadata
argument_list|()
operator|.
name|getFullyQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|disableSemiJoin
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// Check the other side of the join, using the DynamicListContext
name|ExprNodeDesc
name|exprNodeDesc
init|=
name|ctx
operator|.
name|getKeyCol
argument_list|()
decl_stmt|;
name|ExprNodeColumnDesc
name|colExpr
init|=
name|ExprNodeDescUtils
operator|.
name|getColumnExpr
argument_list|(
name|exprNodeDesc
argument_list|)
decl_stmt|;
if|if
condition|(
name|colExpr
operator|!=
literal|null
condition|)
block|{
comment|// fetch table alias
name|ExprNodeDescUtils
operator|.
name|ColumnOrigin
name|columnOrigin
init|=
name|ExprNodeDescUtils
operator|.
name|findColumnOrigin
argument_list|(
name|exprNodeDesc
argument_list|,
name|ctx
operator|.
name|generator
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnOrigin
operator|!=
literal|null
operator|&&
name|columnOrigin
operator|.
name|op
operator|instanceof
name|TableScanOperator
condition|)
block|{
comment|// Join key origin has been traced to a table column. Check if the table is external.
name|TableScanOperator
name|joinKeyTs
init|=
operator|(
name|TableScanOperator
operator|)
name|columnOrigin
operator|.
name|op
decl_stmt|;
if|if
condition|(
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|joinKeyTs
operator|.
name|getConf
argument_list|()
operator|.
name|getTableMetadata
argument_list|()
operator|.
name|getTTable
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Join key {} is from {} which is an external table. Disabling semijoin optimization."
argument_list|,
name|columnOrigin
operator|.
name|col
argument_list|,
name|joinKeyTs
operator|.
name|getConf
argument_list|()
operator|.
name|getTableMetadata
argument_list|()
operator|.
name|getFullyQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|disableSemiJoin
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|disableSemiJoin
return|;
block|}
comment|// Given a key, find the corresponding column name.
specifier|private
name|boolean
name|getColumnInfo
parameter_list|(
name|DynamicListContext
name|ctx
parameter_list|,
name|StringBuilder
name|internalColName
parameter_list|,
name|StringBuilder
name|colName
parameter_list|,
name|StringBuilder
name|tabAlias
parameter_list|)
block|{
name|ExprNodeDesc
name|exprNodeDesc
init|=
name|ctx
operator|.
name|getKeyCol
argument_list|()
decl_stmt|;
name|ExprNodeColumnDesc
name|colExpr
init|=
name|ExprNodeDescUtils
operator|.
name|getColumnExpr
argument_list|(
name|exprNodeDesc
argument_list|)
decl_stmt|;
if|if
condition|(
name|colExpr
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|internalColName
operator|.
name|append
argument_list|(
name|colExpr
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
comment|// fetch table ablias
name|ExprNodeDescUtils
operator|.
name|ColumnOrigin
name|columnOrigin
init|=
name|ExprNodeDescUtils
operator|.
name|findColumnOrigin
argument_list|(
name|exprNodeDesc
argument_list|,
name|ctx
operator|.
name|generator
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnOrigin
operator|!=
literal|null
condition|)
block|{
comment|// get both tableAlias and column name from columnOrigin
assert|assert
name|columnOrigin
operator|.
name|op
operator|instanceof
name|TableScanOperator
assert|;
name|TableScanOperator
name|ts
init|=
operator|(
name|TableScanOperator
operator|)
name|columnOrigin
operator|.
name|op
decl_stmt|;
name|tabAlias
operator|.
name|append
argument_list|(
name|ts
operator|.
name|getConf
argument_list|()
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
name|colName
operator|.
name|append
argument_list|(
name|ExprNodeDescUtils
operator|.
name|getColumnExpr
argument_list|(
name|columnOrigin
operator|.
name|col
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOfRS
init|=
name|ctx
operator|.
name|generator
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|parentOfRS
operator|instanceof
name|SelectOperator
operator|)
condition|)
block|{
name|colName
operator|.
name|append
argument_list|(
name|internalColName
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|exprNodeDesc
operator|=
name|parentOfRS
operator|.
name|getColumnExprMap
argument_list|()
operator|.
name|get
argument_list|(
name|internalColName
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|colExpr
operator|=
name|ExprNodeDescUtils
operator|.
name|getColumnExpr
argument_list|(
name|exprNodeDesc
argument_list|)
expr_stmt|;
if|if
condition|(
name|colExpr
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|colName
operator|.
name|append
argument_list|(
name|ExprNodeDescUtils
operator|.
name|extractColName
argument_list|(
name|colExpr
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// Handle hint based semijoin
specifier|private
name|boolean
name|processSemiJoinHints
parameter_list|(
name|ParseContext
name|pCtx
parameter_list|,
name|DynamicListContext
name|ctx
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SemiJoinHint
argument_list|>
argument_list|>
name|hints
parameter_list|,
name|String
name|tableAlias
parameter_list|,
name|String
name|internalColName
parameter_list|,
name|String
name|colName
parameter_list|,
name|TableScanOperator
name|ts
parameter_list|,
name|String
name|keyBaseAlias
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|hints
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|SemiJoinHint
argument_list|>
name|hintList
init|=
name|hints
operator|.
name|get
argument_list|(
name|tableAlias
argument_list|)
decl_stmt|;
if|if
condition|(
name|hintList
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Iterate through the list
for|for
control|(
name|SemiJoinHint
name|sjHint
range|:
name|hintList
control|)
block|{
if|if
condition|(
operator|!
name|colName
operator|.
name|equals
argument_list|(
name|sjHint
operator|.
name|getColName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|ts
operator|.
name|getConf
argument_list|()
operator|.
name|getAlias
argument_list|()
operator|.
name|equals
argument_list|(
name|sjHint
operator|.
name|getTarget
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// match!
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating runtime filter due to user hint: column = "
operator|+
name|colName
argument_list|)
expr_stmt|;
if|if
condition|(
name|generateSemiJoinOperatorPlan
argument_list|(
name|ctx
argument_list|,
name|pCtx
argument_list|,
name|ts
argument_list|,
name|keyBaseAlias
argument_list|,
name|internalColName
argument_list|,
name|colName
argument_list|,
name|sjHint
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"The user hint to enforce semijoin failed required conditions"
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|replaceExprNode
parameter_list|(
name|DynamicListContext
name|ctx
parameter_list|,
name|FilterDesc
name|desc
parameter_list|,
name|ExprNodeDesc
name|node
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|grandParent
operator|==
literal|null
condition|)
block|{
name|desc
operator|.
name|setPredicate
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|i
init|=
name|ctx
operator|.
name|grandParent
operator|.
name|getChildren
argument_list|()
operator|.
name|indexOf
argument_list|(
name|ctx
operator|.
name|parent
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|grandParent
operator|.
name|getChildren
argument_list|()
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|grandParent
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|cleanTableScanFilters
parameter_list|(
name|TableScanOperator
name|ts
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|ts
operator|==
literal|null
operator|||
name|ts
operator|.
name|getConf
argument_list|()
operator|==
literal|null
operator|||
name|ts
operator|.
name|getConf
argument_list|()
operator|.
name|getFilterExpr
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// nothing to do
return|return;
block|}
name|DynamicPartitionPrunerContext
name|removerContext
init|=
operator|new
name|DynamicPartitionPrunerContext
argument_list|()
decl_stmt|;
comment|// collect the dynamic pruning conditions
name|removerContext
operator|.
name|dynLists
operator|.
name|clear
argument_list|()
expr_stmt|;
name|GenTezUtils
operator|.
name|collectDynamicPruningConditions
argument_list|(
name|ts
operator|.
name|getConf
argument_list|()
operator|.
name|getFilterExpr
argument_list|()
argument_list|,
name|removerContext
argument_list|)
expr_stmt|;
for|for
control|(
name|DynamicListContext
name|ctx
range|:
name|removerContext
control|)
block|{
comment|// remove the condition by replacing it with "true"
name|ExprNodeDesc
name|constNode
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|ctx
operator|.
name|parent
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|grandParent
operator|==
literal|null
condition|)
block|{
comment|// we're the only node, just clear out the expression
name|ts
operator|.
name|getConf
argument_list|()
operator|.
name|setFilterExpr
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|i
init|=
name|ctx
operator|.
name|grandParent
operator|.
name|getChildren
argument_list|()
operator|.
name|indexOf
argument_list|(
name|ctx
operator|.
name|parent
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|grandParent
operator|.
name|getChildren
argument_list|()
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|grandParent
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|constNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|isNonEquiJoin
parameter_list|(
name|ExprNodeDesc
name|predicate
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|predicate
operator|instanceof
name|ExprNodeGenericFuncDesc
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|funcDesc
init|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|predicate
decl_stmt|;
if|if
condition|(
name|funcDesc
operator|.
name|getGenericUDF
argument_list|()
operator|instanceof
name|GenericUDFIn
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|generateEventOperatorPlan
parameter_list|(
name|DynamicListContext
name|ctx
parameter_list|,
name|ParseContext
name|parseContext
parameter_list|,
name|TableScanOperator
name|ts
parameter_list|,
name|String
name|column
parameter_list|,
name|String
name|columnType
parameter_list|)
block|{
comment|// we will put a fork in the plan at the source of the reduce sink
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOfRS
init|=
name|ctx
operator|.
name|generator
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// we need the expr that generated the key of the reduce sink
name|ExprNodeDesc
name|key
init|=
name|ctx
operator|.
name|getKeyCol
argument_list|()
decl_stmt|;
comment|// we also need the expr for the partitioned table
name|ExprNodeDesc
name|partKey
init|=
name|ctx
operator|.
name|parent
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"key expr: "
operator|+
name|key
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"partition key expr: "
operator|+
name|partKey
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keyExprs
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|keyExprs
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|// group by requires "ArrayList", don't ask.
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|outputNames
operator|.
name|add
argument_list|(
name|HiveConf
operator|.
name|getColumnInternalName
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|selectColInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
name|selectColInfos
operator|.
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
name|outputNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|key
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// project the relevant key column
name|SelectDesc
name|select
init|=
operator|new
name|SelectDesc
argument_list|(
name|keyExprs
argument_list|,
name|outputNames
argument_list|)
decl_stmt|;
name|SelectOperator
name|selectOp
init|=
operator|(
name|SelectOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|select
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|selectColInfos
argument_list|)
argument_list|,
name|parentOfRS
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|selectColumnExprMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|selectColumnExprMap
operator|.
name|put
argument_list|(
name|outputNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|selectOp
operator|.
name|setColumnExprMap
argument_list|(
name|selectColumnExprMap
argument_list|)
expr_stmt|;
comment|// do a group by on the list to dedup
name|float
name|groupByMemoryUsage
init|=
name|HiveConf
operator|.
name|getFloatVar
argument_list|(
name|parseContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPAGGRHASHMEMORY
argument_list|)
decl_stmt|;
name|float
name|memoryThreshold
init|=
name|HiveConf
operator|.
name|getFloatVar
argument_list|(
name|parseContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPAGGRMEMORYTHRESHOLD
argument_list|)
decl_stmt|;
name|float
name|minReductionHashAggr
init|=
name|HiveConf
operator|.
name|getFloatVar
argument_list|(
name|parseContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|HIVEMAPAGGRHASHMINREDUCTION
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|groupByExprs
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ExprNodeDesc
name|groupByExpr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|key
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
name|outputNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|groupByExprs
operator|.
name|add
argument_list|(
name|groupByExpr
argument_list|)
expr_stmt|;
name|GroupByDesc
name|groupBy
init|=
operator|new
name|GroupByDesc
argument_list|(
name|GroupByDesc
operator|.
name|Mode
operator|.
name|HASH
argument_list|,
name|outputNames
argument_list|,
name|groupByExprs
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|AggregationDesc
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
name|groupByMemoryUsage
argument_list|,
name|memoryThreshold
argument_list|,
name|minReductionHashAggr
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|groupbyColInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
name|groupbyColInfos
operator|.
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
name|outputNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|key
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|GroupByOperator
name|groupByOp
init|=
operator|(
name|GroupByOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|groupBy
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|groupbyColInfos
argument_list|)
argument_list|,
name|selectOp
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|colMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|colMap
operator|.
name|put
argument_list|(
name|outputNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|groupByExpr
argument_list|)
expr_stmt|;
name|groupByOp
operator|.
name|setColumnExprMap
argument_list|(
name|colMap
argument_list|)
expr_stmt|;
comment|// finally add the event broadcast operator
if|if
condition|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|parseContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
argument_list|)
operator|.
name|equals
argument_list|(
literal|"tez"
argument_list|)
condition|)
block|{
name|DynamicPruningEventDesc
name|eventDesc
init|=
operator|new
name|DynamicPruningEventDesc
argument_list|()
decl_stmt|;
name|eventDesc
operator|.
name|setTableScan
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|eventDesc
operator|.
name|setGenerator
argument_list|(
name|ctx
operator|.
name|generator
argument_list|)
expr_stmt|;
name|eventDesc
operator|.
name|setTable
argument_list|(
name|PlanUtils
operator|.
name|getReduceValueTableDesc
argument_list|(
name|PlanUtils
operator|.
name|getFieldSchemasFromColumnList
argument_list|(
name|keyExprs
argument_list|,
literal|"key"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|eventDesc
operator|.
name|setTargetColumnName
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|eventDesc
operator|.
name|setTargetColumnType
argument_list|(
name|columnType
argument_list|)
expr_stmt|;
name|eventDesc
operator|.
name|setPartKey
argument_list|(
name|partKey
argument_list|)
expr_stmt|;
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|eventDesc
argument_list|,
name|groupByOp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Must be spark branch
name|SparkPartitionPruningSinkDesc
name|desc
init|=
operator|new
name|SparkPartitionPruningSinkDesc
argument_list|()
decl_stmt|;
name|desc
operator|.
name|setTable
argument_list|(
name|PlanUtils
operator|.
name|getReduceValueTableDesc
argument_list|(
name|PlanUtils
operator|.
name|getFieldSchemasFromColumnList
argument_list|(
name|keyExprs
argument_list|,
literal|"key"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addTarget
argument_list|(
name|column
argument_list|,
name|columnType
argument_list|,
name|partKey
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|SparkPartitionPruningSinkOperator
name|dppSink
init|=
operator|(
name|SparkPartitionPruningSinkOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|desc
argument_list|,
name|groupByOp
argument_list|)
decl_stmt|;
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|parseContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|HIVE_COMBINE_EQUIVALENT_WORK_OPTIMIZATION
argument_list|)
condition|)
block|{
name|mayReuseExistingDPPSink
argument_list|(
name|parentOfRS
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|selectOp
argument_list|,
name|groupByOp
argument_list|,
name|dppSink
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|mayReuseExistingDPPSink
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|branchingOP
parameter_list|,
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|newDPPBranch
parameter_list|)
block|{
name|SparkPartitionPruningSinkOperator
name|reusableDPP
init|=
name|SparkUtilities
operator|.
name|findReusableDPPSink
argument_list|(
name|branchingOP
argument_list|,
name|newDPPBranch
argument_list|)
decl_stmt|;
if|if
condition|(
name|reusableDPP
operator|!=
literal|null
condition|)
block|{
name|CombineEquivalentWorkResolver
operator|.
name|combineEquivalentDPPSinks
argument_list|(
name|reusableDPP
argument_list|,
operator|(
name|SparkPartitionPruningSinkOperator
operator|)
name|newDPPBranch
operator|.
name|get
argument_list|(
name|newDPPBranch
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|branchingOP
operator|.
name|removeChild
argument_list|(
name|newDPPBranch
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Generates plan for min/max when dynamic partition pruning is ruled out.
specifier|private
name|boolean
name|generateSemiJoinOperatorPlan
parameter_list|(
name|DynamicListContext
name|ctx
parameter_list|,
name|ParseContext
name|parseContext
parameter_list|,
name|TableScanOperator
name|ts
parameter_list|,
name|String
name|keyBaseAlias
parameter_list|,
name|String
name|internalColName
parameter_list|,
name|String
name|colName
parameter_list|,
name|SemiJoinHint
name|sjHint
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// we will put a fork in the plan at the source of the reduce sink
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOfRS
init|=
name|ctx
operator|.
name|generator
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// we need the expr that generated the key of the reduce sink
name|ExprNodeDesc
name|key
init|=
name|ctx
operator|.
name|getKeyCol
argument_list|()
decl_stmt|;
assert|assert
name|colName
operator|!=
literal|null
assert|;
comment|// Fetch the TableScan Operator.
name|Operator
argument_list|<
name|?
argument_list|>
name|op
init|=
name|parentOfRS
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|op
operator|==
literal|null
operator|||
name|op
operator|instanceof
name|TableScanOperator
operator|||
name|op
operator|instanceof
name|ReduceSinkOperator
operator|)
condition|)
block|{
name|op
operator|=
name|op
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|instanceof
name|TableScanOperator
condition|)
block|{
name|Table
name|table
init|=
operator|(
operator|(
name|TableScanOperator
operator|)
name|op
operator|)
operator|.
name|getConf
argument_list|()
operator|.
name|getTableMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|table
operator|.
name|isPartitionKey
argument_list|(
name|colName
argument_list|)
condition|)
block|{
comment|// The column is partition column, skip the optimization.
return|return
literal|false
return|;
block|}
block|}
comment|// Check if there already exists a semijoin branch
name|GroupByOperator
name|gb
init|=
name|parseContext
operator|.
name|getColExprToGBMap
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|gb
operator|!=
literal|null
condition|)
block|{
comment|// Already an existing semijoin branch, reuse it
name|createFinalRsForSemiJoinOp
argument_list|(
name|parseContext
argument_list|,
name|ts
argument_list|,
name|gb
argument_list|,
name|key
argument_list|,
name|keyBaseAlias
argument_list|,
name|ctx
operator|.
name|parent
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|sjHint
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// done!
return|return
literal|true
return|;
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keyExprs
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|keyExprs
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|// group by requires "ArrayList", don't ask.
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|outputNames
operator|.
name|add
argument_list|(
name|HiveConf
operator|.
name|getColumnInternalName
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// project the relevant key column
name|SelectDesc
name|select
init|=
operator|new
name|SelectDesc
argument_list|(
name|keyExprs
argument_list|,
name|outputNames
argument_list|)
decl_stmt|;
comment|// Create the new RowSchema for the projected column
name|ColumnInfo
name|columnInfo
init|=
name|parentOfRS
operator|.
name|getSchema
argument_list|()
operator|.
name|getColumnInfo
argument_list|(
name|internalColName
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|signature
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
name|signature
operator|.
name|add
argument_list|(
name|columnInfo
argument_list|)
expr_stmt|;
name|RowSchema
name|rowSchema
init|=
operator|new
name|RowSchema
argument_list|(
name|signature
argument_list|)
decl_stmt|;
comment|// Create the column expr map
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|colExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ExprNodeDesc
name|exprNode
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|columnInfo
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No ColumnInfo found in {} for {}"
argument_list|,
name|parentOfRS
operator|.
name|getOperatorId
argument_list|()
argument_list|,
name|internalColName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|exprNode
operator|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|columnInfo
argument_list|)
expr_stmt|;
name|colExprMap
operator|.
name|put
argument_list|(
name|internalColName
argument_list|,
name|exprNode
argument_list|)
expr_stmt|;
comment|// Create the Select Operator
name|SelectOperator
name|selectOp
init|=
operator|(
name|SelectOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|select
argument_list|,
name|rowSchema
argument_list|,
name|colExprMap
argument_list|,
name|parentOfRS
argument_list|)
decl_stmt|;
comment|// do a group by to aggregate min,max and bloom filter.
name|float
name|groupByMemoryUsage
init|=
name|HiveConf
operator|.
name|getFloatVar
argument_list|(
name|parseContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPAGGRHASHMEMORY
argument_list|)
decl_stmt|;
name|float
name|memoryThreshold
init|=
name|HiveConf
operator|.
name|getFloatVar
argument_list|(
name|parseContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPAGGRMEMORYTHRESHOLD
argument_list|)
decl_stmt|;
name|float
name|minReductionHashAggr
init|=
name|HiveConf
operator|.
name|getFloatVar
argument_list|(
name|parseContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|HIVEMAPAGGRHASHMINREDUCTION
argument_list|)
decl_stmt|;
comment|// Add min/max and bloom filter aggregations
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|aggFnOIs
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|aggFnOIs
operator|.
name|add
argument_list|(
name|key
operator|.
name|getWritableObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|key
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
name|outputNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|AggregationDesc
argument_list|>
name|aggs
init|=
operator|new
name|ArrayList
argument_list|<
name|AggregationDesc
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|AggregationDesc
name|min
init|=
operator|new
name|AggregationDesc
argument_list|(
literal|"min"
argument_list|,
name|FunctionRegistry
operator|.
name|getGenericUDAFEvaluator
argument_list|(
literal|"min"
argument_list|,
name|aggFnOIs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|,
name|params
argument_list|,
literal|false
argument_list|,
name|Mode
operator|.
name|PARTIAL1
argument_list|)
decl_stmt|;
name|AggregationDesc
name|max
init|=
operator|new
name|AggregationDesc
argument_list|(
literal|"max"
argument_list|,
name|FunctionRegistry
operator|.
name|getGenericUDAFEvaluator
argument_list|(
literal|"max"
argument_list|,
name|aggFnOIs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|,
name|params
argument_list|,
literal|false
argument_list|,
name|Mode
operator|.
name|PARTIAL1
argument_list|)
decl_stmt|;
name|AggregationDesc
name|bloomFilter
init|=
operator|new
name|AggregationDesc
argument_list|(
literal|"bloom_filter"
argument_list|,
name|FunctionRegistry
operator|.
name|getGenericUDAFEvaluator
argument_list|(
literal|"bloom_filter"
argument_list|,
name|aggFnOIs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|,
name|params
argument_list|,
literal|false
argument_list|,
name|Mode
operator|.
name|PARTIAL1
argument_list|)
decl_stmt|;
name|GenericUDAFBloomFilterEvaluator
name|bloomFilterEval
init|=
operator|(
name|GenericUDAFBloomFilterEvaluator
operator|)
name|bloomFilter
operator|.
name|getGenericUDAFEvaluator
argument_list|()
decl_stmt|;
name|bloomFilterEval
operator|.
name|setSourceOperator
argument_list|(
name|selectOp
argument_list|)
expr_stmt|;
if|if
condition|(
name|sjHint
operator|!=
literal|null
operator|&&
name|sjHint
operator|.
name|getNumEntries
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting size for "
operator|+
name|keyBaseAlias
operator|+
literal|" to "
operator|+
name|sjHint
operator|.
name|getNumEntries
argument_list|()
operator|+
literal|" based on the hint"
argument_list|)
expr_stmt|;
name|bloomFilterEval
operator|.
name|setHintEntries
argument_list|(
name|sjHint
operator|.
name|getNumEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|bloomFilterEval
operator|.
name|setMaxEntries
argument_list|(
name|parseContext
operator|.
name|getConf
argument_list|()
operator|.
name|getLongVar
argument_list|(
name|ConfVars
operator|.
name|TEZ_MAX_BLOOM_FILTER_ENTRIES
argument_list|)
argument_list|)
expr_stmt|;
name|bloomFilterEval
operator|.
name|setMinEntries
argument_list|(
name|parseContext
operator|.
name|getConf
argument_list|()
operator|.
name|getLongVar
argument_list|(
name|ConfVars
operator|.
name|TEZ_MIN_BLOOM_FILTER_ENTRIES
argument_list|)
argument_list|)
expr_stmt|;
name|bloomFilterEval
operator|.
name|setFactor
argument_list|(
name|parseContext
operator|.
name|getConf
argument_list|()
operator|.
name|getFloatVar
argument_list|(
name|ConfVars
operator|.
name|TEZ_BLOOM_FILTER_FACTOR
argument_list|)
argument_list|)
expr_stmt|;
name|bloomFilter
operator|.
name|setGenericUDAFWritableEvaluator
argument_list|(
name|bloomFilterEval
argument_list|)
expr_stmt|;
name|aggs
operator|.
name|add
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|aggs
operator|.
name|add
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|aggs
operator|.
name|add
argument_list|(
name|bloomFilter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error creating min/max aggregations on key"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error creating min/max aggregations on key"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Create the Group by Operator
name|ArrayList
argument_list|<
name|String
argument_list|>
name|gbOutputNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|gbOutputNames
operator|.
name|add
argument_list|(
name|SemanticAnalyzer
operator|.
name|getColumnInternalName
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|gbOutputNames
operator|.
name|add
argument_list|(
name|SemanticAnalyzer
operator|.
name|getColumnInternalName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|gbOutputNames
operator|.
name|add
argument_list|(
name|SemanticAnalyzer
operator|.
name|getColumnInternalName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|GroupByDesc
name|groupBy
init|=
operator|new
name|GroupByDesc
argument_list|(
name|GroupByDesc
operator|.
name|Mode
operator|.
name|HASH
argument_list|,
name|gbOutputNames
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
argument_list|,
name|aggs
argument_list|,
literal|false
argument_list|,
name|groupByMemoryUsage
argument_list|,
name|memoryThreshold
argument_list|,
name|minReductionHashAggr
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|groupbyColInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
name|groupbyColInfos
operator|.
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
name|gbOutputNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|key
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|groupbyColInfos
operator|.
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
name|gbOutputNames
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|key
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|groupbyColInfos
operator|.
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
name|gbOutputNames
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|key
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|GroupByOperator
name|groupByOp
init|=
operator|(
name|GroupByOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|groupBy
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|groupbyColInfos
argument_list|)
argument_list|,
name|selectOp
argument_list|)
decl_stmt|;
name|groupByOp
operator|.
name|setColumnExprMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get the column names of the aggregations for reduce sink
name|int
name|colPos
init|=
literal|0
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|rsValueCols
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggs
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|ExprNodeColumnDesc
name|colExpr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|key
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
name|gbOutputNames
operator|.
name|get
argument_list|(
name|colPos
operator|++
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|rsValueCols
operator|.
name|add
argument_list|(
name|colExpr
argument_list|)
expr_stmt|;
block|}
comment|// Bloom Filter uses binary
name|ExprNodeColumnDesc
name|colExpr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|binaryTypeInfo
argument_list|,
name|gbOutputNames
operator|.
name|get
argument_list|(
name|colPos
operator|++
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|rsValueCols
operator|.
name|add
argument_list|(
name|colExpr
argument_list|)
expr_stmt|;
comment|// Create the reduce sink operator
name|ReduceSinkDesc
name|rsDesc
init|=
name|PlanUtils
operator|.
name|getReduceSinkDesc
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
argument_list|,
name|rsValueCols
argument_list|,
name|gbOutputNames
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|Operation
operator|.
name|NOT_ACID
argument_list|,
name|NullOrdering
operator|.
name|defaultNullOrder
argument_list|(
name|parseContext
operator|.
name|getConf
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ReduceSinkOperator
name|rsOp
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|rsDesc
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|groupByOp
operator|.
name|getSchema
argument_list|()
argument_list|)
argument_list|,
name|groupByOp
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|columnExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|rsOp
operator|.
name|setColumnExprMap
argument_list|(
name|columnExprMap
argument_list|)
expr_stmt|;
name|rsOp
operator|.
name|getConf
argument_list|()
operator|.
name|setReducerTraits
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|ReduceSinkDesc
operator|.
name|ReducerTraits
operator|.
name|QUICKSTART
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create the final Group By Operator
name|ArrayList
argument_list|<
name|AggregationDesc
argument_list|>
name|aggsFinal
init|=
operator|new
name|ArrayList
argument_list|<
name|AggregationDesc
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|minFinalFnOIs
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|maxFinalFnOIs
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|bloomFilterFinalFnOIs
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|minFinalParams
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|maxFinalParams
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|bloomFilterFinalParams
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
comment|// Use the expressions from Reduce Sink.
name|minFinalFnOIs
operator|.
name|add
argument_list|(
name|rsValueCols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getWritableObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
name|maxFinalFnOIs
operator|.
name|add
argument_list|(
name|rsValueCols
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getWritableObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
name|bloomFilterFinalFnOIs
operator|.
name|add
argument_list|(
name|rsValueCols
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getWritableObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
comment|// Coming from a ReduceSink the aggregations would be in the form VALUE._col0, VALUE._col1
name|minFinalParams
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|rsValueCols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
name|Utilities
operator|.
name|ReduceField
operator|.
name|VALUE
operator|+
literal|"."
operator|+
name|gbOutputNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|maxFinalParams
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|rsValueCols
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
name|Utilities
operator|.
name|ReduceField
operator|.
name|VALUE
operator|+
literal|"."
operator|+
name|gbOutputNames
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|bloomFilterFinalParams
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|rsValueCols
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
name|Utilities
operator|.
name|ReduceField
operator|.
name|VALUE
operator|+
literal|"."
operator|+
name|gbOutputNames
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|AggregationDesc
name|min
init|=
operator|new
name|AggregationDesc
argument_list|(
literal|"min"
argument_list|,
name|FunctionRegistry
operator|.
name|getGenericUDAFEvaluator
argument_list|(
literal|"min"
argument_list|,
name|minFinalFnOIs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|,
name|minFinalParams
argument_list|,
literal|false
argument_list|,
name|Mode
operator|.
name|FINAL
argument_list|)
decl_stmt|;
name|AggregationDesc
name|max
init|=
operator|new
name|AggregationDesc
argument_list|(
literal|"max"
argument_list|,
name|FunctionRegistry
operator|.
name|getGenericUDAFEvaluator
argument_list|(
literal|"max"
argument_list|,
name|maxFinalFnOIs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|,
name|maxFinalParams
argument_list|,
literal|false
argument_list|,
name|Mode
operator|.
name|FINAL
argument_list|)
decl_stmt|;
name|AggregationDesc
name|bloomFilter
init|=
operator|new
name|AggregationDesc
argument_list|(
literal|"bloom_filter"
argument_list|,
name|FunctionRegistry
operator|.
name|getGenericUDAFEvaluator
argument_list|(
literal|"bloom_filter"
argument_list|,
name|bloomFilterFinalFnOIs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|,
name|bloomFilterFinalParams
argument_list|,
literal|false
argument_list|,
name|Mode
operator|.
name|FINAL
argument_list|)
decl_stmt|;
name|GenericUDAFBloomFilterEvaluator
name|bloomFilterEval
init|=
operator|(
name|GenericUDAFBloomFilterEvaluator
operator|)
name|bloomFilter
operator|.
name|getGenericUDAFEvaluator
argument_list|()
decl_stmt|;
name|bloomFilterEval
operator|.
name|setSourceOperator
argument_list|(
name|selectOp
argument_list|)
expr_stmt|;
if|if
condition|(
name|sjHint
operator|!=
literal|null
operator|&&
name|sjHint
operator|.
name|getNumEntries
argument_list|()
operator|>
literal|0
condition|)
block|{
name|bloomFilterEval
operator|.
name|setHintEntries
argument_list|(
name|sjHint
operator|.
name|getNumEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|bloomFilterEval
operator|.
name|setMaxEntries
argument_list|(
name|parseContext
operator|.
name|getConf
argument_list|()
operator|.
name|getLongVar
argument_list|(
name|ConfVars
operator|.
name|TEZ_MAX_BLOOM_FILTER_ENTRIES
argument_list|)
argument_list|)
expr_stmt|;
name|bloomFilterEval
operator|.
name|setMinEntries
argument_list|(
name|parseContext
operator|.
name|getConf
argument_list|()
operator|.
name|getLongVar
argument_list|(
name|ConfVars
operator|.
name|TEZ_MIN_BLOOM_FILTER_ENTRIES
argument_list|)
argument_list|)
expr_stmt|;
name|bloomFilterEval
operator|.
name|setFactor
argument_list|(
name|parseContext
operator|.
name|getConf
argument_list|()
operator|.
name|getFloatVar
argument_list|(
name|ConfVars
operator|.
name|TEZ_BLOOM_FILTER_FACTOR
argument_list|)
argument_list|)
expr_stmt|;
name|bloomFilter
operator|.
name|setGenericUDAFWritableEvaluator
argument_list|(
name|bloomFilterEval
argument_list|)
expr_stmt|;
name|aggsFinal
operator|.
name|add
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|aggsFinal
operator|.
name|add
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|aggsFinal
operator|.
name|add
argument_list|(
name|bloomFilter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error creating min/max aggregations on key"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error creating min/max aggregations on key"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|GroupByDesc
name|groupByDescFinal
init|=
operator|new
name|GroupByDesc
argument_list|(
name|GroupByDesc
operator|.
name|Mode
operator|.
name|FINAL
argument_list|,
name|gbOutputNames
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
argument_list|,
name|aggsFinal
argument_list|,
literal|false
argument_list|,
name|groupByMemoryUsage
argument_list|,
name|memoryThreshold
argument_list|,
name|minReductionHashAggr
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|GroupByOperator
name|groupByOpFinal
init|=
operator|(
name|GroupByOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|groupByDescFinal
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|rsOp
operator|.
name|getSchema
argument_list|()
argument_list|)
argument_list|,
name|rsOp
argument_list|)
decl_stmt|;
name|groupByOpFinal
operator|.
name|setColumnExprMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|createFinalRsForSemiJoinOp
argument_list|(
name|parseContext
argument_list|,
name|ts
argument_list|,
name|groupByOpFinal
argument_list|,
name|key
argument_list|,
name|keyBaseAlias
argument_list|,
name|ctx
operator|.
name|parent
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|sjHint
operator|!=
literal|null
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|createFinalRsForSemiJoinOp
parameter_list|(
name|ParseContext
name|parseContext
parameter_list|,
name|TableScanOperator
name|ts
parameter_list|,
name|GroupByOperator
name|gb
parameter_list|,
name|ExprNodeDesc
name|key
parameter_list|,
name|String
name|keyBaseAlias
parameter_list|,
name|ExprNodeDesc
name|colExpr
parameter_list|,
name|boolean
name|isHint
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|gbOutputNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// One each for min, max and bloom filter
name|gbOutputNames
operator|.
name|add
argument_list|(
name|SemanticAnalyzer
operator|.
name|getColumnInternalName
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|gbOutputNames
operator|.
name|add
argument_list|(
name|SemanticAnalyzer
operator|.
name|getColumnInternalName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|gbOutputNames
operator|.
name|add
argument_list|(
name|SemanticAnalyzer
operator|.
name|getColumnInternalName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|colPos
init|=
literal|0
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|rsValueCols
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gbOutputNames
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|ExprNodeColumnDesc
name|expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|key
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
name|gbOutputNames
operator|.
name|get
argument_list|(
name|colPos
operator|++
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|rsValueCols
operator|.
name|add
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
comment|// Bloom Filter uses binary
name|ExprNodeColumnDesc
name|colBFExpr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|binaryTypeInfo
argument_list|,
name|gbOutputNames
operator|.
name|get
argument_list|(
name|colPos
operator|++
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|rsValueCols
operator|.
name|add
argument_list|(
name|colBFExpr
argument_list|)
expr_stmt|;
comment|// Create the final Reduce Sink Operator
name|ReduceSinkDesc
name|rsDescFinal
init|=
name|PlanUtils
operator|.
name|getReduceSinkDesc
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
argument_list|,
name|rsValueCols
argument_list|,
name|gbOutputNames
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|Operation
operator|.
name|NOT_ACID
argument_list|,
name|NullOrdering
operator|.
name|defaultNullOrder
argument_list|(
name|parseContext
operator|.
name|getConf
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ReduceSinkOperator
name|rsOpFinal
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|rsDescFinal
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|gb
operator|.
name|getSchema
argument_list|()
argument_list|)
argument_list|,
name|gb
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|columnExprMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|rsOpFinal
operator|.
name|setColumnExprMap
argument_list|(
name|columnExprMap
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"DynamicSemiJoinPushdown: Saving RS to TS mapping: "
operator|+
name|rsOpFinal
operator|+
literal|": "
operator|+
name|ts
argument_list|)
expr_stmt|;
name|SemiJoinBranchInfo
name|sjInfo
init|=
operator|new
name|SemiJoinBranchInfo
argument_list|(
name|ts
argument_list|,
name|isHint
argument_list|)
decl_stmt|;
name|parseContext
operator|.
name|getRsToSemiJoinBranchInfo
argument_list|()
operator|.
name|put
argument_list|(
name|rsOpFinal
argument_list|,
name|sjInfo
argument_list|)
expr_stmt|;
comment|// Save the info that is required at query time to resolve dynamic/runtime values.
name|RuntimeValuesInfo
name|runtimeValuesInfo
init|=
operator|new
name|RuntimeValuesInfo
argument_list|()
decl_stmt|;
name|TableDesc
name|rsFinalTableDesc
init|=
name|PlanUtils
operator|.
name|getReduceValueTableDesc
argument_list|(
name|PlanUtils
operator|.
name|getFieldSchemasFromColumnList
argument_list|(
name|rsValueCols
argument_list|,
literal|"_col"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dynamicValueIDs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|dynamicValueIDs
operator|.
name|add
argument_list|(
name|keyBaseAlias
operator|+
literal|"_min"
argument_list|)
expr_stmt|;
name|dynamicValueIDs
operator|.
name|add
argument_list|(
name|keyBaseAlias
operator|+
literal|"_max"
argument_list|)
expr_stmt|;
name|dynamicValueIDs
operator|.
name|add
argument_list|(
name|keyBaseAlias
operator|+
literal|"_bloom_filter"
argument_list|)
expr_stmt|;
name|runtimeValuesInfo
operator|.
name|setTableDesc
argument_list|(
name|rsFinalTableDesc
argument_list|)
expr_stmt|;
name|runtimeValuesInfo
operator|.
name|setDynamicValueIDs
argument_list|(
name|dynamicValueIDs
argument_list|)
expr_stmt|;
name|runtimeValuesInfo
operator|.
name|setColExprs
argument_list|(
name|rsValueCols
argument_list|)
expr_stmt|;
name|runtimeValuesInfo
operator|.
name|setTsColExpr
argument_list|(
name|colExpr
argument_list|)
expr_stmt|;
name|parseContext
operator|.
name|getRsToRuntimeValuesInfoMap
argument_list|()
operator|.
name|put
argument_list|(
name|rsOpFinal
argument_list|,
name|runtimeValuesInfo
argument_list|)
expr_stmt|;
name|parseContext
operator|.
name|getColExprToGBMap
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|gb
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

