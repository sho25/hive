begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|translator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistribution
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|SemiJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|SortExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FilterOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|VirtualColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
operator|.
name|JoinLeafPredicateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
operator|.
name|JoinPredicateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|RelOptHiveTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveTableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|JoinCond
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|JoinType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|OrderExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|PartitionExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|RowResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|UnparseTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingComponentizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDescUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FilterDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinCondDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LimitDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PTFDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SelectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableScanDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|UnionDesc
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_class
specifier|public
class|class
name|HiveOpConverter
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HiveOpConverter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|HIVEAGGOPMODE
block|{
name|NO_SKEW_NO_MAP_SIDE_AGG
block|,
comment|// Corresponds to SemAnalyzer genGroupByPlan1MR
name|SKEW_NO_MAP_SIDE_AGG
block|,
comment|// Corresponds to SemAnalyzer genGroupByPlan2MR
name|NO_SKEW_MAP_SIDE_AGG
block|,
comment|// Corresponds to SemAnalyzer
comment|// genGroupByPlanMapAggrNoSkew
name|SKEW_MAP_SIDE_AGG
comment|// Corresponds to SemAnalyzer genGroupByPlanMapAggr2MR
block|}
empty_stmt|;
comment|// TODO: remove this after stashing only rqd pieces from opconverter
specifier|private
specifier|final
name|SemanticAnalyzer
name|semanticAnalyzer
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|private
specifier|final
name|UnparseTranslator
name|unparseTranslator
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|topOps
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|strictMode
decl_stmt|;
specifier|public
name|HiveOpConverter
parameter_list|(
name|SemanticAnalyzer
name|semanticAnalyzer
parameter_list|,
name|HiveConf
name|hiveConf
parameter_list|,
name|UnparseTranslator
name|unparseTranslator
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|topOps
parameter_list|,
name|boolean
name|strictMode
parameter_list|)
block|{
name|this
operator|.
name|semanticAnalyzer
operator|=
name|semanticAnalyzer
expr_stmt|;
name|this
operator|.
name|hiveConf
operator|=
name|hiveConf
expr_stmt|;
name|this
operator|.
name|unparseTranslator
operator|=
name|unparseTranslator
expr_stmt|;
name|this
operator|.
name|topOps
operator|=
name|topOps
expr_stmt|;
name|this
operator|.
name|strictMode
operator|=
name|strictMode
expr_stmt|;
block|}
specifier|static
class|class
name|OpAttr
block|{
specifier|final
name|String
name|tabAlias
decl_stmt|;
name|ImmutableList
argument_list|<
name|Operator
argument_list|>
name|inputs
decl_stmt|;
name|ImmutableMap
argument_list|<
name|Integer
argument_list|,
name|VirtualColumn
argument_list|>
name|vcolMap
decl_stmt|;
name|OpAttr
parameter_list|(
name|String
name|tabAlias
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|VirtualColumn
argument_list|>
name|vcolMap
parameter_list|,
name|Operator
modifier|...
name|inputs
parameter_list|)
block|{
name|this
operator|.
name|tabAlias
operator|=
name|tabAlias
expr_stmt|;
name|this
operator|.
name|vcolMap
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|vcolMap
argument_list|)
expr_stmt|;
name|this
operator|.
name|inputs
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|inputs
argument_list|)
expr_stmt|;
block|}
specifier|private
name|OpAttr
name|clone
parameter_list|(
name|Operator
modifier|...
name|inputs
parameter_list|)
block|{
return|return
operator|new
name|OpAttr
argument_list|(
name|tabAlias
argument_list|,
name|this
operator|.
name|vcolMap
argument_list|,
name|inputs
argument_list|)
return|;
block|}
block|}
specifier|public
name|Operator
name|convert
parameter_list|(
name|RelNode
name|root
parameter_list|)
throws|throws
name|SemanticException
block|{
name|OpAttr
name|opAf
init|=
name|dispatch
argument_list|(
name|root
argument_list|)
decl_stmt|;
return|return
name|opAf
operator|.
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|OpAttr
name|dispatch
parameter_list|(
name|RelNode
name|rn
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|rn
operator|instanceof
name|HiveTableScan
condition|)
block|{
return|return
name|visit
argument_list|(
operator|(
name|HiveTableScan
operator|)
name|rn
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rn
operator|instanceof
name|HiveProject
condition|)
block|{
return|return
name|visit
argument_list|(
operator|(
name|HiveProject
operator|)
name|rn
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rn
operator|instanceof
name|HiveJoin
condition|)
block|{
return|return
name|visit
argument_list|(
operator|(
name|HiveJoin
operator|)
name|rn
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rn
operator|instanceof
name|SemiJoin
condition|)
block|{
name|SemiJoin
name|sj
init|=
operator|(
name|SemiJoin
operator|)
name|rn
decl_stmt|;
name|HiveJoin
name|hj
init|=
name|HiveJoin
operator|.
name|getJoin
argument_list|(
name|sj
operator|.
name|getCluster
argument_list|()
argument_list|,
name|sj
operator|.
name|getLeft
argument_list|()
argument_list|,
name|sj
operator|.
name|getRight
argument_list|()
argument_list|,
name|sj
operator|.
name|getCondition
argument_list|()
argument_list|,
name|sj
operator|.
name|getJoinType
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|visit
argument_list|(
name|hj
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rn
operator|instanceof
name|HiveFilter
condition|)
block|{
return|return
name|visit
argument_list|(
operator|(
name|HiveFilter
operator|)
name|rn
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rn
operator|instanceof
name|HiveSort
condition|)
block|{
return|return
name|visit
argument_list|(
operator|(
name|HiveSort
operator|)
name|rn
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rn
operator|instanceof
name|HiveUnion
condition|)
block|{
return|return
name|visit
argument_list|(
operator|(
name|HiveUnion
operator|)
name|rn
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rn
operator|instanceof
name|SortExchange
condition|)
block|{
return|return
name|visit
argument_list|(
operator|(
name|SortExchange
operator|)
name|rn
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rn
operator|instanceof
name|HiveAggregate
condition|)
block|{
return|return
name|visit
argument_list|(
operator|(
name|HiveAggregate
operator|)
name|rn
argument_list|)
return|;
block|}
name|LOG
operator|.
name|error
argument_list|(
name|rn
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"operator translation not supported"
operator|+
literal|" yet in return path."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**    * TODO: 1. PPD needs to get pushed in to TS    *    * @param scanRel    * @return    */
name|OpAttr
name|visit
parameter_list|(
name|HiveTableScan
name|scanRel
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Translating operator rel#"
operator|+
name|scanRel
operator|.
name|getId
argument_list|()
operator|+
literal|":"
operator|+
name|scanRel
operator|.
name|getRelTypeName
argument_list|()
operator|+
literal|" with row type: ["
operator|+
name|scanRel
operator|.
name|getRowType
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|RelOptHiveTable
name|ht
init|=
operator|(
name|RelOptHiveTable
operator|)
name|scanRel
operator|.
name|getTable
argument_list|()
decl_stmt|;
comment|// 1. Setup TableScan Desc
comment|// 1.1 Build col details used by scan
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|colInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|VirtualColumn
argument_list|>
name|virtualCols
init|=
operator|new
name|ArrayList
argument_list|<
name|VirtualColumn
argument_list|>
argument_list|(
name|ht
operator|.
name|getVirtualCols
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|VirtualColumn
argument_list|>
name|hiveScanVColMap
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|VirtualColumn
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partColNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|neededColumnIDs
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|neededColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|VirtualColumn
argument_list|>
name|posToVColMap
init|=
name|HiveCalciteUtil
operator|.
name|getVColsMap
argument_list|(
name|virtualCols
argument_list|,
name|ht
operator|.
name|getNoOfNonVirtualCols
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|ColumnInfo
argument_list|>
name|posToPartColInfo
init|=
name|ht
operator|.
name|getPartColInfoMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|ColumnInfo
argument_list|>
name|posToNonPartColInfo
init|=
name|ht
operator|.
name|getNonPartColInfoMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|neededColIndxsFrmReloptHT
init|=
name|scanRel
operator|.
name|getNeededColIndxsFrmReloptHT
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|scanColNames
init|=
name|scanRel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
decl_stmt|;
name|String
name|tableAlias
init|=
name|scanRel
operator|.
name|getTableAlias
argument_list|()
decl_stmt|;
name|String
name|colName
decl_stmt|;
name|ColumnInfo
name|colInfo
decl_stmt|;
name|VirtualColumn
name|vc
decl_stmt|;
name|Integer
name|posInRHT
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|neededColIndxsFrmReloptHT
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|colName
operator|=
name|scanColNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|posInRHT
operator|=
name|neededColIndxsFrmReloptHT
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|posToVColMap
operator|.
name|containsKey
argument_list|(
name|posInRHT
argument_list|)
condition|)
block|{
name|vc
operator|=
name|posToVColMap
operator|.
name|get
argument_list|(
name|posInRHT
argument_list|)
expr_stmt|;
name|virtualCols
operator|.
name|add
argument_list|(
name|vc
argument_list|)
expr_stmt|;
name|colInfo
operator|=
operator|new
name|ColumnInfo
argument_list|(
name|vc
operator|.
name|getName
argument_list|()
argument_list|,
name|vc
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
name|tableAlias
argument_list|,
literal|true
argument_list|,
name|vc
operator|.
name|getIsHidden
argument_list|()
argument_list|)
expr_stmt|;
name|hiveScanVColMap
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|vc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|posToPartColInfo
operator|.
name|containsKey
argument_list|(
name|posInRHT
argument_list|)
condition|)
block|{
name|partColNames
operator|.
name|add
argument_list|(
name|colName
argument_list|)
expr_stmt|;
name|colInfo
operator|=
name|posToPartColInfo
operator|.
name|get
argument_list|(
name|posInRHT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|colInfo
operator|=
name|posToNonPartColInfo
operator|.
name|get
argument_list|(
name|posInRHT
argument_list|)
expr_stmt|;
block|}
name|neededColumnIDs
operator|.
name|add
argument_list|(
name|posInRHT
argument_list|)
expr_stmt|;
name|neededColumns
operator|.
name|add
argument_list|(
name|colName
argument_list|)
expr_stmt|;
name|colInfos
operator|.
name|add
argument_list|(
name|colInfo
argument_list|)
expr_stmt|;
block|}
comment|// 1.2 Create TableScanDesc
name|TableScanDesc
name|tsd
init|=
operator|new
name|TableScanDesc
argument_list|(
name|tableAlias
argument_list|,
name|virtualCols
argument_list|,
name|ht
operator|.
name|getHiveTableMD
argument_list|()
argument_list|)
decl_stmt|;
comment|// 1.3. Set Partition cols in TSDesc
name|tsd
operator|.
name|setPartColumns
argument_list|(
name|partColNames
argument_list|)
expr_stmt|;
comment|// 1.4. Set needed cols in TSDesc
name|tsd
operator|.
name|setNeededColumnIDs
argument_list|(
name|neededColumnIDs
argument_list|)
expr_stmt|;
name|tsd
operator|.
name|setNeededColumns
argument_list|(
name|neededColumns
argument_list|)
expr_stmt|;
comment|// 2. Setup TableScan
name|TableScanOperator
name|ts
init|=
operator|(
name|TableScanOperator
operator|)
name|OperatorFactory
operator|.
name|get
argument_list|(
name|tsd
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|colInfos
argument_list|)
argument_list|)
decl_stmt|;
name|topOps
operator|.
name|put
argument_list|(
name|ht
operator|.
name|getQBID
argument_list|()
argument_list|,
name|ts
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generated "
operator|+
name|ts
operator|+
literal|" with row schema: ["
operator|+
name|ts
operator|.
name|getSchema
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|OpAttr
argument_list|(
name|tableAlias
argument_list|,
name|hiveScanVColMap
argument_list|,
name|ts
argument_list|)
return|;
block|}
name|OpAttr
name|visit
parameter_list|(
name|HiveProject
name|projectRel
parameter_list|)
throws|throws
name|SemanticException
block|{
name|OpAttr
name|inputOpAf
init|=
name|dispatch
argument_list|(
name|projectRel
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Translating operator rel#"
operator|+
name|projectRel
operator|.
name|getId
argument_list|()
operator|+
literal|":"
operator|+
name|projectRel
operator|.
name|getRelTypeName
argument_list|()
operator|+
literal|" with row type: ["
operator|+
name|projectRel
operator|.
name|getRowType
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|WindowingSpec
name|windowingSpec
init|=
operator|new
name|WindowingSpec
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|exprCols
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|projectRel
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|ExprNodeConverter
name|converter
init|=
operator|new
name|ExprNodeConverter
argument_list|(
name|inputOpAf
operator|.
name|tabAlias
argument_list|,
name|projectRel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
operator|.
name|get
argument_list|(
name|pos
argument_list|)
argument_list|,
name|projectRel
operator|.
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
argument_list|,
name|projectRel
operator|.
name|getRowType
argument_list|()
argument_list|,
literal|false
argument_list|,
name|projectRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
decl_stmt|;
name|exprCols
operator|.
name|add
argument_list|(
name|projectRel
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|.
name|accept
argument_list|(
name|converter
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|converter
operator|.
name|getWindowFunctionSpec
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|windowingSpec
operator|.
name|addWindowFunction
argument_list|(
name|converter
operator|.
name|getWindowFunctionSpec
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|windowingSpec
operator|.
name|getWindowExpressions
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|windowingSpec
operator|.
name|getWindowExpressions
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|inputOpAf
operator|=
name|genPTF
argument_list|(
name|inputOpAf
argument_list|,
name|windowingSpec
argument_list|)
expr_stmt|;
block|}
comment|// TODO: is this a safe assumption (name collision, external names...)
name|List
argument_list|<
name|String
argument_list|>
name|exprNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|projectRel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|)
decl_stmt|;
name|SelectDesc
name|sd
init|=
operator|new
name|SelectDesc
argument_list|(
name|exprCols
argument_list|,
name|exprNames
argument_list|)
decl_stmt|;
name|Pair
argument_list|<
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|VirtualColumn
argument_list|>
argument_list|>
name|colInfoVColPair
init|=
name|createColInfos
argument_list|(
name|projectRel
operator|.
name|getChildExps
argument_list|()
argument_list|,
name|exprCols
argument_list|,
name|exprNames
argument_list|,
name|inputOpAf
argument_list|)
decl_stmt|;
name|SelectOperator
name|selOp
init|=
operator|(
name|SelectOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|sd
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|colInfoVColPair
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|inputOpAf
operator|.
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generated "
operator|+
name|selOp
operator|+
literal|" with row schema: ["
operator|+
name|selOp
operator|.
name|getSchema
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|OpAttr
argument_list|(
name|inputOpAf
operator|.
name|tabAlias
argument_list|,
name|colInfoVColPair
operator|.
name|getValue
argument_list|()
argument_list|,
name|selOp
argument_list|)
return|;
block|}
name|OpAttr
name|visit
parameter_list|(
name|HiveJoin
name|joinRel
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// 1. Convert inputs
name|OpAttr
index|[]
name|inputs
init|=
operator|new
name|OpAttr
index|[
name|joinRel
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|joinRel
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inputs
index|[
name|i
index|]
operator|=
name|dispatch
argument_list|(
name|joinRel
operator|.
name|getInput
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|inputs
index|[
name|i
index|]
operator|.
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Translating operator rel#"
operator|+
name|joinRel
operator|.
name|getId
argument_list|()
operator|+
literal|":"
operator|+
name|joinRel
operator|.
name|getRelTypeName
argument_list|()
operator|+
literal|" with row type: ["
operator|+
name|joinRel
operator|.
name|getRowType
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
comment|// 2. Convert join condition
name|JoinPredicateInfo
name|joinPredInfo
init|=
name|JoinPredicateInfo
operator|.
name|constructJoinPredicateInfo
argument_list|(
name|joinRel
argument_list|)
decl_stmt|;
comment|// 3. Extract join keys from condition
name|ExprNodeDesc
index|[]
index|[]
name|joinKeys
init|=
name|extractJoinKeys
argument_list|(
name|joinPredInfo
argument_list|,
name|joinRel
operator|.
name|getInputs
argument_list|()
argument_list|)
decl_stmt|;
comment|// 4.a Generate tags
for|for
control|(
name|int
name|tag
init|=
literal|0
init|;
name|tag
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
name|tag
operator|++
control|)
block|{
name|ReduceSinkOperator
name|reduceSinkOp
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|children
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
name|reduceSinkOp
operator|.
name|getConf
argument_list|()
operator|.
name|setTag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
comment|// 4.b Generate Join operator
name|JoinOperator
name|joinOp
init|=
name|genJoin
argument_list|(
name|joinRel
argument_list|,
name|joinPredInfo
argument_list|,
name|children
argument_list|,
name|joinKeys
argument_list|)
decl_stmt|;
comment|// 5. TODO: Extract condition for non-equi join elements (if any) and
comment|// add it
comment|// 6. Virtual columns
name|Map
argument_list|<
name|Integer
argument_list|,
name|VirtualColumn
argument_list|>
name|vcolMap
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|VirtualColumn
argument_list|>
argument_list|()
decl_stmt|;
name|vcolMap
operator|.
name|putAll
argument_list|(
name|inputs
index|[
literal|0
index|]
operator|.
name|vcolMap
argument_list|)
expr_stmt|;
if|if
condition|(
name|extractJoinType
argument_list|(
name|joinRel
argument_list|)
operator|!=
name|JoinType
operator|.
name|LEFTSEMI
condition|)
block|{
name|int
name|shift
init|=
name|inputs
index|[
literal|0
index|]
operator|.
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|vcolMap
operator|.
name|putAll
argument_list|(
name|HiveCalciteUtil
operator|.
name|shiftVColsMap
argument_list|(
name|inputs
index|[
name|i
index|]
operator|.
name|vcolMap
argument_list|,
name|shift
argument_list|)
argument_list|)
expr_stmt|;
name|shift
operator|+=
name|inputs
index|[
name|i
index|]
operator|.
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
comment|// 7. Return result
return|return
operator|new
name|OpAttr
argument_list|(
literal|null
argument_list|,
name|vcolMap
argument_list|,
name|joinOp
argument_list|)
return|;
block|}
name|OpAttr
name|visit
parameter_list|(
name|HiveAggregate
name|aggRel
parameter_list|)
throws|throws
name|SemanticException
block|{
name|OpAttr
name|inputOpAf
init|=
name|dispatch
argument_list|(
name|aggRel
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|HiveGBOpConvUtil
operator|.
name|translateGB
argument_list|(
name|inputOpAf
argument_list|,
name|aggRel
argument_list|,
name|hiveConf
argument_list|)
return|;
block|}
name|OpAttr
name|visit
parameter_list|(
name|HiveSort
name|sortRel
parameter_list|)
throws|throws
name|SemanticException
block|{
name|OpAttr
name|inputOpAf
init|=
name|dispatch
argument_list|(
name|sortRel
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Translating operator rel#"
operator|+
name|sortRel
operator|.
name|getId
argument_list|()
operator|+
literal|":"
operator|+
name|sortRel
operator|.
name|getRelTypeName
argument_list|()
operator|+
literal|" with row type: ["
operator|+
name|sortRel
operator|.
name|getRowType
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
if|if
condition|(
name|sortRel
operator|.
name|getCollation
argument_list|()
operator|==
name|RelCollations
operator|.
name|EMPTY
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Operator rel#"
operator|+
name|sortRel
operator|.
name|getId
argument_list|()
operator|+
literal|":"
operator|+
name|sortRel
operator|.
name|getRelTypeName
argument_list|()
operator|+
literal|" consists of limit"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sortRel
operator|.
name|fetch
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Operator rel#"
operator|+
name|sortRel
operator|.
name|getId
argument_list|()
operator|+
literal|":"
operator|+
name|sortRel
operator|.
name|getRelTypeName
argument_list|()
operator|+
literal|" consists of sort"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Operator rel#"
operator|+
name|sortRel
operator|.
name|getId
argument_list|()
operator|+
literal|":"
operator|+
name|sortRel
operator|.
name|getRelTypeName
argument_list|()
operator|+
literal|" consists of sort+limit"
argument_list|)
expr_stmt|;
block|}
block|}
name|Operator
argument_list|<
name|?
argument_list|>
name|inputOp
init|=
name|inputOpAf
operator|.
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
argument_list|>
name|resultOp
init|=
name|inputOpAf
operator|.
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// 1. If we need to sort tuples based on the value of some
comment|// of their columns
if|if
condition|(
name|sortRel
operator|.
name|getCollation
argument_list|()
operator|!=
name|RelCollations
operator|.
name|EMPTY
condition|)
block|{
comment|// In strict mode, in the presence of order by, limit must be
comment|// specified
if|if
condition|(
name|strictMode
operator|&&
name|sortRel
operator|.
name|fetch
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|NO_LIMIT_WITH_ORDERBY
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
comment|// 1.a. Extract order for each column from collation
comment|// Generate sortCols and order
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|sortCols
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuilder
name|order
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|RelCollation
name|collation
range|:
name|sortRel
operator|.
name|getCollationList
argument_list|()
control|)
block|{
for|for
control|(
name|RelFieldCollation
name|sortInfo
range|:
name|collation
operator|.
name|getFieldCollations
argument_list|()
control|)
block|{
name|int
name|sortColumnPos
init|=
name|sortInfo
operator|.
name|getFieldIndex
argument_list|()
decl_stmt|;
name|ColumnInfo
name|columnInfo
init|=
operator|new
name|ColumnInfo
argument_list|(
name|inputOp
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|.
name|get
argument_list|(
name|sortColumnPos
argument_list|)
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|sortColumn
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|columnInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|columnInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|columnInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|columnInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|)
decl_stmt|;
name|sortCols
operator|.
name|add
argument_list|(
name|sortColumn
argument_list|)
expr_stmt|;
if|if
condition|(
name|sortInfo
operator|.
name|getDirection
argument_list|()
operator|==
name|RelFieldCollation
operator|.
name|Direction
operator|.
name|DESCENDING
condition|)
block|{
name|order
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|order
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Use only 1 reducer for order by
name|int
name|numReducers
init|=
literal|1
decl_stmt|;
comment|// 1.b. Generate reduce sink and project operator
name|resultOp
operator|=
name|genReduceSinkAndBacktrackSelect
argument_list|(
name|resultOp
argument_list|,
name|sortCols
operator|.
name|toArray
argument_list|(
operator|new
name|ExprNodeDesc
index|[
name|sortCols
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
argument_list|,
name|order
operator|.
name|toString
argument_list|()
argument_list|,
name|numReducers
argument_list|,
name|Operation
operator|.
name|NOT_ACID
argument_list|,
name|strictMode
argument_list|)
expr_stmt|;
block|}
comment|// 2. If we need to generate limit
if|if
condition|(
name|sortRel
operator|.
name|fetch
operator|!=
literal|null
condition|)
block|{
name|int
name|limit
init|=
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|sortRel
operator|.
name|fetch
argument_list|)
decl_stmt|;
name|LimitDesc
name|limitDesc
init|=
operator|new
name|LimitDesc
argument_list|(
name|limit
argument_list|)
decl_stmt|;
comment|// TODO: Set 'last limit' global property
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|cinfoLst
init|=
name|createColInfos
argument_list|(
name|inputOp
argument_list|)
decl_stmt|;
name|resultOp
operator|=
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|limitDesc
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|cinfoLst
argument_list|)
argument_list|,
name|resultOp
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generated "
operator|+
name|resultOp
operator|+
literal|" with row schema: ["
operator|+
name|resultOp
operator|.
name|getSchema
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// 3. Return result
return|return
name|inputOpAf
operator|.
name|clone
argument_list|(
name|resultOp
argument_list|)
return|;
block|}
comment|/**    * TODO: 1) isSamplingPred 2) sampleDesc 3) isSortedFilter    */
name|OpAttr
name|visit
parameter_list|(
name|HiveFilter
name|filterRel
parameter_list|)
throws|throws
name|SemanticException
block|{
name|OpAttr
name|inputOpAf
init|=
name|dispatch
argument_list|(
name|filterRel
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Translating operator rel#"
operator|+
name|filterRel
operator|.
name|getId
argument_list|()
operator|+
literal|":"
operator|+
name|filterRel
operator|.
name|getRelTypeName
argument_list|()
operator|+
literal|" with row type: ["
operator|+
name|filterRel
operator|.
name|getRowType
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|ExprNodeDesc
name|filCondExpr
init|=
name|filterRel
operator|.
name|getCondition
argument_list|()
operator|.
name|accept
argument_list|(
operator|new
name|ExprNodeConverter
argument_list|(
name|inputOpAf
operator|.
name|tabAlias
argument_list|,
name|filterRel
operator|.
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
argument_list|,
literal|false
argument_list|,
name|filterRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|FilterDesc
name|filDesc
init|=
operator|new
name|FilterDesc
argument_list|(
name|filCondExpr
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|cinfoLst
init|=
name|createColInfos
argument_list|(
name|inputOpAf
operator|.
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|FilterOperator
name|filOp
init|=
operator|(
name|FilterOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|filDesc
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|cinfoLst
argument_list|)
argument_list|,
name|inputOpAf
operator|.
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generated "
operator|+
name|filOp
operator|+
literal|" with row schema: ["
operator|+
name|filOp
operator|.
name|getSchema
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
name|inputOpAf
operator|.
name|clone
argument_list|(
name|filOp
argument_list|)
return|;
block|}
name|OpAttr
name|visit
parameter_list|(
name|HiveUnion
name|unionRel
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// 1. Convert inputs
name|OpAttr
index|[]
name|inputs
init|=
operator|new
name|OpAttr
index|[
name|unionRel
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inputs
index|[
name|i
index|]
operator|=
name|dispatch
argument_list|(
name|unionRel
operator|.
name|getInput
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Translating operator rel#"
operator|+
name|unionRel
operator|.
name|getId
argument_list|()
operator|+
literal|":"
operator|+
name|unionRel
operator|.
name|getRelTypeName
argument_list|()
operator|+
literal|" with row type: ["
operator|+
name|unionRel
operator|.
name|getRowType
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
comment|// 2. Create a new union operator
name|UnionDesc
name|unionDesc
init|=
operator|new
name|UnionDesc
argument_list|()
decl_stmt|;
name|unionDesc
operator|.
name|setNumInputs
argument_list|(
name|inputs
operator|.
name|length
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|cinfoLst
init|=
name|createColInfos
argument_list|(
name|inputs
index|[
literal|0
index|]
operator|.
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
argument_list|>
index|[]
name|children
init|=
operator|new
name|Operator
argument_list|<
name|?
argument_list|>
index|[
name|inputs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|children
index|[
name|i
index|]
operator|=
name|inputs
index|[
name|i
index|]
operator|.
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|unionOp
init|=
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|unionDesc
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|cinfoLst
argument_list|)
argument_list|,
name|children
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generated "
operator|+
name|unionOp
operator|+
literal|" with row schema: ["
operator|+
name|unionOp
operator|.
name|getSchema
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
comment|// 3. Return result
return|return
name|inputs
index|[
literal|0
index|]
operator|.
name|clone
argument_list|(
name|unionOp
argument_list|)
return|;
block|}
name|OpAttr
name|visit
parameter_list|(
name|SortExchange
name|exchangeRel
parameter_list|)
throws|throws
name|SemanticException
block|{
name|OpAttr
name|inputOpAf
init|=
name|dispatch
argument_list|(
name|exchangeRel
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Translating operator rel#"
operator|+
name|exchangeRel
operator|.
name|getId
argument_list|()
operator|+
literal|":"
operator|+
name|exchangeRel
operator|.
name|getRelTypeName
argument_list|()
operator|+
literal|" with row type: ["
operator|+
name|exchangeRel
operator|.
name|getRowType
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|RelDistribution
name|distribution
init|=
name|exchangeRel
operator|.
name|getDistribution
argument_list|()
decl_stmt|;
if|if
condition|(
name|distribution
operator|.
name|getType
argument_list|()
operator|!=
name|Type
operator|.
name|HASH_DISTRIBUTED
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Only hash distribution supported for LogicalExchange"
argument_list|)
throw|;
block|}
name|ExprNodeDesc
index|[]
name|expressions
init|=
operator|new
name|ExprNodeDesc
index|[
name|distribution
operator|.
name|getKeys
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|distribution
operator|.
name|getKeys
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|key
init|=
name|distribution
operator|.
name|getKeys
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ColumnInfo
name|colInfo
init|=
name|inputOpAf
operator|.
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|colInfo
argument_list|)
decl_stmt|;
name|expressions
index|[
name|i
index|]
operator|=
name|column
expr_stmt|;
block|}
name|ReduceSinkOperator
name|rsOp
init|=
name|genReduceSink
argument_list|(
name|inputOpAf
operator|.
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|expressions
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|Operation
operator|.
name|NOT_ACID
argument_list|,
name|strictMode
argument_list|)
decl_stmt|;
return|return
name|inputOpAf
operator|.
name|clone
argument_list|(
name|rsOp
argument_list|)
return|;
block|}
specifier|private
name|OpAttr
name|genPTF
parameter_list|(
name|OpAttr
name|inputOpAf
parameter_list|,
name|WindowingSpec
name|wSpec
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|input
init|=
name|inputOpAf
operator|.
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|wSpec
operator|.
name|validateAndMakeEffective
argument_list|()
expr_stmt|;
name|WindowingComponentizer
name|groups
init|=
operator|new
name|WindowingComponentizer
argument_list|(
name|wSpec
argument_list|)
decl_stmt|;
name|RowResolver
name|rr
init|=
operator|new
name|RowResolver
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnInfo
name|ci
range|:
name|input
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
control|)
block|{
name|rr
operator|.
name|put
argument_list|(
name|ci
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|ci
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|ci
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|groups
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|wSpec
operator|=
name|groups
operator|.
name|next
argument_list|(
name|hiveConf
argument_list|,
name|semanticAnalyzer
argument_list|,
name|unparseTranslator
argument_list|,
name|rr
argument_list|)
expr_stmt|;
comment|// 1. Create RS and backtrack Select operator on top
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keyCols
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuilder
name|order
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|PartitionExpression
name|partCol
range|:
name|wSpec
operator|.
name|getQueryPartitionSpec
argument_list|()
operator|.
name|getExpressions
argument_list|()
control|)
block|{
name|ExprNodeDesc
name|partExpr
init|=
name|semanticAnalyzer
operator|.
name|genExprNodeDesc
argument_list|(
name|partCol
operator|.
name|getExpression
argument_list|()
argument_list|,
name|rr
argument_list|)
decl_stmt|;
if|if
condition|(
name|ExprNodeDescUtils
operator|.
name|indexOf
argument_list|(
name|partExpr
argument_list|,
name|partCols
argument_list|)
operator|<
literal|0
condition|)
block|{
name|keyCols
operator|.
name|add
argument_list|(
name|partExpr
argument_list|)
expr_stmt|;
name|partCols
operator|.
name|add
argument_list|(
name|partExpr
argument_list|)
expr_stmt|;
name|order
operator|.
name|append
argument_list|(
literal|'+'
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|wSpec
operator|.
name|getQueryOrderSpec
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|OrderExpression
name|orderCol
range|:
name|wSpec
operator|.
name|getQueryOrderSpec
argument_list|()
operator|.
name|getExpressions
argument_list|()
control|)
block|{
name|ExprNodeDesc
name|orderExpr
init|=
name|semanticAnalyzer
operator|.
name|genExprNodeDesc
argument_list|(
name|orderCol
operator|.
name|getExpression
argument_list|()
argument_list|,
name|rr
argument_list|)
decl_stmt|;
name|char
name|orderChar
init|=
name|orderCol
operator|.
name|getOrder
argument_list|()
operator|==
name|PTFInvocationSpec
operator|.
name|Order
operator|.
name|ASC
condition|?
literal|'+'
else|:
literal|'-'
decl_stmt|;
name|int
name|index
init|=
name|ExprNodeDescUtils
operator|.
name|indexOf
argument_list|(
name|orderExpr
argument_list|,
name|keyCols
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|order
operator|.
name|setCharAt
argument_list|(
name|index
argument_list|,
name|orderChar
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|keyCols
operator|.
name|add
argument_list|(
name|orderExpr
argument_list|)
expr_stmt|;
name|order
operator|.
name|append
argument_list|(
name|orderChar
argument_list|)
expr_stmt|;
block|}
block|}
name|SelectOperator
name|selectOp
init|=
name|genReduceSinkAndBacktrackSelect
argument_list|(
name|input
argument_list|,
name|keyCols
operator|.
name|toArray
argument_list|(
operator|new
name|ExprNodeDesc
index|[
name|keyCols
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|0
argument_list|,
name|partCols
argument_list|,
name|order
operator|.
name|toString
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
name|Operation
operator|.
name|NOT_ACID
argument_list|,
name|strictMode
argument_list|)
decl_stmt|;
comment|// 2. Finally create PTF
name|PTFTranslator
name|translator
init|=
operator|new
name|PTFTranslator
argument_list|()
decl_stmt|;
name|PTFDesc
name|ptfDesc
init|=
name|translator
operator|.
name|translate
argument_list|(
name|wSpec
argument_list|,
name|semanticAnalyzer
argument_list|,
name|hiveConf
argument_list|,
name|rr
argument_list|,
name|unparseTranslator
argument_list|)
decl_stmt|;
name|RowResolver
name|ptfOpRR
init|=
name|ptfDesc
operator|.
name|getFuncDef
argument_list|()
operator|.
name|getOutputShape
argument_list|()
operator|.
name|getRr
argument_list|()
decl_stmt|;
name|Operator
argument_list|<
name|?
argument_list|>
name|ptfOp
init|=
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|ptfDesc
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|ptfOpRR
operator|.
name|getColumnInfos
argument_list|()
argument_list|)
argument_list|,
name|selectOp
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generated "
operator|+
name|ptfOp
operator|+
literal|" with row schema: ["
operator|+
name|ptfOp
operator|.
name|getSchema
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
comment|// 3. Prepare for next iteration (if any)
name|rr
operator|=
name|ptfOpRR
expr_stmt|;
name|input
operator|=
name|ptfOp
expr_stmt|;
block|}
return|return
name|inputOpAf
operator|.
name|clone
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|private
name|ExprNodeDesc
index|[]
index|[]
name|extractJoinKeys
parameter_list|(
name|JoinPredicateInfo
name|joinPredInfo
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
name|ExprNodeDesc
index|[]
index|[]
name|joinKeys
init|=
operator|new
name|ExprNodeDesc
index|[
name|inputs
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|joinKeys
index|[
name|i
index|]
operator|=
operator|new
name|ExprNodeDesc
index|[
name|joinPredInfo
operator|.
name|getEquiJoinPredicateElements
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|joinPredInfo
operator|.
name|getEquiJoinPredicateElements
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|JoinLeafPredicateInfo
name|joinLeafPredInfo
init|=
name|joinPredInfo
operator|.
name|getEquiJoinPredicateElements
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|RexNode
name|key
init|=
name|joinLeafPredInfo
operator|.
name|getJoinKeyExprs
argument_list|(
name|j
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|joinKeys
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|convertToExprNode
argument_list|(
name|key
argument_list|,
name|inputs
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|joinKeys
return|;
block|}
specifier|private
specifier|static
name|SelectOperator
name|genReduceSinkAndBacktrackSelect
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|input
parameter_list|,
name|ExprNodeDesc
index|[]
name|keys
parameter_list|,
name|int
name|tag
parameter_list|,
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|partitionCols
parameter_list|,
name|String
name|order
parameter_list|,
name|int
name|numReducers
parameter_list|,
name|Operation
name|acidOperation
parameter_list|,
name|boolean
name|strictMode
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// 1. Generate RS operator
name|ReduceSinkOperator
name|rsOp
init|=
name|genReduceSink
argument_list|(
name|input
argument_list|,
name|keys
argument_list|,
name|tag
argument_list|,
name|partitionCols
argument_list|,
name|order
argument_list|,
name|numReducers
argument_list|,
name|acidOperation
argument_list|,
name|strictMode
argument_list|)
decl_stmt|;
comment|// 2. Generate backtrack Select operator
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|descriptors
init|=
name|buildBacktrackFromReduceSink
argument_list|(
name|rsOp
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|SelectDesc
name|selectDesc
init|=
operator|new
name|SelectDesc
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
name|descriptors
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|descriptors
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|cinfoLst
init|=
name|createColInfos
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|SelectOperator
name|selectOp
init|=
operator|(
name|SelectOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|selectDesc
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|cinfoLst
argument_list|)
argument_list|,
name|rsOp
argument_list|)
decl_stmt|;
name|selectOp
operator|.
name|setColumnExprMap
argument_list|(
name|descriptors
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generated "
operator|+
name|selectOp
operator|+
literal|" with row schema: ["
operator|+
name|selectOp
operator|.
name|getSchema
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
name|selectOp
return|;
block|}
specifier|private
specifier|static
name|ReduceSinkOperator
name|genReduceSink
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|input
parameter_list|,
name|ExprNodeDesc
index|[]
name|keys
parameter_list|,
name|int
name|tag
parameter_list|,
name|int
name|numReducers
parameter_list|,
name|Operation
name|acidOperation
parameter_list|,
name|boolean
name|strictMode
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
name|genReduceSink
argument_list|(
name|input
argument_list|,
name|keys
argument_list|,
name|tag
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
argument_list|,
literal|""
argument_list|,
name|numReducers
argument_list|,
name|acidOperation
argument_list|,
name|strictMode
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|private
specifier|static
name|ReduceSinkOperator
name|genReduceSink
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|input
parameter_list|,
name|ExprNodeDesc
index|[]
name|keys
parameter_list|,
name|int
name|tag
parameter_list|,
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|partitionCols
parameter_list|,
name|String
name|order
parameter_list|,
name|int
name|numReducers
parameter_list|,
name|Operation
name|acidOperation
parameter_list|,
name|boolean
name|strictMode
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Operator
name|dummy
init|=
name|Operator
operator|.
name|createDummy
argument_list|()
decl_stmt|;
comment|// dummy for backtracking
name|dummy
operator|.
name|setParentOperators
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|reduceKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|reduceKeysBack
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
comment|// Compute join keys and store in reduceKeys
for|for
control|(
name|ExprNodeDesc
name|key
range|:
name|keys
control|)
block|{
name|reduceKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|reduceKeysBack
operator|.
name|add
argument_list|(
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|key
argument_list|,
name|dummy
argument_list|,
name|input
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Walk over the input schema and copy in the output
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|reduceValues
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|reduceValuesBack
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|colExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|inputColumns
init|=
name|input
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|outputColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|outputColumnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
index|[]
name|index
init|=
operator|new
name|int
index|[
name|inputColumns
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputColumns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ColumnInfo
name|colInfo
init|=
name|inputColumns
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|outputColName
init|=
name|colInfo
operator|.
name|getInternalName
argument_list|()
decl_stmt|;
name|ExprNodeDesc
name|expr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|colInfo
argument_list|)
decl_stmt|;
comment|// backtrack can be null when input is script operator
name|ExprNodeDesc
name|exprBack
init|=
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|expr
argument_list|,
name|dummy
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|int
name|kindex
init|=
name|exprBack
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|ExprNodeDescUtils
operator|.
name|indexOf
argument_list|(
name|exprBack
argument_list|,
name|reduceKeysBack
argument_list|)
decl_stmt|;
if|if
condition|(
name|kindex
operator|>=
literal|0
condition|)
block|{
name|ColumnInfo
name|newColInfo
init|=
operator|new
name|ColumnInfo
argument_list|(
name|colInfo
argument_list|)
decl_stmt|;
name|newColInfo
operator|.
name|setInternalName
argument_list|(
name|Utilities
operator|.
name|ReduceField
operator|.
name|KEY
operator|+
literal|".reducesinkkey"
operator|+
name|kindex
argument_list|)
expr_stmt|;
name|newColInfo
operator|.
name|setAlias
argument_list|(
name|outputColName
argument_list|)
expr_stmt|;
name|newColInfo
operator|.
name|setTabAlias
argument_list|(
name|colInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|)
expr_stmt|;
name|outputColumns
operator|.
name|add
argument_list|(
name|newColInfo
argument_list|)
expr_stmt|;
name|index
index|[
name|i
index|]
operator|=
name|kindex
expr_stmt|;
continue|continue;
block|}
name|int
name|vindex
init|=
name|exprBack
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|ExprNodeDescUtils
operator|.
name|indexOf
argument_list|(
name|exprBack
argument_list|,
name|reduceValuesBack
argument_list|)
decl_stmt|;
if|if
condition|(
name|kindex
operator|>=
literal|0
condition|)
block|{
name|index
index|[
name|i
index|]
operator|=
operator|-
name|vindex
operator|-
literal|1
expr_stmt|;
continue|continue;
block|}
name|index
index|[
name|i
index|]
operator|=
operator|-
name|reduceValues
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
name|reduceValues
operator|.
name|add
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|reduceValuesBack
operator|.
name|add
argument_list|(
name|exprBack
argument_list|)
expr_stmt|;
name|ColumnInfo
name|newColInfo
init|=
operator|new
name|ColumnInfo
argument_list|(
name|colInfo
argument_list|)
decl_stmt|;
name|newColInfo
operator|.
name|setInternalName
argument_list|(
name|Utilities
operator|.
name|ReduceField
operator|.
name|VALUE
operator|+
literal|"."
operator|+
name|outputColName
argument_list|)
expr_stmt|;
name|newColInfo
operator|.
name|setAlias
argument_list|(
name|outputColName
argument_list|)
expr_stmt|;
name|newColInfo
operator|.
name|setTabAlias
argument_list|(
name|colInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|)
expr_stmt|;
name|outputColumns
operator|.
name|add
argument_list|(
name|newColInfo
argument_list|)
expr_stmt|;
name|outputColumnNames
operator|.
name|add
argument_list|(
name|outputColName
argument_list|)
expr_stmt|;
block|}
name|dummy
operator|.
name|setParentOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// Use only 1 reducer if no reduce keys
if|if
condition|(
name|reduceKeys
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|numReducers
operator|=
literal|1
expr_stmt|;
comment|// Cartesian product is not supported in strict mode
if|if
condition|(
name|strictMode
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|NO_CARTESIAN_PRODUCT
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|ReduceSinkDesc
name|rsDesc
decl_stmt|;
if|if
condition|(
name|order
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rsDesc
operator|=
name|PlanUtils
operator|.
name|getReduceSinkDesc
argument_list|(
name|reduceKeys
argument_list|,
name|reduceValues
argument_list|,
name|outputColumnNames
argument_list|,
literal|false
argument_list|,
name|tag
argument_list|,
name|reduceKeys
operator|.
name|size
argument_list|()
argument_list|,
name|numReducers
argument_list|,
name|acidOperation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rsDesc
operator|=
name|PlanUtils
operator|.
name|getReduceSinkDesc
argument_list|(
name|reduceKeys
argument_list|,
name|reduceValues
argument_list|,
name|outputColumnNames
argument_list|,
literal|false
argument_list|,
name|tag
argument_list|,
name|partitionCols
argument_list|,
name|order
argument_list|,
name|numReducers
argument_list|,
name|acidOperation
argument_list|)
expr_stmt|;
block|}
name|ReduceSinkOperator
name|rsOp
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|rsDesc
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|outputColumns
argument_list|)
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|keyColNames
init|=
name|rsDesc
operator|.
name|getOutputKeyColumnNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyColNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|colExprMap
operator|.
name|put
argument_list|(
name|Utilities
operator|.
name|ReduceField
operator|.
name|KEY
operator|+
literal|"."
operator|+
name|keyColNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|reduceKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|valColNames
init|=
name|rsDesc
operator|.
name|getOutputValueColumnNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valColNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|colExprMap
operator|.
name|put
argument_list|(
name|Utilities
operator|.
name|ReduceField
operator|.
name|VALUE
operator|+
literal|"."
operator|+
name|valColNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|reduceValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rsOp
operator|.
name|setValueIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|rsOp
operator|.
name|setColumnExprMap
argument_list|(
name|colExprMap
argument_list|)
expr_stmt|;
name|rsOp
operator|.
name|setInputAliases
argument_list|(
name|input
operator|.
name|getSchema
argument_list|()
operator|.
name|getColumnNames
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|input
operator|.
name|getSchema
argument_list|()
operator|.
name|getColumnNames
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generated "
operator|+
name|rsOp
operator|+
literal|" with row schema: ["
operator|+
name|rsOp
operator|.
name|getSchema
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
name|rsOp
return|;
block|}
specifier|private
specifier|static
name|JoinOperator
name|genJoin
parameter_list|(
name|HiveJoin
name|hiveJoin
parameter_list|,
name|JoinPredicateInfo
name|joinPredInfo
parameter_list|,
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|children
parameter_list|,
name|ExprNodeDesc
index|[]
index|[]
name|joinKeys
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// Extract join type
name|JoinType
name|joinType
init|=
name|extractJoinType
argument_list|(
name|hiveJoin
argument_list|)
decl_stmt|;
comment|// NOTE: Currently binary joins only
name|JoinCondDesc
index|[]
name|joinCondns
init|=
operator|new
name|JoinCondDesc
index|[
literal|1
index|]
decl_stmt|;
name|joinCondns
index|[
literal|0
index|]
operator|=
operator|new
name|JoinCondDesc
argument_list|(
operator|new
name|JoinCond
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|joinType
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|outputColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputColumnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|hiveJoin
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
argument_list|>
index|[]
name|childOps
init|=
operator|new
name|Operator
index|[
name|children
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Byte
argument_list|>
name|reversedExprs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Byte
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|exprMap
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|colExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|posToAliasMap
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|outputPos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|ReduceSinkOperator
name|inputRS
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|children
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputRS
operator|.
name|getNumParent
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"RS should have single parent"
argument_list|)
throw|;
block|}
name|Operator
argument_list|<
name|?
argument_list|>
name|parent
init|=
name|inputRS
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ReduceSinkDesc
name|rsDesc
init|=
name|inputRS
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|int
index|[]
name|index
init|=
name|inputRS
operator|.
name|getValueIndex
argument_list|()
decl_stmt|;
name|Byte
name|tag
init|=
operator|(
name|byte
operator|)
name|rsDesc
operator|.
name|getTag
argument_list|()
decl_stmt|;
comment|// Semijoin
if|if
condition|(
name|joinType
operator|==
name|JoinType
operator|.
name|LEFTSEMI
operator|&&
name|pos
operator|!=
literal|0
condition|)
block|{
name|exprMap
operator|.
name|put
argument_list|(
name|tag
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|childOps
index|[
name|pos
index|]
operator|=
name|inputRS
expr_stmt|;
continue|continue;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|keyColNames
init|=
name|rsDesc
operator|.
name|getOutputKeyColumnNames
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|valColNames
init|=
name|rsDesc
operator|.
name|getOutputValueColumnNames
argument_list|()
decl_stmt|;
name|posToAliasMap
operator|.
name|put
argument_list|(
name|pos
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|inputRS
operator|.
name|getSchema
argument_list|()
operator|.
name|getTableNames
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|descriptors
init|=
name|buildBacktrackFromReduceSink
argument_list|(
name|outputPos
argument_list|,
name|outputColumnNames
argument_list|,
name|keyColNames
argument_list|,
name|valColNames
argument_list|,
name|index
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|parentColumns
init|=
name|parent
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ColumnInfo
name|info
init|=
operator|new
name|ColumnInfo
argument_list|(
name|parentColumns
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|info
operator|.
name|setInternalName
argument_list|(
name|outputColumnNames
operator|.
name|get
argument_list|(
name|outputPos
argument_list|)
argument_list|)
expr_stmt|;
name|outputColumns
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|reversedExprs
operator|.
name|put
argument_list|(
name|outputColumnNames
operator|.
name|get
argument_list|(
name|outputPos
argument_list|)
argument_list|,
name|tag
argument_list|)
expr_stmt|;
name|outputPos
operator|++
expr_stmt|;
block|}
name|exprMap
operator|.
name|put
argument_list|(
name|tag
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
name|descriptors
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|colExprMap
operator|.
name|putAll
argument_list|(
name|descriptors
argument_list|)
expr_stmt|;
name|childOps
index|[
name|pos
index|]
operator|=
name|inputRS
expr_stmt|;
block|}
name|boolean
name|noOuterJoin
init|=
name|joinType
operator|!=
name|JoinType
operator|.
name|FULLOUTER
operator|&&
name|joinType
operator|!=
name|JoinType
operator|.
name|LEFTOUTER
operator|&&
name|joinType
operator|!=
name|JoinType
operator|.
name|RIGHTOUTER
decl_stmt|;
name|JoinDesc
name|desc
init|=
operator|new
name|JoinDesc
argument_list|(
name|exprMap
argument_list|,
name|outputColumnNames
argument_list|,
name|noOuterJoin
argument_list|,
name|joinCondns
argument_list|,
name|joinKeys
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setReversedExprs
argument_list|(
name|reversedExprs
argument_list|)
expr_stmt|;
name|JoinOperator
name|joinOp
init|=
operator|(
name|JoinOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|desc
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|outputColumns
argument_list|)
argument_list|,
name|childOps
argument_list|)
decl_stmt|;
name|joinOp
operator|.
name|setColumnExprMap
argument_list|(
name|colExprMap
argument_list|)
expr_stmt|;
name|joinOp
operator|.
name|setPosToAliasMap
argument_list|(
name|posToAliasMap
argument_list|)
expr_stmt|;
comment|// TODO: null safes?
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generated "
operator|+
name|joinOp
operator|+
literal|" with row schema: ["
operator|+
name|joinOp
operator|.
name|getSchema
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
name|joinOp
return|;
block|}
specifier|private
specifier|static
name|JoinType
name|extractJoinType
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
comment|// UNIQUE
if|if
condition|(
name|join
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
return|return
name|JoinType
operator|.
name|UNIQUE
return|;
block|}
comment|// SEMIJOIN
if|if
condition|(
name|join
operator|.
name|isLeftSemiJoin
argument_list|()
condition|)
block|{
return|return
name|JoinType
operator|.
name|LEFTSEMI
return|;
block|}
comment|// OUTER AND INNER JOINS
name|JoinType
name|resultJoinType
decl_stmt|;
switch|switch
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
condition|)
block|{
case|case
name|FULL
case|:
name|resultJoinType
operator|=
name|JoinType
operator|.
name|FULLOUTER
expr_stmt|;
break|break;
case|case
name|LEFT
case|:
name|resultJoinType
operator|=
name|JoinType
operator|.
name|LEFTOUTER
expr_stmt|;
break|break;
case|case
name|RIGHT
case|:
name|resultJoinType
operator|=
name|JoinType
operator|.
name|RIGHTOUTER
expr_stmt|;
break|break;
default|default:
name|resultJoinType
operator|=
name|JoinType
operator|.
name|INNER
expr_stmt|;
break|break;
block|}
return|return
name|resultJoinType
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|buildBacktrackFromReduceSink
parameter_list|(
name|ReduceSinkOperator
name|rsOp
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|inputOp
parameter_list|)
block|{
return|return
name|buildBacktrackFromReduceSink
argument_list|(
literal|0
argument_list|,
name|inputOp
operator|.
name|getSchema
argument_list|()
operator|.
name|getColumnNames
argument_list|()
argument_list|,
name|rsOp
operator|.
name|getConf
argument_list|()
operator|.
name|getOutputKeyColumnNames
argument_list|()
argument_list|,
name|rsOp
operator|.
name|getConf
argument_list|()
operator|.
name|getOutputValueColumnNames
argument_list|()
argument_list|,
name|rsOp
operator|.
name|getValueIndex
argument_list|()
argument_list|,
name|inputOp
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|buildBacktrackFromReduceSink
parameter_list|(
name|int
name|initialPos
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|outputColumnNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|keyColNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|valueColNames
parameter_list|,
name|int
index|[]
name|index
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|inputOp
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|columnDescriptors
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ColumnInfo
name|info
init|=
operator|new
name|ColumnInfo
argument_list|(
name|inputOp
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|field
decl_stmt|;
if|if
condition|(
name|index
index|[
name|i
index|]
operator|>=
literal|0
condition|)
block|{
name|field
operator|=
name|Utilities
operator|.
name|ReduceField
operator|.
name|KEY
operator|+
literal|"."
operator|+
name|keyColNames
operator|.
name|get
argument_list|(
name|index
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|field
operator|=
name|Utilities
operator|.
name|ReduceField
operator|.
name|VALUE
operator|+
literal|"."
operator|+
name|valueColNames
operator|.
name|get
argument_list|(
operator|-
name|index
index|[
name|i
index|]
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|ExprNodeColumnDesc
name|desc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|info
operator|.
name|getType
argument_list|()
argument_list|,
name|field
argument_list|,
name|info
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|info
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|)
decl_stmt|;
name|columnDescriptors
operator|.
name|put
argument_list|(
name|outputColumnNames
operator|.
name|get
argument_list|(
name|initialPos
operator|+
name|i
argument_list|)
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
return|return
name|columnDescriptors
return|;
block|}
specifier|private
specifier|static
name|ExprNodeDesc
name|convertToExprNode
parameter_list|(
name|RexNode
name|rn
parameter_list|,
name|RelNode
name|inputRel
parameter_list|,
name|String
name|tabAlias
parameter_list|)
block|{
return|return
name|rn
operator|.
name|accept
argument_list|(
operator|new
name|ExprNodeConverter
argument_list|(
name|tabAlias
argument_list|,
name|inputRel
operator|.
name|getRowType
argument_list|()
argument_list|,
literal|false
argument_list|,
name|inputRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|createColInfos
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|input
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|cInfoLst
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnInfo
name|ci
range|:
name|input
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
control|)
block|{
name|cInfoLst
operator|.
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
name|ci
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|cInfoLst
return|;
block|}
specifier|private
specifier|static
name|Pair
argument_list|<
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|VirtualColumn
argument_list|>
argument_list|>
name|createColInfos
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|calciteExprs
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|hiveExprs
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|projNames
parameter_list|,
name|OpAttr
name|inpOpAf
parameter_list|)
block|{
if|if
condition|(
name|hiveExprs
operator|.
name|size
argument_list|()
operator|!=
name|projNames
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Column expressions list doesn't match Column Names list"
argument_list|)
throw|;
block|}
name|RexNode
name|rexN
decl_stmt|;
name|ExprNodeDesc
name|pe
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|colInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
name|VirtualColumn
name|vc
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|VirtualColumn
argument_list|>
name|newVColMap
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|VirtualColumn
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hiveExprs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|pe
operator|=
name|hiveExprs
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|rexN
operator|=
name|calciteExprs
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|vc
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|rexN
operator|instanceof
name|RexInputRef
condition|)
block|{
name|vc
operator|=
name|inpOpAf
operator|.
name|vcolMap
operator|.
name|get
argument_list|(
operator|(
operator|(
name|RexInputRef
operator|)
name|rexN
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|vc
operator|!=
literal|null
condition|)
block|{
name|newVColMap
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|vc
argument_list|)
expr_stmt|;
block|}
block|}
name|colInfos
operator|.
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
name|projNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|pe
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
name|inpOpAf
operator|.
name|tabAlias
argument_list|,
name|vc
operator|!=
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Pair
argument_list|<
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|VirtualColumn
argument_list|>
argument_list|>
argument_list|(
name|colInfos
argument_list|,
name|newVColMap
argument_list|)
return|;
block|}
block|}
end_class

end_unit

