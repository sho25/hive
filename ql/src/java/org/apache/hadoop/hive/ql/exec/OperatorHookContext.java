begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|OperatorHookContext
block|{
specifier|private
specifier|final
name|String
name|operatorName
decl_stmt|;
specifier|private
specifier|final
name|String
name|operatorId
decl_stmt|;
specifier|private
specifier|final
name|Object
name|currentRow
decl_stmt|;
specifier|private
specifier|final
name|int
name|parentTag
decl_stmt|;
specifier|private
name|Operator
name|operator
decl_stmt|;
specifier|public
name|OperatorHookContext
parameter_list|(
name|Operator
name|op
parameter_list|)
block|{
name|this
argument_list|(
name|op
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OperatorHookContext
parameter_list|(
name|Operator
name|op
parameter_list|,
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
block|{
name|this
argument_list|(
name|op
operator|.
name|getName
argument_list|()
argument_list|,
name|op
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|row
argument_list|,
name|tag
argument_list|)
expr_stmt|;
name|this
operator|.
name|operator
operator|=
name|op
expr_stmt|;
block|}
specifier|private
name|OperatorHookContext
parameter_list|(
name|String
name|opName
parameter_list|,
name|String
name|opId
parameter_list|,
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
block|{
name|operatorName
operator|=
name|opName
expr_stmt|;
name|operatorId
operator|=
name|opId
expr_stmt|;
name|currentRow
operator|=
name|row
expr_stmt|;
name|parentTag
operator|=
name|tag
expr_stmt|;
block|}
specifier|public
name|Operator
name|getOperator
parameter_list|()
block|{
return|return
name|operator
return|;
block|}
specifier|public
name|Operator
name|getParentOperator
parameter_list|()
block|{
name|List
argument_list|<
name|Operator
argument_list|>
name|parents
init|=
name|this
operator|.
name|operator
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
if|if
condition|(
name|parents
operator|==
literal|null
operator|||
name|parents
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
call|(
name|Operator
call|)
argument_list|(
name|this
operator|.
name|operator
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
name|this
operator|.
name|parentTag
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getOperatorName
parameter_list|()
block|{
return|return
name|operatorName
return|;
block|}
specifier|public
name|String
name|getOperatorId
parameter_list|()
block|{
return|return
name|operatorId
return|;
block|}
specifier|public
name|Object
name|getCurrentRow
parameter_list|()
block|{
return|return
name|currentRow
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"operatorName= "
operator|+
name|this
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|", id="
operator|+
name|this
operator|.
name|getOperatorId
argument_list|()
return|;
block|}
block|}
end_class

end_unit

