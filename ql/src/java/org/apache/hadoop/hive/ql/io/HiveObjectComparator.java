begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|HiveObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapredWork
import|;
end_import

begin_comment
comment|/**   * Comparator for WritableComparableHiveObjects  *   * We pass this in explicitly as a output key comparator so that we get a chance to  * initialize the comparator using the job configuration/Hive plan. This allows us  * to pick up the right deserializer (if we register with WritableComparator - we get  * no such shot).  *  * This class provides a sort implementation only. The grouping implementation uses  * the base compare() implementation - which just invokes compareTo() on the underlying  * WritableComparableHiveObject.  *  */
end_comment

begin_class
specifier|public
class|class
name|HiveObjectComparator
extends|extends
name|WritableComparator
implements|implements
name|Configurable
block|{
comment|// the serializer used to compare hive objects
specifier|protected
name|HiveObjectSerializer
name|hos
decl_stmt|;
specifier|protected
name|boolean
name|isTagged
decl_stmt|;
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected invocation"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|mapredWork
name|gWork
init|=
name|Utilities
operator|.
name|getMapRedWork
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|isTagged
operator|=
name|gWork
operator|.
name|getNeedsTagging
argument_list|()
expr_stmt|;
name|hos
operator|=
operator|new
name|NaiiveSerializer
argument_list|()
expr_stmt|;
block|}
specifier|public
name|HiveObjectComparator
parameter_list|(
name|Class
name|c
parameter_list|)
block|{
name|super
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HiveObjectComparator
parameter_list|()
block|{
name|this
argument_list|(
name|WritableComparableHiveObject
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * This is the interface used to sort WritableComparableHiveObjects    * If the objects are not tagged - then it's simple - we just sort them (for now)    * based on the serialized object. If it is tagged - then we need to use the    * serialized object as the higher order bits to sort on (so that grouping is    * maintained) and then use the tag to break the tie (so that things are ordered    * by tag in the same co-group    */
specifier|public
name|int
name|compare
parameter_list|(
name|byte
index|[]
name|b1
parameter_list|,
name|int
name|s1
parameter_list|,
name|int
name|l1
parameter_list|,
name|byte
index|[]
name|b2
parameter_list|,
name|int
name|s2
parameter_list|,
name|int
name|l2
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isTagged
condition|)
block|{
return|return
operator|(
name|hos
operator|.
name|compare
argument_list|(
name|b1
argument_list|,
name|s1
argument_list|,
name|l1
argument_list|,
name|b2
argument_list|,
name|s2
argument_list|,
name|l2
argument_list|)
operator|)
return|;
block|}
else|else
block|{
name|int
name|ret
init|=
name|hos
operator|.
name|compare
argument_list|(
name|b1
argument_list|,
name|s1
operator|+
literal|1
argument_list|,
name|l1
operator|-
literal|1
argument_list|,
name|b2
argument_list|,
name|s2
operator|+
literal|1
argument_list|,
name|l2
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
comment|// use tag to break tie
name|ret
operator|=
operator|(
call|(
name|int
call|)
argument_list|(
name|b1
index|[
name|s1
index|]
operator|&
literal|0xff
argument_list|)
operator|)
operator|-
operator|(
call|(
name|int
call|)
argument_list|(
name|b2
index|[
name|s2
index|]
operator|&
literal|0xff
argument_list|)
operator|)
expr_stmt|;
block|}
return|return
operator|(
name|ret
operator|)
return|;
block|}
block|}
block|}
end_class

end_unit

