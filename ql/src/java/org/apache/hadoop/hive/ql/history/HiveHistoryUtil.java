begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|history
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|history
operator|.
name|HiveHistory
operator|.
name|Listener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|history
operator|.
name|HiveHistory
operator|.
name|RecordTypes
import|;
end_import

begin_class
specifier|public
class|class
name|HiveHistoryUtil
block|{
comment|/**   * Parses history file and calls call back functions. Also look at   *  HiveHistoryViewer   *   * @param path   * @param l   * @throws IOException   */
specifier|public
specifier|static
name|void
name|parseHiveHistory
parameter_list|(
name|String
name|path
parameter_list|,
name|Listener
name|l
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|FileInputStream
name|fi
init|=
operator|new
name|FileInputStream
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|fi
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|line
init|=
literal|null
decl_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
comment|// if it does not end with " then it is line continuation
if|if
condition|(
operator|!
name|line
operator|.
name|trim
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|parseLine
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|buf
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{      }
block|}
block|}
specifier|private
specifier|static
specifier|final
name|String
name|KEY
init|=
literal|"(\\w+)"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VALUE
init|=
literal|"[[^\"]?]+"
decl_stmt|;
comment|// anything but a " in ""
specifier|private
specifier|static
specifier|final
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|KEY
operator|+
literal|"="
operator|+
literal|"\""
operator|+
name|VALUE
operator|+
literal|"\""
argument_list|)
decl_stmt|;
comment|// temp buffer for parsed dataa
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parseBuffer
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**   * Parse a single line of history.   *   * @param line   * @param l   * @throws IOException   */
specifier|private
specifier|static
name|void
name|parseLine
parameter_list|(
name|String
name|line
parameter_list|,
name|Listener
name|l
parameter_list|)
throws|throws
name|IOException
block|{
comment|// extract the record type
name|int
name|idx
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|String
name|recType
init|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|String
name|data
init|=
name|line
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|,
name|line
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|data
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|tuple
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|tuple
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|parseBuffer
operator|.
name|put
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
name|parts
index|[
literal|1
index|]
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|parts
index|[
literal|1
index|]
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|l
operator|.
name|handle
argument_list|(
name|RecordTypes
operator|.
name|valueOf
argument_list|(
name|recType
argument_list|)
argument_list|,
name|parseBuffer
argument_list|)
expr_stmt|;
name|parseBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

