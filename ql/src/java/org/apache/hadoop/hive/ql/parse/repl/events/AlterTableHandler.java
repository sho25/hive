begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|events
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|AlterTableMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|EximUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ReplicationSemanticAnalyzer
operator|.
name|DUMPTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ReplicationSemanticAnalyzer
operator|.
name|DumpMetaData
import|;
end_import

begin_class
specifier|public
class|class
name|AlterTableHandler
extends|extends
name|AbstractHandler
block|{
specifier|private
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|before
decl_stmt|;
specifier|private
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|after
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isTruncateOp
decl_stmt|;
specifier|private
specifier|final
name|Scenario
name|scenario
decl_stmt|;
specifier|private
enum|enum
name|Scenario
block|{
name|ALTER
block|{
annotation|@
name|Override
name|DUMPTYPE
name|dumpType
parameter_list|()
block|{
return|return
name|DUMPTYPE
operator|.
name|EVENT_ALTER_TABLE
return|;
block|}
block|}
block|,
name|RENAME
block|{
annotation|@
name|Override
name|DUMPTYPE
name|dumpType
parameter_list|()
block|{
return|return
name|DUMPTYPE
operator|.
name|EVENT_RENAME_TABLE
return|;
block|}
block|}
block|,
name|TRUNCATE
block|{
annotation|@
name|Override
name|DUMPTYPE
name|dumpType
parameter_list|()
block|{
return|return
name|DUMPTYPE
operator|.
name|EVENT_TRUNCATE_TABLE
return|;
block|}
block|}
block|;
specifier|abstract
name|DUMPTYPE
name|dumpType
parameter_list|()
function_decl|;
block|}
name|AlterTableHandler
parameter_list|(
name|NotificationEvent
name|event
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|AlterTableMessage
name|atm
init|=
name|deserializer
operator|.
name|getAlterTableMessage
argument_list|(
name|event
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|before
operator|=
name|atm
operator|.
name|getTableObjBefore
argument_list|()
expr_stmt|;
name|after
operator|=
name|atm
operator|.
name|getTableObjAfter
argument_list|()
expr_stmt|;
name|isTruncateOp
operator|=
name|atm
operator|.
name|getIsTruncateOp
argument_list|()
expr_stmt|;
name|scenario
operator|=
name|scenarioType
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Scenario
name|scenarioType
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|before
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|after
parameter_list|)
block|{
if|if
condition|(
name|before
operator|.
name|getDbName
argument_list|()
operator|.
name|equals
argument_list|(
name|after
operator|.
name|getDbName
argument_list|()
argument_list|)
operator|&&
name|before
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|after
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|isTruncateOp
condition|?
name|Scenario
operator|.
name|TRUNCATE
else|:
name|Scenario
operator|.
name|ALTER
return|;
block|}
else|else
block|{
return|return
name|Scenario
operator|.
name|RENAME
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Context
name|withinContext
parameter_list|)
throws|throws
name|Exception
block|{
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing#{} ALTER_TABLE message : {}"
argument_list|,
name|fromEventId
argument_list|()
argument_list|,
name|event
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Scenario
operator|.
name|ALTER
operator|==
name|scenario
condition|)
block|{
name|withinContext
operator|.
name|replicationSpec
operator|.
name|setIsMetadataOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Table
name|qlMdTableAfter
init|=
operator|new
name|Table
argument_list|(
name|after
argument_list|)
decl_stmt|;
name|Path
name|metaDataPath
init|=
operator|new
name|Path
argument_list|(
name|withinContext
operator|.
name|eventRoot
argument_list|,
name|EximUtil
operator|.
name|METADATA_NAME
argument_list|)
decl_stmt|;
name|EximUtil
operator|.
name|createExportDump
argument_list|(
name|metaDataPath
operator|.
name|getFileSystem
argument_list|(
name|withinContext
operator|.
name|hiveConf
argument_list|)
argument_list|,
name|metaDataPath
argument_list|,
name|qlMdTableAfter
argument_list|,
literal|null
argument_list|,
name|withinContext
operator|.
name|replicationSpec
argument_list|)
expr_stmt|;
block|}
name|DumpMetaData
name|dmd
init|=
name|withinContext
operator|.
name|createDmd
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|dmd
operator|.
name|setPayload
argument_list|(
name|event
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|dmd
operator|.
name|write
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DUMPTYPE
name|dumpType
parameter_list|()
block|{
return|return
name|scenario
operator|.
name|dumpType
argument_list|()
return|;
block|}
block|}
end_class

end_unit

