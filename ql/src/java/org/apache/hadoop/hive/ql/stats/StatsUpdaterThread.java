begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidReaderWriteIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|RawStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|RawStoreProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetValidWriteIdsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchTxnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
operator|.
name|StatsUpdateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnCommonUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|StatsUpdaterThread
extends|extends
name|Thread
implements|implements
name|MetaStoreThread
block|{
specifier|public
specifier|static
specifier|final
name|String
name|SKIP_STATS_AUTOUPDATE_PROPERTY
init|=
literal|"skip.stats.autoupdate"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WORKER_NAME_PREFIX
init|=
literal|"Stats updater worker "
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StatsUpdaterThread
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|Configuration
name|conf
decl_stmt|;
specifier|protected
name|int
name|threadId
decl_stmt|;
specifier|protected
name|AtomicBoolean
name|stop
decl_stmt|;
specifier|protected
name|AtomicBoolean
name|looped
decl_stmt|;
specifier|private
name|RawStore
name|rs
decl_stmt|;
specifier|private
name|TxnStore
name|txnHandler
decl_stmt|;
comment|/** Full tables, and partitions that currently have analyze commands queued or in progress. */
specifier|private
name|ConcurrentHashMap
argument_list|<
name|TableName
argument_list|,
name|Boolean
argument_list|>
name|tablesInProgress
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|partsInProgress
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|AtomicInteger
name|itemsInProgress
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Configuration
comment|/** Whether to only update stats that already exist and are out of date. */
specifier|private
name|boolean
name|isExistingOnly
decl_stmt|,
name|areTxnStatsEnabled
decl_stmt|;
specifier|private
name|long
name|noUpdatesWaitMs
decl_stmt|;
specifier|private
name|int
name|batchSize
decl_stmt|;
comment|// Worker threads stuff
specifier|private
name|BlockingQueue
argument_list|<
name|AnalyzeWork
argument_list|>
name|workQueue
decl_stmt|;
specifier|private
name|Thread
index|[]
name|workers
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|StatsUpdateMode
name|mode
init|=
name|StatsUpdateMode
operator|.
name|valueOf
argument_list|(
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|STATS_AUTO_UPDATE
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|ALL
case|:
name|this
operator|.
name|isExistingOnly
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|EXISTING
case|:
name|this
operator|.
name|isExistingOnly
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unexpected mode "
operator|+
name|mode
argument_list|)
throw|;
block|}
name|noUpdatesWaitMs
operator|=
name|MetastoreConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|STATS_AUTO_UPDATE_NOOP_WAIT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|areTxnStatsEnabled
operator|=
name|MetastoreConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_TXN_STATS_ENABLED
argument_list|)
expr_stmt|;
name|batchSize
operator|=
name|MetastoreConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|BATCH_RETRIEVE_MAX
argument_list|)
expr_stmt|;
name|int
name|workerCount
init|=
name|MetastoreConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|STATS_AUTO_UPDATE_WORKER_COUNT
argument_list|)
decl_stmt|;
if|if
condition|(
name|workerCount
operator|<=
literal|0
condition|)
block|{
name|workerCount
operator|=
literal|1
expr_stmt|;
block|}
name|workers
operator|=
operator|new
name|Thread
index|[
name|workerCount
index|]
expr_stmt|;
comment|// Don't store too many items; if the queue is full we'll block the checker thread.
comment|// Since the worker count determines how many queries can be running in parallel, it makes
comment|// no sense to produce more work if the backlog is getting too long.
name|workQueue
operator|=
operator|new
name|ArrayBlockingQueue
argument_list|<
name|AnalyzeWork
argument_list|>
argument_list|(
name|workerCount
operator|*
literal|3
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setThreadId
parameter_list|(
name|int
name|threadId
parameter_list|)
block|{
name|this
operator|.
name|threadId
operator|=
name|threadId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|AtomicBoolean
name|stop
parameter_list|,
name|AtomicBoolean
name|looped
parameter_list|)
throws|throws
name|MetaException
block|{
name|this
operator|.
name|stop
operator|=
name|stop
expr_stmt|;
name|this
operator|.
name|looped
operator|=
name|looped
expr_stmt|;
name|setPriority
argument_list|(
name|MIN_PRIORITY
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|user
init|=
literal|"anonymous"
decl_stmt|;
try|try
block|{
name|user
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot determine the current user; executing as anonymous"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|txnHandler
operator|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rs
operator|=
name|RawStoreProxy
operator|.
name|getProxy
argument_list|(
name|conf
argument_list|,
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|RAW_STORE_IMPL
argument_list|)
argument_list|,
name|threadId
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|workers
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|workers
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|WorkerRunnable
argument_list|(
name|conf
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|workers
index|[
name|i
index|]
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|workers
index|[
name|i
index|]
operator|.
name|setName
argument_list|(
name|WORKER_NAME_PREFIX
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stats updater thread started"
argument_list|)
expr_stmt|;
name|startWorkers
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
name|boolean
name|hadUpdates
init|=
name|runOneIteration
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|hadUpdates
condition|?
literal|0
else|:
name|noUpdatesWaitMs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stats updater thread was interrupted and will now exit"
argument_list|)
expr_stmt|;
name|stopWorkers
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Stats updater thread was stopped and will now exit"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|void
name|startWorkers
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|workers
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stats updater worker thread "
operator|+
name|workers
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|" started"
argument_list|)
expr_stmt|;
name|workers
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
name|boolean
name|runOneIteration
parameter_list|()
block|{
name|List
argument_list|<
name|TableName
argument_list|>
name|fullTableNames
decl_stmt|;
try|try
block|{
name|fullTableNames
operator|=
name|getTablesToCheck
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Stats updater thread cannot retrieve tables and will now exit"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|stopWorkers
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing {}"
argument_list|,
name|fullTableNames
argument_list|)
expr_stmt|;
name|boolean
name|hadUpdates
init|=
literal|false
decl_stmt|;
for|for
control|(
name|TableName
name|fullTableName
range|:
name|fullTableNames
control|)
block|{
try|try
block|{
name|List
argument_list|<
name|AnalyzeWork
argument_list|>
name|commands
init|=
name|processOneTable
argument_list|(
name|fullTableName
argument_list|)
decl_stmt|;
name|hadUpdates
operator|=
name|hadUpdates
operator|||
name|commands
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
name|commands
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AnalyzeWork
name|req
range|:
name|commands
control|)
block|{
name|markAnalyzeInProgress
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|workQueue
operator|.
name|put
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to process "
operator|+
name|fullTableName
operator|+
literal|"; skipping for now"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|hadUpdates
return|;
block|}
specifier|private
name|void
name|stopWorkers
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|workers
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|workers
index|[
name|i
index|]
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|AnalyzeWork
argument_list|>
name|processOneTable
parameter_list|(
name|TableName
name|fullTableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchTxnException
throws|,
name|NoSuchObjectException
block|{
if|if
condition|(
name|isAnalyzeTableInProgress
argument_list|(
name|fullTableName
argument_list|)
condition|)
return|return
literal|null
return|;
name|String
name|cat
init|=
name|fullTableName
operator|.
name|getCat
argument_list|()
decl_stmt|,
name|db
init|=
name|fullTableName
operator|.
name|getDb
argument_list|()
decl_stmt|,
name|tbl
init|=
name|fullTableName
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|Table
name|table
init|=
name|rs
operator|.
name|getTable
argument_list|(
name|cat
argument_list|,
name|db
argument_list|,
name|tbl
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing table {}"
argument_list|,
name|table
argument_list|)
expr_stmt|;
comment|// Check if the table should be skipped.
name|String
name|skipParam
init|=
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|SKIP_STATS_AUTOUPDATE_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|skipParam
argument_list|)
condition|)
return|return
literal|null
return|;
comment|// Note: ideally we should take a lock here to pretend to be a real reader.
comment|//       For now, this check is going to have race potential; it may run a spurious analyze.
name|String
name|writeIdString
init|=
literal|null
decl_stmt|;
name|boolean
name|isTxn
init|=
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|isTxn
condition|)
block|{
if|if
condition|(
operator|!
name|areTxnStatsEnabled
condition|)
return|return
literal|null
return|;
comment|// Skip transactional tables.
name|ValidReaderWriteIdList
name|writeIds
init|=
name|getWriteIds
argument_list|(
name|fullTableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeIds
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot get writeIds for transactional table "
operator|+
name|fullTableName
operator|+
literal|"; skipping"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|writeIdString
operator|=
name|writeIds
operator|.
name|writeToString
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|allCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getColsSize
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
control|)
block|{
name|allCols
operator|.
name|add
argument_list|(
name|fs
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|allCols
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|.
name|getPartitionKeysSize
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|table
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colsToUpdate
init|=
literal|null
decl_stmt|;
name|long
name|writeId
init|=
name|isTxn
condition|?
name|table
operator|.
name|getWriteId
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|isExistingOnly
condition|)
block|{
comment|// Get the existing stats, including the txn state if any, to see if we need to update.
name|colsToUpdate
operator|=
name|getExistingNonPartTableStatsToUpdate
argument_list|(
name|fullTableName
argument_list|,
name|cat
argument_list|,
name|db
argument_list|,
name|tbl
argument_list|,
name|params
argument_list|,
name|writeId
argument_list|,
name|allCols
argument_list|,
name|writeIdString
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|colsToUpdate
operator|=
name|getAnyStatsToUpdate
argument_list|(
name|db
argument_list|,
name|tbl
argument_list|,
name|allCols
argument_list|,
name|params
argument_list|,
name|writeId
argument_list|,
name|writeIdString
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Columns to update are {}; existing only: {}, out of: {} based on {}"
argument_list|,
name|colsToUpdate
argument_list|,
name|isExistingOnly
argument_list|,
name|allCols
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|colsToUpdate
operator|==
literal|null
operator|||
name|colsToUpdate
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
comment|// No update necessary.
block|}
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|AnalyzeWork
argument_list|(
name|fullTableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|allCols
operator|.
name|size
argument_list|()
operator|==
name|colsToUpdate
operator|.
name|size
argument_list|()
condition|?
literal|null
else|:
name|colsToUpdate
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partsToAnalyze
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colsForAllParts
init|=
name|findPartitionsToAnalyze
argument_list|(
name|fullTableName
argument_list|,
name|cat
argument_list|,
name|db
argument_list|,
name|tbl
argument_list|,
name|allCols
argument_list|,
name|partsToAnalyze
argument_list|,
name|writeIdString
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Columns to update are {} for all partitions; {} individual partitions."
operator|+
literal|" Existing only: {}, out of: {}"
argument_list|,
name|colsForAllParts
argument_list|,
name|partsToAnalyze
operator|.
name|size
argument_list|()
argument_list|,
name|isExistingOnly
argument_list|,
name|allCols
argument_list|)
expr_stmt|;
if|if
condition|(
name|colsForAllParts
operator|==
literal|null
operator|&&
name|partsToAnalyze
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
comment|// No partitions need update.
block|}
if|if
condition|(
name|colsForAllParts
operator|!=
literal|null
condition|)
block|{
comment|// We can update all partitions with a single analyze query.
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|AnalyzeWork
argument_list|(
name|fullTableName
argument_list|,
literal|null
argument_list|,
name|buildPartColStr
argument_list|(
name|table
argument_list|)
argument_list|,
name|colsForAllParts
argument_list|)
argument_list|)
return|;
block|}
name|List
argument_list|<
name|AnalyzeWork
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|partsToAnalyze
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|partsToAnalyze
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding analyze work for {}"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|AnalyzeWork
argument_list|(
name|fullTableName
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
literal|null
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|findPartitionsToAnalyze
parameter_list|(
name|TableName
name|fullTableName
parameter_list|,
name|String
name|cat
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|tbl
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|allCols
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partsToAnalyze
parameter_list|,
name|String
name|writeIdString
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
comment|// TODO: ideally when col-stats-accurate stuff is stored in some sane structure, this should
comment|//       retrieve partsToUpdate in a single query; no checking partition params in java.
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|colsPerPartition
init|=
literal|null
decl_stmt|;
name|boolean
name|isAllParts
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|isExistingOnly
condition|)
block|{
comment|// Make sure the number of partitions we get, and the number of stats objects, is consistent.
name|rs
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|boolean
name|isOk
init|=
literal|false
decl_stmt|;
try|try
block|{
name|colsPerPartition
operator|=
name|rs
operator|.
name|getPartitionColsWithStats
argument_list|(
name|cat
argument_list|,
name|db
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|partNames
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|colsPerPartition
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|partitionCount
init|=
name|rs
operator|.
name|getNumPartitionsByFilter
argument_list|(
name|cat
argument_list|,
name|db
argument_list|,
name|tbl
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|isAllParts
operator|=
name|partitionCount
operator|==
name|partNames
operator|.
name|size
argument_list|()
expr_stmt|;
name|isOk
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|isOk
condition|)
block|{
name|rs
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rs
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|partNames
operator|=
name|rs
operator|.
name|listPartitionNames
argument_list|(
name|cat
argument_list|,
name|db
argument_list|,
name|tbl
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|isAllParts
operator|=
literal|true
expr_stmt|;
block|}
name|Table
name|t
init|=
name|rs
operator|.
name|getTable
argument_list|(
name|cat
argument_list|,
name|db
argument_list|,
name|tbl
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|currentBatch
init|=
literal|null
decl_stmt|;
name|int
name|nextBatchStart
init|=
literal|0
decl_stmt|,
name|nextIxInBatch
init|=
operator|-
literal|1
decl_stmt|,
name|currentBatchStart
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colsToUpdateForAll
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|currentBatch
operator|==
literal|null
operator|||
name|nextIxInBatch
operator|==
name|currentBatch
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|nextBatchStart
operator|>=
name|partNames
operator|.
name|size
argument_list|()
condition|)
block|{
break|break;
block|}
name|int
name|nextBatchEnd
init|=
name|Math
operator|.
name|min
argument_list|(
name|partNames
operator|.
name|size
argument_list|()
argument_list|,
name|nextBatchStart
operator|+
name|this
operator|.
name|batchSize
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|currentNames
init|=
name|partNames
operator|.
name|subList
argument_list|(
name|nextBatchStart
argument_list|,
name|nextBatchEnd
argument_list|)
decl_stmt|;
name|currentBatchStart
operator|=
name|nextBatchStart
expr_stmt|;
name|nextBatchStart
operator|=
name|nextBatchEnd
expr_stmt|;
try|try
block|{
name|currentBatch
operator|=
name|rs
operator|.
name|getPartitionsByNames
argument_list|(
name|cat
argument_list|,
name|db
argument_list|,
name|tbl
argument_list|,
name|currentNames
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to get partitions for "
operator|+
name|fullTableName
operator|+
literal|", skipping some partitions"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|currentBatch
operator|=
literal|null
expr_stmt|;
continue|continue;
block|}
name|nextIxInBatch
operator|=
literal|0
expr_stmt|;
block|}
name|int
name|currentIxInBatch
init|=
name|nextIxInBatch
operator|++
decl_stmt|;
name|Partition
name|part
init|=
name|currentBatch
operator|.
name|get
argument_list|(
name|currentIxInBatch
argument_list|)
decl_stmt|;
name|String
name|partName
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|t
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing partition ({} in batch), {}"
argument_list|,
name|currentIxInBatch
argument_list|,
name|partName
argument_list|)
expr_stmt|;
comment|// Skip the partitions in progress, and the ones for which stats update is disabled.
comment|// We could filter the skipped partititons out as part of the initial names query,
comment|// but we assume it's extremely rare for individual partitions.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|part
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|String
name|skipParam
init|=
name|params
operator|.
name|get
argument_list|(
name|SKIP_STATS_AUTOUPDATE_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|isAnalyzePartInProgress
argument_list|(
name|fullTableName
argument_list|,
name|partName
argument_list|)
operator|||
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|skipParam
argument_list|)
condition|)
block|{
if|if
condition|(
name|isAllParts
condition|)
block|{
name|addPreviousPartitions
argument_list|(
name|t
argument_list|,
name|partNames
argument_list|,
name|currentBatchStart
argument_list|,
name|currentBatch
argument_list|,
name|currentIxInBatch
argument_list|,
name|colsToUpdateForAll
argument_list|,
name|partsToAnalyze
argument_list|)
expr_stmt|;
block|}
name|isAllParts
operator|=
literal|false
expr_stmt|;
continue|continue;
block|}
comment|// Find which columns we need to update for this partition, if any.
name|List
argument_list|<
name|String
argument_list|>
name|colsToMaybeUpdate
init|=
name|allCols
decl_stmt|;
if|if
condition|(
name|isExistingOnly
condition|)
block|{
name|colsToMaybeUpdate
operator|=
name|colsPerPartition
operator|.
name|get
argument_list|(
name|partName
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|colsToMaybeUpdate
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|colsToUpdate
init|=
name|getAnyStatsToUpdate
argument_list|(
name|db
argument_list|,
name|tbl
argument_list|,
name|colsToMaybeUpdate
argument_list|,
name|params
argument_list|,
name|writeIdString
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|part
operator|.
name|getWriteId
argument_list|()
argument_list|,
name|writeIdString
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updating {} based on {} and {}"
argument_list|,
name|colsToUpdate
argument_list|,
name|colsToMaybeUpdate
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|colsToUpdate
operator|==
literal|null
operator|||
name|colsToUpdate
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|isAllParts
condition|)
block|{
name|addPreviousPartitions
argument_list|(
name|t
argument_list|,
name|partNames
argument_list|,
name|currentBatchStart
argument_list|,
name|currentBatch
argument_list|,
name|currentIxInBatch
argument_list|,
name|colsToUpdateForAll
argument_list|,
name|partsToAnalyze
argument_list|)
expr_stmt|;
block|}
name|isAllParts
operator|=
literal|false
expr_stmt|;
continue|continue;
block|}
comment|// If issuing a query for all partitions, verify that we need update the same columns.
comment|// TODO: for non columnar we don't need to do this... might as well update all stats.
if|if
condition|(
name|isAllParts
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|newCols
init|=
name|verifySameColumnsForAllParts
argument_list|(
name|colsToUpdateForAll
argument_list|,
name|colsToUpdate
argument_list|)
decl_stmt|;
if|if
condition|(
name|newCols
operator|==
literal|null
condition|)
block|{
name|isAllParts
operator|=
literal|false
expr_stmt|;
name|addPreviousPartitions
argument_list|(
name|t
argument_list|,
name|partNames
argument_list|,
name|currentBatchStart
argument_list|,
name|currentBatch
argument_list|,
name|currentIxInBatch
argument_list|,
name|colsToUpdateForAll
argument_list|,
name|partsToAnalyze
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colsToUpdateForAll
operator|==
literal|null
condition|)
block|{
name|colsToUpdateForAll
operator|=
name|newCols
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isAllParts
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Adding {}, {}"
argument_list|,
name|partName
argument_list|,
name|colsToUpdate
argument_list|)
expr_stmt|;
name|partsToAnalyze
operator|.
name|put
argument_list|(
name|partName
argument_list|,
name|colsToUpdate
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|isAllParts
condition|?
name|colsToUpdateForAll
else|:
literal|null
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|verifySameColumnsForAllParts
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|colsToUpdateForAll
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colsToUpdate
parameter_list|)
block|{
if|if
condition|(
name|colsToUpdateForAll
operator|==
literal|null
condition|)
block|{
return|return
name|colsToUpdate
return|;
block|}
if|if
condition|(
name|colsToUpdate
operator|.
name|size
argument_list|()
operator|!=
name|colsToUpdateForAll
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Assumes the lists are sorted.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|colsToUpdateForAll
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|colsToUpdate
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|colsToUpdateForAll
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|colsToUpdateForAll
return|;
block|}
specifier|private
name|void
name|addPreviousPartitions
parameter_list|(
name|Table
name|t
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|allPartNames
parameter_list|,
name|int
name|currentBatchStart
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|currentBatch
parameter_list|,
name|int
name|currentIxInBatch
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|cols
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partsToAnalyze
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// Add all the names for previous batches.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currentBatchStart
condition|;
operator|++
name|i
control|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Adding previous {}, {}"
argument_list|,
name|allPartNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|cols
argument_list|)
expr_stmt|;
name|partsToAnalyze
operator|.
name|put
argument_list|(
name|allPartNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|cols
argument_list|)
expr_stmt|;
block|}
comment|// Current match may be out of order w.r.t. the global name list, so add specific parts.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currentIxInBatch
condition|;
operator|++
name|i
control|)
block|{
name|String
name|name
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|t
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|currentBatch
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Adding previous {}, {}"
argument_list|,
name|name
argument_list|,
name|cols
argument_list|)
expr_stmt|;
name|partsToAnalyze
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|cols
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|buildPartColStr
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
name|String
name|partColStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|table
operator|.
name|getPartitionKeysSize
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|partColStr
operator|+=
literal|","
expr_stmt|;
block|}
name|partColStr
operator|+=
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|partColStr
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getExistingNonPartTableStatsToUpdate
parameter_list|(
name|TableName
name|fullTableName
parameter_list|,
name|String
name|cat
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|tbl
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|long
name|statsWriteId
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|allCols
parameter_list|,
name|String
name|writeIdString
parameter_list|)
throws|throws
name|MetaException
block|{
name|ColumnStatistics
name|existingStats
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Note: this should NOT do txn verification - we want to get outdated stats, to
comment|//       see if we need to update anything.
name|existingStats
operator|=
name|rs
operator|.
name|getTableColumnStatistics
argument_list|(
name|cat
argument_list|,
name|db
argument_list|,
name|tbl
argument_list|,
name|allCols
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot retrieve existing stats, skipping "
operator|+
name|fullTableName
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// TODO: we should probably skip updating if writeId is from an active txn
name|boolean
name|isTxnValid
init|=
operator|(
name|writeIdString
operator|==
literal|null
operator|)
operator|||
name|ObjectStore
operator|.
name|isCurrentStatsValidForTheQuery
argument_list|(
name|params
argument_list|,
name|statsWriteId
argument_list|,
name|writeIdString
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|getExistingStatsToUpdate
argument_list|(
name|existingStats
argument_list|,
name|params
argument_list|,
name|isTxnValid
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getExistingStatsToUpdate
parameter_list|(
name|ColumnStatistics
name|existingStats
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|boolean
name|isTxnValid
parameter_list|)
block|{
name|boolean
name|hasAnyAccurate
init|=
name|isTxnValid
operator|&&
name|StatsSetupConst
operator|.
name|areBasicStatsUptoDate
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colsToUpdate
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|obj
range|:
name|existingStats
operator|.
name|getStatsObj
argument_list|()
control|)
block|{
name|String
name|col
init|=
name|obj
operator|.
name|getColName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hasAnyAccurate
operator|||
operator|!
name|StatsSetupConst
operator|.
name|areColumnStatsUptoDate
argument_list|(
name|params
argument_list|,
name|col
argument_list|)
condition|)
block|{
name|colsToUpdate
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|colsToUpdate
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getAnyStatsToUpdate
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|tbl
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|allCols
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|long
name|statsWriteId
parameter_list|,
name|String
name|writeIdString
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// Note: we only run "for columns" command and assume no basic stats means no col stats.
if|if
condition|(
operator|!
name|StatsSetupConst
operator|.
name|areBasicStatsUptoDate
argument_list|(
name|params
argument_list|)
condition|)
block|{
return|return
name|allCols
return|;
block|}
comment|// TODO: we should probably skip updating if writeId is from an active txn
if|if
condition|(
name|writeIdString
operator|!=
literal|null
operator|&&
operator|!
name|ObjectStore
operator|.
name|isCurrentStatsValidForTheQuery
argument_list|(
name|params
argument_list|,
name|statsWriteId
argument_list|,
name|writeIdString
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return
name|allCols
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|colsToUpdate
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|col
range|:
name|allCols
control|)
block|{
if|if
condition|(
operator|!
name|StatsSetupConst
operator|.
name|areColumnStatsUptoDate
argument_list|(
name|params
argument_list|,
name|col
argument_list|)
condition|)
block|{
name|colsToUpdate
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|colsToUpdate
return|;
block|}
specifier|private
name|List
argument_list|<
name|TableName
argument_list|>
name|getTablesToCheck
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
if|if
condition|(
name|isExistingOnly
condition|)
block|{
try|try
block|{
return|return
name|rs
operator|.
name|getTableNamesWithStats
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error from getTablesWithStats, getting all the tables"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rs
operator|.
name|getAllTableNamesForStats
argument_list|()
return|;
block|}
specifier|private
name|ValidReaderWriteIdList
name|getWriteIds
parameter_list|(
name|TableName
name|fullTableName
parameter_list|)
throws|throws
name|NoSuchTxnException
throws|,
name|MetaException
block|{
comment|// TODO: acid utils don't support catalogs
name|GetValidWriteIdsRequest
name|req
init|=
operator|new
name|GetValidWriteIdsRequest
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|fullTableName
operator|.
name|getDbTable
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|TxnCommonUtils
operator|.
name|createValidReaderWriteIdList
argument_list|(
name|txnHandler
operator|.
name|getValidWriteIds
argument_list|(
name|req
argument_list|)
operator|.
name|getTblValidWriteIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|markAnalyzeInProgress
parameter_list|(
name|AnalyzeWork
name|req
parameter_list|)
block|{
if|if
condition|(
name|req
operator|.
name|partName
operator|==
literal|null
condition|)
block|{
name|Boolean
name|old
init|=
name|tablesInProgress
operator|.
name|putIfAbsent
argument_list|(
name|req
operator|.
name|tableName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"The table was added to progress twice: "
operator|+
name|req
operator|.
name|tableName
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|String
name|partName
init|=
name|req
operator|.
name|makeFullPartName
argument_list|()
decl_stmt|;
name|Boolean
name|old
init|=
name|partsInProgress
operator|.
name|putIfAbsent
argument_list|(
name|partName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"The partition was added to progress twice: "
operator|+
name|partName
argument_list|)
throw|;
block|}
block|}
name|itemsInProgress
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|markAnalyzeDone
parameter_list|(
name|AnalyzeWork
name|req
parameter_list|)
block|{
if|if
condition|(
name|req
operator|.
name|partName
operator|==
literal|null
condition|)
block|{
name|Boolean
name|old
init|=
name|tablesInProgress
operator|.
name|remove
argument_list|(
name|req
operator|.
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"The table was not in progress: "
operator|+
name|req
operator|.
name|tableName
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|String
name|partName
init|=
name|req
operator|.
name|makeFullPartName
argument_list|()
decl_stmt|;
name|Boolean
name|old
init|=
name|partsInProgress
operator|.
name|remove
argument_list|(
name|partName
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Partition was not in progress: "
operator|+
name|partName
argument_list|)
throw|;
block|}
block|}
comment|// This is used for tests where there's always just one batch of work and we do the
comment|// checks after the batch, so the check will only come at the end of queueing.
name|int
name|remaining
init|=
name|itemsInProgress
operator|.
name|decrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|remaining
operator|==
literal|0
condition|)
block|{
synchronized|synchronized
init|(
name|itemsInProgress
init|)
block|{
name|itemsInProgress
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|isAnalyzeTableInProgress
parameter_list|(
name|TableName
name|fullTableName
parameter_list|)
block|{
return|return
name|tablesInProgress
operator|.
name|containsKey
argument_list|(
name|fullTableName
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isAnalyzePartInProgress
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|)
block|{
return|return
name|partsInProgress
operator|.
name|containsKey
argument_list|(
name|makeFullPartName
argument_list|(
name|tableName
argument_list|,
name|partName
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|makeFullPartName
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|)
block|{
return|return
name|tableName
operator|+
literal|"/"
operator|+
name|partName
return|;
block|}
specifier|private
specifier|final
specifier|static
class|class
name|AnalyzeWork
block|{
name|TableName
name|tableName
decl_stmt|;
name|String
name|partName
decl_stmt|,
name|allParts
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cols
decl_stmt|;
specifier|public
name|AnalyzeWork
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|String
name|allParts
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|cols
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|partName
operator|=
name|partName
expr_stmt|;
name|this
operator|.
name|allParts
operator|=
name|allParts
expr_stmt|;
name|this
operator|.
name|cols
operator|=
name|cols
expr_stmt|;
block|}
specifier|public
name|String
name|makeFullPartName
parameter_list|()
block|{
return|return
name|StatsUpdaterThread
operator|.
name|makeFullPartName
argument_list|(
name|tableName
argument_list|,
name|partName
argument_list|)
return|;
block|}
specifier|public
name|String
name|buildCommand
parameter_list|()
block|{
comment|// Catalogs cannot be parsed as part of the query. Seems to be a bug.
name|String
name|cmd
init|=
literal|"analyze table "
operator|+
name|tableName
operator|.
name|getDb
argument_list|()
operator|+
literal|"."
operator|+
name|tableName
operator|.
name|getTable
argument_list|()
decl_stmt|;
assert|assert
name|partName
operator|==
literal|null
operator|||
name|allParts
operator|==
literal|null
assert|;
if|if
condition|(
name|partName
operator|!=
literal|null
condition|)
block|{
name|cmd
operator|+=
literal|" partition("
operator|+
name|partName
operator|+
literal|")"
expr_stmt|;
block|}
if|if
condition|(
name|allParts
operator|!=
literal|null
condition|)
block|{
name|cmd
operator|+=
literal|" partition("
operator|+
name|allParts
operator|+
literal|")"
expr_stmt|;
block|}
name|cmd
operator|+=
literal|" compute statistics for columns"
expr_stmt|;
if|if
condition|(
name|cols
operator|!=
literal|null
condition|)
block|{
name|cmd
operator|+=
literal|" "
operator|+
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|cols
argument_list|)
expr_stmt|;
block|}
return|return
name|cmd
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"AnalyzeWork [tableName="
operator|+
name|tableName
operator|+
literal|", partName="
operator|+
name|partName
operator|+
literal|", allParts="
operator|+
name|allParts
operator|+
literal|", cols="
operator|+
name|cols
operator|+
literal|"]"
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|boolean
name|runOneWorkerIteration
parameter_list|(
name|SessionState
name|ss
parameter_list|,
name|String
name|user
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|boolean
name|doWait
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|AnalyzeWork
name|req
decl_stmt|;
if|if
condition|(
name|doWait
condition|)
block|{
name|req
operator|=
name|workQueue
operator|.
name|take
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|req
operator|=
name|workQueue
operator|.
name|poll
argument_list|()
expr_stmt|;
if|if
condition|(
name|req
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|String
name|cmd
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cmd
operator|=
name|req
operator|.
name|buildCommand
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running {} based on {}"
argument_list|,
name|cmd
argument_list|,
name|req
argument_list|)
expr_stmt|;
if|if
condition|(
name|doWait
condition|)
block|{
name|SessionState
operator|.
name|start
argument_list|(
name|ss
argument_list|)
expr_stmt|;
comment|// This is the first call, open the session
block|}
name|DriverUtils
operator|.
name|runOnDriver
argument_list|(
name|conf
argument_list|,
name|user
argument_list|,
name|ss
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Analyze command failed: "
operator|+
name|cmd
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|ss
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to close a bad session"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SessionState
operator|.
name|detachSession
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|markAnalyzeDone
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
class|class
name|WorkerRunnable
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|private
specifier|final
name|String
name|user
decl_stmt|;
specifier|public
name|WorkerRunnable
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|user
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
comment|// This should not start the actual Tez AM.
name|SessionState
name|ss
init|=
name|DriverUtils
operator|.
name|setUpSessionState
argument_list|(
name|conf
argument_list|,
name|user
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Wait for the first item to arrive at the queue and process it.
try|try
block|{
name|runOneWorkerIteration
argument_list|(
name|ss
argument_list|,
name|user
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|closeSession
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Worker thread was interrupted and will now exit"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Keep draining the queue in the same session.
try|try
block|{
while|while
condition|(
name|runOneWorkerIteration
argument_list|(
name|ss
argument_list|,
name|user
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
condition|)
block|{}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|closeSession
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Worker thread was interrupted unexpectedly and will now exit"
argument_list|)
expr_stmt|;
return|return;
block|}
empty_stmt|;
comment|// Close the session before we have to wait again.
name|closeSession
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|detachSession
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|closeSession
parameter_list|(
name|SessionState
name|ss
parameter_list|)
block|{
try|try
block|{
name|ss
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to close the session"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|void
name|waitForQueuedCommands
parameter_list|()
throws|throws
name|InterruptedException
block|{
while|while
condition|(
name|itemsInProgress
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
synchronized|synchronized
init|(
name|itemsInProgress
init|)
block|{
name|itemsInProgress
operator|.
name|wait
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|int
name|getQueueLength
parameter_list|()
block|{
return|return
name|workQueue
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

