begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of the query block expression.  *   **/
end_comment

begin_class
specifier|public
class|class
name|QBExpr
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"hive.ql.parse.QBExpr"
argument_list|)
decl_stmt|;
comment|/**    * Opcode.    *    */
specifier|public
specifier|static
enum|enum
name|Opcode
block|{
name|NULLOP
block|,
name|UNION
block|,
name|INTERSECT
block|,
name|DIFF
block|}
empty_stmt|;
specifier|private
name|Opcode
name|opcode
decl_stmt|;
specifier|private
name|QBExpr
name|qbexpr1
decl_stmt|;
specifier|private
name|QBExpr
name|qbexpr2
decl_stmt|;
specifier|private
name|QB
name|qb
decl_stmt|;
specifier|private
name|String
name|alias
decl_stmt|;
specifier|public
name|String
name|getAlias
parameter_list|()
block|{
return|return
name|alias
return|;
block|}
specifier|public
name|void
name|setAlias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|this
operator|.
name|alias
operator|=
name|alias
expr_stmt|;
block|}
specifier|public
name|QBExpr
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|this
operator|.
name|alias
operator|=
name|alias
expr_stmt|;
block|}
specifier|public
name|QBExpr
parameter_list|(
name|QB
name|qb
parameter_list|)
block|{
name|opcode
operator|=
name|Opcode
operator|.
name|NULLOP
expr_stmt|;
name|this
operator|.
name|qb
operator|=
name|qb
expr_stmt|;
block|}
specifier|public
name|QBExpr
parameter_list|(
name|Opcode
name|opcode
parameter_list|,
name|QBExpr
name|qbexpr1
parameter_list|,
name|QBExpr
name|qbexpr2
parameter_list|)
block|{
name|this
operator|.
name|opcode
operator|=
name|opcode
expr_stmt|;
name|this
operator|.
name|qbexpr1
operator|=
name|qbexpr1
expr_stmt|;
name|this
operator|.
name|qbexpr2
operator|=
name|qbexpr2
expr_stmt|;
block|}
specifier|public
name|void
name|setQB
parameter_list|(
name|QB
name|qb
parameter_list|)
block|{
name|this
operator|.
name|qb
operator|=
name|qb
expr_stmt|;
block|}
specifier|public
name|void
name|setOpcode
parameter_list|(
name|Opcode
name|opcode
parameter_list|)
block|{
name|this
operator|.
name|opcode
operator|=
name|opcode
expr_stmt|;
block|}
specifier|public
name|void
name|setQBExpr1
parameter_list|(
name|QBExpr
name|qbexpr
parameter_list|)
block|{
name|qbexpr1
operator|=
name|qbexpr
expr_stmt|;
block|}
specifier|public
name|void
name|setQBExpr2
parameter_list|(
name|QBExpr
name|qbexpr
parameter_list|)
block|{
name|qbexpr2
operator|=
name|qbexpr
expr_stmt|;
block|}
specifier|public
name|QB
name|getQB
parameter_list|()
block|{
return|return
name|qb
return|;
block|}
specifier|public
name|Opcode
name|getOpcode
parameter_list|()
block|{
return|return
name|opcode
return|;
block|}
specifier|public
name|QBExpr
name|getQBExpr1
parameter_list|()
block|{
return|return
name|qbexpr1
return|;
block|}
specifier|public
name|QBExpr
name|getQBExpr2
parameter_list|()
block|{
return|return
name|qbexpr2
return|;
block|}
specifier|public
name|void
name|print
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|opcode
operator|==
name|Opcode
operator|.
name|NULLOP
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|msg
operator|+
literal|"start qb = "
operator|+
name|qb
argument_list|)
expr_stmt|;
name|qb
operator|.
name|print
argument_list|(
name|msg
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
operator|+
literal|"end qb = "
operator|+
name|qb
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|msg
operator|+
literal|"start qbexpr1 = "
operator|+
name|qbexpr1
argument_list|)
expr_stmt|;
name|qbexpr1
operator|.
name|print
argument_list|(
name|msg
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
operator|+
literal|"end qbexpr1 = "
operator|+
name|qbexpr1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
operator|+
literal|"start qbexpr2 = "
operator|+
name|qbexpr2
argument_list|)
expr_stmt|;
name|qbexpr2
operator|.
name|print
argument_list|(
name|msg
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
operator|+
literal|"end qbexpr2 = "
operator|+
name|qbexpr2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isSimpleSelectQuery
parameter_list|()
block|{
if|if
condition|(
name|qb
operator|!=
literal|null
condition|)
block|{
return|return
name|qb
operator|.
name|isSimpleSelectQuery
argument_list|()
return|;
block|}
return|return
name|qbexpr1
operator|.
name|isSimpleSelectQuery
argument_list|()
operator|&&
name|qbexpr2
operator|.
name|isSimpleSelectQuery
argument_list|()
return|;
block|}
block|}
end_class

end_unit

