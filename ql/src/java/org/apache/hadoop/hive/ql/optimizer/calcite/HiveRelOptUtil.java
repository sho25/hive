begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexFieldAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|translator
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|HiveRelOptUtil
extends|extends
name|RelOptUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveRelOptUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Splits out the equi-join (and optionally, a single non-equi) components    * of a join condition, and returns what's left. Projection might be    * required by the caller to provide join keys that are not direct field    * references.    *    * @param sysFieldList  list of system fields    * @param inputs        join inputs    * @param condition     join condition    * @param joinKeys      The join keys from the inputs which are equi-join    *                      keys    * @param filterNulls   The join key positions for which null values will not    *                      match. null values only match for the "is not distinct    *                      from" condition.    * @param rangeOp       if null, only locate equi-joins; otherwise, locate a    *                      single non-equi join predicate and return its operator    *                      in this list; join keys associated with the non-equi    *                      join predicate are at the end of the key lists    *                      returned    * @return What's left, never null    * @throws CalciteSemanticException    */
specifier|public
specifier|static
name|RexNode
name|splitHiveJoinCondition
parameter_list|(
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|sysFieldList
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|>
name|joinKeys
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|filterNulls
parameter_list|,
name|List
argument_list|<
name|SqlOperator
argument_list|>
name|rangeOp
parameter_list|)
throws|throws
name|CalciteSemanticException
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|nonEquiList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|splitJoinCondition
argument_list|(
name|sysFieldList
argument_list|,
name|inputs
argument_list|,
name|condition
argument_list|,
name|joinKeys
argument_list|,
name|filterNulls
argument_list|,
name|rangeOp
argument_list|,
name|nonEquiList
argument_list|)
expr_stmt|;
comment|// Convert the remainders into a list that are AND'ed together.
return|return
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
argument_list|,
name|nonEquiList
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|splitJoinCondition
parameter_list|(
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|sysFieldList
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|>
name|joinKeys
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|filterNulls
parameter_list|,
name|List
argument_list|<
name|SqlOperator
argument_list|>
name|rangeOp
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|nonEquiList
parameter_list|)
throws|throws
name|CalciteSemanticException
block|{
specifier|final
name|int
name|sysFieldCount
init|=
name|sysFieldList
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|RelOptCluster
name|cluster
init|=
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCluster
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|condition
operator|instanceof
name|RexCall
condition|)
block|{
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|condition
decl_stmt|;
if|if
condition|(
name|call
operator|.
name|getOperator
argument_list|()
operator|==
name|SqlStdOperatorTable
operator|.
name|AND
condition|)
block|{
for|for
control|(
name|RexNode
name|operand
range|:
name|call
operator|.
name|getOperands
argument_list|()
control|)
block|{
name|splitJoinCondition
argument_list|(
name|sysFieldList
argument_list|,
name|inputs
argument_list|,
name|operand
argument_list|,
name|joinKeys
argument_list|,
name|filterNulls
argument_list|,
name|rangeOp
argument_list|,
name|nonEquiList
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|RexNode
name|leftKey
init|=
literal|null
decl_stmt|;
name|RexNode
name|rightKey
init|=
literal|null
decl_stmt|;
name|int
name|leftInput
init|=
literal|0
decl_stmt|;
name|int
name|rightInput
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|leftFields
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|rightFields
init|=
literal|null
decl_stmt|;
name|boolean
name|reverse
init|=
literal|false
decl_stmt|;
name|SqlKind
name|kind
init|=
name|call
operator|.
name|getKind
argument_list|()
decl_stmt|;
comment|// Only consider range operators if we haven't already seen one
if|if
condition|(
operator|(
name|kind
operator|==
name|SqlKind
operator|.
name|EQUALS
operator|)
operator|||
operator|(
name|filterNulls
operator|!=
literal|null
operator|&&
name|kind
operator|==
name|SqlKind
operator|.
name|IS_NOT_DISTINCT_FROM
operator|)
operator|||
operator|(
name|rangeOp
operator|!=
literal|null
operator|&&
name|rangeOp
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|kind
operator|==
name|SqlKind
operator|.
name|GREATER_THAN
operator|||
name|kind
operator|==
name|SqlKind
operator|.
name|GREATER_THAN_OR_EQUAL
operator|||
name|kind
operator|==
name|SqlKind
operator|.
name|LESS_THAN
operator|||
name|kind
operator|==
name|SqlKind
operator|.
name|LESS_THAN_OR_EQUAL
operator|)
operator|)
condition|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
name|call
operator|.
name|getOperands
argument_list|()
decl_stmt|;
name|RexNode
name|op0
init|=
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RexNode
name|op1
init|=
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|projRefs0
init|=
name|InputFinder
operator|.
name|bits
argument_list|(
name|op0
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|projRefs1
init|=
name|InputFinder
operator|.
name|bits
argument_list|(
name|op1
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableBitSet
index|[]
name|inputsRange
init|=
operator|new
name|ImmutableBitSet
index|[
name|inputs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|totalFieldCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|firstField
init|=
name|totalFieldCount
operator|+
name|sysFieldCount
decl_stmt|;
name|totalFieldCount
operator|=
name|firstField
operator|+
name|inputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
expr_stmt|;
name|inputsRange
index|[
name|i
index|]
operator|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|firstField
argument_list|,
name|totalFieldCount
argument_list|)
expr_stmt|;
block|}
name|boolean
name|foundBothInputs
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|size
argument_list|()
operator|&&
operator|!
name|foundBothInputs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|projRefs0
operator|.
name|intersects
argument_list|(
name|inputsRange
index|[
name|i
index|]
argument_list|)
operator|&&
name|projRefs0
operator|.
name|union
argument_list|(
name|inputsRange
index|[
name|i
index|]
argument_list|)
operator|.
name|equals
argument_list|(
name|inputsRange
index|[
name|i
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|leftKey
operator|==
literal|null
condition|)
block|{
name|leftKey
operator|=
name|op0
expr_stmt|;
name|leftInput
operator|=
name|i
expr_stmt|;
name|leftFields
operator|=
name|inputs
operator|.
name|get
argument_list|(
name|leftInput
argument_list|)
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rightKey
operator|=
name|op0
expr_stmt|;
name|rightInput
operator|=
name|i
expr_stmt|;
name|rightFields
operator|=
name|inputs
operator|.
name|get
argument_list|(
name|rightInput
argument_list|)
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
expr_stmt|;
name|reverse
operator|=
literal|true
expr_stmt|;
name|foundBothInputs
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|projRefs1
operator|.
name|intersects
argument_list|(
name|inputsRange
index|[
name|i
index|]
argument_list|)
operator|&&
name|projRefs1
operator|.
name|union
argument_list|(
name|inputsRange
index|[
name|i
index|]
argument_list|)
operator|.
name|equals
argument_list|(
name|inputsRange
index|[
name|i
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|leftKey
operator|==
literal|null
condition|)
block|{
name|leftKey
operator|=
name|op1
expr_stmt|;
name|leftInput
operator|=
name|i
expr_stmt|;
name|leftFields
operator|=
name|inputs
operator|.
name|get
argument_list|(
name|leftInput
argument_list|)
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rightKey
operator|=
name|op1
expr_stmt|;
name|rightInput
operator|=
name|i
expr_stmt|;
name|rightFields
operator|=
name|inputs
operator|.
name|get
argument_list|(
name|rightInput
argument_list|)
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
expr_stmt|;
name|foundBothInputs
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|(
name|leftKey
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|rightKey
operator|!=
literal|null
operator|)
condition|)
block|{
comment|// adjustment array
name|int
index|[]
name|adjustments
init|=
operator|new
name|int
index|[
name|totalFieldCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|adjustment
init|=
name|inputsRange
index|[
name|i
index|]
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|adjustment
init|;
name|j
operator|<
name|inputsRange
index|[
name|i
index|]
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|adjustments
index|[
name|j
index|]
operator|=
operator|-
name|adjustment
expr_stmt|;
block|}
block|}
comment|// replace right Key input ref
name|rightKey
operator|=
name|rightKey
operator|.
name|accept
argument_list|(
operator|new
name|RelOptUtil
operator|.
name|RexInputConverter
argument_list|(
name|rexBuilder
argument_list|,
name|rightFields
argument_list|,
name|rightFields
argument_list|,
name|adjustments
argument_list|)
argument_list|)
expr_stmt|;
comment|// left key only needs to be adjusted if there are system
comment|// fields, but do it for uniformity
name|leftKey
operator|=
name|leftKey
operator|.
name|accept
argument_list|(
operator|new
name|RelOptUtil
operator|.
name|RexInputConverter
argument_list|(
name|rexBuilder
argument_list|,
name|leftFields
argument_list|,
name|leftFields
argument_list|,
name|adjustments
argument_list|)
argument_list|)
expr_stmt|;
name|RelDataType
name|leftKeyType
init|=
name|leftKey
operator|.
name|getType
argument_list|()
decl_stmt|;
name|RelDataType
name|rightKeyType
init|=
name|rightKey
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|leftKeyType
operator|!=
name|rightKeyType
condition|)
block|{
comment|// perform casting using Hive rules
name|TypeInfo
name|rType
init|=
name|TypeConverter
operator|.
name|convert
argument_list|(
name|rightKeyType
argument_list|)
decl_stmt|;
name|TypeInfo
name|lType
init|=
name|TypeConverter
operator|.
name|convert
argument_list|(
name|leftKeyType
argument_list|)
decl_stmt|;
name|TypeInfo
name|tgtType
init|=
name|FunctionRegistry
operator|.
name|getCommonClassForComparison
argument_list|(
name|lType
argument_list|,
name|rType
argument_list|)
decl_stmt|;
if|if
condition|(
name|tgtType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CalciteSemanticException
argument_list|(
literal|"Cannot find common type for join keys "
operator|+
name|leftKey
operator|+
literal|" (type "
operator|+
name|leftKeyType
operator|+
literal|") and "
operator|+
name|rightKey
operator|+
literal|" (type "
operator|+
name|rightKeyType
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|RelDataType
name|targetKeyType
init|=
name|TypeConverter
operator|.
name|convert
argument_list|(
name|tgtType
argument_list|,
name|rexBuilder
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftKeyType
operator|!=
name|targetKeyType
operator|&&
name|TypeInfoUtils
operator|.
name|isConversionRequiredForComparison
argument_list|(
name|tgtType
argument_list|,
name|lType
argument_list|)
condition|)
block|{
name|leftKey
operator|=
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|targetKeyType
argument_list|,
name|leftKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rightKeyType
operator|!=
name|targetKeyType
operator|&&
name|TypeInfoUtils
operator|.
name|isConversionRequiredForComparison
argument_list|(
name|tgtType
argument_list|,
name|rType
argument_list|)
condition|)
block|{
name|rightKey
operator|=
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|targetKeyType
argument_list|,
name|rightKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|(
name|leftKey
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|rightKey
operator|!=
literal|null
operator|)
condition|)
block|{
comment|// found suitable join keys
comment|// add them to key list, ensuring that if there is a
comment|// non-equi join predicate, it appears at the end of the
comment|// key list; also mark the null filtering property
name|addJoinKey
argument_list|(
name|joinKeys
operator|.
name|get
argument_list|(
name|leftInput
argument_list|)
argument_list|,
name|leftKey
argument_list|,
operator|(
name|rangeOp
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|rangeOp
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|addJoinKey
argument_list|(
name|joinKeys
operator|.
name|get
argument_list|(
name|rightInput
argument_list|)
argument_list|,
name|rightKey
argument_list|,
operator|(
name|rangeOp
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|rangeOp
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|filterNulls
operator|!=
literal|null
operator|&&
name|kind
operator|==
name|SqlKind
operator|.
name|EQUALS
condition|)
block|{
comment|// nulls are considered not matching for equality comparison
comment|// add the position of the most recently inserted key
name|filterNulls
operator|.
name|add
argument_list|(
name|joinKeys
operator|.
name|get
argument_list|(
name|leftInput
argument_list|)
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rangeOp
operator|!=
literal|null
operator|&&
name|kind
operator|!=
name|SqlKind
operator|.
name|EQUALS
operator|&&
name|kind
operator|!=
name|SqlKind
operator|.
name|IS_DISTINCT_FROM
condition|)
block|{
if|if
condition|(
name|reverse
condition|)
block|{
name|kind
operator|=
name|reverse
argument_list|(
name|kind
argument_list|)
expr_stmt|;
block|}
name|rangeOp
operator|.
name|add
argument_list|(
name|op
argument_list|(
name|kind
argument_list|,
name|call
operator|.
name|getOperator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|// else fall through and add this condition as nonEqui condition
block|}
comment|// The operator is not of RexCall type
comment|// So we fail. Fall through.
comment|// Add this condition to the list of non-equi-join conditions.
name|nonEquiList
operator|.
name|add
argument_list|(
name|condition
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|SqlKind
name|reverse
parameter_list|(
name|SqlKind
name|kind
parameter_list|)
block|{
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|GREATER_THAN
case|:
return|return
name|SqlKind
operator|.
name|LESS_THAN
return|;
case|case
name|GREATER_THAN_OR_EQUAL
case|:
return|return
name|SqlKind
operator|.
name|LESS_THAN_OR_EQUAL
return|;
case|case
name|LESS_THAN
case|:
return|return
name|SqlKind
operator|.
name|GREATER_THAN
return|;
case|case
name|LESS_THAN_OR_EQUAL
case|:
return|return
name|SqlKind
operator|.
name|GREATER_THAN_OR_EQUAL
return|;
default|default:
return|return
name|kind
return|;
block|}
block|}
specifier|private
specifier|static
name|void
name|addJoinKey
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|joinKeyList
parameter_list|,
name|RexNode
name|key
parameter_list|,
name|boolean
name|preserveLastElementInList
parameter_list|)
block|{
if|if
condition|(
operator|!
name|joinKeyList
operator|.
name|isEmpty
argument_list|()
operator|&&
name|preserveLastElementInList
condition|)
block|{
name|joinKeyList
operator|.
name|add
argument_list|(
name|joinKeyList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|joinKeyList
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates a relational expression that projects the given fields of the    * input.    *    *<p>Optimizes if the fields are the identity projection.    *    * @param relBuilder RelBuilder    * @param child Input relational expression    * @param posList Source of each projected field    * @return Relational expression that projects given fields    */
specifier|public
specifier|static
name|RelNode
name|createProject
parameter_list|(
specifier|final
name|RelBuilder
name|relBuilder
parameter_list|,
specifier|final
name|RelNode
name|child
parameter_list|,
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|posList
parameter_list|)
block|{
name|RelDataType
name|rowType
init|=
name|child
operator|.
name|getRowType
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|rowType
operator|.
name|getFieldNames
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|child
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
return|return
name|createProject
argument_list|(
name|child
argument_list|,
operator|new
name|AbstractList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|posList
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|RexNode
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|int
name|pos
init|=
name|posList
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|child
argument_list|,
name|pos
argument_list|)
return|;
block|}
block|}
argument_list|,
operator|new
name|AbstractList
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|posList
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|String
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|int
name|pos
init|=
name|posList
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|fieldNames
operator|.
name|get
argument_list|(
name|pos
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|true
argument_list|,
name|relBuilder
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RexNode
name|splitCorrelatedFilterCondition
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|joinKeys
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|correlatedJoinKeys
parameter_list|,
name|boolean
name|extractCorrelatedFieldAccess
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|nonEquiList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|splitCorrelatedFilterCondition
argument_list|(
name|filter
argument_list|,
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|,
name|joinKeys
argument_list|,
name|correlatedJoinKeys
argument_list|,
name|nonEquiList
argument_list|,
name|extractCorrelatedFieldAccess
argument_list|)
expr_stmt|;
comment|// Convert the remainders into a list that are AND'ed together.
return|return
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|filter
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
argument_list|,
name|nonEquiList
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|splitCorrelatedFilterCondition
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|joinKeys
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|correlatedJoinKeys
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|nonEquiList
parameter_list|,
name|boolean
name|extractCorrelatedFieldAccess
parameter_list|)
block|{
if|if
condition|(
name|condition
operator|instanceof
name|RexCall
condition|)
block|{
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|condition
decl_stmt|;
if|if
condition|(
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|AND
condition|)
block|{
for|for
control|(
name|RexNode
name|operand
range|:
name|call
operator|.
name|getOperands
argument_list|()
control|)
block|{
name|splitCorrelatedFilterCondition
argument_list|(
name|filter
argument_list|,
name|operand
argument_list|,
name|joinKeys
argument_list|,
name|correlatedJoinKeys
argument_list|,
name|nonEquiList
argument_list|,
name|extractCorrelatedFieldAccess
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|EQUALS
condition|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
name|call
operator|.
name|getOperands
argument_list|()
decl_stmt|;
name|RexNode
name|op0
init|=
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RexNode
name|op1
init|=
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|extractCorrelatedFieldAccess
condition|)
block|{
if|if
condition|(
operator|!
name|RexUtil
operator|.
name|containsFieldAccess
argument_list|(
name|op0
argument_list|)
operator|&&
operator|(
name|op1
operator|instanceof
name|RexFieldAccess
operator|)
condition|)
block|{
name|joinKeys
operator|.
name|add
argument_list|(
name|op0
argument_list|)
expr_stmt|;
name|correlatedJoinKeys
operator|.
name|add
argument_list|(
name|op1
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
operator|(
name|op0
operator|instanceof
name|RexFieldAccess
operator|)
operator|&&
operator|!
name|RexUtil
operator|.
name|containsFieldAccess
argument_list|(
name|op1
argument_list|)
condition|)
block|{
name|correlatedJoinKeys
operator|.
name|add
argument_list|(
name|op0
argument_list|)
expr_stmt|;
name|joinKeys
operator|.
name|add
argument_list|(
name|op1
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
operator|(
name|RexUtil
operator|.
name|containsInputRef
argument_list|(
name|op0
argument_list|)
operator|)
operator|&&
operator|(
name|op1
operator|instanceof
name|RexInputRef
operator|)
condition|)
block|{
name|correlatedJoinKeys
operator|.
name|add
argument_list|(
name|op0
argument_list|)
expr_stmt|;
name|joinKeys
operator|.
name|add
argument_list|(
name|op1
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
operator|(
name|op0
operator|instanceof
name|RexInputRef
operator|)
operator|&&
operator|!
operator|(
name|RexUtil
operator|.
name|containsInputRef
argument_list|(
name|op1
argument_list|)
operator|)
condition|)
block|{
name|joinKeys
operator|.
name|add
argument_list|(
name|op0
argument_list|)
expr_stmt|;
name|correlatedJoinKeys
operator|.
name|add
argument_list|(
name|op1
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
comment|// The operator is not of RexCall type
comment|// So we fail. Fall through.
comment|// Add this condition to the list of non-equi-join conditions.
name|nonEquiList
operator|.
name|add
argument_list|(
name|condition
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a LogicalAggregate that removes all duplicates from the result of    * an underlying relational expression.    *    * @param rel underlying rel    * @return rel implementing SingleValueAgg    */
specifier|public
specifier|static
name|RelNode
name|createSingleValueAggRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelNode
name|rel
parameter_list|,
name|RelFactories
operator|.
name|AggregateFactory
name|aggregateFactory
parameter_list|)
block|{
comment|// assert (rel.getRowType().getFieldCount() == 1);
specifier|final
name|int
name|aggCallCnt
init|=
name|rel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggCallCnt
condition|;
name|i
operator|++
control|)
block|{
name|aggCalls
operator|.
name|add
argument_list|(
name|AggregateCall
operator|.
name|create
argument_list|(
name|SqlStdOperatorTable
operator|.
name|SINGLE_VALUE
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|i
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|rel
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|aggregateFactory
operator|.
name|createAggregate
argument_list|(
name|rel
argument_list|,
literal|false
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|,
literal|null
argument_list|,
name|aggCalls
argument_list|)
return|;
block|}
block|}
end_class

end_unit

