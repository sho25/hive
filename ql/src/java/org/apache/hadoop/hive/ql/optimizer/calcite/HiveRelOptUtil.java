begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelReferentialConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexFieldAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexOver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexTableInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexTableInputRef
operator|.
name|RelTableRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|translator
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|HiveRelOptUtil
extends|extends
name|RelOptUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveRelOptUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Splits out the equi-join (and optionally, a single non-equi) components    * of a join condition, and returns what's left. Projection might be    * required by the caller to provide join keys that are not direct field    * references.    *    * @param sysFieldList  list of system fields    * @param inputs        join inputs    * @param condition     join condition    * @param joinKeys      The join keys from the inputs which are equi-join    *                      keys    * @param filterNulls   The join key positions for which null values will not    *                      match. null values only match for the "is not distinct    *                      from" condition.    * @param rangeOp       if null, only locate equi-joins; otherwise, locate a    *                      single non-equi join predicate and return its operator    *                      in this list; join keys associated with the non-equi    *                      join predicate are at the end of the key lists    *                      returned    * @return What's left, never null    * @throws CalciteSemanticException    */
specifier|public
specifier|static
name|RexNode
name|splitHiveJoinCondition
parameter_list|(
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|sysFieldList
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|>
name|joinKeys
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|filterNulls
parameter_list|,
name|List
argument_list|<
name|SqlOperator
argument_list|>
name|rangeOp
parameter_list|)
throws|throws
name|CalciteSemanticException
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|nonEquiList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|splitJoinCondition
argument_list|(
name|sysFieldList
argument_list|,
name|inputs
argument_list|,
name|condition
argument_list|,
name|joinKeys
argument_list|,
name|filterNulls
argument_list|,
name|rangeOp
argument_list|,
name|nonEquiList
argument_list|)
expr_stmt|;
comment|// Convert the remainders into a list that are AND'ed together.
return|return
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
argument_list|,
name|nonEquiList
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|splitJoinCondition
parameter_list|(
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|sysFieldList
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|>
name|joinKeys
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|filterNulls
parameter_list|,
name|List
argument_list|<
name|SqlOperator
argument_list|>
name|rangeOp
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|nonEquiList
parameter_list|)
throws|throws
name|CalciteSemanticException
block|{
specifier|final
name|int
name|sysFieldCount
init|=
name|sysFieldList
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|RelOptCluster
name|cluster
init|=
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCluster
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|condition
operator|instanceof
name|RexCall
condition|)
block|{
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|condition
decl_stmt|;
if|if
condition|(
name|call
operator|.
name|getOperator
argument_list|()
operator|==
name|SqlStdOperatorTable
operator|.
name|AND
condition|)
block|{
for|for
control|(
name|RexNode
name|operand
range|:
name|call
operator|.
name|getOperands
argument_list|()
control|)
block|{
name|splitJoinCondition
argument_list|(
name|sysFieldList
argument_list|,
name|inputs
argument_list|,
name|operand
argument_list|,
name|joinKeys
argument_list|,
name|filterNulls
argument_list|,
name|rangeOp
argument_list|,
name|nonEquiList
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|RexNode
name|leftKey
init|=
literal|null
decl_stmt|;
name|RexNode
name|rightKey
init|=
literal|null
decl_stmt|;
name|int
name|leftInput
init|=
literal|0
decl_stmt|;
name|int
name|rightInput
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|leftFields
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|rightFields
init|=
literal|null
decl_stmt|;
name|boolean
name|reverse
init|=
literal|false
decl_stmt|;
name|SqlKind
name|kind
init|=
name|call
operator|.
name|getKind
argument_list|()
decl_stmt|;
comment|// Only consider range operators if we haven't already seen one
if|if
condition|(
operator|(
name|kind
operator|==
name|SqlKind
operator|.
name|EQUALS
operator|)
operator|||
operator|(
name|filterNulls
operator|!=
literal|null
operator|&&
name|kind
operator|==
name|SqlKind
operator|.
name|IS_NOT_DISTINCT_FROM
operator|)
operator|||
operator|(
name|rangeOp
operator|!=
literal|null
operator|&&
name|rangeOp
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|kind
operator|==
name|SqlKind
operator|.
name|GREATER_THAN
operator|||
name|kind
operator|==
name|SqlKind
operator|.
name|GREATER_THAN_OR_EQUAL
operator|||
name|kind
operator|==
name|SqlKind
operator|.
name|LESS_THAN
operator|||
name|kind
operator|==
name|SqlKind
operator|.
name|LESS_THAN_OR_EQUAL
operator|)
operator|)
condition|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
name|call
operator|.
name|getOperands
argument_list|()
decl_stmt|;
name|RexNode
name|op0
init|=
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RexNode
name|op1
init|=
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|projRefs0
init|=
name|InputFinder
operator|.
name|bits
argument_list|(
name|op0
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|projRefs1
init|=
name|InputFinder
operator|.
name|bits
argument_list|(
name|op1
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableBitSet
index|[]
name|inputsRange
init|=
operator|new
name|ImmutableBitSet
index|[
name|inputs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|totalFieldCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|firstField
init|=
name|totalFieldCount
operator|+
name|sysFieldCount
decl_stmt|;
name|totalFieldCount
operator|=
name|firstField
operator|+
name|inputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
expr_stmt|;
name|inputsRange
index|[
name|i
index|]
operator|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|firstField
argument_list|,
name|totalFieldCount
argument_list|)
expr_stmt|;
block|}
name|boolean
name|foundBothInputs
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|size
argument_list|()
operator|&&
operator|!
name|foundBothInputs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|projRefs0
operator|.
name|intersects
argument_list|(
name|inputsRange
index|[
name|i
index|]
argument_list|)
operator|&&
name|projRefs0
operator|.
name|union
argument_list|(
name|inputsRange
index|[
name|i
index|]
argument_list|)
operator|.
name|equals
argument_list|(
name|inputsRange
index|[
name|i
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|leftKey
operator|==
literal|null
condition|)
block|{
name|leftKey
operator|=
name|op0
expr_stmt|;
name|leftInput
operator|=
name|i
expr_stmt|;
name|leftFields
operator|=
name|inputs
operator|.
name|get
argument_list|(
name|leftInput
argument_list|)
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rightKey
operator|=
name|op0
expr_stmt|;
name|rightInput
operator|=
name|i
expr_stmt|;
name|rightFields
operator|=
name|inputs
operator|.
name|get
argument_list|(
name|rightInput
argument_list|)
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
expr_stmt|;
name|reverse
operator|=
literal|true
expr_stmt|;
name|foundBothInputs
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|projRefs1
operator|.
name|intersects
argument_list|(
name|inputsRange
index|[
name|i
index|]
argument_list|)
operator|&&
name|projRefs1
operator|.
name|union
argument_list|(
name|inputsRange
index|[
name|i
index|]
argument_list|)
operator|.
name|equals
argument_list|(
name|inputsRange
index|[
name|i
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|leftKey
operator|==
literal|null
condition|)
block|{
name|leftKey
operator|=
name|op1
expr_stmt|;
name|leftInput
operator|=
name|i
expr_stmt|;
name|leftFields
operator|=
name|inputs
operator|.
name|get
argument_list|(
name|leftInput
argument_list|)
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rightKey
operator|=
name|op1
expr_stmt|;
name|rightInput
operator|=
name|i
expr_stmt|;
name|rightFields
operator|=
name|inputs
operator|.
name|get
argument_list|(
name|rightInput
argument_list|)
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
expr_stmt|;
name|foundBothInputs
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|(
name|leftKey
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|rightKey
operator|!=
literal|null
operator|)
condition|)
block|{
comment|// adjustment array
name|int
index|[]
name|adjustments
init|=
operator|new
name|int
index|[
name|totalFieldCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|adjustment
init|=
name|inputsRange
index|[
name|i
index|]
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|adjustment
init|;
name|j
operator|<
name|inputsRange
index|[
name|i
index|]
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|adjustments
index|[
name|j
index|]
operator|=
operator|-
name|adjustment
expr_stmt|;
block|}
block|}
comment|// replace right Key input ref
name|rightKey
operator|=
name|rightKey
operator|.
name|accept
argument_list|(
operator|new
name|RelOptUtil
operator|.
name|RexInputConverter
argument_list|(
name|rexBuilder
argument_list|,
name|rightFields
argument_list|,
name|rightFields
argument_list|,
name|adjustments
argument_list|)
argument_list|)
expr_stmt|;
comment|// left key only needs to be adjusted if there are system
comment|// fields, but do it for uniformity
name|leftKey
operator|=
name|leftKey
operator|.
name|accept
argument_list|(
operator|new
name|RelOptUtil
operator|.
name|RexInputConverter
argument_list|(
name|rexBuilder
argument_list|,
name|leftFields
argument_list|,
name|leftFields
argument_list|,
name|adjustments
argument_list|)
argument_list|)
expr_stmt|;
name|RelDataType
name|leftKeyType
init|=
name|leftKey
operator|.
name|getType
argument_list|()
decl_stmt|;
name|RelDataType
name|rightKeyType
init|=
name|rightKey
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|leftKeyType
operator|!=
name|rightKeyType
condition|)
block|{
comment|// perform casting using Hive rules
name|TypeInfo
name|rType
init|=
name|TypeConverter
operator|.
name|convert
argument_list|(
name|rightKeyType
argument_list|)
decl_stmt|;
name|TypeInfo
name|lType
init|=
name|TypeConverter
operator|.
name|convert
argument_list|(
name|leftKeyType
argument_list|)
decl_stmt|;
name|TypeInfo
name|tgtType
init|=
name|FunctionRegistry
operator|.
name|getCommonClassForComparison
argument_list|(
name|lType
argument_list|,
name|rType
argument_list|)
decl_stmt|;
if|if
condition|(
name|tgtType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CalciteSemanticException
argument_list|(
literal|"Cannot find common type for join keys "
operator|+
name|leftKey
operator|+
literal|" (type "
operator|+
name|leftKeyType
operator|+
literal|") and "
operator|+
name|rightKey
operator|+
literal|" (type "
operator|+
name|rightKeyType
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|RelDataType
name|targetKeyType
init|=
name|TypeConverter
operator|.
name|convert
argument_list|(
name|tgtType
argument_list|,
name|rexBuilder
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftKeyType
operator|!=
name|targetKeyType
operator|&&
name|TypeInfoUtils
operator|.
name|isConversionRequiredForComparison
argument_list|(
name|tgtType
argument_list|,
name|lType
argument_list|)
condition|)
block|{
name|leftKey
operator|=
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|targetKeyType
argument_list|,
name|leftKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rightKeyType
operator|!=
name|targetKeyType
operator|&&
name|TypeInfoUtils
operator|.
name|isConversionRequiredForComparison
argument_list|(
name|tgtType
argument_list|,
name|rType
argument_list|)
condition|)
block|{
name|rightKey
operator|=
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|targetKeyType
argument_list|,
name|rightKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|(
name|leftKey
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|rightKey
operator|!=
literal|null
operator|)
condition|)
block|{
comment|// found suitable join keys
comment|// add them to key list, ensuring that if there is a
comment|// non-equi join predicate, it appears at the end of the
comment|// key list; also mark the null filtering property
name|addJoinKey
argument_list|(
name|joinKeys
operator|.
name|get
argument_list|(
name|leftInput
argument_list|)
argument_list|,
name|leftKey
argument_list|,
operator|(
name|rangeOp
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|rangeOp
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|addJoinKey
argument_list|(
name|joinKeys
operator|.
name|get
argument_list|(
name|rightInput
argument_list|)
argument_list|,
name|rightKey
argument_list|,
operator|(
name|rangeOp
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|rangeOp
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|filterNulls
operator|!=
literal|null
operator|&&
name|kind
operator|==
name|SqlKind
operator|.
name|EQUALS
condition|)
block|{
comment|// nulls are considered not matching for equality comparison
comment|// add the position of the most recently inserted key
name|filterNulls
operator|.
name|add
argument_list|(
name|joinKeys
operator|.
name|get
argument_list|(
name|leftInput
argument_list|)
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rangeOp
operator|!=
literal|null
operator|&&
name|kind
operator|!=
name|SqlKind
operator|.
name|EQUALS
operator|&&
name|kind
operator|!=
name|SqlKind
operator|.
name|IS_DISTINCT_FROM
condition|)
block|{
if|if
condition|(
name|reverse
condition|)
block|{
name|kind
operator|=
name|reverse
argument_list|(
name|kind
argument_list|)
expr_stmt|;
block|}
name|rangeOp
operator|.
name|add
argument_list|(
name|op
argument_list|(
name|kind
argument_list|,
name|call
operator|.
name|getOperator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|// else fall through and add this condition as nonEqui condition
block|}
comment|// The operator is not of RexCall type
comment|// So we fail. Fall through.
comment|// Add this condition to the list of non-equi-join conditions.
name|nonEquiList
operator|.
name|add
argument_list|(
name|condition
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|SqlKind
name|reverse
parameter_list|(
name|SqlKind
name|kind
parameter_list|)
block|{
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|GREATER_THAN
case|:
return|return
name|SqlKind
operator|.
name|LESS_THAN
return|;
case|case
name|GREATER_THAN_OR_EQUAL
case|:
return|return
name|SqlKind
operator|.
name|LESS_THAN_OR_EQUAL
return|;
case|case
name|LESS_THAN
case|:
return|return
name|SqlKind
operator|.
name|GREATER_THAN
return|;
case|case
name|LESS_THAN_OR_EQUAL
case|:
return|return
name|SqlKind
operator|.
name|GREATER_THAN_OR_EQUAL
return|;
default|default:
return|return
name|kind
return|;
block|}
block|}
specifier|private
specifier|static
name|void
name|addJoinKey
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|joinKeyList
parameter_list|,
name|RexNode
name|key
parameter_list|,
name|boolean
name|preserveLastElementInList
parameter_list|)
block|{
if|if
condition|(
operator|!
name|joinKeyList
operator|.
name|isEmpty
argument_list|()
operator|&&
name|preserveLastElementInList
condition|)
block|{
name|joinKeyList
operator|.
name|add
argument_list|(
name|joinKeyList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|joinKeyList
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates a relational expression that projects the given fields of the    * input.    *    *<p>Optimizes if the fields are the identity projection.    *    * @param relBuilder RelBuilder    * @param child Input relational expression    * @param posList Source of each projected field    * @return Relational expression that projects given fields    */
specifier|public
specifier|static
name|RelNode
name|createProject
parameter_list|(
specifier|final
name|RelBuilder
name|relBuilder
parameter_list|,
specifier|final
name|RelNode
name|child
parameter_list|,
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|posList
parameter_list|)
block|{
name|RelDataType
name|rowType
init|=
name|child
operator|.
name|getRowType
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|rowType
operator|.
name|getFieldNames
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|child
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
return|return
name|createProject
argument_list|(
name|child
argument_list|,
operator|new
name|AbstractList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|posList
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|RexNode
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|int
name|pos
init|=
name|posList
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|child
argument_list|,
name|pos
argument_list|)
return|;
block|}
block|}
argument_list|,
operator|new
name|AbstractList
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|posList
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|String
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|final
name|int
name|pos
init|=
name|posList
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|fieldNames
operator|.
name|get
argument_list|(
name|pos
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|true
argument_list|,
name|relBuilder
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RexNode
name|splitCorrelatedFilterCondition
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|joinKeys
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|correlatedJoinKeys
parameter_list|,
name|boolean
name|extractCorrelatedFieldAccess
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|nonEquiList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|splitCorrelatedFilterCondition
argument_list|(
name|filter
argument_list|,
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|,
name|joinKeys
argument_list|,
name|correlatedJoinKeys
argument_list|,
name|nonEquiList
argument_list|,
name|extractCorrelatedFieldAccess
argument_list|)
expr_stmt|;
comment|// Convert the remainders into a list that are AND'ed together.
return|return
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|filter
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
argument_list|,
name|nonEquiList
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|splitCorrelatedFilterCondition
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|joinKeys
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|correlatedJoinKeys
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|nonEquiList
parameter_list|,
name|boolean
name|extractCorrelatedFieldAccess
parameter_list|)
block|{
if|if
condition|(
name|condition
operator|instanceof
name|RexCall
condition|)
block|{
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|condition
decl_stmt|;
if|if
condition|(
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|AND
condition|)
block|{
for|for
control|(
name|RexNode
name|operand
range|:
name|call
operator|.
name|getOperands
argument_list|()
control|)
block|{
name|splitCorrelatedFilterCondition
argument_list|(
name|filter
argument_list|,
name|operand
argument_list|,
name|joinKeys
argument_list|,
name|correlatedJoinKeys
argument_list|,
name|nonEquiList
argument_list|,
name|extractCorrelatedFieldAccess
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|EQUALS
condition|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
name|call
operator|.
name|getOperands
argument_list|()
decl_stmt|;
name|RexNode
name|op0
init|=
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RexNode
name|op1
init|=
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|extractCorrelatedFieldAccess
condition|)
block|{
if|if
condition|(
operator|!
name|RexUtil
operator|.
name|containsFieldAccess
argument_list|(
name|op0
argument_list|)
operator|&&
operator|(
name|op1
operator|instanceof
name|RexFieldAccess
operator|)
condition|)
block|{
name|joinKeys
operator|.
name|add
argument_list|(
name|op0
argument_list|)
expr_stmt|;
name|correlatedJoinKeys
operator|.
name|add
argument_list|(
name|op1
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
operator|(
name|op0
operator|instanceof
name|RexFieldAccess
operator|)
operator|&&
operator|!
name|RexUtil
operator|.
name|containsFieldAccess
argument_list|(
name|op1
argument_list|)
condition|)
block|{
name|correlatedJoinKeys
operator|.
name|add
argument_list|(
name|op0
argument_list|)
expr_stmt|;
name|joinKeys
operator|.
name|add
argument_list|(
name|op1
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
operator|(
name|RexUtil
operator|.
name|containsInputRef
argument_list|(
name|op0
argument_list|)
operator|)
operator|&&
operator|(
name|op1
operator|instanceof
name|RexInputRef
operator|)
condition|)
block|{
name|correlatedJoinKeys
operator|.
name|add
argument_list|(
name|op0
argument_list|)
expr_stmt|;
name|joinKeys
operator|.
name|add
argument_list|(
name|op1
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
operator|(
name|op0
operator|instanceof
name|RexInputRef
operator|)
operator|&&
operator|!
operator|(
name|RexUtil
operator|.
name|containsInputRef
argument_list|(
name|op1
argument_list|)
operator|)
condition|)
block|{
name|joinKeys
operator|.
name|add
argument_list|(
name|op0
argument_list|)
expr_stmt|;
name|correlatedJoinKeys
operator|.
name|add
argument_list|(
name|op1
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
comment|// The operator is not of RexCall type
comment|// So we fail. Fall through.
comment|// Add this condition to the list of non-equi-join conditions.
name|nonEquiList
operator|.
name|add
argument_list|(
name|condition
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a LogicalAggregate that removes all duplicates from the result of    * an underlying relational expression.    *    * @param rel underlying rel    * @return rel implementing SingleValueAgg    */
specifier|public
specifier|static
name|RelNode
name|createSingleValueAggRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelNode
name|rel
parameter_list|,
name|RelFactories
operator|.
name|AggregateFactory
name|aggregateFactory
parameter_list|)
block|{
comment|// assert (rel.getRowType().getFieldCount() == 1);
specifier|final
name|int
name|aggCallCnt
init|=
name|rel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggCallCnt
condition|;
name|i
operator|++
control|)
block|{
name|aggCalls
operator|.
name|add
argument_list|(
name|AggregateCall
operator|.
name|create
argument_list|(
name|SqlStdOperatorTable
operator|.
name|SINGLE_VALUE
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|i
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|rel
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|aggregateFactory
operator|.
name|createAggregate
argument_list|(
name|rel
argument_list|,
literal|false
argument_list|,
name|ImmutableBitSet
operator|.
name|of
argument_list|()
argument_list|,
literal|null
argument_list|,
name|aggCalls
argument_list|)
return|;
block|}
comment|/**    * Given a RelNode, it checks whether there is any filtering condition    * below. Basically we check whether the operators    * below altered the PK cardinality in any way    */
specifier|public
specifier|static
name|boolean
name|isRowFilteringPlan
parameter_list|(
specifier|final
name|RelMetadataQuery
name|mq
parameter_list|,
name|RelNode
name|operator
parameter_list|)
block|{
specifier|final
name|Multimap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|,
name|RelNode
argument_list|>
name|nodesBelowNonFkInput
init|=
name|mq
operator|.
name|getNodeTypes
argument_list|(
name|operator
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|,
name|Collection
argument_list|<
name|RelNode
argument_list|>
argument_list|>
name|e
range|:
name|nodesBelowNonFkInput
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|==
name|Project
operator|.
name|class
condition|)
block|{
comment|// It does not alter cardinality, continue
continue|continue;
block|}
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|==
name|TableScan
operator|.
name|class
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// Bail out as we may not have more than one TS on non-FK side
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|==
name|Aggregate
operator|.
name|class
condition|)
block|{
comment|// We check there is are not grouping sets
for|for
control|(
name|RelNode
name|node
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|Aggregate
name|a
init|=
operator|(
name|Aggregate
operator|)
name|node
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|getGroupType
argument_list|()
operator|!=
name|Group
operator|.
name|SIMPLE
condition|)
block|{
comment|// Bail out as it may change cardinality
return|return
literal|true
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|==
name|Sort
operator|.
name|class
condition|)
block|{
comment|// We check whether there is a limit clause
for|for
control|(
name|RelNode
name|node
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|Sort
name|s
init|=
operator|(
name|Sort
operator|)
name|node
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|fetch
operator|!=
literal|null
operator|||
name|s
operator|.
name|offset
operator|!=
literal|null
condition|)
block|{
comment|// Bail out as it may change cardinality
return|return
literal|true
return|;
block|}
block|}
block|}
else|else
block|{
comment|// Bail out, we cannot rewrite the expression if non-fk side cardinality
comment|// is being altered
return|return
literal|true
return|;
block|}
block|}
comment|// It passed all the tests
return|return
literal|false
return|;
block|}
comment|/**    * Returns a triple where first value represents whether we could extract a FK-PK join    * or not, the second value is a pair with the column from left and right input that    * are used for the FK-PK join, and the third value are the predicates that are not    * part of the FK-PK condition. Currently we can only extract one FK-PK join.    */
specifier|public
specifier|static
name|PKFKJoinInfo
name|extractPKFKJoin
parameter_list|(
name|Join
name|join
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|joinFilters
parameter_list|,
name|boolean
name|leftInputPotentialFK
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|residualPreds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|JoinRelType
name|joinType
init|=
name|join
operator|.
name|getJoinType
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|fkInput
init|=
name|leftInputPotentialFK
condition|?
name|join
operator|.
name|getLeft
argument_list|()
else|:
name|join
operator|.
name|getRight
argument_list|()
decl_stmt|;
specifier|final
name|PKFKJoinInfo
name|cannotExtract
init|=
name|PKFKJoinInfo
operator|.
name|of
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinType
operator|!=
name|JoinRelType
operator|.
name|INNER
condition|)
block|{
comment|// If it is not an inner, we transform it as the metadata
comment|// providers for expressions do not pull information through
comment|// outer join (as it would not be correct)
name|join
operator|=
name|join
operator|.
name|copy
argument_list|(
name|join
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|join
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
argument_list|,
name|join
operator|.
name|getLeft
argument_list|()
argument_list|,
name|join
operator|.
name|getRight
argument_list|()
argument_list|,
name|JoinRelType
operator|.
name|INNER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// 1) Gather all tables from the FK side and the table from the
comment|// non-FK side
specifier|final
name|Set
argument_list|<
name|RelTableRef
argument_list|>
name|leftTables
init|=
name|mq
operator|.
name|getTableReferences
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftTables
operator|==
literal|null
condition|)
block|{
comment|// Could not infer, bail out
return|return
name|cannotExtract
return|;
block|}
specifier|final
name|Set
argument_list|<
name|RelTableRef
argument_list|>
name|joinTables
init|=
name|mq
operator|.
name|getTableReferences
argument_list|(
name|join
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinTables
operator|==
literal|null
condition|)
block|{
comment|// Could not infer, bail out
return|return
name|cannotExtract
return|;
block|}
specifier|final
name|Set
argument_list|<
name|RelTableRef
argument_list|>
name|rightTables
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|joinTables
argument_list|,
name|leftTables
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|RelTableRef
argument_list|>
name|fkTables
init|=
name|join
operator|.
name|getLeft
argument_list|()
operator|==
name|fkInput
condition|?
name|leftTables
else|:
name|rightTables
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|RelTableRef
argument_list|>
name|nonFkTables
init|=
name|join
operator|.
name|getLeft
argument_list|()
operator|==
name|fkInput
condition|?
name|rightTables
else|:
name|leftTables
decl_stmt|;
comment|// 2) Check whether there is a FK relationship
name|Set
argument_list|<
name|RexCall
argument_list|>
name|candidatePredicates
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|EquivalenceClasses
name|ec
init|=
operator|new
name|EquivalenceClasses
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|conj
range|:
name|joinFilters
control|)
block|{
if|if
condition|(
operator|!
name|conj
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|EQUALS
argument_list|)
condition|)
block|{
comment|// Not an equality, continue
name|residualPreds
operator|.
name|add
argument_list|(
name|conj
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|RexCall
name|equiCond
init|=
operator|(
name|RexCall
operator|)
name|conj
decl_stmt|;
name|RexNode
name|eqOp1
init|=
name|equiCond
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|RexUtil
operator|.
name|isReferenceOrAccess
argument_list|(
name|eqOp1
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// Ignore
name|residualPreds
operator|.
name|add
argument_list|(
name|conj
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Set
argument_list|<
name|RexNode
argument_list|>
name|eqOp1ExprsLineage
init|=
name|mq
operator|.
name|getExpressionLineage
argument_list|(
name|join
argument_list|,
name|eqOp1
argument_list|)
decl_stmt|;
if|if
condition|(
name|eqOp1ExprsLineage
operator|==
literal|null
condition|)
block|{
comment|// Cannot be mapped, continue
name|residualPreds
operator|.
name|add
argument_list|(
name|conj
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|RexNode
name|eqOp2
init|=
name|equiCond
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|RexUtil
operator|.
name|isReferenceOrAccess
argument_list|(
name|eqOp2
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// Ignore
name|residualPreds
operator|.
name|add
argument_list|(
name|conj
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Set
argument_list|<
name|RexNode
argument_list|>
name|eqOp2ExprsLineage
init|=
name|mq
operator|.
name|getExpressionLineage
argument_list|(
name|join
argument_list|,
name|eqOp2
argument_list|)
decl_stmt|;
if|if
condition|(
name|eqOp2ExprsLineage
operator|==
literal|null
condition|)
block|{
comment|// Cannot be mapped, continue
name|residualPreds
operator|.
name|add
argument_list|(
name|conj
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|List
argument_list|<
name|RexTableInputRef
argument_list|>
name|eqOp2ExprsFiltered
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RexNode
name|eqOpExprLineage1
range|:
name|eqOp1ExprsLineage
control|)
block|{
name|RexTableInputRef
name|inputRef1
init|=
name|extractTableInputRef
argument_list|(
name|eqOpExprLineage1
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputRef1
operator|==
literal|null
condition|)
block|{
comment|// This condition could not be map into an input reference
continue|continue;
block|}
if|if
condition|(
name|eqOp2ExprsFiltered
operator|==
literal|null
condition|)
block|{
comment|// First iteration
name|eqOp2ExprsFiltered
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|RexNode
name|eqOpExprLineage2
range|:
name|eqOp2ExprsLineage
control|)
block|{
name|RexTableInputRef
name|inputRef2
init|=
name|extractTableInputRef
argument_list|(
name|eqOpExprLineage2
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputRef2
operator|==
literal|null
condition|)
block|{
comment|// Bail out as this condition could not be map into an input reference
continue|continue;
block|}
comment|// Add to list of expressions for follow-up iterations
name|eqOp2ExprsFiltered
operator|.
name|add
argument_list|(
name|inputRef2
argument_list|)
expr_stmt|;
comment|// Add to equivalence classes and backwards mapping
name|ec
operator|.
name|addEquivalence
argument_list|(
name|inputRef1
argument_list|,
name|inputRef2
argument_list|,
name|equiCond
argument_list|)
expr_stmt|;
name|candidatePredicates
operator|.
name|add
argument_list|(
name|equiCond
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Rest of iterations, only adding, no checking
for|for
control|(
name|RexTableInputRef
name|inputRef2
range|:
name|eqOp2ExprsFiltered
control|)
block|{
name|ec
operator|.
name|addEquivalence
argument_list|(
name|inputRef1
argument_list|,
name|inputRef2
argument_list|,
name|equiCond
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|candidatePredicates
operator|.
name|contains
argument_list|(
name|conj
argument_list|)
condition|)
block|{
comment|// We add it to residual already
name|residualPreds
operator|.
name|add
argument_list|(
name|conj
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ec
operator|.
name|getEquivalenceClassesMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// This may be a cartesian product, we bail out
return|return
name|cannotExtract
return|;
block|}
comment|// 4) For each table, check whether there is a matching on the non-FK side.
comment|// If there is and it is the only condition, we are ready to transform
for|for
control|(
specifier|final
name|RelTableRef
name|nonFkTable
range|:
name|nonFkTables
control|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nonFkTableQName
init|=
name|nonFkTable
operator|.
name|getQualifiedName
argument_list|()
decl_stmt|;
for|for
control|(
name|RelTableRef
name|tRef
range|:
name|fkTables
control|)
block|{
name|List
argument_list|<
name|RelReferentialConstraint
argument_list|>
name|constraints
init|=
name|tRef
operator|.
name|getTable
argument_list|()
operator|.
name|getReferentialConstraints
argument_list|()
decl_stmt|;
for|for
control|(
name|RelReferentialConstraint
name|constraint
range|:
name|constraints
control|)
block|{
if|if
condition|(
name|constraint
operator|.
name|getTargetQualifiedName
argument_list|()
operator|.
name|equals
argument_list|(
name|nonFkTableQName
argument_list|)
condition|)
block|{
name|EquivalenceClasses
name|ecT
init|=
name|EquivalenceClasses
operator|.
name|copy
argument_list|(
name|ec
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|RexNode
argument_list|>
name|removedOriginalPredicates
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|ImmutableBitSet
operator|.
name|Builder
name|lBitSet
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|ImmutableBitSet
operator|.
name|Builder
name|rBitSet
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|boolean
name|allContained
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|constraint
operator|.
name|getNumColumns
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|int
name|foreignKeyPos
init|=
name|constraint
operator|.
name|getColumnPairs
argument_list|()
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|.
name|source
decl_stmt|;
name|RelDataType
name|foreignKeyColumnType
init|=
name|tRef
operator|.
name|getTable
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|foreignKeyPos
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
name|RexTableInputRef
name|foreignKeyColumnRef
init|=
name|RexTableInputRef
operator|.
name|of
argument_list|(
name|tRef
argument_list|,
name|foreignKeyPos
argument_list|,
name|foreignKeyColumnType
argument_list|)
decl_stmt|;
name|int
name|uniqueKeyPos
init|=
name|constraint
operator|.
name|getColumnPairs
argument_list|()
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|.
name|target
decl_stmt|;
name|RexTableInputRef
name|uniqueKeyColumnRef
init|=
name|RexTableInputRef
operator|.
name|of
argument_list|(
name|nonFkTable
argument_list|,
name|uniqueKeyPos
argument_list|,
name|nonFkTable
operator|.
name|getTable
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|uniqueKeyPos
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ecT
operator|.
name|getEquivalenceClassesMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|uniqueKeyColumnRef
argument_list|)
operator|&&
name|ecT
operator|.
name|getEquivalenceClassesMap
argument_list|()
operator|.
name|get
argument_list|(
name|uniqueKeyColumnRef
argument_list|)
operator|.
name|contains
argument_list|(
name|foreignKeyColumnRef
argument_list|)
condition|)
block|{
comment|// Remove this condition from eq classes as we have checked that it is present
comment|// in the join condition. In turn, populate the columns that are referenced
comment|// from the join inputs
for|for
control|(
name|RexCall
name|originalPred
range|:
name|ecT
operator|.
name|removeEquivalence
argument_list|(
name|uniqueKeyColumnRef
argument_list|,
name|foreignKeyColumnRef
argument_list|)
control|)
block|{
name|ImmutableBitSet
name|leftCols
init|=
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|originalPred
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|ImmutableBitSet
name|rightCols
init|=
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|originalPred
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// Get length and flip column references if join condition specified in
comment|// reverse order to join sources
name|int
name|nFieldsLeft
init|=
name|join
operator|.
name|getLeft
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|nFieldsRight
init|=
name|join
operator|.
name|getRight
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|nSysFields
init|=
name|join
operator|.
name|getSystemFieldList
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|ImmutableBitSet
name|rightFieldsBitSet
init|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|nSysFields
operator|+
name|nFieldsLeft
argument_list|,
name|nSysFields
operator|+
name|nFieldsLeft
operator|+
name|nFieldsRight
argument_list|)
decl_stmt|;
if|if
condition|(
name|rightFieldsBitSet
operator|.
name|contains
argument_list|(
name|leftCols
argument_list|)
condition|)
block|{
name|ImmutableBitSet
name|t
init|=
name|leftCols
decl_stmt|;
name|leftCols
operator|=
name|rightCols
expr_stmt|;
name|rightCols
operator|=
name|t
expr_stmt|;
block|}
name|lBitSet
operator|.
name|set
argument_list|(
name|leftCols
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
operator|-
name|nSysFields
argument_list|)
expr_stmt|;
name|rBitSet
operator|.
name|set
argument_list|(
name|rightCols
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
operator|-
operator|(
name|nSysFields
operator|+
name|nFieldsLeft
operator|)
argument_list|)
expr_stmt|;
name|removedOriginalPredicates
operator|.
name|add
argument_list|(
name|originalPred
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// No relationship, we cannot do anything
name|allContained
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|allContained
condition|)
block|{
comment|// This is a PK-FK, reassign equivalence classes and remove conditions
comment|// TODO: Support inference of multiple PK-FK relationships
comment|// 4.1) Add to residual whatever is remaining
name|candidatePredicates
operator|.
name|removeAll
argument_list|(
name|removedOriginalPredicates
argument_list|)
expr_stmt|;
name|residualPreds
operator|.
name|addAll
argument_list|(
name|candidatePredicates
argument_list|)
expr_stmt|;
comment|// 4.2) Return result
return|return
name|PKFKJoinInfo
operator|.
name|of
argument_list|(
literal|true
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|lBitSet
operator|.
name|build
argument_list|()
argument_list|,
name|rBitSet
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
name|residualPreds
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
return|return
name|cannotExtract
return|;
block|}
specifier|public
specifier|static
class|class
name|PKFKJoinInfo
block|{
specifier|public
specifier|final
name|boolean
name|isPkFkJoin
decl_stmt|;
specifier|public
specifier|final
name|Pair
argument_list|<
name|ImmutableBitSet
argument_list|,
name|ImmutableBitSet
argument_list|>
name|pkFkJoinColumns
decl_stmt|;
specifier|public
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|additionalPredicates
decl_stmt|;
specifier|private
name|PKFKJoinInfo
parameter_list|(
name|boolean
name|isPkFkJoin
parameter_list|,
name|Pair
argument_list|<
name|ImmutableBitSet
argument_list|,
name|ImmutableBitSet
argument_list|>
name|pkFkJoinColumns
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|additionalPredicates
parameter_list|)
block|{
name|this
operator|.
name|isPkFkJoin
operator|=
name|isPkFkJoin
expr_stmt|;
name|this
operator|.
name|pkFkJoinColumns
operator|=
name|pkFkJoinColumns
expr_stmt|;
name|this
operator|.
name|additionalPredicates
operator|=
name|additionalPredicates
operator|==
literal|null
condition|?
literal|null
else|:
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|additionalPredicates
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|PKFKJoinInfo
name|of
parameter_list|(
name|boolean
name|isPkFkJoin
parameter_list|,
name|Pair
argument_list|<
name|ImmutableBitSet
argument_list|,
name|ImmutableBitSet
argument_list|>
name|pkFkJoinColumns
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|additionalPredicates
parameter_list|)
block|{
return|return
operator|new
name|PKFKJoinInfo
argument_list|(
name|isPkFkJoin
argument_list|,
name|pkFkJoinColumns
argument_list|,
name|additionalPredicates
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|RewritablePKFKJoinInfo
name|isRewritablePKFKJoin
parameter_list|(
name|Join
name|join
parameter_list|,
name|boolean
name|leftInputPotentialFK
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
specifier|final
name|JoinRelType
name|joinType
init|=
name|join
operator|.
name|getJoinType
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|cond
init|=
name|join
operator|.
name|getCondition
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|fkInput
init|=
name|leftInputPotentialFK
condition|?
name|join
operator|.
name|getLeft
argument_list|()
else|:
name|join
operator|.
name|getRight
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|nonFkInput
init|=
name|leftInputPotentialFK
condition|?
name|join
operator|.
name|getRight
argument_list|()
else|:
name|join
operator|.
name|getLeft
argument_list|()
decl_stmt|;
specifier|final
name|RewritablePKFKJoinInfo
name|nonRewritable
init|=
name|RewritablePKFKJoinInfo
operator|.
name|of
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinType
operator|!=
name|JoinRelType
operator|.
name|INNER
condition|)
block|{
comment|// If it is not an inner, we transform it as the metadata
comment|// providers for expressions do not pull information through
comment|// outer join (as it would not be correct)
name|join
operator|=
name|join
operator|.
name|copy
argument_list|(
name|join
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|cond
argument_list|,
name|join
operator|.
name|getLeft
argument_list|()
argument_list|,
name|join
operator|.
name|getRight
argument_list|()
argument_list|,
name|JoinRelType
operator|.
name|INNER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// 1) Check whether there is any filtering condition on the
comment|// non-FK side. Basically we check whether the operators
comment|// below altered the PK cardinality in any way
if|if
condition|(
name|HiveRelOptUtil
operator|.
name|isRowFilteringPlan
argument_list|(
name|mq
argument_list|,
name|nonFkInput
argument_list|)
condition|)
block|{
return|return
name|nonRewritable
return|;
block|}
comment|// 2) Check whether there is an FK relationship
specifier|final
name|Map
argument_list|<
name|RexTableInputRef
argument_list|,
name|RexNode
argument_list|>
name|refToRex
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|EquivalenceClasses
name|ec
init|=
operator|new
name|EquivalenceClasses
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|conj
range|:
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|cond
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|conj
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|EQUALS
argument_list|)
condition|)
block|{
comment|// Not an equality, we bail out
return|return
name|nonRewritable
return|;
block|}
name|RexCall
name|equiCond
init|=
operator|(
name|RexCall
operator|)
name|conj
decl_stmt|;
name|RexNode
name|eqOp1
init|=
name|equiCond
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|RexNode
argument_list|>
name|eqOp1ExprsLineage
init|=
name|mq
operator|.
name|getExpressionLineage
argument_list|(
name|join
argument_list|,
name|eqOp1
argument_list|)
decl_stmt|;
if|if
condition|(
name|eqOp1ExprsLineage
operator|==
literal|null
condition|)
block|{
comment|// Cannot be mapped, bail out
return|return
name|nonRewritable
return|;
block|}
name|RexNode
name|eqOp2
init|=
name|equiCond
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|RexNode
argument_list|>
name|eqOp2ExprsLineage
init|=
name|mq
operator|.
name|getExpressionLineage
argument_list|(
name|join
argument_list|,
name|eqOp2
argument_list|)
decl_stmt|;
if|if
condition|(
name|eqOp2ExprsLineage
operator|==
literal|null
condition|)
block|{
comment|// Cannot be mapped, bail out
return|return
name|nonRewritable
return|;
block|}
name|List
argument_list|<
name|RexTableInputRef
argument_list|>
name|eqOp2ExprsFiltered
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RexNode
name|eqOpExprLineage1
range|:
name|eqOp1ExprsLineage
control|)
block|{
name|RexTableInputRef
name|inputRef1
init|=
name|extractTableInputRef
argument_list|(
name|eqOpExprLineage1
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputRef1
operator|==
literal|null
condition|)
block|{
comment|// Bail out as this condition could not be map into an input reference
return|return
name|nonRewritable
return|;
block|}
name|refToRex
operator|.
name|put
argument_list|(
name|inputRef1
argument_list|,
name|eqOp1
argument_list|)
expr_stmt|;
if|if
condition|(
name|eqOp2ExprsFiltered
operator|==
literal|null
condition|)
block|{
comment|// First iteration
name|eqOp2ExprsFiltered
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|RexNode
name|eqOpExprLineage2
range|:
name|eqOp2ExprsLineage
control|)
block|{
name|RexTableInputRef
name|inputRef2
init|=
name|extractTableInputRef
argument_list|(
name|eqOpExprLineage2
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputRef2
operator|==
literal|null
condition|)
block|{
comment|// Bail out as this condition could not be map into an input reference
return|return
name|nonRewritable
return|;
block|}
comment|// Add to list of expressions for follow-up iterations
name|eqOp2ExprsFiltered
operator|.
name|add
argument_list|(
name|inputRef2
argument_list|)
expr_stmt|;
comment|// Add to equivalence classes and backwards mapping
name|ec
operator|.
name|addEquivalence
argument_list|(
name|inputRef1
argument_list|,
name|inputRef2
argument_list|)
expr_stmt|;
name|refToRex
operator|.
name|put
argument_list|(
name|inputRef2
argument_list|,
name|eqOp2
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Rest of iterations, only adding, no checking
for|for
control|(
name|RexTableInputRef
name|inputRef2
range|:
name|eqOp2ExprsFiltered
control|)
block|{
name|ec
operator|.
name|addEquivalence
argument_list|(
name|inputRef1
argument_list|,
name|inputRef2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|ec
operator|.
name|getEquivalenceClassesMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// This may be a cartesian product, we bail out
return|return
name|nonRewritable
return|;
block|}
comment|// 3) Gather all tables from the FK side and the table from the
comment|// non-FK side
specifier|final
name|Set
argument_list|<
name|RelTableRef
argument_list|>
name|leftTables
init|=
name|mq
operator|.
name|getTableReferences
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|RelTableRef
argument_list|>
name|rightTables
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|mq
operator|.
name|getTableReferences
argument_list|(
name|join
argument_list|)
argument_list|,
name|mq
operator|.
name|getTableReferences
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|RelTableRef
argument_list|>
name|fkTables
init|=
name|join
operator|.
name|getLeft
argument_list|()
operator|==
name|fkInput
condition|?
name|leftTables
else|:
name|rightTables
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|RelTableRef
argument_list|>
name|nonFkTables
init|=
name|join
operator|.
name|getLeft
argument_list|()
operator|==
name|fkInput
condition|?
name|rightTables
else|:
name|leftTables
decl_stmt|;
assert|assert
name|nonFkTables
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
specifier|final
name|RelTableRef
name|nonFkTable
init|=
name|nonFkTables
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nonFkTableQName
init|=
name|nonFkTable
operator|.
name|getQualifiedName
argument_list|()
decl_stmt|;
comment|// 4) For each table, check whether there is a matching on the non-FK side.
comment|// If there is and it is the only condition, we are ready to transform
name|boolean
name|canBeRewritten
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|nullableNodes
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RelTableRef
name|tRef
range|:
name|fkTables
control|)
block|{
name|List
argument_list|<
name|RelReferentialConstraint
argument_list|>
name|constraints
init|=
name|tRef
operator|.
name|getTable
argument_list|()
operator|.
name|getReferentialConstraints
argument_list|()
decl_stmt|;
for|for
control|(
name|RelReferentialConstraint
name|constraint
range|:
name|constraints
control|)
block|{
if|if
condition|(
name|constraint
operator|.
name|getTargetQualifiedName
argument_list|()
operator|.
name|equals
argument_list|(
name|nonFkTableQName
argument_list|)
condition|)
block|{
name|nullableNodes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|EquivalenceClasses
name|ecT
init|=
name|EquivalenceClasses
operator|.
name|copy
argument_list|(
name|ec
argument_list|)
decl_stmt|;
name|boolean
name|allContained
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|constraint
operator|.
name|getNumColumns
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|int
name|foreignKeyPos
init|=
name|constraint
operator|.
name|getColumnPairs
argument_list|()
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|.
name|source
decl_stmt|;
name|RelDataType
name|foreignKeyColumnType
init|=
name|tRef
operator|.
name|getTable
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|foreignKeyPos
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
name|RexTableInputRef
name|foreignKeyColumnRef
init|=
name|RexTableInputRef
operator|.
name|of
argument_list|(
name|tRef
argument_list|,
name|foreignKeyPos
argument_list|,
name|foreignKeyColumnType
argument_list|)
decl_stmt|;
name|int
name|uniqueKeyPos
init|=
name|constraint
operator|.
name|getColumnPairs
argument_list|()
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|.
name|target
decl_stmt|;
name|RexTableInputRef
name|uniqueKeyColumnRef
init|=
name|RexTableInputRef
operator|.
name|of
argument_list|(
name|nonFkTable
argument_list|,
name|uniqueKeyPos
argument_list|,
name|nonFkTable
operator|.
name|getTable
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|uniqueKeyPos
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ecT
operator|.
name|getEquivalenceClassesMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|uniqueKeyColumnRef
argument_list|)
operator|&&
name|ecT
operator|.
name|getEquivalenceClassesMap
argument_list|()
operator|.
name|get
argument_list|(
name|uniqueKeyColumnRef
argument_list|)
operator|.
name|contains
argument_list|(
name|foreignKeyColumnRef
argument_list|)
condition|)
block|{
if|if
condition|(
name|foreignKeyColumnType
operator|.
name|isNullable
argument_list|()
condition|)
block|{
if|if
condition|(
name|joinType
operator|==
name|JoinRelType
operator|.
name|INNER
condition|)
block|{
comment|// If it is nullable and it is an INNER, we just need a IS NOT NULL filter
name|RexNode
name|originalCondOp
init|=
name|refToRex
operator|.
name|get
argument_list|(
name|foreignKeyColumnRef
argument_list|)
decl_stmt|;
assert|assert
name|originalCondOp
operator|!=
literal|null
assert|;
name|nullableNodes
operator|.
name|add
argument_list|(
name|originalCondOp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If it is nullable and this is not an INNER, we cannot execute any transformation
name|allContained
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
comment|// Remove this condition from eq classes as we have checked that it is present
comment|// in the join condition
name|ecT
operator|.
name|removeEquivalence
argument_list|(
name|uniqueKeyColumnRef
argument_list|,
name|foreignKeyColumnRef
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// No relationship, we cannot do anything
name|allContained
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|allContained
operator|&&
name|ecT
operator|.
name|getEquivalenceClassesMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// We made it
name|canBeRewritten
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|RewritablePKFKJoinInfo
operator|.
name|of
argument_list|(
name|canBeRewritten
argument_list|,
name|nullableNodes
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|RewritablePKFKJoinInfo
block|{
specifier|public
specifier|final
name|boolean
name|rewritable
decl_stmt|;
specifier|public
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|nullableNodes
decl_stmt|;
specifier|private
name|RewritablePKFKJoinInfo
parameter_list|(
name|boolean
name|rewritable
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|nullableNodes
parameter_list|)
block|{
name|this
operator|.
name|rewritable
operator|=
name|rewritable
expr_stmt|;
name|this
operator|.
name|nullableNodes
operator|=
name|nullableNodes
operator|==
literal|null
condition|?
literal|null
else|:
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|nullableNodes
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|RewritablePKFKJoinInfo
name|of
parameter_list|(
name|boolean
name|rewritable
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|nullableNodes
parameter_list|)
block|{
return|return
operator|new
name|RewritablePKFKJoinInfo
argument_list|(
name|rewritable
argument_list|,
name|nullableNodes
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|RexTableInputRef
name|extractTableInputRef
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
name|RexTableInputRef
name|ref
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|RexTableInputRef
condition|)
block|{
name|ref
operator|=
operator|(
name|RexTableInputRef
operator|)
name|node
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|RexUtil
operator|.
name|isLosslessCast
argument_list|(
name|node
argument_list|)
operator|&&
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|RexTableInputRef
condition|)
block|{
name|ref
operator|=
call|(
name|RexTableInputRef
call|)
argument_list|(
operator|(
name|RexCall
operator|)
name|node
argument_list|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|ref
return|;
block|}
comment|/**    * Class representing an equivalence class, i.e., a set of equivalent columns    *    * TODO: This is a subset of a private class in materialized view rewriting    * in Calcite. It should be moved to its own class in Calcite so it can be    * accessible here.    */
specifier|private
specifier|static
class|class
name|EquivalenceClasses
block|{
comment|// Contains the node to equivalence class nodes
specifier|private
specifier|final
name|Map
argument_list|<
name|RexTableInputRef
argument_list|,
name|Set
argument_list|<
name|RexTableInputRef
argument_list|>
argument_list|>
name|nodeToEquivalenceClass
decl_stmt|;
comment|// Contains the pair of equivalences to original expression that they originate from
specifier|private
specifier|final
name|Multimap
argument_list|<
name|Pair
argument_list|<
name|RexTableInputRef
argument_list|,
name|RexTableInputRef
argument_list|>
argument_list|,
name|RexCall
argument_list|>
name|equivalenceToOriginalNode
decl_stmt|;
specifier|protected
name|EquivalenceClasses
parameter_list|()
block|{
name|nodeToEquivalenceClass
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|equivalenceToOriginalNode
operator|=
name|HashMultimap
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|addEquivalence
parameter_list|(
name|RexTableInputRef
name|p1
parameter_list|,
name|RexTableInputRef
name|p2
parameter_list|,
name|RexCall
name|originalCond
parameter_list|)
block|{
name|addEquivalence
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
name|equivalenceToOriginalNode
operator|.
name|put
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|,
name|originalCond
argument_list|)
expr_stmt|;
name|equivalenceToOriginalNode
operator|.
name|put
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|p2
argument_list|,
name|p1
argument_list|)
argument_list|,
name|originalCond
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addEquivalence
parameter_list|(
name|RexTableInputRef
name|p1
parameter_list|,
name|RexTableInputRef
name|p2
parameter_list|)
block|{
name|Set
argument_list|<
name|RexTableInputRef
argument_list|>
name|c1
init|=
name|nodeToEquivalenceClass
operator|.
name|get
argument_list|(
name|p1
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|RexTableInputRef
argument_list|>
name|c2
init|=
name|nodeToEquivalenceClass
operator|.
name|get
argument_list|(
name|p2
argument_list|)
decl_stmt|;
if|if
condition|(
name|c1
operator|!=
literal|null
operator|&&
name|c2
operator|!=
literal|null
condition|)
block|{
comment|// Both present, we need to merge
if|if
condition|(
name|c1
operator|.
name|size
argument_list|()
operator|<
name|c2
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// We swap them to merge
name|Set
argument_list|<
name|RexTableInputRef
argument_list|>
name|c2Temp
init|=
name|c2
decl_stmt|;
name|c2
operator|=
name|c1
expr_stmt|;
name|c1
operator|=
name|c2Temp
expr_stmt|;
block|}
for|for
control|(
name|RexTableInputRef
name|newRef
range|:
name|c2
control|)
block|{
name|c1
operator|.
name|add
argument_list|(
name|newRef
argument_list|)
expr_stmt|;
name|nodeToEquivalenceClass
operator|.
name|put
argument_list|(
name|newRef
argument_list|,
name|c1
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|c1
operator|!=
literal|null
condition|)
block|{
comment|// p1 present, we need to merge into it
name|c1
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|nodeToEquivalenceClass
operator|.
name|put
argument_list|(
name|p2
argument_list|,
name|c1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c2
operator|!=
literal|null
condition|)
block|{
comment|// p2 present, we need to merge into it
name|c2
operator|.
name|add
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|nodeToEquivalenceClass
operator|.
name|put
argument_list|(
name|p1
argument_list|,
name|c2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// None are present, add to same equivalence class
name|Set
argument_list|<
name|RexTableInputRef
argument_list|>
name|equivalenceClass
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|equivalenceClass
operator|.
name|add
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|equivalenceClass
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|nodeToEquivalenceClass
operator|.
name|put
argument_list|(
name|p1
argument_list|,
name|equivalenceClass
argument_list|)
expr_stmt|;
name|nodeToEquivalenceClass
operator|.
name|put
argument_list|(
name|p2
argument_list|,
name|equivalenceClass
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Map
argument_list|<
name|RexTableInputRef
argument_list|,
name|Set
argument_list|<
name|RexTableInputRef
argument_list|>
argument_list|>
name|getEquivalenceClassesMap
parameter_list|()
block|{
return|return
name|nodeToEquivalenceClass
return|;
block|}
comment|// Returns the original nodes that the equivalences were generated from
specifier|protected
name|Set
argument_list|<
name|RexCall
argument_list|>
name|removeEquivalence
parameter_list|(
name|RexTableInputRef
name|p1
parameter_list|,
name|RexTableInputRef
name|p2
parameter_list|)
block|{
name|nodeToEquivalenceClass
operator|.
name|get
argument_list|(
name|p1
argument_list|)
operator|.
name|remove
argument_list|(
name|p2
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeToEquivalenceClass
operator|.
name|get
argument_list|(
name|p1
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// self
name|nodeToEquivalenceClass
operator|.
name|remove
argument_list|(
name|p1
argument_list|)
expr_stmt|;
block|}
name|nodeToEquivalenceClass
operator|.
name|get
argument_list|(
name|p2
argument_list|)
operator|.
name|remove
argument_list|(
name|p1
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeToEquivalenceClass
operator|.
name|get
argument_list|(
name|p2
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// self
name|nodeToEquivalenceClass
operator|.
name|remove
argument_list|(
name|p2
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|RexCall
argument_list|>
name|originalNodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|originalNodes
operator|.
name|addAll
argument_list|(
name|equivalenceToOriginalNode
operator|.
name|removeAll
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|originalNodes
operator|.
name|addAll
argument_list|(
name|equivalenceToOriginalNode
operator|.
name|removeAll
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|p2
argument_list|,
name|p1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|originalNodes
return|;
block|}
specifier|protected
specifier|static
name|EquivalenceClasses
name|copy
parameter_list|(
name|EquivalenceClasses
name|ec
parameter_list|)
block|{
specifier|final
name|EquivalenceClasses
name|newEc
init|=
operator|new
name|EquivalenceClasses
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|RexTableInputRef
argument_list|,
name|Set
argument_list|<
name|RexTableInputRef
argument_list|>
argument_list|>
name|e
range|:
name|ec
operator|.
name|nodeToEquivalenceClass
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|newEc
operator|.
name|nodeToEquivalenceClass
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|Sets
operator|.
name|newLinkedHashSet
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|Pair
argument_list|<
name|RexTableInputRef
argument_list|,
name|RexTableInputRef
argument_list|>
argument_list|,
name|Collection
argument_list|<
name|RexCall
argument_list|>
argument_list|>
name|e
range|:
name|ec
operator|.
name|equivalenceToOriginalNode
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|newEc
operator|.
name|equivalenceToOriginalNode
operator|.
name|putAll
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|newEc
return|;
block|}
block|}
specifier|public
specifier|static
name|Pair
argument_list|<
name|RelOptTable
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|getColumnOriginSet
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|ImmutableBitSet
name|colSet
parameter_list|)
block|{
name|RelMetadataQuery
name|mq
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
name|RexBuilder
name|rexBuilder
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|RelTableRef
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|tabToOriginColumns
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|col
range|:
name|colSet
control|)
block|{
specifier|final
name|RexInputRef
name|tempColRef
init|=
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|rel
argument_list|,
name|col
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|RexNode
argument_list|>
name|columnOrigins
init|=
name|mq
operator|.
name|getExpressionLineage
argument_list|(
name|rel
argument_list|,
name|tempColRef
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|columnOrigins
operator|||
name|columnOrigins
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// if even on
return|return
literal|null
return|;
block|}
comment|// we have either one or multiple origins of the column, we need to make sure that all of the column
for|for
control|(
name|RexNode
name|orgCol
range|:
name|columnOrigins
control|)
block|{
name|RexTableInputRef
name|inputRef
init|=
name|extractTableInputRef
argument_list|(
name|orgCol
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputRef
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|cols
init|=
name|tabToOriginColumns
operator|.
name|get
argument_list|(
name|inputRef
operator|.
name|getTableRef
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cols
operator|==
literal|null
condition|)
block|{
name|cols
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|cols
operator|.
name|add
argument_list|(
name|inputRef
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|tabToOriginColumns
operator|.
name|put
argument_list|(
name|inputRef
operator|.
name|getTableRef
argument_list|()
argument_list|,
name|cols
argument_list|)
expr_stmt|;
block|}
block|}
comment|// return the first table which has same number of backtracked columns as colSet
comment|// ideally we should return all, in case one doesn't work we can fall back to another
for|for
control|(
name|Entry
argument_list|<
name|RelTableRef
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|mapEntries
range|:
name|tabToOriginColumns
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|RelTableRef
name|tblRef
init|=
name|mapEntries
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|mapColList
init|=
name|mapEntries
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapColList
operator|.
name|size
argument_list|()
operator|==
name|colSet
operator|.
name|cardinality
argument_list|()
condition|)
block|{
name|RelOptTable
name|tbl
init|=
name|tblRef
operator|.
name|getTable
argument_list|()
decl_stmt|;
return|return
name|Pair
operator|.
name|of
argument_list|(
name|tbl
argument_list|,
name|mapColList
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Converts a relational expression to a string, showing information that will aid    * to parse the string back.    */
specifier|public
specifier|static
name|String
name|toJsonString
parameter_list|(
specifier|final
name|RelNode
name|rel
parameter_list|)
block|{
if|if
condition|(
name|rel
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|HiveRelJsonImpl
name|planWriter
init|=
operator|new
name|HiveRelJsonImpl
argument_list|()
decl_stmt|;
name|rel
operator|.
name|explain
argument_list|(
name|planWriter
argument_list|)
expr_stmt|;
return|return
name|planWriter
operator|.
name|asString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

