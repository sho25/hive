begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidTxnList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveVariableSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|VariableSubstitution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExplainTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FetchTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|util
operator|.
name|ReplUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|HookUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveTxnManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveSemanticAnalyzerHookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveSemanticAnalyzerHookContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticAnalyzerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|command
operator|.
name|CommandAuthorizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|LogHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_comment
comment|/**  * The compiler compiles the command, by creating a QueryPlan from a String command.  * Also opens a transaction if necessary.  */
end_comment

begin_class
specifier|public
class|class
name|Compiler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CLASS_NAME
init|=
name|Driver
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CLASS_NAME
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|LogHelper
name|CONSOLE
init|=
operator|new
name|LogHelper
argument_list|(
name|LOG
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Context
name|context
decl_stmt|;
specifier|private
specifier|final
name|DriverContext
name|driverContext
decl_stmt|;
specifier|private
specifier|final
name|DriverState
name|driverState
decl_stmt|;
specifier|private
name|ASTNode
name|tree
decl_stmt|;
specifier|public
name|Compiler
parameter_list|(
name|Context
name|context
parameter_list|,
name|DriverContext
name|driverContext
parameter_list|,
name|DriverState
name|driverState
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|driverContext
operator|=
name|driverContext
expr_stmt|;
name|this
operator|.
name|driverState
operator|=
name|driverState
expr_stmt|;
block|}
comment|/**    * @param deferClose indicates if the close/destroy should be deferred when the process has been interrupted    *             it should be set to true if the compile is called within another method like runInternal,    *             which defers the close to the called in that method.    */
specifier|public
name|QueryPlan
name|compile
parameter_list|(
name|String
name|rawCommand
parameter_list|,
name|boolean
name|deferClose
parameter_list|)
throws|throws
name|CommandProcessorException
block|{
name|initialize
argument_list|(
name|rawCommand
argument_list|)
expr_stmt|;
name|boolean
name|compileError
init|=
literal|false
decl_stmt|;
name|boolean
name|parsed
init|=
literal|false
decl_stmt|;
name|QueryPlan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|DriverUtils
operator|.
name|checkInterrupted
argument_list|(
name|driverState
argument_list|,
name|driverContext
argument_list|,
literal|"before parsing and analysing the query"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|parse
argument_list|()
expr_stmt|;
name|parsed
operator|=
literal|true
expr_stmt|;
name|BaseSemanticAnalyzer
name|sem
init|=
name|analyze
argument_list|()
decl_stmt|;
name|DriverUtils
operator|.
name|checkInterrupted
argument_list|(
name|driverState
argument_list|,
name|driverContext
argument_list|,
literal|"after analyzing query."
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|plan
operator|=
name|createPlan
argument_list|(
name|sem
argument_list|)
expr_stmt|;
name|authorize
argument_list|(
name|sem
argument_list|)
expr_stmt|;
name|explainOutput
argument_list|(
name|sem
argument_list|,
name|plan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandProcessorException
name|cpe
parameter_list|)
block|{
name|compileError
operator|=
literal|true
expr_stmt|;
throw|throw
name|cpe
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|compileError
operator|=
literal|true
expr_stmt|;
name|DriverUtils
operator|.
name|checkInterrupted
argument_list|(
name|driverState
argument_list|,
name|driverContext
argument_list|,
literal|"during query compilation: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanUp
argument_list|(
name|compileError
argument_list|,
name|parsed
argument_list|,
name|deferClose
argument_list|)
expr_stmt|;
block|}
return|return
name|plan
return|;
block|}
specifier|private
name|void
name|initialize
parameter_list|(
name|String
name|rawCommand
parameter_list|)
throws|throws
name|CommandProcessorException
block|{
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|COMPILE
argument_list|)
expr_stmt|;
name|driverState
operator|.
name|compilingWithLocking
argument_list|()
expr_stmt|;
name|VariableSubstitution
name|variableSubstitution
init|=
operator|new
name|VariableSubstitution
argument_list|(
operator|new
name|HiveVariableSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHiveVariable
parameter_list|()
block|{
return|return
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveVariables
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|String
name|command
init|=
name|variableSubstitution
operator|.
name|substitute
argument_list|(
name|driverContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|rawCommand
argument_list|)
decl_stmt|;
name|String
name|queryStr
init|=
name|command
decl_stmt|;
try|try
block|{
comment|// command should be redacted to avoid to logging sensitive data
name|queryStr
operator|=
name|HookUtils
operator|.
name|redactLogString
argument_list|(
name|driverContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"WARNING! Query command could not be redacted."
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|DriverUtils
operator|.
name|checkInterrupted
argument_list|(
name|driverState
argument_list|,
name|driverContext
argument_list|,
literal|"at beginning of compilation."
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|context
operator|.
name|setCmd
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|driverContext
operator|.
name|getQueryDisplay
argument_list|()
operator|.
name|setQueryStr
argument_list|(
name|queryStr
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Compiling command(queryId="
operator|+
name|driverContext
operator|.
name|getQueryId
argument_list|()
operator|+
literal|"): "
operator|+
name|queryStr
argument_list|)
expr_stmt|;
name|driverContext
operator|.
name|getConf
argument_list|()
operator|.
name|setQueryString
argument_list|(
name|queryStr
argument_list|)
expr_stmt|;
comment|// FIXME: side effect will leave the last query set at the session level
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
operator|.
name|setQueryString
argument_list|(
name|queryStr
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setupQueryCurrentTimestamp
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|parse
parameter_list|()
throws|throws
name|ParseException
block|{
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|PARSE
argument_list|)
expr_stmt|;
comment|// Trigger query hook before compilation
name|driverContext
operator|.
name|getHookRunner
argument_list|()
operator|.
name|runBeforeParseHook
argument_list|(
name|context
operator|.
name|getCmd
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|tree
operator|=
name|ParseUtils
operator|.
name|parse
argument_list|(
name|context
operator|.
name|getCmd
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|driverContext
operator|.
name|getHookRunner
argument_list|()
operator|.
name|runAfterParseHook
argument_list|(
name|context
operator|.
name|getCmd
argument_list|()
argument_list|,
operator|!
name|success
argument_list|)
expr_stmt|;
block|}
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|PARSE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|BaseSemanticAnalyzer
name|analyze
parameter_list|()
throws|throws
name|Exception
block|{
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|ANALYZE
argument_list|)
expr_stmt|;
name|driverContext
operator|.
name|getHookRunner
argument_list|()
operator|.
name|runBeforeCompileHook
argument_list|(
name|context
operator|.
name|getCmd
argument_list|()
argument_list|)
expr_stmt|;
comment|// clear CurrentFunctionsInUse set, to capture new set of functions
comment|// that SemanticAnalyzer finds are in use
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentFunctionsInUse
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Flush the metastore cache.  This assures that we don't pick up objects from a previous
comment|// query running in this same thread.  This has to be done after we get our semantic
comment|// analyzer (this is when the connection to the metastore is made) but before we analyze,
comment|// because at that point we need access to the objects.
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getMSC
argument_list|()
operator|.
name|flushCache
argument_list|()
expr_stmt|;
name|driverContext
operator|.
name|setBackupContext
argument_list|(
operator|new
name|Context
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|executeHooks
init|=
name|driverContext
operator|.
name|getHookRunner
argument_list|()
operator|.
name|hasPreAnalyzeHooks
argument_list|()
decl_stmt|;
name|HiveSemanticAnalyzerHookContext
name|hookCtx
init|=
operator|new
name|HiveSemanticAnalyzerHookContextImpl
argument_list|()
decl_stmt|;
if|if
condition|(
name|executeHooks
condition|)
block|{
name|hookCtx
operator|.
name|setConf
argument_list|(
name|driverContext
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|hookCtx
operator|.
name|setUserName
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|hookCtx
operator|.
name|setIpAddress
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getUserIpAddress
argument_list|()
argument_list|)
expr_stmt|;
name|hookCtx
operator|.
name|setCommand
argument_list|(
name|context
operator|.
name|getCmd
argument_list|()
argument_list|)
expr_stmt|;
name|hookCtx
operator|.
name|setHiveOperation
argument_list|(
name|driverContext
operator|.
name|getQueryState
argument_list|()
operator|.
name|getHiveOperation
argument_list|()
argument_list|)
expr_stmt|;
name|tree
operator|=
name|driverContext
operator|.
name|getHookRunner
argument_list|()
operator|.
name|runPreAnalyzeHooks
argument_list|(
name|hookCtx
argument_list|,
name|tree
argument_list|)
expr_stmt|;
block|}
comment|// SemanticAnalyzerFactory also sets the hive operation in query state
name|BaseSemanticAnalyzer
name|sem
init|=
name|SemanticAnalyzerFactory
operator|.
name|get
argument_list|(
name|driverContext
operator|.
name|getQueryState
argument_list|()
argument_list|,
name|tree
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|driverContext
operator|.
name|isRetrial
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|driverContext
operator|.
name|getQueryState
argument_list|()
operator|.
name|getHiveOperation
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
name|driverContext
operator|.
name|getQueryState
argument_list|()
operator|.
name|getHiveOperation
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|REPLDUMP
argument_list|)
condition|)
block|{
name|setLastReplIdForDump
argument_list|(
name|driverContext
operator|.
name|getQueryState
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|driverContext
operator|.
name|setTxnType
argument_list|(
name|AcidUtils
operator|.
name|getTxnType
argument_list|(
name|driverContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|tree
argument_list|)
argument_list|)
expr_stmt|;
name|openTransaction
argument_list|(
name|driverContext
operator|.
name|getTxnType
argument_list|()
argument_list|)
expr_stmt|;
name|generateValidTxnList
argument_list|()
expr_stmt|;
block|}
comment|// Do semantic analysis and plan generation
name|sem
operator|.
name|analyze
argument_list|(
name|tree
argument_list|,
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|executeHooks
condition|)
block|{
name|hookCtx
operator|.
name|update
argument_list|(
name|sem
argument_list|)
expr_stmt|;
name|driverContext
operator|.
name|getHookRunner
argument_list|()
operator|.
name|runPostAnalyzeHooks
argument_list|(
name|hookCtx
argument_list|,
name|sem
operator|.
name|getAllRootTasks
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Semantic Analysis Completed (retrial = {})"
argument_list|,
name|driverContext
operator|.
name|isRetrial
argument_list|()
argument_list|)
expr_stmt|;
comment|// Retrieve information about cache usage for the query.
if|if
condition|(
name|driverContext
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_QUERY_RESULTS_CACHE_ENABLED
argument_list|)
condition|)
block|{
name|driverContext
operator|.
name|setCacheUsage
argument_list|(
name|sem
operator|.
name|getCacheUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// validate the plan
name|sem
operator|.
name|validate
argument_list|()
expr_stmt|;
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|ANALYZE
argument_list|)
expr_stmt|;
return|return
name|sem
return|;
block|}
comment|/**    * Last repl id should be captured before opening txn by current REPL DUMP operation.    * This is needed to avoid losing data which are added/modified by concurrent txns when bootstrap    * dump in progress.    * @param conf Query configurations    * @throws HiveException    * @throws TException    */
specifier|private
name|void
name|setLastReplIdForDump
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|HiveException
throws|,
name|TException
block|{
comment|// Last logged notification event id would be the last repl Id for the current REPl DUMP.
name|Hive
name|hiveDb
init|=
name|Hive
operator|.
name|get
argument_list|()
decl_stmt|;
name|Long
name|lastReplId
init|=
name|hiveDb
operator|.
name|getMSC
argument_list|()
operator|.
name|getCurrentNotificationEventId
argument_list|()
operator|.
name|getEventId
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|ReplUtils
operator|.
name|LAST_REPL_ID_KEY
argument_list|,
name|lastReplId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting "
operator|+
name|ReplUtils
operator|.
name|LAST_REPL_ID_KEY
operator|+
literal|" = "
operator|+
name|lastReplId
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|openTransaction
parameter_list|(
name|TxnType
name|txnType
parameter_list|)
throws|throws
name|LockException
throws|,
name|CommandProcessorException
block|{
if|if
condition|(
name|DriverUtils
operator|.
name|checkConcurrency
argument_list|(
name|driverContext
argument_list|)
operator|&&
name|startImplicitTxn
argument_list|(
name|driverContext
operator|.
name|getTxnManager
argument_list|()
argument_list|)
operator|&&
operator|!
name|driverContext
operator|.
name|getTxnManager
argument_list|()
operator|.
name|isTxnOpen
argument_list|()
condition|)
block|{
name|String
name|userFromUGI
init|=
name|DriverUtils
operator|.
name|getUserFromUGI
argument_list|(
name|driverContext
argument_list|)
decl_stmt|;
name|driverContext
operator|.
name|getTxnManager
argument_list|()
operator|.
name|openTxn
argument_list|(
name|context
argument_list|,
name|userFromUGI
argument_list|,
name|txnType
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|startImplicitTxn
parameter_list|(
name|HiveTxnManager
name|txnManager
parameter_list|)
throws|throws
name|LockException
block|{
comment|//this is dumb. HiveOperation is not always set. see HIVE-16447/HIVE-16443
name|HiveOperation
name|hiveOperation
init|=
name|driverContext
operator|.
name|getQueryState
argument_list|()
operator|.
name|getHiveOperation
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|hiveOperation
operator|==
literal|null
condition|?
name|HiveOperation
operator|.
name|QUERY
else|:
name|hiveOperation
condition|)
block|{
case|case
name|COMMIT
case|:
case|case
name|ROLLBACK
case|:
if|if
condition|(
operator|!
name|txnManager
operator|.
name|isTxnOpen
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
literal|null
argument_list|,
name|ErrorMsg
operator|.
name|OP_NOT_ALLOWED_WITHOUT_TXN
argument_list|,
name|hiveOperation
operator|.
name|getOperationName
argument_list|()
argument_list|)
throw|;
block|}
case|case
name|SWITCHDATABASE
case|:
case|case
name|SET_AUTOCOMMIT
case|:
comment|/**        * autocommit is here for completeness.  TM doesn't use it.  If we want to support JDBC        * semantics (or any other definition of autocommit) it should be done at session level.        */
case|case
name|SHOWDATABASES
case|:
case|case
name|SHOWTABLES
case|:
case|case
name|SHOWCOLUMNS
case|:
case|case
name|SHOWFUNCTIONS
case|:
case|case
name|SHOWPARTITIONS
case|:
case|case
name|SHOWLOCKS
case|:
case|case
name|SHOWVIEWS
case|:
case|case
name|SHOW_ROLES
case|:
case|case
name|SHOW_ROLE_PRINCIPALS
case|:
case|case
name|SHOW_COMPACTIONS
case|:
case|case
name|SHOW_TRANSACTIONS
case|:
case|case
name|ABORT_TRANSACTIONS
case|:
case|case
name|KILL_QUERY
case|:
return|return
literal|false
return|;
comment|//this implies that no locks are needed for such a command
default|default:
return|return
operator|!
name|context
operator|.
name|isExplainPlan
argument_list|()
return|;
block|}
block|}
specifier|private
name|void
name|generateValidTxnList
parameter_list|()
throws|throws
name|LockException
block|{
comment|// Record current valid txn list that will be used throughout the query
comment|// compilation and processing. We only do this if 1) a transaction
comment|// was already opened and 2) the list has not been recorded yet,
comment|// e.g., by an explicit open transaction command.
name|driverContext
operator|.
name|setValidTxnListsGenerated
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|currentTxnString
init|=
name|driverContext
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|ValidTxnList
operator|.
name|VALID_TXNS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|driverContext
operator|.
name|getTxnManager
argument_list|()
operator|.
name|isTxnOpen
argument_list|()
operator|&&
operator|(
name|currentTxnString
operator|==
literal|null
operator|||
name|currentTxnString
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
try|try
block|{
name|recordValidTxns
argument_list|(
name|driverContext
operator|.
name|getTxnManager
argument_list|()
argument_list|)
expr_stmt|;
name|driverContext
operator|.
name|setValidTxnListsGenerated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while acquiring valid txn list"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
comment|// Write the current set of valid transactions into the conf file
specifier|private
name|void
name|recordValidTxns
parameter_list|(
name|HiveTxnManager
name|txnMgr
parameter_list|)
throws|throws
name|LockException
block|{
name|String
name|oldTxnString
init|=
name|driverContext
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|ValidTxnList
operator|.
name|VALID_TXNS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|oldTxnString
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|oldTxnString
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"calling recordValidTxn() more than once in the same "
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnMgr
operator|.
name|getCurrentTxnId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|ValidTxnList
name|txnList
init|=
name|txnMgr
operator|.
name|getValidTxns
argument_list|()
decl_stmt|;
name|String
name|txnStr
init|=
name|txnList
operator|.
name|toString
argument_list|()
decl_stmt|;
name|driverContext
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|ValidTxnList
operator|.
name|VALID_TXNS_KEY
argument_list|,
name|txnStr
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Encoding valid txns info "
operator|+
name|txnStr
operator|+
literal|" txnid:"
operator|+
name|txnMgr
operator|.
name|getCurrentTxnId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|QueryPlan
name|createPlan
parameter_list|(
name|BaseSemanticAnalyzer
name|sem
parameter_list|)
block|{
comment|// get the output schema
name|setSchema
argument_list|(
name|sem
argument_list|)
expr_stmt|;
name|QueryPlan
name|plan
init|=
operator|new
name|QueryPlan
argument_list|(
name|driverContext
operator|.
name|getQueryString
argument_list|()
argument_list|,
name|sem
argument_list|,
name|driverContext
operator|.
name|getQueryDisplay
argument_list|()
operator|.
name|getQueryStartTime
argument_list|()
argument_list|,
name|driverContext
operator|.
name|getQueryId
argument_list|()
argument_list|,
name|driverContext
operator|.
name|getQueryState
argument_list|()
operator|.
name|getHiveOperation
argument_list|()
argument_list|,
name|driverContext
operator|.
name|getSchema
argument_list|()
argument_list|)
decl_stmt|;
comment|// save the optimized plan and sql for the explain
name|plan
operator|.
name|setOptimizedCBOPlan
argument_list|(
name|context
operator|.
name|getCalcitePlan
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setOptimizedQueryString
argument_list|(
name|context
operator|.
name|getOptimizedSql
argument_list|()
argument_list|)
expr_stmt|;
name|driverContext
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
literal|"mapreduce.workflow.id"
argument_list|,
literal|"hive_"
operator|+
name|driverContext
operator|.
name|getQueryId
argument_list|()
argument_list|)
expr_stmt|;
name|driverContext
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
literal|"mapreduce.workflow.name"
argument_list|,
name|driverContext
operator|.
name|getQueryString
argument_list|()
argument_list|)
expr_stmt|;
comment|// initialize FetchTask right here
if|if
condition|(
name|plan
operator|.
name|getFetchTask
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|plan
operator|.
name|getFetchTask
argument_list|()
operator|.
name|initialize
argument_list|(
name|driverContext
operator|.
name|getQueryState
argument_list|()
argument_list|,
name|plan
argument_list|,
literal|null
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
return|return
name|plan
return|;
block|}
comment|/**    * Get a Schema with fields represented with native Hive types.    */
specifier|private
name|void
name|setSchema
parameter_list|(
name|BaseSemanticAnalyzer
name|sem
parameter_list|)
block|{
name|Schema
name|schema
init|=
operator|new
name|Schema
argument_list|()
decl_stmt|;
comment|// If we have a plan, prefer its logical result schema if it's available; otherwise, try digging out a fetch task;
comment|// failing that, give up.
if|if
condition|(
name|sem
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No semantic analyzer, using empty schema."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sem
operator|.
name|getResultSchema
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|lst
init|=
name|sem
operator|.
name|getResultSchema
argument_list|()
decl_stmt|;
name|schema
operator|=
operator|new
name|Schema
argument_list|(
name|lst
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sem
operator|.
name|getFetchTask
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|FetchTask
name|ft
init|=
name|sem
operator|.
name|getFetchTask
argument_list|()
decl_stmt|;
name|TableDesc
name|td
init|=
name|ft
operator|.
name|getTblDesc
argument_list|()
decl_stmt|;
comment|// partitioned tables don't have tableDesc set on the FetchTask. Instead they have a list of PartitionDesc
comment|// objects, each with a table desc. Let's try to fetch the desc for the first partition and use it's deserializer.
if|if
condition|(
name|td
operator|==
literal|null
operator|&&
name|ft
operator|.
name|getWork
argument_list|()
operator|!=
literal|null
operator|&&
name|ft
operator|.
name|getWork
argument_list|()
operator|.
name|getPartDesc
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ft
operator|.
name|getWork
argument_list|()
operator|.
name|getPartDesc
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|td
operator|=
name|ft
operator|.
name|getWork
argument_list|()
operator|.
name|getPartDesc
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTableDesc
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|td
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No returning schema, using empty schema"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|tableName
init|=
literal|"result"
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|lst
init|=
literal|null
decl_stmt|;
try|try
block|{
name|lst
operator|=
name|HiveMetaStoreUtils
operator|.
name|getFieldsFromDeserializer
argument_list|(
name|tableName
argument_list|,
name|td
operator|.
name|getDeserializer
argument_list|(
name|driverContext
operator|.
name|getConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error getting schema: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lst
operator|!=
literal|null
condition|)
block|{
name|schema
operator|=
operator|new
name|Schema
argument_list|(
name|lst
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Created Hive schema: "
operator|+
name|schema
argument_list|)
expr_stmt|;
name|driverContext
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|authorize
parameter_list|(
name|BaseSemanticAnalyzer
name|sem
parameter_list|)
throws|throws
name|HiveException
throws|,
name|CommandProcessorException
block|{
comment|// do the authorization check
if|if
condition|(
operator|!
name|sem
operator|.
name|skipAuthorization
argument_list|()
operator|&&
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|driverContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_ENABLED
argument_list|)
condition|)
block|{
try|try
block|{
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|DO_AUTHORIZATION
argument_list|)
expr_stmt|;
comment|// Authorization check for kill query will be in KillQueryImpl
comment|// As both admin or operation owner can perform the operation.
comment|// Which is not directly supported in authorizer
if|if
condition|(
name|driverContext
operator|.
name|getQueryState
argument_list|()
operator|.
name|getHiveOperation
argument_list|()
operator|!=
name|HiveOperation
operator|.
name|KILL_QUERY
condition|)
block|{
name|CommandAuthorizer
operator|.
name|doAuthorization
argument_list|(
name|driverContext
operator|.
name|getQueryState
argument_list|()
operator|.
name|getHiveOperation
argument_list|()
argument_list|,
name|sem
argument_list|,
name|context
operator|.
name|getCmd
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|authExp
parameter_list|)
block|{
name|CONSOLE
operator|.
name|printError
argument_list|(
literal|"Authorization failed:"
operator|+
name|authExp
operator|.
name|getMessage
argument_list|()
operator|+
literal|". Use SHOW GRANT to get more details."
argument_list|)
expr_stmt|;
throw|throw
name|DriverUtils
operator|.
name|createProcessorException
argument_list|(
name|driverContext
argument_list|,
literal|403
argument_list|,
name|authExp
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"42000"
argument_list|,
literal|null
argument_list|)
throw|;
block|}
finally|finally
block|{
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|DO_AUTHORIZATION
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|explainOutput
parameter_list|(
name|BaseSemanticAnalyzer
name|sem
parameter_list|,
name|QueryPlan
name|plan
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|driverContext
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_LOG_EXPLAIN_OUTPUT
argument_list|)
operator|||
name|driverContext
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_WEBUI_EXPLAIN_OUTPUT
argument_list|)
condition|)
block|{
name|String
name|explainOutput
init|=
name|ExplainTask
operator|.
name|getExplainOutput
argument_list|(
name|sem
argument_list|,
name|plan
argument_list|,
name|tree
argument_list|,
name|driverContext
operator|.
name|getQueryState
argument_list|()
argument_list|,
name|context
argument_list|,
name|driverContext
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|explainOutput
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|driverContext
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_LOG_EXPLAIN_OUTPUT
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"EXPLAIN output for queryid "
operator|+
name|driverContext
operator|.
name|getQueryId
argument_list|()
operator|+
literal|" : "
operator|+
name|explainOutput
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|driverContext
operator|.
name|getConf
argument_list|()
operator|.
name|isWebUiQueryInfoCacheEnabled
argument_list|()
operator|&&
name|driverContext
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_WEBUI_EXPLAIN_OUTPUT
argument_list|)
condition|)
block|{
name|driverContext
operator|.
name|getQueryDisplay
argument_list|()
operator|.
name|setExplainPlan
argument_list|(
name|explainOutput
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|handleException
parameter_list|(
name|Exception
name|e
parameter_list|)
throws|throws
name|CommandProcessorException
block|{
name|ErrorMsg
name|error
init|=
name|ErrorMsg
operator|.
name|getErrorMsg
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|errorMessage
init|=
literal|"FAILED: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|!=
name|ErrorMsg
operator|.
name|GENERIC_ERROR
condition|)
block|{
name|errorMessage
operator|+=
literal|" [Error "
operator|+
name|error
operator|.
name|getErrorCode
argument_list|()
operator|+
literal|"]:"
expr_stmt|;
block|}
comment|// HIVE-4889
if|if
condition|(
operator|(
name|e
operator|instanceof
name|IllegalArgumentException
operator|)
operator|&&
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|errorMessage
operator|+=
literal|" "
operator|+
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|errorMessage
operator|+=
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|error
operator|==
name|ErrorMsg
operator|.
name|TXNMGR_NOT_ACID
condition|)
block|{
name|errorMessage
operator|+=
literal|". Failed command: "
operator|+
name|driverContext
operator|.
name|getQueryString
argument_list|()
expr_stmt|;
block|}
name|CONSOLE
operator|.
name|printError
argument_list|(
name|errorMessage
argument_list|,
literal|"\n"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|DriverUtils
operator|.
name|createProcessorException
argument_list|(
name|driverContext
argument_list|,
name|error
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|errorMessage
argument_list|,
name|error
operator|.
name|getSQLState
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|private
name|void
name|cleanUp
parameter_list|(
name|boolean
name|compileError
parameter_list|,
name|boolean
name|parsed
parameter_list|,
name|boolean
name|deferClose
parameter_list|)
block|{
comment|// Trigger post compilation hook. Note that if the compilation fails here then
comment|// before/after execution hook will never be executed.
if|if
condition|(
name|parsed
condition|)
block|{
try|try
block|{
name|driverContext
operator|.
name|getHookRunner
argument_list|()
operator|.
name|runAfterCompilationHook
argument_list|(
name|context
operator|.
name|getCmd
argument_list|()
argument_list|,
name|compileError
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed when invoking query after-compilation hook."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|double
name|duration
init|=
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|COMPILE
argument_list|)
operator|/
literal|1000.00
decl_stmt|;
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|compileHMSTimings
init|=
name|Hive
operator|.
name|dumpMetaCallTimingWithoutEx
argument_list|(
literal|"compilation"
argument_list|)
decl_stmt|;
name|driverContext
operator|.
name|getQueryDisplay
argument_list|()
operator|.
name|setHmsTimings
argument_list|(
name|QueryDisplay
operator|.
name|Phase
operator|.
name|COMPILATION
argument_list|,
name|compileHMSTimings
argument_list|)
expr_stmt|;
if|if
condition|(
name|driverState
operator|.
name|isAborted
argument_list|()
condition|)
block|{
name|driverState
operator|.
name|compilationInterruptedWithLocking
argument_list|(
name|deferClose
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Compiling command(queryId={}) has been interrupted after {} seconds"
argument_list|,
name|driverContext
operator|.
name|getQueryId
argument_list|()
argument_list|,
name|duration
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|driverState
operator|.
name|compilationFinishedWithLocking
argument_list|(
name|compileError
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Completed compiling command(queryId={}); Time taken: {} seconds"
argument_list|,
name|driverContext
operator|.
name|getQueryId
argument_list|()
argument_list|,
name|duration
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

