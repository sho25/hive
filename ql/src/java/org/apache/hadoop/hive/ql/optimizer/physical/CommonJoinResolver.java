begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|physical
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ObjectPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ConditionalTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapRedTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|TaskGraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|TaskGraphWalker
operator|.
name|TaskGraphWalkerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|MapJoinProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|QBJoinTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ConditionalResolverCommonJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ConditionalResolverCommonJoin
operator|.
name|ConditionalResolverCommonJoinCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ConditionalWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapredLocalWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapredWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PartitionDesc
import|;
end_import

begin_comment
comment|/*  * Convert tasks involving JOIN into MAPJOIN.  * If hive.auto.convert.join is true, the tasks involving join are converted.  * Consider the query:  * select .... from T1 join T2 on T1.key = T2.key join T3 on T1.key = T3.key  *  * There is a map-reduce task which performs a 3-way join (T1, T2, T3).  * The task would be converted to a conditional task which would have 4 children  * a. Mapjoin considering T1 as the big table  * b. Mapjoin considering T2 as the big table  * c. Mapjoin considering T3 as the big table  * d. Map-reduce join (the original task).  *  *  Note that the sizes of all the inputs may not be available at compile time. At runtime, it is  *  determined which branch we want to pick up from the above.  *  * However, if hive.auto.convert.join.noconditionaltask is set to true, and  * the sum of any n-1 tables is smaller than hive.auto.convert.join.noconditionaltask.size,  * then a mapjoin is created instead of the conditional task. For the above, if the size of  * T1 + T2 is less than the threshold, then the task is converted to a mapjoin task with T3 as  * the big table.  *  * In this case, further optimization is performed by merging 2 consecutive map-only jobs.  * Consider the query:  * select ... from T1 join T2 on T1.key1 = T2.key1 join T3 on T1.key2 = T3.key2  *  * Initially, the plan would consist of 2 Map-reduce jobs (1 to perform join for T1 and T2)  * followed by another map-reduce job (to perform join of the result with T3). After the  * optimization, both these tasks would be converted to map-only tasks. These 2 map-only jobs  * are then merged into a single map-only job. As a followup (HIVE-3952), it would be possible to  * merge a map-only task with a map-reduce task.  * Consider the query:  * select T1.key2, count(*) from T1 join T2 on T1.key1 = T2.key1 group by T1.key2;  * Initially, the plan would consist of 2 Map-reduce jobs (1 to perform join for T1 and T2)  * followed by another map-reduce job (to perform groupby of the result). After the  * optimization, the join task would be converted to map-only tasks. After HIVE-3952, the map-only  * task would be merged with the map-reduce task to create a single map-reduce task.  */
end_comment

begin_class
specifier|public
class|class
name|CommonJoinResolver
implements|implements
name|PhysicalPlanResolver
block|{
annotation|@
name|Override
specifier|public
name|PhysicalContext
name|resolve
parameter_list|(
name|PhysicalContext
name|pctx
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// create dispatcher and graph walker
name|Dispatcher
name|disp
init|=
operator|new
name|CommonJoinTaskDispatcher
argument_list|(
name|pctx
argument_list|)
decl_stmt|;
name|TaskGraphWalker
name|ogw
init|=
operator|new
name|TaskGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
comment|// get all the tasks nodes from root task
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|addAll
argument_list|(
name|pctx
operator|.
name|rootTasks
argument_list|)
expr_stmt|;
comment|// begin to walk through the task tree.
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|pctx
return|;
block|}
comment|/**    * Iterator each tasks. If this task has a local work,create a new task for this local work, named    * MapredLocalTask. then make this new generated task depends on current task's parent task, and    * make current task depends on this new generated task    */
class|class
name|CommonJoinTaskDispatcher
implements|implements
name|Dispatcher
block|{
specifier|private
specifier|final
name|PhysicalContext
name|physicalContext
decl_stmt|;
specifier|public
name|CommonJoinTaskDispatcher
parameter_list|(
name|PhysicalContext
name|context
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|physicalContext
operator|=
name|context
expr_stmt|;
block|}
comment|// Get the position of the big table for this join operator and the given alias
specifier|private
name|int
name|getPosition
parameter_list|(
name|MapredWork
name|work
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|joinOp
parameter_list|,
name|String
name|alias
parameter_list|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOp
init|=
name|work
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
comment|// reduceSinkOperator's child is null, but joinOperator's parents is reduceSink
while|while
condition|(
operator|(
name|parentOp
operator|.
name|getChildOperators
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|parentOp
operator|.
name|getChildOperators
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|parentOp
operator|=
name|parentOp
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|joinOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|indexOf
argument_list|(
name|parentOp
argument_list|)
return|;
block|}
comment|/*      * A task and its child task has been converted from join to mapjoin.      * See if the two tasks can be merged.      */
specifier|private
name|void
name|mergeMapJoinTaskWithChildMapJoinTask
parameter_list|(
name|MapRedTask
name|task
parameter_list|)
block|{
name|MapRedTask
name|childTask
init|=
operator|(
name|MapRedTask
operator|)
name|task
operator|.
name|getChildTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|MapredWork
name|work
init|=
name|task
operator|.
name|getWork
argument_list|()
decl_stmt|;
name|MapredLocalWork
name|localWork
init|=
name|work
operator|.
name|getMapLocalWork
argument_list|()
decl_stmt|;
name|MapredWork
name|childWork
init|=
name|childTask
operator|.
name|getWork
argument_list|()
decl_stmt|;
name|MapredLocalWork
name|childLocalWork
init|=
name|childWork
operator|.
name|getMapLocalWork
argument_list|()
decl_stmt|;
comment|// Can this be merged
name|Map
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|aliasToWork
init|=
name|work
operator|.
name|getAliasToWork
argument_list|()
decl_stmt|;
if|if
condition|(
name|aliasToWork
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return;
block|}
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
init|=
name|aliasToWork
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
while|while
condition|(
name|op
operator|.
name|getChildOperators
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Dont perform this optimization for multi-table inserts
if|if
condition|(
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return;
block|}
name|op
operator|=
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|op
operator|instanceof
name|FileSinkOperator
operator|)
condition|)
block|{
return|return;
block|}
name|FileSinkOperator
name|fop
init|=
operator|(
name|FileSinkOperator
operator|)
name|op
decl_stmt|;
name|String
name|workDir
init|=
name|fop
operator|.
name|getConf
argument_list|()
operator|.
name|getDirName
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|childPathToAliases
init|=
name|childWork
operator|.
name|getPathToAliases
argument_list|()
decl_stmt|;
if|if
condition|(
name|childPathToAliases
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return;
block|}
comment|// The filesink writes to a different directory
if|if
condition|(
operator|!
name|childPathToAliases
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|equals
argument_list|(
name|workDir
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Either of them should not be bucketed
if|if
condition|(
operator|(
name|localWork
operator|.
name|getBucketMapjoinContext
argument_list|()
operator|!=
literal|null
operator|)
operator|||
operator|(
name|childLocalWork
operator|.
name|getBucketMapjoinContext
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
return|return;
block|}
comment|// Merge the trees
if|if
condition|(
name|childWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return;
block|}
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|childAliasOp
init|=
name|childWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|fop
operator|.
name|getParentOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return;
block|}
comment|// Merge the 2 trees - remove the FileSinkOperator from the first tree pass it to the
comment|// top of the second
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|parentFOp
init|=
name|fop
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|parentFOp
operator|.
name|getChildOperators
argument_list|()
operator|.
name|remove
argument_list|(
name|fop
argument_list|)
expr_stmt|;
name|parentFOp
operator|.
name|getChildOperators
argument_list|()
operator|.
name|add
argument_list|(
name|childAliasOp
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|parentOps
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|parentOps
operator|.
name|add
argument_list|(
name|parentFOp
argument_list|)
expr_stmt|;
name|childAliasOp
operator|.
name|setParentOperators
argument_list|(
name|parentOps
argument_list|)
expr_stmt|;
name|work
operator|.
name|getAliasToPartnInfo
argument_list|()
operator|.
name|putAll
argument_list|(
name|childWork
operator|.
name|getAliasToPartnInfo
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|PartitionDesc
argument_list|>
name|childWorkEntry
range|:
name|childWork
operator|.
name|getPathToPartitionInfo
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|childWork
operator|.
name|getAliasToPartnInfo
argument_list|()
operator|.
name|containsValue
argument_list|(
name|childWorkEntry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|work
operator|.
name|getPathToPartitionInfo
argument_list|()
operator|.
name|put
argument_list|(
name|childWorkEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|childWorkEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|localWork
operator|.
name|getAliasToFetchWork
argument_list|()
operator|.
name|putAll
argument_list|(
name|childLocalWork
operator|.
name|getAliasToFetchWork
argument_list|()
argument_list|)
expr_stmt|;
name|localWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|putAll
argument_list|(
name|childLocalWork
operator|.
name|getAliasToWork
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove the child task
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|oldChildTasks
init|=
name|childTask
operator|.
name|getChildTasks
argument_list|()
decl_stmt|;
name|task
operator|.
name|setChildTasks
argument_list|(
name|oldChildTasks
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldChildTasks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|oldChildTask
range|:
name|oldChildTasks
control|)
block|{
name|oldChildTask
operator|.
name|getParentTasks
argument_list|()
operator|.
name|remove
argument_list|(
name|childTask
argument_list|)
expr_stmt|;
name|oldChildTask
operator|.
name|getParentTasks
argument_list|()
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// create map join task and set big table as bigTablePosition
specifier|private
name|ObjectPair
argument_list|<
name|MapRedTask
argument_list|,
name|String
argument_list|>
name|convertTaskToMapJoinTask
parameter_list|(
name|String
name|xml
parameter_list|,
name|int
name|bigTablePosition
parameter_list|)
throws|throws
name|UnsupportedEncodingException
throws|,
name|SemanticException
block|{
comment|// deep copy a new mapred work from xml
name|InputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|xml
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|MapredWork
name|newWork
init|=
name|Utilities
operator|.
name|deserializeMapRedWork
argument_list|(
name|in
argument_list|,
name|physicalContext
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
comment|// create a mapred task for this work
name|MapRedTask
name|newTask
init|=
operator|(
name|MapRedTask
operator|)
name|TaskFactory
operator|.
name|get
argument_list|(
name|newWork
argument_list|,
name|physicalContext
operator|.
name|getParseContext
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|JoinOperator
name|newJoinOp
init|=
name|getJoinOp
argument_list|(
name|newTask
argument_list|)
decl_stmt|;
comment|// optimize this newWork and assume big table position is i
name|String
name|bigTableAlias
init|=
name|MapJoinProcessor
operator|.
name|genMapJoinOpAndLocalWork
argument_list|(
name|newWork
argument_list|,
name|newJoinOp
argument_list|,
name|bigTablePosition
argument_list|)
decl_stmt|;
return|return
operator|new
name|ObjectPair
argument_list|<
name|MapRedTask
argument_list|,
name|String
argument_list|>
argument_list|(
name|newTask
argument_list|,
name|bigTableAlias
argument_list|)
return|;
block|}
specifier|private
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|processCurrentTask
parameter_list|(
name|MapRedTask
name|currTask
parameter_list|,
name|ConditionalTask
name|conditionalTask
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// whether it contains common join op; if contains, return this common join op
name|JoinOperator
name|joinOp
init|=
name|getJoinOp
argument_list|(
name|currTask
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinOp
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|currTask
operator|.
name|setTaskTag
argument_list|(
name|Task
operator|.
name|COMMON_JOIN
argument_list|)
expr_stmt|;
name|MapredWork
name|currWork
init|=
name|currTask
operator|.
name|getWork
argument_list|()
decl_stmt|;
comment|// create conditional work list and task list
name|List
argument_list|<
name|Serializable
argument_list|>
name|listWorks
init|=
operator|new
name|ArrayList
argument_list|<
name|Serializable
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|listTasks
init|=
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// create alias to task mapping and alias to input file mapping for resolver
name|HashMap
argument_list|<
name|String
argument_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|aliasToTask
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|pathToAliases
init|=
name|currWork
operator|.
name|getPathToAliases
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|aliasToWork
init|=
name|currWork
operator|.
name|getAliasToWork
argument_list|()
decl_stmt|;
comment|// get parseCtx for this Join Operator
name|ParseContext
name|parseCtx
init|=
name|physicalContext
operator|.
name|getParseContext
argument_list|()
decl_stmt|;
name|QBJoinTree
name|joinTree
init|=
name|parseCtx
operator|.
name|getJoinContext
argument_list|()
operator|.
name|get
argument_list|(
name|joinOp
argument_list|)
decl_stmt|;
comment|// start to generate multiple map join tasks
name|JoinDesc
name|joinDesc
init|=
name|joinOp
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|Byte
index|[]
name|order
init|=
name|joinDesc
operator|.
name|getTagOrder
argument_list|()
decl_stmt|;
name|int
name|numAliases
init|=
name|order
operator|.
name|length
decl_stmt|;
name|long
name|aliasTotalKnownInputSize
init|=
literal|0
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|aliasToSize
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
comment|// go over all the input paths, and calculate a known total size, known
comment|// size for each input alias.
name|Utilities
operator|.
name|getInputSummary
argument_list|(
name|context
argument_list|,
name|currWork
argument_list|,
literal|null
argument_list|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
comment|// set alias to size mapping, this can be used to determine if one table
comment|// is choosen as big table, what's the total size of left tables, which
comment|// are going to be small tables.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|pathToAliases
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|path
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|aliasList
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ContentSummary
name|cs
init|=
name|context
operator|.
name|getCS
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|long
name|size
init|=
name|cs
operator|.
name|getLength
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|aliasList
control|)
block|{
name|aliasTotalKnownInputSize
operator|+=
name|size
expr_stmt|;
name|Long
name|es
init|=
name|aliasToSize
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|es
operator|==
literal|null
condition|)
block|{
name|es
operator|=
operator|new
name|Long
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|es
operator|+=
name|size
expr_stmt|;
name|aliasToSize
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|es
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|HashSet
argument_list|<
name|Integer
argument_list|>
name|bigTableCandidates
init|=
name|MapJoinProcessor
operator|.
name|getBigTableCandidates
argument_list|(
name|joinDesc
operator|.
name|getConds
argument_list|()
argument_list|)
decl_stmt|;
comment|// no table could be the big table; there is no need to convert
if|if
condition|(
name|bigTableCandidates
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConf
argument_list|()
decl_stmt|;
comment|// If sizes of atleast n-1 tables in a n-way join is known, and their sum is smaller than
comment|// the threshold size, convert the join into map-join and don't create a conditional task
name|boolean
name|convertJoinMapJoin
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVECONVERTJOINNOCONDITIONALTASK
argument_list|)
decl_stmt|;
name|int
name|bigTablePosition
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|convertJoinMapJoin
condition|)
block|{
comment|// This is the threshold that the user has specified to fit in mapjoin
name|long
name|mapJoinSize
init|=
name|HiveConf
operator|.
name|getLongVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVECONVERTJOINNOCONDITIONALTASKTHRESHOLD
argument_list|)
decl_stmt|;
name|boolean
name|bigTableFound
init|=
literal|false
decl_stmt|;
name|long
name|largestTableSize
init|=
literal|0
decl_stmt|;
name|long
name|sumTableSizes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|aliasToWork
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Long
name|size
init|=
name|aliasToSize
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
comment|// The size is not available at compile time if the input is a sub-query.
comment|// If the size of atleast n-1 inputs for a n-way join are available at compile time,
comment|// and the sum of them is less than the specified threshold, then convert the join
comment|// into a map-join without the conditional task.
if|if
condition|(
operator|(
name|size
operator|==
literal|null
operator|)
operator|||
operator|(
name|size
operator|>
name|mapJoinSize
operator|)
condition|)
block|{
name|sumTableSizes
operator|+=
name|largestTableSize
expr_stmt|;
if|if
condition|(
name|bigTableFound
operator|||
operator|(
name|sumTableSizes
operator|>
name|mapJoinSize
operator|)
condition|)
block|{
name|convertJoinMapJoin
operator|=
literal|false
expr_stmt|;
break|break;
block|}
name|bigTableFound
operator|=
literal|true
expr_stmt|;
name|bigTablePosition
operator|=
name|getPosition
argument_list|(
name|currWork
argument_list|,
name|joinOp
argument_list|,
name|alias
argument_list|)
expr_stmt|;
name|largestTableSize
operator|=
name|mapJoinSize
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|size
operator|>
name|largestTableSize
condition|)
block|{
name|sumTableSizes
operator|+=
name|largestTableSize
expr_stmt|;
name|largestTableSize
operator|=
name|size
expr_stmt|;
name|bigTablePosition
operator|=
name|getPosition
argument_list|(
name|currWork
argument_list|,
name|joinOp
argument_list|,
name|alias
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sumTableSizes
operator|+=
name|size
expr_stmt|;
block|}
if|if
condition|(
name|sumTableSizes
operator|>
name|mapJoinSize
condition|)
block|{
name|convertJoinMapJoin
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
name|String
name|bigTableAlias
init|=
literal|null
decl_stmt|;
name|currWork
operator|.
name|setOpParseCtxMap
argument_list|(
name|parseCtx
operator|.
name|getOpParseCtx
argument_list|()
argument_list|)
expr_stmt|;
name|currWork
operator|.
name|setJoinTree
argument_list|(
name|joinTree
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|currWork
operator|.
name|toXML
argument_list|()
decl_stmt|;
if|if
condition|(
name|convertJoinMapJoin
condition|)
block|{
comment|// create map join task and set big table as bigTablePosition
name|MapRedTask
name|newTask
init|=
name|convertTaskToMapJoinTask
argument_list|(
name|xml
argument_list|,
name|bigTablePosition
argument_list|)
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|newTask
operator|.
name|setTaskTag
argument_list|(
name|Task
operator|.
name|MAPJOIN_ONLY_NOBACKUP
argument_list|)
expr_stmt|;
name|replaceTask
argument_list|(
name|currTask
argument_list|,
name|newTask
argument_list|,
name|physicalContext
argument_list|)
expr_stmt|;
comment|// Can this task be merged with the child task. This can happen if a big table is being
comment|// joined with multiple small tables on different keys
comment|// Further optimizations are possible here, a join which has been converted to a mapjoin
comment|// followed by a mapjoin can be performed in a single MR job.
if|if
condition|(
operator|(
name|newTask
operator|.
name|getChildTasks
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|newTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
operator|&&
operator|(
name|newTask
operator|.
name|getChildTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTaskTag
argument_list|()
operator|==
name|Task
operator|.
name|MAPJOIN_ONLY_NOBACKUP
operator|)
condition|)
block|{
name|mergeMapJoinTaskWithChildMapJoinTask
argument_list|(
name|newTask
argument_list|)
expr_stmt|;
block|}
return|return
name|newTask
return|;
block|}
name|long
name|ThresholdOfSmallTblSizeSum
init|=
name|HiveConf
operator|.
name|getLongVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESMALLTABLESFILESIZE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAliases
condition|;
name|i
operator|++
control|)
block|{
comment|// this table cannot be big table
if|if
condition|(
operator|!
name|bigTableCandidates
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// create map join task and set big table as i
name|ObjectPair
argument_list|<
name|MapRedTask
argument_list|,
name|String
argument_list|>
name|newTaskAlias
init|=
name|convertTaskToMapJoinTask
argument_list|(
name|xml
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|MapRedTask
name|newTask
init|=
name|newTaskAlias
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|bigTableAlias
operator|=
name|newTaskAlias
operator|.
name|getSecond
argument_list|()
expr_stmt|;
name|Long
name|aliasKnownSize
init|=
name|aliasToSize
operator|.
name|get
argument_list|(
name|bigTableAlias
argument_list|)
decl_stmt|;
if|if
condition|(
name|aliasKnownSize
operator|!=
literal|null
operator|&&
name|aliasKnownSize
operator|.
name|longValue
argument_list|()
operator|>
literal|0
condition|)
block|{
name|long
name|smallTblTotalKnownSize
init|=
name|aliasTotalKnownInputSize
operator|-
name|aliasKnownSize
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|smallTblTotalKnownSize
operator|>
name|ThresholdOfSmallTblSizeSum
condition|)
block|{
comment|//this table is not good to be a big table.
continue|continue;
block|}
block|}
comment|// add into conditional task
name|listWorks
operator|.
name|add
argument_list|(
name|newTask
operator|.
name|getWork
argument_list|()
argument_list|)
expr_stmt|;
name|listTasks
operator|.
name|add
argument_list|(
name|newTask
argument_list|)
expr_stmt|;
name|newTask
operator|.
name|setTaskTag
argument_list|(
name|Task
operator|.
name|CONVERTED_MAPJOIN
argument_list|)
expr_stmt|;
comment|//set up backup task
name|newTask
operator|.
name|setBackupTask
argument_list|(
name|currTask
argument_list|)
expr_stmt|;
name|newTask
operator|.
name|setBackupChildrenTasks
argument_list|(
name|currTask
operator|.
name|getChildTasks
argument_list|()
argument_list|)
expr_stmt|;
comment|// put the mapping alias to task
name|aliasToTask
operator|.
name|put
argument_list|(
name|bigTableAlias
argument_list|,
name|newTask
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Generate Map Join Task Error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
comment|// insert current common join task to conditional task
name|listWorks
operator|.
name|add
argument_list|(
name|currTask
operator|.
name|getWork
argument_list|()
argument_list|)
expr_stmt|;
name|listTasks
operator|.
name|add
argument_list|(
name|currTask
argument_list|)
expr_stmt|;
comment|// clear JoinTree and OP Parse Context
name|currWork
operator|.
name|setOpParseCtxMap
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|currWork
operator|.
name|setJoinTree
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// create conditional task and insert conditional task into task tree
name|ConditionalWork
name|cndWork
init|=
operator|new
name|ConditionalWork
argument_list|(
name|listWorks
argument_list|)
decl_stmt|;
name|ConditionalTask
name|cndTsk
init|=
operator|(
name|ConditionalTask
operator|)
name|TaskFactory
operator|.
name|get
argument_list|(
name|cndWork
argument_list|,
name|parseCtx
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|cndTsk
operator|.
name|setListTasks
argument_list|(
name|listTasks
argument_list|)
expr_stmt|;
comment|// set resolver and resolver context
name|cndTsk
operator|.
name|setResolver
argument_list|(
operator|new
name|ConditionalResolverCommonJoin
argument_list|()
argument_list|)
expr_stmt|;
name|ConditionalResolverCommonJoinCtx
name|resolverCtx
init|=
operator|new
name|ConditionalResolverCommonJoinCtx
argument_list|()
decl_stmt|;
name|resolverCtx
operator|.
name|setPathToAliases
argument_list|(
name|pathToAliases
argument_list|)
expr_stmt|;
name|resolverCtx
operator|.
name|setAliasToKnownSize
argument_list|(
name|aliasToSize
argument_list|)
expr_stmt|;
name|resolverCtx
operator|.
name|setAliasToTask
argument_list|(
name|aliasToTask
argument_list|)
expr_stmt|;
name|resolverCtx
operator|.
name|setCommonJoinTask
argument_list|(
name|currTask
argument_list|)
expr_stmt|;
name|resolverCtx
operator|.
name|setLocalTmpDir
argument_list|(
name|context
operator|.
name|getLocalScratchDir
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|resolverCtx
operator|.
name|setHdfsTmpDir
argument_list|(
name|context
operator|.
name|getMRScratchDir
argument_list|()
argument_list|)
expr_stmt|;
name|cndTsk
operator|.
name|setResolverCtx
argument_list|(
name|resolverCtx
argument_list|)
expr_stmt|;
comment|//replace the current task with the new generated conditional task
name|this
operator|.
name|replaceTaskWithConditionalTask
argument_list|(
name|currTask
argument_list|,
name|cndTsk
argument_list|,
name|physicalContext
argument_list|)
expr_stmt|;
return|return
name|cndTsk
return|;
block|}
specifier|private
name|void
name|replaceTaskWithConditionalTask
parameter_list|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|currTask
parameter_list|,
name|ConditionalTask
name|cndTsk
parameter_list|,
name|PhysicalContext
name|physicalContext
parameter_list|)
block|{
comment|// add this task into task tree
comment|// set all parent tasks
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|parentTasks
init|=
name|currTask
operator|.
name|getParentTasks
argument_list|()
decl_stmt|;
name|currTask
operator|.
name|setParentTasks
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentTasks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
range|:
name|parentTasks
control|)
block|{
comment|// make new generated task depends on all the parent tasks of current task.
name|tsk
operator|.
name|addDependentTask
argument_list|(
name|cndTsk
argument_list|)
expr_stmt|;
comment|// remove the current task from its original parent task's dependent task
name|tsk
operator|.
name|removeDependentTask
argument_list|(
name|currTask
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// remove from current root task and add conditional task to root tasks
name|physicalContext
operator|.
name|removeFromRootTask
argument_list|(
name|currTask
argument_list|)
expr_stmt|;
name|physicalContext
operator|.
name|addToRootTask
argument_list|(
name|cndTsk
argument_list|)
expr_stmt|;
block|}
comment|// set all child tasks
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|oldChildTasks
init|=
name|currTask
operator|.
name|getChildTasks
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldChildTasks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
range|:
name|cndTsk
operator|.
name|getListTasks
argument_list|()
control|)
block|{
if|if
condition|(
name|tsk
operator|.
name|equals
argument_list|(
name|currTask
argument_list|)
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|oldChild
range|:
name|oldChildTasks
control|)
block|{
name|tsk
operator|.
name|addDependentTask
argument_list|(
name|oldChild
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Replace the task with the new task. Copy the children and parents of the old
comment|// task to the new task.
specifier|private
name|void
name|replaceTask
parameter_list|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|currTask
parameter_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|newTask
parameter_list|,
name|PhysicalContext
name|physicalContext
parameter_list|)
block|{
comment|// add this task into task tree
comment|// set all parent tasks
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|parentTasks
init|=
name|currTask
operator|.
name|getParentTasks
argument_list|()
decl_stmt|;
name|currTask
operator|.
name|setParentTasks
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentTasks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
range|:
name|parentTasks
control|)
block|{
comment|// make new generated task depends on all the parent tasks of current task.
name|tsk
operator|.
name|addDependentTask
argument_list|(
name|newTask
argument_list|)
expr_stmt|;
comment|// remove the current task from its original parent task's dependent task
name|tsk
operator|.
name|removeDependentTask
argument_list|(
name|currTask
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// remove from current root task and add conditional task to root tasks
name|physicalContext
operator|.
name|removeFromRootTask
argument_list|(
name|currTask
argument_list|)
expr_stmt|;
name|physicalContext
operator|.
name|addToRootTask
argument_list|(
name|newTask
argument_list|)
expr_stmt|;
block|}
comment|// set all child tasks
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|oldChildTasks
init|=
name|currTask
operator|.
name|getChildTasks
argument_list|()
decl_stmt|;
name|currTask
operator|.
name|setChildTasks
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldChildTasks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
range|:
name|oldChildTasks
control|)
block|{
comment|// make new generated task depends on all the parent tasks of current task.
name|newTask
operator|.
name|addDependentTask
argument_list|(
name|tsk
argument_list|)
expr_stmt|;
comment|// remove the current task from its original parent task's dependent task
name|tsk
operator|.
name|getParentTasks
argument_list|()
operator|.
name|remove
argument_list|(
name|currTask
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|dispatch
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|nodeOutputs
operator|==
literal|null
operator|||
name|nodeOutputs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"No Dispatch Context"
argument_list|)
throw|;
block|}
name|TaskGraphWalkerContext
name|walkerCtx
init|=
operator|(
name|TaskGraphWalkerContext
operator|)
name|nodeOutputs
index|[
literal|0
index|]
decl_stmt|;
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|currTask
init|=
operator|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
operator|)
name|nd
decl_stmt|;
comment|// not map reduce task or not conditional task, just skip
if|if
condition|(
name|currTask
operator|.
name|isMapRedTask
argument_list|()
condition|)
block|{
if|if
condition|(
name|currTask
operator|instanceof
name|ConditionalTask
condition|)
block|{
comment|// get the list of task
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|taskList
init|=
operator|(
operator|(
name|ConditionalTask
operator|)
name|currTask
operator|)
operator|.
name|getListTasks
argument_list|()
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
range|:
name|taskList
control|)
block|{
if|if
condition|(
name|tsk
operator|.
name|isMapRedTask
argument_list|()
condition|)
block|{
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|newTask
init|=
name|this
operator|.
name|processCurrentTask
argument_list|(
operator|(
name|MapRedTask
operator|)
name|tsk
argument_list|,
operator|(
operator|(
name|ConditionalTask
operator|)
name|currTask
operator|)
argument_list|,
name|physicalContext
operator|.
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|walkerCtx
operator|.
name|addToDispatchList
argument_list|(
name|newTask
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|newTask
init|=
name|this
operator|.
name|processCurrentTask
argument_list|(
operator|(
name|MapRedTask
operator|)
name|currTask
argument_list|,
literal|null
argument_list|,
name|physicalContext
operator|.
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|walkerCtx
operator|.
name|addToDispatchList
argument_list|(
name|newTask
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/*      * If any operator which does not allow map-side conversion is present in the mapper, dont      * convert it into a conditional task.      */
specifier|private
name|boolean
name|checkOperatorOKMapJoinConversion
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|)
block|{
if|if
condition|(
operator|!
name|op
operator|.
name|opAllowedConvertMapJoin
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|op
operator|.
name|getChildOperators
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|childOp
range|:
name|op
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|checkOperatorOKMapJoinConversion
argument_list|(
name|childOp
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|JoinOperator
name|getJoinOp
parameter_list|(
name|MapRedTask
name|task
parameter_list|)
throws|throws
name|SemanticException
block|{
name|MapredWork
name|work
init|=
name|task
operator|.
name|getWork
argument_list|()
decl_stmt|;
if|if
condition|(
name|work
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|reducerOp
init|=
name|work
operator|.
name|getReducer
argument_list|()
decl_stmt|;
if|if
condition|(
name|reducerOp
operator|instanceof
name|JoinOperator
condition|)
block|{
comment|/* Is any operator present, which prevents the conversion */
name|Map
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|aliasToWork
init|=
name|work
operator|.
name|getAliasToWork
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
range|:
name|aliasToWork
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|checkOperatorOKMapJoinConversion
argument_list|(
name|op
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
operator|(
name|JoinOperator
operator|)
name|reducerOp
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

