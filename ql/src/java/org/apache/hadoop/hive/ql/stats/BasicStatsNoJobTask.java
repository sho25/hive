begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|HiveStatsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|EnvironmentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|StatsTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|StatsProvidingRecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
operator|.
name|TableSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|BasicStatsNoJobWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|StageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|LogHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimaps
import|;
end_import

begin_comment
comment|/**  * StatsNoJobTask is used in cases where stats collection is the only task for the given query (no  * parent MR or Tez job). It is used in the following cases 1) ANALYZE with noscan for  * file formats that implement StatsProvidingRecordReader interface: ORC format (implements  * StatsProvidingRecordReader) stores column statistics for all columns in the file footer. Its much  * faster to compute the table/partition statistics by reading the footer than scanning all the  * rows. This task can be used for computing basic stats like numFiles, numRows, fileSize,  * rawDataSize from ORC footer.  **/
end_comment

begin_class
specifier|public
class|class
name|BasicStatsNoJobTask
implements|implements
name|IStatsProcessor
block|{
specifier|private
specifier|static
specifier|transient
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BasicStatsNoJobTask
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|BasicStatsNoJobWork
name|work
decl_stmt|;
specifier|private
name|LogHelper
name|console
decl_stmt|;
specifier|public
name|BasicStatsNoJobTask
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|BasicStatsNoJobWork
name|work
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|work
operator|=
name|work
expr_stmt|;
name|console
operator|=
operator|new
name|LogHelper
argument_list|(
name|LOG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|CompilationOpContext
name|opContext
parameter_list|)
block|{    }
annotation|@
name|Override
specifier|public
name|int
name|process
parameter_list|(
name|Hive
name|db
parameter_list|,
name|Table
name|tbl
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing stats (no job) task"
argument_list|)
expr_stmt|;
name|ExecutorService
name|threadPool
init|=
name|StatsTask
operator|.
name|newThreadPool
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|aggregateStats
argument_list|(
name|threadPool
argument_list|,
name|db
argument_list|)
return|;
block|}
specifier|public
name|StageType
name|getType
parameter_list|()
block|{
return|return
name|StageType
operator|.
name|STATS
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"STATS-NO-JOB"
return|;
block|}
specifier|static
class|class
name|StatItem
block|{
name|Partish
name|partish
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
decl_stmt|;
name|Object
name|result
decl_stmt|;
block|}
specifier|static
class|class
name|FooterStatCollector
implements|implements
name|Runnable
block|{
specifier|private
name|Partish
name|partish
decl_stmt|;
specifier|private
name|Object
name|result
decl_stmt|;
specifier|private
name|JobConf
name|jc
decl_stmt|;
specifier|private
name|Path
name|dir
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|LogHelper
name|console
decl_stmt|;
specifier|public
name|FooterStatCollector
parameter_list|(
name|JobConf
name|jc
parameter_list|,
name|Partish
name|partish
parameter_list|)
block|{
name|this
operator|.
name|jc
operator|=
name|jc
expr_stmt|;
name|this
operator|.
name|partish
operator|=
name|partish
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|Function
argument_list|<
name|FooterStatCollector
argument_list|,
name|String
argument_list|>
name|SIMPLE_NAME_FUNCTION
init|=
operator|new
name|Function
argument_list|<
name|FooterStatCollector
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|FooterStatCollector
name|sc
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s#%s"
argument_list|,
name|sc
operator|.
name|partish
operator|.
name|getTable
argument_list|()
operator|.
name|getCompleteName
argument_list|()
argument_list|,
name|sc
operator|.
name|partish
operator|.
name|getPartishType
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|FooterStatCollector
argument_list|,
name|Partition
argument_list|>
name|EXTRACT_RESULT_FUNCTION
init|=
operator|new
name|Function
argument_list|<
name|FooterStatCollector
argument_list|,
name|Partition
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Partition
name|apply
parameter_list|(
name|FooterStatCollector
name|input
parameter_list|)
block|{
return|return
operator|(
name|Partition
operator|)
name|input
operator|.
name|result
return|;
block|}
block|}
decl_stmt|;
specifier|private
name|boolean
name|isValid
parameter_list|()
block|{
return|return
name|result
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|LogHelper
name|console
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|console
operator|=
name|console
expr_stmt|;
name|dir
operator|=
operator|new
name|Path
argument_list|(
name|partish
operator|.
name|getPartSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|dir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
name|partish
operator|.
name|getPartParameters
argument_list|()
decl_stmt|;
try|try
block|{
name|long
name|numRows
init|=
literal|0
decl_stmt|;
name|long
name|rawDataSize
init|=
literal|0
decl_stmt|;
name|long
name|fileSize
init|=
literal|0
decl_stmt|;
name|long
name|numFiles
init|=
literal|0
decl_stmt|;
comment|// Note: this code would be invalid for transactional tables of any kind.
name|Utilities
operator|.
name|FILE_OP_LOGGER
operator|.
name|debug
argument_list|(
literal|"Aggregating stats for {}"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|fileList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|partish
operator|.
name|getTable
argument_list|()
operator|!=
literal|null
operator|&&
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|partish
operator|.
name|getTable
argument_list|()
argument_list|)
condition|)
block|{
name|fileList
operator|=
name|AcidUtils
operator|.
name|getAcidFilesForStats
argument_list|(
name|partish
operator|.
name|getTable
argument_list|()
argument_list|,
name|dir
argument_list|,
name|jc
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileList
operator|=
name|HiveStatsUtils
operator|.
name|getFileStatusRecurse
argument_list|(
name|dir
argument_list|,
operator|-
literal|1
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FileStatus
name|file
range|:
name|fileList
control|)
block|{
name|Utilities
operator|.
name|FILE_OP_LOGGER
operator|.
name|debug
argument_list|(
literal|"Computing stats for {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|inputFormat
init|=
name|ReflectionUtil
operator|.
name|newInstance
argument_list|(
name|partish
operator|.
name|getInputFormatClass
argument_list|()
argument_list|,
name|jc
argument_list|)
decl_stmt|;
name|InputSplit
name|dummySplit
init|=
operator|new
name|FileSplit
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|String
index|[]
block|{
name|partish
operator|.
name|getLocation
argument_list|()
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|getLen
argument_list|()
operator|==
literal|0
condition|)
block|{
name|numFiles
operator|+=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|recordReader
init|=
name|inputFormat
operator|.
name|getRecordReader
argument_list|(
name|dummySplit
argument_list|,
name|jc
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|recordReader
operator|instanceof
name|StatsProvidingRecordReader
condition|)
block|{
name|StatsProvidingRecordReader
name|statsRR
decl_stmt|;
name|statsRR
operator|=
operator|(
name|StatsProvidingRecordReader
operator|)
name|recordReader
expr_stmt|;
name|rawDataSize
operator|+=
name|statsRR
operator|.
name|getStats
argument_list|()
operator|.
name|getRawDataSize
argument_list|()
expr_stmt|;
name|numRows
operator|+=
name|statsRR
operator|.
name|getStats
argument_list|()
operator|.
name|getRowCount
argument_list|()
expr_stmt|;
name|fileSize
operator|+=
name|file
operator|.
name|getLen
argument_list|()
expr_stmt|;
name|numFiles
operator|+=
literal|1
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected file found during reading footers for: %s "
argument_list|,
name|file
argument_list|)
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|recordReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|StatsSetupConst
operator|.
name|setBasicStatsState
argument_list|(
name|parameters
argument_list|,
name|StatsSetupConst
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|numRows
argument_list|)
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|StatsSetupConst
operator|.
name|RAW_DATA_SIZE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|rawDataSize
argument_list|)
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|StatsSetupConst
operator|.
name|TOTAL_SIZE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|fileSize
argument_list|)
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|StatsSetupConst
operator|.
name|NUM_FILES
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|numFiles
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|partish
operator|.
name|getPartition
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|Partition
argument_list|(
name|partish
operator|.
name|getTable
argument_list|()
argument_list|,
name|partish
operator|.
name|getPartition
argument_list|()
operator|.
name|getTPartition
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|new
name|Table
argument_list|(
name|partish
operator|.
name|getTable
argument_list|()
operator|.
name|getTTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|msg
init|=
name|partish
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" stats: ["
operator|+
name|toString
argument_list|(
name|parameters
argument_list|)
operator|+
literal|']'
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"[Warning] could not update stats for "
operator|+
name|partish
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"."
argument_list|,
literal|"Failed with exception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|toString
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|statType
range|:
name|StatsSetupConst
operator|.
name|supportedStats
control|)
block|{
name|String
name|value
init|=
name|parameters
operator|.
name|get
argument_list|(
name|statType
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|builder
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|statType
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|private
name|int
name|aggregateStats
parameter_list|(
name|ExecutorService
name|threadPool
parameter_list|,
name|Hive
name|db
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
try|try
block|{
name|JobConf
name|jc
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|TableSpec
name|tableSpecs
init|=
name|work
operator|.
name|getTableSpecs
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableSpecs
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"this is unexpected...needs some investigation"
argument_list|)
throw|;
block|}
name|Table
name|table
init|=
name|tableSpecs
operator|.
name|tableHandle
decl_stmt|;
name|Collection
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|work
operator|.
name|getPartitions
argument_list|()
operator|==
literal|null
operator|||
name|work
operator|.
name|getPartitions
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|table
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|partitions
operator|=
name|tableSpecs
operator|.
name|partitions
expr_stmt|;
block|}
block|}
else|else
block|{
name|partitions
operator|=
name|work
operator|.
name|getPartitions
argument_list|()
expr_stmt|;
block|}
name|LinkedList
argument_list|<
name|Partish
argument_list|>
name|partishes
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
decl_stmt|;
if|if
condition|(
name|partitions
operator|==
literal|null
condition|)
block|{
name|partishes
operator|.
name|add
argument_list|(
name|Partish
operator|.
name|buildFor
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Partition
name|part
range|:
name|partitions
control|)
block|{
name|partishes
operator|.
name|add
argument_list|(
name|Partish
operator|.
name|buildFor
argument_list|(
name|table
argument_list|,
name|part
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|FooterStatCollector
argument_list|>
name|scs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Partish
name|partish
range|:
name|partishes
control|)
block|{
name|scs
operator|.
name|add
argument_list|(
operator|new
name|FooterStatCollector
argument_list|(
name|jc
argument_list|,
name|partish
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FooterStatCollector
name|sc
range|:
name|scs
control|)
block|{
name|sc
operator|.
name|init
argument_list|(
name|conf
argument_list|,
name|console
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|execute
argument_list|(
name|sc
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stats collection waiting for threadpool to shutdown.."
argument_list|)
expr_stmt|;
name|shutdownAndAwaitTermination
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stats collection threadpool shutdown successful."
argument_list|)
expr_stmt|;
name|ret
operator|=
name|updatePartitions
argument_list|(
name|db
argument_list|,
name|scs
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Failed to collect footer statistics."
argument_list|,
literal|"Failed with exception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fail the query if the stats are supposed to be reliable
if|if
condition|(
name|work
operator|.
name|isStatsReliable
argument_list|()
condition|)
block|{
name|ret
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
comment|// The return value of 0 indicates success,
comment|// anything else indicates failure
return|return
name|ret
return|;
block|}
specifier|private
name|int
name|updatePartitions
parameter_list|(
name|Hive
name|db
parameter_list|,
name|List
argument_list|<
name|FooterStatCollector
argument_list|>
name|scs
parameter_list|,
name|Table
name|table
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|HiveException
block|{
name|String
name|tableFullName
init|=
name|table
operator|.
name|getFullyQualifiedName
argument_list|()
decl_stmt|;
if|if
condition|(
name|scs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|work
operator|.
name|isStatsReliable
argument_list|()
condition|)
block|{
for|for
control|(
name|FooterStatCollector
name|statsCollection
range|:
name|scs
control|)
block|{
if|if
condition|(
name|statsCollection
operator|.
name|result
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stats requested to be reliable. Empty stats found: {}"
argument_list|,
name|statsCollection
operator|.
name|partish
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
name|List
argument_list|<
name|FooterStatCollector
argument_list|>
name|validColectors
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|FooterStatCollector
name|statsCollection
range|:
name|scs
control|)
block|{
if|if
condition|(
name|statsCollection
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|validColectors
operator|.
name|add
argument_list|(
name|statsCollection
argument_list|)
expr_stmt|;
block|}
block|}
name|EnvironmentContext
name|environmentContext
init|=
operator|new
name|EnvironmentContext
argument_list|()
decl_stmt|;
name|environmentContext
operator|.
name|putToProperties
argument_list|(
name|StatsSetupConst
operator|.
name|DO_NOT_UPDATE_STATS
argument_list|,
name|StatsSetupConst
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|ImmutableListMultimap
argument_list|<
name|String
argument_list|,
name|FooterStatCollector
argument_list|>
name|collectorsByTable
init|=
name|Multimaps
operator|.
name|index
argument_list|(
name|validColectors
argument_list|,
name|FooterStatCollector
operator|.
name|SIMPLE_NAME_FUNCTION
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Collectors.size(): {}"
argument_list|,
name|collectorsByTable
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|collectorsByTable
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Collectors are empty! ; {}"
argument_list|,
name|tableFullName
argument_list|)
expr_stmt|;
block|}
comment|// for now this should be true...
assert|assert
operator|(
name|collectorsByTable
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
operator|)
assert|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updating stats for: {}"
argument_list|,
name|tableFullName
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|collectorsByTable
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ImmutableList
argument_list|<
name|FooterStatCollector
argument_list|>
name|values
init|=
name|collectorsByTable
operator|.
name|get
argument_list|(
name|partName
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"very intresting"
argument_list|)
throw|;
block|}
if|if
condition|(
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|result
operator|instanceof
name|Table
condition|)
block|{
name|db
operator|.
name|alterTable
argument_list|(
name|tableFullName
argument_list|,
operator|(
name|Table
operator|)
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|result
argument_list|,
name|environmentContext
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updated stats for {}."
argument_list|,
name|tableFullName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|result
operator|instanceof
name|Partition
condition|)
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|results
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|values
argument_list|,
name|FooterStatCollector
operator|.
name|EXTRACT_RESULT_FUNCTION
argument_list|)
decl_stmt|;
name|db
operator|.
name|alterPartitions
argument_list|(
name|tableFullName
argument_list|,
name|results
argument_list|,
name|environmentContext
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Bulk updated {} partitions of {}."
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|,
name|tableFullName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"inconsistent"
argument_list|)
throw|;
block|}
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updated stats for: {}"
argument_list|,
name|tableFullName
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|private
name|void
name|shutdownAndAwaitTermination
parameter_list|(
name|ExecutorService
name|threadPool
parameter_list|)
block|{
comment|// Disable new tasks from being submitted
name|threadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Wait a while for existing tasks to terminate
comment|// XXX this will wait forever... :)
while|while
condition|(
operator|!
name|threadPool
operator|.
name|awaitTermination
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for all stats tasks to finish..."
argument_list|)
expr_stmt|;
block|}
comment|// Cancel currently executing tasks
name|threadPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
comment|// Wait a while for tasks to respond to being cancelled
if|if
condition|(
operator|!
name|threadPool
operator|.
name|awaitTermination
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stats collection thread pool did not terminate"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// Cancel again if current thread also interrupted
name|threadPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
comment|// Preserve interrupt status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDpPartSpecs
parameter_list|(
name|Collection
argument_list|<
name|Partition
argument_list|>
name|dpPartSpecs
parameter_list|)
block|{   }
block|}
end_class

end_unit

