begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|jdbc
operator|.
name|JdbcConvention
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|jdbc
operator|.
name|JdbcRules
operator|.
name|JdbcProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|ConventionTraitDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|convert
operator|.
name|ConverterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlDialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ControlFlowException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveRelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
operator|.
name|jdbc
operator|.
name|HiveJdbcImplementor
import|;
end_import

begin_comment
comment|/**  * This is a designated RelNode that splits the Hive operators and the Jdbc operators,  * every successor of this node will be Jdbc operator.  */
end_comment

begin_class
specifier|public
class|class
name|HiveJdbcConverter
extends|extends
name|ConverterImpl
implements|implements
name|HiveRelNode
block|{
specifier|private
specifier|final
name|JdbcConvention
name|convention
decl_stmt|;
specifier|private
specifier|final
name|String
name|url
decl_stmt|;
specifier|private
specifier|final
name|String
name|user
decl_stmt|;
specifier|public
name|HiveJdbcConverter
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traits
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|JdbcConvention
name|jc
parameter_list|,
name|String
name|url
parameter_list|,
name|String
name|user
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|ConventionTraitDef
operator|.
name|INSTANCE
argument_list|,
name|traits
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|convention
operator|=
name|jc
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
specifier|public
name|JdbcConvention
name|getJdbcConvention
parameter_list|()
block|{
return|return
name|convention
return|;
block|}
specifier|public
name|SqlDialect
name|getJdbcDialect
parameter_list|()
block|{
return|return
name|convention
operator|.
name|dialect
return|;
block|}
specifier|public
name|String
name|getConnectionUrl
parameter_list|()
block|{
return|return
name|url
return|;
block|}
specifier|public
name|String
name|getConnectionUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|implement
parameter_list|(
name|Implementor
name|implementor
parameter_list|)
block|{    }
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
return|return
operator|new
name|HiveJdbcConverter
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|sole
argument_list|(
name|inputs
argument_list|)
argument_list|,
name|convention
argument_list|,
name|url
argument_list|,
name|user
argument_list|)
return|;
block|}
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|)
block|{
return|return
operator|new
name|HiveJdbcConverter
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|convention
argument_list|,
name|url
argument_list|,
name|user
argument_list|)
return|;
block|}
specifier|public
name|String
name|generateSql
parameter_list|()
block|{
name|SqlDialect
name|dialect
init|=
name|getJdbcDialect
argument_list|()
decl_stmt|;
specifier|final
name|HiveJdbcImplementor
name|jdbcImplementor
init|=
operator|new
name|HiveJdbcImplementor
argument_list|(
name|dialect
argument_list|,
operator|(
name|JavaTypeFactory
operator|)
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
decl_stmt|;
name|Project
name|topProject
decl_stmt|;
if|if
condition|(
name|getInput
argument_list|()
operator|instanceof
name|Project
condition|)
block|{
name|topProject
operator|=
operator|(
name|Project
operator|)
name|getInput
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// If it is not a project operator, we add it on top of the input
comment|// to force generating the column names instead of * while
comment|// translating to SQL
name|RelNode
name|nodeToTranslate
init|=
name|getInput
argument_list|()
decl_stmt|;
name|RexBuilder
name|builder
init|=
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nodeToTranslate
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeToTranslate
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|projects
operator|.
name|add
argument_list|(
name|builder
operator|.
name|makeInputRef
argument_list|(
name|nodeToTranslate
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|topProject
operator|=
operator|new
name|JdbcProject
argument_list|(
name|nodeToTranslate
operator|.
name|getCluster
argument_list|()
argument_list|,
name|nodeToTranslate
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|nodeToTranslate
argument_list|,
name|projects
argument_list|,
name|nodeToTranslate
operator|.
name|getRowType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|HiveJdbcImplementor
operator|.
name|Result
name|result
init|=
name|jdbcImplementor
operator|.
name|translate
argument_list|(
name|topProject
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|asStatement
argument_list|()
operator|.
name|toSqlString
argument_list|(
name|dialect
argument_list|)
operator|.
name|getSql
argument_list|()
return|;
block|}
comment|/**    * Whether the execution of the query below this jdbc converter    * can be split by Hive.    */
specifier|public
name|boolean
name|splittingAllowed
parameter_list|()
block|{
name|JdbcRelVisitor
name|visitor
init|=
operator|new
name|JdbcRelVisitor
argument_list|()
decl_stmt|;
name|visitor
operator|.
name|go
argument_list|(
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|visitor
operator|.
name|splittingAllowed
return|;
block|}
specifier|public
name|JdbcHiveTableScan
name|getTableScan
parameter_list|()
block|{
specifier|final
name|JdbcHiveTableScan
index|[]
name|tmpJdbcHiveTableScan
init|=
operator|new
name|JdbcHiveTableScan
index|[
literal|1
index|]
decl_stmt|;
operator|new
name|RelVisitor
argument_list|()
block|{
specifier|public
name|void
name|visit
parameter_list|(
name|RelNode
name|node
parameter_list|,
name|int
name|ordinal
parameter_list|,
name|RelNode
name|parent
parameter_list|)
block|{
if|if
condition|(
name|node
operator|instanceof
name|JdbcHiveTableScan
operator|&&
name|tmpJdbcHiveTableScan
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
name|tmpJdbcHiveTableScan
index|[
literal|0
index|]
operator|=
operator|(
name|JdbcHiveTableScan
operator|)
name|node
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|visit
argument_list|(
name|node
argument_list|,
name|ordinal
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|go
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|JdbcHiveTableScan
name|jdbcHiveTableScan
init|=
name|tmpJdbcHiveTableScan
index|[
literal|0
index|]
decl_stmt|;
assert|assert
name|jdbcHiveTableScan
operator|!=
literal|null
assert|;
return|return
name|jdbcHiveTableScan
return|;
block|}
specifier|private
specifier|static
class|class
name|JdbcRelVisitor
extends|extends
name|RelVisitor
block|{
specifier|private
name|boolean
name|splittingAllowed
decl_stmt|;
specifier|public
name|JdbcRelVisitor
parameter_list|()
block|{
name|this
operator|.
name|splittingAllowed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|RelNode
name|node
parameter_list|,
name|int
name|ordinal
parameter_list|,
name|RelNode
name|parent
parameter_list|)
block|{
if|if
condition|(
name|node
operator|instanceof
name|Project
operator|||
name|node
operator|instanceof
name|Filter
operator|||
name|node
operator|instanceof
name|TableScan
condition|)
block|{
comment|// We can continue
name|super
operator|.
name|visit
argument_list|(
name|node
argument_list|,
name|ordinal
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ReturnedValue
argument_list|(
literal|false
argument_list|)
throw|;
block|}
block|}
comment|/**      * Starts an iteration.      */
specifier|public
name|RelNode
name|go
parameter_list|(
name|RelNode
name|p
parameter_list|)
block|{
try|try
block|{
name|visit
argument_list|(
name|p
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReturnedValue
name|e
parameter_list|)
block|{
comment|// Splitting cannot be performed
name|splittingAllowed
operator|=
name|e
operator|.
name|value
expr_stmt|;
block|}
return|return
name|p
return|;
block|}
comment|/**      * Exception used to interrupt a visitor walk.      */
specifier|private
specifier|static
class|class
name|ReturnedValue
extends|extends
name|ControlFlowException
block|{
specifier|private
specifier|final
name|boolean
name|value
decl_stmt|;
specifier|public
name|ReturnedValue
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

