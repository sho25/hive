begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|hep
operator|.
name|HepRelVertex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|volcano
operator|.
name|RelSubset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Correlate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|SetOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|BitSets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveSemiJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveSortLimit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveTableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ColStatistics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * EstimateUniqueKeys provides an ability to estimate unique keys based on statistics.  */
end_comment

begin_comment
comment|//TODO: Ideally RelMdUniqueKeys should be modified (on Calcite side) to accept a parameter based on which
end_comment

begin_comment
comment|// this logic whoud be implemented
end_comment

begin_class
specifier|public
specifier|final
class|class
name|EstimateUniqueKeys
block|{
comment|//~ Constructors -----------------------------------------------------------
specifier|private
name|EstimateUniqueKeys
parameter_list|()
block|{   }
comment|//~ Methods ----------------------------------------------------------------
specifier|private
specifier|static
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|getUniqueKeys
parameter_list|(
name|HiveFilter
name|rel
parameter_list|)
block|{
return|return
name|getUniqueKeys
argument_list|(
name|rel
operator|.
name|getInput
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|getUniqueKeys
parameter_list|(
name|HiveSortLimit
name|rel
parameter_list|)
block|{
return|return
name|getUniqueKeys
argument_list|(
name|rel
operator|.
name|getInput
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|getUniqueKeys
parameter_list|(
name|Correlate
name|rel
parameter_list|)
block|{
return|return
name|getUniqueKeys
argument_list|(
name|rel
operator|.
name|getLeft
argument_list|()
argument_list|)
return|;
block|}
comment|//Infer Uniquenes if: - rowCount(col) = ndv(col) - TBD for numerics: max(col)
comment|// - min(col) = rowCount(col)
specifier|private
specifier|static
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|generateKeysUsingStatsEstimation
parameter_list|(
name|Project
name|rel
parameter_list|,
name|HiveTableScan
name|tScan
parameter_list|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|posMap
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|projectPos
init|=
literal|0
decl_stmt|;
name|int
name|colStatsPos
init|=
literal|0
decl_stmt|;
name|BitSet
name|projectedCols
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|r
range|:
name|rel
operator|.
name|getProjects
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|RexInputRef
condition|)
block|{
name|projectedCols
operator|.
name|set
argument_list|(
operator|(
operator|(
name|RexInputRef
operator|)
name|r
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|posMap
operator|.
name|put
argument_list|(
name|colStatsPos
argument_list|,
name|projectPos
argument_list|)
expr_stmt|;
name|colStatsPos
operator|++
expr_stmt|;
block|}
name|projectPos
operator|++
expr_stmt|;
block|}
name|RelMetadataQuery
name|mq
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
name|double
name|numRows
init|=
name|mq
operator|.
name|getRowCount
argument_list|(
name|tScan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ColStatistics
argument_list|>
name|colStats
init|=
name|tScan
operator|.
name|getColStat
argument_list|(
name|BitSets
operator|.
name|toList
argument_list|(
name|projectedCols
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|keys
init|=
operator|new
name|HashSet
argument_list|<
name|ImmutableBitSet
argument_list|>
argument_list|()
decl_stmt|;
name|colStatsPos
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|ColStatistics
name|cStat
range|:
name|colStats
control|)
block|{
name|boolean
name|isKey
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|cStat
operator|.
name|getCountDistint
argument_list|()
operator|>=
name|numRows
condition|)
block|{
name|isKey
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isKey
operator|&&
name|cStat
operator|.
name|getRange
argument_list|()
operator|!=
literal|null
operator|&&
name|cStat
operator|.
name|getRange
argument_list|()
operator|.
name|maxValue
operator|!=
literal|null
operator|&&
name|cStat
operator|.
name|getRange
argument_list|()
operator|.
name|minValue
operator|!=
literal|null
condition|)
block|{
name|double
name|r
init|=
name|cStat
operator|.
name|getRange
argument_list|()
operator|.
name|maxValue
operator|.
name|doubleValue
argument_list|()
operator|-
name|cStat
operator|.
name|getRange
argument_list|()
operator|.
name|minValue
operator|.
name|doubleValue
argument_list|()
operator|+
literal|1
decl_stmt|;
name|isKey
operator|=
operator|(
name|Math
operator|.
name|abs
argument_list|(
name|numRows
operator|-
name|r
argument_list|)
operator|<
name|RelOptUtil
operator|.
name|EPSILON
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|isKey
condition|)
block|{
name|ImmutableBitSet
name|key
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|posMap
operator|.
name|get
argument_list|(
name|colStatsPos
argument_list|)
argument_list|)
decl_stmt|;
name|keys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|colStatsPos
operator|++
expr_stmt|;
block|}
return|return
name|keys
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|getUniqueKeys
parameter_list|(
name|HiveProject
name|rel
parameter_list|)
block|{
name|HiveTableScan
name|tScan
init|=
name|getTableScan
argument_list|(
name|rel
operator|.
name|getInput
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|tScan
operator|!=
literal|null
condition|)
block|{
return|return
name|generateKeysUsingStatsEstimation
argument_list|(
name|rel
argument_list|,
name|tScan
argument_list|)
return|;
block|}
comment|// LogicalProject maps a set of rows to a different set;
comment|// Without knowledge of the mapping function(whether it
comment|// preserves uniqueness), it is only safe to derive uniqueness
comment|// info from the child of a project when the mapping is f(a) => a.
comment|//
comment|// Further more, the unique bitset coming from the child needs
comment|// to be mapped to match the output of the project.
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|mapInToOutPos
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|projExprs
init|=
name|rel
operator|.
name|getProjects
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|projUniqueKeySet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Build an input to output position map.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|projExprs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RexNode
name|projExpr
init|=
name|projExprs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|projExpr
operator|instanceof
name|RexInputRef
condition|)
block|{
name|mapInToOutPos
operator|.
name|put
argument_list|(
operator|(
operator|(
name|RexInputRef
operator|)
name|projExpr
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mapInToOutPos
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// if there's no RexInputRef in the projected expressions
comment|// return empty set.
return|return
name|projUniqueKeySet
return|;
block|}
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|childUniqueKeySet
init|=
name|getUniqueKeys
argument_list|(
name|rel
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|childUniqueKeySet
operator|!=
literal|null
condition|)
block|{
comment|// Now add to the projUniqueKeySet the child keys that are fully
comment|// projected.
for|for
control|(
name|ImmutableBitSet
name|colMask
range|:
name|childUniqueKeySet
control|)
block|{
name|ImmutableBitSet
operator|.
name|Builder
name|tmpMask
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|boolean
name|completeKeyProjected
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|bit
range|:
name|colMask
control|)
block|{
if|if
condition|(
name|mapInToOutPos
operator|.
name|containsKey
argument_list|(
name|bit
argument_list|)
condition|)
block|{
name|tmpMask
operator|.
name|set
argument_list|(
name|mapInToOutPos
operator|.
name|get
argument_list|(
name|bit
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Skip the child unique key if part of it is not
comment|// projected.
name|completeKeyProjected
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|completeKeyProjected
condition|)
block|{
name|projUniqueKeySet
operator|.
name|add
argument_list|(
name|tmpMask
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|projUniqueKeySet
return|;
block|}
specifier|private
specifier|static
name|RelNode
name|getRelNode
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
if|if
condition|(
name|rel
operator|!=
literal|null
operator|&&
name|rel
operator|instanceof
name|HepRelVertex
condition|)
block|{
name|rel
operator|=
operator|(
operator|(
name|HepRelVertex
operator|)
name|rel
operator|)
operator|.
name|getCurrentRel
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rel
operator|!=
literal|null
operator|&&
name|rel
operator|instanceof
name|RelSubset
condition|)
block|{
name|rel
operator|=
name|Util
operator|.
name|first
argument_list|(
operator|(
operator|(
name|RelSubset
operator|)
name|rel
operator|)
operator|.
name|getBest
argument_list|()
argument_list|,
operator|(
operator|(
name|RelSubset
operator|)
name|rel
operator|)
operator|.
name|getOriginal
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rel
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|getUniqueKeys
parameter_list|(
name|HiveJoin
name|rel
parameter_list|)
block|{
name|RelNode
name|left
init|=
name|getRelNode
argument_list|(
name|rel
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
name|RelNode
name|right
init|=
name|getRelNode
argument_list|(
name|rel
operator|.
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
comment|// first add the different combinations of concatenated unique keys
comment|// from the left and the right, adjusting the right hand side keys to
comment|// reflect the addition of the left hand side
comment|//
comment|// NOTE zfong 12/18/06 - If the number of tables in a join is large,
comment|// the number of combinations of unique key sets will explode.  If
comment|// that is undesirable, use RelMetadataQuery.areColumnsUnique() as
comment|// an alternative way of getting unique key information.
specifier|final
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|retSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|leftSet
init|=
name|getUniqueKeys
argument_list|(
name|left
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|rightSet
init|=
literal|null
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|tmpRightSet
init|=
name|getUniqueKeys
argument_list|(
name|right
argument_list|)
decl_stmt|;
name|int
name|nFieldsOnLeft
init|=
name|left
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmpRightSet
operator|!=
literal|null
condition|)
block|{
name|rightSet
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|ImmutableBitSet
name|colMask
range|:
name|tmpRightSet
control|)
block|{
name|ImmutableBitSet
operator|.
name|Builder
name|tmpMask
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|bit
range|:
name|colMask
control|)
block|{
name|tmpMask
operator|.
name|set
argument_list|(
name|bit
operator|+
name|nFieldsOnLeft
argument_list|)
expr_stmt|;
block|}
name|rightSet
operator|.
name|add
argument_list|(
name|tmpMask
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|leftSet
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ImmutableBitSet
name|colMaskRight
range|:
name|rightSet
control|)
block|{
for|for
control|(
name|ImmutableBitSet
name|colMaskLeft
range|:
name|leftSet
control|)
block|{
name|retSet
operator|.
name|add
argument_list|(
name|colMaskLeft
operator|.
name|union
argument_list|(
name|colMaskRight
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// locate the columns that participate in equijoins
specifier|final
name|JoinInfo
name|joinInfo
init|=
name|rel
operator|.
name|analyzeCondition
argument_list|()
decl_stmt|;
name|RelMetadataQuery
name|mq
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
comment|// determine if either or both the LHS and RHS are unique on the
comment|// equijoin columns
specifier|final
name|Boolean
name|leftUnique
init|=
name|mq
operator|.
name|areColumnsUnique
argument_list|(
name|left
argument_list|,
name|joinInfo
operator|.
name|leftSet
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Boolean
name|rightUnique
init|=
name|mq
operator|.
name|areColumnsUnique
argument_list|(
name|right
argument_list|,
name|joinInfo
operator|.
name|rightSet
argument_list|()
argument_list|)
decl_stmt|;
comment|// if the right hand side is unique on its equijoin columns, then we can
comment|// add the unique keys from left if the left hand side is not null
comment|// generating
if|if
condition|(
operator|(
name|rightUnique
operator|!=
literal|null
operator|)
operator|&&
name|rightUnique
operator|&&
operator|(
name|leftSet
operator|!=
literal|null
operator|)
operator|&&
operator|!
operator|(
name|rel
operator|.
name|getJoinType
argument_list|()
operator|.
name|generatesNullsOnLeft
argument_list|()
operator|)
condition|)
block|{
name|retSet
operator|.
name|addAll
argument_list|(
name|leftSet
argument_list|)
expr_stmt|;
block|}
comment|// same as above except left and right are reversed
if|if
condition|(
operator|(
name|leftUnique
operator|!=
literal|null
operator|)
operator|&&
name|leftUnique
operator|&&
operator|(
name|rightSet
operator|!=
literal|null
operator|)
operator|&&
operator|!
operator|(
name|rel
operator|.
name|getJoinType
argument_list|()
operator|.
name|generatesNullsOnRight
argument_list|()
operator|)
condition|)
block|{
name|retSet
operator|.
name|addAll
argument_list|(
name|rightSet
argument_list|)
expr_stmt|;
block|}
return|return
name|retSet
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|getUniqueKeys
parameter_list|(
name|HiveSemiJoin
name|rel
parameter_list|)
block|{
comment|// only return the unique keys from the LHS since a semijoin only
comment|// returns the LHS
return|return
name|getUniqueKeys
argument_list|(
name|rel
operator|.
name|getLeft
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|getUniqueKeys
parameter_list|(
name|HiveAggregate
name|rel
parameter_list|)
block|{
comment|// group by keys form a unique key
return|return
name|ImmutableSet
operator|.
name|of
argument_list|(
name|rel
operator|.
name|getGroupSet
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|getUniqueKeys
parameter_list|(
name|SetOp
name|rel
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rel
operator|.
name|all
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|rel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
comment|// Catch-all rule when none of the others apply.
specifier|public
specifier|static
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|getUniqueKeys
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
name|rel
operator|=
name|getRelNode
argument_list|(
name|rel
argument_list|)
expr_stmt|;
if|if
condition|(
name|rel
operator|instanceof
name|HiveFilter
condition|)
block|{
return|return
name|getUniqueKeys
argument_list|(
operator|(
name|HiveFilter
operator|)
name|rel
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rel
operator|instanceof
name|HiveSortLimit
condition|)
block|{
return|return
name|getUniqueKeys
argument_list|(
operator|(
name|HiveSortLimit
operator|)
name|rel
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rel
operator|instanceof
name|Correlate
condition|)
block|{
return|return
name|getUniqueKeys
argument_list|(
operator|(
name|Correlate
operator|)
name|rel
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rel
operator|instanceof
name|HiveProject
condition|)
block|{
return|return
name|getUniqueKeys
argument_list|(
operator|(
name|HiveProject
operator|)
name|rel
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rel
operator|instanceof
name|HiveJoin
condition|)
block|{
return|return
name|getUniqueKeys
argument_list|(
operator|(
name|HiveJoin
operator|)
name|rel
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rel
operator|instanceof
name|HiveSemiJoin
condition|)
block|{
return|return
name|getUniqueKeys
argument_list|(
operator|(
name|HiveSemiJoin
operator|)
name|rel
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rel
operator|instanceof
name|HiveAggregate
condition|)
block|{
return|return
name|getUniqueKeys
argument_list|(
operator|(
name|HiveAggregate
operator|)
name|rel
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rel
operator|instanceof
name|SetOp
condition|)
block|{
return|return
name|getUniqueKeys
argument_list|(
operator|(
name|SetOp
operator|)
name|rel
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/*    * traverse a path of Filter, Projects to get to the TableScan.    * In case of Unique keys, stop if you reach a Project, it will be handled    * by the invocation on the Project.    * In case of getting the base rowCount of a Path, keep going past a Project.    */
specifier|static
name|HiveTableScan
name|getTableScan
parameter_list|(
name|RelNode
name|r
parameter_list|,
name|boolean
name|traverseProject
parameter_list|)
block|{
while|while
condition|(
name|r
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|r
operator|instanceof
name|HiveTableScan
operator|)
condition|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|HepRelVertex
condition|)
block|{
name|r
operator|=
operator|(
operator|(
name|HepRelVertex
operator|)
name|r
operator|)
operator|.
name|getCurrentRel
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|instanceof
name|Filter
condition|)
block|{
name|r
operator|=
operator|(
operator|(
name|Filter
operator|)
name|r
operator|)
operator|.
name|getInput
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|traverseProject
operator|&&
name|r
operator|instanceof
name|Project
condition|)
block|{
name|r
operator|=
operator|(
operator|(
name|Project
operator|)
name|r
operator|)
operator|.
name|getInput
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|r
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|HiveTableScan
operator|)
name|r
return|;
block|}
block|}
end_class

begin_comment
comment|// End EstimateUniqueKeys.java
end_comment

end_unit

