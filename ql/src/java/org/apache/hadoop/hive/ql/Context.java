begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_class
specifier|public
class|class
name|Context
block|{
specifier|private
name|File
name|resFile
decl_stmt|;
specifier|private
name|Path
name|resDir
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"hive.ql.Context"
argument_list|)
decl_stmt|;
specifier|private
name|Path
index|[]
name|resDirPaths
decl_stmt|;
specifier|private
name|int
name|resDirFilesNum
decl_stmt|;
name|boolean
name|initialized
decl_stmt|;
specifier|public
name|Context
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
try|try
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|initialized
operator|=
literal|false
expr_stmt|;
name|resDir
operator|=
literal|null
expr_stmt|;
name|resFile
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Context creation error: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return the resFile    */
specifier|public
name|File
name|getResFile
parameter_list|()
block|{
return|return
name|resFile
return|;
block|}
comment|/**    * @param resFile the resFile to set    */
specifier|public
name|void
name|setResFile
parameter_list|(
name|File
name|resFile
parameter_list|)
block|{
name|this
operator|.
name|resFile
operator|=
name|resFile
expr_stmt|;
name|resDir
operator|=
literal|null
expr_stmt|;
name|resDirPaths
operator|=
literal|null
expr_stmt|;
name|resDirFilesNum
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * @return the resDir    */
specifier|public
name|Path
name|getResDir
parameter_list|()
block|{
return|return
name|resDir
return|;
block|}
comment|/**    * @param resDir the resDir to set    */
specifier|public
name|void
name|setResDir
parameter_list|(
name|Path
name|resDir
parameter_list|)
block|{
name|this
operator|.
name|resDir
operator|=
name|resDir
expr_stmt|;
name|resFile
operator|=
literal|null
expr_stmt|;
name|resDirFilesNum
operator|=
literal|0
expr_stmt|;
name|resDirPaths
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|initialized
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|resDir
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fs
operator|.
name|delete
argument_list|(
name|resDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Context clear error: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|resFile
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|FileOutputStream
name|outStream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|resFile
argument_list|)
decl_stmt|;
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Context clear error: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Context clear error: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|resDir
operator|=
literal|null
expr_stmt|;
name|resFile
operator|=
literal|null
expr_stmt|;
name|resDirFilesNum
operator|=
literal|0
expr_stmt|;
name|resDirPaths
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|InputStream
name|getStream
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
name|initialized
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|(
name|resFile
operator|==
literal|null
operator|)
operator|&&
operator|(
name|resDir
operator|==
literal|null
operator|)
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|resFile
operator|!=
literal|null
condition|)
return|return
call|(
name|InputStream
call|)
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|resFile
argument_list|)
argument_list|)
return|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|resDir
argument_list|)
decl_stmt|;
assert|assert
name|status
operator|.
name|isDir
argument_list|()
assert|;
name|FileStatus
index|[]
name|resDirFS
init|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|resDir
operator|+
literal|"/*"
argument_list|)
argument_list|)
decl_stmt|;
name|resDirPaths
operator|=
operator|new
name|Path
index|[
name|resDirFS
operator|.
name|length
index|]
expr_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileStatus
name|resFS
range|:
name|resDirFS
control|)
if|if
condition|(
operator|!
name|resFS
operator|.
name|isDir
argument_list|()
condition|)
name|resDirPaths
index|[
name|pos
operator|++
index|]
operator|=
name|resFS
operator|.
name|getPath
argument_list|()
expr_stmt|;
if|if
condition|(
name|pos
operator|==
literal|0
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|InputStream
operator|)
name|fs
operator|.
name|open
argument_list|(
name|resDirPaths
index|[
name|resDirFilesNum
operator|++
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getNextStream
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"getStream error: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"getStream error: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|InputStream
name|getNextStream
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|resDir
operator|!=
literal|null
operator|&&
name|resDirFilesNum
operator|<
name|resDirPaths
operator|.
name|length
operator|&&
operator|(
name|resDirPaths
index|[
name|resDirFilesNum
index|]
operator|!=
literal|null
operator|)
condition|)
return|return
operator|(
name|InputStream
operator|)
name|fs
operator|.
name|open
argument_list|(
name|resDirPaths
index|[
name|resDirFilesNum
operator|++
index|]
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"getNextStream error: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"getNextStream error: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

