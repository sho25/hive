begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentLengthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedExpressions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|StringLower
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorConverter
operator|.
name|StringConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|BaseCharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_comment
comment|/**  * UDFLower.  *  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"lower,lcase"
argument_list|,
name|value
operator|=
literal|"_FUNC_(str) - Returns str with all characters changed to lowercase"
argument_list|,
name|extended
operator|=
literal|"Example:\n"
operator|+
literal|"> SELECT _FUNC_('Facebook') FROM src LIMIT 1;\n"
operator|+
literal|"  'facebook'"
argument_list|)
annotation|@
name|VectorizedExpressions
argument_list|(
block|{
name|StringLower
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|GenericUDFLower
extends|extends
name|GenericUDF
block|{
specifier|private
specifier|transient
name|PrimitiveObjectInspector
name|argumentOI
decl_stmt|;
specifier|private
specifier|transient
name|StringConverter
name|stringConverter
decl_stmt|;
specifier|private
specifier|transient
name|PrimitiveCategory
name|returnType
init|=
name|PrimitiveCategory
operator|.
name|STRING
decl_stmt|;
specifier|private
specifier|transient
name|GenericUDFUtils
operator|.
name|StringHelper
name|returnHelper
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
if|if
condition|(
name|arguments
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentLengthException
argument_list|(
literal|"LOWER requires 1 argument, got "
operator|+
name|arguments
operator|.
name|length
argument_list|)
throw|;
block|}
if|if
condition|(
name|arguments
index|[
literal|0
index|]
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"LOWER only takes primitive types, got "
operator|+
name|argumentOI
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
name|argumentOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
literal|0
index|]
expr_stmt|;
name|stringConverter
operator|=
operator|new
name|PrimitiveObjectInspectorConverter
operator|.
name|StringConverter
argument_list|(
name|argumentOI
argument_list|)
expr_stmt|;
name|PrimitiveCategory
name|inputType
init|=
name|argumentOI
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
name|ObjectInspector
name|outputOI
init|=
literal|null
decl_stmt|;
name|BaseCharTypeInfo
name|typeInfo
decl_stmt|;
switch|switch
condition|(
name|inputType
condition|)
block|{
case|case
name|CHAR
case|:
comment|// return type should have same length as the input.
name|returnType
operator|=
name|inputType
expr_stmt|;
name|typeInfo
operator|=
name|TypeInfoFactory
operator|.
name|getCharTypeInfo
argument_list|(
name|GenericUDFUtils
operator|.
name|StringHelper
operator|.
name|getFixedStringSizeForType
argument_list|(
name|argumentOI
argument_list|)
argument_list|)
expr_stmt|;
name|outputOI
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|typeInfo
argument_list|)
expr_stmt|;
break|break;
case|case
name|VARCHAR
case|:
comment|// return type should have same length as the input.
name|returnType
operator|=
name|inputType
expr_stmt|;
name|typeInfo
operator|=
name|TypeInfoFactory
operator|.
name|getVarcharTypeInfo
argument_list|(
name|GenericUDFUtils
operator|.
name|StringHelper
operator|.
name|getFixedStringSizeForType
argument_list|(
name|argumentOI
argument_list|)
argument_list|)
expr_stmt|;
name|outputOI
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|typeInfo
argument_list|)
expr_stmt|;
break|break;
default|default:
name|returnType
operator|=
name|PrimitiveCategory
operator|.
name|STRING
expr_stmt|;
name|outputOI
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
expr_stmt|;
break|break;
block|}
name|returnHelper
operator|=
operator|new
name|GenericUDFUtils
operator|.
name|StringHelper
argument_list|(
name|returnType
argument_list|)
expr_stmt|;
return|return
name|outputOI
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
name|val
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|arguments
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
name|val
operator|=
operator|(
name|String
operator|)
name|stringConverter
operator|.
name|convert
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|val
operator|=
name|val
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
return|return
name|returnHelper
operator|.
name|setReturnValue
argument_list|(
name|val
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
return|return
name|getStandardDisplayString
argument_list|(
literal|"lower"
argument_list|,
name|children
argument_list|)
return|;
block|}
block|}
end_class

end_unit

