begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * A factory of stats publisher and aggregator implementations of the  * StatsPublisher and StatsAggregator interfaces.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|StatsFactory
block|{
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StatsFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|publisherImplementation
decl_stmt|;
specifier|private
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|aggregatorImplementation
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|jobConf
decl_stmt|;
comment|/**    * Sets the paths of the implementation classes of publishing    * and aggregation (IStatsPublisher and IStatsAggregator interfaces).    * The paths are determined according to a configuration parameter which    * is passed as the user input for choosing the implementation as MySQL, HBase, ...    */
specifier|public
specifier|static
name|boolean
name|setImplementation
parameter_list|(
name|String
name|configurationParam
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|ClassLoader
name|classLoader
init|=
name|JavaUtils
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|configurationParam
operator|.
name|equals
argument_list|(
name|StatsSetupConst
operator|.
name|HBASE_IMPL_CLASS_VAL
argument_list|)
condition|)
block|{
comment|// Case: hbase
try|try
block|{
name|publisherImplementation
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.hive.hbase.HBaseStatsPublisher"
argument_list|,
literal|true
argument_list|,
name|classLoader
argument_list|)
expr_stmt|;
name|aggregatorImplementation
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.hive.hbase.HBaseStatsAggregator"
argument_list|,
literal|true
argument_list|,
name|classLoader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"HBase Publisher/Aggregator classes cannot be loaded."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|configurationParam
operator|.
name|contains
argument_list|(
name|StatsSetupConst
operator|.
name|JDBC_IMPL_CLASS_VAL
argument_list|)
condition|)
block|{
comment|// Case: jdbc:mysql or jdbc:derby
try|try
block|{
name|publisherImplementation
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.hive.ql.stats.jdbc.JDBCStatsPublisher"
argument_list|,
literal|true
argument_list|,
name|classLoader
argument_list|)
expr_stmt|;
name|aggregatorImplementation
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.hive.ql.stats.jdbc.JDBCStatsAggregator"
argument_list|,
literal|true
argument_list|,
name|classLoader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"JDBC Publisher/Aggregator classes cannot be loaded."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|// try default stats publisher/aggregator
name|String
name|defPublisher
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_DEFAULT_PUBLISHER
argument_list|)
decl_stmt|;
name|String
name|defAggregator
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_DEFAULT_AGGREGATOR
argument_list|)
decl_stmt|;
comment|// ERROR no default publisher/aggregator is defined
if|if
condition|(
name|defPublisher
operator|==
literal|null
operator|||
name|defAggregator
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|publisherImplementation
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|defPublisher
argument_list|,
literal|true
argument_list|,
name|classLoader
argument_list|)
expr_stmt|;
name|aggregatorImplementation
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|defAggregator
argument_list|,
literal|true
argument_list|,
name|classLoader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"JDBC Publisher/Aggregator classes cannot be loaded."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|jobConf
operator|=
name|conf
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Returns a Stats publisher implementation class for the IStatsPublisher interface    * For example HBaseStatsPublisher for the HBase implementation    */
specifier|public
specifier|static
name|StatsPublisher
name|getStatsPublisher
parameter_list|()
block|{
return|return
operator|(
name|StatsPublisher
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|publisherImplementation
argument_list|,
name|jobConf
argument_list|)
return|;
block|}
comment|/**    * Returns a Stats Aggregator implementation class for the IStatsAggregator interface    * For example HBaseStatsAggregator for the HBase implementation    */
specifier|public
specifier|static
name|StatsAggregator
name|getStatsAggregator
parameter_list|()
block|{
return|return
operator|(
name|StatsAggregator
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|aggregatorImplementation
argument_list|,
name|jobConf
argument_list|)
return|;
block|}
block|}
end_class

end_unit

