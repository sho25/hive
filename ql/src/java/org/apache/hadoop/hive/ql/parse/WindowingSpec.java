begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|CommonToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|WindowFunctionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|OrderSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|PartitionExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|PartitionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|PartitioningSpec
import|;
end_import

begin_comment
comment|/*  * Captures the Window processing specified in a Query. A Query may  * contain:  * - UDAF invocations on a Window.  * - Lead/Lag function invocations that can only be evaluated in a  *   Partition.  * - For Queries that don't have a Group By all UDAF invocations are  *   treated as Window Function invocations.  * - For Queries that don't have a Group By, the Having condition is  *   handled as a post processing on the rows output by Windowing  *   processing.  * Windowing is a container of all the Select Expressions that are  * to be handled by Windowing. These are held in 2 lists: the functions  * list holds WindowFunction invocations; the expressions list holds  * Select Expressions having Lead/Lag function calls. It may also  * contain an ASTNode representing the post filter to apply on the  * output of Window Functions.  * Windowing also contains all the Windows defined in the Query. One of  * the Windows is designated as the 'default' Window. If the Query has a  * Distribute By/Cluster By clause; then the information in these  * clauses is captured as a Partitioning and used as the default Window  * for the Query. Otherwise the first Window specified is treated as the  * default.  * Finally Windowing maintains a Map from an 'alias' to the ASTNode that  * represents the Select Expression that was translated to a Window  * Function invocation or a Window Expression. This is used when  * building RowResolvers.  */
end_comment

begin_class
specifier|public
class|class
name|WindowingSpec
block|{
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|WindowExpressionSpec
argument_list|>
name|aliasToWdwExpr
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|WindowSpec
argument_list|>
name|windowSpecs
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|WindowExpressionSpec
argument_list|>
name|windowExpressions
decl_stmt|;
specifier|public
name|WindowingSpec
parameter_list|()
block|{
name|aliasToWdwExpr
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|WindowExpressionSpec
argument_list|>
argument_list|()
expr_stmt|;
name|windowSpecs
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|WindowSpec
argument_list|>
argument_list|()
expr_stmt|;
name|windowExpressions
operator|=
operator|new
name|ArrayList
argument_list|<
name|WindowExpressionSpec
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|addWindowSpec
parameter_list|(
name|String
name|name
parameter_list|,
name|WindowSpec
name|wdwSpec
parameter_list|)
block|{
name|windowSpecs
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|wdwSpec
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addWindowFunction
parameter_list|(
name|WindowFunctionSpec
name|wFn
parameter_list|)
block|{
name|windowExpressions
operator|.
name|add
argument_list|(
name|wFn
argument_list|)
expr_stmt|;
name|aliasToWdwExpr
operator|.
name|put
argument_list|(
name|wFn
operator|.
name|getAlias
argument_list|()
argument_list|,
name|wFn
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|WindowExpressionSpec
argument_list|>
name|getAliasToWdwExpr
parameter_list|()
block|{
return|return
name|aliasToWdwExpr
return|;
block|}
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|WindowSpec
argument_list|>
name|getWindowSpecs
parameter_list|()
block|{
return|return
name|windowSpecs
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|WindowExpressionSpec
argument_list|>
name|getWindowExpressions
parameter_list|()
block|{
return|return
name|windowExpressions
return|;
block|}
specifier|public
name|PartitioningSpec
name|getQueryPartitioningSpec
parameter_list|()
block|{
comment|/*      * Why no null and class checks?      * With the new design a WindowingSpec must contain a WindowFunctionSpec.      * todo: cleanup datastructs.      */
name|WindowFunctionSpec
name|wFn
init|=
operator|(
name|WindowFunctionSpec
operator|)
name|getWindowExpressions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|wFn
operator|.
name|getWindowSpec
argument_list|()
operator|.
name|getPartitioning
argument_list|()
return|;
block|}
specifier|public
name|PartitionSpec
name|getQueryPartitionSpec
parameter_list|()
block|{
return|return
name|getQueryPartitioningSpec
argument_list|()
operator|.
name|getPartSpec
argument_list|()
return|;
block|}
specifier|public
name|OrderSpec
name|getQueryOrderSpec
parameter_list|()
block|{
return|return
name|getQueryPartitioningSpec
argument_list|()
operator|.
name|getOrderSpec
argument_list|()
return|;
block|}
comment|/*    * Apply the rules in the Spec. to fill in any missing pieces of every Window Specification,    * also validate that the effective Specification is valid. The rules applied are:    * - For Wdw Specs that refer to Window Defns, inherit missing components.    * - A Window Spec with no Parition Spec, is Partitioned on a Constant(number 0)    * - For missing Wdw Frames or for Frames with only a Start Boundary, completely specify them    *   by the rules in {@link effectiveWindowFrame}    * - Validate the effective Window Frames with the rules in {@link validateWindowFrame}    * - If there is no Order, then add the Partition expressions as the Order.    */
specifier|public
name|void
name|validateAndMakeEffective
parameter_list|()
throws|throws
name|SemanticException
block|{
for|for
control|(
name|WindowExpressionSpec
name|expr
range|:
name|getWindowExpressions
argument_list|()
control|)
block|{
name|WindowFunctionSpec
name|wFn
init|=
operator|(
name|WindowFunctionSpec
operator|)
name|expr
decl_stmt|;
name|WindowSpec
name|wdwSpec
init|=
name|wFn
operator|.
name|getWindowSpec
argument_list|()
decl_stmt|;
comment|// 1. For Wdw Specs that refer to Window Defns, inherit missing components
if|if
condition|(
name|wdwSpec
operator|!=
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|sources
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fillInWindowSpec
argument_list|(
name|wdwSpec
operator|.
name|getSourceId
argument_list|()
argument_list|,
name|wdwSpec
argument_list|,
name|sources
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wdwSpec
operator|==
literal|null
condition|)
block|{
name|wdwSpec
operator|=
operator|new
name|WindowSpec
argument_list|()
expr_stmt|;
name|wFn
operator|.
name|setWindowSpec
argument_list|(
name|wdwSpec
argument_list|)
expr_stmt|;
block|}
comment|// 2. A Window Spec with no Parition Spec, is Partitioned on a Constant(number 0)
name|applyConstantPartition
argument_list|(
name|wdwSpec
argument_list|)
expr_stmt|;
comment|// 3. For missing Wdw Frames or for Frames with only a Start Boundary, completely
comment|//    specify them by the rules in {@link effectiveWindowFrame}
name|effectiveWindowFrame
argument_list|(
name|wFn
argument_list|,
name|wdwSpec
argument_list|)
expr_stmt|;
comment|// 4. Validate the effective Window Frames with the rules in {@link validateWindowFrame}
name|validateWindowFrame
argument_list|(
name|wdwSpec
argument_list|)
expr_stmt|;
comment|// 5. Add the Partition expressions as the Order if there is no Order and validate Order spec.
name|setAndValidateOrderSpec
argument_list|(
name|wdwSpec
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|fillInWindowSpec
parameter_list|(
name|String
name|sourceId
parameter_list|,
name|WindowSpec
name|dest
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|visited
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|sourceId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|visited
operator|.
name|contains
argument_list|(
name|sourceId
argument_list|)
condition|)
block|{
name|visited
operator|.
name|add
argument_list|(
name|sourceId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cycle in Window references %s"
argument_list|,
name|visited
argument_list|)
argument_list|)
throw|;
block|}
name|WindowSpec
name|source
init|=
name|getWindowSpecs
argument_list|()
operator|.
name|get
argument_list|(
name|sourceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
operator|||
name|source
operator|.
name|equals
argument_list|(
name|dest
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s refers to an unknown source"
argument_list|,
name|dest
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|dest
operator|.
name|getPartition
argument_list|()
operator|==
literal|null
condition|)
block|{
name|dest
operator|.
name|setPartition
argument_list|(
name|source
operator|.
name|getPartition
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dest
operator|.
name|getOrder
argument_list|()
operator|==
literal|null
condition|)
block|{
name|dest
operator|.
name|setOrder
argument_list|(
name|source
operator|.
name|getOrder
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dest
operator|.
name|getWindowFrame
argument_list|()
operator|==
literal|null
condition|)
block|{
name|dest
operator|.
name|setWindowFrame
argument_list|(
name|source
operator|.
name|getWindowFrame
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|visited
operator|.
name|add
argument_list|(
name|sourceId
argument_list|)
expr_stmt|;
name|fillInWindowSpec
argument_list|(
name|source
operator|.
name|getSourceId
argument_list|()
argument_list|,
name|dest
argument_list|,
name|visited
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|applyConstantPartition
parameter_list|(
name|WindowSpec
name|wdwSpec
parameter_list|)
block|{
name|PartitionSpec
name|partSpec
init|=
name|wdwSpec
operator|.
name|getPartition
argument_list|()
decl_stmt|;
if|if
condition|(
name|partSpec
operator|==
literal|null
condition|)
block|{
name|partSpec
operator|=
operator|new
name|PartitionSpec
argument_list|()
expr_stmt|;
name|PartitionExpression
name|partExpr
init|=
operator|new
name|PartitionExpression
argument_list|()
decl_stmt|;
name|partExpr
operator|.
name|setExpression
argument_list|(
operator|new
name|ASTNode
argument_list|(
operator|new
name|CommonToken
argument_list|(
name|HiveParser
operator|.
name|Number
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|partSpec
operator|.
name|addExpression
argument_list|(
name|partExpr
argument_list|)
expr_stmt|;
name|wdwSpec
operator|.
name|setPartition
argument_list|(
name|partSpec
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * - A Window Frame that has only the /start/boundary, then it is interpreted as:          BETWEEN<start boundary> AND CURRENT ROW    * - A Window Specification with an Order Specification and no Window    *   Frame is interpreted as:          ROW BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW    * - A Window Specification with no Order and no Window Frame is interpreted as:          ROW BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING    */
specifier|private
name|void
name|effectiveWindowFrame
parameter_list|(
name|WindowFunctionSpec
name|wFn
parameter_list|,
name|WindowSpec
name|wdwSpec
parameter_list|)
throws|throws
name|SemanticException
block|{
name|WindowFunctionInfo
name|wFnInfo
init|=
name|FunctionRegistry
operator|.
name|getWindowFunctionInfo
argument_list|(
name|wFn
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|supportsWindowing
init|=
name|wFnInfo
operator|==
literal|null
condition|?
literal|true
else|:
name|wFnInfo
operator|.
name|isSupportsWindow
argument_list|()
decl_stmt|;
name|WindowFrameSpec
name|wFrame
init|=
name|wdwSpec
operator|.
name|getWindowFrame
argument_list|()
decl_stmt|;
name|OrderSpec
name|orderSpec
init|=
name|wdwSpec
operator|.
name|getOrder
argument_list|()
decl_stmt|;
if|if
condition|(
name|wFrame
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|supportsWindowing
condition|)
block|{
if|if
condition|(
name|wFn
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|FunctionRegistry
operator|.
name|LAST_VALUE_FUNC_NAME
argument_list|)
operator|&&
name|orderSpec
operator|!=
literal|null
condition|)
block|{
comment|/*            * last_value: when an Sort Key is specified, then last_value should return the            * last value among rows with the same Sort Key value.            */
name|wFrame
operator|=
operator|new
name|WindowFrameSpec
argument_list|(
operator|new
name|CurrentRowSpec
argument_list|()
argument_list|,
operator|new
name|RangeBoundarySpec
argument_list|(
name|Direction
operator|.
name|FOLLOWING
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wFrame
operator|=
operator|new
name|WindowFrameSpec
argument_list|(
operator|new
name|RangeBoundarySpec
argument_list|(
name|Direction
operator|.
name|PRECEDING
argument_list|,
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
argument_list|)
argument_list|,
operator|new
name|RangeBoundarySpec
argument_list|(
name|Direction
operator|.
name|FOLLOWING
argument_list|,
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|orderSpec
operator|==
literal|null
condition|)
block|{
name|wFrame
operator|=
operator|new
name|WindowFrameSpec
argument_list|(
operator|new
name|RangeBoundarySpec
argument_list|(
name|Direction
operator|.
name|PRECEDING
argument_list|,
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
argument_list|)
argument_list|,
operator|new
name|RangeBoundarySpec
argument_list|(
name|Direction
operator|.
name|FOLLOWING
argument_list|,
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wFrame
operator|=
operator|new
name|WindowFrameSpec
argument_list|(
operator|new
name|ValueBoundarySpec
argument_list|(
name|Direction
operator|.
name|PRECEDING
argument_list|,
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
argument_list|)
argument_list|,
operator|new
name|CurrentRowSpec
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|wdwSpec
operator|.
name|setWindowFrame
argument_list|(
name|wFrame
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|wFrame
operator|.
name|getEnd
argument_list|()
operator|==
literal|null
condition|)
block|{
name|wFrame
operator|.
name|setEnd
argument_list|(
operator|new
name|CurrentRowSpec
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|validateWindowFrame
parameter_list|(
name|WindowSpec
name|wdwSpec
parameter_list|)
throws|throws
name|SemanticException
block|{
name|WindowFrameSpec
name|wFrame
init|=
name|wdwSpec
operator|.
name|getWindowFrame
argument_list|()
decl_stmt|;
name|BoundarySpec
name|start
init|=
name|wFrame
operator|.
name|getStart
argument_list|()
decl_stmt|;
name|BoundarySpec
name|end
init|=
name|wFrame
operator|.
name|getEnd
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|.
name|getDirection
argument_list|()
operator|==
name|Direction
operator|.
name|FOLLOWING
operator|&&
name|start
operator|.
name|getAmt
argument_list|()
operator|==
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Start of a WindowFrame cannot be UNBOUNDED FOLLOWING"
argument_list|)
throw|;
block|}
if|if
condition|(
name|end
operator|.
name|getDirection
argument_list|()
operator|==
name|Direction
operator|.
name|PRECEDING
operator|&&
name|end
operator|.
name|getAmt
argument_list|()
operator|==
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"End of a WindowFrame cannot be UNBOUNDED PRECEDING"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Add default order spec if there is no order and validate order spec for valued based    * windowing since only one sort key is allowed.    * @param wdwSpec    * @throws SemanticException    */
specifier|private
name|void
name|setAndValidateOrderSpec
parameter_list|(
name|WindowSpec
name|wdwSpec
parameter_list|)
throws|throws
name|SemanticException
block|{
name|wdwSpec
operator|.
name|ensureOrderSpec
argument_list|()
expr_stmt|;
name|WindowFrameSpec
name|wFrame
init|=
name|wdwSpec
operator|.
name|getWindowFrame
argument_list|()
decl_stmt|;
name|OrderSpec
name|order
init|=
name|wdwSpec
operator|.
name|getOrder
argument_list|()
decl_stmt|;
name|BoundarySpec
name|start
init|=
name|wFrame
operator|.
name|getStart
argument_list|()
decl_stmt|;
name|BoundarySpec
name|end
init|=
name|wFrame
operator|.
name|getEnd
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|instanceof
name|ValueBoundarySpec
operator|||
name|end
operator|instanceof
name|ValueBoundarySpec
condition|)
block|{
if|if
condition|(
name|order
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|order
operator|.
name|getExpressions
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Range based Window Frame can have only 1 Sort Key"
argument_list|)
throw|;
block|}
if|if
condition|(
name|start
operator|instanceof
name|ValueBoundarySpec
condition|)
block|{
operator|(
operator|(
name|ValueBoundarySpec
operator|)
name|start
operator|)
operator|.
name|setExpression
argument_list|(
name|order
operator|.
name|getExpressions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|end
operator|instanceof
name|ValueBoundarySpec
condition|)
block|{
operator|(
operator|(
name|ValueBoundarySpec
operator|)
name|end
operator|)
operator|.
name|setExpression
argument_list|(
name|order
operator|.
name|getExpressions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*    * Represents a Select Expression in the context of Windowing. These can    * refer to the output of Windowing Functions and can navigate the    * Partition using Lead/Lag functions.    */
specifier|public
specifier|static
class|class
name|WindowExpressionSpec
block|{
name|String
name|alias
decl_stmt|;
name|ASTNode
name|expression
decl_stmt|;
specifier|public
name|String
name|getAlias
parameter_list|()
block|{
return|return
name|alias
return|;
block|}
specifier|public
name|void
name|setAlias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|this
operator|.
name|alias
operator|=
name|alias
expr_stmt|;
block|}
specifier|public
name|ASTNode
name|getExpression
parameter_list|()
block|{
return|return
name|expression
return|;
block|}
specifier|public
name|void
name|setExpression
parameter_list|(
name|ASTNode
name|expression
parameter_list|)
block|{
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
block|}
comment|/*    * Represents a UDAF invocation in the context of a Window Frame. As    * explained above sometimes UDAFs will be handled as Window Functions    * even w/o an explicit Window specification. This is to support Queries    * that have no Group By clause. A Window Function invocation captures:    * - the ASTNode that represents this invocation    * - its name    * - whether it is star/distinct invocation.    * - its alias    * - and an optional Window specification    */
specifier|public
specifier|static
class|class
name|WindowFunctionSpec
extends|extends
name|WindowExpressionSpec
block|{
name|String
name|name
decl_stmt|;
name|boolean
name|isStar
decl_stmt|;
name|boolean
name|isDistinct
decl_stmt|;
name|ArrayList
argument_list|<
name|ASTNode
argument_list|>
name|args
decl_stmt|;
name|WindowSpec
name|windowSpec
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|boolean
name|isStar
parameter_list|()
block|{
return|return
name|isStar
return|;
block|}
specifier|public
name|void
name|setStar
parameter_list|(
name|boolean
name|isStar
parameter_list|)
block|{
name|this
operator|.
name|isStar
operator|=
name|isStar
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDistinct
parameter_list|()
block|{
return|return
name|isDistinct
return|;
block|}
specifier|public
name|void
name|setDistinct
parameter_list|(
name|boolean
name|isDistinct
parameter_list|)
block|{
name|this
operator|.
name|isDistinct
operator|=
name|isDistinct
expr_stmt|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|ASTNode
argument_list|>
name|getArgs
parameter_list|()
block|{
name|args
operator|=
name|args
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|ASTNode
argument_list|>
argument_list|()
else|:
name|args
expr_stmt|;
return|return
name|args
return|;
block|}
specifier|public
name|void
name|setArgs
parameter_list|(
name|ArrayList
argument_list|<
name|ASTNode
argument_list|>
name|args
parameter_list|)
block|{
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
block|}
specifier|public
name|void
name|addArg
parameter_list|(
name|ASTNode
name|arg
parameter_list|)
block|{
name|args
operator|=
name|args
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|ASTNode
argument_list|>
argument_list|()
else|:
name|args
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
operator|(
name|ASTNode
operator|)
name|arg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WindowSpec
name|getWindowSpec
parameter_list|()
block|{
return|return
name|windowSpec
return|;
block|}
specifier|public
name|void
name|setWindowSpec
parameter_list|(
name|WindowSpec
name|windowSpec
parameter_list|)
block|{
name|this
operator|.
name|windowSpec
operator|=
name|windowSpec
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
if|if
condition|(
name|isStar
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isDistinct
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"distinct "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|args
operator|!=
literal|null
condition|)
block|{
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ASTNode
name|arg
range|:
name|args
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|arg
operator|.
name|toStringTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|buf
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|windowSpec
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|windowSpec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|alias
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" as "
argument_list|)
operator|.
name|append
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/*    * It represents a WindowFrame applied to a Partitioning. A Window can    * refer to a<i>source</i> Window by name. The source Window provides the    * basis for this Window definition. This Window specification    * extends/overrides the<i>source</i> Window definition. In our e.g. the    * Select Expression $sum(p_retailprice) over (w1)$ is translated into a    * WindowFunction instance that has a Window specification that refers    * to the global Window Specification 'w1'. The Function's specification    * has no content, but inherits all its attributes from 'w1' during    * subsequent phases of translation.    */
specifier|public
specifier|static
class|class
name|WindowSpec
block|{
specifier|private
name|String
name|sourceId
decl_stmt|;
specifier|private
name|PartitioningSpec
name|partitioning
decl_stmt|;
specifier|private
name|WindowFrameSpec
name|windowFrame
decl_stmt|;
specifier|public
name|String
name|getSourceId
parameter_list|()
block|{
return|return
name|sourceId
return|;
block|}
specifier|public
name|void
name|setSourceId
parameter_list|(
name|String
name|sourceId
parameter_list|)
block|{
name|this
operator|.
name|sourceId
operator|=
name|sourceId
expr_stmt|;
block|}
specifier|public
name|PartitioningSpec
name|getPartitioning
parameter_list|()
block|{
return|return
name|partitioning
return|;
block|}
specifier|public
name|void
name|setPartitioning
parameter_list|(
name|PartitioningSpec
name|partitioning
parameter_list|)
block|{
name|this
operator|.
name|partitioning
operator|=
name|partitioning
expr_stmt|;
block|}
specifier|public
name|WindowFrameSpec
name|getWindowFrame
parameter_list|()
block|{
return|return
name|windowFrame
return|;
block|}
specifier|public
name|void
name|setWindowFrame
parameter_list|(
name|WindowFrameSpec
name|windowFrame
parameter_list|)
block|{
name|this
operator|.
name|windowFrame
operator|=
name|windowFrame
expr_stmt|;
block|}
specifier|public
name|PartitionSpec
name|getPartition
parameter_list|()
block|{
return|return
name|getPartitioning
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|getPartitioning
argument_list|()
operator|.
name|getPartSpec
argument_list|()
return|;
block|}
specifier|public
name|void
name|setPartition
parameter_list|(
name|PartitionSpec
name|partSpec
parameter_list|)
block|{
name|partitioning
operator|=
name|partitioning
operator|==
literal|null
condition|?
operator|new
name|PartitioningSpec
argument_list|()
else|:
name|partitioning
expr_stmt|;
name|partitioning
operator|.
name|setPartSpec
argument_list|(
name|partSpec
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OrderSpec
name|getOrder
parameter_list|()
block|{
return|return
name|getPartitioning
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|getPartitioning
argument_list|()
operator|.
name|getOrderSpec
argument_list|()
return|;
block|}
specifier|public
name|void
name|setOrder
parameter_list|(
name|OrderSpec
name|orderSpec
parameter_list|)
block|{
name|partitioning
operator|=
name|partitioning
operator|==
literal|null
condition|?
operator|new
name|PartitioningSpec
argument_list|()
else|:
name|partitioning
expr_stmt|;
name|partitioning
operator|.
name|setOrderSpec
argument_list|(
name|orderSpec
argument_list|)
expr_stmt|;
block|}
comment|/*      * When there is no Order specified, we add the Partition expressions as      * Order expressions. This is an implementation artifact. For UDAFS that      * imply order (like rank, dense_rank) depend on the Order Expressions to      * work. Internally we pass the Order Expressions as Args to these functions.      * We could change the translation so that the Functions are setup with      * Partition expressions when the OrderSpec is null; but for now we are setting up      * an OrderSpec that copies the Partition expressions.      */
specifier|protected
name|void
name|ensureOrderSpec
parameter_list|()
block|{
if|if
condition|(
name|getOrder
argument_list|()
operator|==
literal|null
condition|)
block|{
name|OrderSpec
name|order
init|=
operator|new
name|OrderSpec
argument_list|()
decl_stmt|;
name|order
operator|.
name|prefixBy
argument_list|(
name|getPartition
argument_list|()
argument_list|)
expr_stmt|;
name|setOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"Window Spec=[%s%s%s]"
argument_list|,
name|sourceId
operator|==
literal|null
condition|?
literal|""
else|:
literal|"Name='"
operator|+
name|sourceId
operator|+
literal|"'"
argument_list|,
name|partitioning
operator|==
literal|null
condition|?
literal|""
else|:
name|partitioning
argument_list|,
name|windowFrame
operator|==
literal|null
condition|?
literal|""
else|:
name|windowFrame
argument_list|)
return|;
block|}
block|}
empty_stmt|;
comment|/*    * A WindowFrame specifies the Range on which a Window Function should    * be applied for the 'current' row. Its is specified by a<i>start</i> and    *<i>end</i> Boundary.    */
specifier|public
specifier|static
class|class
name|WindowFrameSpec
block|{
name|BoundarySpec
name|start
decl_stmt|;
name|BoundarySpec
name|end
decl_stmt|;
specifier|public
name|WindowFrameSpec
parameter_list|()
block|{     }
specifier|public
name|WindowFrameSpec
parameter_list|(
name|BoundarySpec
name|start
parameter_list|,
name|BoundarySpec
name|end
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
block|}
specifier|public
name|WindowFrameSpec
parameter_list|(
name|BoundarySpec
name|start
parameter_list|)
block|{
name|this
argument_list|(
name|start
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BoundarySpec
name|getStart
parameter_list|()
block|{
return|return
name|start
return|;
block|}
specifier|public
name|void
name|setStart
parameter_list|(
name|BoundarySpec
name|start
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
block|}
specifier|public
name|BoundarySpec
name|getEnd
parameter_list|()
block|{
return|return
name|end
return|;
block|}
specifier|public
name|void
name|setEnd
parameter_list|(
name|BoundarySpec
name|end
parameter_list|)
block|{
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"window(start=%s, end=%s)"
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
enum|enum
name|Direction
block|{
name|PRECEDING
block|,
name|CURRENT
block|,
name|FOLLOWING
block|}
empty_stmt|;
comment|/*    * A Boundary specifies how many rows back/forward a WindowFrame extends from the    * current row. A Boundary is specified as:    * - Range Boundary :: as the number of rows to go forward or back from                     the Current Row.    * - Current Row :: which implies the Boundary is at the current row.    * - Value Boundary :: which is specified as the amount the value of an                     Expression must decrease/increase    */
specifier|public
specifier|abstract
specifier|static
class|class
name|BoundarySpec
implements|implements
name|Comparable
argument_list|<
name|BoundarySpec
argument_list|>
block|{
specifier|public
specifier|static
name|int
name|UNBOUNDED_AMOUNT
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|public
specifier|abstract
name|Direction
name|getDirection
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|void
name|setDirection
parameter_list|(
name|Direction
name|dir
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|void
name|setAmt
parameter_list|(
name|int
name|amt
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|int
name|getAmt
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|RangeBoundarySpec
extends|extends
name|BoundarySpec
block|{
name|Direction
name|direction
decl_stmt|;
name|int
name|amt
decl_stmt|;
specifier|public
name|RangeBoundarySpec
parameter_list|()
block|{     }
specifier|public
name|RangeBoundarySpec
parameter_list|(
name|Direction
name|direction
parameter_list|,
name|int
name|amt
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|direction
operator|=
name|direction
expr_stmt|;
name|this
operator|.
name|amt
operator|=
name|amt
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Direction
name|getDirection
parameter_list|()
block|{
return|return
name|direction
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDirection
parameter_list|(
name|Direction
name|direction
parameter_list|)
block|{
name|this
operator|.
name|direction
operator|=
name|direction
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getAmt
parameter_list|()
block|{
return|return
name|amt
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setAmt
parameter_list|(
name|int
name|amt
parameter_list|)
block|{
name|this
operator|.
name|amt
operator|=
name|amt
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"range(%s %s)"
argument_list|,
operator|(
name|amt
operator|==
name|UNBOUNDED_AMOUNT
condition|?
literal|"Unbounded"
else|:
name|amt
operator|)
argument_list|,
name|direction
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|BoundarySpec
name|other
parameter_list|)
block|{
name|int
name|c
init|=
name|direction
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getDirection
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
block|{
return|return
name|c
return|;
block|}
name|RangeBoundarySpec
name|rb
init|=
operator|(
name|RangeBoundarySpec
operator|)
name|other
decl_stmt|;
comment|// Valid range is "range/rows between 10 preceding and 2 preceding" for preceding case
return|return
name|this
operator|.
name|direction
operator|==
name|Direction
operator|.
name|PRECEDING
condition|?
name|rb
operator|.
name|amt
operator|-
name|amt
else|:
name|amt
operator|-
name|rb
operator|.
name|amt
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CurrentRowSpec
extends|extends
name|BoundarySpec
block|{
specifier|public
name|CurrentRowSpec
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"currentRow"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Direction
name|getDirection
parameter_list|()
block|{
return|return
name|Direction
operator|.
name|CURRENT
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDirection
parameter_list|(
name|Direction
name|dir
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|void
name|setAmt
parameter_list|(
name|int
name|amt
parameter_list|)
block|{}
specifier|public
name|int
name|compareTo
parameter_list|(
name|BoundarySpec
name|other
parameter_list|)
block|{
return|return
name|getDirection
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getDirection
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getAmt
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ValueBoundarySpec
extends|extends
name|BoundarySpec
block|{
name|Direction
name|direction
decl_stmt|;
name|ASTNode
name|expression
decl_stmt|;
name|int
name|amt
decl_stmt|;
specifier|public
name|ValueBoundarySpec
parameter_list|()
block|{     }
specifier|public
name|ValueBoundarySpec
parameter_list|(
name|Direction
name|direction
parameter_list|,
name|int
name|amt
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|direction
operator|=
name|direction
expr_stmt|;
name|this
operator|.
name|amt
operator|=
name|amt
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Direction
name|getDirection
parameter_list|()
block|{
return|return
name|direction
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDirection
parameter_list|(
name|Direction
name|direction
parameter_list|)
block|{
name|this
operator|.
name|direction
operator|=
name|direction
expr_stmt|;
block|}
specifier|public
name|ASTNode
name|getExpression
parameter_list|()
block|{
return|return
name|expression
return|;
block|}
specifier|public
name|void
name|setExpression
parameter_list|(
name|ASTNode
name|expression
parameter_list|)
block|{
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getAmt
parameter_list|()
block|{
return|return
name|amt
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setAmt
parameter_list|(
name|int
name|amt
parameter_list|)
block|{
name|this
operator|.
name|amt
operator|=
name|amt
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"value(%s %s %s)"
argument_list|,
name|expression
operator|.
name|toStringTree
argument_list|()
argument_list|,
name|amt
argument_list|,
name|direction
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|BoundarySpec
name|other
parameter_list|)
block|{
name|int
name|c
init|=
name|direction
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getDirection
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
block|{
return|return
name|c
return|;
block|}
name|ValueBoundarySpec
name|vb
init|=
operator|(
name|ValueBoundarySpec
operator|)
name|other
decl_stmt|;
comment|// Valid range is "range/rows between 10 preceding and 2 preceding" for preceding case
return|return
name|this
operator|.
name|direction
operator|==
name|Direction
operator|.
name|PRECEDING
condition|?
name|vb
operator|.
name|amt
operator|-
name|amt
else|:
name|amt
operator|-
name|vb
operator|.
name|amt
return|;
block|}
block|}
block|}
end_class

end_unit

