begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
operator|.
name|DruidQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|CorrelationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableFunctionScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCorrelVariable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexFieldAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexPermuteInputsShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexTableInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
operator|.
name|CorrelationReferenceFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|IntPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|MappingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mappings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|RelOptHiveTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveMultiJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveTableFunctionScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveTableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ColumnAccessInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|HiveRelFieldTrimmer
extends|extends
name|RelFieldTrimmer
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveRelFieldTrimmer
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// We initialize the field trimmer statically here and we will reuse it across
comment|// queries. The reason is that otherwise we will create a new dispatcher with
comment|// each instantiation, thus effectively removing the caching mechanism that is
comment|// built within the dispatcher.
specifier|private
specifier|static
specifier|final
name|HiveRelFieldTrimmer
name|FIELD_TRIMMER_STATS
init|=
operator|new
name|HiveRelFieldTrimmer
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HiveRelFieldTrimmer
name|FIELD_TRIMMER_NO_STATS
init|=
operator|new
name|HiveRelFieldTrimmer
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// For testing
specifier|private
specifier|static
specifier|final
name|HiveRelFieldTrimmer
name|FIELD_TRIMMER_STATS_METHOD_DISPATCHER
init|=
operator|new
name|HiveRelFieldTrimmer
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HiveRelFieldTrimmer
name|FIELD_TRIMMER_NO_STATS_METHOD_DISPATCHER
init|=
operator|new
name|HiveRelFieldTrimmer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|fetchStats
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|ColumnAccessInfo
argument_list|>
name|COLUMN_ACCESS_INFO
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Map
argument_list|<
name|HiveProject
argument_list|,
name|Table
argument_list|>
argument_list|>
name|VIEW_PROJECT_TO_TABLE_SCHEMA
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|HiveRelFieldTrimmer
parameter_list|(
name|boolean
name|fetchStats
parameter_list|)
block|{
name|this
argument_list|(
name|fetchStats
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HiveRelFieldTrimmer
parameter_list|(
name|boolean
name|fetchStats
parameter_list|,
name|boolean
name|useLMFBasedDispatcher
parameter_list|)
block|{
name|super
argument_list|(
name|useLMFBasedDispatcher
argument_list|)
expr_stmt|;
name|this
operator|.
name|fetchStats
operator|=
name|fetchStats
expr_stmt|;
block|}
comment|/**    * Returns a HiveRelFieldTrimmer instance that does not retrieve    * stats.    */
specifier|public
specifier|static
name|HiveRelFieldTrimmer
name|get
parameter_list|()
block|{
return|return
name|get
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|/**    * Returns a HiveRelFieldTrimmer instance that can retrieve stats.    */
specifier|public
specifier|static
name|HiveRelFieldTrimmer
name|get
parameter_list|(
name|boolean
name|fetchStats
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|fetchStats
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Returns a HiveRelFieldTrimmer instance that can retrieve stats and use    * a custom dispatcher.    */
specifier|public
specifier|static
name|HiveRelFieldTrimmer
name|get
parameter_list|(
name|boolean
name|fetchStats
parameter_list|,
name|boolean
name|useLMFBasedDispatcher
parameter_list|)
block|{
return|return
name|fetchStats
condition|?
operator|(
name|useLMFBasedDispatcher
condition|?
name|FIELD_TRIMMER_STATS
else|:
name|FIELD_TRIMMER_STATS_METHOD_DISPATCHER
operator|)
else|:
operator|(
name|useLMFBasedDispatcher
condition|?
name|FIELD_TRIMMER_NO_STATS
else|:
name|FIELD_TRIMMER_NO_STATS_METHOD_DISPATCHER
operator|)
return|;
block|}
comment|/**    * Trims unused fields from a relational expression.    *    *<p>We presume that all fields of the relational expression are wanted by    * its consumer, so only trim fields that are not used within the tree.    *    * @param root Root node of relational expression    * @return Trimmed relational expression    */
annotation|@
name|Override
specifier|public
name|RelNode
name|trim
parameter_list|(
name|RelBuilder
name|relBuilder
parameter_list|,
name|RelNode
name|root
parameter_list|)
block|{
return|return
name|trim
argument_list|(
name|relBuilder
argument_list|,
name|root
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|RelNode
name|trim
parameter_list|(
name|RelBuilder
name|relBuilder
parameter_list|,
name|RelNode
name|root
parameter_list|,
name|ColumnAccessInfo
name|columnAccessInfo
parameter_list|,
name|Map
argument_list|<
name|HiveProject
argument_list|,
name|Table
argument_list|>
name|viewToTableSchema
parameter_list|)
block|{
try|try
block|{
comment|// Set local thread variables
name|COLUMN_ACCESS_INFO
operator|.
name|set
argument_list|(
name|columnAccessInfo
argument_list|)
expr_stmt|;
name|VIEW_PROJECT_TO_TABLE_SCHEMA
operator|.
name|set
argument_list|(
name|viewToTableSchema
argument_list|)
expr_stmt|;
comment|// Execute pruning
return|return
name|super
operator|.
name|trim
argument_list|(
name|relBuilder
argument_list|,
name|root
argument_list|)
return|;
block|}
finally|finally
block|{
comment|// Always remove the local thread variables to avoid leaks
name|COLUMN_ACCESS_INFO
operator|.
name|remove
argument_list|()
expr_stmt|;
name|VIEW_PROJECT_TO_TABLE_SCHEMA
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Trims the fields of an input relational expression.    *    * @param rel        Relational expression    * @param input      Input relational expression, whose fields to trim    * @param fieldsUsed Bitmap of fields needed by the consumer    * @return New relational expression and its field mapping    */
specifier|protected
name|TrimResult
name|trimChild
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|RelNode
name|input
parameter_list|,
specifier|final
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
specifier|final
name|ImmutableBitSet
operator|.
name|Builder
name|fieldsUsedBuilder
init|=
name|fieldsUsed
operator|.
name|rebuild
argument_list|()
decl_stmt|;
comment|// Correlating variables are a means for other relational expressions to use
comment|// fields.
for|for
control|(
specifier|final
name|CorrelationId
name|correlation
range|:
name|rel
operator|.
name|getVariablesSet
argument_list|()
control|)
block|{
name|rel
operator|.
name|accept
argument_list|(
operator|new
name|CorrelationReferenceFinder
argument_list|()
block|{
specifier|protected
name|RexNode
name|handle
parameter_list|(
name|RexFieldAccess
name|fieldAccess
parameter_list|)
block|{
specifier|final
name|RexCorrelVariable
name|v
init|=
operator|(
name|RexCorrelVariable
operator|)
name|fieldAccess
operator|.
name|getReferenceExpr
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|id
operator|.
name|equals
argument_list|(
name|correlation
argument_list|)
condition|)
block|{
name|fieldsUsedBuilder
operator|.
name|set
argument_list|(
name|fieldAccess
operator|.
name|getField
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|fieldAccess
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|dispatchTrimFields
argument_list|(
name|input
argument_list|,
name|fieldsUsedBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|extraFields
argument_list|)
return|;
block|}
comment|/**    * Variant of {@link #trimFields(RelNode, ImmutableBitSet, Set)} for    * {@link org.apache.hadoop.hive.ql.optimizer.calcite.reloperators.HiveMultiJoin}.    */
specifier|public
name|TrimResult
name|trimFields
parameter_list|(
name|HiveMultiJoin
name|join
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
specifier|final
name|int
name|fieldCount
init|=
name|join
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|conditionExpr
init|=
name|join
operator|.
name|getCondition
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|joinFilters
init|=
name|join
operator|.
name|getJoinFilters
argument_list|()
decl_stmt|;
comment|// Add in fields used in the condition.
specifier|final
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|combinedInputExtraFields
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|RelDataTypeField
argument_list|>
argument_list|(
name|extraFields
argument_list|)
decl_stmt|;
name|RelOptUtil
operator|.
name|InputFinder
name|inputFinder
init|=
operator|new
name|RelOptUtil
operator|.
name|InputFinder
argument_list|(
name|combinedInputExtraFields
argument_list|)
decl_stmt|;
name|inputFinder
operator|.
name|inputBitSet
operator|.
name|addAll
argument_list|(
name|fieldsUsed
argument_list|)
expr_stmt|;
name|conditionExpr
operator|.
name|accept
argument_list|(
name|inputFinder
argument_list|)
expr_stmt|;
specifier|final
name|ImmutableBitSet
name|fieldsUsedPlus
init|=
name|inputFinder
operator|.
name|inputBitSet
operator|.
name|build
argument_list|()
decl_stmt|;
name|int
name|inputStartPos
init|=
literal|0
decl_stmt|;
name|int
name|changeCount
init|=
literal|0
decl_stmt|;
name|int
name|newFieldCount
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|RelNode
argument_list|>
name|newInputs
init|=
operator|new
name|ArrayList
argument_list|<
name|RelNode
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Mapping
argument_list|>
name|inputMappings
init|=
operator|new
name|ArrayList
argument_list|<
name|Mapping
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|join
operator|.
name|getInputs
argument_list|()
control|)
block|{
specifier|final
name|RelDataType
name|inputRowType
init|=
name|input
operator|.
name|getRowType
argument_list|()
decl_stmt|;
specifier|final
name|int
name|inputFieldCount
init|=
name|inputRowType
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
comment|// Compute required mapping.
name|ImmutableBitSet
operator|.
name|Builder
name|inputFieldsUsed
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|bit
range|:
name|fieldsUsedPlus
control|)
block|{
if|if
condition|(
name|bit
operator|>=
name|inputStartPos
operator|&&
name|bit
operator|<
name|inputStartPos
operator|+
name|inputFieldCount
condition|)
block|{
name|inputFieldsUsed
operator|.
name|set
argument_list|(
name|bit
operator|-
name|inputStartPos
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|inputExtraFields
init|=
name|Collections
operator|.
expr|<
name|RelDataTypeField
operator|>
name|emptySet
argument_list|()
decl_stmt|;
name|TrimResult
name|trimResult
init|=
name|trimChild
argument_list|(
name|join
argument_list|,
name|input
argument_list|,
name|inputFieldsUsed
operator|.
name|build
argument_list|()
argument_list|,
name|inputExtraFields
argument_list|)
decl_stmt|;
name|newInputs
operator|.
name|add
argument_list|(
name|trimResult
operator|.
name|left
argument_list|)
expr_stmt|;
if|if
condition|(
name|trimResult
operator|.
name|left
operator|!=
name|input
condition|)
block|{
operator|++
name|changeCount
expr_stmt|;
block|}
specifier|final
name|Mapping
name|inputMapping
init|=
name|trimResult
operator|.
name|right
decl_stmt|;
name|inputMappings
operator|.
name|add
argument_list|(
name|inputMapping
argument_list|)
expr_stmt|;
comment|// Move offset to point to start of next input.
name|inputStartPos
operator|+=
name|inputFieldCount
expr_stmt|;
name|newFieldCount
operator|+=
name|inputMapping
operator|.
name|getTargetCount
argument_list|()
expr_stmt|;
block|}
name|Mapping
name|mapping
init|=
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|INVERSE_SURJECTION
argument_list|,
name|fieldCount
argument_list|,
name|newFieldCount
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|newOffset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputMappings
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Mapping
name|inputMapping
init|=
name|inputMappings
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|IntPair
name|pair
range|:
name|inputMapping
control|)
block|{
name|mapping
operator|.
name|set
argument_list|(
name|pair
operator|.
name|source
operator|+
name|offset
argument_list|,
name|pair
operator|.
name|target
operator|+
name|newOffset
argument_list|)
expr_stmt|;
block|}
name|offset
operator|+=
name|inputMapping
operator|.
name|getSourceCount
argument_list|()
expr_stmt|;
name|newOffset
operator|+=
name|inputMapping
operator|.
name|getTargetCount
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|changeCount
operator|==
literal|0
operator|&&
name|mapping
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
return|return
operator|new
name|TrimResult
argument_list|(
name|join
argument_list|,
name|Mappings
operator|.
name|createIdentity
argument_list|(
name|fieldCount
argument_list|)
argument_list|)
return|;
block|}
comment|// Build new join.
specifier|final
name|RexVisitor
argument_list|<
name|RexNode
argument_list|>
name|shuttle
init|=
operator|new
name|RexPermuteInputsShuttle
argument_list|(
name|mapping
argument_list|,
name|newInputs
operator|.
name|toArray
argument_list|(
operator|new
name|RelNode
index|[
name|newInputs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|RexNode
name|newConditionExpr
init|=
name|conditionExpr
operator|.
name|accept
argument_list|(
name|shuttle
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|newJoinFilters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|joinFilter
range|:
name|joinFilters
control|)
block|{
name|newJoinFilters
operator|.
name|add
argument_list|(
name|joinFilter
operator|.
name|accept
argument_list|(
name|shuttle
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RelDataType
name|newRowType
init|=
name|RelOptUtil
operator|.
name|permute
argument_list|(
name|join
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|join
operator|.
name|getRowType
argument_list|()
argument_list|,
name|mapping
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|newJoin
init|=
operator|new
name|HiveMultiJoin
argument_list|(
name|join
operator|.
name|getCluster
argument_list|()
argument_list|,
name|newInputs
argument_list|,
name|newConditionExpr
argument_list|,
name|newRowType
argument_list|,
name|join
operator|.
name|getJoinInputs
argument_list|()
argument_list|,
name|join
operator|.
name|getJoinTypes
argument_list|()
argument_list|,
name|newJoinFilters
argument_list|)
decl_stmt|;
return|return
operator|new
name|TrimResult
argument_list|(
name|newJoin
argument_list|,
name|mapping
argument_list|)
return|;
block|}
comment|/**    * Variant of {@link #trimFields(RelNode, ImmutableBitSet, Set)} for    * {@link org.apache.calcite.adapter.druid.DruidQuery}.    */
specifier|public
name|TrimResult
name|trimFields
parameter_list|(
name|DruidQuery
name|dq
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
specifier|final
name|int
name|fieldCount
init|=
name|dq
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldsUsed
operator|.
name|equals
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|fieldCount
argument_list|)
argument_list|)
operator|&&
name|extraFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// if there is nothing to project or if we are projecting everything
comment|// then no need to introduce another RelNode
return|return
name|trimFields
argument_list|(
operator|(
name|RelNode
operator|)
name|dq
argument_list|,
name|fieldsUsed
argument_list|,
name|extraFields
argument_list|)
return|;
block|}
specifier|final
name|RelNode
name|newTableAccessRel
init|=
name|project
argument_list|(
name|dq
argument_list|,
name|fieldsUsed
argument_list|,
name|extraFields
argument_list|,
name|REL_BUILDER
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
comment|// Some parts of the system can't handle rows with zero fields, so
comment|// pretend that one field is used.
if|if
condition|(
name|fieldsUsed
operator|.
name|cardinality
argument_list|()
operator|==
literal|0
condition|)
block|{
name|RelNode
name|input
init|=
name|newTableAccessRel
decl_stmt|;
if|if
condition|(
name|input
operator|instanceof
name|Project
condition|)
block|{
comment|// The table has implemented the project in the obvious way - by
comment|// creating project with 0 fields. Strip it away, and create our own
comment|// project with one field.
name|Project
name|project
init|=
operator|(
name|Project
operator|)
name|input
decl_stmt|;
if|if
condition|(
name|project
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|input
operator|=
name|project
operator|.
name|getInput
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|dummyProject
argument_list|(
name|fieldCount
argument_list|,
name|input
argument_list|)
return|;
block|}
specifier|final
name|Mapping
name|mapping
init|=
name|createMapping
argument_list|(
name|fieldsUsed
argument_list|,
name|fieldCount
argument_list|)
decl_stmt|;
return|return
name|result
argument_list|(
name|newTableAccessRel
argument_list|,
name|mapping
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|RelNode
name|project
parameter_list|(
name|DruidQuery
name|dq
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|,
name|RelBuilder
name|relBuilder
parameter_list|)
block|{
specifier|final
name|int
name|fieldCount
init|=
name|dq
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldsUsed
operator|.
name|equals
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|fieldCount
argument_list|)
argument_list|)
operator|&&
name|extraFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|dq
return|;
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|exprList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nameList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|dq
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|fields
init|=
name|dq
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
comment|// Project the subset of fields.
for|for
control|(
name|int
name|i
range|:
name|fieldsUsed
control|)
block|{
name|RelDataTypeField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|exprList
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|dq
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|nameList
operator|.
name|add
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Project nulls for the extra fields. (Maybe a sub-class table has
comment|// extra fields, but we don't.)
for|for
control|(
name|RelDataTypeField
name|extraField
range|:
name|extraFields
control|)
block|{
name|exprList
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|ensureType
argument_list|(
name|extraField
operator|.
name|getType
argument_list|()
argument_list|,
name|rexBuilder
operator|.
name|constantNull
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|nameList
operator|.
name|add
argument_list|(
name|extraField
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HiveProject
name|hp
init|=
operator|(
name|HiveProject
operator|)
name|relBuilder
operator|.
name|push
argument_list|(
name|dq
argument_list|)
operator|.
name|project
argument_list|(
name|exprList
argument_list|,
name|nameList
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|hp
operator|.
name|setSynthetic
argument_list|()
expr_stmt|;
return|return
name|hp
return|;
block|}
specifier|private
name|boolean
name|isRexLiteral
parameter_list|(
specifier|final
name|RexNode
name|rexNode
parameter_list|)
block|{
if|if
condition|(
name|rexNode
operator|instanceof
name|RexLiteral
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|rexNode
operator|instanceof
name|RexCall
operator|&&
operator|(
operator|(
name|RexCall
operator|)
name|rexNode
operator|)
operator|.
name|getOperator
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|CAST
condition|)
block|{
return|return
name|isRexLiteral
argument_list|(
operator|(
call|(
name|RexCall
call|)
argument_list|(
name|rexNode
argument_list|)
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// Given a groupset this tries to find out if the cardinality of the grouping columns could have changed
comment|// because if not and it consist of keys (unique + not null OR pk), we can safely remove rest of the columns
comment|// if those are columns are not being used further up
specifier|private
name|ImmutableBitSet
name|generateGroupSetIfCardinalitySame
parameter_list|(
specifier|final
name|Aggregate
name|aggregate
parameter_list|,
specifier|final
name|ImmutableBitSet
name|originalGroupSet
parameter_list|,
specifier|final
name|ImmutableBitSet
name|fieldsUsed
parameter_list|)
block|{
name|RexBuilder
name|rexBuilder
init|=
name|aggregate
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|RelMetadataQuery
name|mq
init|=
name|aggregate
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
comment|// map from backtracked table ref to list of gb keys and list of corresponding backtracked columns
name|Map
argument_list|<
name|RexTableInputRef
operator|.
name|RelTableRef
argument_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|mapGBKeysLineage
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// map from table ref to list of columns (from gb keys) which are candidate to be removed
name|Map
argument_list|<
name|RexTableInputRef
operator|.
name|RelTableRef
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|candidateKeys
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|key
range|:
name|originalGroupSet
control|)
block|{
name|RexNode
name|inputRef
init|=
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|aggregate
operator|.
name|getInput
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|RexNode
argument_list|>
name|exprLineage
init|=
name|mq
operator|.
name|getExpressionLineage
argument_list|(
name|aggregate
operator|.
name|getInput
argument_list|()
argument_list|,
name|inputRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|exprLineage
operator|!=
literal|null
operator|&&
name|exprLineage
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|RexNode
name|expr
init|=
name|exprLineage
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|expr
operator|instanceof
name|RexTableInputRef
condition|)
block|{
name|RexTableInputRef
name|tblRef
init|=
operator|(
name|RexTableInputRef
operator|)
name|expr
decl_stmt|;
if|if
condition|(
name|mapGBKeysLineage
operator|.
name|containsKey
argument_list|(
name|tblRef
operator|.
name|getTableRef
argument_list|()
argument_list|)
condition|)
block|{
name|mapGBKeysLineage
operator|.
name|get
argument_list|(
name|tblRef
operator|.
name|getTableRef
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|tblRef
operator|.
name|getIndex
argument_list|()
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|newList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|newList
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|tblRef
operator|.
name|getIndex
argument_list|()
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|mapGBKeysLineage
operator|.
name|put
argument_list|(
name|tblRef
operator|.
name|getTableRef
argument_list|()
argument_list|,
name|newList
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|RexUtil
operator|.
name|isDeterministic
argument_list|(
name|expr
argument_list|)
condition|)
block|{
comment|// even though we weren't able to backtrack this key it could still be candidate for removal
comment|// if rest of the columns contain pk/unique
name|Set
argument_list|<
name|RexTableInputRef
operator|.
name|RelTableRef
argument_list|>
name|tableRefs
init|=
name|RexUtil
operator|.
name|gatherTableReferences
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|expr
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableRefs
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|RexTableInputRef
operator|.
name|RelTableRef
name|tblRef
init|=
name|tableRefs
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|candidateKeys
operator|.
name|containsKey
argument_list|(
name|tblRef
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|candidateGBKeys
init|=
name|candidateKeys
operator|.
name|get
argument_list|(
name|tblRef
argument_list|)
decl_stmt|;
name|candidateGBKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|candidateGBKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|candidateGBKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|candidateKeys
operator|.
name|put
argument_list|(
name|tblRef
argument_list|,
name|candidateGBKeys
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// we want to delete all columns in original GB set except the key
name|ImmutableBitSet
operator|.
name|Builder
name|builder
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RexTableInputRef
operator|.
name|RelTableRef
argument_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|entry
range|:
name|mapGBKeysLineage
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|RelOptHiveTable
name|tbl
init|=
operator|(
name|RelOptHiveTable
operator|)
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|gbKeyCols
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ImmutableBitSet
operator|.
name|Builder
name|btBuilder
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|gbKeyCols
operator|.
name|forEach
argument_list|(
name|pair
lambda|->
name|btBuilder
operator|.
name|set
argument_list|(
name|pair
operator|.
name|left
argument_list|)
argument_list|)
expr_stmt|;
name|ImmutableBitSet
name|backtrackedGBSet
init|=
name|btBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|allKeys
init|=
name|tbl
operator|.
name|getNonNullableKeys
argument_list|()
decl_stmt|;
name|ImmutableBitSet
name|currentKey
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ImmutableBitSet
name|key
range|:
name|allKeys
control|)
block|{
if|if
condition|(
name|backtrackedGBSet
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// only if grouping sets consist of keys
name|currentKey
operator|=
name|key
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|currentKey
operator|==
literal|null
operator|||
name|currentKey
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// we have established that this gb set contains keys and it is safe to remove rest of the columns
for|for
control|(
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|gbKeyColPair
range|:
name|gbKeyCols
control|)
block|{
name|Integer
name|backtrackedCol
init|=
name|gbKeyColPair
operator|.
name|left
decl_stmt|;
name|Integer
name|orgCol
init|=
name|gbKeyColPair
operator|.
name|right
decl_stmt|;
if|if
condition|(
operator|!
name|fieldsUsed
operator|.
name|get
argument_list|(
name|orgCol
argument_list|)
operator|&&
operator|!
name|currentKey
operator|.
name|get
argument_list|(
name|backtrackedCol
argument_list|)
condition|)
block|{
comment|// this could could be removed
name|builder
operator|.
name|set
argument_list|(
name|orgCol
argument_list|)
expr_stmt|;
block|}
block|}
comment|// remove candidate keys if possible
if|if
condition|(
name|candidateKeys
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|candidateGbKeys
init|=
name|candidateKeys
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|keyToRemove
range|:
name|candidateGbKeys
control|)
block|{
if|if
condition|(
operator|!
name|fieldsUsed
operator|.
name|get
argument_list|(
name|keyToRemove
argument_list|)
condition|)
block|{
name|builder
operator|.
name|set
argument_list|(
name|keyToRemove
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|ImmutableBitSet
name|keysToRemove
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableBitSet
name|newGroupSet
init|=
name|originalGroupSet
operator|.
name|except
argument_list|(
name|keysToRemove
argument_list|)
decl_stmt|;
assert|assert
operator|(
operator|!
name|newGroupSet
operator|.
name|isEmpty
argument_list|()
operator|)
assert|;
return|return
name|newGroupSet
return|;
block|}
comment|// if gby keys consist of pk/uk non-pk/non-uk columns are removed if they are not being used
specifier|private
name|ImmutableBitSet
name|generateNewGroupset
parameter_list|(
name|Aggregate
name|aggregate
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|)
block|{
name|ImmutableBitSet
name|originalGroupSet
init|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|aggregate
operator|.
name|getGroupSets
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|||
name|aggregate
operator|.
name|getIndicatorCount
argument_list|()
operator|>
literal|0
operator|||
name|fieldsUsed
operator|.
name|contains
argument_list|(
name|originalGroupSet
argument_list|)
condition|)
block|{
comment|// if there is grouping sets, indicator or all the group keys are being used we do no need to proceed further
return|return
name|originalGroupSet
return|;
block|}
specifier|final
name|RelNode
name|input
init|=
name|aggregate
operator|.
name|getInput
argument_list|()
decl_stmt|;
name|RelMetadataQuery
name|mq
init|=
name|aggregate
operator|.
name|getCluster
argument_list|()
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ImmutableBitSet
argument_list|>
name|uniqueKeys
init|=
name|mq
operator|.
name|getUniqueKeys
argument_list|(
name|input
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|uniqueKeys
operator|==
literal|null
operator|||
name|uniqueKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|generateGroupSetIfCardinalitySame
argument_list|(
name|aggregate
argument_list|,
name|originalGroupSet
argument_list|,
name|fieldsUsed
argument_list|)
return|;
block|}
comment|// we have set of unique key, get to the key which is same as group by key
name|ImmutableBitSet
name|groupByUniqueKey
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ImmutableBitSet
name|key
range|:
name|uniqueKeys
control|)
block|{
if|if
condition|(
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|groupByUniqueKey
operator|=
name|key
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|groupByUniqueKey
operator|==
literal|null
condition|)
block|{
comment|// group by keys do not represent unique keys
return|return
name|originalGroupSet
return|;
block|}
comment|// we know group by key contains primary key and there is at least one column in group by which is not being used
comment|// if that column is not part of key it should be removed
name|ImmutableBitSet
name|nonKeyColumns
init|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|except
argument_list|(
name|groupByUniqueKey
argument_list|)
decl_stmt|;
name|ImmutableBitSet
name|columnsToRemove
init|=
name|nonKeyColumns
operator|.
name|except
argument_list|(
name|fieldsUsed
argument_list|)
decl_stmt|;
name|ImmutableBitSet
name|newGroupSet
init|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|except
argument_list|(
name|columnsToRemove
argument_list|)
decl_stmt|;
return|return
name|newGroupSet
return|;
block|}
comment|/**    * This method replaces group by 'constant key' with group by true (boolean)    * if and only if    *  group by doesn't have grouping sets    *  all keys in group by are constant    *  none of the relnode above aggregate refers to these keys    *    *  If all of above is true then group by is rewritten and a new project is introduced    *  underneath aggregate    *    *  This is mainly done so that hive is able to push down queries with    *  group by 'constant key with type not supported by druid' into druid.    *    */
specifier|private
name|Aggregate
name|rewriteGBConstantKeys
parameter_list|(
name|Aggregate
name|aggregate
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|ImmutableBitSet
name|aggCallFields
parameter_list|)
block|{
if|if
condition|(
operator|(
name|aggregate
operator|.
name|getIndicatorCount
argument_list|()
operator|>
literal|0
operator|)
operator|||
operator|(
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
name|fieldsUsed
operator|.
name|contains
argument_list|(
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|aggregate
return|;
block|}
specifier|final
name|RelNode
name|input
init|=
name|aggregate
operator|.
name|getInput
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|rowType
init|=
name|input
operator|.
name|getRowType
argument_list|()
decl_stmt|;
name|RexBuilder
name|rexBuilder
init|=
name|aggregate
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|newProjects
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|inputExprs
init|=
name|input
operator|.
name|getChildExps
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputExprs
operator|==
literal|null
operator|||
name|inputExprs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|aggregate
return|;
block|}
name|boolean
name|allConstants
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|key
range|:
name|aggregate
operator|.
name|getGroupSet
argument_list|()
control|)
block|{
comment|// getChildExprs on Join could return less number of expressions than there are coming out of join
if|if
condition|(
name|inputExprs
operator|.
name|size
argument_list|()
operator|<=
name|key
operator|||
operator|!
name|isRexLiteral
argument_list|(
name|inputExprs
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
block|{
name|allConstants
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|allConstants
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowType
operator|.
name|getFieldCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|&&
operator|!
name|aggCallFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|newProjects
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newProjects
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|input
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|REL_BUILDER
operator|.
name|get
argument_list|()
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|project
argument_list|(
name|newProjects
argument_list|)
expr_stmt|;
name|Aggregate
name|newAggregate
init|=
operator|new
name|HiveAggregate
argument_list|(
name|aggregate
operator|.
name|getCluster
argument_list|()
argument_list|,
name|aggregate
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|,
literal|null
argument_list|,
name|aggregate
operator|.
name|getAggCallList
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|newAggregate
return|;
block|}
return|return
name|aggregate
return|;
block|}
annotation|@
name|Override
specifier|public
name|TrimResult
name|trimFields
parameter_list|(
name|Aggregate
name|aggregate
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
comment|// Fields:
comment|//
comment|// | sys fields | group fields | indicator fields | agg functions |
comment|//
comment|// Two kinds of trimming:
comment|//
comment|// 1. If agg rel has system fields but none of these are used, create an
comment|// agg rel with no system fields.
comment|//
comment|// 2. If aggregate functions are not used, remove them.
comment|//
comment|// But group and indicator fields stay, even if they are not used.
comment|// Compute which input fields are used.
comment|// agg functions
comment|// agg functions are added first (before group sets) because rewriteGBConstantsKeys
comment|// needs it
specifier|final
name|ImmutableBitSet
operator|.
name|Builder
name|aggCallFieldsUsedBuilder
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggregate
operator|.
name|getAggCallList
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
range|:
name|aggCall
operator|.
name|getArgList
argument_list|()
control|)
block|{
name|aggCallFieldsUsedBuilder
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aggCall
operator|.
name|filterArg
operator|>=
literal|0
condition|)
block|{
name|aggCallFieldsUsedBuilder
operator|.
name|set
argument_list|(
name|aggCall
operator|.
name|filterArg
argument_list|)
expr_stmt|;
block|}
block|}
comment|// transform if group by contain constant keys
name|ImmutableBitSet
name|aggCallFieldsUsed
init|=
name|aggCallFieldsUsedBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|aggregate
operator|=
name|rewriteGBConstantKeys
argument_list|(
name|aggregate
argument_list|,
name|fieldsUsed
argument_list|,
name|aggCallFieldsUsed
argument_list|)
expr_stmt|;
comment|// add group fields
specifier|final
name|ImmutableBitSet
operator|.
name|Builder
name|inputFieldsUsed
init|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|rebuild
argument_list|()
decl_stmt|;
name|inputFieldsUsed
operator|.
name|addAll
argument_list|(
name|aggCallFieldsUsed
argument_list|)
expr_stmt|;
specifier|final
name|RelDataType
name|rowType
init|=
name|aggregate
operator|.
name|getRowType
argument_list|()
decl_stmt|;
comment|// Create input with trimmed columns.
specifier|final
name|RelNode
name|input
init|=
name|aggregate
operator|.
name|getInput
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|inputExtraFields
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
specifier|final
name|TrimResult
name|trimResult
init|=
name|trimChild
argument_list|(
name|aggregate
argument_list|,
name|input
argument_list|,
name|inputFieldsUsed
operator|.
name|build
argument_list|()
argument_list|,
name|inputExtraFields
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|newInput
init|=
name|trimResult
operator|.
name|left
decl_stmt|;
specifier|final
name|Mapping
name|inputMapping
init|=
name|trimResult
operator|.
name|right
decl_stmt|;
name|ImmutableBitSet
name|originalGroupSet
init|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
decl_stmt|;
name|ImmutableBitSet
name|updatedGroupSet
init|=
name|generateNewGroupset
argument_list|(
name|aggregate
argument_list|,
name|fieldsUsed
argument_list|)
decl_stmt|;
name|ImmutableBitSet
name|gbKeysDeleted
init|=
name|originalGroupSet
operator|.
name|except
argument_list|(
name|updatedGroupSet
argument_list|)
decl_stmt|;
name|ImmutableBitSet
name|updatedGroupFields
init|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|originalGroupSet
operator|.
name|cardinality
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|updatedGroupCount
init|=
name|updatedGroupSet
operator|.
name|cardinality
argument_list|()
decl_stmt|;
comment|// we need to clear the bits corresponding to deleted gb keys
name|int
name|setIdx
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|setIdx
operator|!=
operator|-
literal|1
condition|)
block|{
name|setIdx
operator|=
name|gbKeysDeleted
operator|.
name|nextSetBit
argument_list|(
name|setIdx
argument_list|)
expr_stmt|;
if|if
condition|(
name|setIdx
operator|!=
operator|-
literal|1
condition|)
block|{
name|updatedGroupFields
operator|=
name|updatedGroupFields
operator|.
name|clear
argument_list|(
name|setIdx
argument_list|)
expr_stmt|;
name|setIdx
operator|++
expr_stmt|;
block|}
block|}
name|fieldsUsed
operator|=
name|fieldsUsed
operator|.
name|union
argument_list|(
name|updatedGroupFields
argument_list|)
expr_stmt|;
comment|// If the input is unchanged, and we need to project all columns,
comment|// there's nothing to do.
if|if
condition|(
name|input
operator|==
name|newInput
operator|&&
name|fieldsUsed
operator|.
name|equals
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|rowType
operator|.
name|getFieldCount
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|result
argument_list|(
name|aggregate
argument_list|,
name|Mappings
operator|.
name|createIdentity
argument_list|(
name|rowType
operator|.
name|getFieldCount
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|// update the group by keys based on inputMapping
name|ImmutableBitSet
name|newGroupSet
init|=
name|Mappings
operator|.
name|apply
argument_list|(
name|inputMapping
argument_list|,
name|updatedGroupSet
argument_list|)
decl_stmt|;
comment|// Which agg calls are used by our consumer?
name|int
name|originalGroupCount
init|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|cardinality
argument_list|()
decl_stmt|;
name|int
name|j
init|=
name|originalGroupCount
decl_stmt|;
name|int
name|usedAggCallCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregate
operator|.
name|getAggCallList
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fieldsUsed
operator|.
name|get
argument_list|(
name|j
operator|++
argument_list|)
condition|)
block|{
operator|++
name|usedAggCallCount
expr_stmt|;
block|}
block|}
comment|// Offset due to the number of system fields having changed.
name|Mapping
name|mapping
init|=
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|INVERSE_SURJECTION
argument_list|,
name|rowType
operator|.
name|getFieldCount
argument_list|()
argument_list|,
name|updatedGroupCount
operator|+
name|usedAggCallCount
argument_list|)
decl_stmt|;
comment|// if group keys were reduced, it means we didn't have grouping therefore
comment|// we don't need to transform group sets
name|ImmutableList
argument_list|<
name|ImmutableBitSet
argument_list|>
name|newGroupSets
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|updatedGroupSet
operator|.
name|equals
argument_list|(
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|)
condition|)
block|{
name|newGroupSets
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|newGroupSet
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newGroupSets
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|Iterables
operator|.
name|transform
argument_list|(
name|aggregate
operator|.
name|getGroupSets
argument_list|()
argument_list|,
name|input1
lambda|->
name|Mappings
operator|.
name|apply
argument_list|(
name|inputMapping
argument_list|,
name|input1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Populate mapping of where to find the fields. System, group key and
comment|// indicator fields first.
name|int
name|gbKeyIdx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|originalGroupCount
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|fieldsUsed
operator|.
name|get
argument_list|(
name|j
argument_list|)
condition|)
block|{
name|mapping
operator|.
name|set
argument_list|(
name|j
argument_list|,
name|gbKeyIdx
argument_list|)
expr_stmt|;
name|gbKeyIdx
operator|++
expr_stmt|;
block|}
block|}
comment|// Now create new agg calls, and populate mapping for them.
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|REL_BUILDER
operator|.
name|get
argument_list|()
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|newInput
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RelBuilder
operator|.
name|AggCall
argument_list|>
name|newAggCallList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|j
operator|=
name|originalGroupCount
expr_stmt|;
comment|// because lookup in fieldsUsed is done using original group count
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggregate
operator|.
name|getAggCallList
argument_list|()
control|)
block|{
if|if
condition|(
name|fieldsUsed
operator|.
name|get
argument_list|(
name|j
argument_list|)
condition|)
block|{
specifier|final
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|args
init|=
name|relBuilder
operator|.
name|fields
argument_list|(
name|Mappings
operator|.
name|apply2
argument_list|(
name|inputMapping
argument_list|,
name|aggCall
operator|.
name|getArgList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|filterArg
init|=
name|aggCall
operator|.
name|filterArg
operator|<
literal|0
condition|?
literal|null
else|:
name|relBuilder
operator|.
name|field
argument_list|(
name|Mappings
operator|.
name|apply
argument_list|(
name|inputMapping
argument_list|,
name|aggCall
operator|.
name|filterArg
argument_list|)
argument_list|)
decl_stmt|;
name|RelBuilder
operator|.
name|AggCall
name|newAggCall
init|=
name|relBuilder
operator|.
name|aggregateCall
argument_list|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
argument_list|,
name|aggCall
operator|.
name|isDistinct
argument_list|()
argument_list|,
name|aggCall
operator|.
name|isApproximate
argument_list|()
argument_list|,
name|filterArg
argument_list|,
name|aggCall
operator|.
name|name
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|mapping
operator|.
name|set
argument_list|(
name|j
argument_list|,
name|updatedGroupCount
operator|+
name|newAggCallList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|newAggCallList
operator|.
name|add
argument_list|(
name|newAggCall
argument_list|)
expr_stmt|;
block|}
operator|++
name|j
expr_stmt|;
block|}
specifier|final
name|RelBuilder
operator|.
name|GroupKey
name|groupKey
init|=
name|relBuilder
operator|.
name|groupKey
argument_list|(
name|newGroupSet
argument_list|,
name|newGroupSets
argument_list|)
decl_stmt|;
name|relBuilder
operator|.
name|aggregate
argument_list|(
name|groupKey
argument_list|,
name|newAggCallList
argument_list|)
expr_stmt|;
return|return
name|result
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|mapping
argument_list|)
return|;
block|}
comment|/**    * Variant of {@link #trimFields(RelNode, ImmutableBitSet, Set)} for    * {@link org.apache.calcite.rel.logical.LogicalProject}.    */
specifier|public
name|TrimResult
name|trimFields
parameter_list|(
name|Project
name|project
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
comment|// set columnAccessInfo for ViewColumnAuthorization
specifier|final
name|ColumnAccessInfo
name|columnAccessInfo
init|=
name|COLUMN_ACCESS_INFO
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|HiveProject
argument_list|,
name|Table
argument_list|>
name|viewProjectToTableSchema
init|=
name|VIEW_PROJECT_TO_TABLE_SCHEMA
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|columnAccessInfo
operator|!=
literal|null
operator|&&
name|viewProjectToTableSchema
operator|!=
literal|null
operator|&&
name|viewProjectToTableSchema
operator|.
name|containsKey
argument_list|(
name|project
argument_list|)
condition|)
block|{
for|for
control|(
name|Ord
argument_list|<
name|RexNode
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|fieldsUsed
operator|.
name|get
argument_list|(
name|ord
operator|.
name|i
argument_list|)
condition|)
block|{
name|Table
name|tab
init|=
name|viewProjectToTableSchema
operator|.
name|get
argument_list|(
name|project
argument_list|)
decl_stmt|;
name|columnAccessInfo
operator|.
name|add
argument_list|(
name|tab
operator|.
name|getCompleteName
argument_list|()
argument_list|,
name|tab
operator|.
name|getAllCols
argument_list|()
operator|.
name|get
argument_list|(
name|ord
operator|.
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|super
operator|.
name|trimFields
argument_list|(
name|project
argument_list|,
name|fieldsUsed
argument_list|,
name|extraFields
argument_list|)
return|;
block|}
specifier|public
name|TrimResult
name|trimFields
parameter_list|(
name|HiveTableScan
name|tableAccessRel
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
specifier|final
name|TrimResult
name|result
init|=
name|super
operator|.
name|trimFields
argument_list|(
name|tableAccessRel
argument_list|,
name|fieldsUsed
argument_list|,
name|extraFields
argument_list|)
decl_stmt|;
specifier|final
name|ColumnAccessInfo
name|columnAccessInfo
init|=
name|COLUMN_ACCESS_INFO
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|columnAccessInfo
operator|!=
literal|null
condition|)
block|{
comment|// Store information about column accessed by the table so it can be used
comment|// to send only this information for column masking
specifier|final
name|RelOptHiveTable
name|tab
init|=
operator|(
name|RelOptHiveTable
operator|)
name|tableAccessRel
operator|.
name|getTable
argument_list|()
decl_stmt|;
specifier|final
name|String
name|qualifiedName
init|=
name|tab
operator|.
name|getHiveTableMD
argument_list|()
operator|.
name|getCompleteName
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|allCols
init|=
name|tab
operator|.
name|getHiveTableMD
argument_list|()
operator|.
name|getAllCols
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|insideView
init|=
name|tableAccessRel
operator|.
name|isInsideView
argument_list|()
decl_stmt|;
name|fieldsUsed
operator|.
name|asList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|idx
lambda|->
name|idx
operator|<
name|tab
operator|.
name|getNoOfNonVirtualCols
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|idx
lambda|->
block|{
lambda|if (insideView
argument_list|)
block|{
name|columnAccessInfo
operator|.
name|addIndirect
argument_list|(
name|qualifiedName
argument_list|,
name|allCols
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
block|;           }
else|else
block|{
name|columnAccessInfo
operator|.
name|add
argument_list|(
name|qualifiedName
argument_list|,
name|allCols
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|)
function|;
block|}
end_class

begin_if
if|if
condition|(
name|fetchStats
condition|)
block|{
name|fetchColStats
argument_list|(
name|result
operator|.
name|getKey
argument_list|()
argument_list|,
name|tableAccessRel
argument_list|,
name|fieldsUsed
argument_list|,
name|extraFields
argument_list|)
expr_stmt|;
block|}
end_if

begin_return
return|return
name|result
return|;
end_return

begin_function
unit|}    private
name|void
name|fetchColStats
parameter_list|(
name|RelNode
name|key
parameter_list|,
name|TableScan
name|tableAccessRel
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|iRefSet
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|instanceof
name|Project
condition|)
block|{
specifier|final
name|Project
name|project
init|=
operator|(
name|Project
operator|)
name|key
decl_stmt|;
for|for
control|(
name|RexNode
name|rx
range|:
name|project
operator|.
name|getChildExps
argument_list|()
control|)
block|{
name|iRefSet
operator|.
name|addAll
argument_list|(
name|HiveCalciteUtil
operator|.
name|getInputRefs
argument_list|(
name|rx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|int
name|fieldCount
init|=
name|tableAccessRel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldsUsed
operator|.
name|equals
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|fieldCount
argument_list|)
argument_list|)
operator|&&
name|extraFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// get all cols
name|iRefSet
operator|.
name|addAll
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|fieldCount
argument_list|)
operator|.
name|asList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Remove any virtual cols
if|if
condition|(
name|tableAccessRel
operator|instanceof
name|HiveTableScan
condition|)
block|{
name|iRefSet
operator|.
name|removeAll
argument_list|(
operator|(
operator|(
name|HiveTableScan
operator|)
name|tableAccessRel
operator|)
operator|.
name|getVirtualCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iRefSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|RelOptTable
name|table
init|=
name|tableAccessRel
operator|.
name|getTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|table
operator|instanceof
name|RelOptHiveTable
condition|)
block|{
operator|(
operator|(
name|RelOptHiveTable
operator|)
name|table
operator|)
operator|.
name|getColStat
argument_list|(
name|iRefSet
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got col stats for {} in {}"
argument_list|,
name|iRefSet
argument_list|,
name|tableAccessRel
operator|.
name|getTable
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|protected
name|TrimResult
name|result
parameter_list|(
name|RelNode
name|r
parameter_list|,
specifier|final
name|Mapping
name|mapping
parameter_list|)
block|{
return|return
operator|new
name|TrimResult
argument_list|(
name|r
argument_list|,
name|mapping
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Variant of {@link #trimFields(RelNode, ImmutableBitSet, Set)} for {@link HiveTableFunctionScan}.    * Copied {@link org.apache.calcite.sql2rel.RelFieldTrimmer#trimFields(    * org.apache.calcite.rel.logical.LogicalTableFunctionScan, ImmutableBitSet, Set)}    * and replaced<code>tabFun</code> to {@link HiveTableFunctionScan}.    * Proper fix would be implement this in calcite.    */
end_comment

begin_function
specifier|public
name|TrimResult
name|trimFields
parameter_list|(
name|HiveTableFunctionScan
name|tabFun
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
specifier|final
name|RelDataType
name|rowType
init|=
name|tabFun
operator|.
name|getRowType
argument_list|()
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|rowType
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelNode
argument_list|>
name|newInputs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|tabFun
operator|.
name|getInputs
argument_list|()
control|)
block|{
specifier|final
name|int
name|inputFieldCount
init|=
name|input
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
name|ImmutableBitSet
name|inputFieldsUsed
init|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|inputFieldCount
argument_list|)
decl_stmt|;
comment|// Create input with trimmed columns.
specifier|final
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|inputExtraFields
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
name|TrimResult
name|trimResult
init|=
name|trimChildRestore
argument_list|(
name|tabFun
argument_list|,
name|input
argument_list|,
name|inputFieldsUsed
argument_list|,
name|inputExtraFields
argument_list|)
decl_stmt|;
assert|assert
name|trimResult
operator|.
name|right
operator|.
name|isIdentity
argument_list|()
assert|;
name|newInputs
operator|.
name|add
argument_list|(
name|trimResult
operator|.
name|left
argument_list|)
expr_stmt|;
block|}
name|TableFunctionScan
name|newTabFun
init|=
name|tabFun
decl_stmt|;
if|if
condition|(
operator|!
name|tabFun
operator|.
name|getInputs
argument_list|()
operator|.
name|equals
argument_list|(
name|newInputs
argument_list|)
condition|)
block|{
name|newTabFun
operator|=
name|tabFun
operator|.
name|copy
argument_list|(
name|tabFun
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|newInputs
argument_list|,
name|tabFun
operator|.
name|getCall
argument_list|()
argument_list|,
name|tabFun
operator|.
name|getElementType
argument_list|()
argument_list|,
name|tabFun
operator|.
name|getRowType
argument_list|()
argument_list|,
name|tabFun
operator|.
name|getColumnMappings
argument_list|()
argument_list|)
expr_stmt|;
block|}
assert|assert
name|newTabFun
operator|.
name|getClass
argument_list|()
operator|==
name|tabFun
operator|.
name|getClass
argument_list|()
assert|;
comment|// Always project all fields.
name|Mapping
name|mapping
init|=
name|Mappings
operator|.
name|createIdentity
argument_list|(
name|fieldCount
argument_list|)
decl_stmt|;
return|return
name|result
argument_list|(
name|newTabFun
argument_list|,
name|mapping
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * This method can be called to pre-register all the classes that may be    * visited during the planning phase.    */
end_comment

begin_function
specifier|protected
name|void
name|register
parameter_list|(
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|>
name|nodeClasses
parameter_list|)
throws|throws
name|Throwable
block|{
name|this
operator|.
name|trimFieldsDispatcher
operator|.
name|register
argument_list|(
name|nodeClasses
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * This method can be called at startup time to pre-register all the    * Hive classes that may be visited during the planning phase.    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|initializeFieldTrimmerClass
parameter_list|(
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
argument_list|>
name|nodeClasses
parameter_list|)
block|{
try|try
block|{
name|FIELD_TRIMMER_STATS
operator|.
name|register
argument_list|(
name|nodeClasses
argument_list|)
expr_stmt|;
name|FIELD_TRIMMER_NO_STATS
operator|.
name|register
argument_list|(
name|nodeClasses
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// LOG it but do not fail
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error initializing field trimmer instance"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
end_function

unit|}
end_unit

