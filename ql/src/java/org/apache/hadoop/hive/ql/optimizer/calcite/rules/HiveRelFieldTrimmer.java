begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|druid
operator|.
name|DruidQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexPermuteInputsShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
operator|.
name|RelFieldTrimmer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|IntPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|MappingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mappings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|RelOptHiveTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveMultiJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveTableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ColumnAccessInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|HiveRelFieldTrimmer
extends|extends
name|RelFieldTrimmer
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveRelFieldTrimmer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ColumnAccessInfo
name|columnAccessInfo
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|HiveProject
argument_list|,
name|Table
argument_list|>
name|viewProjectToTableSchema
decl_stmt|;
specifier|private
specifier|final
name|RelBuilder
name|relBuilder
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|fetchStats
decl_stmt|;
specifier|public
name|HiveRelFieldTrimmer
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|RelBuilder
name|relBuilder
parameter_list|)
block|{
name|this
argument_list|(
name|validator
argument_list|,
name|relBuilder
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HiveRelFieldTrimmer
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|RelBuilder
name|relBuilder
parameter_list|,
name|ColumnAccessInfo
name|columnAccessInfo
parameter_list|,
name|Map
argument_list|<
name|HiveProject
argument_list|,
name|Table
argument_list|>
name|viewToTableSchema
parameter_list|)
block|{
name|this
argument_list|(
name|validator
argument_list|,
name|relBuilder
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|columnAccessInfo
operator|=
name|columnAccessInfo
expr_stmt|;
name|this
operator|.
name|viewProjectToTableSchema
operator|=
name|viewToTableSchema
expr_stmt|;
block|}
specifier|public
name|HiveRelFieldTrimmer
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|RelBuilder
name|relBuilder
parameter_list|,
name|boolean
name|fetchStats
parameter_list|)
block|{
name|super
argument_list|(
name|validator
argument_list|,
name|relBuilder
argument_list|)
expr_stmt|;
name|this
operator|.
name|relBuilder
operator|=
name|relBuilder
expr_stmt|;
name|this
operator|.
name|fetchStats
operator|=
name|fetchStats
expr_stmt|;
block|}
comment|/**    * Variant of {@link #trimFields(RelNode, ImmutableBitSet, Set)} for    * {@link org.apache.hadoop.hive.ql.optimizer.calcite.reloperators.HiveMultiJoin}.    */
specifier|public
name|TrimResult
name|trimFields
parameter_list|(
name|HiveMultiJoin
name|join
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
specifier|final
name|int
name|fieldCount
init|=
name|join
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|conditionExpr
init|=
name|join
operator|.
name|getCondition
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|joinFilters
init|=
name|join
operator|.
name|getJoinFilters
argument_list|()
decl_stmt|;
comment|// Add in fields used in the condition.
specifier|final
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|combinedInputExtraFields
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|RelDataTypeField
argument_list|>
argument_list|(
name|extraFields
argument_list|)
decl_stmt|;
name|RelOptUtil
operator|.
name|InputFinder
name|inputFinder
init|=
operator|new
name|RelOptUtil
operator|.
name|InputFinder
argument_list|(
name|combinedInputExtraFields
argument_list|)
decl_stmt|;
name|inputFinder
operator|.
name|inputBitSet
operator|.
name|addAll
argument_list|(
name|fieldsUsed
argument_list|)
expr_stmt|;
name|conditionExpr
operator|.
name|accept
argument_list|(
name|inputFinder
argument_list|)
expr_stmt|;
specifier|final
name|ImmutableBitSet
name|fieldsUsedPlus
init|=
name|inputFinder
operator|.
name|inputBitSet
operator|.
name|build
argument_list|()
decl_stmt|;
name|int
name|inputStartPos
init|=
literal|0
decl_stmt|;
name|int
name|changeCount
init|=
literal|0
decl_stmt|;
name|int
name|newFieldCount
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|RelNode
argument_list|>
name|newInputs
init|=
operator|new
name|ArrayList
argument_list|<
name|RelNode
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Mapping
argument_list|>
name|inputMappings
init|=
operator|new
name|ArrayList
argument_list|<
name|Mapping
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|join
operator|.
name|getInputs
argument_list|()
control|)
block|{
specifier|final
name|RelDataType
name|inputRowType
init|=
name|input
operator|.
name|getRowType
argument_list|()
decl_stmt|;
specifier|final
name|int
name|inputFieldCount
init|=
name|inputRowType
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
comment|// Compute required mapping.
name|ImmutableBitSet
operator|.
name|Builder
name|inputFieldsUsed
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|bit
range|:
name|fieldsUsedPlus
control|)
block|{
if|if
condition|(
name|bit
operator|>=
name|inputStartPos
operator|&&
name|bit
operator|<
name|inputStartPos
operator|+
name|inputFieldCount
condition|)
block|{
name|inputFieldsUsed
operator|.
name|set
argument_list|(
name|bit
operator|-
name|inputStartPos
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|inputExtraFields
init|=
name|Collections
operator|.
expr|<
name|RelDataTypeField
operator|>
name|emptySet
argument_list|()
decl_stmt|;
name|TrimResult
name|trimResult
init|=
name|trimChild
argument_list|(
name|join
argument_list|,
name|input
argument_list|,
name|inputFieldsUsed
operator|.
name|build
argument_list|()
argument_list|,
name|inputExtraFields
argument_list|)
decl_stmt|;
name|newInputs
operator|.
name|add
argument_list|(
name|trimResult
operator|.
name|left
argument_list|)
expr_stmt|;
if|if
condition|(
name|trimResult
operator|.
name|left
operator|!=
name|input
condition|)
block|{
operator|++
name|changeCount
expr_stmt|;
block|}
specifier|final
name|Mapping
name|inputMapping
init|=
name|trimResult
operator|.
name|right
decl_stmt|;
name|inputMappings
operator|.
name|add
argument_list|(
name|inputMapping
argument_list|)
expr_stmt|;
comment|// Move offset to point to start of next input.
name|inputStartPos
operator|+=
name|inputFieldCount
expr_stmt|;
name|newFieldCount
operator|+=
name|inputMapping
operator|.
name|getTargetCount
argument_list|()
expr_stmt|;
block|}
name|Mapping
name|mapping
init|=
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|INVERSE_SURJECTION
argument_list|,
name|fieldCount
argument_list|,
name|newFieldCount
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|newOffset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputMappings
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Mapping
name|inputMapping
init|=
name|inputMappings
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|IntPair
name|pair
range|:
name|inputMapping
control|)
block|{
name|mapping
operator|.
name|set
argument_list|(
name|pair
operator|.
name|source
operator|+
name|offset
argument_list|,
name|pair
operator|.
name|target
operator|+
name|newOffset
argument_list|)
expr_stmt|;
block|}
name|offset
operator|+=
name|inputMapping
operator|.
name|getSourceCount
argument_list|()
expr_stmt|;
name|newOffset
operator|+=
name|inputMapping
operator|.
name|getTargetCount
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|changeCount
operator|==
literal|0
operator|&&
name|mapping
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
return|return
operator|new
name|TrimResult
argument_list|(
name|join
argument_list|,
name|Mappings
operator|.
name|createIdentity
argument_list|(
name|fieldCount
argument_list|)
argument_list|)
return|;
block|}
comment|// Build new join.
specifier|final
name|RexVisitor
argument_list|<
name|RexNode
argument_list|>
name|shuttle
init|=
operator|new
name|RexPermuteInputsShuttle
argument_list|(
name|mapping
argument_list|,
name|newInputs
operator|.
name|toArray
argument_list|(
operator|new
name|RelNode
index|[
name|newInputs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|RexNode
name|newConditionExpr
init|=
name|conditionExpr
operator|.
name|accept
argument_list|(
name|shuttle
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|newJoinFilters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|joinFilter
range|:
name|joinFilters
control|)
block|{
name|newJoinFilters
operator|.
name|add
argument_list|(
name|joinFilter
operator|.
name|accept
argument_list|(
name|shuttle
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RelDataType
name|newRowType
init|=
name|RelOptUtil
operator|.
name|permute
argument_list|(
name|join
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|join
operator|.
name|getRowType
argument_list|()
argument_list|,
name|mapping
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|newJoin
init|=
operator|new
name|HiveMultiJoin
argument_list|(
name|join
operator|.
name|getCluster
argument_list|()
argument_list|,
name|newInputs
argument_list|,
name|newConditionExpr
argument_list|,
name|newRowType
argument_list|,
name|join
operator|.
name|getJoinInputs
argument_list|()
argument_list|,
name|join
operator|.
name|getJoinTypes
argument_list|()
argument_list|,
name|newJoinFilters
argument_list|)
decl_stmt|;
return|return
operator|new
name|TrimResult
argument_list|(
name|newJoin
argument_list|,
name|mapping
argument_list|)
return|;
block|}
comment|/**    * Variant of {@link #trimFields(RelNode, ImmutableBitSet, Set)} for    * {@link org.apache.calcite.adapter.druid.DruidQuery}.    */
specifier|public
name|TrimResult
name|trimFields
parameter_list|(
name|DruidQuery
name|dq
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
specifier|final
name|int
name|fieldCount
init|=
name|dq
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldsUsed
operator|.
name|equals
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|fieldCount
argument_list|)
argument_list|)
operator|&&
name|extraFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// if there is nothing to project or if we are projecting everything
comment|// then no need to introduce another RelNode
return|return
name|trimFields
argument_list|(
operator|(
name|RelNode
operator|)
name|dq
argument_list|,
name|fieldsUsed
argument_list|,
name|extraFields
argument_list|)
return|;
block|}
specifier|final
name|RelNode
name|newTableAccessRel
init|=
name|project
argument_list|(
name|dq
argument_list|,
name|fieldsUsed
argument_list|,
name|extraFields
argument_list|,
name|relBuilder
argument_list|)
decl_stmt|;
comment|// Some parts of the system can't handle rows with zero fields, so
comment|// pretend that one field is used.
if|if
condition|(
name|fieldsUsed
operator|.
name|cardinality
argument_list|()
operator|==
literal|0
condition|)
block|{
name|RelNode
name|input
init|=
name|newTableAccessRel
decl_stmt|;
if|if
condition|(
name|input
operator|instanceof
name|Project
condition|)
block|{
comment|// The table has implemented the project in the obvious way - by
comment|// creating project with 0 fields. Strip it away, and create our own
comment|// project with one field.
name|Project
name|project
init|=
operator|(
name|Project
operator|)
name|input
decl_stmt|;
if|if
condition|(
name|project
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|input
operator|=
name|project
operator|.
name|getInput
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|dummyProject
argument_list|(
name|fieldCount
argument_list|,
name|input
argument_list|)
return|;
block|}
specifier|final
name|Mapping
name|mapping
init|=
name|createMapping
argument_list|(
name|fieldsUsed
argument_list|,
name|fieldCount
argument_list|)
decl_stmt|;
return|return
name|result
argument_list|(
name|newTableAccessRel
argument_list|,
name|mapping
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|RelNode
name|project
parameter_list|(
name|DruidQuery
name|dq
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|,
name|RelBuilder
name|relBuilder
parameter_list|)
block|{
specifier|final
name|int
name|fieldCount
init|=
name|dq
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldsUsed
operator|.
name|equals
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|fieldCount
argument_list|)
argument_list|)
operator|&&
name|extraFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|dq
return|;
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|exprList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nameList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|dq
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|fields
init|=
name|dq
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
comment|// Project the subset of fields.
for|for
control|(
name|int
name|i
range|:
name|fieldsUsed
control|)
block|{
name|RelDataTypeField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|exprList
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|dq
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|nameList
operator|.
name|add
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Project nulls for the extra fields. (Maybe a sub-class table has
comment|// extra fields, but we don't.)
for|for
control|(
name|RelDataTypeField
name|extraField
range|:
name|extraFields
control|)
block|{
name|exprList
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|ensureType
argument_list|(
name|extraField
operator|.
name|getType
argument_list|()
argument_list|,
name|rexBuilder
operator|.
name|constantNull
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|nameList
operator|.
name|add
argument_list|(
name|extraField
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HiveProject
name|hp
init|=
operator|(
name|HiveProject
operator|)
name|relBuilder
operator|.
name|push
argument_list|(
name|dq
argument_list|)
operator|.
name|project
argument_list|(
name|exprList
argument_list|,
name|nameList
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|hp
operator|.
name|setSynthetic
argument_list|()
expr_stmt|;
return|return
name|hp
return|;
block|}
comment|/**    * Variant of {@link #trimFields(RelNode, ImmutableBitSet, Set)} for    * {@link org.apache.calcite.rel.logical.LogicalProject}.    */
specifier|public
name|TrimResult
name|trimFields
parameter_list|(
name|Project
name|project
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
comment|// set columnAccessInfo for ViewColumnAuthorization
for|for
control|(
name|Ord
argument_list|<
name|RexNode
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|fieldsUsed
operator|.
name|get
argument_list|(
name|ord
operator|.
name|i
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|columnAccessInfo
operator|!=
literal|null
operator|&&
name|this
operator|.
name|viewProjectToTableSchema
operator|!=
literal|null
operator|&&
name|this
operator|.
name|viewProjectToTableSchema
operator|.
name|containsKey
argument_list|(
name|project
argument_list|)
condition|)
block|{
name|Table
name|tab
init|=
name|this
operator|.
name|viewProjectToTableSchema
operator|.
name|get
argument_list|(
name|project
argument_list|)
decl_stmt|;
name|this
operator|.
name|columnAccessInfo
operator|.
name|add
argument_list|(
name|tab
operator|.
name|getCompleteName
argument_list|()
argument_list|,
name|tab
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
name|ord
operator|.
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|super
operator|.
name|trimFields
argument_list|(
name|project
argument_list|,
name|fieldsUsed
argument_list|,
name|extraFields
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TrimResult
name|trimFields
parameter_list|(
name|TableScan
name|tableAccessRel
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
specifier|final
name|TrimResult
name|result
init|=
name|super
operator|.
name|trimFields
argument_list|(
name|tableAccessRel
argument_list|,
name|fieldsUsed
argument_list|,
name|extraFields
argument_list|)
decl_stmt|;
if|if
condition|(
name|fetchStats
condition|)
block|{
name|fetchColStats
argument_list|(
name|result
operator|.
name|getKey
argument_list|()
argument_list|,
name|tableAccessRel
argument_list|,
name|fieldsUsed
argument_list|,
name|extraFields
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|fetchColStats
parameter_list|(
name|RelNode
name|key
parameter_list|,
name|TableScan
name|tableAccessRel
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|iRefSet
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|instanceof
name|Project
condition|)
block|{
specifier|final
name|Project
name|project
init|=
operator|(
name|Project
operator|)
name|key
decl_stmt|;
for|for
control|(
name|RexNode
name|rx
range|:
name|project
operator|.
name|getChildExps
argument_list|()
control|)
block|{
name|iRefSet
operator|.
name|addAll
argument_list|(
name|HiveCalciteUtil
operator|.
name|getInputRefs
argument_list|(
name|rx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|int
name|fieldCount
init|=
name|tableAccessRel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldsUsed
operator|.
name|equals
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|fieldCount
argument_list|)
argument_list|)
operator|&&
name|extraFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// get all cols
name|iRefSet
operator|.
name|addAll
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|fieldCount
argument_list|)
operator|.
name|asList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Remove any virtual cols
if|if
condition|(
name|tableAccessRel
operator|instanceof
name|HiveTableScan
condition|)
block|{
name|iRefSet
operator|.
name|removeAll
argument_list|(
operator|(
operator|(
name|HiveTableScan
operator|)
name|tableAccessRel
operator|)
operator|.
name|getVirtualCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iRefSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|RelOptTable
name|table
init|=
name|tableAccessRel
operator|.
name|getTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|table
operator|instanceof
name|RelOptHiveTable
condition|)
block|{
operator|(
operator|(
name|RelOptHiveTable
operator|)
name|table
operator|)
operator|.
name|getColStat
argument_list|(
name|iRefSet
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got col stats for {} in {}"
argument_list|,
name|iRefSet
argument_list|,
name|tableAccessRel
operator|.
name|getTable
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|TrimResult
name|result
parameter_list|(
name|RelNode
name|r
parameter_list|,
specifier|final
name|Mapping
name|mapping
parameter_list|)
block|{
return|return
operator|new
name|TrimResult
argument_list|(
name|r
argument_list|,
name|mapping
argument_list|)
return|;
block|}
block|}
end_class

end_unit

