begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|CorrelationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCorrelVariable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexFieldAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexPermuteInputsShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|validate
operator|.
name|SqlValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
operator|.
name|CorrelationReferenceFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql2rel
operator|.
name|RelFieldTrimmer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|IntPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|MappingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mappings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveMultiJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveSortLimit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ColumnAccessInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|HiveRelFieldTrimmer
extends|extends
name|RelFieldTrimmer
block|{
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HiveRelFieldTrimmer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|RelBuilder
name|relBuilder
decl_stmt|;
specifier|private
name|ColumnAccessInfo
name|columnAccessInfo
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|HiveProject
argument_list|,
name|Table
argument_list|>
name|viewProjectToTableSchema
decl_stmt|;
specifier|public
name|HiveRelFieldTrimmer
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|RelBuilder
name|relBuilder
parameter_list|)
block|{
name|super
argument_list|(
name|validator
argument_list|,
name|relBuilder
argument_list|)
expr_stmt|;
name|this
operator|.
name|relBuilder
operator|=
name|relBuilder
expr_stmt|;
block|}
specifier|public
name|HiveRelFieldTrimmer
parameter_list|(
name|SqlValidator
name|validator
parameter_list|,
name|RelBuilder
name|relBuilder
parameter_list|,
name|ColumnAccessInfo
name|columnAccessInfo
parameter_list|,
name|Map
argument_list|<
name|HiveProject
argument_list|,
name|Table
argument_list|>
name|viewToTableSchema
parameter_list|)
block|{
name|super
argument_list|(
name|validator
argument_list|,
name|relBuilder
argument_list|)
expr_stmt|;
name|this
operator|.
name|relBuilder
operator|=
name|relBuilder
expr_stmt|;
name|this
operator|.
name|columnAccessInfo
operator|=
name|columnAccessInfo
expr_stmt|;
name|this
operator|.
name|viewProjectToTableSchema
operator|=
name|viewToTableSchema
expr_stmt|;
block|}
comment|/**    * Variant of {@link #trimFields(RelNode, ImmutableBitSet, Set)} for    * {@link org.apache.hadoop.hive.ql.optimizer.calcite.reloperators.HiveMultiJoin}.    */
specifier|public
name|TrimResult
name|trimFields
parameter_list|(
name|HiveMultiJoin
name|join
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
specifier|final
name|int
name|fieldCount
init|=
name|join
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|conditionExpr
init|=
name|join
operator|.
name|getCondition
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|joinFilters
init|=
name|join
operator|.
name|getJoinFilters
argument_list|()
decl_stmt|;
comment|// Add in fields used in the condition.
specifier|final
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|combinedInputExtraFields
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|RelDataTypeField
argument_list|>
argument_list|(
name|extraFields
argument_list|)
decl_stmt|;
name|RelOptUtil
operator|.
name|InputFinder
name|inputFinder
init|=
operator|new
name|RelOptUtil
operator|.
name|InputFinder
argument_list|(
name|combinedInputExtraFields
argument_list|)
decl_stmt|;
name|inputFinder
operator|.
name|inputBitSet
operator|.
name|addAll
argument_list|(
name|fieldsUsed
argument_list|)
expr_stmt|;
name|conditionExpr
operator|.
name|accept
argument_list|(
name|inputFinder
argument_list|)
expr_stmt|;
specifier|final
name|ImmutableBitSet
name|fieldsUsedPlus
init|=
name|inputFinder
operator|.
name|inputBitSet
operator|.
name|build
argument_list|()
decl_stmt|;
name|int
name|inputStartPos
init|=
literal|0
decl_stmt|;
name|int
name|changeCount
init|=
literal|0
decl_stmt|;
name|int
name|newFieldCount
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|RelNode
argument_list|>
name|newInputs
init|=
operator|new
name|ArrayList
argument_list|<
name|RelNode
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Mapping
argument_list|>
name|inputMappings
init|=
operator|new
name|ArrayList
argument_list|<
name|Mapping
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|join
operator|.
name|getInputs
argument_list|()
control|)
block|{
specifier|final
name|RelDataType
name|inputRowType
init|=
name|input
operator|.
name|getRowType
argument_list|()
decl_stmt|;
specifier|final
name|int
name|inputFieldCount
init|=
name|inputRowType
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
comment|// Compute required mapping.
name|ImmutableBitSet
operator|.
name|Builder
name|inputFieldsUsed
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|bit
range|:
name|fieldsUsedPlus
control|)
block|{
if|if
condition|(
name|bit
operator|>=
name|inputStartPos
operator|&&
name|bit
operator|<
name|inputStartPos
operator|+
name|inputFieldCount
condition|)
block|{
name|inputFieldsUsed
operator|.
name|set
argument_list|(
name|bit
operator|-
name|inputStartPos
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|inputExtraFields
init|=
name|Collections
operator|.
expr|<
name|RelDataTypeField
operator|>
name|emptySet
argument_list|()
decl_stmt|;
name|TrimResult
name|trimResult
init|=
name|trimChild
argument_list|(
name|join
argument_list|,
name|input
argument_list|,
name|inputFieldsUsed
operator|.
name|build
argument_list|()
argument_list|,
name|inputExtraFields
argument_list|)
decl_stmt|;
name|newInputs
operator|.
name|add
argument_list|(
name|trimResult
operator|.
name|left
argument_list|)
expr_stmt|;
if|if
condition|(
name|trimResult
operator|.
name|left
operator|!=
name|input
condition|)
block|{
operator|++
name|changeCount
expr_stmt|;
block|}
specifier|final
name|Mapping
name|inputMapping
init|=
name|trimResult
operator|.
name|right
decl_stmt|;
name|inputMappings
operator|.
name|add
argument_list|(
name|inputMapping
argument_list|)
expr_stmt|;
comment|// Move offset to point to start of next input.
name|inputStartPos
operator|+=
name|inputFieldCount
expr_stmt|;
name|newFieldCount
operator|+=
name|inputMapping
operator|.
name|getTargetCount
argument_list|()
expr_stmt|;
block|}
name|Mapping
name|mapping
init|=
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|INVERSE_SURJECTION
argument_list|,
name|fieldCount
argument_list|,
name|newFieldCount
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|newOffset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputMappings
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Mapping
name|inputMapping
init|=
name|inputMappings
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|IntPair
name|pair
range|:
name|inputMapping
control|)
block|{
name|mapping
operator|.
name|set
argument_list|(
name|pair
operator|.
name|source
operator|+
name|offset
argument_list|,
name|pair
operator|.
name|target
operator|+
name|newOffset
argument_list|)
expr_stmt|;
block|}
name|offset
operator|+=
name|inputMapping
operator|.
name|getSourceCount
argument_list|()
expr_stmt|;
name|newOffset
operator|+=
name|inputMapping
operator|.
name|getTargetCount
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|changeCount
operator|==
literal|0
operator|&&
name|mapping
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
return|return
operator|new
name|TrimResult
argument_list|(
name|join
argument_list|,
name|Mappings
operator|.
name|createIdentity
argument_list|(
name|fieldCount
argument_list|)
argument_list|)
return|;
block|}
comment|// Build new join.
specifier|final
name|RexVisitor
argument_list|<
name|RexNode
argument_list|>
name|shuttle
init|=
operator|new
name|RexPermuteInputsShuttle
argument_list|(
name|mapping
argument_list|,
name|newInputs
operator|.
name|toArray
argument_list|(
operator|new
name|RelNode
index|[
name|newInputs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|RexNode
name|newConditionExpr
init|=
name|conditionExpr
operator|.
name|accept
argument_list|(
name|shuttle
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|newJoinFilters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|joinFilter
range|:
name|joinFilters
control|)
block|{
name|newJoinFilters
operator|.
name|add
argument_list|(
name|joinFilter
operator|.
name|accept
argument_list|(
name|shuttle
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RelDataType
name|newRowType
init|=
name|RelOptUtil
operator|.
name|permute
argument_list|(
name|join
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|join
operator|.
name|getRowType
argument_list|()
argument_list|,
name|mapping
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|newJoin
init|=
operator|new
name|HiveMultiJoin
argument_list|(
name|join
operator|.
name|getCluster
argument_list|()
argument_list|,
name|newInputs
argument_list|,
name|newConditionExpr
argument_list|,
name|newRowType
argument_list|,
name|join
operator|.
name|getJoinInputs
argument_list|()
argument_list|,
name|join
operator|.
name|getJoinTypes
argument_list|()
argument_list|,
name|newJoinFilters
argument_list|)
decl_stmt|;
return|return
operator|new
name|TrimResult
argument_list|(
name|newJoin
argument_list|,
name|mapping
argument_list|)
return|;
block|}
comment|/**    * Variant of {@link #trimFields(RelNode, ImmutableBitSet, Set)} for    * {@link org.apache.calcite.rel.core.Sort}.    */
specifier|public
name|TrimResult
name|trimFields
parameter_list|(
name|HiveSortLimit
name|sort
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
specifier|final
name|RelDataType
name|rowType
init|=
name|sort
operator|.
name|getRowType
argument_list|()
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|rowType
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
specifier|final
name|RelCollation
name|collation
init|=
name|sort
operator|.
name|getCollation
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|input
init|=
name|sort
operator|.
name|getInput
argument_list|()
decl_stmt|;
name|RelOptCluster
name|cluster
init|=
name|sort
operator|.
name|getCluster
argument_list|()
decl_stmt|;
comment|// We use the fields used by the consumer, plus any fields used as sort
comment|// keys.
specifier|final
name|ImmutableBitSet
operator|.
name|Builder
name|inputFieldsUsed
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|(
name|fieldsUsed
argument_list|)
decl_stmt|;
for|for
control|(
name|RelFieldCollation
name|field
range|:
name|collation
operator|.
name|getFieldCollations
argument_list|()
control|)
block|{
name|inputFieldsUsed
operator|.
name|set
argument_list|(
name|field
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Create input with trimmed columns.
specifier|final
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|inputExtraFields
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
name|TrimResult
name|trimResult
init|=
name|trimChild
argument_list|(
name|sort
argument_list|,
name|input
argument_list|,
name|inputFieldsUsed
operator|.
name|build
argument_list|()
argument_list|,
name|inputExtraFields
argument_list|)
decl_stmt|;
name|RelNode
name|newInput
init|=
name|trimResult
operator|.
name|left
decl_stmt|;
specifier|final
name|Mapping
name|inputMapping
init|=
name|trimResult
operator|.
name|right
decl_stmt|;
comment|// If the input is unchanged, and we need to project all columns,
comment|// there's nothing we can do.
if|if
condition|(
name|newInput
operator|==
name|input
operator|&&
name|inputMapping
operator|.
name|isIdentity
argument_list|()
operator|&&
name|fieldsUsed
operator|.
name|cardinality
argument_list|()
operator|==
name|fieldCount
condition|)
block|{
return|return
name|result
argument_list|(
name|sort
argument_list|,
name|Mappings
operator|.
name|createIdentity
argument_list|(
name|fieldCount
argument_list|)
argument_list|)
return|;
block|}
name|relBuilder
operator|.
name|push
argument_list|(
name|newInput
argument_list|)
expr_stmt|;
specifier|final
name|int
name|offset
init|=
name|sort
operator|.
name|offset
operator|==
literal|null
condition|?
literal|0
else|:
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|sort
operator|.
name|offset
argument_list|)
decl_stmt|;
specifier|final
name|int
name|fetch
init|=
name|sort
operator|.
name|fetch
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|sort
operator|.
name|fetch
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|fields
init|=
name|relBuilder
operator|.
name|fields
argument_list|(
name|RexUtil
operator|.
name|apply
argument_list|(
name|inputMapping
argument_list|,
name|collation
argument_list|)
argument_list|)
decl_stmt|;
comment|// The result has the same mapping as the input gave us. Sometimes we
comment|// return fields that the consumer didn't ask for, because the filter
comment|// needs them for its condition.
comment|// TODO: Calcite will return empty LogicalValues when offset == 0&& fetch == 0.
comment|// However, Hive ASTConverter can not deal with LogicalValues.
name|sortLimit
argument_list|(
name|cluster
argument_list|,
name|relBuilder
argument_list|,
name|offset
argument_list|,
name|fetch
argument_list|,
name|fields
argument_list|)
expr_stmt|;
return|return
name|result
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|inputMapping
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
parameter_list|(
name|RelDataType
name|inputRowType
parameter_list|,
name|RelOptCluster
name|cluster
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|exprList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelDataTypeField
name|field
range|:
name|inputRowType
operator|.
name|getFieldList
argument_list|()
control|)
block|{
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|exprList
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|field
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|exprList
return|;
block|}
specifier|private
specifier|static
name|RelFieldCollation
name|collation
parameter_list|(
name|RexNode
name|node
parameter_list|,
name|RelFieldCollation
operator|.
name|Direction
name|direction
parameter_list|,
name|RelFieldCollation
operator|.
name|NullDirection
name|nullDirection
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|extraNodes
parameter_list|)
block|{
switch|switch
condition|(
name|node
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|INPUT_REF
case|:
return|return
operator|new
name|RelFieldCollation
argument_list|(
operator|(
operator|(
name|RexInputRef
operator|)
name|node
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|,
name|direction
argument_list|,
name|Util
operator|.
name|first
argument_list|(
name|nullDirection
argument_list|,
name|direction
operator|.
name|defaultNullDirection
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|DESCENDING
case|:
return|return
name|collation
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|RelFieldCollation
operator|.
name|Direction
operator|.
name|DESCENDING
argument_list|,
name|nullDirection
argument_list|,
name|extraNodes
argument_list|)
return|;
case|case
name|NULLS_FIRST
case|:
return|return
name|collation
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|direction
argument_list|,
name|RelFieldCollation
operator|.
name|NullDirection
operator|.
name|FIRST
argument_list|,
name|extraNodes
argument_list|)
return|;
case|case
name|NULLS_LAST
case|:
return|return
name|collation
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|direction
argument_list|,
name|RelFieldCollation
operator|.
name|NullDirection
operator|.
name|LAST
argument_list|,
name|extraNodes
argument_list|)
return|;
default|default:
specifier|final
name|int
name|fieldIndex
init|=
name|extraNodes
operator|.
name|size
argument_list|()
decl_stmt|;
name|extraNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
operator|new
name|RelFieldCollation
argument_list|(
name|fieldIndex
argument_list|,
name|direction
argument_list|,
name|Util
operator|.
name|first
argument_list|(
name|nullDirection
argument_list|,
name|direction
operator|.
name|defaultNullDirection
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|sortLimit
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelBuilder
name|relBuilder
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|fetch
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|nodes
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|fieldCollations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RelDataType
name|inputRowType
init|=
name|relBuilder
operator|.
name|peek
argument_list|()
operator|.
name|getRowType
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|extraNodes
init|=
name|projects
argument_list|(
name|inputRowType
argument_list|,
name|cluster
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|originalExtraNodes
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|extraNodes
argument_list|)
decl_stmt|;
for|for
control|(
name|RexNode
name|node
range|:
name|nodes
control|)
block|{
name|fieldCollations
operator|.
name|add
argument_list|(
name|collation
argument_list|(
name|node
argument_list|,
name|RelFieldCollation
operator|.
name|Direction
operator|.
name|ASCENDING
argument_list|,
name|RelFieldCollation
operator|.
name|NullDirection
operator|.
name|FIRST
argument_list|,
name|extraNodes
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RexNode
name|offsetNode
init|=
name|offset
operator|<=
literal|0
condition|?
literal|null
else|:
name|relBuilder
operator|.
name|literal
argument_list|(
name|offset
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|fetchNode
init|=
name|fetch
operator|<
literal|0
condition|?
literal|null
else|:
name|relBuilder
operator|.
name|literal
argument_list|(
name|fetch
argument_list|)
decl_stmt|;
if|if
condition|(
name|offsetNode
operator|==
literal|null
operator|&&
name|fetchNode
operator|==
literal|null
operator|&&
name|fieldCollations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
comment|// sort is trivial
block|}
specifier|final
name|boolean
name|addedFields
init|=
name|extraNodes
operator|.
name|size
argument_list|()
operator|>
name|originalExtraNodes
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldCollations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
assert|assert
operator|!
name|addedFields
assert|;
name|RelNode
name|top
init|=
name|relBuilder
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|top
operator|instanceof
name|Sort
condition|)
block|{
specifier|final
name|Sort
name|sort2
init|=
operator|(
name|Sort
operator|)
name|top
decl_stmt|;
if|if
condition|(
name|sort2
operator|.
name|offset
operator|==
literal|null
operator|&&
name|sort2
operator|.
name|fetch
operator|==
literal|null
condition|)
block|{
name|relBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|sort2
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|RelNode
name|sort
init|=
name|HiveSortLimit
operator|.
name|create
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|sort2
operator|.
name|collation
argument_list|,
name|offsetNode
argument_list|,
name|fetchNode
argument_list|)
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|sort
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|top
operator|instanceof
name|Project
condition|)
block|{
specifier|final
name|Project
name|project
init|=
operator|(
name|Project
operator|)
name|top
decl_stmt|;
if|if
condition|(
name|project
operator|.
name|getInput
argument_list|()
operator|instanceof
name|Sort
condition|)
block|{
specifier|final
name|Sort
name|sort2
init|=
operator|(
name|Sort
operator|)
name|project
operator|.
name|getInput
argument_list|()
decl_stmt|;
if|if
condition|(
name|sort2
operator|.
name|offset
operator|==
literal|null
operator|&&
name|sort2
operator|.
name|fetch
operator|==
literal|null
condition|)
block|{
name|relBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|sort2
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|RelNode
name|sort
init|=
name|HiveSortLimit
operator|.
name|create
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|sort2
operator|.
name|collation
argument_list|,
name|offsetNode
argument_list|,
name|fetchNode
argument_list|)
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|sort
argument_list|)
expr_stmt|;
name|relBuilder
operator|.
name|project
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
if|if
condition|(
name|addedFields
condition|)
block|{
name|relBuilder
operator|.
name|project
argument_list|(
name|extraNodes
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RelNode
name|sort
init|=
name|HiveSortLimit
operator|.
name|create
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|RelCollations
operator|.
name|of
argument_list|(
name|fieldCollations
argument_list|)
argument_list|,
name|offsetNode
argument_list|,
name|fetchNode
argument_list|)
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|sort
argument_list|)
expr_stmt|;
if|if
condition|(
name|addedFields
condition|)
block|{
name|relBuilder
operator|.
name|project
argument_list|(
name|originalExtraNodes
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
specifier|private
name|TrimResult
name|result
parameter_list|(
name|RelNode
name|r
parameter_list|,
specifier|final
name|Mapping
name|mapping
parameter_list|)
block|{
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|relBuilder
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|CorrelationId
name|correlation
range|:
name|r
operator|.
name|getVariablesSet
argument_list|()
control|)
block|{
name|r
operator|=
name|r
operator|.
name|accept
argument_list|(
operator|new
name|CorrelationReferenceFinder
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|RexNode
name|handle
parameter_list|(
name|RexFieldAccess
name|fieldAccess
parameter_list|)
block|{
specifier|final
name|RexCorrelVariable
name|v
init|=
operator|(
name|RexCorrelVariable
operator|)
name|fieldAccess
operator|.
name|getReferenceExpr
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|id
operator|.
name|equals
argument_list|(
name|correlation
argument_list|)
operator|&&
name|v
operator|.
name|getType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
operator|==
name|mapping
operator|.
name|getSourceCount
argument_list|()
condition|)
block|{
specifier|final
name|int
name|old
init|=
name|fieldAccess
operator|.
name|getField
argument_list|()
operator|.
name|getIndex
argument_list|()
decl_stmt|;
specifier|final
name|int
name|new_
init|=
name|mapping
operator|.
name|getTarget
argument_list|(
name|old
argument_list|)
decl_stmt|;
specifier|final
name|RelDataTypeFactory
operator|.
name|FieldInfoBuilder
name|typeBuilder
init|=
name|relBuilder
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|target
range|:
name|Util
operator|.
name|range
argument_list|(
name|mapping
operator|.
name|getTargetCount
argument_list|()
argument_list|)
control|)
block|{
name|typeBuilder
operator|.
name|add
argument_list|(
name|v
operator|.
name|getType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|mapping
operator|.
name|getSource
argument_list|(
name|target
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RexNode
name|newV
init|=
name|rexBuilder
operator|.
name|makeCorrel
argument_list|(
name|typeBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|v
operator|.
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
name|new_
condition|)
block|{
return|return
name|rexBuilder
operator|.
name|makeFieldAccess
argument_list|(
name|newV
argument_list|,
name|new_
argument_list|)
return|;
block|}
block|}
return|return
name|fieldAccess
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TrimResult
argument_list|(
name|r
argument_list|,
name|mapping
argument_list|)
return|;
block|}
comment|/**    * Variant of {@link #trimFields(RelNode, ImmutableBitSet, Set)} for    * {@link org.apache.calcite.rel.logical.LogicalProject}.    */
specifier|public
name|TrimResult
name|trimFields
parameter_list|(
name|Project
name|project
parameter_list|,
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|)
block|{
comment|// set columnAccessInfo for ViewColumnAuthorization
for|for
control|(
name|Ord
argument_list|<
name|RexNode
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|fieldsUsed
operator|.
name|get
argument_list|(
name|ord
operator|.
name|i
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|columnAccessInfo
operator|!=
literal|null
operator|&&
name|this
operator|.
name|viewProjectToTableSchema
operator|!=
literal|null
operator|&&
name|this
operator|.
name|viewProjectToTableSchema
operator|.
name|containsKey
argument_list|(
name|project
argument_list|)
condition|)
block|{
name|Table
name|tab
init|=
name|this
operator|.
name|viewProjectToTableSchema
operator|.
name|get
argument_list|(
name|project
argument_list|)
decl_stmt|;
name|this
operator|.
name|columnAccessInfo
operator|.
name|add
argument_list|(
name|tab
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tab
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
name|ord
operator|.
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|super
operator|.
name|trimFields
argument_list|(
name|project
argument_list|,
name|fieldsUsed
argument_list|,
name|extraFields
argument_list|)
return|;
block|}
block|}
end_class

end_unit

