begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|monitoring
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|monitoring
operator|.
name|Constants
operator|.
name|SEPARATOR
import|;
end_import

begin_class
class|class
name|QueryExecutionBreakdownSummary
implements|implements
name|PrintSummary
block|{
comment|// Methods summary
specifier|private
specifier|static
specifier|final
name|String
name|OPERATION_SUMMARY
init|=
literal|"%-35s %9s"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPERATION
init|=
literal|"OPERATION"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DURATION
init|=
literal|"DURATION"
decl_stmt|;
specifier|private
name|DecimalFormat
name|decimalFormat
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"#0.00"
argument_list|)
decl_stmt|;
specifier|private
name|PerfLogger
name|perfLogger
decl_stmt|;
specifier|private
specifier|final
name|Long
name|compileEndTime
decl_stmt|;
specifier|private
specifier|final
name|Long
name|dagSubmitStartTime
decl_stmt|;
specifier|private
specifier|final
name|Long
name|submitToRunningDuration
decl_stmt|;
specifier|private
specifier|final
name|Long
name|getSessionDuration
decl_stmt|;
name|QueryExecutionBreakdownSummary
parameter_list|(
name|PerfLogger
name|perfLogger
parameter_list|)
block|{
name|this
operator|.
name|perfLogger
operator|=
name|perfLogger
expr_stmt|;
name|this
operator|.
name|compileEndTime
operator|=
name|perfLogger
operator|.
name|getEndTime
argument_list|(
name|PerfLogger
operator|.
name|COMPILE
argument_list|)
expr_stmt|;
name|this
operator|.
name|dagSubmitStartTime
operator|=
name|perfLogger
operator|.
name|getStartTime
argument_list|(
name|PerfLogger
operator|.
name|TEZ_SUBMIT_DAG
argument_list|)
expr_stmt|;
name|this
operator|.
name|submitToRunningDuration
operator|=
name|perfLogger
operator|.
name|getDuration
argument_list|(
name|PerfLogger
operator|.
name|TEZ_SUBMIT_TO_RUNNING
argument_list|)
expr_stmt|;
name|this
operator|.
name|getSessionDuration
operator|=
name|perfLogger
operator|.
name|getDuration
argument_list|(
name|PerfLogger
operator|.
name|TEZ_GET_SESSION
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|formatNumber
parameter_list|(
name|long
name|number
parameter_list|)
block|{
return|return
name|decimalFormat
operator|.
name|format
argument_list|(
name|number
operator|/
literal|1000.0
argument_list|)
operator|+
literal|"s"
return|;
block|}
specifier|private
name|String
name|format
parameter_list|(
name|String
name|value
parameter_list|,
name|long
name|number
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|OPERATION_SUMMARY
argument_list|,
name|value
argument_list|,
name|formatNumber
argument_list|(
name|number
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|print
parameter_list|(
name|SessionState
operator|.
name|LogHelper
name|console
parameter_list|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Query Execution Summary"
argument_list|)
expr_stmt|;
name|String
name|execBreakdownHeader
init|=
name|String
operator|.
name|format
argument_list|(
name|OPERATION_SUMMARY
argument_list|,
name|OPERATION
argument_list|,
name|DURATION
argument_list|)
decl_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|execBreakdownHeader
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
comment|// parse, analyze, optimize and compile
name|long
name|compile
init|=
name|compileEndTime
operator|-
name|perfLogger
operator|.
name|getStartTime
argument_list|(
name|PerfLogger
operator|.
name|COMPILE
argument_list|)
decl_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|format
argument_list|(
literal|"Compile Query"
argument_list|,
name|compile
argument_list|)
argument_list|)
expr_stmt|;
comment|// prepare plan for submission (building DAG, adding resources, creating scratch dirs etc.)
name|long
name|totalDAGPrep
init|=
name|dagSubmitStartTime
operator|-
name|compileEndTime
operator|-
name|getSessionDuration
decl_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|format
argument_list|(
literal|"Prepare Plan"
argument_list|,
name|totalDAGPrep
argument_list|)
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|format
argument_list|(
literal|"Get Query Coordinator (AM)"
argument_list|,
name|getSessionDuration
argument_list|)
argument_list|)
expr_stmt|;
comment|// submit to accept dag (if session is closed, this will include re-opening of session time,
comment|// localizing files for AM, submitting DAG)
name|long
name|submitToAccept
init|=
name|perfLogger
operator|.
name|getStartTime
argument_list|(
name|PerfLogger
operator|.
name|TEZ_RUN_DAG
argument_list|)
operator|-
name|dagSubmitStartTime
decl_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|format
argument_list|(
literal|"Submit Plan"
argument_list|,
name|submitToAccept
argument_list|)
argument_list|)
expr_stmt|;
comment|// accept to start dag (schedule wait time, resource wait time etc.)
name|console
operator|.
name|printInfo
argument_list|(
name|format
argument_list|(
literal|"Start DAG"
argument_list|,
name|submitToRunningDuration
argument_list|)
argument_list|)
expr_stmt|;
comment|// time to actually run the dag (actual dag runtime)
specifier|final
name|long
name|startToEnd
decl_stmt|;
if|if
condition|(
name|submitToRunningDuration
operator|==
literal|0
condition|)
block|{
name|startToEnd
operator|=
name|perfLogger
operator|.
name|getDuration
argument_list|(
name|PerfLogger
operator|.
name|TEZ_RUN_DAG
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|startToEnd
operator|=
name|perfLogger
operator|.
name|getEndTime
argument_list|(
name|PerfLogger
operator|.
name|TEZ_RUN_DAG
argument_list|)
operator|-
name|perfLogger
operator|.
name|getEndTime
argument_list|(
name|PerfLogger
operator|.
name|TEZ_SUBMIT_TO_RUNNING
argument_list|)
expr_stmt|;
block|}
name|console
operator|.
name|printInfo
argument_list|(
name|format
argument_list|(
literal|"Run DAG"
argument_list|,
name|startToEnd
argument_list|)
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

