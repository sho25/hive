begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_comment
comment|/**  * Contains information required for memory usage monitoring.  **/
end_comment

begin_class
specifier|public
class|class
name|MemoryMonitorInfo
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|// Variables for LLAP hash table loading memory monitor
specifier|private
name|boolean
name|isLlap
decl_stmt|;
specifier|private
name|int
name|executorsPerNode
decl_stmt|;
specifier|private
name|int
name|maxExecutorsOverSubscribeMemory
decl_stmt|;
specifier|private
name|double
name|memoryOverSubscriptionFactor
decl_stmt|;
specifier|private
name|long
name|noConditionalTaskSize
decl_stmt|;
specifier|private
name|long
name|adjustedNoConditionalTaskSize
decl_stmt|;
specifier|private
name|long
name|memoryCheckInterval
decl_stmt|;
specifier|private
name|double
name|hashTableInflationFactor
decl_stmt|;
specifier|private
name|long
name|threshold
decl_stmt|;
specifier|public
name|MemoryMonitorInfo
parameter_list|()
block|{   }
specifier|public
name|MemoryMonitorInfo
parameter_list|(
name|boolean
name|isLlap
parameter_list|,
name|int
name|executorsPerNode
parameter_list|,
name|int
name|maxExecutorsOverSubscribeMemory
parameter_list|,
name|double
name|memoryOverSubscriptionFactor
parameter_list|,
name|long
name|noConditionalTaskSize
parameter_list|,
name|long
name|adjustedNoConditionalTaskSize
parameter_list|,
name|long
name|memoryCheckInterval
parameter_list|,
name|double
name|hashTableInflationFactor
parameter_list|)
block|{
name|this
operator|.
name|isLlap
operator|=
name|isLlap
expr_stmt|;
name|this
operator|.
name|executorsPerNode
operator|=
name|executorsPerNode
expr_stmt|;
name|this
operator|.
name|maxExecutorsOverSubscribeMemory
operator|=
name|maxExecutorsOverSubscribeMemory
expr_stmt|;
name|this
operator|.
name|memoryOverSubscriptionFactor
operator|=
name|memoryOverSubscriptionFactor
expr_stmt|;
name|this
operator|.
name|noConditionalTaskSize
operator|=
name|noConditionalTaskSize
expr_stmt|;
name|this
operator|.
name|adjustedNoConditionalTaskSize
operator|=
name|adjustedNoConditionalTaskSize
expr_stmt|;
name|this
operator|.
name|memoryCheckInterval
operator|=
name|memoryCheckInterval
expr_stmt|;
name|this
operator|.
name|hashTableInflationFactor
operator|=
name|hashTableInflationFactor
expr_stmt|;
name|this
operator|.
name|threshold
operator|=
call|(
name|long
call|)
argument_list|(
name|hashTableInflationFactor
operator|*
name|adjustedNoConditionalTaskSize
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MemoryMonitorInfo
parameter_list|(
name|MemoryMonitorInfo
name|memoryMonitorInfo
parameter_list|)
block|{
name|this
operator|.
name|isLlap
operator|=
name|memoryMonitorInfo
operator|.
name|isLlap
expr_stmt|;
name|this
operator|.
name|executorsPerNode
operator|=
name|memoryMonitorInfo
operator|.
name|executorsPerNode
expr_stmt|;
name|this
operator|.
name|maxExecutorsOverSubscribeMemory
operator|=
name|memoryMonitorInfo
operator|.
name|maxExecutorsOverSubscribeMemory
expr_stmt|;
name|this
operator|.
name|memoryOverSubscriptionFactor
operator|=
name|memoryMonitorInfo
operator|.
name|memoryOverSubscriptionFactor
expr_stmt|;
name|this
operator|.
name|noConditionalTaskSize
operator|=
name|memoryMonitorInfo
operator|.
name|noConditionalTaskSize
expr_stmt|;
name|this
operator|.
name|adjustedNoConditionalTaskSize
operator|=
name|memoryMonitorInfo
operator|.
name|adjustedNoConditionalTaskSize
expr_stmt|;
name|this
operator|.
name|memoryCheckInterval
operator|=
name|memoryMonitorInfo
operator|.
name|memoryCheckInterval
expr_stmt|;
name|this
operator|.
name|hashTableInflationFactor
operator|=
name|memoryMonitorInfo
operator|.
name|hashTableInflationFactor
expr_stmt|;
name|this
operator|.
name|threshold
operator|=
name|memoryMonitorInfo
operator|.
name|threshold
expr_stmt|;
block|}
specifier|public
name|int
name|getExecutorsPerNode
parameter_list|()
block|{
return|return
name|executorsPerNode
return|;
block|}
specifier|public
name|void
name|setExecutorsPerNode
parameter_list|(
specifier|final
name|int
name|executorsPerNode
parameter_list|)
block|{
name|this
operator|.
name|executorsPerNode
operator|=
name|executorsPerNode
expr_stmt|;
block|}
specifier|public
name|int
name|getMaxExecutorsOverSubscribeMemory
parameter_list|()
block|{
return|return
name|maxExecutorsOverSubscribeMemory
return|;
block|}
specifier|public
name|void
name|setMaxExecutorsOverSubscribeMemory
parameter_list|(
specifier|final
name|int
name|maxExecutorsOverSubscribeMemory
parameter_list|)
block|{
name|this
operator|.
name|maxExecutorsOverSubscribeMemory
operator|=
name|maxExecutorsOverSubscribeMemory
expr_stmt|;
block|}
specifier|public
name|double
name|getMemoryOverSubscriptionFactor
parameter_list|()
block|{
return|return
name|memoryOverSubscriptionFactor
return|;
block|}
specifier|public
name|void
name|setMemoryOverSubscriptionFactor
parameter_list|(
specifier|final
name|double
name|memoryOverSubscriptionFactor
parameter_list|)
block|{
name|this
operator|.
name|memoryOverSubscriptionFactor
operator|=
name|memoryOverSubscriptionFactor
expr_stmt|;
block|}
specifier|public
name|long
name|getNoConditionalTaskSize
parameter_list|()
block|{
return|return
name|noConditionalTaskSize
return|;
block|}
specifier|public
name|void
name|setNoConditionalTaskSize
parameter_list|(
specifier|final
name|long
name|noConditionalTaskSize
parameter_list|)
block|{
name|this
operator|.
name|noConditionalTaskSize
operator|=
name|noConditionalTaskSize
expr_stmt|;
block|}
specifier|public
name|long
name|getAdjustedNoConditionalTaskSize
parameter_list|()
block|{
return|return
name|adjustedNoConditionalTaskSize
return|;
block|}
specifier|public
name|void
name|setAdjustedNoConditionalTaskSize
parameter_list|(
specifier|final
name|long
name|adjustedNoConditionalTaskSize
parameter_list|)
block|{
name|this
operator|.
name|adjustedNoConditionalTaskSize
operator|=
name|adjustedNoConditionalTaskSize
expr_stmt|;
block|}
specifier|public
name|long
name|getMemoryCheckInterval
parameter_list|()
block|{
return|return
name|memoryCheckInterval
return|;
block|}
specifier|public
name|void
name|setMemoryCheckInterval
parameter_list|(
specifier|final
name|long
name|memoryCheckInterval
parameter_list|)
block|{
name|this
operator|.
name|memoryCheckInterval
operator|=
name|memoryCheckInterval
expr_stmt|;
block|}
specifier|public
name|double
name|getHashTableInflationFactor
parameter_list|()
block|{
return|return
name|hashTableInflationFactor
return|;
block|}
specifier|public
name|void
name|setHashTableInflationFactor
parameter_list|(
specifier|final
name|double
name|hashTableInflationFactor
parameter_list|)
block|{
name|this
operator|.
name|hashTableInflationFactor
operator|=
name|hashTableInflationFactor
expr_stmt|;
block|}
specifier|public
name|long
name|getThreshold
parameter_list|()
block|{
return|return
name|threshold
return|;
block|}
specifier|public
name|void
name|setLlap
parameter_list|(
specifier|final
name|boolean
name|llap
parameter_list|)
block|{
name|isLlap
operator|=
name|llap
expr_stmt|;
block|}
specifier|public
name|boolean
name|isLlap
parameter_list|()
block|{
return|return
name|isLlap
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" isLlap: "
argument_list|)
operator|.
name|append
argument_list|(
name|isLlap
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" executorsPerNode: "
argument_list|)
operator|.
name|append
argument_list|(
name|executorsPerNode
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" maxExecutorsOverSubscribeMemory: "
argument_list|)
operator|.
name|append
argument_list|(
name|maxExecutorsOverSubscribeMemory
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" memoryOverSubscriptionFactor: "
argument_list|)
operator|.
name|append
argument_list|(
name|memoryOverSubscriptionFactor
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" memoryCheckInterval: "
argument_list|)
operator|.
name|append
argument_list|(
name|memoryCheckInterval
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" noConditionalTaskSize: "
argument_list|)
operator|.
name|append
argument_list|(
name|noConditionalTaskSize
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" adjustedNoConditionalTaskSize: "
argument_list|)
operator|.
name|append
argument_list|(
name|adjustedNoConditionalTaskSize
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" hashTableInflationFactor: "
argument_list|)
operator|.
name|append
argument_list|(
name|hashTableInflationFactor
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" threshold: "
argument_list|)
operator|.
name|append
argument_list|(
name|threshold
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|doMemoryMonitoring
parameter_list|()
block|{
return|return
name|isLlap
operator|&&
name|hashTableInflationFactor
operator|>
literal|0.0d
operator|&&
name|noConditionalTaskSize
operator|>
literal|0
operator|&&
name|memoryCheckInterval
operator|>
literal|0
return|;
block|}
specifier|public
name|long
name|getEffectiveThreshold
parameter_list|(
specifier|final
name|long
name|maxMemoryPerExecutor
parameter_list|)
block|{
comment|// guard against poor configuration of noconditional task size. We let hash table grow till 2/3'rd memory
comment|// available for container/executor
return|return
operator|(
name|long
operator|)
name|Math
operator|.
name|max
argument_list|(
name|threshold
argument_list|,
operator|(
literal|2.0
operator|/
literal|3.0
operator|)
operator|*
name|maxMemoryPerExecutor
argument_list|)
return|;
block|}
block|}
end_class

end_unit

