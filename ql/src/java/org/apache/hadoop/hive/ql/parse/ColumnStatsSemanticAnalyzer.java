begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_comment
comment|/**  * ColumnStatsSemanticAnalyzer.  * Handles semantic analysis and rewrite for gathering column statistics both at the level of a  * partition and a table. Note that table statistics are implemented in SemanticAnalyzer.  *  */
end_comment

begin_class
specifier|public
class|class
name|ColumnStatsSemanticAnalyzer
extends|extends
name|SemanticAnalyzer
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ColumnStatsSemanticAnalyzer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ASTNode
name|originalTree
decl_stmt|;
specifier|private
name|ASTNode
name|rewrittenTree
decl_stmt|;
specifier|private
name|String
name|rewrittenQuery
decl_stmt|;
specifier|private
name|Context
name|ctx
decl_stmt|;
specifier|private
name|boolean
name|isRewritten
decl_stmt|;
specifier|private
name|boolean
name|isTableLevel
decl_stmt|;
specifier|private
name|String
name|tableName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|colNames
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|colType
decl_stmt|;
specifier|private
name|String
name|partName
decl_stmt|;
specifier|private
class|class
name|PartitionList
block|{
specifier|private
specifier|final
name|String
index|[]
name|partKeys
decl_stmt|;
specifier|private
name|String
index|[]
name|partKeyTypes
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|partValues
decl_stmt|;
specifier|private
name|int
name|numPartitions
decl_stmt|;
specifier|private
name|int
name|numPartitionValues
decl_stmt|;
name|PartitionList
parameter_list|(
name|int
name|numPartitions
parameter_list|)
block|{
name|this
operator|.
name|numPartitions
operator|=
name|numPartitions
expr_stmt|;
name|partKeys
operator|=
operator|new
name|String
index|[
name|numPartitions
index|]
expr_stmt|;
name|partValues
operator|=
operator|new
name|String
index|[
name|numPartitions
index|]
expr_stmt|;
block|}
specifier|public
name|int
name|getNumPartitions
parameter_list|()
block|{
return|return
name|numPartitions
return|;
block|}
specifier|public
name|void
name|setNumPartitions
parameter_list|(
name|int
name|numPartitions
parameter_list|)
block|{
name|this
operator|.
name|numPartitions
operator|=
name|numPartitions
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getPartValues
parameter_list|()
block|{
return|return
name|partValues
return|;
block|}
specifier|public
name|String
index|[]
name|getPartKeys
parameter_list|()
block|{
return|return
name|partKeys
return|;
block|}
specifier|public
name|void
name|addPartValue
parameter_list|(
name|String
name|partValue
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|partValues
index|[
name|index
index|]
operator|=
operator|new
name|String
argument_list|(
name|partValue
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addPartKey
parameter_list|(
name|String
name|partKey
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|partKeys
index|[
name|index
index|]
operator|=
operator|new
name|String
argument_list|(
name|partKey
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getNumPartValues
parameter_list|()
block|{
return|return
name|numPartitionValues
return|;
block|}
specifier|public
name|void
name|setNumPartValues
parameter_list|(
name|int
name|numPartValues
parameter_list|)
block|{
name|numPartitionValues
operator|=
name|numPartValues
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getPartKeyTypes
parameter_list|()
block|{
return|return
name|partKeyTypes
return|;
block|}
specifier|public
name|void
name|setPartKeyTypes
parameter_list|(
name|String
index|[]
name|partKeyTypes
parameter_list|)
block|{
name|this
operator|.
name|partKeyTypes
operator|=
name|partKeyTypes
expr_stmt|;
block|}
specifier|public
name|void
name|setPartKeyType
parameter_list|(
name|String
name|partKeyType
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|partKeyTypes
index|[
name|index
index|]
operator|=
name|partKeyType
expr_stmt|;
block|}
block|}
specifier|public
name|ColumnStatsSemanticAnalyzer
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|SemanticException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|shouldRewrite
parameter_list|(
name|ASTNode
name|tree
parameter_list|)
block|{
name|boolean
name|rwt
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|tree
operator|.
name|getChildCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|ASTNode
name|child0
init|=
operator|(
name|ASTNode
operator|)
name|tree
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ASTNode
name|child1
decl_stmt|;
if|if
condition|(
name|child0
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TAB
condition|)
block|{
name|child0
operator|=
operator|(
name|ASTNode
operator|)
name|child0
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|child0
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TABNAME
condition|)
block|{
name|child1
operator|=
operator|(
name|ASTNode
operator|)
name|tree
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|child1
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TABCOLNAME
condition|)
block|{
name|rwt
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|rwt
return|;
block|}
specifier|private
name|boolean
name|isPartitionLevelStats
parameter_list|(
name|ASTNode
name|tree
parameter_list|)
block|{
name|boolean
name|isPartitioned
init|=
literal|false
decl_stmt|;
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|tree
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getChildCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|child
operator|=
operator|(
name|ASTNode
operator|)
name|child
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_PARTSPEC
condition|)
block|{
name|isPartitioned
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|isPartitioned
return|;
block|}
specifier|private
name|String
name|getTableName
parameter_list|(
name|ASTNode
name|tree
parameter_list|)
block|{
return|return
name|getUnescapedName
argument_list|(
operator|(
name|ASTNode
operator|)
name|tree
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|PartitionList
name|getPartKeyValuePairsFromAST
parameter_list|(
name|ASTNode
name|tree
parameter_list|)
block|{
name|ASTNode
name|child
init|=
operator|(
operator|(
name|ASTNode
operator|)
name|tree
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|)
decl_stmt|;
name|int
name|numParts
init|=
name|child
operator|.
name|getChildCount
argument_list|()
decl_stmt|;
name|PartitionList
name|partList
init|=
operator|new
name|PartitionList
argument_list|(
name|numParts
argument_list|)
decl_stmt|;
name|String
name|partKey
decl_stmt|;
name|String
name|partValue
decl_stmt|;
name|int
name|numPartValue
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numParts
condition|;
name|i
operator|++
control|)
block|{
name|partKey
operator|=
operator|new
name|String
argument_list|(
name|getUnescapedName
argument_list|(
operator|(
name|ASTNode
operator|)
name|child
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
operator|.
name|getChildCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|partValue
operator|=
operator|new
name|String
argument_list|(
name|getUnescapedName
argument_list|(
operator|(
name|ASTNode
operator|)
name|child
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|partValue
operator|=
name|partValue
operator|.
name|replaceAll
argument_list|(
literal|"'"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|numPartValue
operator|+=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|partValue
operator|=
literal|null
expr_stmt|;
block|}
name|partList
operator|.
name|addPartKey
argument_list|(
name|partKey
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|partValue
operator|!=
literal|null
condition|)
block|{
name|partList
operator|.
name|addPartValue
argument_list|(
name|partValue
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|partList
operator|.
name|setNumPartValues
argument_list|(
name|numPartValue
argument_list|)
expr_stmt|;
return|return
name|partList
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getColumnName
parameter_list|(
name|ASTNode
name|tree
parameter_list|)
block|{
name|int
name|numCols
init|=
name|tree
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getChildCount
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colName
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCols
condition|;
name|i
operator|++
control|)
block|{
name|colName
operator|.
name|add
argument_list|(
name|i
argument_list|,
operator|new
name|String
argument_list|(
name|getUnescapedName
argument_list|(
operator|(
name|ASTNode
operator|)
name|tree
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|colName
return|;
block|}
specifier|private
name|int
name|getNumColumns
parameter_list|(
name|ASTNode
name|tree
parameter_list|)
block|{
return|return
name|tree
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getChildCount
argument_list|()
return|;
block|}
specifier|private
name|void
name|validatePartitionKeys
parameter_list|(
name|String
name|tableName
parameter_list|,
name|PartitionList
name|partList
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Table
name|tbl
decl_stmt|;
try|try
block|{
name|tbl
operator|=
name|db
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_TABLE
operator|.
name|getMsg
argument_list|(
name|tableName
argument_list|)
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partKeys
init|=
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
name|String
index|[]
name|inputPartKeys
init|=
name|partList
operator|.
name|getPartKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputPartKeys
operator|.
name|length
operator|!=
name|partKeys
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|COLUMNSTATSCOLLECTOR_INCORRECT_NUM_PART_KEY
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|partKeysMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputPartKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|partKeysMap
operator|.
name|put
argument_list|(
name|inputPartKeys
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Verify that the user specified part keys match the part keys in the table
for|for
control|(
name|FieldSchema
name|partKey
range|:
name|partKeys
control|)
block|{
if|if
condition|(
operator|!
name|partKeysMap
operator|.
name|containsKey
argument_list|(
name|partKey
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|COLUMNSTATSCOLLECTOR_INVALID_PART_KEY
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|String
index|[]
name|getPartitionKeysType
parameter_list|(
name|String
name|tableName
parameter_list|,
name|PartitionList
name|partList
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Table
name|tbl
decl_stmt|;
try|try
block|{
name|tbl
operator|=
name|db
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_TABLE
operator|.
name|getMsg
argument_list|(
name|tableName
argument_list|)
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partKeys
init|=
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
name|String
index|[]
name|inputPartKeys
init|=
name|partList
operator|.
name|getPartKeys
argument_list|()
decl_stmt|;
name|String
index|[]
name|inputPartKeyTypes
init|=
operator|new
name|String
index|[
name|inputPartKeys
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputPartKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|FieldSchema
name|partKey
range|:
name|partKeys
control|)
block|{
if|if
condition|(
name|inputPartKeys
index|[
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
name|partKey
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|inputPartKeyTypes
index|[
name|i
index|]
operator|=
operator|new
name|String
argument_list|(
name|partKey
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|inputPartKeyTypes
return|;
block|}
specifier|private
name|String
name|constructPartitionName
parameter_list|(
name|String
name|tableName
parameter_list|,
name|PartitionList
name|partList
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Table
name|tbl
decl_stmt|;
name|Partition
name|part
decl_stmt|;
name|String
index|[]
name|partKeys
init|=
name|partList
operator|.
name|getPartKeys
argument_list|()
decl_stmt|;
name|String
index|[]
name|partValues
init|=
name|partList
operator|.
name|getPartValues
argument_list|()
decl_stmt|;
try|try
block|{
name|tbl
operator|=
name|db
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_TABLE
operator|.
name|getMsg
argument_list|(
name|tableName
argument_list|)
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|partSpec
operator|.
name|put
argument_list|(
name|partKeys
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|partValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|part
operator|=
name|db
operator|.
name|getPartition
argument_list|(
name|tbl
argument_list|,
name|partSpec
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_PARTITION
operator|.
name|getMsg
argument_list|(
name|partName
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|COLUMNSTATSCOLLECTOR_INVALID_PARTITION
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|part
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|private
name|void
name|validatePartitionClause
parameter_list|(
name|String
name|tableName
parameter_list|,
name|PartitionList
name|partList
parameter_list|)
throws|throws
name|SemanticException
block|{
name|int
name|numPartKeys
init|=
name|partList
operator|.
name|getNumPartitions
argument_list|()
decl_stmt|;
name|int
name|numPartValues
init|=
name|partList
operator|.
name|getNumPartValues
argument_list|()
decl_stmt|;
comment|// Raise error if the user has specified dynamic partitions in the partitioning clause
if|if
condition|(
name|numPartKeys
operator|!=
name|numPartValues
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|COLUMNSTATSCOLLECTOR_INVALID_SYNTAX
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
comment|// Validate the user specified partition keys match the partition keys in the table
name|validatePartitionKeys
argument_list|(
name|tableName
argument_list|,
name|partList
argument_list|)
expr_stmt|;
block|}
specifier|private
name|StringBuilder
name|genPartitionClause
parameter_list|(
name|PartitionList
name|partList
parameter_list|)
throws|throws
name|SemanticException
block|{
name|StringBuilder
name|whereClause
init|=
operator|new
name|StringBuilder
argument_list|(
literal|" where "
argument_list|)
decl_stmt|;
name|boolean
name|predPresent
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|groupByClause
init|=
operator|new
name|StringBuilder
argument_list|(
literal|" group by "
argument_list|)
decl_stmt|;
name|boolean
name|aggPresent
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|retClause
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|partKeys
init|=
name|partList
operator|.
name|getPartKeys
argument_list|()
decl_stmt|;
name|String
index|[]
name|partValues
init|=
name|partList
operator|.
name|getPartValues
argument_list|()
decl_stmt|;
name|String
index|[]
name|partKeysType
init|=
name|getPartitionKeysType
argument_list|(
name|tableName
argument_list|,
name|partList
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partList
operator|.
name|getNumPartitions
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|partValues
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|predPresent
condition|)
block|{
name|whereClause
operator|.
name|append
argument_list|(
name|partKeys
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|whereClause
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
expr_stmt|;
if|if
condition|(
name|partKeysType
index|[
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"string"
argument_list|)
condition|)
block|{
name|whereClause
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|whereClause
operator|.
name|append
argument_list|(
name|partValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|partKeysType
index|[
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"string"
argument_list|)
condition|)
block|{
name|whereClause
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|predPresent
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|whereClause
operator|.
name|append
argument_list|(
literal|" and "
argument_list|)
expr_stmt|;
name|whereClause
operator|.
name|append
argument_list|(
name|partKeys
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|whereClause
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
expr_stmt|;
if|if
condition|(
name|partKeysType
index|[
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"string"
argument_list|)
condition|)
block|{
name|whereClause
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|whereClause
operator|.
name|append
argument_list|(
name|partValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|partKeysType
index|[
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"string"
argument_list|)
condition|)
block|{
name|whereClause
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|aggPresent
condition|)
block|{
name|groupByClause
operator|.
name|append
argument_list|(
name|partKeys
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|aggPresent
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|groupByClause
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|groupByClause
operator|.
name|append
argument_list|(
name|partKeys
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// attach the predicate and group by to the return clause
if|if
condition|(
name|predPresent
condition|)
block|{
name|retClause
operator|=
operator|new
name|StringBuilder
argument_list|(
name|whereClause
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aggPresent
condition|)
block|{
name|retClause
operator|.
name|append
argument_list|(
name|groupByClause
argument_list|)
expr_stmt|;
block|}
return|return
name|retClause
return|;
block|}
specifier|private
name|int
name|getNumBitVectorsForNDVEstimation
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|SemanticException
block|{
name|int
name|numBitVectors
decl_stmt|;
name|float
name|percentageError
init|=
name|HiveConf
operator|.
name|getFloatVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_NDV_ERROR
argument_list|)
decl_stmt|;
if|if
condition|(
name|percentageError
operator|<
literal|0.0
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"hive.stats.ndv.error can't be negative"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|percentageError
operator|<=
literal|2.4
condition|)
block|{
name|numBitVectors
operator|=
literal|1024
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Lowest error achievable is 2.4% but error requested is "
operator|+
name|percentageError
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Choosing 1024 bit vectors.."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|percentageError
operator|<=
literal|3.4
condition|)
block|{
name|numBitVectors
operator|=
literal|1024
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error requested is "
operator|+
name|percentageError
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Choosing 1024 bit vectors.."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|percentageError
operator|<=
literal|4.8
condition|)
block|{
name|numBitVectors
operator|=
literal|512
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error requested is "
operator|+
name|percentageError
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Choosing 512 bit vectors.."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|percentageError
operator|<=
literal|6.8
condition|)
block|{
name|numBitVectors
operator|=
literal|256
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error requested is "
operator|+
name|percentageError
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Choosing 256 bit vectors.."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|percentageError
operator|<=
literal|9.7
condition|)
block|{
name|numBitVectors
operator|=
literal|128
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error requested is "
operator|+
name|percentageError
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Choosing 128 bit vectors.."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|percentageError
operator|<=
literal|13.8
condition|)
block|{
name|numBitVectors
operator|=
literal|64
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error requested is "
operator|+
name|percentageError
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Choosing 64 bit vectors.."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|percentageError
operator|<=
literal|19.6
condition|)
block|{
name|numBitVectors
operator|=
literal|32
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error requested is "
operator|+
name|percentageError
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Choosing 32 bit vectors.."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|percentageError
operator|<=
literal|28.2
condition|)
block|{
name|numBitVectors
operator|=
literal|16
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error requested is "
operator|+
name|percentageError
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Choosing 16 bit vectors.."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|percentageError
operator|<=
literal|40.9
condition|)
block|{
name|numBitVectors
operator|=
literal|8
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error requested is "
operator|+
name|percentageError
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Choosing 8 bit vectors.."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|percentageError
operator|<=
literal|61.0
condition|)
block|{
name|numBitVectors
operator|=
literal|4
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error requested is "
operator|+
name|percentageError
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Choosing 4 bit vectors.."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|numBitVectors
operator|=
literal|2
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error requested is "
operator|+
name|percentageError
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Choosing 2 bit vectors.."
argument_list|)
expr_stmt|;
block|}
return|return
name|numBitVectors
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getTableColumnType
parameter_list|(
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|,
name|int
name|numCols
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|colTypes
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|colName
decl_stmt|;
name|Table
name|tbl
decl_stmt|;
try|try
block|{
name|tbl
operator|=
name|db
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_TABLE
operator|.
name|getMsg
argument_list|(
name|tableName
argument_list|)
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|tbl
operator|.
name|getCols
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCols
condition|;
name|i
operator|++
control|)
block|{
name|colName
operator|=
name|colNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldSchema
name|col
range|:
name|cols
control|)
block|{
if|if
condition|(
name|colName
operator|.
name|equalsIgnoreCase
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|colTypes
operator|.
name|add
argument_list|(
name|i
argument_list|,
operator|new
name|String
argument_list|(
name|col
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|colTypes
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getPartitionColumnType
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|,
name|int
name|numCols
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|colTypes
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|colName
decl_stmt|;
name|Table
name|tbl
decl_stmt|;
try|try
block|{
name|tbl
operator|=
name|db
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_TABLE
operator|.
name|getMsg
argument_list|(
name|tableName
argument_list|)
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partNames
operator|.
name|add
argument_list|(
name|partName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitionList
decl_stmt|;
try|try
block|{
name|partitionList
operator|=
name|db
operator|.
name|getPartitionsByNames
argument_list|(
name|tbl
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_PARTITION
operator|.
name|getMsg
argument_list|(
name|partName
argument_list|)
argument_list|)
throw|;
block|}
name|Partition
name|part
init|=
name|partitionList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|part
operator|.
name|getCols
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCols
condition|;
name|i
operator|++
control|)
block|{
name|colName
operator|=
name|colNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldSchema
name|col
range|:
name|cols
control|)
block|{
if|if
condition|(
name|colName
operator|.
name|equalsIgnoreCase
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|colTypes
operator|.
name|add
argument_list|(
name|i
argument_list|,
operator|new
name|String
argument_list|(
name|col
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|colTypes
return|;
block|}
specifier|private
name|String
name|genRewrittenQuery
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|,
name|int
name|numBitVectors
parameter_list|,
name|PartitionList
name|partList
parameter_list|,
name|boolean
name|isPartitionStats
parameter_list|)
throws|throws
name|SemanticException
block|{
name|StringBuilder
name|rewrittenQueryBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"select "
argument_list|)
decl_stmt|;
name|String
name|rewrittenQuery
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|colNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|rewrittenQueryBuilder
operator|.
name|append
argument_list|(
literal|" , "
argument_list|)
expr_stmt|;
block|}
name|rewrittenQueryBuilder
operator|.
name|append
argument_list|(
literal|"compute_stats("
argument_list|)
expr_stmt|;
name|rewrittenQueryBuilder
operator|.
name|append
argument_list|(
name|colNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|rewrittenQueryBuilder
operator|.
name|append
argument_list|(
literal|" , "
argument_list|)
expr_stmt|;
name|rewrittenQueryBuilder
operator|.
name|append
argument_list|(
name|numBitVectors
argument_list|)
expr_stmt|;
name|rewrittenQueryBuilder
operator|.
name|append
argument_list|(
literal|" )"
argument_list|)
expr_stmt|;
block|}
name|rewrittenQueryBuilder
operator|.
name|append
argument_list|(
literal|" from "
argument_list|)
expr_stmt|;
name|rewrittenQueryBuilder
operator|.
name|append
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|isRewritten
operator|=
literal|true
expr_stmt|;
comment|// If partition level statistics is requested, add predicate and group by as needed to rewritten
comment|// query
if|if
condition|(
name|isPartitionStats
condition|)
block|{
name|rewrittenQueryBuilder
operator|.
name|append
argument_list|(
name|genPartitionClause
argument_list|(
name|partList
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rewrittenQuery
operator|=
name|rewrittenQueryBuilder
operator|.
name|toString
argument_list|()
expr_stmt|;
name|rewrittenQuery
operator|=
operator|new
name|VariableSubstitution
argument_list|()
operator|.
name|substitute
argument_list|(
name|conf
argument_list|,
name|rewrittenQuery
argument_list|)
expr_stmt|;
return|return
name|rewrittenQuery
return|;
block|}
specifier|private
name|ASTNode
name|genRewrittenTree
parameter_list|(
name|String
name|rewrittenQuery
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ASTNode
name|rewrittenTree
decl_stmt|;
comment|// Parse the rewritten query string
try|try
block|{
name|ctx
operator|=
operator|new
name|Context
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|COLUMNSTATSCOLLECTOR_IO_ERROR
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
name|ctx
operator|.
name|setCmd
argument_list|(
name|rewrittenQuery
argument_list|)
expr_stmt|;
name|ParseDriver
name|pd
init|=
operator|new
name|ParseDriver
argument_list|()
decl_stmt|;
try|try
block|{
name|rewrittenTree
operator|=
name|pd
operator|.
name|parse
argument_list|(
name|rewrittenQuery
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|COLUMNSTATSCOLLECTOR_PARSE_ERROR
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
name|rewrittenTree
operator|=
name|ParseUtils
operator|.
name|findRootNonNullToken
argument_list|(
name|rewrittenTree
argument_list|)
expr_stmt|;
return|return
name|rewrittenTree
return|;
block|}
specifier|public
name|ColumnStatsSemanticAnalyzer
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|ASTNode
name|tree
parameter_list|)
throws|throws
name|SemanticException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|/* Rewrite only analyze table<> column<> compute statistics; Don't rewrite analyze table      * command - table stats are collected by the table scan operator and is not rewritten to      * an aggregation.      */
if|if
condition|(
name|shouldRewrite
argument_list|(
name|tree
argument_list|)
condition|)
block|{
name|tableName
operator|=
operator|new
name|String
argument_list|(
name|getTableName
argument_list|(
name|tree
argument_list|)
argument_list|)
expr_stmt|;
name|colNames
operator|=
name|getColumnName
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|int
name|numCols
init|=
name|getNumColumns
argument_list|(
name|tree
argument_list|)
decl_stmt|;
comment|// Save away the original AST
name|originalTree
operator|=
name|tree
expr_stmt|;
name|boolean
name|isPartitionStats
init|=
name|isPartitionLevelStats
argument_list|(
name|tree
argument_list|)
decl_stmt|;
name|PartitionList
name|partList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isPartitionStats
condition|)
block|{
name|isTableLevel
operator|=
literal|false
expr_stmt|;
name|partList
operator|=
name|getPartKeyValuePairsFromAST
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|validatePartitionClause
argument_list|(
name|tableName
argument_list|,
name|partList
argument_list|)
expr_stmt|;
name|partName
operator|=
name|constructPartitionName
argument_list|(
name|tableName
argument_list|,
name|partList
argument_list|)
expr_stmt|;
name|colType
operator|=
name|getPartitionColumnType
argument_list|(
name|tableName
argument_list|,
name|partName
argument_list|,
name|colNames
argument_list|,
name|numCols
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|isTableLevel
operator|=
literal|true
expr_stmt|;
name|colType
operator|=
name|getTableColumnType
argument_list|(
name|tableName
argument_list|,
name|colNames
argument_list|,
name|numCols
argument_list|)
expr_stmt|;
block|}
name|int
name|numBitVectors
init|=
name|getNumBitVectorsForNDVEstimation
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rewrittenQuery
operator|=
name|genRewrittenQuery
argument_list|(
name|colNames
argument_list|,
name|numBitVectors
argument_list|,
name|partList
argument_list|,
name|isPartitionStats
argument_list|)
expr_stmt|;
name|rewrittenTree
operator|=
name|genRewrittenTree
argument_list|(
name|rewrittenQuery
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Not an analyze table column compute statistics statement - don't do any rewrites
name|originalTree
operator|=
name|rewrittenTree
operator|=
name|tree
expr_stmt|;
name|rewrittenQuery
operator|=
literal|null
expr_stmt|;
name|isRewritten
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|analyze
parameter_list|(
name|ASTNode
name|ast
parameter_list|,
name|Context
name|origCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|QB
name|qb
decl_stmt|;
name|QBParseInfo
name|qbp
decl_stmt|;
comment|// initialize QB
name|init
argument_list|()
expr_stmt|;
comment|// Setup the necessary metadata if originating from analyze rewrite
if|if
condition|(
name|isRewritten
condition|)
block|{
name|qb
operator|=
name|getQB
argument_list|()
expr_stmt|;
name|qb
operator|.
name|setAnalyzeRewrite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|qbp
operator|=
name|qb
operator|.
name|getParseInfo
argument_list|()
expr_stmt|;
name|qbp
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|qbp
operator|.
name|setTblLvl
argument_list|(
name|isTableLevel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isTableLevel
condition|)
block|{
name|qbp
operator|.
name|setPartName
argument_list|(
name|partName
argument_list|)
expr_stmt|;
block|}
name|qbp
operator|.
name|setColName
argument_list|(
name|colNames
argument_list|)
expr_stmt|;
name|qbp
operator|.
name|setColType
argument_list|(
name|colType
argument_list|)
expr_stmt|;
name|initCtx
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Invoking analyze on rewritten query"
argument_list|)
expr_stmt|;
name|analyzeInternal
argument_list|(
name|rewrittenTree
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|initCtx
argument_list|(
name|origCtx
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Invoking analyze on original query"
argument_list|)
expr_stmt|;
name|analyzeInternal
argument_list|(
name|originalTree
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

