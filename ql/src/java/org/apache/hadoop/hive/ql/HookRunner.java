begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ExecuteWithHookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|Hook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|HookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|HookUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|MaterializedViewRegistryUpdateHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|MetricsQueryLifeTimeHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|QueryLifeTimeHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|QueryLifeTimeHookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|QueryLifeTimeHookContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|QueryLifeTimeHookWithParseHooks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveSemanticAnalyzerHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveSemanticAnalyzerHookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|LogHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HiveStringUtils
import|;
end_import

begin_comment
comment|/**  * Handles hook executions for {@link Driver}.  */
end_comment

begin_class
specifier|public
class|class
name|HookRunner
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CLASS_NAME
init|=
name|Driver
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|LogHelper
name|console
decl_stmt|;
specifier|private
name|List
argument_list|<
name|QueryLifeTimeHook
argument_list|>
name|queryHooks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|HiveSemanticAnalyzerHook
argument_list|>
name|saHooks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|HiveDriverRunHook
argument_list|>
name|driverRunHooks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ExecuteWithHookContext
argument_list|>
name|preExecHooks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ExecuteWithHookContext
argument_list|>
name|postExecHooks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ExecuteWithHookContext
argument_list|>
name|onFailureHooks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
comment|/**    * Constructs a {@link HookRunner} that loads all hooks to be run via a {@link HooksLoader}.    */
name|HookRunner
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|SessionState
operator|.
name|LogHelper
name|console
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|console
operator|=
name|console
expr_stmt|;
block|}
specifier|public
name|void
name|initialize
parameter_list|()
block|{
if|if
condition|(
name|initialized
condition|)
block|{
return|return;
block|}
name|initialized
operator|=
literal|true
expr_stmt|;
name|queryHooks
operator|.
name|addAll
argument_list|(
name|loadHooksFromConf
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_QUERY_LIFETIME_HOOKS
argument_list|,
name|QueryLifeTimeHook
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|saHooks
operator|.
name|addAll
argument_list|(
name|loadHooksFromConf
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SEMANTIC_ANALYZER_HOOK
argument_list|,
name|HiveSemanticAnalyzerHook
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|driverRunHooks
operator|.
name|addAll
argument_list|(
name|loadHooksFromConf
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_DRIVER_RUN_HOOKS
argument_list|,
name|HiveDriverRunHook
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|preExecHooks
operator|.
name|addAll
argument_list|(
name|loadHooksFromConf
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
argument_list|,
name|ExecuteWithHookContext
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|postExecHooks
operator|.
name|addAll
argument_list|(
name|loadHooksFromConf
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
argument_list|,
name|ExecuteWithHookContext
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|onFailureHooks
operator|.
name|addAll
argument_list|(
name|loadHooksFromConf
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|ONFAILUREHOOKS
argument_list|,
name|ExecuteWithHookContext
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_METRICS_ENABLED
argument_list|)
condition|)
block|{
name|queryHooks
operator|.
name|add
argument_list|(
operator|new
name|MetricsQueryLifeTimeHook
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|queryHooks
operator|.
name|add
argument_list|(
operator|new
name|MaterializedViewRegistryUpdateHook
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|Hook
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|loadHooksFromConf
parameter_list|(
name|ConfVars
name|hookConfVar
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
try|try
block|{
return|return
name|HookUtils
operator|.
name|readHooksFromConf
argument_list|(
name|conf
argument_list|,
name|hookConfVar
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
decl||
name|IllegalAccessException
decl||
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Error loading hooks("
operator|+
name|hookConfVar
operator|+
literal|"): "
operator|+
name|HiveStringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * If {@link QueryLifeTimeHookWithParseHooks} have been loaded via the {@link HooksLoader} then invoke the    * {@link QueryLifeTimeHookWithParseHooks#beforeParse(QueryLifeTimeHookContext)} method for each    * {@link QueryLifeTimeHookWithParseHooks}.    *    * @param command the Hive command that is being run    */
name|void
name|runBeforeParseHook
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|initialize
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|queryHooks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QueryLifeTimeHookContext
name|qhc
init|=
operator|new
name|QueryLifeTimeHookContextImpl
operator|.
name|Builder
argument_list|()
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withCommand
argument_list|(
name|command
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|QueryLifeTimeHook
name|hook
range|:
name|queryHooks
control|)
block|{
if|if
condition|(
name|hook
operator|instanceof
name|QueryLifeTimeHookWithParseHooks
condition|)
block|{
operator|(
operator|(
name|QueryLifeTimeHookWithParseHooks
operator|)
name|hook
operator|)
operator|.
name|beforeParse
argument_list|(
name|qhc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * If {@link QueryLifeTimeHookWithParseHooks} have been loaded via the {@link HooksLoader} then invoke the    * {@link QueryLifeTimeHookWithParseHooks#afterParse(QueryLifeTimeHookContext, boolean)} method for each    * {@link QueryLifeTimeHookWithParseHooks}.    *    * @param command the Hive command that is being run    * @param parseError true if there was an error while parsing the command, false otherwise    */
name|void
name|runAfterParseHook
parameter_list|(
name|String
name|command
parameter_list|,
name|boolean
name|parseError
parameter_list|)
block|{
name|initialize
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|queryHooks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QueryLifeTimeHookContext
name|qhc
init|=
operator|new
name|QueryLifeTimeHookContextImpl
operator|.
name|Builder
argument_list|()
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withCommand
argument_list|(
name|command
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|QueryLifeTimeHook
name|hook
range|:
name|queryHooks
control|)
block|{
if|if
condition|(
name|hook
operator|instanceof
name|QueryLifeTimeHookWithParseHooks
condition|)
block|{
operator|(
operator|(
name|QueryLifeTimeHookWithParseHooks
operator|)
name|hook
operator|)
operator|.
name|afterParse
argument_list|(
name|qhc
argument_list|,
name|parseError
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Dispatches {@link QueryLifeTimeHook#beforeCompile(QueryLifeTimeHookContext)}.    *    * @param command the Hive command that is being run    */
name|void
name|runBeforeCompileHook
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|initialize
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|queryHooks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QueryLifeTimeHookContext
name|qhc
init|=
operator|new
name|QueryLifeTimeHookContextImpl
operator|.
name|Builder
argument_list|()
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withCommand
argument_list|(
name|command
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|QueryLifeTimeHook
name|hook
range|:
name|queryHooks
control|)
block|{
name|hook
operator|.
name|beforeCompile
argument_list|(
name|qhc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**   * Dispatches {@link QueryLifeTimeHook#afterCompile(QueryLifeTimeHookContext, boolean)}.   *   * @param command the Hive command that is being run   * @param compileError true if there was an error while compiling the command, false otherwise   */
name|void
name|runAfterCompilationHook
parameter_list|(
name|String
name|command
parameter_list|,
name|boolean
name|compileError
parameter_list|)
block|{
name|initialize
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|queryHooks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QueryLifeTimeHookContext
name|qhc
init|=
operator|new
name|QueryLifeTimeHookContextImpl
operator|.
name|Builder
argument_list|()
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withCommand
argument_list|(
name|command
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|QueryLifeTimeHook
name|hook
range|:
name|queryHooks
control|)
block|{
name|hook
operator|.
name|afterCompile
argument_list|(
name|qhc
argument_list|,
name|compileError
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Dispatches {@link QueryLifeTimeHook#beforeExecution(QueryLifeTimeHookContext)}.    *    * @param command the Hive command that is being run    * @param hookContext the {@link HookContext} of the command being run    */
name|void
name|runBeforeExecutionHook
parameter_list|(
name|String
name|command
parameter_list|,
name|HookContext
name|hookContext
parameter_list|)
block|{
name|initialize
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|queryHooks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QueryLifeTimeHookContext
name|qhc
init|=
operator|new
name|QueryLifeTimeHookContextImpl
operator|.
name|Builder
argument_list|()
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withCommand
argument_list|(
name|command
argument_list|)
operator|.
name|withHookContext
argument_list|(
name|hookContext
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|QueryLifeTimeHook
name|hook
range|:
name|queryHooks
control|)
block|{
name|hook
operator|.
name|beforeExecution
argument_list|(
name|qhc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Dispatches {@link QueryLifeTimeHook#afterExecution(QueryLifeTimeHookContext, boolean)}.    *    * @param command the Hive command that is being run    * @param hookContext the {@link HookContext} of the command being run    * @param executionError true if there was an error while executing the command, false otherwise    */
name|void
name|runAfterExecutionHook
parameter_list|(
name|String
name|command
parameter_list|,
name|HookContext
name|hookContext
parameter_list|,
name|boolean
name|executionError
parameter_list|)
block|{
name|initialize
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|queryHooks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QueryLifeTimeHookContext
name|qhc
init|=
operator|new
name|QueryLifeTimeHookContextImpl
operator|.
name|Builder
argument_list|()
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withCommand
argument_list|(
name|command
argument_list|)
operator|.
name|withHookContext
argument_list|(
name|hookContext
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|QueryLifeTimeHook
name|hook
range|:
name|queryHooks
control|)
block|{
name|hook
operator|.
name|afterExecution
argument_list|(
name|qhc
argument_list|,
name|executionError
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|ASTNode
name|runPreAnalyzeHooks
parameter_list|(
name|HiveSemanticAnalyzerHookContext
name|hookCtx
parameter_list|,
name|ASTNode
name|tree
parameter_list|)
throws|throws
name|HiveException
block|{
name|initialize
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|HiveSemanticAnalyzerHook
name|hook
range|:
name|saHooks
control|)
block|{
name|tree
operator|=
name|hook
operator|.
name|preAnalyze
argument_list|(
name|hookCtx
argument_list|,
name|tree
argument_list|)
expr_stmt|;
block|}
return|return
name|tree
return|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Error while invoking PreAnalyzeHooks:"
operator|+
name|HiveStringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|hasPreAnalyzeHooks
parameter_list|()
block|{
return|return
operator|!
name|saHooks
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|runPostAnalyzeHooks
parameter_list|(
name|HiveSemanticAnalyzerHookContext
name|hookCtx
parameter_list|,
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|allRootTasks
parameter_list|)
throws|throws
name|HiveException
block|{
name|initialize
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|HiveSemanticAnalyzerHook
name|hook
range|:
name|saHooks
control|)
block|{
name|hook
operator|.
name|postAnalyze
argument_list|(
name|hookCtx
argument_list|,
name|allRootTasks
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Error while invoking PostAnalyzeHooks:"
operator|+
name|HiveStringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|runPreDriverHooks
parameter_list|(
name|HiveDriverRunHookContext
name|hookContext
parameter_list|)
throws|throws
name|HiveException
block|{
name|initialize
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|HiveDriverRunHook
name|driverRunHook
range|:
name|driverRunHooks
control|)
block|{
name|driverRunHook
operator|.
name|preDriverRun
argument_list|(
name|hookContext
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Error while invoking PreDriverHooks:"
operator|+
name|HiveStringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|runPostDriverHooks
parameter_list|(
name|HiveDriverRunHookContext
name|hookContext
parameter_list|)
throws|throws
name|HiveException
block|{
name|initialize
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|HiveDriverRunHook
name|driverRunHook
range|:
name|driverRunHooks
control|)
block|{
name|driverRunHook
operator|.
name|postDriverRun
argument_list|(
name|hookContext
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Error while invoking PostDriverHooks:"
operator|+
name|HiveStringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|runPreHooks
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|HiveException
block|{
name|initialize
argument_list|()
expr_stmt|;
name|invokeGeneralHook
argument_list|(
name|preExecHooks
argument_list|,
name|PerfLogger
operator|.
name|PRE_HOOK
argument_list|,
name|hookContext
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|runPostExecHooks
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|HiveException
block|{
name|initialize
argument_list|()
expr_stmt|;
name|invokeGeneralHook
argument_list|(
name|postExecHooks
argument_list|,
name|PerfLogger
operator|.
name|POST_HOOK
argument_list|,
name|hookContext
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|runFailureHooks
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|HiveException
block|{
name|initialize
argument_list|()
expr_stmt|;
name|invokeGeneralHook
argument_list|(
name|onFailureHooks
argument_list|,
name|PerfLogger
operator|.
name|FAILURE_HOOK
argument_list|,
name|hookContext
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|invokeGeneralHook
parameter_list|(
name|List
argument_list|<
name|ExecuteWithHookContext
argument_list|>
name|hooks
parameter_list|,
name|String
name|prefix
parameter_list|,
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|hooks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
block|{
name|PerfLogger
name|perfLogger
init|=
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
decl_stmt|;
for|for
control|(
name|ExecuteWithHookContext
name|hook
range|:
name|hooks
control|)
block|{
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|prefix
operator|+
name|hook
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hook
operator|.
name|run
argument_list|(
name|hookContext
argument_list|)
expr_stmt|;
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|prefix
operator|+
name|hook
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Error while invoking "
operator|+
name|prefix
operator|+
literal|" hooks: "
operator|+
name|HiveStringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|addLifeTimeHook
parameter_list|(
name|QueryLifeTimeHook
name|hook
parameter_list|)
block|{
name|queryHooks
operator|.
name|add
argument_list|(
name|hook
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addPreHook
parameter_list|(
name|ExecuteWithHookContext
name|hook
parameter_list|)
block|{
name|preExecHooks
operator|.
name|add
argument_list|(
name|hook
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addPostHook
parameter_list|(
name|ExecuteWithHookContext
name|hook
parameter_list|)
block|{
name|postExecHooks
operator|.
name|add
argument_list|(
name|hook
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addOnFailureHook
parameter_list|(
name|ExecuteWithHookContext
name|hook
parameter_list|)
block|{
name|onFailureHooks
operator|.
name|add
argument_list|(
name|hook
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

