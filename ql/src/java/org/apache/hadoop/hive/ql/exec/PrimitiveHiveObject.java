begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_comment
comment|/**  * Encapsulation for a primitive Java Object  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PrimitiveHiveObject
extends|extends
name|HiveObject
block|{
specifier|public
name|PrimitiveHiveObject
parameter_list|(
name|Object
name|javaObject
parameter_list|)
block|{
name|this
operator|.
name|javaObject
operator|=
name|javaObject
expr_stmt|;
block|}
specifier|public
name|SerDeField
name|getFieldFromExpression
parameter_list|(
name|String
name|expr
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Illegal call getFieldFromExpression() on Primitive Object"
argument_list|)
throw|;
block|}
specifier|public
name|HiveObject
name|get
parameter_list|(
name|SerDeField
name|field
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Illegal call get() on Primitive Object"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|SerDeField
argument_list|>
name|getFields
parameter_list|()
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Illegal call getFields() on Primitive Object"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isPrimitive
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|javaObject
operator|==
literal|null
condition|?
literal|""
else|:
name|javaObject
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|javaObject
operator|==
literal|null
condition|?
literal|0
else|:
name|javaObject
operator|.
name|hashCode
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|PrimitiveHiveObject
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|javaObject
operator|==
literal|null
condition|?
operator|(
operator|(
name|PrimitiveHiveObject
operator|)
name|other
operator|)
operator|.
name|javaObject
operator|==
literal|null
else|:
name|javaObject
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|PrimitiveHiveObject
operator|)
name|other
operator|)
operator|.
name|javaObject
argument_list|)
return|;
block|}
block|}
end_class

end_unit

