begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|CorrelationLocalSimulativeReduceSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|InspectableObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardUnionObjectInspector
operator|.
name|StandardUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|dom
operator|.
name|ThisExpression
import|;
end_import

begin_comment
comment|/**  * CorrelationLocalSimulativeReduceSinkOperator simulates a ReduceSinkOperator and sends output to  * another operator (JOIN or GBY). CorrelationLocalSimulativeReduceSinkOperator is used only in  * reduce phase. Basically, it is a bridge from one JOIN or GBY operator to another JOIN or GBY  * operator. A CorrelationLocalSimulativeReduceSinkOperator will take care actions of startGroup and  * endGroup of its succeeding JOIN or GBY operator.  * Example: A query involves a JOIN operator and a GBY operator and the GBY operator consume the  * output of the JOIN operator. In this case, if join keys and group by keys are the same, we do not  * need to shuffle the data again, since data has been already partitioned by the JOIN operator.  * Thus, in CorrelationOptimizer, the ReduceSinkOperator between JOIN and GBY operator will be  * replaced by a CorrelationLocalSimulativeReduceSinkOperator and the JOIN operator and GBY operator  * will be executed in a single reduce phase.  **/
end_comment

begin_class
specifier|public
class|class
name|CorrelationLocalSimulativeReduceSinkOperator
extends|extends
name|BaseReduceSinkOperator
argument_list|<
name|CorrelationLocalSimulativeReduceSinkDesc
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CorrelationLocalSimulativeReduceSinkOperator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|transient
name|TableDesc
name|keyTableDesc
decl_stmt|;
specifier|private
specifier|transient
name|Deserializer
name|inputKeyDeserializer
decl_stmt|;
specifier|private
specifier|transient
name|SerDe
name|inputValueDeserializer
decl_stmt|;
specifier|private
specifier|transient
name|ByteWritable
name|tagWritable
decl_stmt|;
specifier|private
specifier|transient
name|ObjectInspector
name|outputKeyObjectInspector
decl_stmt|;
specifier|private
specifier|transient
name|ObjectInspector
name|outputValueObjectInspector
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|forwardedRow
decl_stmt|;
specifier|private
name|Object
name|keyObject
decl_stmt|;
specifier|private
name|Object
name|valueObject
decl_stmt|;
specifier|private
name|BytesWritable
name|groupKey
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
name|fieldNames
decl_stmt|;
static|static
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fieldNameArray
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Utilities
operator|.
name|ReduceField
name|r
range|:
name|Utilities
operator|.
name|ReduceField
operator|.
name|values
argument_list|()
control|)
block|{
name|fieldNameArray
operator|.
name|add
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fieldNames
operator|=
name|fieldNameArray
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CorrelationLocalSimulativeReduceSinkOperator
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|protected
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|forwardedRow
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|tagByte
operator|=
operator|new
name|byte
index|[
literal|1
index|]
expr_stmt|;
name|tagWritable
operator|=
operator|new
name|ByteWritable
argument_list|()
expr_stmt|;
name|tempInspectableObject
operator|=
operator|new
name|InspectableObject
argument_list|()
expr_stmt|;
name|keyWritable
operator|=
operator|new
name|HiveKey
argument_list|()
expr_stmt|;
assert|assert
name|childOperatorsArray
operator|.
name|length
operator|==
literal|1
assert|;
try|try
block|{
name|keyEval
operator|=
operator|new
name|ExprNodeEvaluator
index|[
name|conf
operator|.
name|getKeyCols
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|e
range|:
name|conf
operator|.
name|getKeyCols
argument_list|()
control|)
block|{
name|keyEval
index|[
name|i
operator|++
index|]
operator|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|numDistributionKeys
operator|=
name|conf
operator|.
name|getNumDistributionKeys
argument_list|()
expr_stmt|;
name|distinctColIndices
operator|=
name|conf
operator|.
name|getDistinctColumnIndices
argument_list|()
expr_stmt|;
name|numDistinctExprs
operator|=
name|distinctColIndices
operator|.
name|size
argument_list|()
expr_stmt|;
name|valueEval
operator|=
operator|new
name|ExprNodeEvaluator
index|[
name|conf
operator|.
name|getValueCols
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|ExprNodeDesc
name|e
range|:
name|conf
operator|.
name|getValueCols
argument_list|()
control|)
block|{
name|valueEval
index|[
name|i
operator|++
index|]
operator|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|tag
operator|=
name|conf
operator|.
name|getTag
argument_list|()
expr_stmt|;
name|tagByte
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
name|tag
expr_stmt|;
name|tagWritable
operator|.
name|set
argument_list|(
name|tagByte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using tag = "
operator|+
name|tag
argument_list|)
expr_stmt|;
name|TableDesc
name|keyTableDesc
init|=
name|conf
operator|.
name|getKeySerializeInfo
argument_list|()
decl_stmt|;
name|keySerializer
operator|=
operator|(
name|Serializer
operator|)
name|keyTableDesc
operator|.
name|getDeserializerClass
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|keySerializer
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|keyTableDesc
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|keyIsText
operator|=
name|keySerializer
operator|.
name|getSerializedClass
argument_list|()
operator|.
name|equals
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|inputKeyDeserializer
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|keyTableDesc
operator|.
name|getDeserializerClass
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|inputKeyDeserializer
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|keyTableDesc
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|outputKeyObjectInspector
operator|=
name|inputKeyDeserializer
operator|.
name|getObjectInspector
argument_list|()
expr_stmt|;
name|TableDesc
name|valueTableDesc
init|=
name|conf
operator|.
name|getValueSerializeInfo
argument_list|()
decl_stmt|;
name|valueSerializer
operator|=
operator|(
name|Serializer
operator|)
name|valueTableDesc
operator|.
name|getDeserializerClass
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|valueSerializer
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|valueTableDesc
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|inputValueDeserializer
operator|=
operator|(
name|SerDe
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|valueTableDesc
operator|.
name|getDeserializerClass
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|inputValueDeserializer
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|valueTableDesc
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|outputValueObjectInspector
operator|=
name|inputValueDeserializer
operator|.
name|getObjectInspector
argument_list|()
expr_stmt|;
name|ObjectInspector
name|rowInspector
init|=
name|inputObjInspectors
index|[
literal|0
index|]
decl_stmt|;
name|keyObjectInspector
operator|=
name|initEvaluatorsAndReturnStruct
argument_list|(
name|keyEval
argument_list|,
name|distinctColIndices
argument_list|,
name|conf
operator|.
name|getOutputKeyColumnNames
argument_list|()
argument_list|,
name|numDistributionKeys
argument_list|,
name|rowInspector
argument_list|)
expr_stmt|;
name|valueObjectInspector
operator|=
name|initEvaluatorsAndReturnStruct
argument_list|(
name|valueEval
argument_list|,
name|conf
operator|.
name|getOutputValueColumnNames
argument_list|()
argument_list|,
name|rowInspector
argument_list|)
expr_stmt|;
name|int
name|numKeys
init|=
name|numDistinctExprs
operator|>
literal|0
condition|?
name|numDistinctExprs
else|:
literal|1
decl_stmt|;
name|int
name|keyLen
init|=
name|numDistinctExprs
operator|>
literal|0
condition|?
name|numDistributionKeys
operator|+
literal|1
else|:
name|numDistributionKeys
decl_stmt|;
name|cachedKeys
operator|=
operator|new
name|Object
index|[
name|numKeys
index|]
index|[
name|keyLen
index|]
expr_stmt|;
name|cachedValues
operator|=
operator|new
name|Object
index|[
name|valueEval
operator|.
name|length
index|]
expr_stmt|;
assert|assert
name|cachedKeys
operator|.
name|length
operator|==
literal|1
assert|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|ois
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|ois
operator|.
name|add
argument_list|(
name|outputKeyObjectInspector
argument_list|)
expr_stmt|;
name|ois
operator|.
name|add
argument_list|(
name|outputValueObjectInspector
argument_list|)
expr_stmt|;
name|ois
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableByteObjectInspector
argument_list|)
expr_stmt|;
name|outputObjInspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|fieldNames
argument_list|)
argument_list|,
name|ois
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Simulative ReduceSink inputObjInspectors"
operator|+
operator|(
operator|(
name|StructObjectInspector
operator|)
name|inputObjInspectors
index|[
literal|0
index|]
operator|)
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Simulative ReduceSink outputObjInspectors "
operator|+
name|this
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getParentOperators
argument_list|()
operator|.
name|indexOf
argument_list|(
name|this
argument_list|)
operator|+
literal|" "
operator|+
operator|(
operator|(
name|StructObjectInspector
operator|)
name|outputObjInspector
operator|)
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|initializeChildren
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|processOp
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
comment|// Evaluate the value
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueEval
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cachedValues
index|[
name|i
index|]
operator|=
name|valueEval
index|[
name|i
index|]
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
comment|// Serialize the value
name|value
operator|=
name|valueSerializer
operator|.
name|serialize
argument_list|(
name|cachedValues
argument_list|,
name|valueObjectInspector
argument_list|)
expr_stmt|;
name|valueObject
operator|=
name|inputValueDeserializer
operator|.
name|deserialize
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// Evaluate the keys
name|Object
index|[]
name|distributionKeys
init|=
operator|new
name|Object
index|[
name|numDistributionKeys
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDistributionKeys
condition|;
name|i
operator|++
control|)
block|{
name|distributionKeys
index|[
name|i
index|]
operator|=
name|keyEval
index|[
name|i
index|]
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numDistinctExprs
operator|>
literal|0
condition|)
block|{
comment|// with distinct key(s)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDistinctExprs
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|distributionKeys
argument_list|,
literal|0
argument_list|,
name|cachedKeys
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|numDistributionKeys
argument_list|)
expr_stmt|;
name|Object
index|[]
name|distinctParameters
init|=
operator|new
name|Object
index|[
name|distinctColIndices
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|distinctParameters
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|distinctParameters
index|[
name|j
index|]
operator|=
name|keyEval
index|[
name|distinctColIndices
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
name|j
argument_list|)
index|]
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|cachedKeys
index|[
name|i
index|]
index|[
name|numDistributionKeys
index|]
operator|=
operator|new
name|StandardUnion
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|,
name|distinctParameters
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// no distinct key
name|System
operator|.
name|arraycopy
argument_list|(
name|distributionKeys
argument_list|,
literal|0
argument_list|,
name|cachedKeys
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|,
name|numDistributionKeys
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cachedKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keyIsText
condition|)
block|{
name|Text
name|key
init|=
operator|(
name|Text
operator|)
name|keySerializer
operator|.
name|serialize
argument_list|(
name|cachedKeys
index|[
name|i
index|]
argument_list|,
name|keyObjectInspector
argument_list|)
decl_stmt|;
name|keyWritable
operator|.
name|set
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Must be BytesWritable
name|BytesWritable
name|key
init|=
operator|(
name|BytesWritable
operator|)
name|keySerializer
operator|.
name|serialize
argument_list|(
name|cachedKeys
index|[
name|i
index|]
argument_list|,
name|keyObjectInspector
argument_list|)
decl_stmt|;
name|keyWritable
operator|.
name|set
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|keyWritable
operator|.
name|equals
argument_list|(
name|groupKey
argument_list|)
condition|)
block|{
try|try
block|{
name|keyObject
operator|=
name|inputKeyDeserializer
operator|.
name|deserialize
argument_list|(
name|keyWritable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Hive Runtime Error: Unable to deserialize reduce input key from "
operator|+
name|Utilities
operator|.
name|formatBinaryString
argument_list|(
name|keyWritable
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|,
name|keyWritable
operator|.
name|getSize
argument_list|()
argument_list|)
operator|+
literal|" with properties "
operator|+
name|keyTableDesc
operator|.
name|getProperties
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|groupKey
operator|==
literal|null
condition|)
block|{
comment|// the first group
name|groupKey
operator|=
operator|new
name|BytesWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// if its child has not been ended, end it
if|if
condition|(
operator|!
name|keyWritable
operator|.
name|equals
argument_list|(
name|childOperatorsArray
index|[
literal|0
index|]
operator|.
name|getBytesWritableGroupKey
argument_list|()
argument_list|)
condition|)
block|{
name|childOperatorsArray
index|[
literal|0
index|]
operator|.
name|endGroup
argument_list|()
expr_stmt|;
block|}
block|}
name|groupKey
operator|.
name|set
argument_list|(
name|keyWritable
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|,
name|keyWritable
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|groupKey
operator|.
name|equals
argument_list|(
name|childOperatorsArray
index|[
literal|0
index|]
operator|.
name|getBytesWritableGroupKey
argument_list|()
argument_list|)
condition|)
block|{
name|childOperatorsArray
index|[
literal|0
index|]
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|childOperatorsArray
index|[
literal|0
index|]
operator|.
name|setGroupKeyObject
argument_list|(
name|keyObject
argument_list|)
expr_stmt|;
name|childOperatorsArray
index|[
literal|0
index|]
operator|.
name|setBytesWritableGroupKey
argument_list|(
name|groupKey
argument_list|)
expr_stmt|;
block|}
block|}
name|forwardedRow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|forwardedRow
operator|.
name|add
argument_list|(
name|keyObject
argument_list|)
expr_stmt|;
name|forwardedRow
operator|.
name|add
argument_list|(
name|valueObject
argument_list|)
expr_stmt|;
name|forwardedRow
operator|.
name|add
argument_list|(
name|tagWritable
argument_list|)
expr_stmt|;
name|forward
argument_list|(
name|forwardedRow
argument_list|,
name|outputObjInspector
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|closeOp
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|abort
condition|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
init|=
name|childOperatorsArray
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|allInitializedParentsAreClosed
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"All parents of "
operator|+
name|child
operator|.
name|getName
argument_list|()
operator|+
literal|" (id: "
operator|+
name|child
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|") has been closed. Invoke its endGroup"
argument_list|)
expr_stmt|;
name|childOperatorsArray
index|[
literal|0
index|]
operator|.
name|endGroup
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|startGroup
parameter_list|()
throws|throws
name|HiveException
block|{
comment|// do nothing
block|}
annotation|@
name|Override
specifier|public
name|void
name|endGroup
parameter_list|()
throws|throws
name|HiveException
block|{
comment|// do nothing
block|}
annotation|@
name|Override
specifier|public
name|void
name|setGroupKeyObject
parameter_list|(
name|Object
name|keyObject
parameter_list|)
block|{
comment|// do nothing
block|}
comment|/**    * @return the name of the operator    */
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getOperatorName
argument_list|()
return|;
block|}
specifier|static
specifier|public
name|String
name|getOperatorName
parameter_list|()
block|{
return|return
literal|"CLSReduceSink"
return|;
block|}
annotation|@
name|Override
specifier|public
name|OperatorType
name|getType
parameter_list|()
block|{
return|return
name|OperatorType
operator|.
name|CORRELATIONLOCALSIMULATIVEREDUCESINK
return|;
block|}
block|}
end_class

end_unit

