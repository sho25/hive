begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|arrow
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|memory
operator|.
name|RootAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ARROW_ROOT_ALLOCATOR_LIMIT
import|;
end_import

begin_comment
comment|/**  * Thread-safe singleton factory for RootAllocator  */
end_comment

begin_enum
specifier|public
enum|enum
name|RootAllocatorFactory
block|{
name|INSTANCE
block|;
specifier|private
name|RootAllocator
name|rootAllocator
decl_stmt|;
name|RootAllocatorFactory
parameter_list|()
block|{   }
specifier|public
specifier|synchronized
name|RootAllocator
name|getRootAllocator
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|rootAllocator
operator|==
literal|null
condition|)
block|{
specifier|final
name|long
name|limit
init|=
name|HiveConf
operator|.
name|getLongVar
argument_list|(
name|conf
argument_list|,
name|HIVE_ARROW_ROOT_ALLOCATOR_LIMIT
argument_list|)
decl_stmt|;
name|rootAllocator
operator|=
operator|new
name|RootAllocator
argument_list|(
name|limit
argument_list|)
expr_stmt|;
block|}
return|return
name|rootAllocator
return|;
block|}
comment|//arrowAllocatorLimit is ignored if an allocator was previously created
specifier|public
specifier|synchronized
name|RootAllocator
name|getOrCreateRootAllocator
parameter_list|(
name|long
name|arrowAllocatorLimit
parameter_list|)
block|{
if|if
condition|(
name|rootAllocator
operator|==
literal|null
condition|)
block|{
name|rootAllocator
operator|=
operator|new
name|RootAllocator
argument_list|(
name|arrowAllocatorLimit
argument_list|)
expr_stmt|;
block|}
return|return
name|rootAllocator
return|;
block|}
block|}
end_enum

end_unit

