begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|correlation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|DemuxOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|correlation
operator|.
name|CorrelationOptimizer
operator|.
name|CorrelationNodeProcCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DemuxDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MuxDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_comment
comment|/**  * QueryPlanTreeTransformation contains static methods used to transform  * the query plan tree (operator tree) based on the correlation we have  * detected by Correlation Optimizer.  */
end_comment

begin_class
specifier|public
class|class
name|QueryPlanTreeTransformation
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|QueryPlanTreeTransformation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|void
name|setNewTag
parameter_list|(
name|IntraQueryCorrelation
name|correlation
parameter_list|,
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|childrenOfDemux
parameter_list|,
name|ReduceSinkOperator
name|rsop
parameter_list|,
name|Map
argument_list|<
name|ReduceSinkOperator
argument_list|,
name|Integer
argument_list|>
name|bottomRSToNewTag
parameter_list|)
throws|throws
name|SemanticException
block|{
name|int
name|newTag
init|=
name|bottomRSToNewTag
operator|.
name|get
argument_list|(
name|rsop
argument_list|)
decl_stmt|;
name|int
name|oldTag
init|=
name|rsop
operator|.
name|getConf
argument_list|()
operator|.
name|getTag
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldTag
operator|==
operator|-
literal|1
condition|)
block|{
comment|// if this child of DemuxOperator does not use tag, we just set the oldTag to 0.
name|oldTag
operator|=
literal|0
expr_stmt|;
block|}
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
init|=
name|CorrelationUtilities
operator|.
name|getSingleChild
argument_list|(
name|rsop
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|childrenOfDemux
operator|.
name|contains
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|childrenOfDemux
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
name|int
name|childIndex
init|=
name|childrenOfDemux
operator|.
name|indexOf
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|correlation
operator|.
name|setNewTag
argument_list|(
name|newTag
argument_list|,
name|oldTag
argument_list|,
name|childIndex
argument_list|)
expr_stmt|;
name|rsop
operator|.
name|getConf
argument_list|()
operator|.
name|setTag
argument_list|(
name|newTag
argument_list|)
expr_stmt|;
block|}
comment|/**    * Based on the correlation, we transform the query plan tree (operator tree).    * In here, we first create DemuxOperator and all bottom ReduceSinkOperators    * (bottom means near TableScanOperaotr) in the correlation will be be    * the parents of the DemuxOperaotr. We also reassign tags to those    * ReduceSinkOperators. Then, we use MuxOperators to replace ReduceSinkOperators    * which are not bottom ones in this correlation.    * Example: The original operator tree is ...    *      JOIN2    *      /    \    *     RS4   RS5    *    /        \    *   GBY1     JOIN1    *    |       /    \    *   RS1     RS2   RS3    * If GBY1, JOIN1, and JOIN2 can be executed in the same reducer    * (optimized by Correlation Optimizer).    * The new operator tree will be ...    *      JOIN2    *        |    *       MUX    *      /   \    *    GBY1  JOIN1    *      \    /    *       DEMUX    *      /  |  \    *     /   |   \    *    /    |    \    *   RS1   RS2   RS3    * @param pCtx    * @param corrCtx    * @param correlation    * @throws SemanticException    */
specifier|protected
specifier|static
name|void
name|applyCorrelation
parameter_list|(
name|ParseContext
name|pCtx
parameter_list|,
name|CorrelationNodeProcCtx
name|corrCtx
parameter_list|,
name|IntraQueryCorrelation
name|correlation
parameter_list|)
throws|throws
name|SemanticException
block|{
specifier|final
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|bottomReduceSinkOperators
init|=
name|correlation
operator|.
name|getBottomReduceSinkOperators
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numReducers
init|=
name|correlation
operator|.
name|getNumReducers
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|childrenOfDemux
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|parentRSsOfDemux
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|childIndexToOriginalNumParents
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TableDesc
argument_list|>
name|keysSerializeInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|TableDesc
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TableDesc
argument_list|>
name|valuessSerializeInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|TableDesc
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ReduceSinkOperator
argument_list|,
name|Integer
argument_list|>
name|bottomRSToNewTag
init|=
operator|new
name|HashMap
argument_list|<
name|ReduceSinkOperator
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|newTag
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ReduceSinkOperator
name|rsop
range|:
name|bottomReduceSinkOperators
control|)
block|{
name|rsop
operator|.
name|getConf
argument_list|()
operator|.
name|setNumReducers
argument_list|(
name|numReducers
argument_list|)
expr_stmt|;
name|bottomRSToNewTag
operator|.
name|put
argument_list|(
name|rsop
argument_list|,
name|newTag
argument_list|)
expr_stmt|;
name|parentRSsOfDemux
operator|.
name|add
argument_list|(
name|rsop
argument_list|)
expr_stmt|;
name|keysSerializeInfos
operator|.
name|add
argument_list|(
name|rsop
operator|.
name|getConf
argument_list|()
operator|.
name|getKeySerializeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|valuessSerializeInfos
operator|.
name|add
argument_list|(
name|rsop
operator|.
name|getConf
argument_list|()
operator|.
name|getValueSerializeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
init|=
name|CorrelationUtilities
operator|.
name|getSingleChild
argument_list|(
name|rsop
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|childrenOfDemux
operator|.
name|contains
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|childrenOfDemux
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|int
name|childIndex
init|=
name|childrenOfDemux
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|childIndexToOriginalNumParents
operator|.
name|put
argument_list|(
name|childIndex
argument_list|,
name|child
operator|.
name|getNumParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|newTag
operator|++
expr_stmt|;
block|}
for|for
control|(
name|ReduceSinkOperator
name|rsop
range|:
name|bottomReduceSinkOperators
control|)
block|{
name|setNewTag
argument_list|(
name|correlation
argument_list|,
name|childrenOfDemux
argument_list|,
name|rsop
argument_list|,
name|bottomRSToNewTag
argument_list|)
expr_stmt|;
block|}
comment|// Create the DemuxOperaotr
name|DemuxDesc
name|demuxDesc
init|=
operator|new
name|DemuxDesc
argument_list|(
name|correlation
operator|.
name|getNewTagToOldTag
argument_list|()
argument_list|,
name|correlation
operator|.
name|getNewTagToChildIndex
argument_list|()
argument_list|,
name|childIndexToOriginalNumParents
argument_list|,
name|keysSerializeInfos
argument_list|,
name|valuessSerializeInfos
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|demuxOp
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
name|demuxDesc
argument_list|)
decl_stmt|;
name|demuxOp
operator|.
name|setChildOperators
argument_list|(
name|childrenOfDemux
argument_list|)
expr_stmt|;
name|demuxOp
operator|.
name|setParentOperators
argument_list|(
name|parentRSsOfDemux
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
range|:
name|childrenOfDemux
control|)
block|{
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|parentsWithMultipleDemux
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasBottomReduceSinkOperators
init|=
literal|false
decl_stmt|;
name|boolean
name|hasNonBottomReduceSinkOperators
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|child
operator|.
name|getParentOperators
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|p
init|=
name|child
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
assert|assert
name|p
operator|instanceof
name|ReduceSinkOperator
assert|;
name|ReduceSinkOperator
name|rsop
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|p
decl_stmt|;
if|if
condition|(
name|bottomReduceSinkOperators
operator|.
name|contains
argument_list|(
name|rsop
argument_list|)
condition|)
block|{
name|hasBottomReduceSinkOperators
operator|=
literal|true
expr_stmt|;
name|parentsWithMultipleDemux
operator|.
name|add
argument_list|(
name|demuxOp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hasNonBottomReduceSinkOperators
operator|=
literal|true
expr_stmt|;
name|parentsWithMultipleDemux
operator|.
name|add
argument_list|(
name|rsop
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasBottomReduceSinkOperators
operator|&&
name|hasNonBottomReduceSinkOperators
condition|)
block|{
name|child
operator|.
name|setParentOperators
argument_list|(
name|parentsWithMultipleDemux
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|child
operator|.
name|setParentOperators
argument_list|(
name|Utilities
operator|.
name|makeList
argument_list|(
name|demuxOp
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
range|:
name|parentRSsOfDemux
control|)
block|{
name|parent
operator|.
name|setChildOperators
argument_list|(
name|Utilities
operator|.
name|makeList
argument_list|(
name|demuxOp
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// replace all ReduceSinkOperators which are not at the bottom of
comment|// this correlation to MuxOperators
name|Set
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|handledRSs
init|=
operator|new
name|HashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ReduceSinkOperator
name|rsop
range|:
name|correlation
operator|.
name|getAllReduceSinkOperators
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|bottomReduceSinkOperators
operator|.
name|contains
argument_list|(
name|rsop
argument_list|)
condition|)
block|{
if|if
condition|(
name|handledRSs
operator|.
name|contains
argument_list|(
name|rsop
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|childOP
init|=
name|CorrelationUtilities
operator|.
name|getSingleChild
argument_list|(
name|rsop
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|childOP
operator|instanceof
name|GroupByOperator
condition|)
block|{
name|CorrelationUtilities
operator|.
name|removeReduceSinkForGroupBy
argument_list|(
name|rsop
argument_list|,
operator|(
name|GroupByOperator
operator|)
name|childOP
argument_list|,
name|pCtx
argument_list|,
name|corrCtx
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|parentsOfMux
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOp
init|=
name|CorrelationUtilities
operator|.
name|getSingleParent
argument_list|(
name|childOP
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|parentsOfMux
operator|.
name|add
argument_list|(
name|parentOp
argument_list|)
expr_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|mux
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
operator|new
name|MuxDesc
argument_list|(
name|parentsOfMux
argument_list|)
argument_list|)
decl_stmt|;
name|mux
operator|.
name|setChildOperators
argument_list|(
name|Utilities
operator|.
name|makeList
argument_list|(
name|childOP
argument_list|)
argument_list|)
expr_stmt|;
name|mux
operator|.
name|setParentOperators
argument_list|(
name|parentsOfMux
argument_list|)
expr_stmt|;
name|childOP
operator|.
name|setParentOperators
argument_list|(
name|Utilities
operator|.
name|makeList
argument_list|(
name|mux
argument_list|)
argument_list|)
expr_stmt|;
name|parentOp
operator|.
name|setChildOperators
argument_list|(
name|Utilities
operator|.
name|makeList
argument_list|(
name|mux
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// childOp is a JoinOperator
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|parentsOfMux
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|siblingOPs
init|=
name|CorrelationUtilities
operator|.
name|findSiblingOperators
argument_list|(
name|rsop
argument_list|)
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
range|:
name|siblingOPs
control|)
block|{
if|if
condition|(
name|op
operator|instanceof
name|DemuxOperator
condition|)
block|{
name|parentsOfMux
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|instanceof
name|ReduceSinkOperator
condition|)
block|{
name|GroupByOperator
name|pGBYm
init|=
name|CorrelationUtilities
operator|.
name|getSingleParent
argument_list|(
name|op
argument_list|,
name|GroupByOperator
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|pGBYm
operator|!=
literal|null
condition|)
block|{
comment|// We get a semi join at here.
comment|// This map-side GroupByOperator needs to be removed
name|CorrelationUtilities
operator|.
name|removeOperator
argument_list|(
name|pGBYm
argument_list|,
name|op
argument_list|,
name|CorrelationUtilities
operator|.
name|getSingleParent
argument_list|(
name|pGBYm
argument_list|,
literal|true
argument_list|)
argument_list|,
name|pCtx
argument_list|)
expr_stmt|;
block|}
name|handledRSs
operator|.
name|add
argument_list|(
operator|(
name|ReduceSinkOperator
operator|)
name|op
argument_list|)
expr_stmt|;
name|parentsOfMux
operator|.
name|add
argument_list|(
name|CorrelationUtilities
operator|.
name|getSingleParent
argument_list|(
name|op
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"An slibing of ReduceSinkOperator is nethier a "
operator|+
literal|"DemuxOperator nor a ReduceSinkOperator"
argument_list|)
throw|;
block|}
block|}
name|MuxDesc
name|muxDesc
init|=
operator|new
name|MuxDesc
argument_list|(
name|siblingOPs
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|mux
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
name|muxDesc
argument_list|)
decl_stmt|;
name|mux
operator|.
name|setChildOperators
argument_list|(
name|Utilities
operator|.
name|makeList
argument_list|(
name|childOP
argument_list|)
argument_list|)
expr_stmt|;
name|mux
operator|.
name|setParentOperators
argument_list|(
name|parentsOfMux
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
range|:
name|parentsOfMux
control|)
block|{
if|if
condition|(
name|op
operator|instanceof
name|DemuxOperator
condition|)
block|{
comment|// op is a DemuxOperator and it directly connects to childOP.
comment|// We will add this MuxOperator between DemuxOperator
comment|// and childOP.
if|if
condition|(
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|contains
argument_list|(
name|childOP
argument_list|)
condition|)
block|{
name|op
operator|.
name|replaceChild
argument_list|(
name|childOP
argument_list|,
name|mux
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// op is not a DemuxOperator, so it should have
comment|// a single child.
name|op
operator|.
name|setChildOperators
argument_list|(
name|Utilities
operator|.
name|makeList
argument_list|(
name|mux
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|childOP
operator|.
name|setParentOperators
argument_list|(
name|Utilities
operator|.
name|makeList
argument_list|(
name|mux
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|ReduceSinkOperator
name|rsop
range|:
name|handledRSs
control|)
block|{
name|rsop
operator|.
name|setChildOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|rsop
operator|.
name|setParentOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|pCtx
operator|.
name|getOpParseCtx
argument_list|()
operator|.
name|remove
argument_list|(
name|rsop
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

