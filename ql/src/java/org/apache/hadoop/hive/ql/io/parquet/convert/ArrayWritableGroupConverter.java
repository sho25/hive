begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|convert
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ArrayWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|io
operator|.
name|ParquetDecodingException
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|schema
operator|.
name|GroupType
import|;
end_import

begin_class
specifier|public
class|class
name|ArrayWritableGroupConverter
extends|extends
name|HiveGroupConverter
block|{
specifier|private
specifier|final
name|Converter
index|[]
name|converters
decl_stmt|;
specifier|private
specifier|final
name|HiveGroupConverter
name|parent
decl_stmt|;
specifier|private
specifier|final
name|int
name|index
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isMap
decl_stmt|;
specifier|private
name|Writable
name|currentValue
decl_stmt|;
specifier|private
name|Writable
index|[]
name|mapPairContainer
decl_stmt|;
specifier|public
name|ArrayWritableGroupConverter
parameter_list|(
specifier|final
name|GroupType
name|groupType
parameter_list|,
specifier|final
name|HiveGroupConverter
name|parent
parameter_list|,
specifier|final
name|int
name|index
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|int
name|count
init|=
name|groupType
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
argument_list|<
literal|1
operator|||
name|count
argument_list|>
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Field count must be either 1 or 2: "
operator|+
name|count
argument_list|)
throw|;
block|}
name|isMap
operator|=
name|count
operator|==
literal|2
expr_stmt|;
name|converters
operator|=
operator|new
name|Converter
index|[
name|count
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|converters
index|[
name|i
index|]
operator|=
name|getConverterFromDescription
argument_list|(
name|groupType
operator|.
name|getType
argument_list|(
name|i
argument_list|)
argument_list|,
name|i
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Converter
name|getConverter
parameter_list|(
specifier|final
name|int
name|fieldIndex
parameter_list|)
block|{
return|return
name|converters
index|[
name|fieldIndex
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
name|isMap
condition|)
block|{
name|mapPairContainer
operator|=
operator|new
name|Writable
index|[
literal|2
index|]
expr_stmt|;
block|}
name|currentValue
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|end
parameter_list|()
block|{
if|if
condition|(
name|isMap
condition|)
block|{
name|currentValue
operator|=
operator|new
name|ArrayWritable
argument_list|(
name|Writable
operator|.
name|class
argument_list|,
name|mapPairContainer
argument_list|)
expr_stmt|;
block|}
name|parent
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|currentValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|set
parameter_list|(
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|Writable
name|value
parameter_list|)
block|{
if|if
condition|(
name|index
operator|!=
literal|0
operator|&&
name|mapPairContainer
operator|==
literal|null
operator|||
name|index
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|ParquetDecodingException
argument_list|(
literal|"Repeated group can only have one or two fields for maps."
operator|+
literal|" Not allowed to set for the index : "
operator|+
name|index
argument_list|)
throw|;
block|}
if|if
condition|(
name|isMap
condition|)
block|{
name|mapPairContainer
index|[
name|index
index|]
operator|=
name|value
expr_stmt|;
block|}
else|else
block|{
name|currentValue
operator|=
name|value
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|add
parameter_list|(
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|Writable
name|value
parameter_list|)
block|{
name|set
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

