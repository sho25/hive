begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
operator|.
name|ObjectInspectorCopyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|VoidObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_comment
comment|/**  * Util functions for GenericUDF classes.  */
end_comment

begin_class
specifier|public
class|class
name|GenericUDFUtils
block|{
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GenericUDFUtils
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Checks if b is the first byte of a UTF-8 character.    *     */
specifier|public
specifier|static
name|boolean
name|isUtfStartByte
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
return|return
operator|(
name|b
operator|&
literal|0xC0
operator|)
operator|!=
literal|0x80
return|;
block|}
comment|/**    * This class helps to find the return ObjectInspector for a GenericUDF.    *     * In many cases like CASE and IF, the GenericUDF is returning a value out    * of several possibilities.  However these possibilities may not always     * have the same ObjectInspector.    *     * This class will help detect whether all possibilities have exactly the    * same ObjectInspector.  If not, then we need to convert the Objects to    * the same ObjectInspector.    *     * A special case is when some values are constant NULL. In this case we     * can use the same ObjectInspector.    */
specifier|public
specifier|static
class|class
name|ReturnObjectInspectorResolver
block|{
name|boolean
name|allowTypeConversion
decl_stmt|;
name|ObjectInspector
name|returnObjectInspector
decl_stmt|;
comment|// We create converters beforehand, so that the converters can reuse the
comment|// same object for returning conversion results.
name|HashMap
argument_list|<
name|ObjectInspector
argument_list|,
name|Converter
argument_list|>
name|converters
decl_stmt|;
specifier|public
name|ReturnObjectInspectorResolver
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ReturnObjectInspectorResolver
parameter_list|(
name|boolean
name|allowTypeConversion
parameter_list|)
block|{
name|this
operator|.
name|allowTypeConversion
operator|=
name|allowTypeConversion
expr_stmt|;
block|}
comment|/**      * Update returnObjectInspector and valueInspectorsAreTheSame based on the      * ObjectInspector seen.      * @return false if there is a type mismatch      */
specifier|public
name|boolean
name|update
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|)
throws|throws
name|UDFArgumentTypeException
block|{
if|if
condition|(
name|oi
operator|instanceof
name|VoidObjectInspector
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|returnObjectInspector
operator|==
literal|null
condition|)
block|{
comment|// The first argument, just set it.
name|returnObjectInspector
operator|=
name|oi
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|returnObjectInspector
operator|==
name|oi
condition|)
block|{
comment|// The new ObjectInspector is the same as the old one, directly return true
return|return
literal|true
return|;
block|}
name|TypeInfo
name|oiTypeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|oi
argument_list|)
decl_stmt|;
name|TypeInfo
name|rTypeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|returnObjectInspector
argument_list|)
decl_stmt|;
if|if
condition|(
name|oiTypeInfo
operator|==
name|rTypeInfo
condition|)
block|{
comment|// Convert everything to writable, if types of arguments are the same,
comment|// but ObjectInspectors are different.
name|returnObjectInspector
operator|=
name|ObjectInspectorUtils
operator|.
name|getStandardObjectInspector
argument_list|(
name|returnObjectInspector
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|allowTypeConversion
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Types are different, we need to check whether we can convert them to
comment|// a common base class or not.
name|TypeInfo
name|commonTypeInfo
init|=
name|FunctionRegistry
operator|.
name|getCommonClass
argument_list|(
name|oiTypeInfo
argument_list|,
name|rTypeInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|commonTypeInfo
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|returnObjectInspector
operator|=
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|commonTypeInfo
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * Returns the ObjectInspector of the return value.      */
specifier|public
name|ObjectInspector
name|get
parameter_list|()
block|{
return|return
name|returnObjectInspector
return|;
block|}
comment|/**      * Convert the return Object if necessary (when the ObjectInspectors of      * different possibilities are not all the same).      */
specifier|public
name|Object
name|convertIfNecessary
parameter_list|(
name|Object
name|o
parameter_list|,
name|ObjectInspector
name|oi
parameter_list|)
block|{
name|Object
name|converted
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|oi
operator|==
name|returnObjectInspector
condition|)
block|{
name|converted
operator|=
name|o
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|converters
operator|==
literal|null
condition|)
block|{
name|converters
operator|=
operator|new
name|HashMap
argument_list|<
name|ObjectInspector
argument_list|,
name|Converter
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|Converter
name|converter
init|=
name|converters
operator|.
name|get
argument_list|(
name|oi
argument_list|)
decl_stmt|;
if|if
condition|(
name|converter
operator|==
literal|null
condition|)
block|{
name|converter
operator|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|oi
argument_list|,
name|returnObjectInspector
argument_list|)
expr_stmt|;
name|converters
operator|.
name|put
argument_list|(
name|oi
argument_list|,
name|converter
argument_list|)
expr_stmt|;
block|}
name|converted
operator|=
name|converter
operator|.
name|convert
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
return|return
name|converted
return|;
block|}
block|}
comment|/**    * Convert primitive parameters between Java and Writable when needed.     */
specifier|public
specifier|static
class|class
name|PrimitiveConversionHelper
block|{
specifier|private
name|Method
name|m
decl_stmt|;
specifier|private
name|ObjectInspector
index|[]
name|parameters
decl_stmt|;
name|Converter
index|[]
name|converters
decl_stmt|;
name|Object
index|[]
name|convertedParameters
decl_stmt|;
comment|/**      * Create a PrimitiveConversionHelper for Method m.  The ObjectInspector's      * input parameters are specified in parameters.      */
specifier|public
name|PrimitiveConversionHelper
parameter_list|(
name|Method
name|m
parameter_list|,
name|ObjectInspector
index|[]
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|m
operator|=
name|m
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
name|Type
index|[]
name|acceptedParameters
init|=
name|m
operator|.
name|getGenericParameterTypes
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|parameters
operator|.
name|length
operator|==
name|acceptedParameters
operator|.
name|length
operator|)
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ObjectInspector
name|acceptedParameterOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveObjectInspectorFromClass
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|acceptedParameters
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|Converter
name|pc
init|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|parameters
index|[
name|i
index|]
argument_list|,
name|acceptedParameterOI
argument_list|)
decl_stmt|;
comment|// Conversion is needed?
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|converters
operator|==
literal|null
condition|)
block|{
comment|// init converters only if needed.
name|converters
operator|=
operator|new
name|Converter
index|[
name|parameters
operator|.
name|length
index|]
expr_stmt|;
name|convertedParameters
operator|=
operator|new
name|Object
index|[
name|parameters
operator|.
name|length
index|]
expr_stmt|;
block|}
name|converters
index|[
name|i
index|]
operator|=
name|pc
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Object
index|[]
name|convertIfNecessary
parameter_list|(
name|Object
modifier|...
name|parameters
parameter_list|)
block|{
if|if
condition|(
name|converters
operator|==
literal|null
condition|)
block|{
return|return
name|parameters
return|;
block|}
else|else
block|{
assert|assert
operator|(
name|parameters
operator|.
name|length
operator|==
name|convertedParameters
operator|.
name|length
operator|)
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|convertedParameters
index|[
name|i
index|]
operator|=
name|converters
index|[
name|i
index|]
operator|==
literal|null
condition|?
name|parameters
index|[
name|i
index|]
else|:
name|converters
index|[
name|i
index|]
operator|.
name|convert
argument_list|(
name|parameters
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|convertedParameters
return|;
block|}
block|}
block|}
empty_stmt|;
block|}
end_class

end_unit

