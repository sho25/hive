begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExprNodeEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
operator|.
name|ObjectInspectorCopyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|VoidObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_comment
comment|/**  * Util functions for GenericUDF classes.  */
end_comment

begin_class
specifier|public
class|class
name|GenericUDFUtils
block|{
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GenericUDFUtils
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * This class helps to find the return ObjectInspector for a GenericUDF.    *     * In many cases like CASE and IF, the GenericUDF is returning a value out    * of several possibilities.  However these possibilities may not always     * have the same ObjectInspector, although they should have the same     * TypeInfo.    *     * This class will help detect whether all possibilities have exactly the    * same ObjectInspector.  If not, then we need to convert the Objects to    * the same ObjectInspector.    *     * A special case is when some values are constant NULL. In this case we     * can use the same ObjectInspector.    */
specifier|public
specifier|static
class|class
name|ReturnObjectInspectorResolver
block|{
name|boolean
name|valueInspectorsAreTheSame
decl_stmt|;
name|ObjectInspector
name|returnObjectInspector
decl_stmt|;
name|ReturnObjectInspectorResolver
parameter_list|()
block|{
name|valueInspectorsAreTheSame
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Update returnObjectInspector and valueInspectorsAreTheSame based on the      * ObjectInspector seen.      * @return false if there is a type mismatch      */
specifier|public
name|boolean
name|update
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|)
throws|throws
name|UDFArgumentTypeException
block|{
if|if
condition|(
operator|!
operator|(
name|oi
operator|instanceof
name|VoidObjectInspector
operator|)
condition|)
block|{
if|if
condition|(
name|returnObjectInspector
operator|==
literal|null
condition|)
block|{
name|returnObjectInspector
operator|=
name|oi
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|oi
argument_list|)
operator|!=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|returnObjectInspector
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|oi
argument_list|)
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|returnObjectInspector
argument_list|)
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|valueInspectorsAreTheSame
operator|=
name|valueInspectorsAreTheSame
operator|&&
name|oi
operator|==
name|returnObjectInspector
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Returns the ObjectInspector of the return value.      */
specifier|public
name|ObjectInspector
name|get
parameter_list|()
block|{
return|return
name|valueInspectorsAreTheSame
condition|?
name|returnObjectInspector
else|:
name|ObjectInspectorUtils
operator|.
name|getStandardObjectInspector
argument_list|(
name|returnObjectInspector
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
return|;
block|}
comment|/**      * Convert the return Object if necessary (when the ObjectInspectors of      * different possibilities are not all the same).      */
specifier|public
name|Object
name|convertIfNecessary
parameter_list|(
name|Object
name|o
parameter_list|,
name|ObjectInspector
name|oi
parameter_list|)
block|{
if|if
condition|(
name|valueInspectorsAreTheSame
operator|||
name|oi
operator|instanceof
name|VoidObjectInspector
condition|)
block|{
return|return
name|o
return|;
block|}
else|else
block|{
return|return
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|o
argument_list|,
name|oi
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * This class helps to make sure the TypeInfo of different possibilities    * of the return values are all the same.     */
specifier|public
specifier|static
class|class
name|ReturnTypeInfoResolver
block|{
name|TypeInfo
name|returnTypeInfo
init|=
literal|null
decl_stmt|;
comment|/**      * Update the return TypeInfo based on the new value TypeInfo.      * @return  false if there is a type mismatch      */
specifier|public
name|boolean
name|updateReturnTypeInfo
parameter_list|(
name|TypeInfo
name|newValueTypeInfo
parameter_list|)
throws|throws
name|UDFArgumentTypeException
block|{
if|if
condition|(
name|newValueTypeInfo
operator|==
name|TypeInfoFactory
operator|.
name|voidTypeInfo
condition|)
block|{
comment|// do nothing
block|}
elseif|else
if|if
condition|(
name|returnTypeInfo
operator|==
literal|null
condition|)
block|{
name|returnTypeInfo
operator|=
name|newValueTypeInfo
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|returnTypeInfo
operator|!=
name|newValueTypeInfo
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// do nothing
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|TypeInfo
name|getReturnTypeInfo
parameter_list|()
block|{
return|return
name|returnTypeInfo
return|;
block|}
block|}
block|}
end_class

end_unit

