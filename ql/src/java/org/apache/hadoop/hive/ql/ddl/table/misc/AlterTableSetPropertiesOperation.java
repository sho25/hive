begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|misc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|BooleanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|AbstractAlterTableOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|PartitionIterable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LoadMultiFilesDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MoveWork
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Operation process of setting properties of a table.  */
end_comment

begin_class
specifier|public
class|class
name|AlterTableSetPropertiesOperation
extends|extends
name|AbstractAlterTableOperation
block|{
specifier|private
specifier|final
name|AlterTableSetPropertiesDesc
name|desc
decl_stmt|;
specifier|public
name|AlterTableSetPropertiesOperation
parameter_list|(
name|DDLOperationContext
name|context
parameter_list|,
name|AlterTableSetPropertiesDesc
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|this
operator|.
name|desc
operator|=
name|desc
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doAlteration
parameter_list|(
name|Table
name|table
parameter_list|,
name|Partition
name|partition
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|StatsSetupConst
operator|.
name|USER
operator|.
name|equals
argument_list|(
name|environmentContext
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|StatsSetupConst
operator|.
name|STATS_GENERATED
argument_list|)
argument_list|)
condition|)
block|{
name|environmentContext
operator|.
name|getProperties
argument_list|()
operator|.
name|remove
argument_list|(
name|StatsSetupConst
operator|.
name|DO_NOT_UPDATE_STATS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|partition
operator|!=
literal|null
condition|)
block|{
name|partition
operator|.
name|getTPartition
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|putAll
argument_list|(
name|desc
operator|.
name|getProps
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|isFromMmTable
init|=
name|AcidUtils
operator|.
name|isInsertOnlyTable
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
name|Boolean
name|isToMmTable
init|=
name|AcidUtils
operator|.
name|isToInsertOnlyTable
argument_list|(
name|table
argument_list|,
name|desc
operator|.
name|getProps
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isFromMmTable
operator|&&
name|BooleanUtils
operator|.
name|isTrue
argument_list|(
name|isToMmTable
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|HIVE_MM_ALLOW_ORIGINALS
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|mmTasks
init|=
name|generateAddMmTasks
argument_list|(
name|table
argument_list|,
name|desc
operator|.
name|getWriteId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
argument_list|>
name|mmTask
range|:
name|mmTasks
control|)
block|{
name|context
operator|.
name|getTask
argument_list|()
operator|.
name|addDependentTask
argument_list|(
name|mmTask
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PartitionIterable
name|parts
init|=
operator|new
name|PartitionIterable
argument_list|(
name|context
operator|.
name|getDb
argument_list|()
argument_list|,
name|table
argument_list|,
literal|null
argument_list|,
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|METASTORE_BATCH_RETRIEVE_MAX
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|checkMmLb
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|checkMmLb
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|isFromMmTable
operator|&&
name|BooleanUtils
operator|.
name|isFalse
argument_list|(
name|isToMmTable
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Cannot convert an ACID table to non-ACID"
argument_list|)
throw|;
block|}
comment|// Converting to/from external table
name|String
name|externalProp
init|=
name|desc
operator|.
name|getProps
argument_list|()
operator|.
name|get
argument_list|(
literal|"EXTERNAL"
argument_list|)
decl_stmt|;
if|if
condition|(
name|externalProp
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|externalProp
argument_list|)
operator|&&
name|table
operator|.
name|getTableType
argument_list|()
operator|==
name|TableType
operator|.
name|MANAGED_TABLE
condition|)
block|{
name|table
operator|.
name|setTableType
argument_list|(
name|TableType
operator|.
name|EXTERNAL_TABLE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|externalProp
argument_list|)
operator|&&
name|table
operator|.
name|getTableType
argument_list|()
operator|==
name|TableType
operator|.
name|EXTERNAL_TABLE
condition|)
block|{
name|table
operator|.
name|setTableType
argument_list|(
name|TableType
operator|.
name|MANAGED_TABLE
argument_list|)
expr_stmt|;
block|}
block|}
name|table
operator|.
name|getTTable
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|putAll
argument_list|(
name|desc
operator|.
name|getProps
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|generateAddMmTasks
parameter_list|(
name|Table
name|table
parameter_list|,
name|Long
name|writeId
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// We will move all the files in the table/partition directories into the first MM
comment|// directory, then commit the first write ID.
if|if
condition|(
name|writeId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal error - write ID not set for MM conversion"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Path
argument_list|>
name|sources
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|targets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|stmtId
init|=
literal|0
decl_stmt|;
name|String
name|mmDir
init|=
name|AcidUtils
operator|.
name|deltaSubdir
argument_list|(
name|writeId
argument_list|,
name|writeId
argument_list|,
name|stmtId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PartitionIterable
name|parts
init|=
operator|new
name|PartitionIterable
argument_list|(
name|context
operator|.
name|getDb
argument_list|()
argument_list|,
name|table
argument_list|,
literal|null
argument_list|,
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|METASTORE_BATCH_RETRIEVE_MAX
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|checkMmLb
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|Path
name|source
init|=
name|part
operator|.
name|getDataLocation
argument_list|()
decl_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
name|source
argument_list|,
name|mmDir
argument_list|)
decl_stmt|;
name|sources
operator|.
name|add
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|targets
operator|.
name|add
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|Utilities
operator|.
name|FILE_OP_LOGGER
operator|.
name|trace
argument_list|(
literal|"Will move "
operator|+
name|source
operator|+
literal|" to "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|checkMmLb
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Path
name|source
init|=
name|table
operator|.
name|getDataLocation
argument_list|()
decl_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
name|source
argument_list|,
name|mmDir
argument_list|)
decl_stmt|;
name|sources
operator|.
name|add
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|targets
operator|.
name|add
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|Utilities
operator|.
name|FILE_OP_LOGGER
operator|.
name|trace
argument_list|(
literal|"Will move "
operator|+
name|source
operator|+
literal|" to "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
comment|// Don't set inputs and outputs - the locks have already been taken so it's pointless.
name|MoveWork
name|mw
init|=
operator|new
name|MoveWork
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|mw
operator|.
name|setMultiFilesDesc
argument_list|(
operator|new
name|LoadMultiFilesDesc
argument_list|(
name|sources
argument_list|,
name|targets
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Lists
operator|.
expr|<
name|Task
argument_list|<
name|?
argument_list|>
operator|>
name|newArrayList
argument_list|(
name|TaskFactory
operator|.
name|get
argument_list|(
name|mw
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|checkMmLb
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|table
operator|.
name|isStoredAsSubDirectories
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// TODO [MM gap?]: by design; no-one seems to use LB tables. They will work, but not convert.
comment|//                 It's possible to work around this by re-creating and re-inserting the table.
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Converting list bucketed tables stored as subdirectories "
operator|+
literal|" to MM is not supported. Please re-create a table in the desired format."
argument_list|)
throw|;
block|}
specifier|private
name|void
name|checkMmLb
parameter_list|(
name|Partition
name|partition
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|partition
operator|.
name|isStoredAsSubDirectories
argument_list|()
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Converting list bucketed tables stored as subdirectories "
operator|+
literal|" to MM is not supported. Please re-create a table in the desired format."
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

