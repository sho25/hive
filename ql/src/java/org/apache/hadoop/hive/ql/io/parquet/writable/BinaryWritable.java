begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|writable
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|Binary
import|;
end_import

begin_comment
comment|/**  *  * A Wrapper to support constructor with Binary and String  *  * TODO : remove it, and call BytesWritable with the getBytes() in HIVE-6366  *  */
end_comment

begin_class
specifier|public
class|class
name|BinaryWritable
implements|implements
name|Writable
block|{
specifier|private
name|Binary
name|binary
decl_stmt|;
specifier|public
name|BinaryWritable
parameter_list|(
specifier|final
name|Binary
name|binary
parameter_list|)
block|{
name|this
operator|.
name|binary
operator|=
name|binary
expr_stmt|;
block|}
specifier|public
name|Binary
name|getBinary
parameter_list|()
block|{
return|return
name|binary
return|;
block|}
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
return|return
name|binary
operator|.
name|getBytes
argument_list|()
return|;
block|}
specifier|public
name|String
name|getString
parameter_list|()
block|{
return|return
name|binary
operator|.
name|toStringUsingUTF8
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|input
operator|.
name|readInt
argument_list|()
index|]
decl_stmt|;
name|input
operator|.
name|readFully
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|binary
operator|=
name|Binary
operator|.
name|fromByteArray
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|output
operator|.
name|writeInt
argument_list|(
name|binary
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|binary
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|binary
operator|==
literal|null
condition|?
literal|0
else|:
name|binary
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|BinaryWritable
condition|)
block|{
specifier|final
name|BinaryWritable
name|other
init|=
operator|(
name|BinaryWritable
operator|)
name|obj
decl_stmt|;
return|return
name|binary
operator|.
name|equals
argument_list|(
name|other
operator|.
name|binary
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
class|class
name|DicBinaryWritable
extends|extends
name|BinaryWritable
block|{
specifier|private
specifier|final
name|String
name|string
decl_stmt|;
specifier|public
name|DicBinaryWritable
parameter_list|(
name|Binary
name|binary
parameter_list|,
name|String
name|string
parameter_list|)
block|{
name|super
argument_list|(
name|binary
argument_list|)
expr_stmt|;
name|this
operator|.
name|string
operator|=
name|string
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getString
parameter_list|()
block|{
return|return
name|string
return|;
block|}
block|}
block|}
end_class

end_unit

