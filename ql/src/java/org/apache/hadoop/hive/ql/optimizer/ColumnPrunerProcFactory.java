begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|CommonJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FilterOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|LimitOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ScriptOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDTFOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UnionOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|OpParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|RowResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|aggregationDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|exprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|groupByDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|joinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|reduceSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|selectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|tableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|tableScanDesc
import|;
end_import

begin_comment
comment|/**  * Factory for generating the different node processors used by ColumnPruner.  */
end_comment

begin_class
specifier|public
class|class
name|ColumnPrunerProcFactory
block|{
comment|/**    * Node Processor for Column Pruning on Filter Operators.    */
specifier|public
specifier|static
class|class
name|ColumnPrunerFilterProc
implements|implements
name|NodeProcessor
block|{
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|FilterOperator
name|op
init|=
operator|(
name|FilterOperator
operator|)
name|nd
decl_stmt|;
name|ColumnPrunerProcCtx
name|cppCtx
init|=
operator|(
name|ColumnPrunerProcCtx
operator|)
name|ctx
decl_stmt|;
name|exprNodeDesc
name|condn
init|=
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getPredicate
argument_list|()
decl_stmt|;
comment|// get list of columns used in the filter
name|List
argument_list|<
name|String
argument_list|>
name|cl
init|=
name|condn
operator|.
name|getCols
argument_list|()
decl_stmt|;
comment|// merge it with the downstream col list
name|cppCtx
operator|.
name|getPrunedColLists
argument_list|()
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|Utilities
operator|.
name|mergeUniqElems
argument_list|(
name|cppCtx
operator|.
name|genColLists
argument_list|(
name|op
argument_list|)
argument_list|,
name|cl
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Factory method to get the ColumnPrunerFilterProc class.    * @return ColumnPrunerFilterProc    */
specifier|public
specifier|static
name|ColumnPrunerFilterProc
name|getFilterProc
parameter_list|()
block|{
return|return
operator|new
name|ColumnPrunerFilterProc
argument_list|()
return|;
block|}
comment|/**    * Node Processor for Column Pruning on Group By Operators.    */
specifier|public
specifier|static
class|class
name|ColumnPrunerGroupByProc
implements|implements
name|NodeProcessor
block|{
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|GroupByOperator
name|op
init|=
operator|(
name|GroupByOperator
operator|)
name|nd
decl_stmt|;
name|ColumnPrunerProcCtx
name|cppCtx
init|=
operator|(
name|ColumnPrunerProcCtx
operator|)
name|ctx
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colLists
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|groupByDesc
name|conf
init|=
name|op
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
name|keys
init|=
name|conf
operator|.
name|getKeys
argument_list|()
decl_stmt|;
for|for
control|(
name|exprNodeDesc
name|key
range|:
name|keys
control|)
name|colLists
operator|=
name|Utilities
operator|.
name|mergeUniqElems
argument_list|(
name|colLists
argument_list|,
name|key
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|aggregationDesc
argument_list|>
name|aggrs
init|=
name|conf
operator|.
name|getAggregators
argument_list|()
decl_stmt|;
for|for
control|(
name|aggregationDesc
name|aggr
range|:
name|aggrs
control|)
block|{
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
name|params
init|=
name|aggr
operator|.
name|getParameters
argument_list|()
decl_stmt|;
for|for
control|(
name|exprNodeDesc
name|param
range|:
name|params
control|)
name|colLists
operator|=
name|Utilities
operator|.
name|mergeUniqElems
argument_list|(
name|colLists
argument_list|,
name|param
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cppCtx
operator|.
name|getPrunedColLists
argument_list|()
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|colLists
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Factory method to get the ColumnPrunerGroupByProc class.    * @return ColumnPrunerGroupByProc    */
specifier|public
specifier|static
name|ColumnPrunerGroupByProc
name|getGroupByProc
parameter_list|()
block|{
return|return
operator|new
name|ColumnPrunerGroupByProc
argument_list|()
return|;
block|}
comment|/**    * The Default Node Processor for Column Pruning.    */
specifier|public
specifier|static
class|class
name|ColumnPrunerDefaultProc
implements|implements
name|NodeProcessor
block|{
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ColumnPrunerProcCtx
name|cppCtx
init|=
operator|(
name|ColumnPrunerProcCtx
operator|)
name|ctx
decl_stmt|;
name|cppCtx
operator|.
name|getPrunedColLists
argument_list|()
operator|.
name|put
argument_list|(
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
operator|)
name|nd
argument_list|,
name|cppCtx
operator|.
name|genColLists
argument_list|(
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
operator|)
name|nd
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Factory method to get the ColumnPrunerDefaultProc class.    * @return ColumnPrunerDefaultProc    */
specifier|public
specifier|static
name|ColumnPrunerDefaultProc
name|getDefaultProc
parameter_list|()
block|{
return|return
operator|new
name|ColumnPrunerDefaultProc
argument_list|()
return|;
block|}
comment|/**    * The Node Processor for Column Pruning on Table Scan Operators. It will store    * needed columns in tableScanDesc.    */
specifier|public
specifier|static
class|class
name|ColumnPrunerTableScanProc
implements|implements
name|NodeProcessor
block|{
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TableScanOperator
name|scanOp
init|=
operator|(
name|TableScanOperator
operator|)
name|nd
decl_stmt|;
name|ColumnPrunerProcCtx
name|cppCtx
init|=
operator|(
name|ColumnPrunerProcCtx
operator|)
name|ctx
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cols
init|=
name|cppCtx
operator|.
name|genColLists
argument_list|(
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
operator|)
name|nd
argument_list|)
decl_stmt|;
name|cppCtx
operator|.
name|getPrunedColLists
argument_list|()
operator|.
name|put
argument_list|(
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
operator|)
name|nd
argument_list|,
name|cols
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|needed_columns
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|RowResolver
name|inputRR
init|=
name|cppCtx
operator|.
name|getOpToParseCtxMap
argument_list|()
operator|.
name|get
argument_list|(
name|scanOp
argument_list|)
operator|.
name|getRR
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|position
init|=
name|inputRR
operator|.
name|getPosition
argument_list|(
name|cols
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|needed_columns
operator|.
name|add
argument_list|(
name|position
argument_list|)
expr_stmt|;
block|}
name|scanOp
operator|.
name|setNeededColumnIDs
argument_list|(
name|needed_columns
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Factory method to get the ColumnPrunerDefaultProc class.    * @return ColumnPrunerTableScanProc    */
specifier|public
specifier|static
name|ColumnPrunerTableScanProc
name|getTableScanProc
parameter_list|()
block|{
return|return
operator|new
name|ColumnPrunerTableScanProc
argument_list|()
return|;
block|}
comment|/**    * The Node Processor for Column Pruning on Reduce Sink Operators.    */
specifier|public
specifier|static
class|class
name|ColumnPrunerReduceSinkProc
implements|implements
name|NodeProcessor
block|{
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ReduceSinkOperator
name|op
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|nd
decl_stmt|;
name|ColumnPrunerProcCtx
name|cppCtx
init|=
operator|(
name|ColumnPrunerProcCtx
operator|)
name|ctx
decl_stmt|;
name|HashMap
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|,
name|OpParseContext
argument_list|>
name|opToParseCtxMap
init|=
name|cppCtx
operator|.
name|getOpToParseCtxMap
argument_list|()
decl_stmt|;
name|RowResolver
name|redSinkRR
init|=
name|opToParseCtxMap
operator|.
name|get
argument_list|(
name|op
argument_list|)
operator|.
name|getRR
argument_list|()
decl_stmt|;
name|reduceSinkDesc
name|conf
init|=
name|op
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|childOperators
init|=
name|op
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|parentOperators
init|=
name|op
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colLists
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
name|keys
init|=
name|conf
operator|.
name|getKeyCols
argument_list|()
decl_stmt|;
for|for
control|(
name|exprNodeDesc
name|key
range|:
name|keys
control|)
name|colLists
operator|=
name|Utilities
operator|.
name|mergeUniqElems
argument_list|(
name|colLists
argument_list|,
name|key
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|childOperators
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
operator|&&
operator|(
name|childOperators
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|JoinOperator
operator|)
condition|)
block|{
assert|assert
name|parentOperators
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|par
init|=
name|parentOperators
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|JoinOperator
name|childJoin
init|=
operator|(
name|JoinOperator
operator|)
name|childOperators
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RowResolver
name|parRR
init|=
name|opToParseCtxMap
operator|.
name|get
argument_list|(
name|par
argument_list|)
operator|.
name|getRR
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|childJoinCols
init|=
name|cppCtx
operator|.
name|getJoinPrunedColLists
argument_list|()
operator|.
name|get
argument_list|(
name|childJoin
argument_list|)
operator|.
name|get
argument_list|(
operator|(
name|byte
operator|)
name|conf
operator|.
name|getTag
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
index|[]
name|flags
init|=
operator|new
name|boolean
index|[
name|conf
operator|.
name|getValueCols
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|flags
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|flags
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|childJoinCols
operator|!=
literal|null
operator|&&
name|childJoinCols
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|exprNodeDesc
argument_list|>
name|exprMap
init|=
name|op
operator|.
name|getColumnExprMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|childCol
range|:
name|childJoinCols
control|)
block|{
name|exprNodeDesc
name|desc
init|=
name|exprMap
operator|.
name|get
argument_list|(
name|childCol
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|conf
operator|.
name|getValueCols
argument_list|()
operator|.
name|indexOf
argument_list|(
name|desc
argument_list|)
decl_stmt|;
name|flags
index|[
name|index
index|]
operator|=
literal|true
expr_stmt|;
name|String
index|[]
name|nm
init|=
name|redSinkRR
operator|.
name|reverseLookup
argument_list|(
name|childCol
argument_list|)
decl_stmt|;
if|if
condition|(
name|nm
operator|!=
literal|null
condition|)
block|{
name|ColumnInfo
name|cInfo
init|=
name|parRR
operator|.
name|get
argument_list|(
name|nm
index|[
literal|0
index|]
argument_list|,
name|nm
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|colLists
operator|.
name|contains
argument_list|(
name|cInfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
condition|)
name|colLists
operator|.
name|add
argument_list|(
name|cInfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|colLists
argument_list|)
expr_stmt|;
name|pruneReduceSinkOperator
argument_list|(
name|flags
argument_list|,
name|op
argument_list|,
name|cppCtx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Reduce Sink contains the columns needed - no need to aggregate from children
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
name|vals
init|=
name|conf
operator|.
name|getValueCols
argument_list|()
decl_stmt|;
for|for
control|(
name|exprNodeDesc
name|val
range|:
name|vals
control|)
name|colLists
operator|=
name|Utilities
operator|.
name|mergeUniqElems
argument_list|(
name|colLists
argument_list|,
name|val
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cppCtx
operator|.
name|getPrunedColLists
argument_list|()
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|colLists
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * The Factory method to get ColumnPrunerReduceSinkProc class.    * @return ColumnPrunerReduceSinkProc    */
specifier|public
specifier|static
name|ColumnPrunerReduceSinkProc
name|getReduceSinkProc
parameter_list|()
block|{
return|return
operator|new
name|ColumnPrunerReduceSinkProc
argument_list|()
return|;
block|}
comment|/**    * The Node Processor for Column Pruning on Select Operators.    */
specifier|public
specifier|static
class|class
name|ColumnPrunerSelectProc
implements|implements
name|NodeProcessor
block|{
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|SelectOperator
name|op
init|=
operator|(
name|SelectOperator
operator|)
name|nd
decl_stmt|;
name|ColumnPrunerProcCtx
name|cppCtx
init|=
operator|(
name|ColumnPrunerProcCtx
operator|)
name|ctx
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|getChildOperators
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|child
range|:
name|op
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
comment|// If one of my children is a FileSink or Script, return all columns.
comment|// Without this break, a bug in ReduceSink to Extract edge column pruning will manifest
comment|// which should be fixed before remove this
if|if
condition|(
operator|(
name|child
operator|instanceof
name|FileSinkOperator
operator|)
operator|||
operator|(
name|child
operator|instanceof
name|ScriptOperator
operator|)
operator|||
operator|(
name|child
operator|instanceof
name|UDTFOperator
operator|)
operator|||
operator|(
name|child
operator|instanceof
name|LimitOperator
operator|)
operator|||
operator|(
name|child
operator|instanceof
name|UnionOperator
operator|)
condition|)
block|{
name|cppCtx
operator|.
name|getPrunedColLists
argument_list|()
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|cppCtx
operator|.
name|getColsFromSelectExpr
argument_list|(
name|op
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
name|cols
operator|=
name|cppCtx
operator|.
name|genColLists
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|selectDesc
name|conf
init|=
name|op
operator|.
name|getConf
argument_list|()
decl_stmt|;
comment|// The input to the select does not matter. Go over the expressions
comment|// and return the ones which have a marked column
name|cppCtx
operator|.
name|getPrunedColLists
argument_list|()
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|cppCtx
operator|.
name|getSelectColsFromChildren
argument_list|(
name|op
argument_list|,
name|cols
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|isSelStarNoCompute
argument_list|()
condition|)
return|return
literal|null
return|;
comment|// do we need to prune the select operator?
name|List
argument_list|<
name|exprNodeDesc
argument_list|>
name|originalColList
init|=
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getColList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|exprNodeDesc
name|expr
range|:
name|originalColList
control|)
name|Utilities
operator|.
name|mergeUniqElems
argument_list|(
name|columns
argument_list|,
name|expr
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
comment|// by now, 'prunedCols' are columns used by child operators, and 'columns'
comment|// are columns used by this select operator.
name|ArrayList
argument_list|<
name|String
argument_list|>
name|originalOutputColumnNames
init|=
name|conf
operator|.
name|getOutputColumnNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|cols
operator|.
name|size
argument_list|()
operator|<
name|originalOutputColumnNames
operator|.
name|size
argument_list|()
condition|)
block|{
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
name|newColList
init|=
operator|new
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|newOutputColumnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Vector
argument_list|<
name|ColumnInfo
argument_list|>
name|rs_oldsignature
init|=
name|op
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
decl_stmt|;
name|Vector
argument_list|<
name|ColumnInfo
argument_list|>
name|rs_newsignature
init|=
operator|new
name|Vector
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
name|RowResolver
name|old_rr
init|=
name|cppCtx
operator|.
name|getOpToParseCtxMap
argument_list|()
operator|.
name|get
argument_list|(
name|op
argument_list|)
operator|.
name|getRR
argument_list|()
decl_stmt|;
name|RowResolver
name|new_rr
init|=
operator|new
name|RowResolver
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|col
range|:
name|cols
control|)
block|{
name|int
name|index
init|=
name|originalOutputColumnNames
operator|.
name|indexOf
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|newOutputColumnNames
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
name|newColList
operator|.
name|add
argument_list|(
name|originalColList
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|rs_newsignature
operator|.
name|add
argument_list|(
name|rs_oldsignature
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|tabcol
init|=
name|old_rr
operator|.
name|reverseLookup
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|ColumnInfo
name|columnInfo
init|=
name|old_rr
operator|.
name|get
argument_list|(
name|tabcol
index|[
literal|0
index|]
argument_list|,
name|tabcol
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|new_rr
operator|.
name|put
argument_list|(
name|tabcol
index|[
literal|0
index|]
argument_list|,
name|tabcol
index|[
literal|1
index|]
argument_list|,
name|columnInfo
argument_list|)
expr_stmt|;
block|}
name|cppCtx
operator|.
name|getOpToParseCtxMap
argument_list|()
operator|.
name|get
argument_list|(
name|op
argument_list|)
operator|.
name|setRR
argument_list|(
name|new_rr
argument_list|)
expr_stmt|;
name|op
operator|.
name|getSchema
argument_list|()
operator|.
name|setSignature
argument_list|(
name|rs_newsignature
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setColList
argument_list|(
name|newColList
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputColumnNames
argument_list|(
name|newOutputColumnNames
argument_list|)
expr_stmt|;
name|handleChildren
argument_list|(
name|op
argument_list|,
name|cols
argument_list|,
name|cppCtx
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * since we pruned the select operator, we should let its children operator      * know that. ReduceSinkOperator may send out every output columns of its      * parent select. When the select operator is pruned, its child reduce      * sink(direct child) operator should also be pruned.      *       * @param op      * @param retainedSelOutputCols      * @throws SemanticException       */
specifier|private
name|void
name|handleChildren
parameter_list|(
name|SelectOperator
name|op
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|retainedSelOutputCols
parameter_list|,
name|ColumnPrunerProcCtx
name|cppCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|child
range|:
name|op
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|ReduceSinkOperator
condition|)
block|{
name|boolean
index|[]
name|flags
init|=
name|getPruneReduceSinkOpRetainFlags
argument_list|(
name|retainedSelOutputCols
argument_list|,
operator|(
name|ReduceSinkOperator
operator|)
name|child
argument_list|)
decl_stmt|;
name|pruneReduceSinkOperator
argument_list|(
name|flags
argument_list|,
operator|(
name|ReduceSinkOperator
operator|)
name|child
argument_list|,
name|cppCtx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|child
operator|instanceof
name|FilterOperator
condition|)
block|{
comment|//filter operator has the same output columns as its parent
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|filterChild
range|:
name|child
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
if|if
condition|(
name|filterChild
operator|instanceof
name|ReduceSinkOperator
condition|)
block|{
name|boolean
index|[]
name|flags
init|=
name|getPruneReduceSinkOpRetainFlags
argument_list|(
name|retainedSelOutputCols
argument_list|,
operator|(
name|ReduceSinkOperator
operator|)
name|filterChild
argument_list|)
decl_stmt|;
name|pruneReduceSinkOperator
argument_list|(
name|flags
argument_list|,
operator|(
name|ReduceSinkOperator
operator|)
name|filterChild
argument_list|,
name|cppCtx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|boolean
index|[]
name|getPruneReduceSinkOpRetainFlags
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|retainedParentOpOutputCols
parameter_list|,
name|ReduceSinkOperator
name|reduce
parameter_list|)
block|{
name|reduceSinkDesc
name|reduceConf
init|=
name|reduce
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
name|originalValueEval
init|=
name|reduceConf
operator|.
name|getValueCols
argument_list|()
decl_stmt|;
name|boolean
index|[]
name|flags
init|=
operator|new
name|boolean
index|[
name|originalValueEval
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|originalValueEval
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|flags
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|current
init|=
name|originalValueEval
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getCols
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
operator|||
name|current
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|flags
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|current
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|retainedParentOpOutputCols
operator|.
name|contains
argument_list|(
name|current
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
block|{
name|flags
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|flags
return|;
block|}
specifier|private
specifier|static
name|void
name|pruneReduceSinkOperator
parameter_list|(
name|boolean
index|[]
name|retainFlags
parameter_list|,
name|ReduceSinkOperator
name|reduce
parameter_list|,
name|ColumnPrunerProcCtx
name|cppCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|reduceSinkDesc
name|reduceConf
init|=
name|reduce
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|exprNodeDesc
argument_list|>
name|oldMap
init|=
name|reduce
operator|.
name|getColumnExprMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|exprNodeDesc
argument_list|>
name|newMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|exprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|Vector
argument_list|<
name|ColumnInfo
argument_list|>
name|sig
init|=
operator|new
name|Vector
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
name|RowResolver
name|oldRR
init|=
name|cppCtx
operator|.
name|getOpToParseCtxMap
argument_list|()
operator|.
name|get
argument_list|(
name|reduce
argument_list|)
operator|.
name|getRR
argument_list|()
decl_stmt|;
name|RowResolver
name|newRR
init|=
operator|new
name|RowResolver
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|originalValueOutputColNames
init|=
name|reduceConf
operator|.
name|getOutputValueColumnNames
argument_list|()
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
name|originalValueEval
init|=
name|reduceConf
operator|.
name|getValueCols
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|newOutputColNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
name|newValueEval
init|=
operator|new
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|retainFlags
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|retainFlags
index|[
name|i
index|]
condition|)
block|{
name|newValueEval
operator|.
name|add
argument_list|(
name|originalValueEval
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|outputCol
init|=
name|originalValueOutputColNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|newOutputColNames
operator|.
name|add
argument_list|(
name|outputCol
argument_list|)
expr_stmt|;
name|String
index|[]
name|nm
init|=
name|oldRR
operator|.
name|reverseLookup
argument_list|(
name|outputCol
argument_list|)
decl_stmt|;
if|if
condition|(
name|nm
operator|==
literal|null
condition|)
block|{
name|outputCol
operator|=
name|Utilities
operator|.
name|ReduceField
operator|.
name|VALUE
operator|.
name|toString
argument_list|()
operator|+
literal|"."
operator|+
name|outputCol
expr_stmt|;
name|nm
operator|=
name|oldRR
operator|.
name|reverseLookup
argument_list|(
name|outputCol
argument_list|)
expr_stmt|;
block|}
name|newMap
operator|.
name|put
argument_list|(
name|outputCol
argument_list|,
name|oldMap
operator|.
name|get
argument_list|(
name|outputCol
argument_list|)
argument_list|)
expr_stmt|;
name|ColumnInfo
name|colInfo
init|=
name|oldRR
operator|.
name|get
argument_list|(
name|nm
index|[
literal|0
index|]
argument_list|,
name|nm
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|newRR
operator|.
name|put
argument_list|(
name|nm
index|[
literal|0
index|]
argument_list|,
name|nm
index|[
literal|1
index|]
argument_list|,
name|colInfo
argument_list|)
expr_stmt|;
name|sig
operator|.
name|add
argument_list|(
name|colInfo
argument_list|)
expr_stmt|;
block|}
block|}
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
name|keyCols
init|=
name|reduceConf
operator|.
name|getKeyCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|RowResolver
name|parResover
init|=
name|cppCtx
operator|.
name|getOpToParseCtxMap
argument_list|()
operator|.
name|get
argument_list|(
name|reduce
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getRR
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|keys
operator|=
name|Utilities
operator|.
name|mergeUniqElems
argument_list|(
name|keys
argument_list|,
name|keyCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|outputCol
init|=
name|keys
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
index|[]
name|nm
init|=
name|parResover
operator|.
name|reverseLookup
argument_list|(
name|outputCol
argument_list|)
decl_stmt|;
name|ColumnInfo
name|colInfo
init|=
name|oldRR
operator|.
name|get
argument_list|(
name|nm
index|[
literal|0
index|]
argument_list|,
name|nm
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|colInfo
operator|!=
literal|null
condition|)
name|newRR
operator|.
name|put
argument_list|(
name|nm
index|[
literal|0
index|]
argument_list|,
name|nm
index|[
literal|1
index|]
argument_list|,
name|colInfo
argument_list|)
expr_stmt|;
block|}
name|cppCtx
operator|.
name|getOpToParseCtxMap
argument_list|()
operator|.
name|get
argument_list|(
name|reduce
argument_list|)
operator|.
name|setRR
argument_list|(
name|newRR
argument_list|)
expr_stmt|;
name|reduce
operator|.
name|setColumnExprMap
argument_list|(
name|newMap
argument_list|)
expr_stmt|;
name|reduce
operator|.
name|getSchema
argument_list|()
operator|.
name|setSignature
argument_list|(
name|sig
argument_list|)
expr_stmt|;
name|reduceConf
operator|.
name|setOutputValueColumnNames
argument_list|(
name|newOutputColNames
argument_list|)
expr_stmt|;
name|reduceConf
operator|.
name|setValueCols
argument_list|(
name|newValueEval
argument_list|)
expr_stmt|;
name|tableDesc
name|newValueTable
init|=
name|PlanUtils
operator|.
name|getReduceValueTableDesc
argument_list|(
name|PlanUtils
operator|.
name|getFieldSchemasFromColumnList
argument_list|(
name|reduceConf
operator|.
name|getValueCols
argument_list|()
argument_list|,
name|newOutputColNames
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|reduceConf
operator|.
name|setValueSerializeInfo
argument_list|(
name|newValueTable
argument_list|)
expr_stmt|;
block|}
comment|/**    * The Factory method to get the ColumnPrunerSelectProc class.    * @return ColumnPrunerSelectProc    */
specifier|public
specifier|static
name|ColumnPrunerSelectProc
name|getSelectProc
parameter_list|()
block|{
return|return
operator|new
name|ColumnPrunerSelectProc
argument_list|()
return|;
block|}
comment|/**    * The Node Processor for Column Pruning on Join Operators.    */
specifier|public
specifier|static
class|class
name|ColumnPrunerJoinProc
implements|implements
name|NodeProcessor
block|{
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|JoinOperator
name|op
init|=
operator|(
name|JoinOperator
operator|)
name|nd
decl_stmt|;
name|pruneJoinOperator
argument_list|(
name|ctx
argument_list|,
name|op
argument_list|,
name|op
operator|.
name|getConf
argument_list|()
argument_list|,
name|op
operator|.
name|getColumnExprMap
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * The Factory method to get ColumnJoinProc class.    *     * @return ColumnPrunerJoinProc    */
specifier|public
specifier|static
name|ColumnPrunerJoinProc
name|getJoinProc
parameter_list|()
block|{
return|return
operator|new
name|ColumnPrunerJoinProc
argument_list|()
return|;
block|}
comment|/**    * The Node Processor for Column Pruning on Map Join Operators.    */
specifier|public
specifier|static
class|class
name|ColumnPrunerMapJoinProc
implements|implements
name|NodeProcessor
block|{
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|MapJoinOperator
name|op
init|=
operator|(
name|MapJoinOperator
operator|)
name|nd
decl_stmt|;
name|pruneJoinOperator
argument_list|(
name|ctx
argument_list|,
name|op
argument_list|,
name|op
operator|.
name|getConf
argument_list|()
argument_list|,
name|op
operator|.
name|getColumnExprMap
argument_list|()
argument_list|,
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getRetainList
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|void
name|pruneJoinOperator
parameter_list|(
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|CommonJoinOperator
name|op
parameter_list|,
name|joinDesc
name|conf
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|exprNodeDesc
argument_list|>
name|columnExprMap
parameter_list|,
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|retainMap
parameter_list|,
name|boolean
name|mapJoin
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ColumnPrunerProcCtx
name|cppCtx
init|=
operator|(
name|ColumnPrunerProcCtx
operator|)
name|ctx
decl_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|prunedColLists
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|childOperators
init|=
name|op
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|child
range|:
name|childOperators
control|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|FileSinkOperator
condition|)
return|return;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|childColLists
init|=
name|cppCtx
operator|.
name|genColLists
argument_list|(
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
operator|)
name|op
argument_list|)
decl_stmt|;
name|RowResolver
name|joinRR
init|=
name|cppCtx
operator|.
name|getOpToParseCtxMap
argument_list|()
operator|.
name|get
argument_list|(
name|op
argument_list|)
operator|.
name|getRR
argument_list|()
decl_stmt|;
name|RowResolver
name|newJoinRR
init|=
operator|new
name|RowResolver
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputCols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Vector
argument_list|<
name|ColumnInfo
argument_list|>
name|rs
init|=
operator|new
name|Vector
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|exprNodeDesc
argument_list|>
name|newColExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|exprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|conf
operator|.
name|getOutputColumnNames
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|internalName
init|=
name|conf
operator|.
name|getOutputColumnNames
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|exprNodeDesc
name|desc
init|=
name|columnExprMap
operator|.
name|get
argument_list|(
name|internalName
argument_list|)
decl_stmt|;
name|Byte
name|tag
init|=
name|conf
operator|.
name|getReversedExprs
argument_list|()
operator|.
name|get
argument_list|(
name|internalName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|childColLists
operator|.
name|contains
argument_list|(
name|internalName
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|conf
operator|.
name|getExprs
argument_list|()
operator|.
name|get
argument_list|(
name|tag
argument_list|)
operator|.
name|indexOf
argument_list|(
name|desc
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
continue|continue;
name|conf
operator|.
name|getExprs
argument_list|()
operator|.
name|get
argument_list|(
name|tag
argument_list|)
operator|.
name|remove
argument_list|(
name|desc
argument_list|)
expr_stmt|;
if|if
condition|(
name|retainMap
operator|!=
literal|null
condition|)
name|retainMap
operator|.
name|get
argument_list|(
name|tag
argument_list|)
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|prunedRSList
init|=
name|prunedColLists
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
if|if
condition|(
name|prunedRSList
operator|==
literal|null
condition|)
block|{
name|prunedRSList
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|prunedColLists
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|prunedRSList
argument_list|)
expr_stmt|;
block|}
name|prunedRSList
operator|=
name|Utilities
operator|.
name|mergeUniqElems
argument_list|(
name|prunedRSList
argument_list|,
name|desc
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
name|outputCols
operator|.
name|add
argument_list|(
name|internalName
argument_list|)
expr_stmt|;
name|newColExprMap
operator|.
name|put
argument_list|(
name|internalName
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mapJoin
condition|)
block|{
comment|// regenerate the valueTableDesc
name|List
argument_list|<
name|tableDesc
argument_list|>
name|valueTableDescs
init|=
operator|new
name|ArrayList
argument_list|<
name|tableDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|op
operator|.
name|getParentOperators
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|List
argument_list|<
name|exprNodeDesc
argument_list|>
name|valueCols
init|=
name|conf
operator|.
name|getExprs
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Byte
argument_list|(
operator|(
name|byte
operator|)
name|pos
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|keyOrder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|keyOrder
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
block|}
name|tableDesc
name|valueTableDesc
init|=
name|PlanUtils
operator|.
name|getMapJoinValueTableDesc
argument_list|(
name|PlanUtils
operator|.
name|getFieldSchemasFromColumnList
argument_list|(
name|valueCols
argument_list|,
literal|"mapjoinvalue"
argument_list|)
argument_list|)
decl_stmt|;
name|valueTableDescs
operator|.
name|add
argument_list|(
name|valueTableDesc
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|mapJoinDesc
operator|)
name|conf
operator|)
operator|.
name|setValueTblDescs
argument_list|(
name|valueTableDescs
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|exprNodeDesc
argument_list|>
argument_list|>
argument_list|>
name|exprs
init|=
operator|(
operator|(
name|mapJoinDesc
operator|)
name|conf
operator|)
operator|.
name|getKeys
argument_list|()
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|exprNodeDesc
argument_list|>
argument_list|>
argument_list|>
name|iters
init|=
name|exprs
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iters
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|exprNodeDesc
argument_list|>
argument_list|>
name|entry
init|=
name|iters
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|exprNodeDesc
argument_list|>
name|lists
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|lists
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|exprNodeDesc
name|desc
init|=
name|lists
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|Byte
name|tag
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cols
init|=
name|prunedColLists
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
name|cols
operator|=
name|Utilities
operator|.
name|mergeUniqElems
argument_list|(
name|cols
argument_list|,
name|desc
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
name|prunedColLists
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|cols
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|child
range|:
name|childOperators
control|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|ReduceSinkOperator
condition|)
block|{
name|boolean
index|[]
name|flags
init|=
name|getPruneReduceSinkOpRetainFlags
argument_list|(
name|childColLists
argument_list|,
operator|(
name|ReduceSinkOperator
operator|)
name|child
argument_list|)
decl_stmt|;
name|pruneReduceSinkOperator
argument_list|(
name|flags
argument_list|,
operator|(
name|ReduceSinkOperator
operator|)
name|child
argument_list|,
name|cppCtx
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|internalName
init|=
name|outputCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
index|[]
name|nm
init|=
name|joinRR
operator|.
name|reverseLookup
argument_list|(
name|internalName
argument_list|)
decl_stmt|;
name|ColumnInfo
name|col
init|=
name|joinRR
operator|.
name|get
argument_list|(
name|nm
index|[
literal|0
index|]
argument_list|,
name|nm
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|newJoinRR
operator|.
name|put
argument_list|(
name|nm
index|[
literal|0
index|]
argument_list|,
name|nm
index|[
literal|1
index|]
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|rs
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
name|op
operator|.
name|setColumnExprMap
argument_list|(
name|newColExprMap
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputColumnNames
argument_list|(
name|outputCols
argument_list|)
expr_stmt|;
name|op
operator|.
name|getSchema
argument_list|()
operator|.
name|setSignature
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|cppCtx
operator|.
name|getOpToParseCtxMap
argument_list|()
operator|.
name|get
argument_list|(
name|op
argument_list|)
operator|.
name|setRR
argument_list|(
name|newJoinRR
argument_list|)
expr_stmt|;
name|cppCtx
operator|.
name|getJoinPrunedColLists
argument_list|()
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|prunedColLists
argument_list|)
expr_stmt|;
block|}
comment|/**    * The Factory method to get ColumnMapJoinProc class.    *     * @return ColumnPrunerMapJoinProc    */
specifier|public
specifier|static
name|ColumnPrunerMapJoinProc
name|getMapJoinProc
parameter_list|()
block|{
return|return
operator|new
name|ColumnPrunerMapJoinProc
argument_list|()
return|;
block|}
block|}
end_class

end_unit

