begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|AbstractMapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|CommonJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FilterOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|LateralViewForwardOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|LateralViewJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|LimitOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|PTFOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDTFOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UnionOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|VirtualColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|RowResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AggregationDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDescUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|GroupByDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PTFDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SelectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableScanDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|PTFExpressionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|PTFInputDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|PartitionedTableFunctionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|ShapeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|WindowFunctionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|WindowTableFunctionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|ColumnPrunerProcCtx
operator|.
name|fromColumnNames
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|ColumnPrunerProcCtx
operator|.
name|lookupColumn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|ColumnPrunerProcCtx
operator|.
name|mergeFieldNodesWithDesc
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|ColumnPrunerProcCtx
operator|.
name|toColumnNames
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|FieldNode
operator|.
name|mergeFieldNodes
import|;
end_import

begin_comment
comment|/**  * Factory for generating the different node processors used by ColumnPruner.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ColumnPrunerProcFactory
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ColumnPrunerProcFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|ColumnPrunerProcFactory
parameter_list|()
block|{
comment|// prevent instantiation
block|}
comment|/**    * Node Processor for Column Pruning on Filter Operators.    */
specifier|public
specifier|static
class|class
name|ColumnPrunerFilterProc
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|FilterOperator
name|op
init|=
operator|(
name|FilterOperator
operator|)
name|nd
decl_stmt|;
name|ColumnPrunerProcCtx
name|cppCtx
init|=
operator|(
name|ColumnPrunerProcCtx
operator|)
name|ctx
decl_stmt|;
name|ExprNodeDesc
name|condn
init|=
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getPredicate
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldNode
argument_list|>
name|filterOpPrunedColLists
init|=
name|mergeFieldNodesWithDesc
argument_list|(
name|cppCtx
operator|.
name|genColLists
argument_list|(
name|op
argument_list|)
argument_list|,
name|condn
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldNode
argument_list|>
name|filterOpPrunedColListsOrderPreserved
init|=
name|preserveColumnOrder
argument_list|(
name|op
argument_list|,
name|filterOpPrunedColLists
argument_list|)
decl_stmt|;
name|cppCtx
operator|.
name|getPrunedColLists
argument_list|()
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|filterOpPrunedColListsOrderPreserved
argument_list|)
expr_stmt|;
name|pruneOperator
argument_list|(
name|cppCtx
argument_list|,
name|op
argument_list|,
name|cppCtx
operator|.
name|getPrunedColLists
argument_list|()
operator|.
name|get
argument_list|(
name|op
argument_list|)
argument_list|)
expr_stmt|;
name|cppCtx
operator|.
name|handleFilterUnionChildren
argument_list|(
name|op
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Factory method to get the ColumnPrunerFilterProc class.    *    * @return ColumnPrunerFilterProc    */
specifier|public
specifier|static
name|ColumnPrunerFilterProc
name|getFilterProc
parameter_list|()
block|{
return|return
operator|new
name|ColumnPrunerFilterProc
argument_list|()
return|;
block|}
comment|/**    * Node Processor for Column Pruning on Group By Operators.    */
specifier|public
specifier|static
class|class
name|ColumnPrunerGroupByProc
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|GroupByOperator
name|gbOp
init|=
operator|(
name|GroupByOperator
operator|)
name|nd
decl_stmt|;
name|ColumnPrunerProcCtx
name|cppCtx
init|=
operator|(
name|ColumnPrunerProcCtx
operator|)
name|ctx
decl_stmt|;
name|List
argument_list|<
name|FieldNode
argument_list|>
name|colLists
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|GroupByDesc
name|conf
init|=
name|gbOp
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keys
init|=
name|conf
operator|.
name|getKeys
argument_list|()
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|key
range|:
name|keys
control|)
block|{
name|colLists
operator|=
name|mergeFieldNodesWithDesc
argument_list|(
name|colLists
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|AggregationDesc
argument_list|>
name|aggrs
init|=
name|conf
operator|.
name|getAggregators
argument_list|()
decl_stmt|;
for|for
control|(
name|AggregationDesc
name|aggr
range|:
name|aggrs
control|)
block|{
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|params
init|=
name|aggr
operator|.
name|getParameters
argument_list|()
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|param
range|:
name|params
control|)
block|{
name|colLists
operator|=
name|mergeFieldNodesWithDesc
argument_list|(
name|colLists
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|groupingSetPosition
init|=
name|conf
operator|.
name|getGroupingSetPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupingSetPosition
operator|>=
literal|0
condition|)
block|{
name|List
argument_list|<
name|FieldNode
argument_list|>
name|neededCols
init|=
name|cppCtx
operator|.
name|genColLists
argument_list|(
name|gbOp
argument_list|)
decl_stmt|;
name|String
name|groupingColumn
init|=
name|conf
operator|.
name|getOutputColumnNames
argument_list|()
operator|.
name|get
argument_list|(
name|groupingSetPosition
argument_list|)
decl_stmt|;
if|if
condition|(
name|lookupColumn
argument_list|(
name|neededCols
argument_list|,
name|groupingColumn
argument_list|)
operator|==
literal|null
condition|)
block|{
name|conf
operator|.
name|getOutputColumnNames
argument_list|()
operator|.
name|remove
argument_list|(
name|groupingSetPosition
argument_list|)
expr_stmt|;
if|if
condition|(
name|gbOp
operator|.
name|getSchema
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|gbOp
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|.
name|remove
argument_list|(
name|groupingSetPosition
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// If the child has a different schema, we create a Project operator between them both,
comment|// as we cannot prune the columns in the GroupBy operator
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|child
range|:
name|gbOp
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|SelectOperator
operator|||
name|child
operator|instanceof
name|ReduceSinkOperator
condition|)
block|{
continue|continue;
block|}
name|List
argument_list|<
name|FieldNode
argument_list|>
name|colList
init|=
name|cppCtx
operator|.
name|genColLists
argument_list|(
name|gbOp
argument_list|,
name|child
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|FieldNode
argument_list|>
name|neededCols
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|colList
operator|!=
literal|null
condition|)
block|{
name|neededCols
operator|.
name|addAll
argument_list|(
name|colList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// colList will be null for FS operators.
continue|continue;
block|}
if|if
condition|(
name|neededCols
operator|.
name|size
argument_list|()
operator|<
name|gbOp
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|exprs
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputColNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|colExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|outputRS
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnInfo
name|colInfo
range|:
name|gbOp
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
control|)
block|{
if|if
condition|(
name|lookupColumn
argument_list|(
name|neededCols
argument_list|,
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|ExprNodeDesc
name|colDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|colInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|)
decl_stmt|;
name|exprs
operator|.
name|add
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
name|outputColNames
operator|.
name|add
argument_list|(
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnInfo
name|newCol
init|=
operator|new
name|ColumnInfo
argument_list|(
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|,
name|colInfo
operator|.
name|isHiddenVirtualCol
argument_list|()
argument_list|)
decl_stmt|;
name|newCol
operator|.
name|setAlias
argument_list|(
name|colInfo
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
name|outputRS
operator|.
name|add
argument_list|(
name|newCol
argument_list|)
expr_stmt|;
name|colExprMap
operator|.
name|put
argument_list|(
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|colDesc
argument_list|)
expr_stmt|;
block|}
name|SelectDesc
name|select
init|=
operator|new
name|SelectDesc
argument_list|(
name|exprs
argument_list|,
name|outputColNames
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|gbOp
operator|.
name|removeChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|SelectOperator
name|sel
init|=
operator|(
name|SelectOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|select
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|outputRS
argument_list|)
argument_list|,
name|gbOp
argument_list|)
decl_stmt|;
name|OperatorFactory
operator|.
name|makeChild
argument_list|(
name|sel
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|sel
operator|.
name|setColumnExprMap
argument_list|(
name|colExprMap
argument_list|)
expr_stmt|;
block|}
block|}
name|cppCtx
operator|.
name|getPrunedColLists
argument_list|()
operator|.
name|put
argument_list|(
name|gbOp
argument_list|,
name|colLists
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Factory method to get the ColumnPrunerGroupByProc class.    *    * @return ColumnPrunerGroupByProc    */
specifier|public
specifier|static
name|ColumnPrunerGroupByProc
name|getGroupByProc
parameter_list|()
block|{
return|return
operator|new
name|ColumnPrunerGroupByProc
argument_list|()
return|;
block|}
specifier|public
specifier|static
class|class
name|ColumnPrunerScriptProc
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ColumnPrunerProcCtx
name|cppCtx
init|=
operator|(
name|ColumnPrunerProcCtx
operator|)
name|ctx
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
init|=
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
operator|)
name|nd
decl_stmt|;
name|RowSchema
name|inputRS
init|=
name|op
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldNode
argument_list|>
name|prunedCols
init|=
name|cppCtx
operator|.
name|getPrunedColList
argument_list|(
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
init|=
name|op
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RowSchema
name|parentRS
init|=
name|parent
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|sig
init|=
name|parentRS
operator|.
name|getSignature
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldNode
argument_list|>
name|colList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnInfo
name|cI
range|:
name|sig
control|)
block|{
name|colList
operator|.
name|add
argument_list|(
operator|new
name|FieldNode
argument_list|(
name|cI
operator|.
name|getInternalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prunedCols
operator|.
name|size
argument_list|()
operator|!=
name|inputRS
operator|.
name|getSignature
argument_list|()
operator|.
name|size
argument_list|()
operator|&&
operator|!
operator|(
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|SelectOperator
operator|)
condition|)
block|{
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|exprs
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|colExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|outputRS
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldNode
name|internalCol
range|:
name|prunedCols
control|)
block|{
name|String
name|internalName
init|=
name|internalCol
operator|.
name|getFieldName
argument_list|()
decl_stmt|;
name|ColumnInfo
name|valueInfo
init|=
name|inputRS
operator|.
name|getColumnInfo
argument_list|(
name|internalName
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|colDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|valueInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|)
decl_stmt|;
name|exprs
operator|.
name|add
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
name|outputs
operator|.
name|add
argument_list|(
name|internalName
argument_list|)
expr_stmt|;
name|ColumnInfo
name|newCol
init|=
operator|new
name|ColumnInfo
argument_list|(
name|internalName
argument_list|,
name|valueInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|isHiddenVirtualCol
argument_list|()
argument_list|)
decl_stmt|;
name|newCol
operator|.
name|setAlias
argument_list|(
name|valueInfo
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
name|outputRS
operator|.
name|add
argument_list|(
name|newCol
argument_list|)
expr_stmt|;
name|colExprMap
operator|.
name|put
argument_list|(
name|internalName
argument_list|,
name|colDesc
argument_list|)
expr_stmt|;
block|}
name|SelectDesc
name|select
init|=
operator|new
name|SelectDesc
argument_list|(
name|exprs
argument_list|,
name|outputs
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
init|=
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|op
operator|.
name|removeChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|SelectOperator
name|sel
init|=
operator|(
name|SelectOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|select
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|outputRS
argument_list|)
argument_list|,
name|op
argument_list|)
decl_stmt|;
name|OperatorFactory
operator|.
name|makeChild
argument_list|(
name|sel
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|sel
operator|.
name|setColumnExprMap
argument_list|(
name|colExprMap
argument_list|)
expr_stmt|;
block|}
name|cppCtx
operator|.
name|getPrunedColLists
argument_list|()
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|colList
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ColumnPrunerLimitProc
extends|extends
name|ColumnPrunerDefaultProc
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|super
operator|.
name|process
argument_list|(
name|nd
argument_list|,
name|stack
argument_list|,
name|ctx
argument_list|,
name|nodeOutputs
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldNode
argument_list|>
name|cols
init|=
operator|(
operator|(
name|ColumnPrunerProcCtx
operator|)
name|ctx
operator|)
operator|.
name|getPrunedColLists
argument_list|()
operator|.
name|get
argument_list|(
name|nd
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|cols
condition|)
block|{
name|pruneOperator
argument_list|(
name|ctx
argument_list|,
operator|(
name|LimitOperator
operator|)
name|nd
argument_list|,
name|cols
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|ColumnPrunerLimitProc
name|getLimitProc
parameter_list|()
block|{
return|return
operator|new
name|ColumnPrunerLimitProc
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|ColumnPrunerScriptProc
name|getScriptProc
parameter_list|()
block|{
return|return
operator|new
name|ColumnPrunerScriptProc
argument_list|()
return|;
block|}
comment|/**    * - Pruning can only be done for Windowing. PTFs are black boxes,    *   we assume all columns are needed.    * - add column names referenced in WindowFn args and in WindowFn expressions    *   to the pruned list of the child Select Op.    * - finally we set the prunedColList on the ColumnPrunerContx;    *   and update the RR&amp; signature on the PTFOp.    */
specifier|public
specifier|static
class|class
name|ColumnPrunerPTFProc
extends|extends
name|ColumnPrunerScriptProc
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ColumnPrunerProcCtx
name|cppCtx
init|=
operator|(
name|ColumnPrunerProcCtx
operator|)
name|ctx
decl_stmt|;
name|PTFOperator
name|op
init|=
operator|(
name|PTFOperator
operator|)
name|nd
decl_stmt|;
name|PTFDesc
name|conf
init|=
name|op
operator|.
name|getConf
argument_list|()
decl_stmt|;
comment|//Since we cannot know what columns will be needed by a PTF chain,
comment|//we do not prune columns on PTFOperator for PTF chains.
name|PartitionedTableFunctionDef
name|funcDef
init|=
name|conf
operator|.
name|getFuncDef
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|referencedColumns
init|=
name|funcDef
operator|.
name|getReferencedColumns
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|conf
operator|.
name|forWindowing
argument_list|()
operator|&&
operator|!
name|conf
operator|.
name|forNoop
argument_list|()
operator|&&
name|referencedColumns
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|process
argument_list|(
name|nd
argument_list|,
name|stack
argument_list|,
name|cppCtx
argument_list|,
name|nodeOutputs
argument_list|)
return|;
block|}
name|List
argument_list|<
name|FieldNode
argument_list|>
name|prunedCols
init|=
name|cppCtx
operator|.
name|getPrunedColList
argument_list|(
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|forWindowing
argument_list|()
condition|)
block|{
name|WindowTableFunctionDef
name|def
init|=
operator|(
name|WindowTableFunctionDef
operator|)
name|funcDef
decl_stmt|;
name|prunedCols
operator|=
name|mergeFieldNodes
argument_list|(
name|prunedCols
argument_list|,
name|getWindowFunctionColumns
argument_list|(
name|def
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|conf
operator|.
name|forNoop
argument_list|()
condition|)
block|{
name|prunedCols
operator|=
operator|new
name|ArrayList
argument_list|(
name|cppCtx
operator|.
name|getPrunedColList
argument_list|(
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prunedCols
operator|=
name|fromColumnNames
argument_list|(
name|referencedColumns
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|newRS
init|=
name|prunedColumnsList
argument_list|(
name|prunedCols
argument_list|,
name|op
operator|.
name|getSchema
argument_list|()
argument_list|,
name|funcDef
argument_list|)
decl_stmt|;
name|op
operator|.
name|getSchema
argument_list|()
operator|.
name|setSignature
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|(
name|newRS
argument_list|)
argument_list|)
expr_stmt|;
name|ShapeDetails
name|outputShape
init|=
name|funcDef
operator|.
name|getStartOfChain
argument_list|()
operator|.
name|getInput
argument_list|()
operator|.
name|getOutputShape
argument_list|()
decl_stmt|;
name|cppCtx
operator|.
name|getPrunedColLists
argument_list|()
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|fromColumnNames
argument_list|(
name|outputShape
operator|.
name|getColumnNames
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|buildPrunedRS
parameter_list|(
name|List
argument_list|<
name|FieldNode
argument_list|>
name|prunedCols
parameter_list|,
name|RowSchema
name|oldRS
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|sig
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|FieldNode
argument_list|>
name|prunedColsSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|prunedCols
argument_list|)
decl_stmt|;
for|for
control|(
name|ColumnInfo
name|cInfo
range|:
name|oldRS
operator|.
name|getSignature
argument_list|()
control|)
block|{
if|if
condition|(
name|lookupColumn
argument_list|(
name|prunedColsSet
argument_list|,
name|cInfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|sig
operator|.
name|add
argument_list|(
name|cInfo
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sig
return|;
block|}
comment|// always should be in this order (see PTFDeserializer#initializeWindowing)
specifier|private
name|List
argument_list|<
name|FieldNode
argument_list|>
name|getWindowFunctionColumns
parameter_list|(
name|WindowTableFunctionDef
name|tDef
parameter_list|)
block|{
name|List
argument_list|<
name|FieldNode
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|tDef
operator|.
name|getWindowFunctions
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|WindowFunctionDef
name|wDef
range|:
name|tDef
operator|.
name|getWindowFunctions
argument_list|()
control|)
block|{
name|columns
operator|.
name|add
argument_list|(
operator|new
name|FieldNode
argument_list|(
name|wDef
operator|.
name|getAlias
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|columns
return|;
block|}
specifier|private
name|RowResolver
name|buildPrunedRR
parameter_list|(
name|List
argument_list|<
name|FieldNode
argument_list|>
name|prunedCols
parameter_list|,
name|RowSchema
name|oldRS
parameter_list|)
throws|throws
name|SemanticException
block|{
name|RowResolver
name|resolver
init|=
operator|new
name|RowResolver
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|FieldNode
argument_list|>
name|prunedColsSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|prunedCols
argument_list|)
decl_stmt|;
for|for
control|(
name|ColumnInfo
name|cInfo
range|:
name|oldRS
operator|.
name|getSignature
argument_list|()
control|)
block|{
if|if
condition|(
name|lookupColumn
argument_list|(
name|prunedColsSet
argument_list|,
name|cInfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|resolver
operator|.
name|put
argument_list|(
name|cInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|cInfo
operator|.
name|getAlias
argument_list|()
argument_list|,
name|cInfo
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|resolver
return|;
block|}
comment|/*      * add any input columns referenced in WindowFn args or expressions.      */
specifier|private
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|prunedColumnsList
parameter_list|(
name|List
argument_list|<
name|FieldNode
argument_list|>
name|prunedCols
parameter_list|,
name|RowSchema
name|oldRS
parameter_list|,
name|PartitionedTableFunctionDef
name|pDef
parameter_list|)
throws|throws
name|SemanticException
block|{
name|pDef
operator|.
name|getOutputShape
argument_list|()
operator|.
name|setRr
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|pDef
operator|.
name|getOutputShape
argument_list|()
operator|.
name|setColumnNames
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|pDef
operator|instanceof
name|WindowTableFunctionDef
condition|)
block|{
name|WindowTableFunctionDef
name|tDef
init|=
operator|(
name|WindowTableFunctionDef
operator|)
name|pDef
decl_stmt|;
if|if
condition|(
name|tDef
operator|.
name|getWindowFunctions
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|WindowFunctionDef
name|wDef
range|:
name|tDef
operator|.
name|getWindowFunctions
argument_list|()
control|)
block|{
if|if
condition|(
name|wDef
operator|.
name|getArgs
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|PTFExpressionDef
name|arg
range|:
name|wDef
operator|.
name|getArgs
argument_list|()
control|)
block|{
name|ExprNodeDesc
name|exprNode
init|=
name|arg
operator|.
name|getExprNode
argument_list|()
decl_stmt|;
name|prunedCols
operator|=
name|mergeFieldNodesWithDesc
argument_list|(
name|prunedCols
argument_list|,
name|exprNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|tDef
operator|.
name|getPartition
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PTFExpressionDef
name|col
range|:
name|tDef
operator|.
name|getPartition
argument_list|()
operator|.
name|getExpressions
argument_list|()
control|)
block|{
name|ExprNodeDesc
name|exprNode
init|=
name|col
operator|.
name|getExprNode
argument_list|()
decl_stmt|;
name|prunedCols
operator|=
name|mergeFieldNodesWithDesc
argument_list|(
name|prunedCols
argument_list|,
name|exprNode
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tDef
operator|.
name|getOrder
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PTFExpressionDef
name|col
range|:
name|tDef
operator|.
name|getOrder
argument_list|()
operator|.
name|getExpressions
argument_list|()
control|)
block|{
name|ExprNodeDesc
name|exprNode
init|=
name|col
operator|.
name|getExprNode
argument_list|()
decl_stmt|;
name|prunedCols
operator|=
name|mergeFieldNodesWithDesc
argument_list|(
name|prunedCols
argument_list|,
name|exprNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|pDef
operator|.
name|getOutputShape
argument_list|()
operator|.
name|setRr
argument_list|(
name|buildPrunedRR
argument_list|(
name|prunedCols
argument_list|,
name|oldRS
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PTFInputDef
name|input
init|=
name|pDef
operator|.
name|getInput
argument_list|()
decl_stmt|;
if|if
condition|(
name|input
operator|instanceof
name|PartitionedTableFunctionDef
condition|)
block|{
return|return
name|prunedColumnsList
argument_list|(
name|prunedCols
argument_list|,
name|oldRS
argument_list|,
operator|(
name|PartitionedTableFunctionDef
operator|)
name|input
argument_list|)
return|;
block|}
name|ArrayList
argument_list|<
name|FieldNode
argument_list|>
name|inputColumns
init|=
name|prunedInputList
argument_list|(
name|prunedCols
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|input
operator|.
name|getOutputShape
argument_list|()
operator|.
name|setRr
argument_list|(
name|buildPrunedRR
argument_list|(
name|inputColumns
argument_list|,
name|oldRS
argument_list|)
argument_list|)
expr_stmt|;
name|input
operator|.
name|getOutputShape
argument_list|()
operator|.
name|setColumnNames
argument_list|(
name|toColumnNames
argument_list|(
name|inputColumns
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buildPrunedRS
argument_list|(
name|prunedCols
argument_list|,
name|oldRS
argument_list|)
return|;
block|}
comment|/*      * from the prunedCols list filter out columns that refer to WindowFns or WindowExprs      * the returned list is set as the prunedList needed by the PTFOp.      */
specifier|private
name|ArrayList
argument_list|<
name|FieldNode
argument_list|>
name|prunedInputList
parameter_list|(
name|List
argument_list|<
name|FieldNode
argument_list|>
name|prunedCols
parameter_list|,
name|PTFInputDef
name|tDef
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|FieldNode
argument_list|>
name|prunedInputCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|OI
init|=
name|tDef
operator|.
name|getOutputShape
argument_list|()
operator|.
name|getOI
argument_list|()
decl_stmt|;
for|for
control|(
name|StructField
name|f
range|:
name|OI
operator|.
name|getAllStructFieldRefs
argument_list|()
control|)
block|{
name|String
name|fName
init|=
name|f
operator|.
name|getFieldName
argument_list|()
decl_stmt|;
name|FieldNode
name|fn
init|=
name|lookupColumn
argument_list|(
name|prunedCols
argument_list|,
name|fName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fn
operator|!=
literal|null
condition|)
block|{
name|prunedInputCols
operator|.
name|add
argument_list|(
name|fn
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|prunedInputCols
return|;
block|}
block|}
comment|/**    * Factory method to get the ColumnPrunerGroupByProc class.    *    * @return ColumnPrunerGroupByProc    */
specifier|public
specifier|static
name|ColumnPrunerPTFProc
name|getPTFProc
parameter_list|()
block|{
return|return
operator|new
name|ColumnPrunerPTFProc
argument_list|()
return|;
block|}
comment|/**    * The Default Node Processor for Column Pruning.    */
specifier|public
specifier|static
class|class
name|ColumnPrunerDefaultProc
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ColumnPrunerProcCtx
name|cppCtx
init|=
operator|(
name|ColumnPrunerProcCtx
operator|)
name|ctx
decl_stmt|;
name|cppCtx
operator|.
name|getPrunedColLists
argument_list|()
operator|.
name|put
argument_list|(
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
operator|)
name|nd
argument_list|,
name|cppCtx
operator|.
name|genColLists
argument_list|(
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
operator|)
name|nd
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Factory method to get the ColumnPrunerDefaultProc class.    *    * @return ColumnPrunerDefaultProc    */
specifier|public
specifier|static
name|ColumnPrunerDefaultProc
name|getDefaultProc
parameter_list|()
block|{
return|return
operator|new
name|ColumnPrunerDefaultProc
argument_list|()
return|;
block|}
comment|/**    * The Node Processor for Column Pruning on Table Scan Operators. It will    * store needed columns in tableScanDesc.    */
specifier|public
specifier|static
class|class
name|ColumnPrunerTableScanProc
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TableScanOperator
name|scanOp
init|=
operator|(
name|TableScanOperator
operator|)
name|nd
decl_stmt|;
name|ColumnPrunerProcCtx
name|cppCtx
init|=
operator|(
name|ColumnPrunerProcCtx
operator|)
name|ctx
decl_stmt|;
name|List
argument_list|<
name|FieldNode
argument_list|>
name|cols
init|=
name|cppCtx
operator|.
name|genColLists
argument_list|(
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
operator|)
name|nd
argument_list|)
decl_stmt|;
if|if
condition|(
name|cols
operator|==
literal|null
operator|&&
operator|!
name|scanOp
operator|.
name|getConf
argument_list|()
operator|.
name|isGatherStats
argument_list|()
condition|)
block|{
name|scanOp
operator|.
name|setNeededColumnIDs
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|cols
operator|=
name|cols
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|FieldNode
argument_list|>
argument_list|()
else|:
name|cols
expr_stmt|;
name|cppCtx
operator|.
name|getPrunedColLists
argument_list|()
operator|.
name|put
argument_list|(
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
operator|)
name|nd
argument_list|,
name|cols
argument_list|)
expr_stmt|;
name|RowSchema
name|inputRS
init|=
name|scanOp
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|setupNeededColumns
argument_list|(
name|scanOp
argument_list|,
name|inputRS
argument_list|,
name|cols
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/** Sets up needed columns for TSOP. Mainly, transfers column names from input    * RowSchema as well as the needed virtual columns, into TableScanDesc.    */
specifier|public
specifier|static
name|void
name|setupNeededColumns
parameter_list|(
name|TableScanOperator
name|scanOp
parameter_list|,
name|RowSchema
name|inputRS
parameter_list|,
name|List
argument_list|<
name|FieldNode
argument_list|>
name|cols
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|neededColumnIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|neededColumnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|neededNestedColumnPaths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|referencedColumnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|TableScanDesc
name|desc
init|=
name|scanOp
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|VirtualColumn
argument_list|>
name|virtualCols
init|=
name|desc
operator|.
name|getVirtualCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|VirtualColumn
argument_list|>
name|newVirtualCols
init|=
operator|new
name|ArrayList
argument_list|<
name|VirtualColumn
argument_list|>
argument_list|()
decl_stmt|;
comment|// add virtual columns for ANALYZE TABLE
if|if
condition|(
name|scanOp
operator|.
name|getConf
argument_list|()
operator|.
name|isGatherStats
argument_list|()
condition|)
block|{
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldNode
argument_list|(
name|VirtualColumn
operator|.
name|RAWDATASIZE
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FieldNode
name|fn
range|:
name|cols
control|)
block|{
name|String
name|column
init|=
name|fn
operator|.
name|getFieldName
argument_list|()
decl_stmt|;
name|ColumnInfo
name|colInfo
init|=
name|inputRS
operator|.
name|getColumnInfo
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|colInfo
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|referencedColumnNames
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
name|colInfo
operator|.
name|getIsVirtualCol
argument_list|()
condition|)
block|{
comment|// part is also a virtual column, but part col should not in this
comment|// list.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|virtualCols
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|VirtualColumn
name|vc
init|=
name|virtualCols
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|vc
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
condition|)
block|{
name|newVirtualCols
operator|.
name|add
argument_list|(
name|vc
argument_list|)
expr_stmt|;
block|}
block|}
comment|//no need to pass virtual columns to reader.
continue|continue;
block|}
name|int
name|position
init|=
name|inputRS
operator|.
name|getPosition
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|position
operator|>=
literal|0
condition|)
block|{
comment|// get the needed columns by id and name
name|neededColumnIds
operator|.
name|add
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|neededColumnNames
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|neededNestedColumnPaths
operator|.
name|addAll
argument_list|(
name|fn
operator|.
name|toPaths
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|desc
operator|.
name|setVirtualCols
argument_list|(
name|newVirtualCols
argument_list|)
expr_stmt|;
name|scanOp
operator|.
name|setNeededColumnIDs
argument_list|(
name|neededColumnIds
argument_list|)
expr_stmt|;
name|scanOp
operator|.
name|setNeededColumns
argument_list|(
name|neededColumnNames
argument_list|)
expr_stmt|;
name|scanOp
operator|.
name|setNeededNestedColumnPaths
argument_list|(
name|neededNestedColumnPaths
argument_list|)
expr_stmt|;
name|scanOp
operator|.
name|setReferencedColumns
argument_list|(
name|referencedColumnNames
argument_list|)
expr_stmt|;
block|}
comment|/**    * Factory method to get the ColumnPrunerDefaultProc class.    *    * @return ColumnPrunerTableScanProc    */
specifier|public
specifier|static
name|ColumnPrunerTableScanProc
name|getTableScanProc
parameter_list|()
block|{
return|return
operator|new
name|ColumnPrunerTableScanProc
argument_list|()
return|;
block|}
comment|/**    * The Node Processor for Column Pruning on Reduce Sink Operators.    */
specifier|public
specifier|static
class|class
name|ColumnPrunerReduceSinkProc
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ReduceSinkOperator
name|op
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|nd
decl_stmt|;
name|ColumnPrunerProcCtx
name|cppCtx
init|=
operator|(
name|ColumnPrunerProcCtx
operator|)
name|ctx
decl_stmt|;
name|ReduceSinkDesc
name|conf
init|=
name|op
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldNode
argument_list|>
name|colLists
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keys
init|=
name|conf
operator|.
name|getKeyCols
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Reduce Sink Operator "
operator|+
name|op
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|" key:"
operator|+
name|keys
argument_list|)
expr_stmt|;
for|for
control|(
name|ExprNodeDesc
name|key
range|:
name|keys
control|)
block|{
name|colLists
operator|=
name|mergeFieldNodesWithDesc
argument_list|(
name|colLists
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ExprNodeDesc
name|key
range|:
name|conf
operator|.
name|getPartitionCols
argument_list|()
control|)
block|{
name|colLists
operator|=
name|mergeFieldNodesWithDesc
argument_list|(
name|colLists
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
assert|assert
name|op
operator|.
name|getNumChild
argument_list|()
operator|==
literal|1
assert|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
init|=
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldNode
argument_list|>
name|childCols
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|CommonJoinOperator
condition|)
block|{
name|childCols
operator|=
name|cppCtx
operator|.
name|getJoinPrunedColLists
argument_list|()
operator|.
name|get
argument_list|(
name|child
argument_list|)
operator|==
literal|null
condition|?
literal|null
else|:
name|cppCtx
operator|.
name|getJoinPrunedColLists
argument_list|()
operator|.
name|get
argument_list|(
name|child
argument_list|)
operator|.
name|get
argument_list|(
operator|(
name|byte
operator|)
name|conf
operator|.
name|getTag
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|childCols
operator|=
name|cppCtx
operator|.
name|getPrunedColList
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|valCols
init|=
name|conf
operator|.
name|getValueCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|valColNames
init|=
name|conf
operator|.
name|getOutputValueColumnNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|childCols
operator|!=
literal|null
condition|)
block|{
name|boolean
index|[]
name|flags
init|=
operator|new
name|boolean
index|[
name|valCols
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|FieldNode
name|childCol
range|:
name|childCols
control|)
block|{
name|int
name|index
init|=
name|valColNames
operator|.
name|indexOf
argument_list|(
name|Utilities
operator|.
name|removeValueTag
argument_list|(
name|childCol
operator|.
name|getFieldName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
continue|continue;
block|}
name|flags
index|[
name|index
index|]
operator|=
literal|true
expr_stmt|;
name|colLists
operator|=
name|mergeFieldNodesWithDesc
argument_list|(
name|colLists
argument_list|,
name|valCols
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|colLists
argument_list|,
operator|new
name|Comparator
argument_list|<
name|FieldNode
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|FieldNode
name|o1
parameter_list|,
name|FieldNode
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getFieldName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getFieldName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|pruneReduceSinkOperator
argument_list|(
name|flags
argument_list|,
name|op
argument_list|,
name|cppCtx
argument_list|)
expr_stmt|;
name|cppCtx
operator|.
name|getPrunedColLists
argument_list|()
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|colLists
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Reduce Sink contains the columns needed - no need to aggregate from
comment|// children
for|for
control|(
name|ExprNodeDesc
name|val
range|:
name|valCols
control|)
block|{
name|colLists
operator|=
name|mergeFieldNodesWithDesc
argument_list|(
name|colLists
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
name|cppCtx
operator|.
name|getPrunedColLists
argument_list|()
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|colLists
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * The Factory method to get ColumnPrunerReduceSinkProc class.    *    * @return ColumnPrunerReduceSinkProc    */
specifier|public
specifier|static
name|ColumnPrunerReduceSinkProc
name|getReduceSinkProc
parameter_list|()
block|{
return|return
operator|new
name|ColumnPrunerReduceSinkProc
argument_list|()
return|;
block|}
comment|/**    * The Node Processor for Column Pruning on Lateral View Join Operators.    */
specifier|public
specifier|static
class|class
name|ColumnPrunerLateralViewJoinProc
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|LateralViewJoinOperator
name|op
init|=
operator|(
name|LateralViewJoinOperator
operator|)
name|nd
decl_stmt|;
name|ColumnPrunerProcCtx
name|cppCtx
init|=
operator|(
name|ColumnPrunerProcCtx
operator|)
name|ctx
decl_stmt|;
name|List
argument_list|<
name|FieldNode
argument_list|>
name|cols
init|=
name|cppCtx
operator|.
name|genColLists
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|cols
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|colExprMap
init|=
name|op
operator|.
name|getColumnExprMap
argument_list|()
decl_stmt|;
comment|// As columns go down the DAG, the LVJ will transform internal column
comment|// names from something like 'key' to '_col0'. Because of this, we need
comment|// to undo this transformation using the column expression map as the
comment|// column names propagate up the DAG.
comment|// this is SEL(*) cols + UDTF cols
name|List
argument_list|<
name|String
argument_list|>
name|outputCols
init|=
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getOutputInternalColNames
argument_list|()
decl_stmt|;
comment|// cause we cannot prune columns from UDTF branch currently, extract
comment|// columns from SEL(*) branch only and append all columns from UDTF branch to it
name|int
name|numSelColumns
init|=
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getNumSelColumns
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldNode
argument_list|>
name|colsAfterReplacement
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldNode
argument_list|>
name|newCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|numSelColumns
condition|;
name|index
operator|++
control|)
block|{
name|String
name|colName
init|=
name|outputCols
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|FieldNode
name|col
init|=
name|lookupColumn
argument_list|(
name|cols
argument_list|,
name|colName
argument_list|)
decl_stmt|;
comment|// colExprMap.size() == size of cols from SEL(*) branch
if|if
condition|(
name|col
operator|!=
literal|null
condition|)
block|{
name|ExprNodeDesc
name|transformed
init|=
name|colExprMap
operator|.
name|get
argument_list|(
name|col
operator|.
name|getFieldName
argument_list|()
argument_list|)
decl_stmt|;
name|colsAfterReplacement
operator|=
name|mergeFieldNodesWithDesc
argument_list|(
name|colsAfterReplacement
argument_list|,
name|transformed
argument_list|)
expr_stmt|;
name|newCols
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
block|}
comment|// update number of columns from sel(*)
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|setNumSelColumns
argument_list|(
name|newCols
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// add all UDTF columns
comment|// following SEL will do CP for columns from UDTF, not adding SEL in here
name|newCols
operator|.
name|addAll
argument_list|(
name|fromColumnNames
argument_list|(
name|outputCols
operator|.
name|subList
argument_list|(
name|numSelColumns
argument_list|,
name|outputCols
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|setOutputInternalColNames
argument_list|(
name|toColumnNames
argument_list|(
name|newCols
argument_list|)
argument_list|)
expr_stmt|;
name|pruneOperator
argument_list|(
name|ctx
argument_list|,
name|op
argument_list|,
name|newCols
argument_list|)
expr_stmt|;
name|cppCtx
operator|.
name|getPrunedColLists
argument_list|()
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|colsAfterReplacement
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * The Node Processor for Column Pruning on Lateral View Forward Operators.    */
specifier|public
specifier|static
class|class
name|ColumnPrunerLateralViewForwardProc
extends|extends
name|ColumnPrunerDefaultProc
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|super
operator|.
name|process
argument_list|(
name|nd
argument_list|,
name|stack
argument_list|,
name|ctx
argument_list|,
name|nodeOutputs
argument_list|)
expr_stmt|;
name|LateralViewForwardOperator
name|op
init|=
operator|(
name|LateralViewForwardOperator
operator|)
name|nd
decl_stmt|;
name|ColumnPrunerProcCtx
name|cppCtx
init|=
operator|(
name|ColumnPrunerProcCtx
operator|)
name|ctx
decl_stmt|;
comment|// get the SEL(*) branch
name|Operator
argument_list|<
name|?
argument_list|>
name|select
init|=
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
name|LateralViewJoinOperator
operator|.
name|SELECT_TAG
argument_list|)
decl_stmt|;
comment|// Update the info of SEL operator based on the pruned reordered columns
comment|// these are from ColumnPrunerSelectProc
name|List
argument_list|<
name|FieldNode
argument_list|>
name|cols
init|=
name|cppCtx
operator|.
name|getPrunedColList
argument_list|(
name|select
argument_list|)
decl_stmt|;
name|RowSchema
name|rs
init|=
name|op
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|colList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldNode
argument_list|>
name|outputCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnInfo
name|colInfo
range|:
name|rs
operator|.
name|getSignature
argument_list|()
control|)
block|{
name|FieldNode
name|col
init|=
name|lookupColumn
argument_list|(
name|cols
argument_list|,
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|col
operator|!=
literal|null
condition|)
block|{
comment|// revert output cols of SEL(*) to ExprNodeColumnDesc
name|ExprNodeColumnDesc
name|colExpr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|colInfo
argument_list|)
decl_stmt|;
name|colList
operator|.
name|add
argument_list|(
name|colExpr
argument_list|)
expr_stmt|;
name|outputCols
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
block|}
comment|// replace SEL(*) to SEL(exprs)
operator|(
operator|(
name|SelectDesc
operator|)
name|select
operator|.
name|getConf
argument_list|()
operator|)
operator|.
name|setSelStarNoCompute
argument_list|(
literal|false
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SelectDesc
operator|)
name|select
operator|.
name|getConf
argument_list|()
operator|)
operator|.
name|setColList
argument_list|(
name|colList
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SelectDesc
operator|)
name|select
operator|.
name|getConf
argument_list|()
operator|)
operator|.
name|setOutputColumnNames
argument_list|(
name|toColumnNames
argument_list|(
name|outputCols
argument_list|)
argument_list|)
expr_stmt|;
name|pruneOperator
argument_list|(
name|ctx
argument_list|,
name|select
argument_list|,
name|outputCols
argument_list|)
expr_stmt|;
name|Operator
argument_list|<
name|?
argument_list|>
name|udtfPath
init|=
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
name|LateralViewJoinOperator
operator|.
name|UDTF_TAG
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldNode
argument_list|>
name|lvFCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|cppCtx
operator|.
name|getPrunedColLists
argument_list|()
operator|.
name|get
argument_list|(
name|udtfPath
argument_list|)
argument_list|)
decl_stmt|;
name|lvFCols
operator|=
name|mergeFieldNodes
argument_list|(
name|lvFCols
argument_list|,
name|outputCols
argument_list|)
expr_stmt|;
name|pruneOperator
argument_list|(
name|ctx
argument_list|,
name|op
argument_list|,
name|lvFCols
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * The Node Processor for Column Pruning on Select Operators.    */
specifier|public
specifier|static
class|class
name|ColumnPrunerSelectProc
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|SelectOperator
name|op
init|=
operator|(
name|SelectOperator
operator|)
name|nd
decl_stmt|;
name|ColumnPrunerProcCtx
name|cppCtx
init|=
operator|(
name|ColumnPrunerProcCtx
operator|)
name|ctx
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|getChildOperators
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
range|:
name|op
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
comment|// UDTF is not handled yet, so the parent SelectOp of UDTF should just assume
comment|// all columns.
if|if
condition|(
operator|(
name|child
operator|instanceof
name|UDTFOperator
operator|)
condition|)
block|{
name|cppCtx
operator|.
name|getPrunedColLists
argument_list|()
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|cppCtx
operator|.
name|getColsFromSelectExpr
argument_list|(
name|op
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
name|LateralViewJoinOperator
name|lvJoin
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|isSelStarNoCompute
argument_list|()
condition|)
block|{
assert|assert
name|op
operator|.
name|getNumChild
argument_list|()
operator|==
literal|1
assert|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
init|=
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|LateralViewJoinOperator
condition|)
block|{
comment|// this SEL is SEL(*)
comment|// for LV
name|lvJoin
operator|=
operator|(
name|LateralViewJoinOperator
operator|)
name|child
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|FieldNode
argument_list|>
name|cols
init|=
name|cppCtx
operator|.
name|genColLists
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|SelectDesc
name|conf
init|=
name|op
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|lvJoin
operator|!=
literal|null
condition|)
block|{
comment|// get columns for SEL(*) from LVJ
if|if
condition|(
name|cols
operator|!=
literal|null
condition|)
block|{
name|RowSchema
name|rs
init|=
name|op
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|cppCtx
operator|.
name|getPrunedColLists
argument_list|()
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|cppCtx
operator|.
name|getSelectColsFromLVJoin
argument_list|(
name|rs
argument_list|,
name|cols
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|// The input to the select does not matter. Go over the expressions
comment|// and return the ones which have a marked column
name|cppCtx
operator|.
name|getPrunedColLists
argument_list|()
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|cppCtx
operator|.
name|getSelectColsFromChildren
argument_list|(
name|op
argument_list|,
name|cols
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cols
operator|==
literal|null
operator|||
name|conf
operator|.
name|isSelStarNoCompute
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// do we need to prune the select operator?
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|originalColList
init|=
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getColList
argument_list|()
decl_stmt|;
comment|// by now, 'prunedCols' are columns used by child operators, and 'columns'
comment|// are columns used by this select operator.
name|List
argument_list|<
name|String
argument_list|>
name|originalOutputColumnNames
init|=
name|conf
operator|.
name|getOutputColumnNames
argument_list|()
decl_stmt|;
comment|// get view column authorization.
if|if
condition|(
name|cppCtx
operator|.
name|getParseContext
argument_list|()
operator|.
name|getColumnAccessInfo
argument_list|()
operator|!=
literal|null
operator|&&
name|cppCtx
operator|.
name|getParseContext
argument_list|()
operator|.
name|getViewProjectToTableSchema
argument_list|()
operator|!=
literal|null
operator|&&
name|cppCtx
operator|.
name|getParseContext
argument_list|()
operator|.
name|getViewProjectToTableSchema
argument_list|()
operator|.
name|containsKey
argument_list|(
name|op
argument_list|)
condition|)
block|{
for|for
control|(
name|FieldNode
name|col
range|:
name|cols
control|)
block|{
name|int
name|index
init|=
name|originalOutputColumnNames
operator|.
name|indexOf
argument_list|(
name|col
operator|.
name|getFieldName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|tab
init|=
name|cppCtx
operator|.
name|getParseContext
argument_list|()
operator|.
name|getViewProjectToTableSchema
argument_list|()
operator|.
name|get
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fullFieldList
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
name|tab
operator|.
name|getCols
argument_list|()
argument_list|)
decl_stmt|;
name|fullFieldList
operator|.
name|addAll
argument_list|(
name|tab
operator|.
name|getPartCols
argument_list|()
argument_list|)
expr_stmt|;
name|cppCtx
operator|.
name|getParseContext
argument_list|()
operator|.
name|getColumnAccessInfo
argument_list|()
operator|.
name|add
argument_list|(
name|tab
operator|.
name|getCompleteName
argument_list|()
argument_list|,
name|fullFieldList
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cols
operator|.
name|size
argument_list|()
operator|<
name|originalOutputColumnNames
operator|.
name|size
argument_list|()
condition|)
block|{
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|newColList
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|newOutputColumnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|rs_oldsignature
init|=
name|op
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|rs_newsignature
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|// The pruning needs to preserve the order of columns in the input schema
name|Set
argument_list|<
name|String
argument_list|>
name|colNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldNode
name|col
range|:
name|cols
control|)
block|{
name|colNames
operator|.
name|add
argument_list|(
name|col
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|originalOutputColumnNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|colName
init|=
name|originalOutputColumnNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|colNames
operator|.
name|contains
argument_list|(
name|colName
argument_list|)
condition|)
block|{
name|newOutputColumnNames
operator|.
name|add
argument_list|(
name|colName
argument_list|)
expr_stmt|;
name|newColList
operator|.
name|add
argument_list|(
name|originalColList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|rs_newsignature
operator|.
name|add
argument_list|(
name|rs_oldsignature
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|op
operator|.
name|getSchema
argument_list|()
operator|.
name|setSignature
argument_list|(
name|rs_newsignature
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setColList
argument_list|(
name|newColList
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputColumnNames
argument_list|(
name|newOutputColumnNames
argument_list|)
expr_stmt|;
name|handleChildren
argument_list|(
name|op
argument_list|,
name|toColumnNames
argument_list|(
name|cols
argument_list|)
argument_list|,
name|cppCtx
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * since we pruned the select operator, we should let its children operator      * know that. ReduceSinkOperator may send out every output columns of its      * parent select. When the select operator is pruned, its child reduce      * sink(direct child) operator should also be pruned.      *      * @param op      * @param retainedSelOutputCols      * @throws SemanticException      */
specifier|private
name|void
name|handleChildren
parameter_list|(
name|SelectOperator
name|op
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|retainedSelOutputCols
parameter_list|,
name|ColumnPrunerProcCtx
name|cppCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
range|:
name|op
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|ReduceSinkOperator
condition|)
block|{
name|boolean
index|[]
name|flags
init|=
name|getPruneReduceSinkOpRetainFlags
argument_list|(
name|retainedSelOutputCols
argument_list|,
operator|(
name|ReduceSinkOperator
operator|)
name|child
argument_list|)
decl_stmt|;
name|pruneReduceSinkOperator
argument_list|(
name|flags
argument_list|,
operator|(
name|ReduceSinkOperator
operator|)
name|child
argument_list|,
name|cppCtx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|child
operator|instanceof
name|FilterOperator
condition|)
block|{
comment|// filter operator has the same output columns as its parent
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|filterChild
range|:
name|child
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
if|if
condition|(
name|filterChild
operator|instanceof
name|ReduceSinkOperator
condition|)
block|{
name|boolean
index|[]
name|flags
init|=
name|getPruneReduceSinkOpRetainFlags
argument_list|(
name|retainedSelOutputCols
argument_list|,
operator|(
name|ReduceSinkOperator
operator|)
name|filterChild
argument_list|)
decl_stmt|;
name|pruneReduceSinkOperator
argument_list|(
name|flags
argument_list|,
operator|(
name|ReduceSinkOperator
operator|)
name|filterChild
argument_list|,
name|cppCtx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|boolean
index|[]
name|getPruneReduceSinkOpRetainFlags
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|retainedParentOpOutputCols
parameter_list|,
name|ReduceSinkOperator
name|reduce
parameter_list|)
block|{
name|ReduceSinkDesc
name|reduceConf
init|=
name|reduce
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|originalValueEval
init|=
name|reduceConf
operator|.
name|getValueCols
argument_list|()
decl_stmt|;
name|boolean
index|[]
name|flags
init|=
operator|new
name|boolean
index|[
name|originalValueEval
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|originalValueEval
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|flags
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|current
init|=
name|originalValueEval
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getCols
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
operator|||
name|current
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|flags
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|current
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|retainedParentOpOutputCols
operator|.
name|contains
argument_list|(
name|current
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
block|{
name|flags
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|flags
return|;
block|}
specifier|private
specifier|static
name|void
name|pruneReduceSinkOperator
parameter_list|(
name|boolean
index|[]
name|retainFlags
parameter_list|,
name|ReduceSinkOperator
name|reduce
parameter_list|,
name|ColumnPrunerProcCtx
name|cppCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ReduceSinkDesc
name|reduceConf
init|=
name|reduce
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|oldMap
init|=
name|reduce
operator|.
name|getColumnExprMap
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"RS "
operator|+
name|reduce
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|" oldColExprMap: "
operator|+
name|oldMap
argument_list|)
expr_stmt|;
name|RowSchema
name|oldRS
init|=
name|reduce
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|old_signature
init|=
name|oldRS
operator|.
name|getSignature
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|signature
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|(
name|old_signature
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|valueColNames
init|=
name|reduceConf
operator|.
name|getOutputValueColumnNames
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|newValueColNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keyExprs
init|=
name|reduceConf
operator|.
name|getKeyCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|valueExprs
init|=
name|reduceConf
operator|.
name|getValueCols
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|newValueExprs
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|retainFlags
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|outputCol
init|=
name|valueColNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|outputColExpr
init|=
name|valueExprs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|retainFlags
index|[
name|i
index|]
condition|)
block|{
name|ColumnInfo
name|colInfo
init|=
name|oldRS
operator|.
name|getColumnInfo
argument_list|(
name|outputCol
argument_list|)
decl_stmt|;
if|if
condition|(
name|colInfo
operator|==
literal|null
condition|)
block|{
name|outputCol
operator|=
name|Utilities
operator|.
name|ReduceField
operator|.
name|VALUE
operator|.
name|toString
argument_list|()
operator|+
literal|"."
operator|+
name|outputCol
expr_stmt|;
name|colInfo
operator|=
name|oldRS
operator|.
name|getColumnInfo
argument_list|(
name|outputCol
argument_list|)
expr_stmt|;
block|}
comment|// In case there are multiple columns referenced to the same column name, we won't
comment|// do row resolve once more because the ColumnInfo in row resolver is already removed
if|if
condition|(
name|colInfo
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// Only remove information of a column if it is not a key,
comment|// i.e. this column is not appearing in keyExprs of the RS
if|if
condition|(
name|ExprNodeDescUtils
operator|.
name|indexOf
argument_list|(
name|outputColExpr
argument_list|,
name|keyExprs
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|oldMap
operator|.
name|remove
argument_list|(
name|outputCol
argument_list|)
expr_stmt|;
name|signature
operator|.
name|remove
argument_list|(
name|colInfo
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|newValueColNames
operator|.
name|add
argument_list|(
name|outputCol
argument_list|)
expr_stmt|;
name|newValueExprs
operator|.
name|add
argument_list|(
name|outputColExpr
argument_list|)
expr_stmt|;
block|}
block|}
name|oldRS
operator|.
name|setSignature
argument_list|(
name|signature
argument_list|)
expr_stmt|;
name|reduce
operator|.
name|getSchema
argument_list|()
operator|.
name|setSignature
argument_list|(
name|signature
argument_list|)
expr_stmt|;
name|reduceConf
operator|.
name|setOutputValueColumnNames
argument_list|(
name|newValueColNames
argument_list|)
expr_stmt|;
name|reduceConf
operator|.
name|setValueCols
argument_list|(
name|newValueExprs
argument_list|)
expr_stmt|;
name|TableDesc
name|newValueTable
init|=
name|PlanUtils
operator|.
name|getReduceValueTableDesc
argument_list|(
name|PlanUtils
operator|.
name|getFieldSchemasFromColumnList
argument_list|(
name|reduceConf
operator|.
name|getValueCols
argument_list|()
argument_list|,
name|newValueColNames
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|reduceConf
operator|.
name|setValueSerializeInfo
argument_list|(
name|newValueTable
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"RS "
operator|+
name|reduce
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|" newColExprMap: "
operator|+
name|oldMap
argument_list|)
expr_stmt|;
block|}
comment|/**    * The Factory method to get the ColumnPrunerSelectProc class.    *    * @return ColumnPrunerSelectProc    */
specifier|public
specifier|static
name|ColumnPrunerSelectProc
name|getSelectProc
parameter_list|()
block|{
return|return
operator|new
name|ColumnPrunerSelectProc
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|ColumnPrunerLateralViewJoinProc
name|getLateralViewJoinProc
parameter_list|()
block|{
return|return
operator|new
name|ColumnPrunerLateralViewJoinProc
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|ColumnPrunerLateralViewForwardProc
name|getLateralViewForwardProc
parameter_list|()
block|{
return|return
operator|new
name|ColumnPrunerLateralViewForwardProc
argument_list|()
return|;
block|}
comment|/**    * The Node Processor for Column Pruning on Join Operators.    */
specifier|public
specifier|static
class|class
name|ColumnPrunerJoinProc
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|JoinOperator
name|op
init|=
operator|(
name|JoinOperator
operator|)
name|nd
decl_stmt|;
name|pruneJoinOperator
argument_list|(
name|ctx
argument_list|,
name|op
argument_list|,
name|op
operator|.
name|getConf
argument_list|()
argument_list|,
name|op
operator|.
name|getColumnExprMap
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * The Factory method to get ColumnJoinProc class.    *    * @return ColumnPrunerJoinProc    */
specifier|public
specifier|static
name|ColumnPrunerJoinProc
name|getJoinProc
parameter_list|()
block|{
return|return
operator|new
name|ColumnPrunerJoinProc
argument_list|()
return|;
block|}
comment|/**    * The Node Processor for Column Pruning on Map Join Operators.    */
specifier|public
specifier|static
class|class
name|ColumnPrunerMapJoinProc
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|AbstractMapJoinOperator
argument_list|<
name|MapJoinDesc
argument_list|>
name|op
init|=
operator|(
name|AbstractMapJoinOperator
argument_list|<
name|MapJoinDesc
argument_list|>
operator|)
name|nd
decl_stmt|;
name|pruneJoinOperator
argument_list|(
name|ctx
argument_list|,
name|op
argument_list|,
name|op
operator|.
name|getConf
argument_list|()
argument_list|,
name|op
operator|.
name|getColumnExprMap
argument_list|()
argument_list|,
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getRetainList
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * The Factory method to get UnionProc class.    *    * @return UnionProc    */
specifier|public
specifier|static
name|ColumnPrunerUnionProc
name|getUnionProc
parameter_list|()
block|{
return|return
operator|new
name|ColumnPrunerUnionProc
argument_list|()
return|;
block|}
comment|/**    * The Node Processor for Column Pruning on Union Operators.    */
specifier|public
specifier|static
class|class
name|ColumnPrunerUnionProc
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ColumnPrunerProcCtx
name|cppCtx
init|=
operator|(
name|ColumnPrunerProcCtx
operator|)
name|ctx
decl_stmt|;
name|UnionOperator
name|op
init|=
operator|(
name|UnionOperator
operator|)
name|nd
decl_stmt|;
name|List
argument_list|<
name|FieldNode
argument_list|>
name|childColLists
init|=
name|cppCtx
operator|.
name|genColLists
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|childColLists
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RowSchema
name|inputSchema
init|=
name|op
operator|.
name|getSchema
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputSchema
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|FieldNode
argument_list|>
name|prunedCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|inputSchema
operator|.
name|getSignature
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|ColumnInfo
name|colInfo
init|=
name|inputSchema
operator|.
name|getSignature
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|FieldNode
name|fn
init|=
name|lookupColumn
argument_list|(
name|childColLists
argument_list|,
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fn
operator|!=
literal|null
condition|)
block|{
name|prunedCols
operator|.
name|add
argument_list|(
name|fn
argument_list|)
expr_stmt|;
block|}
block|}
name|cppCtx
operator|.
name|getPrunedColLists
argument_list|()
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|prunedCols
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|void
name|pruneOperator
parameter_list|(
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|,
name|List
argument_list|<
name|FieldNode
argument_list|>
name|cols
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// the pruning needs to preserve the order of columns in the input schema
name|RowSchema
name|inputSchema
init|=
name|op
operator|.
name|getSchema
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputSchema
operator|!=
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|rs
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
name|RowSchema
name|oldRS
init|=
name|op
operator|.
name|getSchema
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnInfo
name|i
range|:
name|oldRS
operator|.
name|getSignature
argument_list|()
control|)
block|{
if|if
condition|(
name|lookupColumn
argument_list|(
name|cols
argument_list|,
name|i
operator|.
name|getInternalName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|rs
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|op
operator|.
name|getSchema
argument_list|()
operator|.
name|setSignature
argument_list|(
name|rs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * The pruning needs to preserve the order of columns in the input schema    * @param op    * @param cols    * @return    * @throws SemanticException    */
specifier|private
specifier|static
name|List
argument_list|<
name|FieldNode
argument_list|>
name|preserveColumnOrder
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|,
name|List
argument_list|<
name|FieldNode
argument_list|>
name|cols
parameter_list|)
throws|throws
name|SemanticException
block|{
name|RowSchema
name|inputSchema
init|=
name|op
operator|.
name|getSchema
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputSchema
operator|!=
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|FieldNode
argument_list|>
name|rs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|inputCols
init|=
name|inputSchema
operator|.
name|getSignature
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnInfo
name|i
range|:
name|inputCols
control|)
block|{
name|FieldNode
name|fn
init|=
name|lookupColumn
argument_list|(
name|cols
argument_list|,
name|i
operator|.
name|getInternalName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fn
operator|!=
literal|null
condition|)
block|{
name|rs
operator|.
name|add
argument_list|(
name|fn
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rs
return|;
block|}
else|else
block|{
return|return
name|cols
return|;
block|}
block|}
specifier|private
specifier|static
name|void
name|pruneJoinOperator
parameter_list|(
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|CommonJoinOperator
name|op
parameter_list|,
name|JoinDesc
name|conf
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|columnExprMap
parameter_list|,
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|retainMap
parameter_list|,
name|boolean
name|mapJoin
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ColumnPrunerProcCtx
name|cppCtx
init|=
operator|(
name|ColumnPrunerProcCtx
operator|)
name|ctx
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|childOperators
init|=
name|op
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"JOIN "
operator|+
name|op
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|" oldExprs: "
operator|+
name|conf
operator|.
name|getExprs
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cppCtx
operator|.
name|genColLists
argument_list|(
name|op
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|FieldNode
argument_list|>
name|neededColList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|cppCtx
operator|.
name|genColLists
argument_list|(
name|op
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|FieldNode
argument_list|>
argument_list|>
name|prunedColLists
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
name|tag
range|:
name|conf
operator|.
name|getTagOrder
argument_list|()
control|)
block|{
name|prunedColLists
operator|.
name|put
argument_list|(
name|tag
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|FieldNode
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//add the columns in join filters
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|>
name|filters
init|=
name|conf
operator|.
name|getFilters
argument_list|()
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|>
name|iter
init|=
name|filters
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Byte
name|tag
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|desc
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|List
argument_list|<
name|FieldNode
argument_list|>
name|cols
init|=
name|prunedColLists
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
name|cols
operator|=
name|mergeFieldNodesWithDesc
argument_list|(
name|cols
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|prunedColLists
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|cols
argument_list|)
expr_stmt|;
block|}
block|}
comment|//add the columns in residual filters
if|if
condition|(
name|conf
operator|.
name|getResidualFilterExprs
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExprNodeDesc
name|desc
range|:
name|conf
operator|.
name|getResidualFilterExprs
argument_list|()
control|)
block|{
name|neededColList
operator|=
name|mergeFieldNodesWithDesc
argument_list|(
name|neededColList
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
block|}
name|RowSchema
name|joinRS
init|=
name|op
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputCols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|rs
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|newColExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|conf
operator|.
name|getOutputColumnNames
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|internalName
init|=
name|conf
operator|.
name|getOutputColumnNames
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|desc
init|=
name|columnExprMap
operator|.
name|get
argument_list|(
name|internalName
argument_list|)
decl_stmt|;
name|Byte
name|tag
init|=
name|conf
operator|.
name|getReversedExprs
argument_list|()
operator|.
name|get
argument_list|(
name|internalName
argument_list|)
decl_stmt|;
if|if
condition|(
name|lookupColumn
argument_list|(
name|neededColList
argument_list|,
name|internalName
argument_list|)
operator|==
literal|null
condition|)
block|{
name|int
name|index
init|=
name|conf
operator|.
name|getExprs
argument_list|()
operator|.
name|get
argument_list|(
name|tag
argument_list|)
operator|.
name|indexOf
argument_list|(
name|desc
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
continue|continue;
block|}
name|conf
operator|.
name|getExprs
argument_list|()
operator|.
name|get
argument_list|(
name|tag
argument_list|)
operator|.
name|remove
argument_list|(
name|desc
argument_list|)
expr_stmt|;
if|if
condition|(
name|retainMap
operator|!=
literal|null
condition|)
block|{
name|retainMap
operator|.
name|get
argument_list|(
name|tag
argument_list|)
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|FieldNode
argument_list|>
name|prunedRSList
init|=
name|prunedColLists
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
if|if
condition|(
name|prunedRSList
operator|==
literal|null
condition|)
block|{
name|prunedRSList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|prunedColLists
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|prunedRSList
argument_list|)
expr_stmt|;
block|}
name|prunedColLists
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|mergeFieldNodesWithDesc
argument_list|(
name|prunedRSList
argument_list|,
name|desc
argument_list|)
argument_list|)
expr_stmt|;
name|outputCols
operator|.
name|add
argument_list|(
name|internalName
argument_list|)
expr_stmt|;
name|newColExprMap
operator|.
name|put
argument_list|(
name|internalName
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mapJoin
condition|)
block|{
comment|// regenerate the valueTableDesc
name|List
argument_list|<
name|TableDesc
argument_list|>
name|valueTableDescs
init|=
operator|new
name|ArrayList
argument_list|<
name|TableDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|op
operator|.
name|getParentOperators
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|valueCols
init|=
name|conf
operator|.
name|getExprs
argument_list|()
operator|.
name|get
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
name|pos
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|keyOrder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|keyOrder
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
block|}
name|TableDesc
name|valueTableDesc
init|=
name|PlanUtils
operator|.
name|getMapJoinValueTableDesc
argument_list|(
name|PlanUtils
operator|.
name|getFieldSchemasFromColumnList
argument_list|(
name|valueCols
argument_list|,
literal|"mapjoinvalue"
argument_list|)
argument_list|)
decl_stmt|;
name|valueTableDescs
operator|.
name|add
argument_list|(
name|valueTableDesc
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|MapJoinDesc
operator|)
name|conf
operator|)
operator|.
name|setValueTblDescs
argument_list|(
name|valueTableDescs
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|>
name|exprs
init|=
operator|(
operator|(
name|MapJoinDesc
operator|)
name|conf
operator|)
operator|.
name|getKeys
argument_list|()
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|>
name|iters
init|=
name|exprs
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iters
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|entry
init|=
name|iters
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|lists
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|lists
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|ExprNodeDesc
name|desc
init|=
name|lists
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|Byte
name|tag
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldNode
argument_list|>
name|cols
init|=
name|prunedColLists
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
name|cols
operator|=
name|mergeFieldNodesWithDesc
argument_list|(
name|cols
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|prunedColLists
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|cols
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
range|:
name|childOperators
control|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|ReduceSinkOperator
condition|)
block|{
name|boolean
index|[]
name|flags
init|=
name|getPruneReduceSinkOpRetainFlags
argument_list|(
name|toColumnNames
argument_list|(
name|neededColList
argument_list|)
argument_list|,
operator|(
name|ReduceSinkOperator
operator|)
name|child
argument_list|)
decl_stmt|;
name|pruneReduceSinkOperator
argument_list|(
name|flags
argument_list|,
operator|(
name|ReduceSinkOperator
operator|)
name|child
argument_list|,
name|cppCtx
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|internalName
init|=
name|outputCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ColumnInfo
name|col
init|=
name|joinRS
operator|.
name|getColumnInfo
argument_list|(
name|internalName
argument_list|)
decl_stmt|;
name|rs
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"JOIN "
operator|+
name|op
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|" newExprs: "
operator|+
name|conf
operator|.
name|getExprs
argument_list|()
argument_list|)
expr_stmt|;
name|op
operator|.
name|setColumnExprMap
argument_list|(
name|newColExprMap
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputColumnNames
argument_list|(
name|outputCols
argument_list|)
expr_stmt|;
name|op
operator|.
name|getSchema
argument_list|()
operator|.
name|setSignature
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|cppCtx
operator|.
name|getJoinPrunedColLists
argument_list|()
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|prunedColLists
argument_list|)
expr_stmt|;
block|}
comment|/**    * The Factory method to get ColumnMapJoinProc class.    *    * @return ColumnPrunerMapJoinProc    */
specifier|public
specifier|static
name|ColumnPrunerMapJoinProc
name|getMapJoinProc
parameter_list|()
block|{
return|return
operator|new
name|ColumnPrunerMapJoinProc
argument_list|()
return|;
block|}
block|}
end_class

end_unit

