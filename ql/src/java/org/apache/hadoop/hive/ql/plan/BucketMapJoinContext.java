begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|BucketMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Explain
operator|.
name|Level
import|;
end_import

begin_comment
comment|/**  * was inner class of MapreLocalWork. context for bucket mapjoin (or smb join)  */
end_comment

begin_class
specifier|public
class|class
name|BucketMapJoinContext
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|// table alias (small) --> input file name (big) --> target file names (small)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|aliasBucketFileNameMapping
decl_stmt|;
specifier|private
name|String
name|mapJoinBigTableAlias
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|BucketMatcher
argument_list|>
name|bucketMatcherClass
decl_stmt|;
comment|// summary of aliasBucketFileNameMapping for test result
comment|// full paths are replaced with base filenames
specifier|private
specifier|transient
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|aliasBucketBaseFileNameMapping
decl_stmt|;
comment|// input file name (big) to bucket number
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|bucketFileNameMapping
decl_stmt|;
comment|// partition spec string to input file names (big)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|bigTablePartSpecToFileMapping
decl_stmt|;
comment|// inverse of partSpecToFileMapping, populated at runtime
specifier|private
specifier|transient
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inputToPartSpecMapping
decl_stmt|;
specifier|public
name|BucketMapJoinContext
parameter_list|()
block|{}
specifier|public
name|BucketMapJoinContext
parameter_list|(
name|MapJoinDesc
name|clone
parameter_list|)
block|{
name|this
operator|.
name|mapJoinBigTableAlias
operator|=
name|clone
operator|.
name|getBigTableAlias
argument_list|()
expr_stmt|;
name|this
operator|.
name|aliasBucketFileNameMapping
operator|=
name|clone
operator|.
name|getAliasBucketFileNameMapping
argument_list|()
expr_stmt|;
name|this
operator|.
name|bucketFileNameMapping
operator|=
name|clone
operator|.
name|getBigTableBucketNumMapping
argument_list|()
expr_stmt|;
name|this
operator|.
name|bigTablePartSpecToFileMapping
operator|=
name|clone
operator|.
name|getBigTablePartSpecToFileMapping
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setMapJoinBigTableAlias
parameter_list|(
name|String
name|bigTableAlias
parameter_list|)
block|{
name|this
operator|.
name|mapJoinBigTableAlias
operator|=
name|bigTableAlias
expr_stmt|;
block|}
specifier|public
name|void
name|deriveBucketMapJoinMapping
parameter_list|()
block|{
if|if
condition|(
name|aliasBucketFileNameMapping
operator|!=
literal|null
condition|)
block|{
name|aliasBucketBaseFileNameMapping
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|aliasToMappins
range|:
name|aliasBucketFileNameMapping
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|tableAlias
init|=
name|aliasToMappins
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|fullPathMappings
init|=
name|aliasToMappins
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|baseFileNameMapping
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|inputToBuckets
range|:
name|fullPathMappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// For a given table and its bucket full file path list,
comment|// only keep the base file name (remove file path etc).
comment|// And put the new list into the new mapping.
name|String
name|inputPath
init|=
name|inputToBuckets
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|bucketPaths
init|=
name|inputToBuckets
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|bucketBaseFileNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|bucketPaths
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|//for each bucket file, only keep its base files and store into a new list.
for|for
control|(
name|String
name|bucketFName
range|:
name|bucketPaths
control|)
block|{
name|bucketBaseFileNames
operator|.
name|add
argument_list|(
name|getBaseFileName
argument_list|(
name|bucketFName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//put the new mapping
name|baseFileNameMapping
operator|.
name|put
argument_list|(
name|getBaseFileName
argument_list|(
name|inputPath
argument_list|)
argument_list|,
name|bucketBaseFileNames
argument_list|)
expr_stmt|;
block|}
name|aliasBucketBaseFileNameMapping
operator|.
name|put
argument_list|(
name|tableAlias
argument_list|,
name|baseFileNameMapping
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Pattern
name|partPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^[^=]+=[^=]+$"
argument_list|)
decl_stmt|;
comment|// extract partition spec to file name part from path
specifier|private
name|String
name|getBaseFileName
parameter_list|(
name|String
name|string
parameter_list|)
block|{
try|try
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|string
argument_list|)
decl_stmt|;
name|Path
name|cursor
init|=
name|path
operator|.
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
name|partPattern
operator|.
name|matcher
argument_list|(
name|cursor
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|cursor
operator|=
name|cursor
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return
name|cursor
operator|.
name|toUri
argument_list|()
operator|.
name|relativize
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// This could be due to either URI syntax error or File constructor
comment|// illegal arg; we don't really care which one it is.
return|return
name|string
return|;
block|}
block|}
specifier|public
name|String
name|getMapJoinBigTableAlias
parameter_list|()
block|{
return|return
name|mapJoinBigTableAlias
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|BucketMatcher
argument_list|>
name|getBucketMatcherClass
parameter_list|()
block|{
return|return
name|bucketMatcherClass
return|;
block|}
specifier|public
name|void
name|setBucketMatcherClass
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|BucketMatcher
argument_list|>
name|bucketMatcherClass
parameter_list|)
block|{
name|this
operator|.
name|bucketMatcherClass
operator|=
name|bucketMatcherClass
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Alias Bucket File Name Mapping"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|getAliasBucketFileNameMapping
parameter_list|()
block|{
return|return
name|aliasBucketFileNameMapping
return|;
block|}
specifier|public
name|void
name|setAliasBucketFileNameMapping
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|aliasBucketFileNameMapping
parameter_list|)
block|{
name|this
operator|.
name|aliasBucketFileNameMapping
operator|=
name|aliasBucketFileNameMapping
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|aliasBucketFileNameMapping
operator|!=
literal|null
condition|)
block|{
return|return
literal|"Mapping:"
operator|+
name|aliasBucketFileNameMapping
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Alias Bucket Base File Name Mapping"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|getAliasBucketBaseFileNameMapping
parameter_list|()
block|{
return|return
name|aliasBucketBaseFileNameMapping
return|;
block|}
specifier|public
name|void
name|setAliasBucketBaseFileNameMapping
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|aliasBucketBaseFileNameMapping
parameter_list|)
block|{
name|this
operator|.
name|aliasBucketBaseFileNameMapping
operator|=
name|aliasBucketBaseFileNameMapping
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Alias Bucket Output File Name Mapping"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getBucketFileNameMapping
parameter_list|()
block|{
return|return
name|bucketFileNameMapping
return|;
block|}
specifier|public
name|void
name|setBucketFileNameMapping
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|bucketFileNameMapping
parameter_list|)
block|{
name|this
operator|.
name|bucketFileNameMapping
operator|=
name|bucketFileNameMapping
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getBigTablePartSpecToFileMapping
parameter_list|()
block|{
return|return
name|bigTablePartSpecToFileMapping
return|;
block|}
specifier|public
name|void
name|setBigTablePartSpecToFileMapping
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|bigTablePartSpecToFileMapping
parameter_list|)
block|{
name|this
operator|.
name|bigTablePartSpecToFileMapping
operator|=
name|bigTablePartSpecToFileMapping
expr_stmt|;
block|}
comment|/**    * Given a small table input file, find the mapping    * big table input file with the smallest bucket number.    */
specifier|public
name|String
name|getMappingBigFile
parameter_list|(
name|String
name|alias
parameter_list|,
name|String
name|smallFile
parameter_list|)
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|bigFiles
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|mapping
init|=
name|aliasBucketFileNameMapping
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|mapping
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
name|smallFile
argument_list|)
condition|)
block|{
name|bigFiles
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// There could be several big table input files
comment|// mapping to the same small input file.
comment|// Find that one with the lowest bucket id.
name|int
name|bucketId
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|String
name|bigFile
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|bigFiles
control|)
block|{
name|int
name|id
init|=
name|bucketFileNameMapping
operator|.
name|get
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|<
name|bucketId
condition|)
block|{
name|bucketId
operator|=
name|id
expr_stmt|;
name|bigFile
operator|=
name|f
expr_stmt|;
block|}
block|}
return|return
name|bigFile
return|;
block|}
comment|// returns fileId for SMBJoin, which consists part of result file name
comment|// needed to avoid file name conflict when big table is partitioned
specifier|public
name|String
name|createFileId
parameter_list|(
name|String
name|inputPath
parameter_list|)
block|{
name|String
name|bucketNum
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|bucketFileNameMapping
operator|.
name|get
argument_list|(
name|inputPath
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|bigTablePartSpecToFileMapping
operator|!=
literal|null
condition|)
block|{
comment|// partSpecToFileMapping is null if big table is partitioned
return|return
name|prependPartSpec
argument_list|(
name|inputPath
argument_list|,
name|bucketNum
argument_list|)
return|;
block|}
return|return
name|bucketNum
return|;
block|}
comment|// returns name of hashfile made by HASHTABLESINK which is read by MAPJOIN
specifier|public
name|String
name|createFileName
parameter_list|(
name|String
name|inputPath
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
if|if
condition|(
name|bigTablePartSpecToFileMapping
operator|!=
literal|null
condition|)
block|{
comment|// partSpecToFileMapping is null if big table is partitioned
return|return
name|prependPartSpec
argument_list|(
name|inputPath
argument_list|,
name|fileName
argument_list|)
return|;
block|}
return|return
name|fileName
return|;
block|}
comment|// prepends partition spec of input path to candidate file name
specifier|private
name|String
name|prependPartSpec
parameter_list|(
name|String
name|inputPath
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapping
init|=
name|inputToPartSpecMapping
operator|==
literal|null
condition|?
name|inputToPartSpecMapping
operator|=
name|revert
argument_list|(
name|bigTablePartSpecToFileMapping
argument_list|)
else|:
name|inputToPartSpecMapping
decl_stmt|;
name|String
name|partSpec
init|=
name|mapping
operator|.
name|get
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|inputPath
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|partSpec
operator|==
literal|null
operator|||
name|partSpec
operator|.
name|isEmpty
argument_list|()
condition|?
name|fileName
else|:
literal|"("
operator|+
name|FileUtils
operator|.
name|escapePathName
argument_list|(
name|partSpec
argument_list|)
operator|+
literal|")"
operator|+
name|fileName
return|;
block|}
comment|// revert partSpecToFileMapping to inputToPartSpecMapping
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|revert
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|mapping
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|converted
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|mapping
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|partSpec
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|converted
operator|.
name|put
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|file
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|,
name|partSpec
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|converted
return|;
block|}
block|}
end_class

end_unit

