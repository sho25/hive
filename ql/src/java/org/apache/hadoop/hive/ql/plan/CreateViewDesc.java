begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Explain
operator|.
name|Level
import|;
end_import

begin_comment
comment|/**  * CreateViewDesc.  *  */
end_comment

begin_class
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Create View"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|,
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
class|class
name|CreateViewDesc
extends|extends
name|DDLDesc
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|String
name|viewName
decl_stmt|;
specifier|private
name|String
name|originalText
decl_stmt|;
specifier|private
name|String
name|expandedText
decl_stmt|;
specifier|private
name|boolean
name|rewriteEnabled
decl_stmt|;
specifier|private
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|schema
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblProps
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|partColNames
decl_stmt|;
specifier|private
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
decl_stmt|;
specifier|private
name|String
name|comment
decl_stmt|;
specifier|private
name|boolean
name|ifNotExists
decl_stmt|;
specifier|private
name|boolean
name|orReplace
decl_stmt|;
specifier|private
name|boolean
name|isAlterViewAs
decl_stmt|;
specifier|private
name|boolean
name|isMaterialized
decl_stmt|;
specifier|private
name|String
name|inputFormat
decl_stmt|;
specifier|private
name|String
name|outputFormat
decl_stmt|;
specifier|private
name|String
name|location
decl_stmt|;
comment|// only used for materialized views
specifier|private
name|String
name|serde
decl_stmt|;
comment|// only used for materialized views
specifier|private
name|String
name|storageHandler
decl_stmt|;
comment|// only used for materialized views
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdeProps
decl_stmt|;
comment|// only used for materialized views
comment|/**    * For serialization only.    */
specifier|public
name|CreateViewDesc
parameter_list|()
block|{   }
comment|/**    * Used to create a materialized view descriptor    * @param viewName    * @param schema    * @param comment    * @param tblProps    * @param partColNames    * @param ifNotExists    * @param orReplace    * @param isAlterViewAs    * @param inputFormat    * @param outputFormat    * @param location    * @param serde    * @param storageHandler    * @param serdeProps    */
specifier|public
name|CreateViewDesc
parameter_list|(
name|String
name|viewName
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|schema
parameter_list|,
name|String
name|comment
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblProps
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partColNames
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|,
name|boolean
name|orReplace
parameter_list|,
name|boolean
name|rewriteEnabled
parameter_list|,
name|boolean
name|isAlterViewAs
parameter_list|,
name|String
name|inputFormat
parameter_list|,
name|String
name|outputFormat
parameter_list|,
name|String
name|location
parameter_list|,
name|String
name|serde
parameter_list|,
name|String
name|storageHandler
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdeProps
parameter_list|)
block|{
name|this
operator|.
name|viewName
operator|=
name|viewName
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|tblProps
operator|=
name|tblProps
expr_stmt|;
name|this
operator|.
name|partColNames
operator|=
name|partColNames
expr_stmt|;
name|this
operator|.
name|comment
operator|=
name|comment
expr_stmt|;
name|this
operator|.
name|ifNotExists
operator|=
name|ifNotExists
expr_stmt|;
name|this
operator|.
name|orReplace
operator|=
name|orReplace
expr_stmt|;
name|this
operator|.
name|isMaterialized
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|rewriteEnabled
operator|=
name|rewriteEnabled
expr_stmt|;
name|this
operator|.
name|isAlterViewAs
operator|=
name|isAlterViewAs
expr_stmt|;
name|this
operator|.
name|inputFormat
operator|=
name|inputFormat
expr_stmt|;
name|this
operator|.
name|outputFormat
operator|=
name|outputFormat
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|serde
operator|=
name|serde
expr_stmt|;
name|this
operator|.
name|storageHandler
operator|=
name|storageHandler
expr_stmt|;
name|this
operator|.
name|serdeProps
operator|=
name|serdeProps
expr_stmt|;
block|}
comment|/**    * Used to create a view descriptor    * @param viewName    * @param schema    * @param comment    * @param tblProps    * @param partColNames    * @param ifNotExists    * @param orReplace    * @param isAlterViewAs    * @param inputFormat    * @param outputFormat    * @param serde    */
specifier|public
name|CreateViewDesc
parameter_list|(
name|String
name|viewName
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|schema
parameter_list|,
name|String
name|comment
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblProps
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partColNames
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|,
name|boolean
name|orReplace
parameter_list|,
name|boolean
name|isAlterViewAs
parameter_list|,
name|String
name|inputFormat
parameter_list|,
name|String
name|outputFormat
parameter_list|,
name|String
name|serde
parameter_list|)
block|{
name|this
operator|.
name|viewName
operator|=
name|viewName
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|tblProps
operator|=
name|tblProps
expr_stmt|;
name|this
operator|.
name|partColNames
operator|=
name|partColNames
expr_stmt|;
name|this
operator|.
name|comment
operator|=
name|comment
expr_stmt|;
name|this
operator|.
name|ifNotExists
operator|=
name|ifNotExists
expr_stmt|;
name|this
operator|.
name|orReplace
operator|=
name|orReplace
expr_stmt|;
name|this
operator|.
name|isAlterViewAs
operator|=
name|isAlterViewAs
expr_stmt|;
name|this
operator|.
name|isMaterialized
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|rewriteEnabled
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|inputFormat
operator|=
name|inputFormat
expr_stmt|;
name|this
operator|.
name|outputFormat
operator|=
name|outputFormat
expr_stmt|;
name|this
operator|.
name|serde
operator|=
name|serde
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"name"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|,
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|String
name|getViewName
parameter_list|()
block|{
return|return
name|viewName
return|;
block|}
specifier|public
name|void
name|setViewName
parameter_list|(
name|String
name|viewName
parameter_list|)
block|{
name|this
operator|.
name|viewName
operator|=
name|viewName
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"original text"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|,
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|String
name|getViewOriginalText
parameter_list|()
block|{
return|return
name|originalText
return|;
block|}
specifier|public
name|void
name|setViewOriginalText
parameter_list|(
name|String
name|originalText
parameter_list|)
block|{
name|this
operator|.
name|originalText
operator|=
name|originalText
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"expanded text"
argument_list|)
specifier|public
name|String
name|getViewExpandedText
parameter_list|()
block|{
return|return
name|expandedText
return|;
block|}
specifier|public
name|void
name|setViewExpandedText
parameter_list|(
name|String
name|expandedText
parameter_list|)
block|{
name|this
operator|.
name|expandedText
operator|=
name|expandedText
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"rewrite enabled"
argument_list|)
specifier|public
name|boolean
name|isRewriteEnabled
parameter_list|()
block|{
return|return
name|rewriteEnabled
return|;
block|}
specifier|public
name|void
name|setRewriteEnabled
parameter_list|(
name|boolean
name|rewriteEnabled
parameter_list|)
block|{
name|this
operator|.
name|rewriteEnabled
operator|=
name|rewriteEnabled
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"columns"
argument_list|)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSchemaString
parameter_list|()
block|{
return|return
name|Utilities
operator|.
name|getFieldSchemaString
argument_list|(
name|schema
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
specifier|public
name|void
name|setSchema
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|schema
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"partition columns"
argument_list|)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPartColsString
parameter_list|()
block|{
return|return
name|Utilities
operator|.
name|getFieldSchemaString
argument_list|(
name|partCols
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getPartCols
parameter_list|()
block|{
return|return
name|partCols
return|;
block|}
specifier|public
name|void
name|setPartCols
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
parameter_list|)
block|{
name|this
operator|.
name|partCols
operator|=
name|partCols
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPartColNames
parameter_list|()
block|{
return|return
name|partColNames
return|;
block|}
specifier|public
name|void
name|setPartColNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partColNames
parameter_list|)
block|{
name|this
operator|.
name|partColNames
operator|=
name|partColNames
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"comment"
argument_list|)
specifier|public
name|String
name|getComment
parameter_list|()
block|{
return|return
name|comment
return|;
block|}
specifier|public
name|void
name|setComment
parameter_list|(
name|String
name|comment
parameter_list|)
block|{
name|this
operator|.
name|comment
operator|=
name|comment
expr_stmt|;
block|}
specifier|public
name|void
name|setTblProps
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblProps
parameter_list|)
block|{
name|this
operator|.
name|tblProps
operator|=
name|tblProps
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"table properties"
argument_list|)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getTblProps
parameter_list|()
block|{
return|return
name|tblProps
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"if not exists"
argument_list|,
name|displayOnlyOnTrue
operator|=
literal|true
argument_list|)
specifier|public
name|boolean
name|getIfNotExists
parameter_list|()
block|{
return|return
name|ifNotExists
return|;
block|}
specifier|public
name|void
name|setIfNotExists
parameter_list|(
name|boolean
name|ifNotExists
parameter_list|)
block|{
name|this
operator|.
name|ifNotExists
operator|=
name|ifNotExists
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"or replace"
argument_list|)
specifier|public
name|boolean
name|getOrReplace
parameter_list|()
block|{
return|return
name|orReplace
return|;
block|}
specifier|public
name|void
name|setOrReplace
parameter_list|(
name|boolean
name|orReplace
parameter_list|)
block|{
name|this
operator|.
name|orReplace
operator|=
name|orReplace
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"is alter view as select"
argument_list|,
name|displayOnlyOnTrue
operator|=
literal|true
argument_list|)
specifier|public
name|boolean
name|getIsAlterViewAs
parameter_list|()
block|{
return|return
name|isAlterViewAs
return|;
block|}
specifier|public
name|void
name|setIsAlterViewAs
parameter_list|(
name|boolean
name|isAlterViewAs
parameter_list|)
block|{
name|this
operator|.
name|isAlterViewAs
operator|=
name|isAlterViewAs
expr_stmt|;
block|}
specifier|public
name|String
name|getInputFormat
parameter_list|()
block|{
return|return
name|inputFormat
return|;
block|}
specifier|public
name|void
name|setInputFormat
parameter_list|(
name|String
name|inputFormat
parameter_list|)
block|{
name|this
operator|.
name|inputFormat
operator|=
name|inputFormat
expr_stmt|;
block|}
specifier|public
name|String
name|getOutputFormat
parameter_list|()
block|{
return|return
name|outputFormat
return|;
block|}
specifier|public
name|void
name|setOutputFormat
parameter_list|(
name|String
name|outputFormat
parameter_list|)
block|{
name|this
operator|.
name|outputFormat
operator|=
name|outputFormat
expr_stmt|;
block|}
specifier|public
name|boolean
name|isMaterialized
parameter_list|()
block|{
return|return
name|isMaterialized
return|;
block|}
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
specifier|public
name|String
name|getSerde
parameter_list|()
block|{
return|return
name|serde
return|;
block|}
specifier|public
name|String
name|getStorageHandler
parameter_list|()
block|{
return|return
name|storageHandler
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSerdeProps
parameter_list|()
block|{
return|return
name|serdeProps
return|;
block|}
block|}
end_class

end_unit

