begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
operator|.
name|HdfsFileErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class processes hadoop commands used for Erasure Coding.  * It is meant to be run only by Hive unit tests.  *  * The ‘Erasure’ commands implemented by this class allow test writers to use Erasure Coding in Hive.  * Hdfs determines whether to use Erasure Coding for a file based on the presence of an Erasure  * Coding Policy on the directory which contains the file.  * These ‘Erasure’ commands can be used to manipulate Erasure Coding Policies.  * These commands are similar to the user level commands provided by the ‘hdfs ec’ command as  * documented at:  * https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/HDFSErasureCoding.html  *  *<ul>  *<li>getPolicy:     Get an erasure coding policy for a Path.  *<li>enablePolicy:  Enable an erasure coding policy.  *<li>removePolicy:  Remove an erasure coding policy.  *<li>disablePolicy: Disable an erasure coding policy.  *<li>setPolicy:     Sets an erasure coding policy on a directory at the specified path  *<li>unsetPolicy:   Unsets an erasure coding policy on a directory at the specified path  *<li>echo:          Echo the parameters given to the command (not an ec command)  *</ul>  */
end_comment

begin_class
specifier|public
class|class
name|ErasureProcessor
implements|implements
name|CommandProcessor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ErasureProcessor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|HadoopShims
operator|.
name|HdfsErasureCodingShim
name|erasureCodingShim
decl_stmt|;
name|ErasureProcessor
parameter_list|(
name|HiveConf
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|erasureCodingShim
operator|=
name|getErasureShim
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get an instance of HdfsErasureCodingShim from a config.    */
specifier|public
specifier|static
name|HadoopShims
operator|.
name|HdfsErasureCodingShim
name|getErasureShim
parameter_list|(
name|Configuration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|HadoopShims
name|hadoopShims
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
decl_stmt|;
name|FileSystem
name|fileSystem
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|config
argument_list|)
decl_stmt|;
return|return
name|hadoopShims
operator|.
name|createHdfsErasureCodingShim
argument_list|(
name|fileSystem
argument_list|,
name|config
argument_list|)
return|;
block|}
specifier|private
name|CommandLine
name|parseCommandArgs
parameter_list|(
specifier|final
name|Options
name|opts
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ParseException
block|{
name|CommandLineParser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|private
name|void
name|writeTestOutput
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|out
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CommandProcessorResponse
name|run
parameter_list|(
name|String
name|command
parameter_list|)
throws|throws
name|CommandProcessorException
block|{
name|String
index|[]
name|args
init|=
name|command
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|CommandProcessorException
argument_list|(
literal|"Erasure Processor Helper Failed: Command arguments are empty."
argument_list|)
throw|;
block|}
if|if
condition|(
name|erasureCodingShim
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CommandProcessorException
argument_list|(
literal|"Erasure Processor Helper Failed: Hadoop erasure shim is not initialized."
argument_list|)
throw|;
block|}
name|String
name|action
init|=
name|args
index|[
literal|0
index|]
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
index|[]
name|params
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|args
argument_list|,
literal|1
argument_list|,
name|args
operator|.
name|length
argument_list|)
decl_stmt|;
try|try
block|{
switch|switch
condition|(
name|action
condition|)
block|{
comment|// note we switch on the lowercase command name
case|case
literal|"disablepolicy"
case|:
name|disablePolicy
argument_list|(
name|params
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"echo"
case|:
name|echo
argument_list|(
name|params
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"enablepolicy"
case|:
name|enablePolicy
argument_list|(
name|params
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"getpolicy"
case|:
name|getPolicy
argument_list|(
name|params
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"listpolicies"
case|:
name|listPolicies
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"setpolicy"
case|:
name|setPolicy
argument_list|(
name|params
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"removepolicy"
case|:
name|removePolicy
argument_list|(
name|params
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"unsetpolicy"
case|:
name|unsetPolicy
argument_list|(
name|params
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|CommandProcessorException
argument_list|(
literal|"Erasure Processor Helper Failed: Unknown erasure command action: "
operator|+
name|action
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommandProcessorException
argument_list|(
literal|"Erasure Processor Helper Failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|new
name|CommandProcessorResponse
argument_list|()
return|;
block|}
comment|/**    * Get an erasure coding policy for a Path.    * @param params Parameters passed to the command.    * @throws Exception if command failed.    */
specifier|private
name|void
name|getPolicy
parameter_list|(
name|String
index|[]
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|command
init|=
literal|"getPolicy"
decl_stmt|;
try|try
block|{
comment|// getPolicy -path<path>
name|Options
name|getPolicyOptions
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|String
name|pathOptionName
init|=
literal|"path"
decl_stmt|;
name|Option
name|policyOption
init|=
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|()
operator|.
name|withLongOpt
argument_list|(
name|pathOptionName
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Path for which Policy should be fetched"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|getPolicyOptions
operator|.
name|addOption
argument_list|(
name|policyOption
argument_list|)
expr_stmt|;
name|CommandLine
name|args
init|=
name|parseCommandArgs
argument_list|(
name|getPolicyOptions
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|args
operator|.
name|getOptionValue
argument_list|(
name|pathOptionName
argument_list|)
decl_stmt|;
name|HdfsFileErasureCodingPolicy
name|policy
init|=
name|erasureCodingShim
operator|.
name|getErasureCodingPolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|writeTestOutput
argument_list|(
literal|"EC policy is '"
operator|+
operator|(
name|policy
operator|!=
literal|null
condition|?
name|policy
operator|.
name|getName
argument_list|()
else|:
literal|"REPLICATED"
operator|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
name|writeTestOutput
argument_list|(
literal|"Error parsing options for "
operator|+
name|command
operator|+
literal|" "
operator|+
name|pe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|writeTestOutput
argument_list|(
literal|"Caught exception running "
operator|+
name|command
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Cannot run "
operator|+
name|command
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Echo the parameters given to the command.    * @param params parameters which will be echoed    */
specifier|private
name|void
name|echo
parameter_list|(
name|String
index|[]
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|command
init|=
literal|"echo"
decl_stmt|;
try|try
block|{
name|writeTestOutput
argument_list|(
literal|"ECHO "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|" "
argument_list|)
operator|.
name|join
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|writeTestOutput
argument_list|(
literal|"Caught exception running "
operator|+
name|command
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Cannot run "
operator|+
name|command
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Enable an erasure coding policy.    * @param params Parameters passed to the command.    * @throws Exception If command failed.    */
specifier|private
name|void
name|enablePolicy
parameter_list|(
name|String
index|[]
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|command
init|=
literal|"enablePolicy"
decl_stmt|;
try|try
block|{
comment|// enablePolicy -policy<policyName>
name|Options
name|enablePolicyOptions
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|String
name|policyOptionName
init|=
literal|"policy"
decl_stmt|;
name|Option
name|policyOption
init|=
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|()
operator|.
name|withLongOpt
argument_list|(
name|policyOptionName
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Policy to enable"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|enablePolicyOptions
operator|.
name|addOption
argument_list|(
name|policyOption
argument_list|)
expr_stmt|;
name|CommandLine
name|args
init|=
name|parseCommandArgs
argument_list|(
name|enablePolicyOptions
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|String
name|policyName
init|=
name|args
operator|.
name|getOptionValue
argument_list|(
name|policyOptionName
argument_list|)
decl_stmt|;
name|erasureCodingShim
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|policyName
argument_list|)
expr_stmt|;
name|writeTestOutput
argument_list|(
literal|"Enabled EC policy '"
operator|+
name|policyName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
name|writeTestOutput
argument_list|(
literal|"Error parsing options for "
operator|+
name|command
operator|+
literal|" "
operator|+
name|pe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|writeTestOutput
argument_list|(
literal|"Caught exception running "
operator|+
name|command
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Cannot run "
operator|+
name|command
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Remove an erasure coding policy.    * @param params Parameters passed to the command.    * @throws Exception if command failed.    */
specifier|private
name|void
name|removePolicy
parameter_list|(
name|String
index|[]
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|command
init|=
literal|"removePolicy"
decl_stmt|;
try|try
block|{
comment|// removePolicy -policy<policyName>
name|Options
name|removePolicyOptions
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|String
name|policyOptionName
init|=
literal|"policy"
decl_stmt|;
name|Option
name|policyOption
init|=
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|()
operator|.
name|withLongOpt
argument_list|(
name|policyOptionName
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Policy to remove"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|removePolicyOptions
operator|.
name|addOption
argument_list|(
name|policyOption
argument_list|)
expr_stmt|;
name|CommandLine
name|args
init|=
name|parseCommandArgs
argument_list|(
name|removePolicyOptions
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|String
name|policyName
init|=
name|args
operator|.
name|getOptionValue
argument_list|(
name|policyOptionName
argument_list|)
decl_stmt|;
name|erasureCodingShim
operator|.
name|removeErasureCodingPolicy
argument_list|(
name|policyName
argument_list|)
expr_stmt|;
name|writeTestOutput
argument_list|(
literal|"Removed EC policy '"
operator|+
name|policyName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
name|writeTestOutput
argument_list|(
literal|"Error parsing options for "
operator|+
name|command
operator|+
literal|" "
operator|+
name|pe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|writeTestOutput
argument_list|(
literal|"Caught exception running "
operator|+
name|command
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Cannot run "
operator|+
name|command
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Disable an erasure coding policy.    * @param params Parameters passed to the command.    * @throws Exception If command failed.    */
specifier|private
name|void
name|disablePolicy
parameter_list|(
name|String
index|[]
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|command
init|=
literal|"disablePolicy"
decl_stmt|;
try|try
block|{
comment|// disablePolicy -policy<policyName>
name|Options
name|disablePolicyOptions
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|String
name|policyOptionName
init|=
literal|"policy"
decl_stmt|;
name|Option
name|policyOption
init|=
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|()
operator|.
name|withLongOpt
argument_list|(
name|policyOptionName
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Policy to disable"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|disablePolicyOptions
operator|.
name|addOption
argument_list|(
name|policyOption
argument_list|)
expr_stmt|;
name|CommandLine
name|args
init|=
name|parseCommandArgs
argument_list|(
name|disablePolicyOptions
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|String
name|policyName
init|=
name|args
operator|.
name|getOptionValue
argument_list|(
name|policyOptionName
argument_list|)
decl_stmt|;
name|erasureCodingShim
operator|.
name|disableErasureCodingPolicy
argument_list|(
name|policyName
argument_list|)
expr_stmt|;
name|writeTestOutput
argument_list|(
literal|"Disabled EC policy '"
operator|+
name|policyName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
name|writeTestOutput
argument_list|(
literal|"Error parsing options for "
operator|+
name|command
operator|+
literal|" "
operator|+
name|pe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|writeTestOutput
argument_list|(
literal|"Caught exception running "
operator|+
name|command
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Cannot run "
operator|+
name|command
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Sets an erasure coding policy on a directory at the specified path.    * @param params Parameters passed to the command.    * @throws Exception If command failed.    */
specifier|private
name|void
name|setPolicy
parameter_list|(
name|String
index|[]
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|command
init|=
literal|"setPolicy"
decl_stmt|;
try|try
block|{
comment|// setPolicy -path<path> [-policy<policyName>]
name|Options
name|setPolicyOptions
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|String
name|pathOptionName
init|=
literal|"path"
decl_stmt|;
name|Option
name|pathOption
init|=
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|()
operator|.
name|withLongOpt
argument_list|(
name|pathOptionName
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Path to set policy on"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|setPolicyOptions
operator|.
name|addOption
argument_list|(
name|pathOption
argument_list|)
expr_stmt|;
name|String
name|policyOptionName
init|=
literal|"policy"
decl_stmt|;
name|Option
name|policyOption
init|=
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withLongOpt
argument_list|(
name|policyOptionName
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Policy to set"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|setPolicyOptions
operator|.
name|addOption
argument_list|(
name|policyOption
argument_list|)
expr_stmt|;
name|CommandLine
name|args
init|=
name|parseCommandArgs
argument_list|(
name|setPolicyOptions
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|args
operator|.
name|getOptionValue
argument_list|(
name|pathOptionName
argument_list|)
decl_stmt|;
name|String
name|policy
init|=
name|args
operator|.
name|getOptionValue
argument_list|(
name|policyOptionName
argument_list|)
decl_stmt|;
name|erasureCodingShim
operator|.
name|setErasureCodingPolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|writeTestOutput
argument_list|(
literal|"Set EC policy' "
operator|+
name|policy
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
name|writeTestOutput
argument_list|(
literal|"Error parsing options for "
operator|+
name|command
operator|+
literal|" "
operator|+
name|pe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|writeTestOutput
argument_list|(
literal|"Caught exception running "
operator|+
name|command
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Cannot run "
operator|+
name|command
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Unsets an erasure coding policy on a directory at the specified path.    * @param params Parameters passed to the command.    * @throws Exception if command failed.    */
specifier|private
name|void
name|unsetPolicy
parameter_list|(
name|String
index|[]
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|command
init|=
literal|"unsetPolicy"
decl_stmt|;
try|try
block|{
comment|// unsetPolicy -path<path>
name|Options
name|unsetPolicyOptions
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|String
name|pathOptionName
init|=
literal|"path"
decl_stmt|;
name|Option
name|pathOption
init|=
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|isRequired
argument_list|()
operator|.
name|withLongOpt
argument_list|(
name|pathOptionName
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Path to unset policy on"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|unsetPolicyOptions
operator|.
name|addOption
argument_list|(
name|pathOption
argument_list|)
expr_stmt|;
name|CommandLine
name|args
init|=
name|parseCommandArgs
argument_list|(
name|unsetPolicyOptions
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|args
operator|.
name|getOptionValue
argument_list|(
name|pathOptionName
argument_list|)
decl_stmt|;
name|erasureCodingShim
operator|.
name|unsetErasureCodingPolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|writeTestOutput
argument_list|(
literal|"Unset EC policy"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
name|writeTestOutput
argument_list|(
literal|"Error parsing options for "
operator|+
name|command
operator|+
literal|" "
operator|+
name|pe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|writeTestOutput
argument_list|(
literal|"Caught exception running "
operator|+
name|command
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Cannot run "
operator|+
name|command
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Comparator the compares HdfsFileErasureCodingPolicy by name.    */
specifier|private
name|Comparator
argument_list|<
name|HdfsFileErasureCodingPolicy
argument_list|>
name|nameComparator
init|=
name|Comparator
operator|.
name|comparing
argument_list|(
name|HdfsFileErasureCodingPolicy
operator|::
name|getName
argument_list|)
decl_stmt|;
specifier|private
name|void
name|listPolicies
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|List
argument_list|<
name|HdfsFileErasureCodingPolicy
argument_list|>
name|erasureCodingPolicies
init|=
name|erasureCodingShim
operator|.
name|getAllErasureCodingPolicies
argument_list|()
decl_stmt|;
name|erasureCodingPolicies
operator|.
name|sort
argument_list|(
name|nameComparator
argument_list|)
expr_stmt|;
if|if
condition|(
name|erasureCodingPolicies
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|writeTestOutput
argument_list|(
literal|"No EC Policies present"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|HdfsFileErasureCodingPolicy
name|policy
range|:
name|erasureCodingPolicies
control|)
block|{
name|writeTestOutput
argument_list|(
literal|"Policy: "
operator|+
name|policy
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|policy
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Cannot do language command: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{   }
block|}
end_class

end_unit

