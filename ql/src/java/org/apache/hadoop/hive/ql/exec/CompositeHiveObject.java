begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_comment
comment|/**  * fixed width composition of Hive Objects  */
end_comment

begin_class
specifier|public
class|class
name|CompositeHiveObject
extends|extends
name|HiveObject
block|{
specifier|public
specifier|static
class|class
name|CompositeSerDeField
implements|implements
name|SerDeField
block|{
name|int
name|position
decl_stmt|;
name|String
name|expr
decl_stmt|;
specifier|protected
name|SerDeField
name|field
decl_stmt|;
specifier|public
name|CompositeSerDeField
parameter_list|(
name|int
name|position
parameter_list|,
name|String
name|expr
parameter_list|)
block|{
name|this
operator|.
name|position
operator|=
name|position
expr_stmt|;
name|this
operator|.
name|expr
operator|=
name|expr
expr_stmt|;
block|}
specifier|public
name|HiveObject
name|getHiveObject
parameter_list|(
name|Object
name|obj
parameter_list|)
throws|throws
name|SerDeException
block|{
name|ArrayList
argument_list|<
name|HiveObject
argument_list|>
name|hol
init|=
operator|(
name|ArrayList
argument_list|<
name|HiveObject
argument_list|>
operator|)
name|obj
decl_stmt|;
name|HiveObject
name|ho
init|=
name|hol
operator|.
name|get
argument_list|(
name|this
operator|.
name|position
argument_list|)
decl_stmt|;
if|if
condition|(
name|ho
operator|==
literal|null
condition|)
return|return
operator|new
name|NullHiveObject
argument_list|()
return|;
if|if
condition|(
name|this
operator|.
name|expr
operator|==
literal|null
condition|)
block|{
comment|// no need to descend any further
return|return
name|ho
return|;
block|}
try|try
block|{
if|if
condition|(
name|this
operator|.
name|field
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|field
operator|=
name|ho
operator|.
name|getFieldFromExpression
argument_list|(
name|this
operator|.
name|expr
argument_list|)
expr_stmt|;
block|}
comment|// descend recursively
return|return
operator|(
name|ho
operator|.
name|get
argument_list|(
name|this
operator|.
name|field
argument_list|)
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Object
name|get
parameter_list|(
name|Object
name|obj
parameter_list|)
throws|throws
name|SerDeException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"get() cannot be called for CompositeSerDeField"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isList
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isMap
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isPrimitive
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
specifier|public
name|Class
name|getType
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
specifier|public
name|Class
name|getListElementType
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
specifier|public
name|Class
name|getMapKeyType
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
specifier|public
name|Class
name|getMapValueType
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
block|}
name|ArrayList
argument_list|<
name|HiveObject
argument_list|>
name|hol
decl_stmt|;
name|SerDe
name|csd
decl_stmt|;
name|int
name|width
decl_stmt|;
specifier|public
name|CompositeHiveObject
parameter_list|(
name|int
name|width
parameter_list|)
block|{
assert|assert
operator|(
name|width
operator|>
literal|0
operator|)
assert|;
name|this
operator|.
name|hol
operator|=
operator|new
name|ArrayList
argument_list|<
name|HiveObject
argument_list|>
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|this
operator|.
name|width
operator|=
name|width
expr_stmt|;
block|}
specifier|public
name|CompositeHiveObject
parameter_list|(
name|ArrayList
argument_list|<
name|HiveObject
argument_list|>
name|hol
parameter_list|)
block|{
name|this
operator|.
name|width
operator|=
name|hol
operator|.
name|size
argument_list|()
expr_stmt|;
name|this
operator|.
name|hol
operator|=
name|hol
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SerDeField
name|getFieldFromExpression
parameter_list|(
name|String
name|compositeExpr
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|position
init|=
name|this
operator|.
name|width
operator|+
literal|1
decl_stmt|;
name|String
name|expr
init|=
literal|null
decl_stmt|;
name|int
name|dot
init|=
name|compositeExpr
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|dot
operator|==
operator|-
literal|1
condition|)
block|{
name|position
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|compositeExpr
argument_list|)
expr_stmt|;
name|expr
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|position
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|compositeExpr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dot
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|=
name|compositeExpr
operator|.
name|substring
argument_list|(
name|dot
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|expr
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|expr
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Field Name is not a number: "
operator|+
name|compositeExpr
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|position
operator|>=
name|this
operator|.
name|width
operator|)
operator|||
operator|(
name|position
operator|<
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Index="
operator|+
name|position
operator|+
literal|" is not between 0 and (width=)"
operator|+
name|this
operator|.
name|width
argument_list|)
throw|;
block|}
return|return
operator|new
name|CompositeSerDeField
argument_list|(
name|position
argument_list|,
name|expr
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HiveObject
name|get
parameter_list|(
name|SerDeField
name|field
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|CompositeSerDeField
name|csdField
init|=
operator|(
name|CompositeSerDeField
operator|)
name|field
decl_stmt|;
return|return
operator|(
name|csdField
operator|.
name|getHiveObject
argument_list|(
name|this
operator|.
name|hol
argument_list|)
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SerDeField
argument_list|>
name|getFields
parameter_list|()
throws|throws
name|HiveException
block|{
name|ArrayList
argument_list|<
name|SerDeField
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|SerDeField
argument_list|>
argument_list|(
name|this
operator|.
name|width
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|width
condition|;
name|i
operator|++
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|CompositeSerDeField
argument_list|(
name|i
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ret
operator|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|SerDeField
argument_list|>
name|getFields
parameter_list|(
name|int
name|width
parameter_list|)
throws|throws
name|HiveException
block|{
name|ArrayList
argument_list|<
name|SerDeField
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|SerDeField
argument_list|>
argument_list|(
name|width
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|width
condition|;
name|i
operator|++
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|CompositeSerDeField
argument_list|(
name|i
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ret
operator|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|public
name|void
name|addHiveObject
parameter_list|(
name|HiveObject
name|ho
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|this
operator|.
name|hol
operator|.
name|size
argument_list|()
operator|>=
name|this
operator|.
name|width
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Exceeded max size of Composite Hive Object ="
operator|+
name|this
operator|.
name|width
argument_list|)
throw|;
block|}
name|this
operator|.
name|hol
operator|.
name|add
argument_list|(
name|ho
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getJavaObject
parameter_list|()
throws|throws
name|HiveException
block|{
name|ArrayList
name|result
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|HiveObject
name|ho
range|:
name|hol
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|ho
operator|==
literal|null
condition|?
literal|null
else|:
name|ho
operator|.
name|getJavaObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPrimitive
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|CompositeHiveObject
operator|)
condition|)
return|return
literal|false
return|;
name|CompositeHiveObject
name|choOther
init|=
operator|(
name|CompositeHiveObject
operator|)
name|other
decl_stmt|;
return|return
name|this
operator|.
name|hol
operator|.
name|equals
argument_list|(
name|choOther
operator|.
name|hol
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|ret
init|=
literal|12345
decl_stmt|;
for|for
control|(
name|HiveObject
name|ho
range|:
name|this
operator|.
name|hol
control|)
block|{
name|ret
operator|=
name|ret
operator|*
literal|31
operator|+
name|ho
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

