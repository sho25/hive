begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|errors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_comment
comment|/**  * TaskLogProcessor reads the logs from failed task attempts and tries to figure  * out what the cause of the error was using various heuristics.  */
end_comment

begin_class
specifier|public
class|class
name|TaskLogProcessor
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|ErrorHeuristic
argument_list|,
name|HeuristicStats
argument_list|>
name|heuristics
init|=
operator|new
name|HashMap
argument_list|<
name|ErrorHeuristic
argument_list|,
name|HeuristicStats
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|taskLogUrls
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|JobConf
name|conf
init|=
literal|null
decl_stmt|;
comment|// Query is the hive query string i.e. "SELECT * FROM src;" associated with
comment|// this set of tasks logs
specifier|private
name|String
name|query
init|=
literal|null
decl_stmt|;
specifier|public
name|TaskLogProcessor
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|query
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYSTRING
argument_list|)
expr_stmt|;
name|heuristics
operator|.
name|put
argument_list|(
operator|new
name|ScriptErrorHeuristic
argument_list|()
argument_list|,
operator|new
name|HeuristicStats
argument_list|()
argument_list|)
expr_stmt|;
name|heuristics
operator|.
name|put
argument_list|(
operator|new
name|MapAggrMemErrorHeuristic
argument_list|()
argument_list|,
operator|new
name|HeuristicStats
argument_list|()
argument_list|)
expr_stmt|;
name|heuristics
operator|.
name|put
argument_list|(
operator|new
name|DataCorruptErrorHeuristic
argument_list|()
argument_list|,
operator|new
name|HeuristicStats
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ErrorHeuristic
name|e
range|:
name|heuristics
operator|.
name|keySet
argument_list|()
control|)
block|{
name|e
operator|.
name|init
argument_list|(
name|query
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Adds a task log URL for the heuristics to read through.    * @param url    */
specifier|public
name|void
name|addTaskAttemptLogUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|taskLogUrls
operator|.
name|add
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|HeuristicStats
block|{
comment|// The number of times eh has returned non-null errors
specifier|private
name|int
name|triggerCount
init|=
literal|0
decl_stmt|;
comment|// All ErrorAndSolutions that ErrorHeuristic has generated. For the same error, they
comment|// should be the same though it's possible that different file paths etc
comment|// could generate different error messages
specifier|private
specifier|final
name|List
argument_list|<
name|ErrorAndSolution
argument_list|>
name|ens
init|=
operator|new
name|ArrayList
argument_list|<
name|ErrorAndSolution
argument_list|>
argument_list|()
decl_stmt|;
name|HeuristicStats
parameter_list|()
block|{     }
name|int
name|getTriggerCount
parameter_list|()
block|{
return|return
name|triggerCount
return|;
block|}
name|void
name|incTriggerCount
parameter_list|()
block|{
name|triggerCount
operator|++
expr_stmt|;
block|}
name|List
argument_list|<
name|ErrorAndSolution
argument_list|>
name|getErrorAndSolutions
parameter_list|()
block|{
return|return
name|ens
return|;
block|}
name|void
name|addErrorAndSolution
parameter_list|(
name|ErrorAndSolution
name|e
parameter_list|)
block|{
name|ens
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Processes the provided task logs using the known error heuristics to get    * the matching errors.    * @return A ErrorAndSolution from the ErrorHeuristic that most frequently    * generated matches. In case of ties, multiple ErrorAndSolutions will be    * returned.    */
specifier|public
name|List
argument_list|<
name|ErrorAndSolution
argument_list|>
name|getErrors
parameter_list|()
block|{
for|for
control|(
name|String
name|urlString
range|:
name|taskLogUrls
control|)
block|{
comment|// Open the log file, and read in a line. Then feed the line into
comment|// each of the ErrorHeuristics. Repeat for all the lines in the log.
name|URL
name|taskAttemptLogUrl
decl_stmt|;
try|try
block|{
name|taskAttemptLogUrl
operator|=
operator|new
name|URL
argument_list|(
name|urlString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Bad task log url"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|BufferedReader
name|in
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|taskAttemptLogUrl
operator|.
name|openStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|inputLine
decl_stmt|;
while|while
condition|(
operator|(
name|inputLine
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ErrorHeuristic
name|e
range|:
name|heuristics
operator|.
name|keySet
argument_list|()
control|)
block|{
name|e
operator|.
name|processLogLine
argument_list|(
name|inputLine
argument_list|)
expr_stmt|;
block|}
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error while reading from task log url"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Once the lines of the log file have been fed into the ErrorHeuristics,
comment|// see if they have detected anything. If any has, record
comment|// what ErrorAndSolution it gave so we can later return the most
comment|// frequently occurring error
for|for
control|(
name|Entry
argument_list|<
name|ErrorHeuristic
argument_list|,
name|HeuristicStats
argument_list|>
name|ent
range|:
name|heuristics
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ErrorHeuristic
name|eh
init|=
name|ent
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|HeuristicStats
name|hs
init|=
name|ent
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ErrorAndSolution
name|es
init|=
name|eh
operator|.
name|getErrorAndSolution
argument_list|()
decl_stmt|;
if|if
condition|(
name|es
operator|!=
literal|null
condition|)
block|{
name|hs
operator|.
name|incTriggerCount
argument_list|()
expr_stmt|;
name|hs
operator|.
name|addErrorAndSolution
argument_list|(
name|es
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Return the errors that occur the most frequently
name|int
name|max
init|=
literal|0
decl_stmt|;
for|for
control|(
name|HeuristicStats
name|hs
range|:
name|heuristics
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|hs
operator|.
name|getTriggerCount
argument_list|()
operator|>
name|max
condition|)
block|{
name|max
operator|=
name|hs
operator|.
name|getTriggerCount
argument_list|()
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|ErrorAndSolution
argument_list|>
name|errors
init|=
operator|new
name|ArrayList
argument_list|<
name|ErrorAndSolution
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HeuristicStats
name|hs
range|:
name|heuristics
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|hs
operator|.
name|getTriggerCount
argument_list|()
operator|==
name|max
condition|)
block|{
if|if
condition|(
name|hs
operator|.
name|getErrorAndSolutions
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// An error heuristic could have generated different ErrorAndSolution
comment|// for each task attempt, but most likely they are the same. Plus,
comment|// one of those is probably good enough for debugging
name|errors
operator|.
name|add
argument_list|(
name|hs
operator|.
name|getErrorAndSolutions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|errors
return|;
block|}
block|}
end_class

end_unit

