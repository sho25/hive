begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|column
operator|.
name|change
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLCheckConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLDefaultConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLForeignKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLNotNullConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLPrimaryKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLUniqueConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SkewedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLSemanticAnalyzerFactory
operator|.
name|DDLType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|AbstractAlterTableAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|constraint
operator|.
name|Constraints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|constraint
operator|.
name|ConstraintsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * Analyzer for change columns commands.  */
end_comment

begin_class
annotation|@
name|DDLType
argument_list|(
name|type
operator|=
name|HiveParser
operator|.
name|TOK_ALTERTABLE_RENAMECOL
argument_list|)
specifier|public
class|class
name|AlterTableChangeColumnAnalyzer
extends|extends
name|AbstractAlterTableAnalyzer
block|{
specifier|public
name|AlterTableChangeColumnAnalyzer
parameter_list|(
name|QueryState
name|queryState
parameter_list|)
throws|throws
name|SemanticException
block|{
name|super
argument_list|(
name|queryState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|analyzeCommand
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|ASTNode
name|command
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|//col_old_name col_new_name column_type [COMMENT col_comment] [FIRST|AFTER column_name] [CASCADE|RESTRICT]
name|String
name|oldColumnName
init|=
name|command
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|String
name|newColumnName
init|=
name|command
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|String
name|newType
init|=
name|getTypeStringFromAST
argument_list|(
operator|(
name|ASTNode
operator|)
name|command
operator|.
name|getChild
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|SkewedInfo
name|skewInfo
init|=
name|table
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
literal|null
operator|!=
name|skewInfo
operator|)
operator|&&
operator|(
literal|null
operator|!=
name|skewInfo
operator|.
name|getSkewedColNames
argument_list|()
operator|)
operator|&&
name|skewInfo
operator|.
name|getSkewedColNames
argument_list|()
operator|.
name|contains
argument_list|(
name|oldColumnName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|oldColumnName
operator|+
name|ErrorMsg
operator|.
name|ALTER_TABLE_NOT_ALLOWED_RENAME_SKEWED_COLUMN
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|newComment
init|=
literal|null
decl_stmt|;
name|boolean
name|first
init|=
literal|false
decl_stmt|;
name|String
name|flagCol
init|=
literal|null
decl_stmt|;
name|boolean
name|isCascade
init|=
literal|false
decl_stmt|;
name|ASTNode
name|constraintChild
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|3
init|;
name|i
operator|<
name|command
operator|.
name|getChildCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|command
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|child
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|StringLiteral
case|:
name|newComment
operator|=
name|unescapeSQLString
argument_list|(
name|child
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION
case|:
name|flagCol
operator|=
name|unescapeIdentifier
argument_list|(
name|child
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|KW_FIRST
case|:
name|first
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_CASCADE
case|:
name|isCascade
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_RESTRICT
case|:
break|break;
default|default:
name|constraintChild
operator|=
name|child
expr_stmt|;
block|}
block|}
name|Constraints
name|constraints
init|=
name|getConstraints
argument_list|(
name|tableName
argument_list|,
name|command
argument_list|,
name|newColumnName
argument_list|,
name|table
argument_list|,
name|constraintChild
argument_list|)
decl_stmt|;
name|AlterTableChangeColumnDesc
name|desc
init|=
operator|new
name|AlterTableChangeColumnDesc
argument_list|(
name|tableName
argument_list|,
name|partitionSpec
argument_list|,
name|isCascade
argument_list|,
name|constraints
argument_list|,
name|unescapeIdentifier
argument_list|(
name|oldColumnName
argument_list|)
argument_list|,
name|unescapeIdentifier
argument_list|(
name|newColumnName
argument_list|)
argument_list|,
name|newType
argument_list|,
name|newComment
argument_list|,
name|first
argument_list|,
name|flagCol
argument_list|)
decl_stmt|;
if|if
condition|(
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|table
argument_list|)
condition|)
block|{
comment|// Note: we might actually need it only when certain changes (e.g. name or type?) are made.
name|setAcidDdlDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
name|addInputsOutputsAlterTable
argument_list|(
name|tableName
argument_list|,
name|partitionSpec
argument_list|,
name|desc
argument_list|,
name|desc
operator|.
name|getType
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rootTasks
operator|.
name|add
argument_list|(
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork
argument_list|(
name|getInputs
argument_list|()
argument_list|,
name|getOutputs
argument_list|()
argument_list|,
name|desc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Constraints
name|getConstraints
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ASTNode
name|command
parameter_list|,
name|String
name|newColumnName
parameter_list|,
name|Table
name|table
parameter_list|,
name|ASTNode
name|constraintChild
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|primaryKeys
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|foreignKeys
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uniqueConstraints
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|notNullConstraints
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|SQLDefaultConstraint
argument_list|>
name|defaultConstraints
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|SQLCheckConstraint
argument_list|>
name|checkConstraints
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|constraintChild
operator|!=
literal|null
condition|)
block|{
comment|// Process column constraint
switch|switch
condition|(
name|constraintChild
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|TOK_CHECK_CONSTRAINT
case|:
name|checkConstraints
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|ConstraintsUtils
operator|.
name|processCheckConstraints
argument_list|(
name|tableName
argument_list|,
name|constraintChild
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|newColumnName
argument_list|)
argument_list|,
name|checkConstraints
argument_list|,
operator|(
name|ASTNode
operator|)
name|command
operator|.
name|getChild
argument_list|(
literal|2
argument_list|)
argument_list|,
name|this
operator|.
name|ctx
operator|.
name|getTokenRewriteStream
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_DEFAULT_VALUE
case|:
name|defaultConstraints
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|ConstraintsUtils
operator|.
name|processDefaultConstraints
argument_list|(
name|tableName
argument_list|,
name|constraintChild
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|newColumnName
argument_list|)
argument_list|,
name|defaultConstraints
argument_list|,
operator|(
name|ASTNode
operator|)
name|command
operator|.
name|getChild
argument_list|(
literal|2
argument_list|)
argument_list|,
name|this
operator|.
name|ctx
operator|.
name|getTokenRewriteStream
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_NOT_NULL
case|:
name|notNullConstraints
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|ConstraintsUtils
operator|.
name|processNotNullConstraints
argument_list|(
name|tableName
argument_list|,
name|constraintChild
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|newColumnName
argument_list|)
argument_list|,
name|notNullConstraints
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_UNIQUE
case|:
name|uniqueConstraints
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|ConstraintsUtils
operator|.
name|processUniqueConstraints
argument_list|(
name|tableName
argument_list|,
name|constraintChild
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|newColumnName
argument_list|)
argument_list|,
name|uniqueConstraints
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_PRIMARY_KEY
case|:
name|primaryKeys
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|ConstraintsUtils
operator|.
name|processPrimaryKeys
argument_list|(
name|tableName
argument_list|,
name|constraintChild
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|newColumnName
argument_list|)
argument_list|,
name|primaryKeys
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_FOREIGN_KEY
case|:
name|foreignKeys
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|ConstraintsUtils
operator|.
name|processForeignKeys
argument_list|(
name|tableName
argument_list|,
name|constraintChild
argument_list|,
name|foreignKeys
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|NOT_RECOGNIZED_CONSTRAINT
operator|.
name|getMsg
argument_list|(
name|constraintChild
operator|.
name|getToken
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/* Validate the operation of renaming a column name. */
if|if
condition|(
name|checkConstraints
operator|!=
literal|null
operator|&&
operator|!
name|checkConstraints
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ConstraintsUtils
operator|.
name|validateCheckConstraint
argument_list|(
name|table
operator|.
name|getCols
argument_list|()
argument_list|,
name|checkConstraints
argument_list|,
name|ctx
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|table
operator|.
name|getTableType
argument_list|()
operator|==
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|&&
name|ConstraintsUtils
operator|.
name|hasEnabledOrValidatedConstraints
argument_list|(
name|notNullConstraints
argument_list|,
name|defaultConstraints
argument_list|,
name|checkConstraints
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_CSTR_SYNTAX
operator|.
name|getMsg
argument_list|(
literal|"Constraints are disallowed with External tables. Only RELY is allowed."
argument_list|)
argument_list|)
throw|;
block|}
return|return
operator|new
name|Constraints
argument_list|(
name|primaryKeys
argument_list|,
name|foreignKeys
argument_list|,
name|notNullConstraints
argument_list|,
name|uniqueConstraints
argument_list|,
name|defaultConstraints
argument_list|,
name|checkConstraints
argument_list|)
return|;
block|}
block|}
end_class

end_unit

