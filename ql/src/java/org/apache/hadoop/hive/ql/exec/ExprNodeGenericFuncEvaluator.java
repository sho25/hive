begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_class
specifier|public
class|class
name|ExprNodeGenericFuncEvaluator
extends|extends
name|ExprNodeEvaluator
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ExprNodeGenericFuncEvaluator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|ExprNodeGenericFuncDesc
name|expr
decl_stmt|;
specifier|transient
name|GenericUDF
name|genericUDF
decl_stmt|;
specifier|transient
name|Object
name|rowObject
decl_stmt|;
specifier|transient
name|ExprNodeEvaluator
index|[]
name|children
decl_stmt|;
specifier|transient
name|DeferredExprObject
index|[]
name|deferredChildren
decl_stmt|;
comment|/**    * Class to allow deferred evaluation for GenericUDF.    */
class|class
name|DeferredExprObject
implements|implements
name|GenericUDF
operator|.
name|DeferredObject
block|{
name|ExprNodeEvaluator
name|eval
decl_stmt|;
name|DeferredExprObject
parameter_list|(
name|ExprNodeEvaluator
name|eval
parameter_list|)
block|{
name|this
operator|.
name|eval
operator|=
name|eval
expr_stmt|;
block|}
specifier|public
name|Object
name|get
parameter_list|()
throws|throws
name|HiveException
block|{
return|return
name|eval
operator|.
name|evaluate
argument_list|(
name|rowObject
argument_list|)
return|;
block|}
block|}
empty_stmt|;
specifier|public
name|ExprNodeGenericFuncEvaluator
parameter_list|(
name|ExprNodeGenericFuncDesc
name|expr
parameter_list|)
block|{
name|this
operator|.
name|expr
operator|=
name|expr
expr_stmt|;
name|children
operator|=
operator|new
name|ExprNodeEvaluator
index|[
name|expr
operator|.
name|getChildExprs
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|children
index|[
name|i
index|]
operator|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|expr
operator|.
name|getChildExprs
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|deferredChildren
operator|=
operator|new
name|DeferredExprObject
index|[
name|expr
operator|.
name|getChildExprs
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deferredChildren
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|deferredChildren
index|[
name|i
index|]
operator|=
operator|new
name|DeferredExprObject
argument_list|(
name|children
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
name|rowInspector
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Initialize all children first
name|ObjectInspector
index|[]
name|childrenOIs
init|=
operator|new
name|ObjectInspector
index|[
name|children
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|childrenOIs
index|[
name|i
index|]
operator|=
name|children
index|[
name|i
index|]
operator|.
name|initialize
argument_list|(
name|rowInspector
argument_list|)
expr_stmt|;
block|}
name|genericUDF
operator|=
name|expr
operator|.
name|getGenericUDF
argument_list|()
expr_stmt|;
return|return
name|genericUDF
operator|.
name|initialize
argument_list|(
name|childrenOIs
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Object
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
name|rowObject
operator|=
name|row
expr_stmt|;
return|return
name|genericUDF
operator|.
name|evaluate
argument_list|(
name|deferredChildren
argument_list|)
return|;
block|}
block|}
end_class

end_unit

