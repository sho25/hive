begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
package|;
end_package

begin_comment
comment|/**  * This class makes sense of {@link RecordIdentifier#getBucketProperty()}.  Up until ASF Hive 3.0 this  * field was simply the bucket ID.  Since 3.0 it does bit packing to store several things:  * top 3 bits - version describing the format (we can only have 8).  * The rest is version specific - see below.  */
end_comment

begin_enum
specifier|public
enum|enum
name|BucketCodec
block|{
comment|/**    * This is the "legacy" version.  The whole {@code bucket} value just has the bucket ID in it.    * The numeric code for this version is 0. (Assumes bucket ID takes less than 29 bits... which    * implies top 3 bits are 000 so data written before Hive 3.0 is readable with this scheme).    */
name|V0
argument_list|(
literal|0
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|int
name|decodeWriterId
parameter_list|(
name|int
name|bucketProperty
parameter_list|)
block|{
return|return
name|bucketProperty
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|decodeStatementId
parameter_list|(
name|int
name|bucketProperty
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|encode
parameter_list|(
name|AcidOutputFormat
operator|.
name|Options
name|options
parameter_list|)
block|{
return|return
name|options
operator|.
name|getBucketId
argument_list|()
return|;
block|}
block|}
block|,
comment|/**    * Represents format of "bucket" property in Hive 3.0.    * top 3 bits - version code.    * next 1 bit - reserved for future    * next 12 bits - the bucket ID    * next 4 bits reserved for future    * remaining 12 bits - the statement ID - 0-based numbering of all statements within a    * transaction.  Each leg of a multi-insert statement gets a separate statement ID.    * The reserved bits align it so that it easier to interpret it in Hex.    *     * Constructs like Merge and Multi-Insert may have multiple tasks writing data that belongs to    * the same physical bucket file.  For example, a Merge stmt with update and insert clauses,    * (and split update enabled - should be the default in 3.0).  A task on behalf of insert may    * be writing a row into bucket 0 and another task in the update branch may be writing an insert    * event into bucket 0.  Each of these task are writing to different delta directory - distinguished    * by statement ID.  By including both bucket ID and statement ID in {@link RecordIdentifier}    * we ensure that {@link RecordIdentifier} is unique.    *     * The intent is that sorting rows by {@link RecordIdentifier} groups rows in the same physical    * bucket next to each other.    * For any row created by a given version of Hive, top 3 bits are constant.  The next    * most significant bits are the bucket ID, then the statement ID.  This ensures that    * {@link org.apache.hadoop.hive.ql.optimizer.SortedDynPartitionOptimizer} works which is    * designed so that each task only needs to keep 1 writer opened at a time.  It could be    * configured such that a single writer sees data for multiple buckets so it must "group" data    * by bucket ID (and then sort within each bucket as required) which is achieved via sorting    * by {@link RecordIdentifier} which includes the {@link RecordIdentifier#getBucketProperty()}    * which has the actual bucket ID in the high order bits.  This scheme also ensures that     * {@link org.apache.hadoop.hive.ql.exec.FileSinkOperator#process(Object, int)} works in case    * there numBuckets> numReducers.  (The later could be fixed by changing how writers are    * initialized in "if (fpaths.acidLastBucket != bucketNum) {")    */
name|V1
argument_list|(
literal|1
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|int
name|decodeWriterId
parameter_list|(
name|int
name|bucketProperty
parameter_list|)
block|{
return|return
operator|(
name|bucketProperty
operator|&
literal|0b0000_1111_1111_1111_0000_0000_0000_0000
operator|)
operator|>>>
literal|16
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|decodeStatementId
parameter_list|(
name|int
name|bucketProperty
parameter_list|)
block|{
return|return
operator|(
name|bucketProperty
operator|&
literal|0b0000_0000_0000_0000_0000_1111_1111_1111
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|encode
parameter_list|(
name|AcidOutputFormat
operator|.
name|Options
name|options
parameter_list|)
block|{
name|int
name|statementId
init|=
name|options
operator|.
name|getStatementId
argument_list|()
operator|>=
literal|0
condition|?
name|options
operator|.
name|getStatementId
argument_list|()
else|:
literal|0
decl_stmt|;
assert|assert
name|this
operator|.
name|version
operator|>=
literal|0
operator|&&
name|this
operator|.
name|version
operator|<=
name|MAX_VERSION
operator|:
literal|"Version out of range: "
operator|+
name|version
assert|;
if|if
condition|(
operator|!
operator|(
name|options
operator|.
name|getBucketId
argument_list|()
operator|>=
literal|0
operator|&&
name|options
operator|.
name|getBucketId
argument_list|()
operator|<=
name|MAX_BUCKET_ID
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bucketId out of range: "
operator|+
name|options
operator|.
name|getBucketId
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|statementId
operator|>=
literal|0
operator|&&
name|statementId
operator|<=
name|MAX_STATEMENT_ID
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"statementId out of range: "
operator|+
name|statementId
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|version
operator|<<
operator|(
literal|1
operator|+
name|NUM_BUCKET_ID_BITS
operator|+
literal|4
operator|+
name|NUM_STATEMENT_ID_BITS
operator|)
operator||
name|options
operator|.
name|getBucketId
argument_list|()
operator|<<
operator|(
literal|4
operator|+
name|NUM_STATEMENT_ID_BITS
operator|)
operator||
name|statementId
return|;
block|}
block|}
block|;
specifier|private
specifier|static
specifier|final
name|int
name|TOP3BITS_MASK
init|=
literal|0b1110_0000_0000_0000_0000_0000_0000_0000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_VERSION_BITS
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_BUCKET_ID_BITS
init|=
literal|12
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_STATEMENT_ID_BITS
init|=
literal|12
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_VERSION
init|=
operator|(
literal|1
operator|<<
name|NUM_VERSION_BITS
operator|)
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_BUCKET_ID
init|=
operator|(
literal|1
operator|<<
name|NUM_BUCKET_ID_BITS
operator|)
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_STATEMENT_ID
init|=
operator|(
literal|1
operator|<<
name|NUM_STATEMENT_ID_BITS
operator|)
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|static
name|BucketCodec
name|determineVersion
parameter_list|(
name|int
name|bucket
parameter_list|)
block|{
assert|assert
literal|7
operator|<<
literal|29
operator|==
name|BucketCodec
operator|.
name|TOP3BITS_MASK
assert|;
comment|//look at top 3 bits and return appropriate enum
try|try
block|{
return|return
name|getCodec
argument_list|(
operator|(
name|BucketCodec
operator|.
name|TOP3BITS_MASK
operator|&
name|bucket
operator|)
operator|>>>
literal|29
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|" Cannot decode version from "
operator|+
name|bucket
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|BucketCodec
name|getCodec
parameter_list|(
name|int
name|version
parameter_list|)
block|{
switch|switch
condition|(
name|version
condition|)
block|{
case|case
literal|0
case|:
return|return
name|BucketCodec
operator|.
name|V0
return|;
case|case
literal|1
case|:
return|return
name|BucketCodec
operator|.
name|V1
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal 'bucket' format. Version="
operator|+
name|version
argument_list|)
throw|;
block|}
block|}
specifier|final
name|int
name|version
decl_stmt|;
name|BucketCodec
parameter_list|(
name|int
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
comment|/**    * For bucketed tables this the bucketId, otherwise writerId    */
specifier|public
specifier|abstract
name|int
name|decodeWriterId
parameter_list|(
name|int
name|bucketProperty
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|int
name|decodeStatementId
parameter_list|(
name|int
name|bucketProperty
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|int
name|encode
parameter_list|(
name|AcidOutputFormat
operator|.
name|Options
name|options
parameter_list|)
function_decl|;
specifier|public
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
block|}
end_enum

end_unit

