begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentLengthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ConstantObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorConverter
operator|.
name|TimestampConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * GenericUDFTrunc.  *  * Returns the first day of the month which the date belongs to. The time part of the date will be  * ignored.  *  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"trunc"
argument_list|,
name|value
operator|=
literal|"_FUNC_(date, fmt) / _FUNC_(N,D) - Returns If input is date returns date with the time portion of the day truncated "
operator|+
literal|"to the unit specified by the format model fmt. If you omit fmt, then date is truncated to "
operator|+
literal|"the nearest day. It now only supports 'MONTH'/'MON'/'MM' and 'YEAR'/'YYYY'/'YY' as format."
operator|+
literal|"If input is a number group returns N truncated to D decimal places. If D is omitted, then N is truncated to 0 places."
operator|+
literal|"D can be negative to truncate (make zero) D digits left of the decimal point."
argument_list|,
name|extended
operator|=
literal|"date is a string in the format 'yyyy-MM-dd HH:mm:ss' or 'yyyy-MM-dd'."
operator|+
literal|" The time part of date is ignored.\n"
operator|+
literal|"Example:\n "
operator|+
literal|"> SELECT _FUNC_('2009-02-12', 'MM');\n"
operator|+
literal|"OK\n"
operator|+
literal|" '2009-02-01'"
operator|+
literal|"\n"
operator|+
literal|"> SELECT _FUNC_('2015-10-27', 'YEAR');\n"
operator|+
literal|"OK\n"
operator|+
literal|" '2015-01-01'"
operator|+
literal|"> SELECT _FUNC_(1234567891.1234567891,4);\n"
operator|+
literal|"OK\n"
operator|+
literal|" 1234567891.1234"
operator|+
literal|"\n"
operator|+
literal|"> SELECT _FUNC_(1234567891.1234567891,-4);\n"
operator|+
literal|"OK\n"
operator|+
literal|" 1234560000"
operator|+
literal|"> SELECT _FUNC_(1234567891.1234567891,0);\n"
operator|+
literal|"OK\n"
operator|+
literal|" 1234567891"
operator|+
literal|"\n"
operator|+
literal|"> SELECT _FUNC_(1234567891.1234567891);\n"
operator|+
literal|"OK\n"
operator|+
literal|" 1234567891"
argument_list|)
specifier|public
class|class
name|GenericUDFTrunc
extends|extends
name|GenericUDF
block|{
specifier|private
specifier|transient
name|SimpleDateFormat
name|formatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
decl_stmt|;
specifier|private
specifier|transient
name|TimestampConverter
name|timestampConverter
decl_stmt|;
specifier|private
specifier|transient
name|Converter
name|textConverter1
decl_stmt|;
specifier|private
specifier|transient
name|Converter
name|textConverter2
decl_stmt|;
specifier|private
specifier|transient
name|Converter
name|dateWritableConverter
decl_stmt|;
specifier|private
specifier|transient
name|Converter
name|byteConverter
decl_stmt|;
specifier|private
specifier|transient
name|Converter
name|shortConverter
decl_stmt|;
specifier|private
specifier|transient
name|Converter
name|intConverter
decl_stmt|;
specifier|private
specifier|transient
name|Converter
name|longConverter
decl_stmt|;
specifier|private
specifier|transient
name|PrimitiveCategory
name|inputType1
decl_stmt|;
specifier|private
specifier|transient
name|PrimitiveCategory
name|inputType2
decl_stmt|;
specifier|private
specifier|final
name|Calendar
name|calendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Text
name|output
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
specifier|private
specifier|transient
name|String
name|fmtInput
decl_stmt|;
specifier|private
specifier|transient
name|PrimitiveObjectInspector
name|inputOI
decl_stmt|;
specifier|private
specifier|transient
name|PrimitiveObjectInspector
name|inputScaleOI
decl_stmt|;
specifier|private
name|int
name|scale
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|inputSacleConst
decl_stmt|;
specifier|private
name|boolean
name|dateTypeArg
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
if|if
condition|(
name|arguments
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|inputType1
operator|=
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
literal|0
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
expr_stmt|;
name|inputType2
operator|=
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
literal|1
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
name|inputType1
argument_list|)
operator|==
name|PrimitiveGrouping
operator|.
name|DATE_GROUP
operator|||
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
name|inputType1
argument_list|)
operator|==
name|PrimitiveGrouping
operator|.
name|STRING_GROUP
operator|)
operator|&&
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
name|inputType2
argument_list|)
operator|==
name|PrimitiveGrouping
operator|.
name|STRING_GROUP
condition|)
block|{
name|dateTypeArg
operator|=
literal|true
expr_stmt|;
return|return
name|initializeDate
argument_list|(
name|arguments
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
name|inputType1
argument_list|)
operator|==
name|PrimitiveGrouping
operator|.
name|NUMERIC_GROUP
operator|&&
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
name|inputType2
argument_list|)
operator|==
name|PrimitiveGrouping
operator|.
name|NUMERIC_GROUP
condition|)
block|{
name|dateTypeArg
operator|=
literal|false
expr_stmt|;
return|return
name|initializeNumber
argument_list|(
name|arguments
argument_list|)
return|;
block|}
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"Got wrong argument types : first argument type : "
operator|+
name|arguments
index|[
literal|0
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|", second argument type : "
operator|+
name|arguments
index|[
literal|1
index|]
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|arguments
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|inputType1
operator|=
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
literal|0
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
expr_stmt|;
if|if
condition|(
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
name|inputType1
argument_list|)
operator|==
name|PrimitiveGrouping
operator|.
name|NUMERIC_GROUP
condition|)
block|{
name|dateTypeArg
operator|=
literal|false
expr_stmt|;
return|return
name|initializeNumber
argument_list|(
name|arguments
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"Only primitive type arguments are accepted, when arguments length is one, got "
operator|+
name|arguments
index|[
literal|1
index|]
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"TRUNC requires one or two argument, got "
operator|+
name|arguments
operator|.
name|length
argument_list|)
throw|;
block|}
specifier|private
name|ObjectInspector
name|initializeNumber
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
if|if
condition|(
name|arguments
operator|.
name|length
argument_list|<
literal|1
operator|||
name|arguments
operator|.
name|length
argument_list|>
literal|2
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentLengthException
argument_list|(
literal|"TRUNC requires one or two argument, got "
operator|+
name|arguments
operator|.
name|length
argument_list|)
throw|;
block|}
if|if
condition|(
name|arguments
index|[
literal|0
index|]
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"TRUNC input only takes primitive types, got "
operator|+
name|arguments
index|[
literal|0
index|]
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
name|inputOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|arguments
operator|.
name|length
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|arguments
index|[
literal|1
index|]
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|1
argument_list|,
literal|"TRUNC second argument only takes primitive types, got "
operator|+
name|arguments
index|[
literal|1
index|]
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
name|inputScaleOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
literal|1
index|]
expr_stmt|;
name|inputSacleConst
operator|=
name|arguments
index|[
literal|1
index|]
operator|instanceof
name|ConstantObjectInspector
expr_stmt|;
if|if
condition|(
name|inputSacleConst
condition|)
block|{
try|try
block|{
name|Object
name|obj
init|=
operator|(
operator|(
name|ConstantObjectInspector
operator|)
name|arguments
index|[
literal|1
index|]
operator|)
operator|.
name|getWritableConstantValue
argument_list|()
decl_stmt|;
name|fmtInput
operator|=
name|obj
operator|!=
literal|null
condition|?
name|obj
operator|.
name|toString
argument_list|()
else|:
literal|null
expr_stmt|;
name|scale
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|fmtInput
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"TRUNC input only takes integer values, got "
operator|+
name|fmtInput
argument_list|)
throw|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|inputScaleOI
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BYTE
case|:
name|byteConverter
operator|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|arguments
index|[
literal|1
index|]
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableByteObjectInspector
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|shortConverter
operator|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|arguments
index|[
literal|1
index|]
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableShortObjectInspector
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|intConverter
operator|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|arguments
index|[
literal|1
index|]
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableIntObjectInspector
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|longConverter
operator|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|arguments
index|[
literal|1
index|]
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|1
argument_list|,
name|getFuncName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|" second argument only takes integer values"
argument_list|)
throw|;
block|}
block|}
block|}
name|inputType1
operator|=
name|inputOI
operator|.
name|getPrimitiveCategory
argument_list|()
expr_stmt|;
name|ObjectInspector
name|outputOI
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|inputType1
condition|)
block|{
case|case
name|DECIMAL
case|:
name|outputOI
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|inputType1
argument_list|)
expr_stmt|;
break|break;
case|case
name|VOID
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
name|outputOI
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|inputType1
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"Only numeric or string group data types are allowed for TRUNC function. Got "
operator|+
name|inputType1
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|outputOI
return|;
block|}
specifier|private
name|ObjectInspector
name|initializeDate
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentLengthException
throws|,
name|UDFArgumentTypeException
block|{
if|if
condition|(
name|arguments
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentLengthException
argument_list|(
literal|"trunc() requires 2 argument, got "
operator|+
name|arguments
operator|.
name|length
argument_list|)
throw|;
block|}
if|if
condition|(
name|arguments
index|[
literal|0
index|]
operator|.
name|getCategory
argument_list|()
operator|!=
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"Only primitive type arguments are accepted but "
operator|+
name|arguments
index|[
literal|0
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" is passed. as first arguments"
argument_list|)
throw|;
block|}
if|if
condition|(
name|arguments
index|[
literal|1
index|]
operator|.
name|getCategory
argument_list|()
operator|!=
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|1
argument_list|,
literal|"Only primitive type arguments are accepted but "
operator|+
name|arguments
index|[
literal|1
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" is passed. as second arguments"
argument_list|)
throw|;
block|}
name|ObjectInspector
name|outputOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
name|inputType1
operator|=
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
literal|0
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|inputType1
condition|)
block|{
case|case
name|STRING
case|:
case|case
name|VARCHAR
case|:
case|case
name|CHAR
case|:
case|case
name|VOID
case|:
name|inputType1
operator|=
name|PrimitiveCategory
operator|.
name|STRING
expr_stmt|;
name|textConverter1
operator|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|arguments
index|[
literal|0
index|]
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|timestampConverter
operator|=
operator|new
name|TimestampConverter
argument_list|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
literal|0
index|]
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableTimestampObjectInspector
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|dateWritableConverter
operator|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|arguments
index|[
literal|0
index|]
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDateObjectInspector
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"TRUNC() only takes STRING/TIMESTAMP/DATEWRITABLE types as first argument, got "
operator|+
name|inputType1
argument_list|)
throw|;
block|}
name|inputType2
operator|=
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
literal|1
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
expr_stmt|;
if|if
condition|(
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
name|inputType2
argument_list|)
operator|!=
name|PrimitiveGrouping
operator|.
name|STRING_GROUP
operator|&&
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
name|inputType2
argument_list|)
operator|!=
name|PrimitiveGrouping
operator|.
name|VOID_GROUP
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|1
argument_list|,
literal|"trunk() only takes STRING/CHAR/VARCHAR types as second argument, got "
operator|+
name|inputType2
argument_list|)
throw|;
block|}
name|inputType2
operator|=
name|PrimitiveCategory
operator|.
name|STRING
expr_stmt|;
if|if
condition|(
name|arguments
index|[
literal|1
index|]
operator|instanceof
name|ConstantObjectInspector
condition|)
block|{
name|Object
name|obj
init|=
operator|(
operator|(
name|ConstantObjectInspector
operator|)
name|arguments
index|[
literal|1
index|]
operator|)
operator|.
name|getWritableConstantValue
argument_list|()
decl_stmt|;
name|fmtInput
operator|=
name|obj
operator|!=
literal|null
condition|?
name|obj
operator|.
name|toString
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
else|else
block|{
name|textConverter2
operator|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|arguments
index|[
literal|1
index|]
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
argument_list|)
expr_stmt|;
block|}
return|return
name|outputOI
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|dateTypeArg
condition|)
block|{
return|return
name|evaluateDate
argument_list|(
name|arguments
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|evaluateNumber
argument_list|(
name|arguments
argument_list|)
return|;
block|}
block|}
specifier|private
name|Object
name|evaluateDate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentLengthException
throws|,
name|HiveException
throws|,
name|UDFArgumentTypeException
throws|,
name|UDFArgumentException
block|{
if|if
condition|(
name|arguments
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentLengthException
argument_list|(
literal|"trunc() requires 2 argument, got "
operator|+
name|arguments
operator|.
name|length
argument_list|)
throw|;
block|}
if|if
condition|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
operator|==
literal|null
operator|||
name|arguments
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|textConverter2
operator|!=
literal|null
condition|)
block|{
name|fmtInput
operator|=
name|textConverter2
operator|.
name|convert
argument_list|(
name|arguments
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|Date
name|date
decl_stmt|;
switch|switch
condition|(
name|inputType1
condition|)
block|{
case|case
name|STRING
case|:
name|String
name|dateString
init|=
name|textConverter1
operator|.
name|convert
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
name|date
operator|=
name|formatter
operator|.
name|parse
argument_list|(
name|dateString
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
name|Timestamp
name|ts
init|=
operator|(
operator|(
name|TimestampWritable
operator|)
name|timestampConverter
operator|.
name|convert
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
operator|)
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|date
operator|=
name|ts
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|DateWritable
name|dw
init|=
operator|(
name|DateWritable
operator|)
name|dateWritableConverter
operator|.
name|convert
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|date
operator|=
name|dw
operator|.
name|get
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"TRUNC() only takes STRING/TIMESTAMP/DATEWRITABLE types, got "
operator|+
name|inputType1
argument_list|)
throw|;
block|}
if|if
condition|(
name|evalDate
argument_list|(
name|date
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Date
name|newDate
init|=
name|calendar
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|output
operator|.
name|set
argument_list|(
name|formatter
operator|.
name|format
argument_list|(
name|newDate
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
specifier|private
name|Object
name|evaluateNumber
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
throws|,
name|UDFArgumentTypeException
block|{
if|if
condition|(
name|arguments
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|input
init|=
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|input
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|arguments
operator|.
name|length
operator|==
literal|2
operator|&&
name|arguments
index|[
literal|1
index|]
operator|!=
literal|null
operator|&&
name|arguments
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|inputSacleConst
condition|)
block|{
name|Object
name|scaleObj
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|inputScaleOI
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BYTE
case|:
name|scaleObj
operator|=
name|byteConverter
operator|.
name|convert
argument_list|(
name|arguments
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|scale
operator|=
operator|(
operator|(
name|ByteWritable
operator|)
name|scaleObj
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|scaleObj
operator|=
name|shortConverter
operator|.
name|convert
argument_list|(
name|arguments
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|scale
operator|=
operator|(
operator|(
name|ShortWritable
operator|)
name|scaleObj
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|scaleObj
operator|=
name|intConverter
operator|.
name|convert
argument_list|(
name|arguments
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|scale
operator|=
operator|(
operator|(
name|IntWritable
operator|)
name|scaleObj
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|scaleObj
operator|=
name|longConverter
operator|.
name|convert
argument_list|(
name|arguments
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|l
init|=
operator|(
operator|(
name|LongWritable
operator|)
name|scaleObj
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
argument_list|<
name|Integer
operator|.
name|MIN_VALUE
operator|||
name|l
argument_list|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
name|getFuncName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|" scale argument out of allowed range"
argument_list|)
throw|;
block|}
name|scale
operator|=
operator|(
name|int
operator|)
name|l
expr_stmt|;
default|default:
break|break;
block|}
block|}
switch|switch
condition|(
name|inputType1
condition|)
block|{
case|case
name|VOID
case|:
return|return
literal|null
return|;
case|case
name|DECIMAL
case|:
name|HiveDecimalWritable
name|decimalWritable
init|=
operator|(
name|HiveDecimalWritable
operator|)
name|inputOI
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|HiveDecimal
name|dec
init|=
name|trunc
argument_list|(
name|decimalWritable
operator|.
name|getHiveDecimal
argument_list|()
argument_list|,
name|scale
argument_list|)
decl_stmt|;
if|if
condition|(
name|dec
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|HiveDecimalWritable
argument_list|(
name|dec
argument_list|)
return|;
case|case
name|BYTE
case|:
name|ByteWritable
name|byteWritable
init|=
operator|(
name|ByteWritable
operator|)
name|inputOI
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|scale
operator|>=
literal|0
condition|)
block|{
return|return
name|byteWritable
return|;
block|}
else|else
block|{
return|return
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
name|trunc
argument_list|(
name|byteWritable
operator|.
name|get
argument_list|()
argument_list|,
name|scale
argument_list|)
argument_list|)
return|;
block|}
case|case
name|SHORT
case|:
name|ShortWritable
name|shortWritable
init|=
operator|(
name|ShortWritable
operator|)
name|inputOI
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|scale
operator|>=
literal|0
condition|)
block|{
return|return
name|shortWritable
return|;
block|}
else|else
block|{
return|return
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
name|trunc
argument_list|(
name|shortWritable
operator|.
name|get
argument_list|()
argument_list|,
name|scale
argument_list|)
argument_list|)
return|;
block|}
case|case
name|INT
case|:
name|IntWritable
name|intWritable
init|=
operator|(
name|IntWritable
operator|)
name|inputOI
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|scale
operator|>=
literal|0
condition|)
block|{
return|return
name|intWritable
return|;
block|}
else|else
block|{
return|return
operator|new
name|IntWritable
argument_list|(
operator|(
name|int
operator|)
name|trunc
argument_list|(
name|intWritable
operator|.
name|get
argument_list|()
argument_list|,
name|scale
argument_list|)
argument_list|)
return|;
block|}
case|case
name|LONG
case|:
name|LongWritable
name|longWritable
init|=
operator|(
name|LongWritable
operator|)
name|inputOI
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|scale
operator|>=
literal|0
condition|)
block|{
return|return
name|longWritable
return|;
block|}
else|else
block|{
return|return
operator|new
name|LongWritable
argument_list|(
name|trunc
argument_list|(
name|longWritable
operator|.
name|get
argument_list|()
argument_list|,
name|scale
argument_list|)
argument_list|)
return|;
block|}
case|case
name|FLOAT
case|:
name|float
name|f
init|=
operator|(
operator|(
name|FloatWritable
operator|)
name|inputOI
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|input
argument_list|)
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
operator|new
name|FloatWritable
argument_list|(
operator|(
name|float
operator|)
name|trunc
argument_list|(
name|f
argument_list|,
name|scale
argument_list|)
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|trunc
argument_list|(
operator|(
operator|(
name|DoubleWritable
operator|)
name|inputOI
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|input
argument_list|)
operator|)
argument_list|,
name|scale
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"Only numeric or string group data types are allowed for TRUNC function. Got "
operator|+
name|inputType1
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
return|return
name|getStandardDisplayString
argument_list|(
literal|"trunc"
argument_list|,
name|children
argument_list|)
return|;
block|}
specifier|private
name|Calendar
name|evalDate
parameter_list|(
name|Date
name|d
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|calendar
operator|.
name|setTime
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"MONTH"
operator|.
name|equals
argument_list|(
name|fmtInput
argument_list|)
operator|||
literal|"MON"
operator|.
name|equals
argument_list|(
name|fmtInput
argument_list|)
operator|||
literal|"MM"
operator|.
name|equals
argument_list|(
name|fmtInput
argument_list|)
condition|)
block|{
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|calendar
return|;
block|}
elseif|else
if|if
condition|(
literal|"YEAR"
operator|.
name|equals
argument_list|(
name|fmtInput
argument_list|)
operator|||
literal|"YYYY"
operator|.
name|equals
argument_list|(
name|fmtInput
argument_list|)
operator|||
literal|"YY"
operator|.
name|equals
argument_list|(
name|fmtInput
argument_list|)
condition|)
block|{
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|calendar
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|HiveDecimal
name|trunc
parameter_list|(
name|HiveDecimal
name|input
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|BigDecimal
name|bigDecimal
init|=
name|trunc
argument_list|(
name|input
operator|.
name|bigDecimalValue
argument_list|()
argument_list|,
name|scale
argument_list|)
decl_stmt|;
return|return
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
return|;
block|}
specifier|protected
name|long
name|trunc
parameter_list|(
name|long
name|input
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
return|return
name|trunc
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|input
argument_list|)
argument_list|,
name|scale
argument_list|)
operator|.
name|longValue
argument_list|()
return|;
block|}
specifier|protected
name|double
name|trunc
parameter_list|(
name|double
name|input
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
return|return
name|trunc
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|input
argument_list|)
argument_list|,
name|scale
argument_list|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
specifier|protected
name|DoubleWritable
name|trunc
parameter_list|(
name|DoubleWritable
name|input
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|BigDecimal
name|bigDecimal
init|=
operator|new
name|BigDecimal
argument_list|(
name|input
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|BigDecimal
name|trunc
init|=
name|trunc
argument_list|(
name|bigDecimal
argument_list|,
name|scale
argument_list|)
decl_stmt|;
name|DoubleWritable
name|doubleWritable
init|=
operator|new
name|DoubleWritable
argument_list|(
name|trunc
operator|.
name|doubleValue
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|doubleWritable
return|;
block|}
specifier|protected
name|BigDecimal
name|trunc
parameter_list|(
name|BigDecimal
name|input
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|BigDecimal
name|output
init|=
operator|new
name|BigDecimal
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|BigDecimal
name|pow
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
literal|10
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|scale
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|scale
operator|>=
literal|0
condition|)
block|{
name|pow
operator|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
literal|10
argument_list|,
name|scale
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|scale
operator|!=
literal|0
condition|)
block|{
name|long
name|longValue
init|=
name|input
operator|.
name|multiply
argument_list|(
name|pow
argument_list|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|output
operator|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|longValue
argument_list|)
operator|.
name|divide
argument_list|(
name|pow
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
operator|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|input
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|long
name|longValue2
init|=
name|input
operator|.
name|divide
argument_list|(
name|pow
argument_list|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|output
operator|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|longValue2
argument_list|)
operator|.
name|multiply
argument_list|(
name|pow
argument_list|)
expr_stmt|;
block|}
return|return
name|output
return|;
block|}
block|}
end_class

end_unit

