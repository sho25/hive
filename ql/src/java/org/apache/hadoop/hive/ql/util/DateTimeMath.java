begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|PisaTimestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_class
specifier|public
class|class
name|DateTimeMath
block|{
specifier|private
specifier|static
class|class
name|NanosResult
block|{
specifier|public
name|int
name|seconds
decl_stmt|;
specifier|public
name|int
name|nanos
decl_stmt|;
specifier|public
name|void
name|addNanos
parameter_list|(
name|int
name|leftNanos
parameter_list|,
name|int
name|rightNanos
parameter_list|)
block|{
name|seconds
operator|=
literal|0
expr_stmt|;
name|nanos
operator|=
name|leftNanos
operator|+
name|rightNanos
expr_stmt|;
if|if
condition|(
name|nanos
operator|<
literal|0
condition|)
block|{
name|seconds
operator|=
operator|-
literal|1
expr_stmt|;
name|nanos
operator|+=
name|DateUtils
operator|.
name|NANOS_PER_SEC
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nanos
operator|>=
name|DateUtils
operator|.
name|NANOS_PER_SEC
condition|)
block|{
name|seconds
operator|=
literal|1
expr_stmt|;
name|nanos
operator|-=
name|DateUtils
operator|.
name|NANOS_PER_SEC
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|Calendar
name|calUtc
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
decl_stmt|;
specifier|protected
name|Calendar
name|calLocal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|protected
name|NanosResult
name|nanosResult
init|=
operator|new
name|NanosResult
argument_list|()
decl_stmt|;
comment|//
comment|// Operations involving/returning year-month intervals
comment|//
comment|/**    * Perform month arithmetic to millis value using UTC time zone.    * @param millis    * @param months    * @return    */
specifier|public
name|long
name|addMonthsToMillisUtc
parameter_list|(
name|long
name|millis
parameter_list|,
name|int
name|months
parameter_list|)
block|{
name|calUtc
operator|.
name|setTimeInMillis
argument_list|(
name|millis
argument_list|)
expr_stmt|;
name|calUtc
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|,
name|months
argument_list|)
expr_stmt|;
return|return
name|calUtc
operator|.
name|getTimeInMillis
argument_list|()
return|;
block|}
comment|/**    * Perform month arithmetic to millis value using local time zone.    * @param millis    * @param months    * @return    */
specifier|public
name|long
name|addMonthsToMillisLocal
parameter_list|(
name|long
name|millis
parameter_list|,
name|int
name|months
parameter_list|)
block|{
name|calLocal
operator|.
name|setTimeInMillis
argument_list|(
name|millis
argument_list|)
expr_stmt|;
name|calLocal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|,
name|months
argument_list|)
expr_stmt|;
return|return
name|calLocal
operator|.
name|getTimeInMillis
argument_list|()
return|;
block|}
specifier|public
name|long
name|addMonthsToNanosUtc
parameter_list|(
name|long
name|nanos
parameter_list|,
name|int
name|months
parameter_list|)
block|{
name|long
name|result
init|=
name|addMonthsToMillisUtc
argument_list|(
name|nanos
operator|/
literal|1000000
argument_list|,
name|months
argument_list|)
operator|*
literal|1000000
operator|+
operator|(
name|nanos
operator|%
literal|1000000
operator|)
decl_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|long
name|addMonthsToNanosLocal
parameter_list|(
name|long
name|nanos
parameter_list|,
name|int
name|months
parameter_list|)
block|{
name|long
name|result
init|=
name|addMonthsToMillisLocal
argument_list|(
name|nanos
operator|/
literal|1000000
argument_list|,
name|months
argument_list|)
operator|*
literal|1000000
operator|+
operator|(
name|nanos
operator|%
literal|1000000
operator|)
decl_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Perform month arithmetic to millis value using local time zone.    * @param pisaTimestamp    * @param months    * @return    */
specifier|public
name|PisaTimestamp
name|addMonthsToPisaTimestamp
parameter_list|(
name|PisaTimestamp
name|pisaTimestamp
parameter_list|,
name|int
name|months
parameter_list|,
name|PisaTimestamp
name|scratchPisaTimestamp
parameter_list|)
block|{
name|calLocal
operator|.
name|setTimeInMillis
argument_list|(
name|pisaTimestamp
operator|.
name|getTimestampMilliseconds
argument_list|()
argument_list|)
expr_stmt|;
name|calLocal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|,
name|months
argument_list|)
expr_stmt|;
name|scratchPisaTimestamp
operator|.
name|updateFromTimestampMilliseconds
argument_list|(
name|calLocal
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add in portion of nanos below a millisecond...
name|PisaTimestamp
operator|.
name|add
argument_list|(
name|scratchPisaTimestamp
operator|.
name|getEpochDay
argument_list|()
argument_list|,
name|scratchPisaTimestamp
operator|.
name|getNanoOfDay
argument_list|()
argument_list|,
literal|0
argument_list|,
name|pisaTimestamp
operator|.
name|getNanoOfDay
argument_list|()
operator|%
literal|1000000
argument_list|,
name|scratchPisaTimestamp
argument_list|)
expr_stmt|;
return|return
name|scratchPisaTimestamp
return|;
block|}
specifier|public
name|long
name|addMonthsToDays
parameter_list|(
name|long
name|days
parameter_list|,
name|int
name|months
parameter_list|)
block|{
name|long
name|millis
init|=
name|DateWritable
operator|.
name|daysToMillis
argument_list|(
operator|(
name|int
operator|)
name|days
argument_list|)
decl_stmt|;
name|millis
operator|=
name|addMonthsToMillisLocal
argument_list|(
name|millis
argument_list|,
name|months
argument_list|)
expr_stmt|;
comment|// Convert millis result back to days
return|return
name|DateWritable
operator|.
name|millisToDays
argument_list|(
name|millis
argument_list|)
return|;
block|}
specifier|public
name|Timestamp
name|add
parameter_list|(
name|Timestamp
name|ts
parameter_list|,
name|HiveIntervalYearMonth
name|interval
parameter_list|)
block|{
if|if
condition|(
name|ts
operator|==
literal|null
operator|||
name|interval
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Attempt to match Oracle semantics for timestamp arithmetic,
comment|// where timestamp arithmetic is done in UTC, then converted back to local timezone
name|long
name|resultMillis
init|=
name|addMonthsToMillisUtc
argument_list|(
name|ts
operator|.
name|getTime
argument_list|()
argument_list|,
name|interval
operator|.
name|getTotalMonths
argument_list|()
argument_list|)
decl_stmt|;
name|Timestamp
name|tsResult
init|=
operator|new
name|Timestamp
argument_list|(
name|resultMillis
argument_list|)
decl_stmt|;
name|tsResult
operator|.
name|setNanos
argument_list|(
name|ts
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tsResult
return|;
block|}
specifier|public
name|Date
name|add
parameter_list|(
name|Date
name|dt
parameter_list|,
name|HiveIntervalYearMonth
name|interval
parameter_list|)
block|{
if|if
condition|(
name|dt
operator|==
literal|null
operator|||
name|interval
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Since Date millis value is in local timezone representation, do date arithmetic
comment|// using local timezone so the time remains at the start of the day.
name|long
name|resultMillis
init|=
name|addMonthsToMillisLocal
argument_list|(
name|dt
operator|.
name|getTime
argument_list|()
argument_list|,
name|interval
operator|.
name|getTotalMonths
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|Date
argument_list|(
name|resultMillis
argument_list|)
return|;
block|}
specifier|public
name|HiveIntervalYearMonth
name|add
parameter_list|(
name|HiveIntervalYearMonth
name|left
parameter_list|,
name|HiveIntervalYearMonth
name|right
parameter_list|)
block|{
name|HiveIntervalYearMonth
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|left
operator|==
literal|null
operator|||
name|right
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|result
operator|=
operator|new
name|HiveIntervalYearMonth
argument_list|(
name|left
operator|.
name|getTotalMonths
argument_list|()
operator|+
name|right
operator|.
name|getTotalMonths
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|Timestamp
name|subtract
parameter_list|(
name|Timestamp
name|left
parameter_list|,
name|HiveIntervalYearMonth
name|right
parameter_list|)
block|{
if|if
condition|(
name|left
operator|==
literal|null
operator|||
name|right
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|add
argument_list|(
name|left
argument_list|,
name|right
operator|.
name|negate
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Date
name|subtract
parameter_list|(
name|Date
name|left
parameter_list|,
name|HiveIntervalYearMonth
name|right
parameter_list|)
block|{
if|if
condition|(
name|left
operator|==
literal|null
operator|||
name|right
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|add
argument_list|(
name|left
argument_list|,
name|right
operator|.
name|negate
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|HiveIntervalYearMonth
name|subtract
parameter_list|(
name|HiveIntervalYearMonth
name|left
parameter_list|,
name|HiveIntervalYearMonth
name|right
parameter_list|)
block|{
if|if
condition|(
name|left
operator|==
literal|null
operator|||
name|right
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|add
argument_list|(
name|left
argument_list|,
name|right
operator|.
name|negate
argument_list|()
argument_list|)
return|;
block|}
comment|//
comment|// Operations involving/returning day-time intervals
comment|//
specifier|public
name|Timestamp
name|add
parameter_list|(
name|Timestamp
name|ts
parameter_list|,
name|HiveIntervalDayTime
name|interval
parameter_list|)
block|{
if|if
condition|(
name|ts
operator|==
literal|null
operator|||
name|interval
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|nanosResult
operator|.
name|addNanos
argument_list|(
name|ts
operator|.
name|getNanos
argument_list|()
argument_list|,
name|interval
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|newMillis
init|=
name|ts
operator|.
name|getTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|interval
operator|.
name|getTotalSeconds
argument_list|()
operator|+
name|nanosResult
operator|.
name|seconds
argument_list|)
decl_stmt|;
name|Timestamp
name|tsResult
init|=
operator|new
name|Timestamp
argument_list|(
name|newMillis
argument_list|)
decl_stmt|;
name|tsResult
operator|.
name|setNanos
argument_list|(
name|nanosResult
operator|.
name|nanos
argument_list|)
expr_stmt|;
return|return
name|tsResult
return|;
block|}
specifier|public
name|HiveIntervalDayTime
name|add
parameter_list|(
name|HiveIntervalDayTime
name|left
parameter_list|,
name|HiveIntervalDayTime
name|right
parameter_list|)
block|{
name|HiveIntervalDayTime
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|left
operator|==
literal|null
operator|||
name|right
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|nanosResult
operator|.
name|addNanos
argument_list|(
name|left
operator|.
name|getNanos
argument_list|()
argument_list|,
name|right
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|totalSeconds
init|=
name|left
operator|.
name|getTotalSeconds
argument_list|()
operator|+
name|right
operator|.
name|getTotalSeconds
argument_list|()
operator|+
name|nanosResult
operator|.
name|seconds
decl_stmt|;
name|result
operator|=
operator|new
name|HiveIntervalDayTime
argument_list|(
name|totalSeconds
argument_list|,
name|nanosResult
operator|.
name|nanos
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|Timestamp
name|subtract
parameter_list|(
name|Timestamp
name|left
parameter_list|,
name|HiveIntervalDayTime
name|right
parameter_list|)
block|{
if|if
condition|(
name|left
operator|==
literal|null
operator|||
name|right
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|add
argument_list|(
name|left
argument_list|,
name|right
operator|.
name|negate
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|HiveIntervalDayTime
name|subtract
parameter_list|(
name|HiveIntervalDayTime
name|left
parameter_list|,
name|HiveIntervalDayTime
name|right
parameter_list|)
block|{
if|if
condition|(
name|left
operator|==
literal|null
operator|||
name|right
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|add
argument_list|(
name|left
argument_list|,
name|right
operator|.
name|negate
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|HiveIntervalDayTime
name|subtract
parameter_list|(
name|Timestamp
name|left
parameter_list|,
name|Timestamp
name|right
parameter_list|)
block|{
name|HiveIntervalDayTime
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|left
operator|==
literal|null
operator|||
name|right
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|nanosResult
operator|.
name|addNanos
argument_list|(
name|left
operator|.
name|getNanos
argument_list|()
argument_list|,
operator|-
operator|(
name|right
operator|.
name|getNanos
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|long
name|totalSeconds
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|left
operator|.
name|getTime
argument_list|()
argument_list|)
operator|-
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|right
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
name|nanosResult
operator|.
name|seconds
decl_stmt|;
name|result
operator|=
operator|new
name|HiveIntervalDayTime
argument_list|(
name|totalSeconds
argument_list|,
name|nanosResult
operator|.
name|nanos
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

