begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|mr
operator|.
name|ExecMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|CombineHiveInputFormat
operator|.
name|CombineHiveInputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|CombineFileSplit
import|;
end_import

begin_comment
comment|/**  * CombineHiveRecordReader.  *  * @param<K>  * @param<V>  */
end_comment

begin_class
specifier|public
class|class
name|CombineHiveRecordReader
parameter_list|<
name|K
extends|extends
name|WritableComparable
parameter_list|,
name|V
extends|extends
name|Writable
parameter_list|>
extends|extends
name|HiveContextAwareRecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|private
name|org
operator|.
name|slf4j
operator|.
name|Logger
name|LOG
init|=
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CombineHiveRecordReader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|LinkedHashMap
argument_list|<
name|Path
argument_list|,
name|PartitionDesc
argument_list|>
name|pathToPartInfo
decl_stmt|;
specifier|public
name|CombineHiveRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Reporter
name|reporter
parameter_list|,
name|Integer
name|partition
parameter_list|,
name|RecordReader
name|preReader
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
operator|(
name|JobConf
operator|)
name|conf
argument_list|)
expr_stmt|;
name|CombineHiveInputSplit
name|hsplit
init|=
name|split
operator|instanceof
name|CombineHiveInputSplit
condition|?
operator|(
name|CombineHiveInputSplit
operator|)
name|split
else|:
operator|new
name|CombineHiveInputSplit
argument_list|(
name|jobConf
argument_list|,
operator|(
name|CombineFileSplit
operator|)
name|split
argument_list|)
decl_stmt|;
name|String
name|inputFormatClassName
init|=
name|hsplit
operator|.
name|inputFormatClassName
argument_list|()
decl_stmt|;
name|Class
name|inputFormatClass
init|=
literal|null
decl_stmt|;
try|try
block|{
name|inputFormatClass
operator|=
name|JavaUtils
operator|.
name|loadClass
argument_list|(
name|inputFormatClassName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"CombineHiveRecordReader: class not found "
operator|+
name|inputFormatClassName
argument_list|)
throw|;
block|}
name|InputFormat
name|inputFormat
init|=
name|HiveInputFormat
operator|.
name|getInputFormatFromCache
argument_list|(
name|inputFormatClass
argument_list|,
name|jobConf
argument_list|)
decl_stmt|;
try|try
block|{
comment|// TODO: refactor this out
if|if
condition|(
name|pathToPartInfo
operator|==
literal|null
condition|)
block|{
name|MapWork
name|mrwork
decl_stmt|;
if|if
condition|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
argument_list|)
operator|.
name|equals
argument_list|(
literal|"tez"
argument_list|)
condition|)
block|{
name|mrwork
operator|=
operator|(
name|MapWork
operator|)
name|Utilities
operator|.
name|getMergeWork
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
if|if
condition|(
name|mrwork
operator|==
literal|null
condition|)
block|{
name|mrwork
operator|=
name|Utilities
operator|.
name|getMapWork
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|mrwork
operator|=
name|Utilities
operator|.
name|getMapWork
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
block|}
name|pathToPartInfo
operator|=
name|mrwork
operator|.
name|getPathToPartitionInfo
argument_list|()
expr_stmt|;
block|}
name|PartitionDesc
name|part
init|=
name|extractSinglePartSpec
argument_list|(
name|hsplit
argument_list|)
decl_stmt|;
name|inputFormat
operator|=
name|HiveInputFormat
operator|.
name|wrapForLlap
argument_list|(
name|inputFormat
argument_list|,
name|jobConf
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// create a split for the given partition
name|FileSplit
name|fsplit
init|=
operator|new
name|FileSplit
argument_list|(
name|hsplit
operator|.
name|getPaths
argument_list|()
index|[
name|partition
index|]
argument_list|,
name|hsplit
operator|.
name|getStartOffsets
argument_list|()
index|[
name|partition
index|]
argument_list|,
name|hsplit
operator|.
name|getLengths
argument_list|()
index|[
name|partition
index|]
argument_list|,
name|hsplit
operator|.
name|getLocations
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|setRecordReader
argument_list|(
name|inputFormat
operator|.
name|getRecordReader
argument_list|(
name|fsplit
argument_list|,
name|jobConf
argument_list|,
name|reporter
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|initIOContext
argument_list|(
name|fsplit
argument_list|,
name|jobConf
argument_list|,
name|inputFormatClass
argument_list|,
name|this
operator|.
name|recordReader
argument_list|)
expr_stmt|;
comment|//If current split is from the same file as preceding split and the preceding split has footerbuffer,
comment|//the current split should use the preceding split's footerbuffer in order to skip footer correctly.
if|if
condition|(
name|preReader
operator|!=
literal|null
operator|&&
name|preReader
operator|instanceof
name|CombineHiveRecordReader
operator|&&
operator|(
operator|(
name|CombineHiveRecordReader
operator|)
name|preReader
operator|)
operator|.
name|getFooterBuffer
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|partition
operator|!=
literal|0
operator|&&
name|hsplit
operator|.
name|getPaths
argument_list|()
index|[
name|partition
operator|-
literal|1
index|]
operator|.
name|equals
argument_list|(
name|hsplit
operator|.
name|getPaths
argument_list|()
index|[
name|partition
index|]
argument_list|)
condition|)
name|this
operator|.
name|setFooterBuffer
argument_list|(
operator|(
operator|(
name|CombineHiveRecordReader
operator|)
name|preReader
operator|)
operator|.
name|getFooterBuffer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|PartitionDesc
name|extractSinglePartSpec
parameter_list|(
name|CombineHiveInputSplit
name|hsplit
parameter_list|)
throws|throws
name|IOException
block|{
name|PartitionDesc
name|part
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|Map
argument_list|<
name|Path
argument_list|,
name|PartitionDesc
argument_list|>
argument_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|PartitionDesc
argument_list|>
argument_list|>
name|cache
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|hsplit
operator|.
name|getPaths
argument_list|()
control|)
block|{
name|PartitionDesc
name|otherPart
init|=
name|HiveFileFormatUtils
operator|.
name|getFromPathRecursively
argument_list|(
name|pathToPartInfo
argument_list|,
name|path
argument_list|,
name|cache
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found spec for "
operator|+
name|path
operator|+
literal|" "
operator|+
name|otherPart
operator|+
literal|" from "
operator|+
name|pathToPartInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
name|part
operator|=
name|otherPart
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|otherPart
operator|!=
name|part
condition|)
block|{
comment|// Assume we should have the exact same object.
comment|// TODO: we could also compare the schema and SerDe, and pass only those to the call
comment|//       instead; most of the time these would be the same and LLAP IO can handle that.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Multiple partitions found; not going to pass a part spec to LLAP IO: {"
operator|+
name|part
operator|.
name|getPartSpec
argument_list|()
operator|+
literal|"} and {"
operator|+
name|otherPart
operator|.
name|getPartSpec
argument_list|()
operator|+
literal|"}"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
return|return
name|part
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doClose
parameter_list|()
throws|throws
name|IOException
block|{
name|recordReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|createKey
parameter_list|()
block|{
return|return
operator|(
name|K
operator|)
name|recordReader
operator|.
name|createKey
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|createValue
parameter_list|()
block|{
return|return
operator|(
name|V
operator|)
name|recordReader
operator|.
name|createValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|recordReader
operator|.
name|getPos
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isSorted
condition|)
block|{
return|return
name|super
operator|.
name|getProgress
argument_list|()
return|;
block|}
return|return
name|recordReader
operator|.
name|getProgress
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|doNext
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ExecMapper
operator|.
name|getDone
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|super
operator|.
name|doNext
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
end_class

end_unit

