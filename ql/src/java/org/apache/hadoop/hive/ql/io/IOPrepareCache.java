begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PartitionDesc
import|;
end_import

begin_comment
comment|/**  * IOPrepareCache is used to cache pre-query io-related objects.  * It should be cleared every time a new query issued.  *    */
end_comment

begin_class
specifier|public
class|class
name|IOPrepareCache
block|{
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|IOPrepareCache
argument_list|>
name|threadLocalIOPrepareCache
init|=
operator|new
name|ThreadLocal
argument_list|<
name|IOPrepareCache
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|IOPrepareCache
name|get
parameter_list|()
block|{
name|IOPrepareCache
name|cache
init|=
name|IOPrepareCache
operator|.
name|threadLocalIOPrepareCache
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
name|threadLocalIOPrepareCache
operator|.
name|set
argument_list|(
operator|new
name|IOPrepareCache
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|=
name|IOPrepareCache
operator|.
name|threadLocalIOPrepareCache
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|cache
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
if|if
condition|(
name|partitionDescMap
operator|!=
literal|null
condition|)
block|{
name|partitionDescMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Map
argument_list|<
name|Map
argument_list|<
name|Path
argument_list|,
name|PartitionDesc
argument_list|>
argument_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|PartitionDesc
argument_list|>
argument_list|>
name|partitionDescMap
decl_stmt|;
specifier|public
name|Map
argument_list|<
name|Map
argument_list|<
name|Path
argument_list|,
name|PartitionDesc
argument_list|>
argument_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|PartitionDesc
argument_list|>
argument_list|>
name|allocatePartitionDescMap
parameter_list|()
block|{
if|if
condition|(
name|partitionDescMap
operator|==
literal|null
condition|)
block|{
name|partitionDescMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
return|return
name|partitionDescMap
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Map
argument_list|<
name|Path
argument_list|,
name|PartitionDesc
argument_list|>
argument_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|PartitionDesc
argument_list|>
argument_list|>
name|getPartitionDescMap
parameter_list|()
block|{
return|return
name|partitionDescMap
return|;
block|}
specifier|public
name|void
name|setPartitionDescMap
parameter_list|(
name|Map
argument_list|<
name|Map
argument_list|<
name|Path
argument_list|,
name|PartitionDesc
argument_list|>
argument_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|PartitionDesc
argument_list|>
argument_list|>
name|partitionDescMap
parameter_list|)
block|{
name|this
operator|.
name|partitionDescMap
operator|=
name|partitionDescMap
expr_stmt|;
block|}
block|}
end_class

end_unit

