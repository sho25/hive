begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexOver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexVisitorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlDialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A utility class that helps identify Hive-Jdbc functions gaps.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|JDBCRexCallValidator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JDBCRexCallValidator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
class|class
name|JdbcRexCallValidatorVisitor
extends|extends
name|RexVisitorImpl
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|final
name|SqlDialect
name|dialect
decl_stmt|;
specifier|private
name|JdbcRexCallValidatorVisitor
parameter_list|(
name|SqlDialect
name|dialect
parameter_list|)
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|dialect
operator|=
name|dialect
expr_stmt|;
block|}
name|boolean
name|res
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|validRexCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
if|if
condition|(
name|call
operator|instanceof
name|RexOver
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"RexOver operator push down is not supported for now with the following operator:"
operator|+
name|call
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|final
name|SqlOperator
name|operator
init|=
name|call
operator|.
name|getOperator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
name|call
operator|.
name|getOperands
argument_list|()
decl_stmt|;
name|RelDataType
name|resType
init|=
name|call
operator|.
name|getType
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|RelDataType
argument_list|>
name|paramsListType
init|=
operator|new
name|ArrayList
argument_list|<
name|RelDataType
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|currNode
range|:
name|operands
control|)
block|{
name|paramsListType
operator|.
name|add
argument_list|(
name|currNode
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|dialect
operator|.
name|supportsFunction
argument_list|(
name|operator
argument_list|,
name|resType
argument_list|,
name|paramsListType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
if|if
condition|(
name|res
condition|)
block|{
name|res
operator|=
name|validRexCall
argument_list|(
name|call
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
condition|)
block|{
return|return
name|super
operator|.
name|visitCall
argument_list|(
name|call
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|go
parameter_list|(
name|RexNode
name|cond
parameter_list|)
block|{
name|cond
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
block|}
specifier|private
name|JDBCRexCallValidator
parameter_list|()
block|{   }
specifier|public
specifier|static
name|boolean
name|isValidJdbcOperation
parameter_list|(
name|RexNode
name|cond
parameter_list|,
name|SqlDialect
name|dialect
parameter_list|)
block|{
return|return
operator|new
name|JdbcRexCallValidatorVisitor
argument_list|(
name|dialect
argument_list|)
operator|.
name|go
argument_list|(
name|cond
argument_list|)
return|;
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

end_unit

