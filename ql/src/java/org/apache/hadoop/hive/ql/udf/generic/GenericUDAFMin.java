begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedUDAFs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
operator|.
name|gen
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|BoundaryDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|WindowFrameDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
operator|.
name|AggregationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFMax
operator|.
name|MaxStreamingFixedWindow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|JavaDataModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|FullMapEqualComparer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
operator|.
name|NullValueOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
operator|.
name|ObjectInspectorCopyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"min"
argument_list|,
name|value
operator|=
literal|"_FUNC_(expr) - Returns the minimum value of expr"
argument_list|)
specifier|public
class|class
name|GenericUDAFMin
extends|extends
name|AbstractGenericUDAFResolver
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GenericUDAFMin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|GenericUDAFEvaluator
name|getEvaluator
parameter_list|(
name|TypeInfo
index|[]
name|parameters
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|parameters
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
name|parameters
operator|.
name|length
operator|-
literal|1
argument_list|,
literal|"Exactly one argument is expected."
argument_list|)
throw|;
block|}
name|ObjectInspector
name|oi
init|=
name|TypeInfoUtils
operator|.
name|getStandardJavaObjectInspectorFromTypeInfo
argument_list|(
name|parameters
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ObjectInspectorUtils
operator|.
name|compareSupported
argument_list|(
name|oi
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
name|parameters
operator|.
name|length
operator|-
literal|1
argument_list|,
literal|"Cannot support comparison of map<> type or complex type containing map<>."
argument_list|)
throw|;
block|}
return|return
operator|new
name|GenericUDAFMinEvaluator
argument_list|()
return|;
block|}
annotation|@
name|UDFType
argument_list|(
name|distinctLike
operator|=
literal|true
argument_list|)
annotation|@
name|VectorizedUDAFs
argument_list|(
block|{
name|VectorUDAFMinLong
operator|.
name|class
block|,
name|VectorUDAFMinDouble
operator|.
name|class
block|,
name|VectorUDAFMinDecimal
operator|.
name|class
block|,
name|VectorUDAFMinDecimal64
operator|.
name|class
block|,
name|VectorUDAFMinTimestamp
operator|.
name|class
block|,
name|VectorUDAFMinIntervalDayTime
operator|.
name|class
block|,
name|VectorUDAFMinString
operator|.
name|class
block|}
argument_list|)
specifier|public
specifier|static
class|class
name|GenericUDAFMinEvaluator
extends|extends
name|GenericUDAFEvaluator
block|{
specifier|private
specifier|transient
name|ObjectInspector
name|inputOI
decl_stmt|;
specifier|private
specifier|transient
name|ObjectInspector
name|outputOI
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|init
parameter_list|(
name|Mode
name|m
parameter_list|,
name|ObjectInspector
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
assert|assert
operator|(
name|parameters
operator|.
name|length
operator|==
literal|1
operator|)
assert|;
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|inputOI
operator|=
name|parameters
index|[
literal|0
index|]
expr_stmt|;
comment|// Copy to Java object because that saves object creation time.
comment|// Note that on average the number of copies is log(N) so that's not
comment|// very important.
name|outputOI
operator|=
name|ObjectInspectorUtils
operator|.
name|getStandardObjectInspector
argument_list|(
name|inputOI
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|JAVA
argument_list|)
expr_stmt|;
return|return
name|outputOI
return|;
block|}
comment|/** class for storing the current max value */
annotation|@
name|AggregationType
argument_list|(
name|estimable
operator|=
literal|true
argument_list|)
specifier|static
class|class
name|MinAgg
extends|extends
name|AbstractAggregationBuffer
block|{
name|Object
name|o
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|estimate
parameter_list|()
block|{
return|return
name|JavaDataModel
operator|.
name|PRIMITIVES2
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|AggregationBuffer
name|getNewAggregationBuffer
parameter_list|()
throws|throws
name|HiveException
block|{
name|MinAgg
name|result
init|=
operator|new
name|MinAgg
argument_list|()
decl_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|MinAgg
name|myagg
init|=
operator|(
name|MinAgg
operator|)
name|agg
decl_stmt|;
name|myagg
operator|.
name|o
operator|=
literal|null
expr_stmt|;
block|}
name|boolean
name|warned
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
assert|assert
operator|(
name|parameters
operator|.
name|length
operator|==
literal|1
operator|)
assert|;
name|merge
argument_list|(
name|agg
argument_list|,
name|parameters
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminatePartial
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
name|terminate
argument_list|(
name|agg
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|merge
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
name|partial
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|partial
operator|!=
literal|null
condition|)
block|{
name|MinAgg
name|myagg
init|=
operator|(
name|MinAgg
operator|)
name|agg
decl_stmt|;
name|int
name|r
init|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|myagg
operator|.
name|o
argument_list|,
name|outputOI
argument_list|,
name|partial
argument_list|,
name|inputOI
argument_list|,
operator|new
name|FullMapEqualComparer
argument_list|()
argument_list|,
name|NullValueOption
operator|.
name|MAXVALUE
argument_list|)
decl_stmt|;
if|if
condition|(
name|myagg
operator|.
name|o
operator|==
literal|null
operator|||
name|r
operator|>
literal|0
condition|)
block|{
name|myagg
operator|.
name|o
operator|=
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|partial
argument_list|,
name|inputOI
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|JAVA
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|MinAgg
name|myagg
init|=
operator|(
name|MinAgg
operator|)
name|agg
decl_stmt|;
return|return
name|myagg
operator|.
name|o
return|;
block|}
annotation|@
name|Override
specifier|public
name|GenericUDAFEvaluator
name|getWindowingEvaluator
parameter_list|(
name|WindowFrameDef
name|wFrmDef
parameter_list|)
block|{
return|return
operator|new
name|MinStreamingFixedWindow
argument_list|(
name|this
argument_list|,
name|wFrmDef
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|MinStreamingFixedWindow
extends|extends
name|MaxStreamingFixedWindow
block|{
specifier|public
name|MinStreamingFixedWindow
parameter_list|(
name|GenericUDAFEvaluator
name|wrappedEval
parameter_list|,
name|WindowFrameDef
name|wFrmDef
parameter_list|)
block|{
name|super
argument_list|(
name|wrappedEval
argument_list|,
name|wFrmDef
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ObjectInspector
name|inputOI
parameter_list|()
block|{
return|return
operator|(
operator|(
name|GenericUDAFMinEvaluator
operator|)
name|wrappedEval
operator|)
operator|.
name|inputOI
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ObjectInspector
name|outputOI
parameter_list|()
block|{
return|return
operator|(
operator|(
name|GenericUDAFMinEvaluator
operator|)
name|wrappedEval
operator|)
operator|.
name|outputOI
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|removeLast
parameter_list|(
name|Object
name|in
parameter_list|,
name|Object
name|last
parameter_list|)
block|{
return|return
name|isLess
argument_list|(
name|in
argument_list|,
name|last
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isLess
parameter_list|(
name|Object
name|in
parameter_list|,
name|Object
name|last
parameter_list|)
block|{
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|last
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|in
argument_list|,
name|inputOI
argument_list|()
argument_list|,
name|last
argument_list|,
name|outputOI
argument_list|()
argument_list|)
operator|<
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

