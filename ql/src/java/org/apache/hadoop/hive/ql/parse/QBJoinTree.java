begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * Internal representation of the join tree  *   */
end_comment

begin_class
specifier|public
class|class
name|QBJoinTree
block|{
specifier|private
name|String
name|leftAlias
decl_stmt|;
specifier|private
name|String
index|[]
name|rightAliases
decl_stmt|;
specifier|private
name|String
index|[]
name|leftAliases
decl_stmt|;
specifier|private
name|QBJoinTree
name|joinSrc
decl_stmt|;
specifier|private
name|String
index|[]
name|baseSrc
decl_stmt|;
specifier|private
name|int
name|nextTag
decl_stmt|;
specifier|private
name|JoinCond
index|[]
name|joinCond
decl_stmt|;
specifier|private
name|boolean
name|noOuterJoin
decl_stmt|;
specifier|private
name|boolean
name|noSemiJoin
decl_stmt|;
comment|// keeps track of the right-hand-side table name of the left-semi-join, and
comment|// its list of join keys
specifier|private
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|ASTNode
argument_list|>
argument_list|>
name|rhsSemijoin
decl_stmt|;
comment|// join conditions
specifier|private
name|Vector
argument_list|<
name|Vector
argument_list|<
name|ASTNode
argument_list|>
argument_list|>
name|expressions
decl_stmt|;
comment|// filters
specifier|private
name|Vector
argument_list|<
name|Vector
argument_list|<
name|ASTNode
argument_list|>
argument_list|>
name|filters
decl_stmt|;
comment|// user asked for map-side join
specifier|private
name|boolean
name|mapSideJoin
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|mapAliases
decl_stmt|;
comment|// big tables that should be streamed
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|streamAliases
decl_stmt|;
comment|/**    * constructor    */
specifier|public
name|QBJoinTree
parameter_list|()
block|{
name|nextTag
operator|=
literal|0
expr_stmt|;
name|noOuterJoin
operator|=
literal|true
expr_stmt|;
name|noSemiJoin
operator|=
literal|true
expr_stmt|;
name|rhsSemijoin
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|ASTNode
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * returns left alias if any - this is used for merging later on    *     * @return left alias if any    */
specifier|public
name|String
name|getLeftAlias
parameter_list|()
block|{
return|return
name|leftAlias
return|;
block|}
comment|/**    * set left alias for the join expression    *     * @param leftAlias    *          String    */
specifier|public
name|void
name|setLeftAlias
parameter_list|(
name|String
name|leftAlias
parameter_list|)
block|{
name|this
operator|.
name|leftAlias
operator|=
name|leftAlias
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getRightAliases
parameter_list|()
block|{
return|return
name|rightAliases
return|;
block|}
specifier|public
name|void
name|setRightAliases
parameter_list|(
name|String
index|[]
name|rightAliases
parameter_list|)
block|{
name|this
operator|.
name|rightAliases
operator|=
name|rightAliases
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getLeftAliases
parameter_list|()
block|{
return|return
name|leftAliases
return|;
block|}
specifier|public
name|void
name|setLeftAliases
parameter_list|(
name|String
index|[]
name|leftAliases
parameter_list|)
block|{
name|this
operator|.
name|leftAliases
operator|=
name|leftAliases
expr_stmt|;
block|}
specifier|public
name|Vector
argument_list|<
name|Vector
argument_list|<
name|ASTNode
argument_list|>
argument_list|>
name|getExpressions
parameter_list|()
block|{
return|return
name|expressions
return|;
block|}
specifier|public
name|void
name|setExpressions
parameter_list|(
name|Vector
argument_list|<
name|Vector
argument_list|<
name|ASTNode
argument_list|>
argument_list|>
name|expressions
parameter_list|)
block|{
name|this
operator|.
name|expressions
operator|=
name|expressions
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getBaseSrc
parameter_list|()
block|{
return|return
name|baseSrc
return|;
block|}
specifier|public
name|void
name|setBaseSrc
parameter_list|(
name|String
index|[]
name|baseSrc
parameter_list|)
block|{
name|this
operator|.
name|baseSrc
operator|=
name|baseSrc
expr_stmt|;
block|}
specifier|public
name|QBJoinTree
name|getJoinSrc
parameter_list|()
block|{
return|return
name|joinSrc
return|;
block|}
specifier|public
name|void
name|setJoinSrc
parameter_list|(
name|QBJoinTree
name|joinSrc
parameter_list|)
block|{
name|this
operator|.
name|joinSrc
operator|=
name|joinSrc
expr_stmt|;
block|}
specifier|public
name|int
name|getNextTag
parameter_list|()
block|{
return|return
name|nextTag
operator|++
return|;
block|}
specifier|public
name|String
name|getJoinStreamDesc
parameter_list|()
block|{
return|return
literal|"$INTNAME"
return|;
block|}
specifier|public
name|JoinCond
index|[]
name|getJoinCond
parameter_list|()
block|{
return|return
name|joinCond
return|;
block|}
specifier|public
name|void
name|setJoinCond
parameter_list|(
name|JoinCond
index|[]
name|joinCond
parameter_list|)
block|{
name|this
operator|.
name|joinCond
operator|=
name|joinCond
expr_stmt|;
block|}
specifier|public
name|boolean
name|getNoOuterJoin
parameter_list|()
block|{
return|return
name|noOuterJoin
return|;
block|}
specifier|public
name|void
name|setNoOuterJoin
parameter_list|(
name|boolean
name|noOuterJoin
parameter_list|)
block|{
name|this
operator|.
name|noOuterJoin
operator|=
name|noOuterJoin
expr_stmt|;
block|}
specifier|public
name|boolean
name|getNoSemiJoin
parameter_list|()
block|{
return|return
name|noSemiJoin
return|;
block|}
specifier|public
name|void
name|setNoSemiJoin
parameter_list|(
name|boolean
name|semi
parameter_list|)
block|{
name|noSemiJoin
operator|=
name|semi
expr_stmt|;
block|}
comment|/**    * @return the filters    */
specifier|public
name|Vector
argument_list|<
name|Vector
argument_list|<
name|ASTNode
argument_list|>
argument_list|>
name|getFilters
parameter_list|()
block|{
return|return
name|filters
return|;
block|}
comment|/**    * @param filters    *          the filters to set    */
specifier|public
name|void
name|setFilters
parameter_list|(
name|Vector
argument_list|<
name|Vector
argument_list|<
name|ASTNode
argument_list|>
argument_list|>
name|filters
parameter_list|)
block|{
name|this
operator|.
name|filters
operator|=
name|filters
expr_stmt|;
block|}
comment|/**    * @return the mapSidejoin    */
specifier|public
name|boolean
name|isMapSideJoin
parameter_list|()
block|{
return|return
name|mapSideJoin
return|;
block|}
comment|/**    * @param mapSideJoin    *          the mapSidejoin to set    */
specifier|public
name|void
name|setMapSideJoin
parameter_list|(
name|boolean
name|mapSideJoin
parameter_list|)
block|{
name|this
operator|.
name|mapSideJoin
operator|=
name|mapSideJoin
expr_stmt|;
block|}
comment|/**    * @return the mapAliases    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getMapAliases
parameter_list|()
block|{
return|return
name|mapAliases
return|;
block|}
comment|/**    * @param mapAliases    *          the mapAliases to set    */
specifier|public
name|void
name|setMapAliases
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|mapAliases
parameter_list|)
block|{
name|this
operator|.
name|mapAliases
operator|=
name|mapAliases
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getStreamAliases
parameter_list|()
block|{
return|return
name|streamAliases
return|;
block|}
specifier|public
name|void
name|setStreamAliases
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|streamAliases
parameter_list|)
block|{
name|this
operator|.
name|streamAliases
operator|=
name|streamAliases
expr_stmt|;
block|}
comment|/**    * Insert only a key to the semijoin table name to column names map.    *     * @param alias    *          table name alias.    */
specifier|public
name|void
name|addRHSSemijoin
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rhsSemijoin
operator|.
name|containsKey
argument_list|(
name|alias
argument_list|)
condition|)
block|{
name|rhsSemijoin
operator|.
name|put
argument_list|(
name|alias
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Remeber the mapping of table alias to set of columns.    *     * @param alias    * @param columns    */
specifier|public
name|void
name|addRHSSemijoinColumns
parameter_list|(
name|String
name|alias
parameter_list|,
name|ArrayList
argument_list|<
name|ASTNode
argument_list|>
name|columns
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ASTNode
argument_list|>
name|cols
init|=
name|rhsSemijoin
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|cols
operator|==
literal|null
condition|)
block|{
name|rhsSemijoin
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|columns
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cols
operator|.
name|addAll
argument_list|(
name|columns
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Remeber the mapping of table alias to set of columns.    *     * @param alias    * @param columns    */
specifier|public
name|void
name|addRHSSemijoinColumns
parameter_list|(
name|String
name|alias
parameter_list|,
name|ASTNode
name|column
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ASTNode
argument_list|>
name|cols
init|=
name|rhsSemijoin
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|cols
operator|==
literal|null
condition|)
block|{
name|cols
operator|=
operator|new
name|ArrayList
argument_list|<
name|ASTNode
argument_list|>
argument_list|()
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|rhsSemijoin
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|cols
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cols
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ArrayList
argument_list|<
name|ASTNode
argument_list|>
name|getRHSSemijoinColumns
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
return|return
name|rhsSemijoin
operator|.
name|get
argument_list|(
name|alias
argument_list|)
return|;
block|}
comment|/**    * Merge the rhs tables from another join tree.    *     * @param src    *          the source join tree    */
specifier|public
name|void
name|mergeRHSSemijoin
parameter_list|(
name|QBJoinTree
name|src
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|ASTNode
argument_list|>
argument_list|>
name|e
range|:
name|src
operator|.
name|rhsSemijoin
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ASTNode
argument_list|>
name|value
init|=
name|rhsSemijoin
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|rhsSemijoin
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

