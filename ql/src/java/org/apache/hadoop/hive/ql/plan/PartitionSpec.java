begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * PartitionSpec  *  */
end_comment

begin_class
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Partition specification"
argument_list|)
specifier|public
class|class
name|PartitionSpec
block|{
specifier|private
class|class
name|PredicateSpec
block|{
specifier|private
name|String
name|operator
decl_stmt|;
specifier|private
name|String
name|value
decl_stmt|;
specifier|public
name|PredicateSpec
parameter_list|()
block|{     }
specifier|public
name|PredicateSpec
parameter_list|(
name|String
name|operator
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|operator
operator|=
name|operator
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|String
name|getOperator
parameter_list|()
block|{
return|return
name|this
operator|.
name|operator
return|;
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|this
operator|.
name|value
return|;
block|}
specifier|public
name|void
name|setOperator
parameter_list|(
name|String
name|operator
parameter_list|)
block|{
name|this
operator|.
name|operator
operator|=
name|operator
expr_stmt|;
block|}
specifier|public
name|void
name|setValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
operator|(
operator|(
name|this
operator|.
name|operator
operator|.
name|equals
argument_list|(
literal|"!="
argument_list|)
operator|)
condition|?
literal|"<>"
else|:
name|this
operator|.
name|operator
operator|)
operator|+
literal|" "
operator|+
name|this
operator|.
name|value
operator|)
return|;
block|}
block|}
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PredicateSpec
argument_list|>
name|partSpec
decl_stmt|;
specifier|public
name|PartitionSpec
parameter_list|()
block|{
name|this
operator|.
name|partSpec
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|PredicateSpec
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * @param key    *          partition key name for one partition key compare in the spec    * @param operator    *          the operator that is used for the comparison    * @param value    *          the value to be compared against    */
specifier|public
name|void
name|addPredicate
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|operator
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|partSpec
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|PredicateSpec
argument_list|(
name|operator
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param key    *          partition key to look for in the partition spec    * @return true if key exists in the partition spec, false otherwise    */
specifier|public
name|boolean
name|existsKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|(
name|partSpec
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|filterString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|PredicateSpec
argument_list|>
name|entry
range|:
name|this
operator|.
name|partSpec
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|filterString
operator|.
name|append
argument_list|(
literal|" AND "
argument_list|)
expr_stmt|;
block|}
name|filterString
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
return|return
name|filterString
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// getParitionsByFilter only works for string columns due to a JDO limitation.
comment|// The operator is only useful if it can be passed as a filter to the metastore.
comment|// For compatibility with other non-string partition columns, this function
comment|// returns the key, value mapping assuming that the operator is equality.
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPartSpecWithoutOperator
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|PredicateSpec
argument_list|>
name|entry
range|:
name|this
operator|.
name|partSpec
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|partSpec
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|partSpec
return|;
block|}
comment|// Again, for the same reason as the above function - getPartSpecWithoutOperator
specifier|public
name|boolean
name|isNonEqualityOperator
parameter_list|()
block|{
name|Iterator
argument_list|<
name|PredicateSpec
argument_list|>
name|iter
init|=
name|partSpec
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PredicateSpec
name|predSpec
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|predSpec
operator|.
name|operator
operator|.
name|equals
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

