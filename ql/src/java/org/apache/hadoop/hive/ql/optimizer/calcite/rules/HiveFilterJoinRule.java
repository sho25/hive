begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleOperand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
operator|.
name|InputFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
operator|.
name|FilterJoinRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveRelFactories
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|HiveFilterJoinRule
extends|extends
name|FilterJoinRule
block|{
specifier|public
specifier|static
specifier|final
name|HiveFilterJoinRule
name|FILTER_ON_JOIN
init|=
operator|new
name|HiveFilterJoinMergeRule
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|HiveFilterJoinRule
name|JOIN
init|=
operator|new
name|HiveFilterJoinTransposeRule
argument_list|()
decl_stmt|;
comment|/**    * Creates a PushFilterPastJoinRule with an explicit root operand.    */
specifier|protected
name|HiveFilterJoinRule
parameter_list|(
name|RelOptRuleOperand
name|operand
parameter_list|,
name|String
name|id
parameter_list|,
name|boolean
name|smart
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|,
name|id
argument_list|,
name|smart
argument_list|,
name|relBuilderFactory
argument_list|,
name|TRUE_PREDICATE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Rule that tries to push filter expressions into a join condition and into    * the inputs of the join.    */
specifier|public
specifier|static
class|class
name|HiveFilterJoinMergeRule
extends|extends
name|HiveFilterJoinRule
block|{
specifier|public
name|HiveFilterJoinMergeRule
parameter_list|()
block|{
name|super
argument_list|(
name|RelOptRule
operator|.
name|operand
argument_list|(
name|Filter
operator|.
name|class
argument_list|,
name|RelOptRule
operator|.
name|operand
argument_list|(
name|Join
operator|.
name|class
argument_list|,
name|RelOptRule
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|"HiveFilterJoinRule:filter"
argument_list|,
literal|true
argument_list|,
name|HiveRelFactories
operator|.
name|HIVE_BUILDER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|Filter
name|filter
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|HiveCalciteUtil
operator|.
name|isDeterministic
argument_list|(
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|Filter
name|filter
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|super
operator|.
name|perform
argument_list|(
name|call
argument_list|,
name|filter
argument_list|,
name|join
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|HiveFilterJoinTransposeRule
extends|extends
name|HiveFilterJoinRule
block|{
specifier|public
name|HiveFilterJoinTransposeRule
parameter_list|()
block|{
name|super
argument_list|(
name|RelOptRule
operator|.
name|operand
argument_list|(
name|Join
operator|.
name|class
argument_list|,
name|RelOptRule
operator|.
name|any
argument_list|()
argument_list|)
argument_list|,
literal|"HiveFilterJoinRule:no-filter"
argument_list|,
literal|true
argument_list|,
name|HiveRelFactories
operator|.
name|HIVE_BUILDER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|joinConds
init|=
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|join
operator|.
name|getCondition
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RexNode
name|joinCnd
range|:
name|joinConds
control|)
block|{
if|if
condition|(
operator|!
name|HiveCalciteUtil
operator|.
name|isDeterministic
argument_list|(
name|joinCnd
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|super
operator|.
name|perform
argument_list|(
name|call
argument_list|,
literal|null
argument_list|,
name|join
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|filterRefersToBothSidesOfJoin
parameter_list|(
name|RexNode
name|filter
parameter_list|,
name|Join
name|j
parameter_list|)
block|{
name|boolean
name|refersToBothSides
init|=
literal|false
decl_stmt|;
name|int
name|joinNoOfProjects
init|=
name|j
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
name|ImmutableBitSet
name|filterProjs
init|=
name|ImmutableBitSet
operator|.
name|FROM_BIT_SET
operator|.
name|apply
argument_list|(
operator|new
name|BitSet
argument_list|(
name|joinNoOfProjects
argument_list|)
argument_list|)
decl_stmt|;
name|ImmutableBitSet
name|allLeftProjs
init|=
name|filterProjs
operator|.
name|union
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|j
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ImmutableBitSet
name|allRightProjs
init|=
name|filterProjs
operator|.
name|union
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|j
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|,
name|joinNoOfProjects
argument_list|)
argument_list|)
decl_stmt|;
name|filterProjs
operator|=
name|filterProjs
operator|.
name|union
argument_list|(
name|InputFinder
operator|.
name|bits
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|allLeftProjs
operator|.
name|intersects
argument_list|(
name|filterProjs
argument_list|)
operator|&&
name|allRightProjs
operator|.
name|intersects
argument_list|(
name|filterProjs
argument_list|)
condition|)
name|refersToBothSides
operator|=
literal|true
expr_stmt|;
return|return
name|refersToBothSides
return|;
block|}
block|}
end_class

begin_comment
comment|// End PushFilterPastJoinRule.java
end_comment

end_unit

