begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_class
specifier|public
class|class
name|InterruptibleProcessing
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InterruptibleProcessing
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CHECK_INTERRUPTION_AFTER_ROWS_DEFAULT
init|=
literal|1000
decl_stmt|,
name|CHECK_INTERRUPTION_AFTER_ROWS_MAX
init|=
literal|100000
decl_stmt|,
name|CHECK_INTERRUPTION_AFTER_ROWS_MIN
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|TARGET_INTERRUPT_CHECK_TIME_NS
init|=
literal|3
operator|*
literal|1000000000.0
decl_stmt|;
specifier|private
name|int
name|checkInterruptionAfterRows
init|=
name|CHECK_INTERRUPTION_AFTER_ROWS_DEFAULT
decl_stmt|;
specifier|private
name|long
name|lastInterruptCheckNs
init|=
literal|0L
decl_stmt|;
specifier|private
name|int
name|nRows
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|isAborted
decl_stmt|;
comment|// Methods should really be protected, but some places have to use this as a field.
specifier|public
specifier|final
name|void
name|startAbortChecks
parameter_list|()
block|{
name|lastInterruptCheckNs
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
name|nRows
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|addRowAndMaybeCheckAbort
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|nRows
operator|++
operator|<
name|checkInterruptionAfterRows
condition|)
return|return;
name|long
name|time
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|checkAbortCondition
argument_list|()
expr_stmt|;
name|long
name|elapsedNs
init|=
operator|(
name|time
operator|-
name|lastInterruptCheckNs
operator|)
decl_stmt|;
if|if
condition|(
name|elapsedNs
operator|>=
literal|0
condition|)
block|{
comment|// Make sure we don't get stuck at 0 time, however unlikely that is.
name|double
name|diff
init|=
name|elapsedNs
operator|==
literal|0
condition|?
literal|10
else|:
name|TARGET_INTERRUPT_CHECK_TIME_NS
operator|/
name|elapsedNs
decl_stmt|;
name|int
name|newRows
init|=
name|Math
operator|.
name|min
argument_list|(
name|CHECK_INTERRUPTION_AFTER_ROWS_MAX
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|CHECK_INTERRUPTION_AFTER_ROWS_MIN
argument_list|,
call|(
name|int
call|)
argument_list|(
name|diff
operator|*
name|checkInterruptionAfterRows
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkInterruptionAfterRows
operator|!=
name|newRows
operator|&&
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adjusting abort check rows to "
operator|+
name|newRows
operator|+
literal|" from "
operator|+
name|checkInterruptionAfterRows
argument_list|)
expr_stmt|;
block|}
name|checkInterruptionAfterRows
operator|=
name|newRows
expr_stmt|;
block|}
name|nRows
operator|=
literal|0
expr_stmt|;
name|lastInterruptCheckNs
operator|=
name|time
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|checkAbortCondition
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|boolean
name|isInterrupted
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isAborted
operator|&&
operator|!
name|isInterrupted
condition|)
return|return;
comment|// Not cleaning the interrupt status.
throw|throw
operator|new
name|InterruptedException
argument_list|(
literal|"Processing thread aborted. Interrupt state: "
operator|+
name|isInterrupted
argument_list|)
throw|;
block|}
specifier|public
specifier|final
name|void
name|setAborted
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|this
operator|.
name|isAborted
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|void
name|abort
parameter_list|()
block|{
name|setAborted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
name|this
operator|.
name|isAborted
return|;
block|}
block|}
end_class

end_unit

