begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
operator|.
name|Counter
import|;
end_import

begin_comment
comment|/**  * MapRedStats.  *  * A data structure to keep one mapreduce's stats:  * number of mappers, number of reducers, accumulative CPU time and whether it  * succeeds.  *  */
end_comment

begin_class
specifier|public
class|class
name|MapRedStats
block|{
name|int
name|numMap
decl_stmt|;
name|int
name|numReduce
decl_stmt|;
name|long
name|cpuMSec
decl_stmt|;
name|Counters
name|counters
init|=
literal|null
decl_stmt|;
name|boolean
name|success
decl_stmt|;
name|String
name|jobId
decl_stmt|;
specifier|public
name|MapRedStats
parameter_list|(
name|int
name|numMap
parameter_list|,
name|int
name|numReduce
parameter_list|,
name|long
name|cpuMSec
parameter_list|,
name|boolean
name|ifSuccess
parameter_list|,
name|String
name|jobId
parameter_list|)
block|{
name|this
operator|.
name|numMap
operator|=
name|numMap
expr_stmt|;
name|this
operator|.
name|numReduce
operator|=
name|numReduce
expr_stmt|;
name|this
operator|.
name|cpuMSec
operator|=
name|cpuMSec
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|ifSuccess
expr_stmt|;
name|this
operator|.
name|jobId
operator|=
name|jobId
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
name|success
return|;
block|}
specifier|public
name|long
name|getCpuMSec
parameter_list|()
block|{
return|return
name|cpuMSec
return|;
block|}
specifier|public
name|int
name|getNumMap
parameter_list|()
block|{
return|return
name|numMap
return|;
block|}
specifier|public
name|void
name|setNumMap
parameter_list|(
name|int
name|numMap
parameter_list|)
block|{
name|this
operator|.
name|numMap
operator|=
name|numMap
expr_stmt|;
block|}
specifier|public
name|int
name|getNumReduce
parameter_list|()
block|{
return|return
name|numReduce
return|;
block|}
specifier|public
name|void
name|setNumReduce
parameter_list|(
name|int
name|numReduce
parameter_list|)
block|{
name|this
operator|.
name|numReduce
operator|=
name|numReduce
expr_stmt|;
block|}
specifier|public
name|void
name|setCounters
parameter_list|(
name|Counters
name|taskCounters
parameter_list|)
block|{
name|this
operator|.
name|counters
operator|=
name|taskCounters
expr_stmt|;
block|}
specifier|public
name|Counters
name|getCounters
parameter_list|()
block|{
return|return
name|this
operator|.
name|counters
return|;
block|}
specifier|public
name|void
name|setCpuMSec
parameter_list|(
name|long
name|cpuMSec
parameter_list|)
block|{
name|this
operator|.
name|cpuMSec
operator|=
name|cpuMSec
expr_stmt|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|boolean
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|String
name|getJobId
parameter_list|()
block|{
return|return
name|jobId
return|;
block|}
specifier|public
name|void
name|setJobId
parameter_list|(
name|String
name|jobId
parameter_list|)
block|{
name|this
operator|.
name|jobId
operator|=
name|jobId
expr_stmt|;
block|}
specifier|public
name|String
name|getTaskNumbers
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|numMap
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Map: "
operator|+
name|numMap
operator|+
literal|"  "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numReduce
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Reduce: "
operator|+
name|numReduce
operator|+
literal|"  "
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|numMap
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Map: "
operator|+
name|numMap
operator|+
literal|"  "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numReduce
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Reduce: "
operator|+
name|numReduce
operator|+
literal|"  "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cpuMSec
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" Cumulative CPU: "
operator|+
operator|(
name|cpuMSec
operator|/
literal|1000D
operator|)
operator|+
literal|" sec  "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|counters
operator|!=
literal|null
condition|)
block|{
name|Counter
name|hdfsReadCntr
init|=
name|counters
operator|.
name|findCounter
argument_list|(
literal|"FileSystemCounters"
argument_list|,
literal|"HDFS_BYTES_READ"
argument_list|)
decl_stmt|;
name|long
name|hdfsRead
decl_stmt|;
if|if
condition|(
name|hdfsReadCntr
operator|!=
literal|null
operator|&&
operator|(
name|hdfsRead
operator|=
name|hdfsReadCntr
operator|.
name|getValue
argument_list|()
operator|)
operator|>=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" HDFS Read: "
operator|+
name|hdfsRead
argument_list|)
expr_stmt|;
block|}
name|Counter
name|hdfsWrittenCntr
init|=
name|counters
operator|.
name|findCounter
argument_list|(
literal|"FileSystemCounters"
argument_list|,
literal|"HDFS_BYTES_WRITTEN"
argument_list|)
decl_stmt|;
name|long
name|hdfsWritten
decl_stmt|;
if|if
condition|(
name|hdfsWrittenCntr
operator|!=
literal|null
operator|&&
operator|(
name|hdfsWritten
operator|=
name|hdfsWrittenCntr
operator|.
name|getValue
argument_list|()
operator|)
operator|>=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" HDFS Write: "
operator|+
name|hdfsWritten
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" "
operator|+
operator|(
name|success
condition|?
literal|"SUCCESS"
else|:
literal|"FAIL"
operator|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

