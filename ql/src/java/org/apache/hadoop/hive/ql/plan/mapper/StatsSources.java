begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|signature
operator|.
name|OpTreeSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapper
operator|.
name|PlanMapper
operator|.
name|EquivGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|OperatorStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
operator|.
name|Builder
import|;
end_import

begin_class
specifier|public
class|class
name|StatsSources
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StatsSources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
enum|enum
name|StatsSourceMode
block|{
name|query
block|,
name|hiveserver
block|,
name|metastore
block|;   }
specifier|public
specifier|static
name|void
name|initialize
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
block|{
comment|// requesting for the stats source will implicitly initialize it
name|getStatsSource
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|StatsSource
name|getStatsSource
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|String
name|mode
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_QUERY_REEXECUTION_STATS_PERSISTENCE
argument_list|)
decl_stmt|;
name|int
name|cacheSize
init|=
name|conf
operator|.
name|getIntVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_QUERY_REEXECUTION_STATS_CACHE_SIZE
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
literal|"query"
case|:
return|return
operator|new
name|MapBackedStatsSource
argument_list|()
return|;
case|case
literal|"hiveserver"
case|:
return|return
name|StatsSources
operator|.
name|globalStatsSource
argument_list|(
name|cacheSize
argument_list|)
return|;
case|case
literal|"metastore"
case|:
return|return
name|StatsSources
operator|.
name|metastoreBackedStatsSource
argument_list|(
name|StatsSources
operator|.
name|globalStatsSource
argument_list|(
name|cacheSize
argument_list|)
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown StatsSource setting: "
operator|+
name|mode
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|StatsSource
name|getStatsSourceContaining
parameter_list|(
name|StatsSource
name|currentStatsSource
parameter_list|,
name|PlanMapper
name|pm
parameter_list|)
block|{
name|StatsSource
name|statsSource
init|=
name|currentStatsSource
decl_stmt|;
if|if
condition|(
name|currentStatsSource
operator|==
name|EmptyStatsSource
operator|.
name|INSTANCE
condition|)
block|{
name|statsSource
operator|=
operator|new
name|MapBackedStatsSource
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|OpTreeSignature
argument_list|,
name|OperatorStats
argument_list|>
name|statMap
init|=
name|extractStatMapFromPlanMapper
argument_list|(
name|pm
argument_list|)
decl_stmt|;
name|statsSource
operator|.
name|putAll
argument_list|(
name|statMap
argument_list|)
expr_stmt|;
return|return
name|statsSource
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|OpTreeSignature
argument_list|,
name|OperatorStats
argument_list|>
name|extractStatMapFromPlanMapper
parameter_list|(
name|PlanMapper
name|pm
parameter_list|)
block|{
name|Builder
argument_list|<
name|OpTreeSignature
argument_list|,
name|OperatorStats
argument_list|>
name|map
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|EquivGroup
argument_list|>
name|it
init|=
name|pm
operator|.
name|iterateGroups
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|EquivGroup
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OperatorStats
argument_list|>
name|stat
init|=
name|e
operator|.
name|getAll
argument_list|(
name|OperatorStats
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OpTreeSignature
argument_list|>
name|sig
init|=
name|e
operator|.
name|getAll
argument_list|(
name|OpTreeSignature
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|||
name|sig
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"expected(stat-sig) 1-1, got {}-{} ;"
argument_list|,
name|stat
operator|.
name|size
argument_list|()
argument_list|,
name|sig
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|OperatorStats
name|s
range|:
name|stat
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|OpTreeSignature
name|s
range|:
name|sig
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stat
operator|.
name|size
argument_list|()
operator|>=
literal|1
operator|&&
name|sig
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|sig
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|stat
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|StatsSource
name|globalStatsSource
decl_stmt|;
specifier|private
specifier|static
name|MetastoreStatsConnector
name|metastoreStatsConnector
decl_stmt|;
specifier|public
specifier|static
name|StatsSource
name|globalStatsSource
parameter_list|(
name|int
name|cacheSize
parameter_list|)
block|{
if|if
condition|(
name|globalStatsSource
operator|==
literal|null
condition|)
block|{
name|globalStatsSource
operator|=
operator|new
name|CachingStatsSource
argument_list|(
name|cacheSize
argument_list|)
expr_stmt|;
block|}
return|return
name|globalStatsSource
return|;
block|}
specifier|public
specifier|static
name|StatsSource
name|metastoreBackedStatsSource
parameter_list|(
name|StatsSource
name|parent
parameter_list|)
block|{
if|if
condition|(
name|metastoreStatsConnector
operator|==
literal|null
condition|)
block|{
name|metastoreStatsConnector
operator|=
operator|new
name|MetastoreStatsConnector
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
return|return
name|metastoreStatsConnector
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|void
name|clearGlobalStats
parameter_list|()
block|{
if|if
condition|(
name|metastoreStatsConnector
operator|!=
literal|null
condition|)
block|{
name|metastoreStatsConnector
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
name|globalStatsSource
operator|=
literal|null
expr_stmt|;
name|metastoreStatsConnector
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

