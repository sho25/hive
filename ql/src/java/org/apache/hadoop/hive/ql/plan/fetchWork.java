begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_class
annotation|@
name|explain
argument_list|(
name|displayName
operator|=
literal|"Fetch Operator"
argument_list|)
specifier|public
class|class
name|fetchWork
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|//  private loadFileDesc loadFileWork;
comment|//  private tableDesc    tblDesc;
specifier|private
name|Path
name|srcDir
decl_stmt|;
specifier|private
name|Properties
name|schema
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Deserializer
argument_list|>
name|deserializerClass
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
decl_stmt|;
specifier|private
name|int
name|limit
decl_stmt|;
specifier|public
name|fetchWork
parameter_list|()
block|{ }
comment|/** 	 * @param deserializer 	 * @param deserializerClass 	 * @param inputFormatClass 	 * @param schema 	 * @param srcDir 	 */
specifier|public
name|fetchWork
parameter_list|(
name|Path
name|srcDir
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Deserializer
argument_list|>
name|deserializerClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
parameter_list|,
name|Properties
name|schema
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|this
operator|.
name|srcDir
operator|=
name|srcDir
expr_stmt|;
name|this
operator|.
name|deserializerClass
operator|=
name|deserializerClass
expr_stmt|;
name|this
operator|.
name|inputFormatClass
operator|=
name|inputFormatClass
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
block|}
comment|/** 	 * @return the srcDir 	 */
annotation|@
name|explain
argument_list|(
name|displayName
operator|=
literal|"source"
argument_list|)
specifier|public
name|Path
name|getSrcDir
parameter_list|()
block|{
return|return
name|srcDir
return|;
block|}
comment|/** 	 * @param srcDir the srcDir to set 	 */
specifier|public
name|void
name|setSrcDir
parameter_list|(
name|Path
name|srcDir
parameter_list|)
block|{
name|this
operator|.
name|srcDir
operator|=
name|srcDir
expr_stmt|;
block|}
comment|/** 	 * @return the schema 	 */
specifier|public
name|Properties
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
comment|/** 	 * @param schema the schema to set 	 */
specifier|public
name|void
name|setSchema
parameter_list|(
name|Properties
name|schema
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
block|}
comment|/** 	 * @return the deserializerClass 	 */
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Deserializer
argument_list|>
name|getDeserializerClass
parameter_list|()
block|{
return|return
name|deserializerClass
return|;
block|}
comment|/** 	 * @param deserializerClass the deserializerClass to set 	 */
specifier|public
name|void
name|setDeserializerClass
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Deserializer
argument_list|>
name|deserializerClass
parameter_list|)
block|{
name|this
operator|.
name|deserializerClass
operator|=
name|deserializerClass
expr_stmt|;
block|}
comment|/** 	 * @return the inputFormatClass 	 */
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|getInputFormatClass
parameter_list|()
block|{
return|return
name|inputFormatClass
return|;
block|}
comment|/** 	 * @param inputFormatClass the inputFormatClass to set 	 */
specifier|public
name|void
name|setInputFormatClass
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
parameter_list|)
block|{
name|this
operator|.
name|inputFormatClass
operator|=
name|inputFormatClass
expr_stmt|;
block|}
comment|/** 	 * @return the limit 	 */
annotation|@
name|explain
argument_list|(
name|displayName
operator|=
literal|"limit"
argument_list|)
specifier|public
name|int
name|getLimit
parameter_list|()
block|{
return|return
name|limit
return|;
block|}
comment|/** 	 * @param limit the limit to set 	 */
specifier|public
name|void
name|setLimit
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
block|}
block|}
end_class

end_unit

