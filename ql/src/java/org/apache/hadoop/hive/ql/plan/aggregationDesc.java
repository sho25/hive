begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDAF
import|;
end_import

begin_class
specifier|public
class|class
name|aggregationDesc
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|UDAF
argument_list|>
name|aggregationClass
decl_stmt|;
specifier|private
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
name|parameters
decl_stmt|;
specifier|private
name|boolean
name|distinct
decl_stmt|;
specifier|public
name|aggregationDesc
parameter_list|()
block|{}
specifier|public
name|aggregationDesc
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|UDAF
argument_list|>
name|aggregationClass
parameter_list|,
specifier|final
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
name|parameters
parameter_list|,
specifier|final
name|boolean
name|distinct
parameter_list|)
block|{
name|this
operator|.
name|aggregationClass
operator|=
name|aggregationClass
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
name|this
operator|.
name|distinct
operator|=
name|distinct
expr_stmt|;
block|}
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|UDAF
argument_list|>
name|getAggregationClass
parameter_list|()
block|{
return|return
name|this
operator|.
name|aggregationClass
return|;
block|}
specifier|public
name|void
name|setAggregationClass
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|UDAF
argument_list|>
name|aggregationClass
parameter_list|)
block|{
name|this
operator|.
name|aggregationClass
operator|=
name|aggregationClass
expr_stmt|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|this
operator|.
name|parameters
return|;
block|}
specifier|public
name|void
name|setParameters
parameter_list|(
specifier|final
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
specifier|public
name|boolean
name|getDistinct
parameter_list|()
block|{
return|return
name|this
operator|.
name|distinct
return|;
block|}
specifier|public
name|void
name|setDistinct
parameter_list|(
specifier|final
name|boolean
name|distinct
parameter_list|)
block|{
name|this
operator|.
name|distinct
operator|=
name|distinct
expr_stmt|;
block|}
annotation|@
name|explain
argument_list|(
name|displayName
operator|=
literal|"expr"
argument_list|)
specifier|public
name|String
name|getExprString
parameter_list|()
block|{
name|FunctionInfo
name|fI
init|=
name|FunctionRegistry
operator|.
name|getInfo
argument_list|(
name|aggregationClass
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|fI
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
if|if
condition|(
name|distinct
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"DISTINCT "
argument_list|)
expr_stmt|;
block|}
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|exprNodeDesc
name|exp
range|:
name|parameters
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|exp
operator|.
name|getExprString
argument_list|()
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

