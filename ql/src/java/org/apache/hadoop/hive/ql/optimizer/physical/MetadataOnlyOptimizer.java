begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|physical
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultGraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|RuleRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableScanDesc
import|;
end_import

begin_comment
comment|/**  *  * MetadataOnlyOptimizer determines to which TableScanOperators "metadata only"  * optimization can be applied. Such operator must use only partition columns  * (it is easy to check, because we are after column pruning and all places  * where the data from the operator is used must go through GroupByOperator  * distinct or distinct-like aggregations. Aggregation is distinct-like if  * adding distinct wouldn't change the result, for example min, max.  *  * We cannot apply the optimization without group by, because the results depend  * on the numbers of rows in partitions, for example count(hr) will count all  * rows in matching partitions.  *  */
end_comment

begin_class
specifier|public
class|class
name|MetadataOnlyOptimizer
implements|implements
name|PhysicalPlanResolver
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MetadataOnlyOptimizer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|static
class|class
name|WalkerCtx
implements|implements
name|NodeProcessorCtx
block|{
comment|/* operators for which there is chance the optimization can be applied */
specifier|private
specifier|final
name|HashSet
argument_list|<
name|TableScanOperator
argument_list|>
name|possible
init|=
operator|new
name|HashSet
argument_list|<
name|TableScanOperator
argument_list|>
argument_list|()
decl_stmt|;
comment|/* operators for which the optimization will be successful */
specifier|private
specifier|final
name|HashSet
argument_list|<
name|TableScanOperator
argument_list|>
name|success
init|=
operator|new
name|HashSet
argument_list|<
name|TableScanOperator
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Sets operator as one for which there is a chance to apply optimization      *      * @param op      *          the operator      */
specifier|public
name|void
name|setMayBeMetadataOnly
parameter_list|(
name|TableScanOperator
name|op
parameter_list|)
block|{
name|possible
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
comment|/** Convert all possible operators to success */
specifier|public
name|void
name|convertMetadataOnly
parameter_list|()
block|{
name|success
operator|.
name|addAll
argument_list|(
name|possible
argument_list|)
expr_stmt|;
name|possible
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Convert all possible operators to banned      */
specifier|public
name|void
name|convertNotMetadataOnly
parameter_list|()
block|{
name|possible
operator|.
name|clear
argument_list|()
expr_stmt|;
name|success
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns HashSet of collected operators for which the optimization may be      * applicable.      */
specifier|public
name|HashSet
argument_list|<
name|TableScanOperator
argument_list|>
name|getMayBeMetadataOnlyTableScans
parameter_list|()
block|{
return|return
name|possible
return|;
block|}
comment|/**      * Returns HashSet of collected operators for which the optimization is      * applicable.      */
specifier|public
name|HashSet
argument_list|<
name|TableScanOperator
argument_list|>
name|getMetadataOnlyTableScans
parameter_list|()
block|{
return|return
name|success
return|;
block|}
block|}
specifier|static
specifier|private
class|class
name|TableScanProcessor
implements|implements
name|NodeProcessor
block|{
specifier|public
name|TableScanProcessor
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TableScanOperator
name|tsOp
init|=
operator|(
name|TableScanOperator
operator|)
name|nd
decl_stmt|;
name|WalkerCtx
name|walkerCtx
init|=
operator|(
name|WalkerCtx
operator|)
name|procCtx
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|colIDs
init|=
name|tsOp
operator|.
name|getNeededColumnIDs
argument_list|()
decl_stmt|;
name|TableScanDesc
name|desc
init|=
name|tsOp
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|boolean
name|noColNeeded
init|=
operator|(
name|colIDs
operator|==
literal|null
operator|)
operator|||
operator|(
name|colIDs
operator|.
name|isEmpty
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|noVCneeded
init|=
operator|(
name|desc
operator|==
literal|null
operator|)
operator|||
operator|(
name|desc
operator|.
name|getVirtualCols
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|desc
operator|.
name|getVirtualCols
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|noColNeeded
operator|&&
name|noVCneeded
condition|)
block|{
name|walkerCtx
operator|.
name|setMayBeMetadataOnly
argument_list|(
name|tsOp
argument_list|)
expr_stmt|;
block|}
return|return
name|nd
return|;
block|}
block|}
specifier|static
specifier|private
class|class
name|FileSinkProcessor
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|WalkerCtx
name|walkerCtx
init|=
operator|(
name|WalkerCtx
operator|)
name|procCtx
decl_stmt|;
comment|// There can be atmost one element eligible to be converted to
comment|// metadata only
if|if
condition|(
name|walkerCtx
operator|.
name|getMayBeMetadataOnlyTableScans
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|nd
return|;
block|}
for|for
control|(
name|Node
name|op
range|:
name|stack
control|)
block|{
if|if
condition|(
name|op
operator|instanceof
name|GroupByOperator
condition|)
block|{
name|GroupByOperator
name|gby
init|=
operator|(
name|GroupByOperator
operator|)
name|op
decl_stmt|;
if|if
condition|(
operator|!
name|gby
operator|.
name|getConf
argument_list|()
operator|.
name|isDistinctLike
argument_list|()
condition|)
block|{
comment|// GroupBy not distinct like, disabling
name|walkerCtx
operator|.
name|convertNotMetadataOnly
argument_list|()
expr_stmt|;
return|return
name|nd
return|;
block|}
block|}
block|}
name|walkerCtx
operator|.
name|convertMetadataOnly
argument_list|()
expr_stmt|;
return|return
name|nd
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|PhysicalContext
name|resolve
parameter_list|(
name|PhysicalContext
name|pctx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R1"
argument_list|,
name|TableScanOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
operator|new
name|TableScanProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R2"
argument_list|,
name|GroupByOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%.*"
operator|+
name|FileSinkOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
operator|new
name|FileSinkProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|Dispatcher
name|disp
init|=
operator|new
name|NullScanTaskDispatcher
argument_list|(
name|pctx
argument_list|,
name|opRules
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|addAll
argument_list|(
name|pctx
operator|.
name|getRootTasks
argument_list|()
argument_list|)
expr_stmt|;
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|pctx
return|;
block|}
block|}
end_class

end_unit

