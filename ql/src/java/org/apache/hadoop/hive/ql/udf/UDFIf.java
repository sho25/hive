begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|AmbiguousMethodException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFMethodResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * UDF Class for SQL construct "IF".  */
end_comment

begin_class
specifier|public
class|class
name|UDFIf
extends|extends
name|UDF
block|{
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|UDFIf
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|UDFIf
parameter_list|()
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setResolver
argument_list|(
operator|new
name|UDFIfMethodResolver
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Method Resolver for SQL construct "IF".    * This method resolver follows the type determination process:    *     * 1. If valueTrue or valueFalse is a String, then result is String    * 2. If valueTrue or valueFalse is a Double, then result is Double    * 3. If valueTrue or valueFalse is a Long, then result is a Long    * 4. If valueTrue or valueFalse is a Integer, then result is a Integer    * 5. If valueTrue or valueFalse is a Short, then result is a Short    * 6. If valueTrue or valueFalse is a Byte, then result is a Byte    * 7. If valueTrue or valueFalse is a Boolean, then result is a Boolean    *     * This mimics the process from MySQL http://dev.mysql.com/doc/refman/5.0/en/control-flow-functions.html#function_if    */
specifier|public
specifier|static
class|class
name|UDFIfMethodResolver
implements|implements
name|UDFMethodResolver
block|{
comment|/**      * The udfclass for which resolution is needed.      */
name|Class
argument_list|<
name|?
extends|extends
name|UDF
argument_list|>
name|udfClass
decl_stmt|;
specifier|static
name|TypeInfo
index|[]
name|classPriority
init|=
block|{
name|TypeInfoFactory
operator|.
name|stringTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|floatTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|shortTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|byteTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
block|,
name|TypeInfoFactory
operator|.
name|voidTypeInfo
block|}
decl_stmt|;
comment|/**      * Constuctor.      */
specifier|public
name|UDFIfMethodResolver
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|UDF
argument_list|>
name|udfClass
parameter_list|)
block|{
name|this
operator|.
name|udfClass
operator|=
name|udfClass
expr_stmt|;
block|}
comment|/* (non-Javadoc)      * @see org.apache.hadoop.hive.ql.exec.UDFMethodResolver#getEvalMethod(java.util.List)      */
annotation|@
name|Override
specifier|public
name|Method
name|getEvalMethod
parameter_list|(
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|argTypeInfos
parameter_list|)
throws|throws
name|AmbiguousMethodException
block|{
if|if
condition|(
name|argTypeInfos
operator|.
name|size
argument_list|()
operator|!=
literal|3
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|pClasses
init|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|pClasses
operator|.
name|add
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|classPriority
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|argTypeInfos
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|classPriority
index|[
name|i
index|]
argument_list|)
operator|||
name|argTypeInfos
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|equals
argument_list|(
name|classPriority
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|pClasses
operator|.
name|add
argument_list|(
name|classPriority
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|pClasses
operator|.
name|add
argument_list|(
name|classPriority
index|[
name|i
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|pClasses
operator|.
name|size
argument_list|()
operator|!=
literal|3
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Method
name|udfMethod
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|udfClass
operator|.
name|getMethods
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"evaluate"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|acceptedTypeInfos
init|=
name|TypeInfoUtils
operator|.
name|getParameterTypeInfos
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|boolean
name|match
init|=
operator|(
name|acceptedTypeInfos
operator|.
name|size
argument_list|()
operator|==
name|pClasses
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pClasses
operator|.
name|size
argument_list|()
operator|&&
name|match
condition|;
name|i
operator|++
control|)
block|{
name|TypeInfo
name|accepted
init|=
name|acceptedTypeInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|accepted
operator|.
name|equals
argument_list|(
name|pClasses
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|match
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|match
condition|)
block|{
if|if
condition|(
name|udfMethod
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AmbiguousMethodException
argument_list|(
name|udfClass
argument_list|,
name|argTypeInfos
argument_list|)
throw|;
block|}
else|else
block|{
name|udfMethod
operator|=
name|m
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|udfMethod
return|;
block|}
block|}
comment|/**    * Method for SQL construct "IF(test,valueTrue,valueFalse)"    */
specifier|public
name|Text
name|evaluate
parameter_list|(
name|BooleanWritable
name|test
parameter_list|,
name|Text
name|valueTrue
parameter_list|,
name|Text
name|valueFalse
parameter_list|)
block|{
if|if
condition|(
name|test
operator|!=
literal|null
operator|&&
name|test
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
name|valueTrue
return|;
block|}
else|else
block|{
return|return
name|valueFalse
return|;
block|}
block|}
comment|/**    * Method for SQL construct "IF(test,valueTrue,valueFalse)"    */
specifier|public
name|DoubleWritable
name|evaluate
parameter_list|(
name|BooleanWritable
name|test
parameter_list|,
name|DoubleWritable
name|valueTrue
parameter_list|,
name|DoubleWritable
name|valueFalse
parameter_list|)
block|{
if|if
condition|(
name|test
operator|!=
literal|null
operator|&&
name|test
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
name|valueTrue
return|;
block|}
else|else
block|{
return|return
name|valueFalse
return|;
block|}
block|}
comment|/**    * Method for SQL construct "IF(test,valueTrue,valueFalse)"    */
specifier|public
name|FloatWritable
name|evaluate
parameter_list|(
name|BooleanWritable
name|test
parameter_list|,
name|FloatWritable
name|valueTrue
parameter_list|,
name|FloatWritable
name|valueFalse
parameter_list|)
block|{
if|if
condition|(
name|test
operator|!=
literal|null
operator|&&
name|test
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
name|valueTrue
return|;
block|}
else|else
block|{
return|return
name|valueFalse
return|;
block|}
block|}
comment|/**    * Method for SQL construct "IF(test,valueTrue,valueFalse)"    */
specifier|public
name|ByteWritable
name|evaluate
parameter_list|(
name|BooleanWritable
name|test
parameter_list|,
name|ByteWritable
name|valueTrue
parameter_list|,
name|ByteWritable
name|valueFalse
parameter_list|)
block|{
if|if
condition|(
name|test
operator|!=
literal|null
operator|&&
name|test
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
name|valueTrue
return|;
block|}
else|else
block|{
return|return
name|valueFalse
return|;
block|}
block|}
comment|/**    * Method for SQL construct "IF(test,valueTrue,valueFalse)"    */
specifier|public
name|ShortWritable
name|evaluate
parameter_list|(
name|BooleanWritable
name|test
parameter_list|,
name|ShortWritable
name|valueTrue
parameter_list|,
name|ShortWritable
name|valueFalse
parameter_list|)
block|{
if|if
condition|(
name|test
operator|!=
literal|null
operator|&&
name|test
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
name|valueTrue
return|;
block|}
else|else
block|{
return|return
name|valueFalse
return|;
block|}
block|}
comment|/**    * Method for SQL construct "IF(test,valueTrue,valueFalse)"    */
specifier|public
name|IntWritable
name|evaluate
parameter_list|(
name|BooleanWritable
name|test
parameter_list|,
name|IntWritable
name|valueTrue
parameter_list|,
name|IntWritable
name|valueFalse
parameter_list|)
block|{
if|if
condition|(
name|test
operator|!=
literal|null
operator|&&
name|test
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
name|valueTrue
return|;
block|}
else|else
block|{
return|return
name|valueFalse
return|;
block|}
block|}
comment|/**    * Method for SQL construct "IF(test,valueTrue,valueFalse)"    */
specifier|public
name|LongWritable
name|evaluate
parameter_list|(
name|BooleanWritable
name|test
parameter_list|,
name|LongWritable
name|valueTrue
parameter_list|,
name|LongWritable
name|valueFalse
parameter_list|)
block|{
if|if
condition|(
name|test
operator|!=
literal|null
operator|&&
name|test
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
name|valueTrue
return|;
block|}
else|else
block|{
return|return
name|valueFalse
return|;
block|}
block|}
comment|/**    * Method for SQL construct "IF(test,valueTrue,valueFalse)"    */
specifier|public
name|BooleanWritable
name|evaluate
parameter_list|(
name|BooleanWritable
name|test
parameter_list|,
name|BooleanWritable
name|valueTrue
parameter_list|,
name|BooleanWritable
name|valueFalse
parameter_list|)
block|{
if|if
condition|(
name|test
operator|!=
literal|null
operator|&&
name|test
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
name|valueTrue
return|;
block|}
else|else
block|{
return|return
name|valueFalse
return|;
block|}
block|}
comment|/**    * Method for SQL construct "IF(test,valueTrue,valueFalse)"    */
specifier|public
name|NullWritable
name|evaluate
parameter_list|(
name|BooleanWritable
name|test
parameter_list|,
name|NullWritable
name|valueTrue
parameter_list|,
name|NullWritable
name|valueFalse
parameter_list|)
block|{
if|if
condition|(
name|test
operator|!=
literal|null
operator|&&
name|test
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
name|valueTrue
return|;
block|}
else|else
block|{
return|return
name|valueFalse
return|;
block|}
block|}
block|}
end_class

end_unit

