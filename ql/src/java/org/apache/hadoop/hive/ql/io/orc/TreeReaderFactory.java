begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|StringExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
operator|.
name|TextReaderShim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|BitFieldReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|DynamicByteArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|InStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|IntegerReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|PositionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|RunLengthByteReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|RunLengthIntegerReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|RunLengthIntegerReaderV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|SerializationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|StreamName
import|;
end_import

begin_comment
comment|/**  * Factory for creating ORC tree readers.  */
end_comment

begin_class
specifier|public
class|class
name|TreeReaderFactory
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TreeReaderFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
class|class
name|TreeReaderSchema
block|{
comment|/**      * The types in the ORC file.      */
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|fileTypes
decl_stmt|;
comment|/**      * The treeReaderSchema that the reader should read as.      */
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|schemaTypes
decl_stmt|;
comment|/**      * The subtype of the row STRUCT.  Different than 0 for ACID.      */
name|int
name|innerStructSubtype
decl_stmt|;
specifier|public
name|TreeReaderSchema
parameter_list|()
block|{
name|fileTypes
operator|=
literal|null
expr_stmt|;
name|schemaTypes
operator|=
literal|null
expr_stmt|;
name|innerStructSubtype
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|TreeReaderSchema
name|fileTypes
parameter_list|(
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|fileTypes
parameter_list|)
block|{
name|this
operator|.
name|fileTypes
operator|=
name|fileTypes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TreeReaderSchema
name|schemaTypes
parameter_list|(
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|schemaTypes
parameter_list|)
block|{
name|this
operator|.
name|schemaTypes
operator|=
name|schemaTypes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TreeReaderSchema
name|innerStructSubtype
parameter_list|(
name|int
name|innerStructSubtype
parameter_list|)
block|{
name|this
operator|.
name|innerStructSubtype
operator|=
name|innerStructSubtype
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|getFileTypes
parameter_list|()
block|{
return|return
name|fileTypes
return|;
block|}
specifier|public
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|getSchemaTypes
parameter_list|()
block|{
return|return
name|schemaTypes
return|;
block|}
specifier|public
name|int
name|getInnerStructSubtype
parameter_list|()
block|{
return|return
name|innerStructSubtype
return|;
block|}
block|}
specifier|public
specifier|abstract
specifier|static
class|class
name|TreeReader
block|{
specifier|protected
specifier|final
name|int
name|columnId
decl_stmt|;
specifier|protected
name|BitFieldReader
name|present
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|valuePresent
init|=
literal|false
decl_stmt|;
specifier|protected
name|int
name|vectorColumnCount
decl_stmt|;
name|TreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|TreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|columnId
operator|=
name|columnId
expr_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
name|present
operator|=
literal|null
expr_stmt|;
name|valuePresent
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|present
operator|=
operator|new
name|BitFieldReader
argument_list|(
name|in
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|vectorColumnCount
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|void
name|setVectorColumnCount
parameter_list|(
name|int
name|vectorColumnCount
parameter_list|)
block|{
name|this
operator|.
name|vectorColumnCount
operator|=
name|vectorColumnCount
expr_stmt|;
block|}
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
argument_list|)
throw|;
block|}
block|}
specifier|static
name|IntegerReader
name|createIntegerReader
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
name|kind
parameter_list|,
name|InStream
name|in
parameter_list|,
name|boolean
name|signed
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|DIRECT_V2
case|:
case|case
name|DICTIONARY_V2
case|:
return|return
operator|new
name|RunLengthIntegerReaderV2
argument_list|(
name|in
argument_list|,
name|signed
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|DIRECT
case|:
case|case
name|DICTIONARY
case|:
return|return
operator|new
name|RunLengthIntegerReader
argument_list|(
name|in
argument_list|,
name|signed
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown encoding "
operator|+
name|kind
argument_list|)
throw|;
block|}
block|}
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|checkEncoding
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
argument_list|)
expr_stmt|;
name|InStream
name|in
init|=
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|PRESENT
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
name|present
operator|=
literal|null
expr_stmt|;
name|valuePresent
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|present
operator|=
operator|new
name|BitFieldReader
argument_list|(
name|in
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Seek to the given position.      *      * @param index the indexes loaded from the file      * @throws IOException      */
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|present
operator|!=
literal|null
condition|)
block|{
name|present
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|long
name|countNonNulls
parameter_list|(
name|long
name|rows
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|present
operator|!=
literal|null
condition|)
block|{
name|long
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|c
init|=
literal|0
init|;
name|c
operator|<
name|rows
condition|;
operator|++
name|c
control|)
block|{
if|if
condition|(
name|present
operator|.
name|next
argument_list|()
operator|==
literal|1
condition|)
block|{
name|result
operator|+=
literal|1
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
else|else
block|{
return|return
name|rows
return|;
block|}
block|}
specifier|abstract
name|void
name|skipRows
parameter_list|(
name|long
name|rows
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|present
operator|!=
literal|null
condition|)
block|{
name|valuePresent
operator|=
name|present
operator|.
name|next
argument_list|()
operator|==
literal|1
expr_stmt|;
block|}
return|return
name|previous
return|;
block|}
comment|/**      * Populates the isNull vector array in the previousVector object based on      * the present stream values. This function is called from all the child      * readers, and they all set the values based on isNull field value.      *      * @param previousVector The columnVector object whose isNull value is populated      * @param batchSize      Size of the column vector      * @return next column vector      * @throws IOException      */
specifier|public
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|ColumnVector
name|result
init|=
operator|(
name|ColumnVector
operator|)
name|previousVector
decl_stmt|;
if|if
condition|(
name|present
operator|!=
literal|null
condition|)
block|{
comment|// Set noNulls and isNull vector of the ColumnVector based on
comment|// present stream
name|result
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|isNull
index|[
name|i
index|]
operator|=
operator|(
name|present
operator|.
name|next
argument_list|()
operator|!=
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|noNulls
operator|&&
name|result
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// There is not present stream, this means that all the values are
comment|// present.
name|result
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|previousVector
return|;
block|}
specifier|public
name|BitFieldReader
name|getPresent
parameter_list|()
block|{
return|return
name|present
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|BooleanTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|BitFieldReader
name|reader
init|=
literal|null
decl_stmt|;
name|BooleanTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|BooleanTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|reader
operator|=
operator|new
name|BitFieldReader
argument_list|(
name|data
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|BitFieldReader
argument_list|(
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|BooleanWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|BooleanWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|BooleanWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|reader
operator|.
name|next
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|LongColumnVector
name|result
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// Read value entries based on isNull entries
name|reader
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ByteTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|RunLengthByteReader
name|reader
init|=
literal|null
decl_stmt|;
name|ByteTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ByteTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|=
operator|new
name|RunLengthByteReader
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|RunLengthByteReader
argument_list|(
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|ByteWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|ByteWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|ByteWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|LongColumnVector
name|result
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// Read value entries based on isNull entries
name|reader
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ShortTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|IntegerReader
name|reader
init|=
literal|null
decl_stmt|;
name|ShortTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ShortTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|encoding
operator|!=
literal|null
condition|)
block|{
name|checkEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|createIntegerReader
argument_list|(
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|,
name|data
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|reader
operator|=
name|createIntegerReader
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|ShortWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|ShortWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|ShortWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
operator|(
name|short
operator|)
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|LongColumnVector
name|result
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// Read value entries based on isNull entries
name|reader
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|IntTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|IntegerReader
name|reader
init|=
literal|null
decl_stmt|;
name|IntTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|IntTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|encoding
operator|!=
literal|null
condition|)
block|{
name|checkEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|createIntegerReader
argument_list|(
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|,
name|data
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|reader
operator|=
name|createIntegerReader
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|IntWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|IntWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|IntWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
operator|(
name|int
operator|)
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|LongColumnVector
name|result
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// Read value entries based on isNull entries
name|reader
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|LongTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|IntegerReader
name|reader
init|=
literal|null
decl_stmt|;
name|LongTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|LongTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|encoding
operator|!=
literal|null
condition|)
block|{
name|checkEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|createIntegerReader
argument_list|(
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|,
name|data
argument_list|,
literal|true
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|reader
operator|=
name|createIntegerReader
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|LongWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LongWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|LongWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|LongColumnVector
name|result
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// Read value entries based on isNull entries
name|reader
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|FloatTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|InStream
name|stream
decl_stmt|;
specifier|private
specifier|final
name|SerializationUtils
name|utils
decl_stmt|;
name|FloatTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|FloatTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
name|this
operator|.
name|utils
operator|=
operator|new
name|SerializationUtils
argument_list|()
expr_stmt|;
name|this
operator|.
name|stream
operator|=
name|data
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|stream
operator|=
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|FloatWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|FloatWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|FloatWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|utils
operator|.
name|readFloat
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
specifier|final
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DoubleColumnVector
name|result
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|DoubleColumnVector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|DoubleColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|hasNulls
init|=
operator|!
name|result
operator|.
name|noNulls
decl_stmt|;
name|boolean
name|allNulls
init|=
name|hasNulls
decl_stmt|;
if|if
condition|(
name|hasNulls
condition|)
block|{
comment|// conditions to ensure bounds checks skips
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|batchSize
operator|<=
name|result
operator|.
name|isNull
operator|.
name|length
operator|&&
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|allNulls
operator|=
name|allNulls
operator|&
name|result
operator|.
name|isNull
index|[
name|i
index|]
expr_stmt|;
block|}
if|if
condition|(
name|allNulls
condition|)
block|{
name|result
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
name|result
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// some nulls
name|result
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
comment|// conditions to ensure bounds checks skips
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|batchSize
operator|<=
name|result
operator|.
name|isNull
operator|.
name|length
operator|&&
name|batchSize
operator|<=
name|result
operator|.
name|vector
operator|.
name|length
operator|&&
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|utils
operator|.
name|readFloat
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the value is not present then set NaN
name|result
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// no nulls&> 1 row (check repeating)
name|boolean
name|repeating
init|=
operator|(
name|batchSize
operator|>
literal|1
operator|)
decl_stmt|;
specifier|final
name|float
name|f1
init|=
name|utils
operator|.
name|readFloat
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|result
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|f1
expr_stmt|;
comment|// conditions to ensure bounds checks skips
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|batchSize
operator|&&
name|batchSize
operator|<=
name|result
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|float
name|f2
init|=
name|utils
operator|.
name|readFloat
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|repeating
operator|=
name|repeating
operator|&&
operator|(
name|f1
operator|==
name|f2
operator|)
expr_stmt|;
name|result
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|f2
expr_stmt|;
block|}
name|result
operator|.
name|isRepeating
operator|=
name|repeating
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
operator|++
name|i
control|)
block|{
name|utils
operator|.
name|readFloat
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|DoubleTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|InStream
name|stream
decl_stmt|;
specifier|private
specifier|final
name|SerializationUtils
name|utils
decl_stmt|;
name|DoubleTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|DoubleTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
name|this
operator|.
name|utils
operator|=
operator|new
name|SerializationUtils
argument_list|()
expr_stmt|;
name|this
operator|.
name|stream
operator|=
name|data
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|stream
operator|=
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|DoubleWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|DoubleWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|DoubleWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|utils
operator|.
name|readDouble
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
specifier|final
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DoubleColumnVector
name|result
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|DoubleColumnVector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|DoubleColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|hasNulls
init|=
operator|!
name|result
operator|.
name|noNulls
decl_stmt|;
name|boolean
name|allNulls
init|=
name|hasNulls
decl_stmt|;
if|if
condition|(
name|hasNulls
condition|)
block|{
comment|// conditions to ensure bounds checks skips
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
operator|&&
name|batchSize
operator|<=
name|result
operator|.
name|isNull
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|allNulls
operator|=
name|allNulls
operator|&
name|result
operator|.
name|isNull
index|[
name|i
index|]
expr_stmt|;
block|}
if|if
condition|(
name|allNulls
condition|)
block|{
name|result
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
name|result
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// some nulls
name|result
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
comment|// conditions to ensure bounds checks skips
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|batchSize
operator|<=
name|result
operator|.
name|isNull
operator|.
name|length
operator|&&
name|batchSize
operator|<=
name|result
operator|.
name|vector
operator|.
name|length
operator|&&
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|utils
operator|.
name|readDouble
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the value is not present then set NaN
name|result
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// no nulls
name|boolean
name|repeating
init|=
operator|(
name|batchSize
operator|>
literal|1
operator|)
decl_stmt|;
specifier|final
name|double
name|d1
init|=
name|utils
operator|.
name|readDouble
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|result
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|d1
expr_stmt|;
comment|// conditions to ensure bounds checks skips
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|batchSize
operator|&&
name|batchSize
operator|<=
name|result
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|double
name|d2
init|=
name|utils
operator|.
name|readDouble
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|repeating
operator|=
name|repeating
operator|&&
operator|(
name|d1
operator|==
name|d2
operator|)
expr_stmt|;
name|result
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|d2
expr_stmt|;
block|}
name|result
operator|.
name|isRepeating
operator|=
name|repeating
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|long
name|len
init|=
name|items
operator|*
literal|8
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|len
operator|-=
name|stream
operator|.
name|skip
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|BinaryTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|InStream
name|stream
decl_stmt|;
specifier|protected
name|IntegerReader
name|lengths
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|final
name|LongColumnVector
name|scratchlcv
decl_stmt|;
name|BinaryTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|BinaryTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|,
name|InStream
name|length
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
name|scratchlcv
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|this
operator|.
name|stream
operator|=
name|data
expr_stmt|;
if|if
condition|(
name|length
operator|!=
literal|null
operator|&&
name|encoding
operator|!=
literal|null
condition|)
block|{
name|checkEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|this
operator|.
name|lengths
operator|=
name|createIntegerReader
argument_list|(
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|,
name|length
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|stream
operator|=
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|lengths
operator|=
name|createIntegerReader
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|LENGTH
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|lengths
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|BytesWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|BytesWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|BytesWritable
operator|)
name|previous
expr_stmt|;
block|}
name|int
name|len
init|=
operator|(
name|int
operator|)
name|lengths
operator|.
name|next
argument_list|()
decl_stmt|;
name|result
operator|.
name|setSize
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|int
name|written
init|=
name|stream
operator|.
name|read
argument_list|(
name|result
operator|.
name|getBytes
argument_list|()
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|written
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Can't finish byte read from "
operator|+
name|stream
argument_list|)
throw|;
block|}
name|len
operator|-=
name|written
expr_stmt|;
name|offset
operator|+=
name|written
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BytesColumnVector
name|result
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|BytesColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|BytesColumnVectorUtil
operator|.
name|readOrcByteArrays
argument_list|(
name|stream
argument_list|,
name|lengths
argument_list|,
name|scratchlcv
argument_list|,
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|long
name|lengthToSkip
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
operator|++
name|i
control|)
block|{
name|lengthToSkip
operator|+=
name|lengths
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|lengthToSkip
operator|>
literal|0
condition|)
block|{
name|lengthToSkip
operator|-=
name|stream
operator|.
name|skip
argument_list|(
name|lengthToSkip
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|TimestampTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|IntegerReader
name|data
init|=
literal|null
decl_stmt|;
specifier|protected
name|IntegerReader
name|nanos
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|skipCorrupt
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|baseTimestampMap
decl_stmt|;
specifier|private
name|long
name|base_timestamp
decl_stmt|;
specifier|private
specifier|final
name|TimeZone
name|readerTimeZone
decl_stmt|;
specifier|private
name|TimeZone
name|writerTimeZone
decl_stmt|;
specifier|private
name|boolean
name|hasSameTZRules
decl_stmt|;
specifier|private
name|TimestampWritable
name|scratchTimestampWritable
decl_stmt|;
name|TimestampTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|TimestampTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|presentStream
parameter_list|,
name|InStream
name|dataStream
parameter_list|,
name|InStream
name|nanosStream
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|presentStream
argument_list|)
expr_stmt|;
name|this
operator|.
name|skipCorrupt
operator|=
name|skipCorrupt
expr_stmt|;
name|this
operator|.
name|baseTimestampMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|readerTimeZone
operator|=
name|TimeZone
operator|.
name|getDefault
argument_list|()
expr_stmt|;
name|this
operator|.
name|writerTimeZone
operator|=
name|readerTimeZone
expr_stmt|;
name|this
operator|.
name|hasSameTZRules
operator|=
name|writerTimeZone
operator|.
name|hasSameRules
argument_list|(
name|readerTimeZone
argument_list|)
expr_stmt|;
name|this
operator|.
name|base_timestamp
operator|=
name|getBaseTimestamp
argument_list|(
name|readerTimeZone
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
block|{
name|checkEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataStream
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|data
operator|=
name|createIntegerReader
argument_list|(
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|,
name|dataStream
argument_list|,
literal|true
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nanosStream
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|nanos
operator|=
name|createIntegerReader
argument_list|(
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|,
name|nanosStream
argument_list|,
literal|false
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|data
operator|=
name|createIntegerReader
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
name|nanos
operator|=
name|createIntegerReader
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|SECONDARY
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
name|base_timestamp
operator|=
name|getBaseTimestamp
argument_list|(
name|stripeFooter
operator|.
name|getWriterTimezone
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|getBaseTimestamp
parameter_list|(
name|String
name|timeZoneId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// to make sure new readers read old files in the same way
if|if
condition|(
name|timeZoneId
operator|==
literal|null
operator|||
name|timeZoneId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|timeZoneId
operator|=
name|readerTimeZone
operator|.
name|getID
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|baseTimestampMap
operator|.
name|containsKey
argument_list|(
name|timeZoneId
argument_list|)
condition|)
block|{
name|writerTimeZone
operator|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
name|timeZoneId
argument_list|)
expr_stmt|;
name|hasSameTZRules
operator|=
name|writerTimeZone
operator|.
name|hasSameRules
argument_list|(
name|readerTimeZone
argument_list|)
expr_stmt|;
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
decl_stmt|;
name|sdf
operator|.
name|setTimeZone
argument_list|(
name|writerTimeZone
argument_list|)
expr_stmt|;
try|try
block|{
name|long
name|epoch
init|=
name|sdf
operator|.
name|parse
argument_list|(
name|WriterImpl
operator|.
name|BASE_TIMESTAMP_STRING
argument_list|)
operator|.
name|getTime
argument_list|()
operator|/
name|WriterImpl
operator|.
name|MILLIS_PER_SECOND
decl_stmt|;
name|baseTimestampMap
operator|.
name|put
argument_list|(
name|timeZoneId
argument_list|,
name|epoch
argument_list|)
expr_stmt|;
return|return
name|epoch
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to create base timestamp"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|sdf
operator|.
name|setTimeZone
argument_list|(
name|readerTimeZone
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|baseTimestampMap
operator|.
name|get
argument_list|(
name|timeZoneId
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|data
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|nanos
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|TimestampWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|TimestampWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|TimestampWritable
operator|)
name|previous
expr_stmt|;
block|}
name|long
name|millis
init|=
operator|(
name|data
operator|.
name|next
argument_list|()
operator|+
name|base_timestamp
operator|)
operator|*
name|WriterImpl
operator|.
name|MILLIS_PER_SECOND
decl_stmt|;
name|int
name|newNanos
init|=
name|parseNanos
argument_list|(
name|nanos
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
comment|// fix the rounding when we divided by 1000.
if|if
condition|(
name|millis
operator|>=
literal|0
condition|)
block|{
name|millis
operator|+=
name|newNanos
operator|/
literal|1000000
expr_stmt|;
block|}
else|else
block|{
name|millis
operator|-=
name|newNanos
operator|/
literal|1000000
expr_stmt|;
block|}
name|long
name|offset
init|=
literal|0
decl_stmt|;
comment|// If reader and writer time zones have different rules, adjust the timezone difference
comment|// between reader and writer taking day light savings into account.
if|if
condition|(
operator|!
name|hasSameTZRules
condition|)
block|{
name|offset
operator|=
name|writerTimeZone
operator|.
name|getOffset
argument_list|(
name|millis
argument_list|)
operator|-
name|readerTimeZone
operator|.
name|getOffset
argument_list|(
name|millis
argument_list|)
expr_stmt|;
block|}
name|long
name|adjustedMillis
init|=
name|millis
operator|+
name|offset
decl_stmt|;
name|Timestamp
name|ts
init|=
operator|new
name|Timestamp
argument_list|(
name|adjustedMillis
argument_list|)
decl_stmt|;
comment|// Sometimes the reader timezone might have changed after adding the adjustedMillis.
comment|// To account for that change, check for any difference in reader timezone after
comment|// adding adjustedMillis. If so use the new offset (offset at adjustedMillis point of time).
if|if
condition|(
operator|!
name|hasSameTZRules
operator|&&
operator|(
name|readerTimeZone
operator|.
name|getOffset
argument_list|(
name|millis
argument_list|)
operator|!=
name|readerTimeZone
operator|.
name|getOffset
argument_list|(
name|adjustedMillis
argument_list|)
operator|)
condition|)
block|{
name|long
name|newOffset
init|=
name|writerTimeZone
operator|.
name|getOffset
argument_list|(
name|millis
argument_list|)
operator|-
name|readerTimeZone
operator|.
name|getOffset
argument_list|(
name|adjustedMillis
argument_list|)
decl_stmt|;
name|adjustedMillis
operator|=
name|millis
operator|+
name|newOffset
expr_stmt|;
name|ts
operator|.
name|setTime
argument_list|(
name|adjustedMillis
argument_list|)
expr_stmt|;
block|}
name|ts
operator|.
name|setNanos
argument_list|(
name|newNanos
argument_list|)
expr_stmt|;
name|result
operator|.
name|set
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|TimestampColumnVector
name|result
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|TimestampColumnVector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|TimestampColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
name|result
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|scratchTimestampWritable
operator|==
literal|null
condition|)
block|{
name|scratchTimestampWritable
operator|=
operator|new
name|TimestampWritable
argument_list|()
expr_stmt|;
block|}
name|Object
name|obj
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|=
name|next
argument_list|(
name|scratchTimestampWritable
argument_list|)
expr_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|result
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TimestampWritable
name|writable
init|=
operator|(
name|TimestampWritable
operator|)
name|obj
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|writable
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|int
name|parseNanos
parameter_list|(
name|long
name|serialized
parameter_list|)
block|{
name|int
name|zeros
init|=
literal|7
operator|&
operator|(
name|int
operator|)
name|serialized
decl_stmt|;
name|int
name|result
init|=
call|(
name|int
call|)
argument_list|(
name|serialized
operator|>>>
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|zeros
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|zeros
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|*=
literal|10
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|data
operator|.
name|skip
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|nanos
operator|.
name|skip
argument_list|(
name|items
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DateTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|IntegerReader
name|reader
init|=
literal|null
decl_stmt|;
name|DateTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|DateTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|encoding
operator|!=
literal|null
condition|)
block|{
name|checkEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|reader
operator|=
name|createIntegerReader
argument_list|(
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|,
name|data
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|reader
operator|=
name|createIntegerReader
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|DateWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|DateWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|DateWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
operator|(
name|int
operator|)
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|LongColumnVector
name|result
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// Read value entries based on isNull entries
name|reader
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DecimalTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|InStream
name|valueStream
decl_stmt|;
specifier|protected
name|IntegerReader
name|scaleReader
init|=
literal|null
decl_stmt|;
specifier|private
name|LongColumnVector
name|scratchScaleVector
decl_stmt|;
specifier|private
specifier|final
name|int
name|precision
decl_stmt|;
specifier|private
specifier|final
name|int
name|scale
decl_stmt|;
name|DecimalTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|DecimalTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|valueStream
parameter_list|,
name|InStream
name|scaleStream
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
name|this
operator|.
name|scratchScaleVector
operator|=
operator|new
name|LongColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
name|this
operator|.
name|valueStream
operator|=
name|valueStream
expr_stmt|;
if|if
condition|(
name|scaleStream
operator|!=
literal|null
operator|&&
name|encoding
operator|!=
literal|null
condition|)
block|{
name|checkEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|this
operator|.
name|scaleReader
operator|=
name|createIntegerReader
argument_list|(
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|,
name|scaleStream
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|valueStream
operator|=
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
argument_list|)
expr_stmt|;
name|scaleReader
operator|=
name|createIntegerReader
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|SECONDARY
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|valueStream
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|scaleReader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
specifier|final
name|HiveDecimalWritable
name|result
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|HiveDecimalWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|HiveDecimalWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
name|SerializationUtils
operator|.
name|readBigInteger
argument_list|(
name|valueStream
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|scaleReader
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|HiveDecimalWritable
operator|.
name|enforcePrecisionScale
argument_list|(
name|result
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DecimalColumnVector
name|result
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|DecimalColumnVector
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Save the reference for isNull in the scratch vector
name|boolean
index|[]
name|scratchIsNull
init|=
name|scratchScaleVector
operator|.
name|isNull
decl_stmt|;
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// Read value entries based on isNull entries
if|if
condition|(
name|result
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|BigInteger
name|bInt
init|=
name|SerializationUtils
operator|.
name|readBigInteger
argument_list|(
name|valueStream
argument_list|)
decl_stmt|;
name|short
name|scaleInData
init|=
operator|(
name|short
operator|)
name|scaleReader
operator|.
name|next
argument_list|()
decl_stmt|;
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bInt
argument_list|,
name|scaleInData
argument_list|)
decl_stmt|;
name|dec
operator|=
name|HiveDecimal
operator|.
name|enforcePrecisionScale
argument_list|(
name|dec
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|result
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|dec
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// result vector has isNull values set, use the same to read scale vector.
name|scratchScaleVector
operator|.
name|isNull
operator|=
name|result
operator|.
name|isNull
expr_stmt|;
name|scaleReader
operator|.
name|nextVector
argument_list|(
name|scratchScaleVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|BigInteger
name|bInt
init|=
name|SerializationUtils
operator|.
name|readBigInteger
argument_list|(
name|valueStream
argument_list|)
decl_stmt|;
name|short
name|scaleInData
init|=
operator|(
name|short
operator|)
name|scratchScaleVector
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bInt
argument_list|,
name|scaleInData
argument_list|)
decl_stmt|;
name|dec
operator|=
name|HiveDecimal
operator|.
name|enforcePrecisionScale
argument_list|(
name|dec
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|result
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|dec
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Switch back the null vector.
name|scratchScaleVector
operator|.
name|isNull
operator|=
name|scratchIsNull
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
name|i
operator|++
control|)
block|{
name|SerializationUtils
operator|.
name|readBigInteger
argument_list|(
name|valueStream
argument_list|)
expr_stmt|;
block|}
name|scaleReader
operator|.
name|skip
argument_list|(
name|items
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A tree reader that will read string columns. At the start of the    * stripe, it creates an internal reader based on whether a direct or    * dictionary encoding was used.    */
specifier|public
specifier|static
class|class
name|StringTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|TreeReader
name|reader
decl_stmt|;
name|StringTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|StringTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|,
name|InStream
name|length
parameter_list|,
name|InStream
name|dictionary
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|encoding
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|DIRECT
case|:
case|case
name|DIRECT_V2
case|:
name|reader
operator|=
operator|new
name|StringDirectTreeReader
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|,
name|data
argument_list|,
name|length
argument_list|,
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DICTIONARY
case|:
case|case
name|DICTIONARY_V2
case|:
name|reader
operator|=
operator|new
name|StringDictionaryTreeReader
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|,
name|data
argument_list|,
name|length
argument_list|,
name|dictionary
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported encoding "
operator|+
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|checkEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
comment|// For each stripe, checks the encoding and initializes the appropriate
comment|// reader
switch|switch
condition|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|DIRECT
case|:
case|case
name|DIRECT_V2
case|:
name|reader
operator|=
operator|new
name|StringDirectTreeReader
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
break|break;
case|case
name|DICTIONARY
case|:
case|case
name|DICTIONARY_V2
case|:
name|reader
operator|=
operator|new
name|StringDictionaryTreeReader
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported encoding "
operator|+
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|)
throw|;
block|}
name|reader
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|reader
operator|.
name|next
argument_list|(
name|previous
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|reader
operator|.
name|nextVector
argument_list|(
name|previousVector
argument_list|,
name|batchSize
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skipRows
argument_list|(
name|items
argument_list|)
expr_stmt|;
block|}
block|}
comment|// This class collects together very similar methods for reading an ORC vector of byte arrays and
comment|// creating the BytesColumnVector.
comment|//
specifier|public
specifier|static
class|class
name|BytesColumnVectorUtil
block|{
specifier|private
specifier|static
name|byte
index|[]
name|commonReadByteArrays
parameter_list|(
name|InStream
name|stream
parameter_list|,
name|IntegerReader
name|lengths
parameter_list|,
name|LongColumnVector
name|scratchlcv
parameter_list|,
name|BytesColumnVector
name|result
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Read lengths
name|scratchlcv
operator|.
name|isNull
operator|=
name|result
operator|.
name|isNull
expr_stmt|;
comment|// Notice we are replacing the isNull vector here...
name|lengths
operator|.
name|nextVector
argument_list|(
name|scratchlcv
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|int
name|totalLength
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|totalLength
operator|+=
operator|(
name|int
operator|)
name|scratchlcv
operator|.
name|vector
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|totalLength
operator|=
call|(
name|int
call|)
argument_list|(
name|batchSize
operator|*
name|scratchlcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Read all the strings for this batch
name|byte
index|[]
name|allBytes
init|=
operator|new
name|byte
index|[
name|totalLength
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|len
init|=
name|totalLength
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|int
name|bytesRead
init|=
name|stream
operator|.
name|read
argument_list|(
name|allBytes
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytesRead
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Can't finish byte read from "
operator|+
name|stream
argument_list|)
throw|;
block|}
name|len
operator|-=
name|bytesRead
expr_stmt|;
name|offset
operator|+=
name|bytesRead
expr_stmt|;
block|}
return|return
name|allBytes
return|;
block|}
comment|// This method has the common code for reading in bytes into a BytesColumnVector.
specifier|public
specifier|static
name|void
name|readOrcByteArrays
parameter_list|(
name|InStream
name|stream
parameter_list|,
name|IntegerReader
name|lengths
parameter_list|,
name|LongColumnVector
name|scratchlcv
parameter_list|,
name|BytesColumnVector
name|result
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|allBytes
init|=
name|commonReadByteArrays
argument_list|(
name|stream
argument_list|,
name|lengths
argument_list|,
name|scratchlcv
argument_list|,
name|result
argument_list|,
name|batchSize
argument_list|)
decl_stmt|;
comment|// Too expensive to figure out 'repeating' by comparisons.
name|result
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|allBytes
argument_list|,
name|offset
argument_list|,
operator|(
name|int
operator|)
name|scratchlcv
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|scratchlcv
operator|.
name|vector
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|allBytes
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|allBytes
argument_list|,
name|offset
argument_list|,
operator|(
name|int
operator|)
name|scratchlcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|scratchlcv
operator|.
name|vector
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|allBytes
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * A reader for string columns that are direct encoded in the current    * stripe.    */
specifier|public
specifier|static
class|class
name|StringDirectTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|InStream
name|stream
decl_stmt|;
specifier|protected
name|TextReaderShim
name|data
decl_stmt|;
specifier|protected
name|IntegerReader
name|lengths
decl_stmt|;
specifier|private
specifier|final
name|LongColumnVector
name|scratchlcv
decl_stmt|;
name|StringDirectTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|StringDirectTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|,
name|InStream
name|length
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
name|this
operator|.
name|scratchlcv
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|this
operator|.
name|stream
operator|=
name|data
expr_stmt|;
if|if
condition|(
name|length
operator|!=
literal|null
operator|&&
name|encoding
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|lengths
operator|=
name|createIntegerReader
argument_list|(
name|encoding
argument_list|,
name|length
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getTextReaderShim
argument_list|(
name|this
operator|.
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|&&
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|stream
operator|=
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|data
operator|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getTextReaderShim
argument_list|(
name|this
operator|.
name|stream
argument_list|)
expr_stmt|;
name|lengths
operator|=
name|createIntegerReader
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|LENGTH
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
comment|// don't seek data stream
name|lengths
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|Text
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|Text
operator|)
name|previous
expr_stmt|;
block|}
name|int
name|len
init|=
operator|(
name|int
operator|)
name|lengths
operator|.
name|next
argument_list|()
decl_stmt|;
name|data
operator|.
name|read
argument_list|(
name|result
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BytesColumnVector
name|result
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|BytesColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|BytesColumnVectorUtil
operator|.
name|readOrcByteArrays
argument_list|(
name|stream
argument_list|,
name|lengths
argument_list|,
name|scratchlcv
argument_list|,
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|long
name|lengthToSkip
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
operator|++
name|i
control|)
block|{
name|lengthToSkip
operator|+=
name|lengths
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|lengthToSkip
operator|>
literal|0
condition|)
block|{
name|lengthToSkip
operator|-=
name|stream
operator|.
name|skip
argument_list|(
name|lengthToSkip
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|IntegerReader
name|getLengths
parameter_list|()
block|{
return|return
name|lengths
return|;
block|}
specifier|public
name|InStream
name|getStream
parameter_list|()
block|{
return|return
name|stream
return|;
block|}
block|}
comment|/**    * A reader for string columns that are dictionary encoded in the current    * stripe.    */
specifier|public
specifier|static
class|class
name|StringDictionaryTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|DynamicByteArray
name|dictionaryBuffer
decl_stmt|;
specifier|private
name|int
index|[]
name|dictionaryOffsets
decl_stmt|;
specifier|protected
name|IntegerReader
name|reader
decl_stmt|;
specifier|private
name|byte
index|[]
name|dictionaryBufferInBytesCache
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|LongColumnVector
name|scratchlcv
decl_stmt|;
name|StringDictionaryTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|StringDictionaryTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|,
name|InStream
name|length
parameter_list|,
name|InStream
name|dictionary
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
name|scratchlcv
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|encoding
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|reader
operator|=
name|createIntegerReader
argument_list|(
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|,
name|data
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
operator|!=
literal|null
operator|&&
name|encoding
operator|!=
literal|null
condition|)
block|{
name|readDictionaryStream
argument_list|(
name|dictionary
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|length
operator|!=
literal|null
operator|&&
name|encoding
operator|!=
literal|null
condition|)
block|{
name|readDictionaryLengthStream
argument_list|(
name|length
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DICTIONARY
operator|&&
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DICTIONARY_V2
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
comment|// read the dictionary blob
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DICTIONARY_DATA
argument_list|)
decl_stmt|;
name|InStream
name|in
init|=
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|readDictionaryStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// read the lengths
name|name
operator|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|LENGTH
argument_list|)
expr_stmt|;
name|in
operator|=
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|readDictionaryLengthStream
argument_list|(
name|in
argument_list|,
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
argument_list|)
expr_stmt|;
comment|// set up the row reader
name|name
operator|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|reader
operator|=
name|createIntegerReader
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|readDictionaryLengthStream
parameter_list|(
name|InStream
name|in
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|dictionarySize
init|=
name|encoding
operator|.
name|getDictionarySize
argument_list|()
decl_stmt|;
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
comment|// Guard against empty LENGTH stream.
name|IntegerReader
name|lenReader
init|=
name|createIntegerReader
argument_list|(
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|,
name|in
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|dictionaryOffsets
operator|==
literal|null
operator|||
name|dictionaryOffsets
operator|.
name|length
operator|<
name|dictionarySize
operator|+
literal|1
condition|)
block|{
name|dictionaryOffsets
operator|=
operator|new
name|int
index|[
name|dictionarySize
operator|+
literal|1
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dictionarySize
condition|;
operator|++
name|i
control|)
block|{
name|dictionaryOffsets
index|[
name|i
index|]
operator|=
name|offset
expr_stmt|;
name|offset
operator|+=
operator|(
name|int
operator|)
name|lenReader
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|dictionaryOffsets
index|[
name|dictionarySize
index|]
operator|=
name|offset
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|readDictionaryStream
parameter_list|(
name|InStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
comment|// Guard against empty dictionary stream.
if|if
condition|(
name|in
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|dictionaryBuffer
operator|=
operator|new
name|DynamicByteArray
argument_list|(
literal|64
argument_list|,
name|in
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|dictionaryBuffer
operator|.
name|readAll
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// Since its start of strip invalidate the cache.
name|dictionaryBufferInBytesCache
operator|=
literal|null
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dictionaryBuffer
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|Text
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
name|int
name|entry
init|=
operator|(
name|int
operator|)
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|Text
operator|)
name|previous
expr_stmt|;
block|}
name|int
name|offset
init|=
name|dictionaryOffsets
index|[
name|entry
index|]
decl_stmt|;
name|int
name|length
init|=
name|getDictionaryEntryLength
argument_list|(
name|entry
argument_list|,
name|offset
argument_list|)
decl_stmt|;
comment|// If the column is just empty strings, the size will be zero,
comment|// so the buffer will be null, in that case just return result
comment|// as it will default to empty
if|if
condition|(
name|dictionaryBuffer
operator|!=
literal|null
condition|)
block|{
name|dictionaryBuffer
operator|.
name|setText
argument_list|(
name|result
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BytesColumnVector
name|result
decl_stmt|;
name|int
name|offset
decl_stmt|;
name|int
name|length
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|BytesColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|dictionaryBuffer
operator|!=
literal|null
condition|)
block|{
comment|// Load dictionaryBuffer into cache.
if|if
condition|(
name|dictionaryBufferInBytesCache
operator|==
literal|null
condition|)
block|{
name|dictionaryBufferInBytesCache
operator|=
name|dictionaryBuffer
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|// Read string offsets
name|scratchlcv
operator|.
name|isNull
operator|=
name|result
operator|.
name|isNull
expr_stmt|;
name|reader
operator|.
name|nextVector
argument_list|(
name|scratchlcv
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isRepeating
condition|)
block|{
comment|// The vector has non-repeating strings. Iterate thru the batch
comment|// and set strings one by one
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|offset
operator|=
name|dictionaryOffsets
index|[
operator|(
name|int
operator|)
name|scratchlcv
operator|.
name|vector
index|[
name|i
index|]
index|]
expr_stmt|;
name|length
operator|=
name|getDictionaryEntryLength
argument_list|(
operator|(
name|int
operator|)
name|scratchlcv
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|dictionaryBufferInBytesCache
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the value is null then set offset and length to zero (null string)
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|dictionaryBufferInBytesCache
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// If the value is repeating then just set the first value in the
comment|// vector and set the isRepeating flag to true. No need to iterate thru and
comment|// set all the elements to the same value
name|offset
operator|=
name|dictionaryOffsets
index|[
operator|(
name|int
operator|)
name|scratchlcv
operator|.
name|vector
index|[
literal|0
index|]
index|]
expr_stmt|;
name|length
operator|=
name|getDictionaryEntryLength
argument_list|(
operator|(
name|int
operator|)
name|scratchlcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|result
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|dictionaryBufferInBytesCache
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|isRepeating
operator|=
name|scratchlcv
operator|.
name|isRepeating
expr_stmt|;
block|}
else|else
block|{
comment|// Entire stripe contains null strings.
name|result
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|result
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|result
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|result
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
literal|""
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
name|int
name|getDictionaryEntryLength
parameter_list|(
name|int
name|entry
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
specifier|final
name|int
name|length
decl_stmt|;
comment|// if it isn't the last entry, subtract the offsets otherwise use
comment|// the buffer length.
if|if
condition|(
name|entry
operator|<
name|dictionaryOffsets
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|length
operator|=
name|dictionaryOffsets
index|[
name|entry
operator|+
literal|1
index|]
operator|-
name|offset
expr_stmt|;
block|}
else|else
block|{
name|length
operator|=
name|dictionaryBuffer
operator|.
name|size
argument_list|()
operator|-
name|offset
expr_stmt|;
block|}
return|return
name|length
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IntegerReader
name|getReader
parameter_list|()
block|{
return|return
name|reader
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CharTreeReader
extends|extends
name|StringTreeReader
block|{
name|int
name|maxLength
decl_stmt|;
name|CharTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|int
name|maxLength
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
name|maxLength
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|CharTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|int
name|maxLength
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|,
name|InStream
name|length
parameter_list|,
name|InStream
name|dictionary
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|,
name|data
argument_list|,
name|length
argument_list|,
name|dictionary
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxLength
operator|=
name|maxLength
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HiveCharWritable
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|HiveCharWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|HiveCharWritable
operator|)
name|previous
expr_stmt|;
block|}
comment|// Use the string reader implementation to populate the internal Text value
name|Object
name|textVal
init|=
name|super
operator|.
name|next
argument_list|(
name|result
operator|.
name|getTextValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|textVal
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// result should now hold the value that was read in.
comment|// enforce char length
name|result
operator|.
name|enforceMaxLength
argument_list|(
name|maxLength
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get the vector of strings from StringTreeReader, then make a 2nd pass to
comment|// adjust down the length (right trim and truncate) if necessary.
name|BytesColumnVector
name|result
init|=
operator|(
name|BytesColumnVector
operator|)
name|super
operator|.
name|nextVector
argument_list|(
name|previousVector
argument_list|,
name|batchSize
argument_list|)
decl_stmt|;
name|int
name|adjustedDownLen
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|result
operator|.
name|noNulls
operator|||
operator|!
name|result
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|adjustedDownLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|result
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|result
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|result
operator|.
name|length
index|[
literal|0
index|]
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|adjustedDownLen
operator|<
name|result
operator|.
name|length
index|[
literal|0
index|]
condition|)
block|{
name|result
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|result
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|adjustedDownLen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|result
operator|.
name|noNulls
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|adjustedDownLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|result
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|length
index|[
name|i
index|]
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|adjustedDownLen
operator|<
name|result
operator|.
name|length
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|result
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|adjustedDownLen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|adjustedDownLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|result
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|length
index|[
name|i
index|]
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|adjustedDownLen
operator|<
name|result
operator|.
name|length
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|result
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|adjustedDownLen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|VarcharTreeReader
extends|extends
name|StringTreeReader
block|{
name|int
name|maxLength
decl_stmt|;
name|VarcharTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|int
name|maxLength
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
name|maxLength
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|VarcharTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|int
name|maxLength
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|,
name|InStream
name|length
parameter_list|,
name|InStream
name|dictionary
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|,
name|data
argument_list|,
name|length
argument_list|,
name|dictionary
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxLength
operator|=
name|maxLength
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HiveVarcharWritable
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|HiveVarcharWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|HiveVarcharWritable
operator|)
name|previous
expr_stmt|;
block|}
comment|// Use the string reader implementation to populate the internal Text value
name|Object
name|textVal
init|=
name|super
operator|.
name|next
argument_list|(
name|result
operator|.
name|getTextValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|textVal
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// result should now hold the value that was read in.
comment|// enforce varchar length
name|result
operator|.
name|enforceMaxLength
argument_list|(
name|maxLength
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get the vector of strings from StringTreeReader, then make a 2nd pass to
comment|// adjust down the length (truncate) if necessary.
name|BytesColumnVector
name|result
init|=
operator|(
name|BytesColumnVector
operator|)
name|super
operator|.
name|nextVector
argument_list|(
name|previousVector
argument_list|,
name|batchSize
argument_list|)
decl_stmt|;
name|int
name|adjustedDownLen
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|result
operator|.
name|noNulls
operator|||
operator|!
name|result
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|adjustedDownLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|result
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|result
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|result
operator|.
name|length
index|[
literal|0
index|]
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|adjustedDownLen
operator|<
name|result
operator|.
name|length
index|[
literal|0
index|]
condition|)
block|{
name|result
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|result
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|adjustedDownLen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|result
operator|.
name|noNulls
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|adjustedDownLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|result
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|length
index|[
name|i
index|]
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|adjustedDownLen
operator|<
name|result
operator|.
name|length
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|result
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|adjustedDownLen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|adjustedDownLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|result
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|length
index|[
name|i
index|]
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|adjustedDownLen
operator|<
name|result
operator|.
name|length
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|result
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|adjustedDownLen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|StructTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
specifier|final
name|int
name|readColumnCount
decl_stmt|;
specifier|private
specifier|final
name|int
name|resultColumnCount
decl_stmt|;
specifier|protected
specifier|final
name|TreeReader
index|[]
name|fields
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|fieldNames
decl_stmt|;
specifier|protected
name|StructTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TreeReaderSchema
name|treeReaderSchema
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|OrcProto
operator|.
name|Type
name|fileStructType
init|=
name|treeReaderSchema
operator|.
name|getFileTypes
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
decl_stmt|;
name|OrcProto
operator|.
name|Type
name|schemaStructType
init|=
name|treeReaderSchema
operator|.
name|getSchemaTypes
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
decl_stmt|;
name|readColumnCount
operator|=
name|Math
operator|.
name|min
argument_list|(
name|fileStructType
operator|.
name|getFieldNamesCount
argument_list|()
argument_list|,
name|schemaStructType
operator|.
name|getFieldNamesCount
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|columnId
operator|==
name|treeReaderSchema
operator|.
name|getInnerStructSubtype
argument_list|()
condition|)
block|{
comment|// If there are more result columns than reader columns, we will default those additional
comment|// columns to NULL.
name|resultColumnCount
operator|=
name|schemaStructType
operator|.
name|getFieldNamesCount
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|resultColumnCount
operator|=
name|readColumnCount
expr_stmt|;
block|}
name|this
operator|.
name|fields
operator|=
operator|new
name|TreeReader
index|[
name|readColumnCount
index|]
expr_stmt|;
name|this
operator|.
name|fieldNames
operator|=
operator|new
name|String
index|[
name|readColumnCount
index|]
expr_stmt|;
if|if
condition|(
name|included
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|readColumnCount
condition|;
operator|++
name|i
control|)
block|{
name|int
name|subtype
init|=
name|schemaStructType
operator|.
name|getSubtypes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|this
operator|.
name|fields
index|[
name|i
index|]
operator|=
name|createTreeReader
argument_list|(
name|subtype
argument_list|,
name|treeReaderSchema
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
comment|// Use the treeReaderSchema evolution name since file/reader types may not have the real column name.
name|this
operator|.
name|fieldNames
index|[
name|i
index|]
operator|=
name|schemaStructType
operator|.
name|getFieldNames
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|readColumnCount
condition|;
operator|++
name|i
control|)
block|{
name|int
name|subtype
init|=
name|schemaStructType
operator|.
name|getSubtypes
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|subtype
operator|>=
name|included
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"subtype "
operator|+
name|subtype
operator|+
literal|" exceeds the included array size "
operator|+
name|included
operator|.
name|length
operator|+
literal|" fileTypes "
operator|+
name|treeReaderSchema
operator|.
name|getFileTypes
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" schemaTypes "
operator|+
name|treeReaderSchema
operator|.
name|getSchemaTypes
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" innerStructSubtype "
operator|+
name|treeReaderSchema
operator|.
name|getInnerStructSubtype
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|included
index|[
name|subtype
index|]
condition|)
block|{
name|this
operator|.
name|fields
index|[
name|i
index|]
operator|=
name|createTreeReader
argument_list|(
name|subtype
argument_list|,
name|treeReaderSchema
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
block|}
comment|// Use the treeReaderSchema evolution name since file/reader types may not have the real column name.
name|this
operator|.
name|fieldNames
index|[
name|i
index|]
operator|=
name|schemaStructType
operator|.
name|getFieldNames
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeReader
name|kid
range|:
name|fields
control|)
block|{
if|if
condition|(
name|kid
operator|!=
literal|null
condition|)
block|{
name|kid
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|OrcStruct
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|OrcStruct
argument_list|(
name|resultColumnCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|OrcStruct
operator|)
name|previous
expr_stmt|;
comment|// If the input format was initialized with a file with a
comment|// different number of fields, the number of fields needs to
comment|// be updated to the correct number
if|if
condition|(
name|result
operator|.
name|getNumFields
argument_list|()
operator|!=
name|resultColumnCount
condition|)
block|{
name|result
operator|.
name|setNumFields
argument_list|(
name|resultColumnCount
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|readColumnCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|fields
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|setFieldValue
argument_list|(
name|i
argument_list|,
name|fields
index|[
name|i
index|]
operator|.
name|next
argument_list|(
name|result
operator|.
name|getFieldValue
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|resultColumnCount
operator|>
name|readColumnCount
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|readColumnCount
init|;
name|i
operator|<
name|resultColumnCount
condition|;
operator|++
name|i
control|)
block|{
comment|// Default new treeReaderSchema evolution fields to NULL.
name|result
operator|.
name|setFieldValue
argument_list|(
name|i
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ColumnVector
index|[]
name|result
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|ColumnVector
index|[
name|readColumnCount
index|]
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|ColumnVector
index|[]
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read all the members of struct as column vectors
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|readColumnCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fields
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|result
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|result
index|[
name|i
index|]
operator|=
operator|(
name|ColumnVector
operator|)
name|fields
index|[
name|i
index|]
operator|.
name|nextVector
argument_list|(
literal|null
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fields
index|[
name|i
index|]
operator|.
name|nextVector
argument_list|(
name|result
index|[
name|i
index|]
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Default additional treeReaderSchema evolution fields to NULL.
if|if
condition|(
name|vectorColumnCount
operator|!=
operator|-
literal|1
operator|&&
name|vectorColumnCount
operator|>
name|readColumnCount
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|readColumnCount
init|;
name|i
operator|<
name|vectorColumnCount
condition|;
operator|++
name|i
control|)
block|{
name|ColumnVector
name|colVector
init|=
name|result
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|colVector
operator|!=
literal|null
condition|)
block|{
name|colVector
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|colVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeReader
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeReader
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|skipRows
argument_list|(
name|items
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|UnionTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
specifier|final
name|TreeReader
index|[]
name|fields
decl_stmt|;
specifier|protected
name|RunLengthByteReader
name|tags
decl_stmt|;
specifier|protected
name|UnionTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TreeReaderSchema
name|treeReaderSchema
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|OrcProto
operator|.
name|Type
name|type
init|=
name|treeReaderSchema
operator|.
name|getSchemaTypes
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
decl_stmt|;
name|int
name|fieldCount
init|=
name|type
operator|.
name|getSubtypesCount
argument_list|()
decl_stmt|;
name|this
operator|.
name|fields
operator|=
operator|new
name|TreeReader
index|[
name|fieldCount
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
operator|++
name|i
control|)
block|{
name|int
name|subtype
init|=
name|type
operator|.
name|getSubtypes
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|included
operator|==
literal|null
operator|||
name|included
index|[
name|subtype
index|]
condition|)
block|{
name|this
operator|.
name|fields
index|[
name|i
index|]
operator|=
name|createTreeReader
argument_list|(
name|subtype
argument_list|,
name|treeReaderSchema
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|tags
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeReader
name|kid
range|:
name|fields
control|)
block|{
name|kid
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|OrcUnion
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|OrcUnion
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|OrcUnion
operator|)
name|previous
expr_stmt|;
block|}
name|byte
name|tag
init|=
name|tags
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|previousVal
init|=
name|result
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|tag
argument_list|,
name|fields
index|[
name|tag
index|]
operator|.
name|next
argument_list|(
name|tag
operator|==
name|result
operator|.
name|getTag
argument_list|()
condition|?
name|previousVal
else|:
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"NextVector is not supported operation for Union type"
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|tags
operator|=
operator|new
name|RunLengthByteReader
argument_list|(
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeReader
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|long
index|[]
name|counts
init|=
operator|new
name|long
index|[
name|fields
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
operator|++
name|i
control|)
block|{
name|counts
index|[
name|tags
operator|.
name|next
argument_list|()
index|]
operator|+=
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|counts
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|fields
index|[
name|i
index|]
operator|.
name|skipRows
argument_list|(
name|counts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|ListTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
specifier|final
name|TreeReader
name|elementReader
decl_stmt|;
specifier|protected
name|IntegerReader
name|lengths
init|=
literal|null
decl_stmt|;
specifier|protected
name|ListTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TreeReaderSchema
name|treeReaderSchema
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|OrcProto
operator|.
name|Type
name|type
init|=
name|treeReaderSchema
operator|.
name|getSchemaTypes
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
decl_stmt|;
name|elementReader
operator|=
name|createTreeReader
argument_list|(
name|type
operator|.
name|getSubtypes
argument_list|(
literal|0
argument_list|)
argument_list|,
name|treeReaderSchema
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|lengths
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
name|elementReader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|previous
expr_stmt|;
block|}
name|int
name|prevLength
init|=
name|result
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|length
init|=
operator|(
name|int
operator|)
name|lengths
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// extend the list to the new length
for|for
control|(
name|int
name|i
init|=
name|prevLength
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// read the new elements into the array
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|elementReader
operator|.
name|next
argument_list|(
name|i
operator|<
name|prevLength
condition|?
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
else|:
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// remove any extra elements
for|for
control|(
name|int
name|i
init|=
name|prevLength
operator|-
literal|1
init|;
name|i
operator|>=
name|length
condition|;
operator|--
name|i
control|)
block|{
name|result
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|nextVector
parameter_list|(
name|Object
name|previous
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"NextVector is not supported operation for List type"
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|lengths
operator|=
name|createIntegerReader
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|LENGTH
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|elementReader
operator|!=
literal|null
condition|)
block|{
name|elementReader
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|long
name|childSkip
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
operator|++
name|i
control|)
block|{
name|childSkip
operator|+=
name|lengths
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|elementReader
operator|.
name|skipRows
argument_list|(
name|childSkip
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MapTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
specifier|final
name|TreeReader
name|keyReader
decl_stmt|;
specifier|protected
specifier|final
name|TreeReader
name|valueReader
decl_stmt|;
specifier|protected
name|IntegerReader
name|lengths
init|=
literal|null
decl_stmt|;
specifier|protected
name|MapTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TreeReaderSchema
name|treeReaderSchema
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|OrcProto
operator|.
name|Type
name|type
init|=
name|treeReaderSchema
operator|.
name|getSchemaTypes
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
decl_stmt|;
name|int
name|keyColumn
init|=
name|type
operator|.
name|getSubtypes
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|valueColumn
init|=
name|type
operator|.
name|getSubtypes
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|included
operator|==
literal|null
operator|||
name|included
index|[
name|keyColumn
index|]
condition|)
block|{
name|keyReader
operator|=
name|createTreeReader
argument_list|(
name|keyColumn
argument_list|,
name|treeReaderSchema
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyReader
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|included
operator|==
literal|null
operator|||
name|included
index|[
name|valueColumn
index|]
condition|)
block|{
name|valueReader
operator|=
name|createTreeReader
argument_list|(
name|valueColumn
argument_list|,
name|treeReaderSchema
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|valueReader
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|lengths
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
name|keyReader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|valueReader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|previous
expr_stmt|;
block|}
comment|// for now just clear and create new objects
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|length
init|=
operator|(
name|int
operator|)
name|lengths
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// read the new elements into the array
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|keyReader
operator|.
name|next
argument_list|(
literal|null
argument_list|)
argument_list|,
name|valueReader
operator|.
name|next
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|nextVector
parameter_list|(
name|Object
name|previous
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"NextVector is not supported operation for Map type"
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|lengths
operator|=
name|createIntegerReader
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|LENGTH
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyReader
operator|!=
literal|null
condition|)
block|{
name|keyReader
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|valueReader
operator|!=
literal|null
condition|)
block|{
name|valueReader
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|long
name|childSkip
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
operator|++
name|i
control|)
block|{
name|childSkip
operator|+=
name|lengths
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|keyReader
operator|.
name|skipRows
argument_list|(
name|childSkip
argument_list|)
expr_stmt|;
name|valueReader
operator|.
name|skipRows
argument_list|(
name|childSkip
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|TreeReader
name|createTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TreeReaderSchema
name|treeReaderSchema
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|OrcProto
operator|.
name|Type
name|type
init|=
name|treeReaderSchema
operator|.
name|getSchemaTypes
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
operator|new
name|BooleanTreeReader
argument_list|(
name|columnId
argument_list|)
return|;
case|case
name|BYTE
case|:
return|return
operator|new
name|ByteTreeReader
argument_list|(
name|columnId
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|new
name|DoubleTreeReader
argument_list|(
name|columnId
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
operator|new
name|FloatTreeReader
argument_list|(
name|columnId
argument_list|)
return|;
case|case
name|SHORT
case|:
return|return
operator|new
name|ShortTreeReader
argument_list|(
name|columnId
argument_list|)
return|;
case|case
name|INT
case|:
return|return
operator|new
name|IntTreeReader
argument_list|(
name|columnId
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
operator|new
name|LongTreeReader
argument_list|(
name|columnId
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|STRING
case|:
return|return
operator|new
name|StringTreeReader
argument_list|(
name|columnId
argument_list|)
return|;
case|case
name|CHAR
case|:
if|if
condition|(
operator|!
name|type
operator|.
name|hasMaximumLength
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ORC char type has no length specified"
argument_list|)
throw|;
block|}
return|return
operator|new
name|CharTreeReader
argument_list|(
name|columnId
argument_list|,
name|type
operator|.
name|getMaximumLength
argument_list|()
argument_list|)
return|;
case|case
name|VARCHAR
case|:
if|if
condition|(
operator|!
name|type
operator|.
name|hasMaximumLength
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ORC varchar type has no length specified"
argument_list|)
throw|;
block|}
return|return
operator|new
name|VarcharTreeReader
argument_list|(
name|columnId
argument_list|,
name|type
operator|.
name|getMaximumLength
argument_list|()
argument_list|)
return|;
case|case
name|BINARY
case|:
return|return
operator|new
name|BinaryTreeReader
argument_list|(
name|columnId
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|TimestampTreeReader
argument_list|(
name|columnId
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
operator|new
name|DateTreeReader
argument_list|(
name|columnId
argument_list|)
return|;
case|case
name|DECIMAL
case|:
name|int
name|precision
init|=
name|type
operator|.
name|hasPrecision
argument_list|()
condition|?
name|type
operator|.
name|getPrecision
argument_list|()
else|:
name|HiveDecimal
operator|.
name|SYSTEM_DEFAULT_PRECISION
decl_stmt|;
name|int
name|scale
init|=
name|type
operator|.
name|hasScale
argument_list|()
condition|?
name|type
operator|.
name|getScale
argument_list|()
else|:
name|HiveDecimal
operator|.
name|SYSTEM_DEFAULT_SCALE
decl_stmt|;
return|return
operator|new
name|DecimalTreeReader
argument_list|(
name|columnId
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
return|;
case|case
name|STRUCT
case|:
return|return
operator|new
name|StructTreeReader
argument_list|(
name|columnId
argument_list|,
name|treeReaderSchema
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|LIST
case|:
return|return
operator|new
name|ListTreeReader
argument_list|(
name|columnId
argument_list|,
name|treeReaderSchema
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|MAP
case|:
return|return
operator|new
name|MapTreeReader
argument_list|(
name|columnId
argument_list|,
name|treeReaderSchema
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|UNION
case|:
return|return
operator|new
name|UnionTreeReader
argument_list|(
name|columnId
argument_list|,
name|treeReaderSchema
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported type "
operator|+
name|type
operator|.
name|getKind
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

