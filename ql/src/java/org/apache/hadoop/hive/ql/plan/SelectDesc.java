begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Explain
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Explain
operator|.
name|Vectorization
import|;
end_import

begin_comment
comment|/**  * SelectDesc.  *  */
end_comment

begin_class
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Select Operator"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|,
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
class|class
name|SelectDesc
extends|extends
name|AbstractOperatorDesc
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
argument_list|>
name|colList
decl_stmt|;
specifier|private
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|outputColumnNames
decl_stmt|;
specifier|private
name|boolean
name|selectStar
decl_stmt|;
specifier|private
name|boolean
name|selStarNoCompute
decl_stmt|;
specifier|public
name|SelectDesc
parameter_list|()
block|{   }
specifier|public
name|SelectDesc
parameter_list|(
specifier|final
name|boolean
name|selStarNoCompute
parameter_list|)
block|{
name|this
operator|.
name|selStarNoCompute
operator|=
name|selStarNoCompute
expr_stmt|;
block|}
specifier|public
name|SelectDesc
parameter_list|(
specifier|final
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
argument_list|>
name|colList
parameter_list|,
specifier|final
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|outputColumnNames
parameter_list|)
block|{
name|this
argument_list|(
name|colList
argument_list|,
name|outputColumnNames
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SelectDesc
parameter_list|(
specifier|final
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
argument_list|>
name|colList
parameter_list|,
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|outputColumnNames
parameter_list|,
specifier|final
name|boolean
name|selectStar
parameter_list|)
block|{
name|this
operator|.
name|colList
operator|=
name|colList
expr_stmt|;
name|this
operator|.
name|selectStar
operator|=
name|selectStar
expr_stmt|;
name|this
operator|.
name|outputColumnNames
operator|=
name|outputColumnNames
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|SelectDesc
name|ret
init|=
operator|new
name|SelectDesc
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setColList
argument_list|(
name|getColList
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
name|getColList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setOutputColumnNames
argument_list|(
name|getOutputColumnNames
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|getOutputColumnNames
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setSelectStar
argument_list|(
name|selectStar
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setSelStarNoCompute
argument_list|(
name|selStarNoCompute
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"expressions"
argument_list|)
specifier|public
name|String
name|getColListString
parameter_list|()
block|{
return|return
name|PlanUtils
operator|.
name|getExprListString
argument_list|(
name|colList
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
argument_list|>
name|getColList
parameter_list|()
block|{
return|return
name|colList
return|;
block|}
specifier|public
name|void
name|setColList
parameter_list|(
specifier|final
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
argument_list|>
name|colList
parameter_list|)
block|{
name|this
operator|.
name|colList
operator|=
name|colList
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"outputColumnNames"
argument_list|)
specifier|public
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|getOutputColumnNames
parameter_list|()
block|{
return|return
name|outputColumnNames
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Output"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|}
argument_list|)
specifier|public
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|getUserLevelExplainOutputColumnNames
parameter_list|()
block|{
return|return
name|outputColumnNames
return|;
block|}
specifier|public
name|void
name|setOutputColumnNames
parameter_list|(
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|outputColumnNames
parameter_list|)
block|{
name|this
operator|.
name|outputColumnNames
operator|=
name|outputColumnNames
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"SELECT * "
argument_list|)
specifier|public
name|String
name|explainNoCompute
parameter_list|()
block|{
if|if
condition|(
name|isSelStarNoCompute
argument_list|()
condition|)
block|{
return|return
literal|"(no compute)"
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * @return the selectStar    */
specifier|public
name|boolean
name|isSelectStar
parameter_list|()
block|{
return|return
name|selectStar
return|;
block|}
comment|/**    * @param selectStar    *          the selectStar to set    */
specifier|public
name|void
name|setSelectStar
parameter_list|(
name|boolean
name|selectStar
parameter_list|)
block|{
name|this
operator|.
name|selectStar
operator|=
name|selectStar
expr_stmt|;
block|}
comment|/**    * @return the selStarNoCompute    */
specifier|public
name|boolean
name|isSelStarNoCompute
parameter_list|()
block|{
return|return
name|selStarNoCompute
return|;
block|}
comment|/**    * @param selStarNoCompute    *          the selStarNoCompute to set    */
specifier|public
name|void
name|setSelStarNoCompute
parameter_list|(
name|boolean
name|selStarNoCompute
parameter_list|)
block|{
name|this
operator|.
name|selStarNoCompute
operator|=
name|selStarNoCompute
expr_stmt|;
block|}
specifier|public
class|class
name|SelectOperatorExplainVectorization
extends|extends
name|OperatorExplainVectorization
block|{
specifier|private
specifier|final
name|SelectDesc
name|selectDesc
decl_stmt|;
specifier|private
specifier|final
name|VectorSelectDesc
name|vectorSelectDesc
decl_stmt|;
specifier|public
name|SelectOperatorExplainVectorization
parameter_list|(
name|SelectDesc
name|selectDesc
parameter_list|,
name|VectorDesc
name|vectorDesc
parameter_list|)
block|{
comment|// Native vectorization supported.
name|super
argument_list|(
name|vectorDesc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|selectDesc
operator|=
name|selectDesc
expr_stmt|;
name|vectorSelectDesc
operator|=
operator|(
name|VectorSelectDesc
operator|)
name|vectorDesc
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|OPERATOR
argument_list|,
name|displayName
operator|=
literal|"selectExpressions"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSelectExpressions
parameter_list|()
block|{
return|return
name|vectorExpressionsToStringList
argument_list|(
name|vectorSelectDesc
operator|.
name|getSelectExpressions
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|EXPRESSION
argument_list|,
name|displayName
operator|=
literal|"projectedOutputColumns"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|String
name|getProjectedOutputColumns
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
name|vectorSelectDesc
operator|.
name|getProjectedOutputColumns
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|OPERATOR
argument_list|,
name|displayName
operator|=
literal|"Select Vectorization"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|SelectOperatorExplainVectorization
name|getSelectVectorization
parameter_list|()
block|{
if|if
condition|(
name|vectorDesc
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|SelectOperatorExplainVectorization
argument_list|(
name|this
argument_list|,
name|vectorDesc
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSame
parameter_list|(
name|OperatorDesc
name|other
parameter_list|)
block|{
if|if
condition|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|SelectDesc
name|otherDesc
init|=
operator|(
name|SelectDesc
operator|)
name|other
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|getColListString
argument_list|()
argument_list|,
name|otherDesc
operator|.
name|getColListString
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|getOutputColumnNames
argument_list|()
argument_list|,
name|otherDesc
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|explainNoCompute
argument_list|()
argument_list|,
name|otherDesc
operator|.
name|explainNoCompute
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

