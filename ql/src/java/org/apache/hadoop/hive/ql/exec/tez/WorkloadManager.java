begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|wm
operator|.
name|SessionTriggerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|wm
operator|.
name|Trigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|wm
operator|.
name|TriggerActionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|security
operator|.
name|JobTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|security
operator|.
name|JobTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** Workload management entry point for HS2. */
end_comment

begin_class
specifier|public
class|class
name|WorkloadManager
extends|extends
name|TezSessionPoolSession
operator|.
name|AbstractTriggerValidator
implements|implements
name|TezSessionPoolSession
operator|.
name|Manager
implements|,
name|SessionExpirationTracker
operator|.
name|RestartImpl
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WorkloadManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// TODO: this is a temporary setting that will go away, so it's not in HiveConf.
specifier|public
specifier|static
specifier|final
name|String
name|TEST_WM_CONFIG
init|=
literal|"hive.test.workload.management"
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|private
specifier|final
name|TezSessionPool
argument_list|<
name|WmTezSession
argument_list|>
name|sessions
decl_stmt|;
specifier|private
specifier|final
name|SessionExpirationTracker
name|expirationTracker
decl_stmt|;
specifier|private
specifier|final
name|RestrictedConfigChecker
name|restrictedConfig
decl_stmt|;
specifier|private
specifier|final
name|QueryAllocationManager
name|allocationManager
decl_stmt|;
specifier|private
specifier|final
name|String
name|yarnQueue
decl_stmt|;
comment|// Note: it's not clear that we need to track this - unlike PoolManager we don't have non-pool
comment|//       sessions, so the pool itself could internally track the sessions it gave out, since
comment|//       calling close on an unopened session is probably harmless.
specifier|private
specifier|final
name|IdentityHashMap
argument_list|<
name|TezSessionPoolSession
argument_list|,
name|Boolean
argument_list|>
name|openSessions
init|=
operator|new
name|IdentityHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|amRegistryTimeoutMs
decl_stmt|;
comment|/** Sessions given out (i.e. between get... and return... calls), separated by Hive pool. */
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|poolsLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PoolState
argument_list|>
name|pools
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Used to make sure that waiting getSessions don't block update.
specifier|private
name|int
name|internalPoolsVersion
decl_stmt|;
specifier|private
name|UserPoolMapping
name|userPoolMapping
decl_stmt|;
specifier|private
name|SessionTriggerProvider
name|sessionTriggerProvider
decl_stmt|;
specifier|private
name|TriggerActionHandler
name|triggerActionHandler
decl_stmt|;
specifier|private
name|TriggerValidatorRunnable
name|triggerValidatorRunnable
decl_stmt|;
specifier|public
specifier|static
class|class
name|PoolState
block|{
comment|// Add stuff here as WM is implemented.
specifier|private
specifier|final
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|WmTezSession
argument_list|>
name|sessions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Semaphore
name|sessionsClaimed
decl_stmt|;
specifier|private
specifier|final
name|String
name|fullName
decl_stmt|;
specifier|private
specifier|final
name|double
name|finalFraction
decl_stmt|;
specifier|private
name|double
name|finalFractionRemaining
decl_stmt|;
specifier|private
specifier|final
name|int
name|queryParallelism
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Trigger
argument_list|>
name|triggers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|PoolState
parameter_list|(
name|String
name|fullName
parameter_list|,
name|int
name|queryParallelism
parameter_list|,
name|double
name|fraction
parameter_list|)
block|{
name|this
operator|.
name|fullName
operator|=
name|fullName
expr_stmt|;
name|this
operator|.
name|queryParallelism
operator|=
name|queryParallelism
expr_stmt|;
comment|// A fair semaphore to ensure correct queue order.
name|this
operator|.
name|sessionsClaimed
operator|=
operator|new
name|Semaphore
argument_list|(
name|queryParallelism
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|finalFraction
operator|=
name|this
operator|.
name|finalFractionRemaining
operator|=
name|fraction
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|fullName
operator|+
literal|", query parallelism "
operator|+
name|queryParallelism
operator|+
literal|", fraction of the cluster "
operator|+
name|finalFraction
operator|+
literal|", fraction used by child pools "
operator|+
operator|(
name|finalFraction
operator|-
name|finalFractionRemaining
operator|)
operator|+
literal|", active sessions "
operator|+
name|sessions
operator|.
name|size
argument_list|()
operator|+
literal|"]"
return|;
block|}
annotation|@
name|VisibleForTesting
comment|// will change in HIVE-17809
specifier|public
name|void
name|setTriggers
parameter_list|(
specifier|final
name|List
argument_list|<
name|Trigger
argument_list|>
name|triggers
parameter_list|)
block|{
name|this
operator|.
name|triggers
operator|=
name|triggers
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Trigger
argument_list|>
name|getTriggers
parameter_list|()
block|{
return|return
name|triggers
return|;
block|}
block|}
comment|// TODO: this is temporary before HiveServerEnvironment is merged.
specifier|private
specifier|static
specifier|volatile
name|WorkloadManager
name|INSTANCE
decl_stmt|;
specifier|public
specifier|static
name|WorkloadManager
name|getInstance
parameter_list|()
block|{
name|WorkloadManager
name|wm
init|=
name|INSTANCE
decl_stmt|;
assert|assert
name|wm
operator|!=
literal|null
assert|;
return|return
name|wm
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isInUse
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|INSTANCE
operator|!=
literal|null
operator|&&
name|conf
operator|.
name|getBoolean
argument_list|(
name|TEST_WM_CONFIG
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** Called once, when HS2 initializes. */
specifier|public
specifier|static
name|WorkloadManager
name|create
parameter_list|(
name|String
name|yarnQueue
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|TmpResourcePlan
name|plan
parameter_list|)
block|{
assert|assert
name|INSTANCE
operator|==
literal|null
assert|;
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|amsToken
init|=
name|createAmsToken
argument_list|()
decl_stmt|;
comment|// We could derive the expected number of AMs to pass in.
name|LlapPluginEndpointClient
name|amComm
init|=
operator|new
name|LlapPluginEndpointClientImpl
argument_list|(
name|conf
argument_list|,
name|amsToken
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QueryAllocationManager
name|qam
init|=
operator|new
name|GuaranteedTasksAllocator
argument_list|(
name|conf
argument_list|,
name|amComm
argument_list|)
decl_stmt|;
return|return
operator|(
name|INSTANCE
operator|=
operator|new
name|WorkloadManager
argument_list|(
name|yarnQueue
argument_list|,
name|conf
argument_list|,
name|qam
argument_list|,
name|amsToken
argument_list|,
name|plan
argument_list|)
operator|)
return|;
block|}
specifier|private
specifier|static
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|createAmsToken
parameter_list|()
block|{
if|if
condition|(
operator|!
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
return|return
literal|null
return|;
comment|// This application ID is completely bogus.
name|ApplicationId
name|id
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|%
literal|100000
argument_list|)
argument_list|)
decl_stmt|;
name|JobTokenIdentifier
name|identifier
init|=
operator|new
name|JobTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|JobTokenSecretManager
name|jobTokenManager
init|=
operator|new
name|JobTokenSecretManager
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|sessionToken
init|=
operator|new
name|Token
argument_list|<>
argument_list|(
name|identifier
argument_list|,
name|jobTokenManager
argument_list|)
decl_stmt|;
name|sessionToken
operator|.
name|setService
argument_list|(
name|identifier
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sessionToken
return|;
block|}
annotation|@
name|VisibleForTesting
name|WorkloadManager
parameter_list|(
name|String
name|yarnQueue
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|QueryAllocationManager
name|qam
parameter_list|,
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|amsToken
parameter_list|,
name|TmpResourcePlan
name|plan
parameter_list|)
block|{
name|this
operator|.
name|yarnQueue
operator|=
name|yarnQueue
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|int
name|numSessions
init|=
name|initializeHivePools
argument_list|(
name|plan
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing with "
operator|+
name|numSessions
operator|+
literal|" total query parallelism"
argument_list|)
expr_stmt|;
name|this
operator|.
name|amRegistryTimeoutMs
operator|=
operator|(
name|int
operator|)
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_SERVER2_TEZ_WM_AM_REGISTRY_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|sessions
operator|=
operator|new
name|TezSessionPool
argument_list|<>
argument_list|(
name|conf
argument_list|,
name|numSessions
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|restrictedConfig
operator|=
operator|new
name|RestrictedConfigChecker
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|allocationManager
operator|=
name|qam
expr_stmt|;
comment|// Only creates the expiration tracker if expiration is configured.
name|expirationTracker
operator|=
name|SessionExpirationTracker
operator|.
name|create
argument_list|(
name|conf
argument_list|,
name|this
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSessions
condition|;
name|i
operator|++
control|)
block|{
name|sessions
operator|.
name|addInitialSession
argument_list|(
name|createSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO: add support for per pool action handler and triggers fetcher (+atomic update to active triggers)
name|sessionTriggerProvider
operator|=
operator|new
name|SessionTriggerProvider
argument_list|()
expr_stmt|;
name|triggerActionHandler
operator|=
operator|new
name|TriggerViolationActionHandler
argument_list|()
expr_stmt|;
name|triggerValidatorRunnable
operator|=
operator|new
name|TriggerValidatorRunnable
argument_list|(
name|getSessionTriggerProvider
argument_list|()
argument_list|,
name|getTriggerActionHandler
argument_list|()
argument_list|)
expr_stmt|;
name|startTriggerValidator
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|initializeHivePools
parameter_list|(
name|TmpResourcePlan
name|plan
parameter_list|)
block|{
name|poolsLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// FIXME: Add Triggers from metastore to poolstate
comment|// Note: we assume here that plan has been validated beforehand, so we don't verify
comment|//       that fractions or query parallelism add up.
name|int
name|totalQueryParallelism
init|=
literal|0
decl_stmt|;
comment|// Use recursion to update parents more conveniently; we don't expect a big tree.
for|for
control|(
name|TmpHivePool
name|pool
range|:
name|plan
operator|.
name|getRootPools
argument_list|()
control|)
block|{
name|totalQueryParallelism
operator|+=
name|addHivePool
argument_list|(
name|pool
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|userPoolMapping
operator|=
operator|new
name|UserPoolMapping
argument_list|(
name|plan
operator|.
name|getMappings
argument_list|()
argument_list|,
name|pools
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|internalPoolsVersion
operator|=
literal|0
expr_stmt|;
comment|// Initializing for the first time.
return|return
name|totalQueryParallelism
return|;
block|}
finally|finally
block|{
name|poolsLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
specifier|static
name|char
name|POOL_SEPARATOR
init|=
literal|'/'
decl_stmt|;
specifier|private
name|int
name|addHivePool
parameter_list|(
name|TmpHivePool
name|pool
parameter_list|,
name|PoolState
name|parent
parameter_list|)
block|{
name|String
name|fullName
init|=
name|pool
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|totalQueryParallelism
init|=
name|pool
operator|.
name|getQueryParallelism
argument_list|()
decl_stmt|;
name|double
name|fraction
init|=
name|pool
operator|.
name|getResourceFraction
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|fullName
operator|=
name|parent
operator|.
name|fullName
operator|+
name|POOL_SEPARATOR
operator|+
name|fullName
expr_stmt|;
name|fraction
operator|=
name|parent
operator|.
name|finalFraction
operator|*
name|pool
operator|.
name|getResourceFraction
argument_list|()
expr_stmt|;
name|parent
operator|.
name|finalFractionRemaining
operator|-=
name|fraction
expr_stmt|;
block|}
name|PoolState
name|state
init|=
operator|new
name|PoolState
argument_list|(
name|fullName
argument_list|,
name|totalQueryParallelism
argument_list|,
name|fraction
argument_list|)
decl_stmt|;
if|if
condition|(
name|pool
operator|.
name|getChildren
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TmpHivePool
name|child
range|:
name|pool
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|totalQueryParallelism
operator|+=
name|addHivePool
argument_list|(
name|child
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding Hive pool: "
operator|+
name|state
argument_list|)
expr_stmt|;
name|pools
operator|.
name|put
argument_list|(
name|fullName
argument_list|,
name|state
argument_list|)
expr_stmt|;
return|return
name|totalQueryParallelism
return|;
block|}
specifier|public
name|TezSessionState
name|getSession
parameter_list|(
name|TezSessionState
name|session
parameter_list|,
name|String
name|userName
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|validateConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|WmTezSession
name|result
init|=
name|checkSessionForReuse
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|boolean
name|hasAcquired
init|=
literal|false
decl_stmt|;
name|String
name|poolName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|!
name|hasAcquired
condition|)
block|{
comment|// This loop handles concurrent plan updates while we are waiting.
name|poolName
operator|=
name|userPoolMapping
operator|.
name|mapSessionToPoolName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
if|if
condition|(
name|poolName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Cannot find any pool mapping for user "
operator|+
name|userName
argument_list|)
throw|;
block|}
name|int
name|internalVersion
init|=
operator|-
literal|1
decl_stmt|;
name|Semaphore
name|sessionsClaimed
init|=
literal|null
decl_stmt|;
name|poolsLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|PoolState
name|pool
init|=
name|pools
operator|.
name|get
argument_list|(
name|poolName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pool
operator|==
literal|null
condition|)
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Pool "
operator|+
name|poolName
operator|+
literal|" not found."
argument_list|)
throw|;
comment|// No need to take the pool lock, semaphore is final.
name|sessionsClaimed
operator|=
name|pool
operator|.
name|sessionsClaimed
expr_stmt|;
name|internalVersion
operator|=
name|internalPoolsVersion
expr_stmt|;
block|}
finally|finally
block|{
name|poolsLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// One cannot simply reuse the session if there are other queries waiting; to maintain
comment|// fairness, we'll try to take the semaphore instantly, and if that fails we'll return
comment|// this session back to the pool and potentially give the user a new session later.
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
comment|// Handle the special case; the pool may be exactly at capacity w/o queue. In that
comment|// case, we still should be able to reuse.
name|boolean
name|isFromTheSamePool
init|=
literal|false
decl_stmt|;
name|String
name|oldPoolName
init|=
name|result
operator|.
name|getPoolName
argument_list|()
decl_stmt|;
if|if
condition|(
name|poolName
operator|.
name|equals
argument_list|(
name|oldPoolName
argument_list|)
condition|)
block|{
name|sessionsClaimed
operator|.
name|release
argument_list|()
expr_stmt|;
name|isFromTheSamePool
operator|=
literal|true
expr_stmt|;
block|}
comment|// Note: we call timed acquire because untimed one ignores fairness.
name|hasAcquired
operator|=
name|sessionsClaimed
operator|.
name|tryAcquire
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAcquired
condition|)
block|{
name|poolsLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|boolean
name|doUnlock
init|=
literal|true
decl_stmt|;
try|try
block|{
if|if
condition|(
name|internalVersion
operator|==
name|internalPoolsVersion
condition|)
block|{
if|if
condition|(
operator|!
name|isFromTheSamePool
condition|)
block|{
comment|// Free up the usage in the old pool. TODO: ideally not under lock; not critical.
name|redistributePoolAllocations
argument_list|(
name|oldPoolName
argument_list|,
literal|null
argument_list|,
name|result
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|doUnlock
operator|=
literal|false
expr_stmt|;
comment|// Do not unlock; see below.
break|break;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|doUnlock
condition|)
block|{
name|poolsLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
name|hasAcquired
operator|=
literal|false
expr_stmt|;
block|}
comment|// Note: we are short-circuiting session::returnToSessionManager to supply the flag
name|returnAfterUse
argument_list|(
name|result
argument_list|,
operator|!
name|isFromTheSamePool
argument_list|)
expr_stmt|;
name|result
operator|=
literal|null
expr_stmt|;
block|}
comment|// We don't expect frequent updates, so check every second.
while|while
condition|(
operator|!
operator|(
name|hasAcquired
operator|=
operator|(
name|hasAcquired
operator|||
name|sessionsClaimed
operator|.
name|tryAcquire
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|)
operator|)
condition|)
block|{
name|poolsLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|internalVersion
operator|!=
name|internalPoolsVersion
condition|)
break|break;
block|}
finally|finally
block|{
name|poolsLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|hasAcquired
condition|)
continue|continue;
comment|// Keep it simple for now - everything between acquiring the semaphore and adding the session
comment|// to the pool state is done under read lock, blocking pool updates. It's possible to make
comment|// it more granular if needed. The only potentially lengthy operation is waiting for an
comment|// expired session to be restarted in the session pool.
name|poolsLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|internalVersion
operator|==
name|internalPoolsVersion
condition|)
break|break;
name|poolsLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|hasAcquired
operator|=
literal|false
expr_stmt|;
block|}
comment|// We are holding the lock from the end of the loop.
try|try
block|{
assert|assert
name|hasAcquired
assert|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// TODO: ideally, we'd need to implement tryGet and deal with the valid wait from a session
comment|//       restarting somehow, as opposed to the invalid case of a session missing from the
comment|//       pool due to some bug. Keep a "restarting" counter in the pool?
name|boolean
name|isFromTheSamePool
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|sessions
operator|.
name|getSession
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// If we are just reusing the session from the same pool, do not adjust allocations.
name|isFromTheSamePool
operator|=
name|poolName
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|setQueueName
argument_list|(
name|yarnQueue
argument_list|)
expr_stmt|;
name|result
operator|.
name|setPoolName
argument_list|(
name|poolName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ensureAmIsRegistered
argument_list|(
name|result
argument_list|)
condition|)
continue|continue;
comment|// Try another.
if|if
condition|(
operator|!
name|isFromTheSamePool
condition|)
block|{
name|redistributePoolAllocations
argument_list|(
name|poolName
argument_list|,
name|result
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
finally|finally
block|{
name|poolsLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|protected
name|boolean
name|ensureAmIsRegistered
parameter_list|(
name|WmTezSession
name|session
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Make sure AM is ready to use and registered with AM registry.
try|try
block|{
name|session
operator|.
name|waitForAmPluginInfo
argument_list|(
name|amRegistryTimeoutMs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Timed out waiting for AM registry information for "
operator|+
name|session
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|destroy
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|redistributePoolAllocations
parameter_list|(
name|String
name|poolName
parameter_list|,
name|WmTezSession
name|sessionToAdd
parameter_list|,
name|WmTezSession
name|sessionToRemove
parameter_list|,
name|boolean
name|releaseParallelism
parameter_list|)
block|{
name|List
argument_list|<
name|WmTezSession
argument_list|>
name|sessionsToUpdate
init|=
literal|null
decl_stmt|;
name|double
name|totalAlloc
init|=
literal|0
decl_stmt|;
assert|assert
name|sessionToAdd
operator|==
literal|null
operator|||
name|poolName
operator|.
name|equals
argument_list|(
name|sessionToAdd
operator|.
name|getPoolName
argument_list|()
argument_list|)
assert|;
assert|assert
name|sessionToRemove
operator|==
literal|null
operator|||
name|poolName
operator|.
name|equals
argument_list|(
name|sessionToRemove
operator|.
name|getPoolName
argument_list|()
argument_list|)
assert|;
name|poolsLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|boolean
name|hasRemoveFailed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|PoolState
name|pool
init|=
name|pools
operator|.
name|get
argument_list|(
name|poolName
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|pool
operator|.
name|lock
init|)
block|{
comment|// This should be a 2nd order fn but it's too much pain in Java for one LOC.
if|if
condition|(
name|sessionToAdd
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|sessions
operator|.
name|add
argument_list|(
name|sessionToAdd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sessionToRemove
operator|!=
literal|null
condition|)
block|{
comment|// TODO: this assumes that the update process will take the write lock, and make
comment|//       everything right w.r.t. semaphores, pool names and other stuff, since we might
comment|//       be releasing a different semaphore from the one we acquired if it's across
comment|//       the update. If the magic in the update is weak, this may become more involved.
if|if
condition|(
operator|!
name|pool
operator|.
name|sessions
operator|.
name|remove
argument_list|(
name|sessionToRemove
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Session "
operator|+
name|sessionToRemove
operator|+
literal|" could not be removed from the pool"
argument_list|)
expr_stmt|;
if|if
condition|(
name|releaseParallelism
condition|)
block|{
name|hasRemoveFailed
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|releaseParallelism
condition|)
block|{
name|pool
operator|.
name|sessionsClaimed
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
name|sessionToRemove
operator|.
name|setClusterFraction
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|totalAlloc
operator|=
name|updatePoolAllocations
argument_list|(
name|pool
operator|.
name|sessions
argument_list|,
name|pool
operator|.
name|finalFractionRemaining
argument_list|)
expr_stmt|;
name|sessionsToUpdate
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|pool
operator|.
name|sessions
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|poolsLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|allocationManager
operator|.
name|updateSessionsAsync
argument_list|(
name|totalAlloc
argument_list|,
name|sessionsToUpdate
argument_list|)
expr_stmt|;
name|updateSessionsTriggers
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasRemoveFailed
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Cannot remove the session from the pool and release "
operator|+
literal|"the query slot; HS2 may fail to accept queries"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|WmTezSession
name|checkSessionForReuse
parameter_list|(
name|TezSessionState
name|session
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|WmTezSession
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|session
operator|instanceof
name|WmTezSession
condition|)
block|{
name|result
operator|=
operator|(
name|WmTezSession
operator|)
name|session
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isOwnedBy
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
name|result
return|;
block|}
comment|// TODO: this should never happen, at least for now. Throw?
name|LOG
operator|.
name|warn
argument_list|(
literal|"Attempting to reuse a session not belonging to us: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Attempting to reuse a non-WM session for workload management:"
operator|+
name|session
argument_list|)
expr_stmt|;
if|if
condition|(
name|session
operator|instanceof
name|TezSessionPoolSession
condition|)
block|{
name|session
operator|.
name|returnToSessionManager
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|session
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// This is a non-pool session, get rid of it.
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|double
name|updatePoolAllocations
parameter_list|(
name|List
argument_list|<
name|WmTezSession
argument_list|>
name|sessions
parameter_list|,
name|double
name|totalFraction
parameter_list|)
block|{
comment|// TODO: real implementation involving in-the-pool policy interface, etc.
name|double
name|allocation
init|=
name|totalFraction
operator|/
name|sessions
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|WmTezSession
name|session
range|:
name|sessions
control|)
block|{
name|session
operator|.
name|setClusterFraction
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
block|}
return|return
name|totalFraction
return|;
block|}
specifier|private
name|void
name|validateConfig
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
name|queueName
init|=
name|conf
operator|.
name|get
argument_list|(
name|TezConfiguration
operator|.
name|TEZ_QUEUE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|queueName
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|queueName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring "
operator|+
name|TezConfiguration
operator|.
name|TEZ_QUEUE_NAME
operator|+
literal|"="
operator|+
name|queueName
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TezConfiguration
operator|.
name|TEZ_QUEUE_NAME
argument_list|,
name|yarnQueue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_ENABLE_DOAS
argument_list|)
condition|)
block|{
comment|// Should this also just be ignored? Throw for now, doAs unlike queue is often set by admin.
throw|throw
operator|new
name|HiveException
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_ENABLE_DOAS
operator|.
name|varname
operator|+
literal|" is not supported"
argument_list|)
throw|;
block|}
if|if
condition|(
name|restrictedConfig
operator|!=
literal|null
condition|)
block|{
name|restrictedConfig
operator|.
name|validate
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|sessions
operator|.
name|startInitialSessions
argument_list|()
expr_stmt|;
if|if
condition|(
name|expirationTracker
operator|!=
literal|null
condition|)
block|{
name|expirationTracker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|allocationManager
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|TezSessionPoolSession
argument_list|>
name|sessionsToClose
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|openSessions
init|)
block|{
name|sessionsToClose
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|openSessions
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TezSessionPoolSession
name|sessionState
range|:
name|sessionsToClose
control|)
block|{
name|sessionState
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expirationTracker
operator|!=
literal|null
condition|)
block|{
name|expirationTracker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|allocationManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|INSTANCE
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|WmTezSession
name|createSession
parameter_list|()
block|{
name|WmTezSession
name|session
init|=
name|createSessionObject
argument_list|(
name|TezSessionState
operator|.
name|makeSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|session
operator|.
name|setQueueName
argument_list|(
name|yarnQueue
argument_list|)
expr_stmt|;
name|session
operator|.
name|setDefault
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created new interactive session "
operator|+
name|session
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|session
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|protected
name|WmTezSession
name|createSessionObject
parameter_list|(
name|String
name|sessionId
parameter_list|)
block|{
return|return
operator|new
name|WmTezSession
argument_list|(
name|sessionId
argument_list|,
name|this
argument_list|,
name|expirationTracker
argument_list|,
operator|new
name|HiveConf
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|returnAfterUse
parameter_list|(
name|TezSessionPoolSession
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|returnAfterUse
argument_list|(
name|session
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|returnAfterUse
parameter_list|(
name|TezSessionPoolSession
name|session
parameter_list|,
name|boolean
name|releaseParallelism
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|isInterrupted
init|=
name|Thread
operator|.
name|interrupted
argument_list|()
decl_stmt|;
try|try
block|{
name|WmTezSession
name|wmSession
init|=
name|ensureOwnedSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|redistributePoolAllocations
argument_list|(
name|wmSession
operator|.
name|getPoolName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|wmSession
argument_list|,
name|releaseParallelism
argument_list|)
expr_stmt|;
name|sessions
operator|.
name|returnSession
argument_list|(
operator|(
name|WmTezSession
operator|)
name|session
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Reset the interrupt status.
if|if
condition|(
name|isInterrupted
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** Closes a running (expired) pool session and reopens it. */
annotation|@
name|Override
specifier|public
name|void
name|closeAndReopenPoolSession
parameter_list|(
name|TezSessionPoolSession
name|oldSession
parameter_list|)
throws|throws
name|Exception
block|{
name|sessions
operator|.
name|replaceSession
argument_list|(
name|ensureOwnedSession
argument_list|(
name|oldSession
argument_list|)
argument_list|,
name|createSession
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|WmTezSession
name|ensureOwnedSession
parameter_list|(
name|TezSessionState
name|oldSession
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|oldSession
operator|instanceof
name|WmTezSession
operator|)
operator|||
operator|!
operator|(
operator|(
name|WmTezSession
operator|)
name|oldSession
operator|)
operator|.
name|isOwnedBy
argument_list|(
name|this
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Not a WM session "
operator|+
name|oldSession
argument_list|)
throw|;
block|}
name|WmTezSession
name|session
init|=
operator|(
name|WmTezSession
operator|)
name|oldSession
decl_stmt|;
return|return
name|session
return|;
block|}
comment|/** Called by TezSessionPoolSession when opened. */
annotation|@
name|Override
specifier|public
name|void
name|registerOpenSession
parameter_list|(
name|TezSessionPoolSession
name|session
parameter_list|)
block|{
synchronized|synchronized
init|(
name|openSessions
init|)
block|{
name|openSessions
operator|.
name|put
argument_list|(
name|session
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|updateSessionsTriggers
argument_list|()
expr_stmt|;
block|}
comment|/** Called by TezSessionPoolSession when closed. */
annotation|@
name|Override
specifier|public
name|void
name|unregisterOpenSession
parameter_list|(
name|TezSessionPoolSession
name|session
parameter_list|)
block|{
synchronized|synchronized
init|(
name|openSessions
init|)
block|{
name|openSessions
operator|.
name|remove
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
name|updateSessionsTriggers
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|updateSessionsTriggers
parameter_list|()
block|{
if|if
condition|(
name|sessionTriggerProvider
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|TezSessionState
argument_list|>
name|openSessions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Trigger
argument_list|>
name|activeTriggers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PoolState
name|poolState
range|:
name|pools
operator|.
name|values
argument_list|()
control|)
block|{
name|activeTriggers
operator|.
name|addAll
argument_list|(
name|poolState
operator|.
name|getTriggers
argument_list|()
argument_list|)
expr_stmt|;
name|openSessions
operator|.
name|addAll
argument_list|(
name|poolState
operator|.
name|sessions
argument_list|)
expr_stmt|;
block|}
name|sessionTriggerProvider
operator|.
name|setOpenSessions
argument_list|(
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|openSessions
argument_list|)
argument_list|)
expr_stmt|;
name|sessionTriggerProvider
operator|.
name|setActiveTriggers
argument_list|(
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|activeTriggers
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|SessionExpirationTracker
name|getExpirationTracker
parameter_list|()
block|{
return|return
name|expirationTracker
return|;
block|}
annotation|@
name|Override
specifier|public
name|TezSessionState
name|reopen
parameter_list|(
name|TezSessionState
name|session
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
index|[]
name|additionalFiles
parameter_list|)
throws|throws
name|Exception
block|{
name|WmTezSession
name|oldSession
init|=
name|ensureOwnedSession
argument_list|(
name|session
argument_list|)
decl_stmt|,
name|newSession
init|=
name|createSession
argument_list|()
decl_stmt|;
name|newSession
operator|.
name|setPoolName
argument_list|(
name|oldSession
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|HiveConf
name|sessionConf
init|=
name|session
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionConf
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Session configuration is null for "
operator|+
name|session
argument_list|)
expr_stmt|;
comment|// default queue name when the initial session was created
name|sessionConf
operator|=
operator|new
name|HiveConf
argument_list|(
name|conf
argument_list|,
name|WorkloadManager
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|sessions
operator|.
name|replaceSession
argument_list|(
name|oldSession
argument_list|,
name|newSession
argument_list|,
literal|true
argument_list|,
name|additionalFiles
argument_list|,
name|sessionConf
argument_list|)
expr_stmt|;
comment|// We are going to immediately give this session out, so ensure AM registry.
if|if
condition|(
operator|!
name|ensureAmIsRegistered
argument_list|(
name|newSession
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Session is not usable after reopen"
argument_list|)
throw|;
block|}
comment|// Do not release the parallelism - we are just replacing the session in the same pool.
name|redistributePoolAllocations
argument_list|(
name|oldSession
operator|.
name|getPoolName
argument_list|()
argument_list|,
name|newSession
argument_list|,
name|oldSession
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|newSession
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|(
name|TezSessionState
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Closing a pool session because of retry failure."
argument_list|)
expr_stmt|;
comment|// We never want to lose pool sessions. Replace it instead; al trigger duck redistribution.
name|WmTezSession
name|wmSession
init|=
name|ensureOwnedSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|closeAndReopenPoolSession
argument_list|(
name|wmSession
argument_list|)
expr_stmt|;
name|redistributePoolAllocations
argument_list|(
name|wmSession
operator|.
name|getPoolName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|wmSession
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|int
name|getNumSessions
parameter_list|()
block|{
return|return
name|sessions
operator|.
name|getInitialSize
argument_list|()
return|;
block|}
annotation|@
name|Override
name|SessionTriggerProvider
name|getSessionTriggerProvider
parameter_list|()
block|{
return|return
name|sessionTriggerProvider
return|;
block|}
annotation|@
name|Override
name|TriggerActionHandler
name|getTriggerActionHandler
parameter_list|()
block|{
return|return
name|triggerActionHandler
return|;
block|}
annotation|@
name|Override
name|TriggerValidatorRunnable
name|getTriggerValidatorRunnable
parameter_list|()
block|{
return|return
name|triggerValidatorRunnable
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|PoolState
argument_list|>
name|getPools
parameter_list|()
block|{
return|return
name|pools
return|;
block|}
specifier|protected
specifier|final
name|HiveConf
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTriggerCounterNames
parameter_list|()
block|{
name|List
argument_list|<
name|Trigger
argument_list|>
name|activeTriggers
init|=
name|sessionTriggerProvider
operator|.
name|getActiveTriggers
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|counterNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Trigger
name|trigger
range|:
name|activeTriggers
control|)
block|{
name|counterNames
operator|.
name|add
argument_list|(
name|trigger
operator|.
name|getExpression
argument_list|()
operator|.
name|getCounterLimit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|counterNames
return|;
block|}
comment|// TODO: temporary until real WM schema is created.
specifier|public
specifier|static
class|class
name|TmpHivePool
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|TmpHivePool
argument_list|>
name|children
decl_stmt|;
specifier|private
specifier|final
name|int
name|queryParallelism
decl_stmt|;
specifier|private
specifier|final
name|double
name|resourceFraction
decl_stmt|;
specifier|public
name|TmpHivePool
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|TmpHivePool
argument_list|>
name|children
parameter_list|,
name|int
name|queryParallelism
parameter_list|,
name|double
name|resourceFraction
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|children
operator|=
name|children
expr_stmt|;
name|this
operator|.
name|queryParallelism
operator|=
name|queryParallelism
expr_stmt|;
name|this
operator|.
name|resourceFraction
operator|=
name|resourceFraction
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|List
argument_list|<
name|TmpHivePool
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
name|children
return|;
block|}
specifier|public
name|int
name|getQueryParallelism
parameter_list|()
block|{
return|return
name|queryParallelism
return|;
block|}
specifier|public
name|double
name|getResourceFraction
parameter_list|()
block|{
return|return
name|resourceFraction
return|;
block|}
block|}
specifier|public
specifier|static
enum|enum
name|TmpUserMappingType
block|{
name|USER
block|,
name|DEFAULT
block|}
specifier|public
specifier|static
class|class
name|TmpUserMapping
block|{
specifier|private
specifier|final
name|TmpUserMappingType
name|type
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|String
name|poolName
decl_stmt|;
specifier|private
specifier|final
name|int
name|priority
decl_stmt|;
specifier|public
name|TmpUserMapping
parameter_list|(
name|TmpUserMappingType
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|poolName
parameter_list|,
name|int
name|priority
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|poolName
operator|=
name|poolName
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
block|}
specifier|public
name|TmpUserMappingType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|String
name|getPoolName
parameter_list|()
block|{
return|return
name|poolName
return|;
block|}
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|priority
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TmpResourcePlan
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|TmpHivePool
argument_list|>
name|rootPools
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|TmpUserMapping
argument_list|>
name|mappings
decl_stmt|;
specifier|public
name|TmpResourcePlan
parameter_list|(
name|List
argument_list|<
name|TmpHivePool
argument_list|>
name|rootPools
parameter_list|,
name|List
argument_list|<
name|TmpUserMapping
argument_list|>
name|mappings
parameter_list|)
block|{
name|this
operator|.
name|rootPools
operator|=
name|rootPools
expr_stmt|;
name|this
operator|.
name|mappings
operator|=
name|mappings
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TmpHivePool
argument_list|>
name|getRootPools
parameter_list|()
block|{
return|return
name|rootPools
return|;
block|}
specifier|public
name|List
argument_list|<
name|TmpUserMapping
argument_list|>
name|getMappings
parameter_list|()
block|{
return|return
name|mappings
return|;
block|}
block|}
block|}
end_class

end_unit

