begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapredContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentLengthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|TezContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableConstantIntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_comment
comment|/**  * This function is not a deterministic function, and not a runtime constant.  * The return value is sequence within a query with a unique staring point based on write_id and task_id  */
end_comment

begin_class
annotation|@
name|UDFType
argument_list|(
name|deterministic
operator|=
literal|false
argument_list|)
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"surrogate_key"
argument_list|,
name|value
operator|=
literal|"_FUNC_() - "
operator|+
literal|"automatically generate numerical Ids for rows as you enter data into a table"
argument_list|,
name|extended
operator|=
literal|"Example: CREATE TABLE students \n"
operator|+
literal|"(`ID` BIGINT DEFAULT SURROGATE_KEY(),\n"
operator|+
literal|" name VARCHAR(64));"
argument_list|)
specifier|public
class|class
name|GenericUDFSurrogateKey
extends|extends
name|GenericUDF
block|{
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_WRITE_ID_BITS
init|=
literal|24
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_TASK_ID_BITS
init|=
literal|16
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_ROW_ID_BITS
init|=
literal|24
decl_stmt|;
specifier|private
name|int
name|writeIdBits
decl_stmt|;
specifier|private
name|int
name|taskIdBits
decl_stmt|;
specifier|private
name|int
name|rowIdBits
decl_stmt|;
specifier|private
name|long
name|maxWriteId
decl_stmt|;
specifier|private
name|long
name|maxTaskId
decl_stmt|;
specifier|private
name|long
name|maxRowId
decl_stmt|;
specifier|private
name|long
name|writeId
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|long
name|taskId
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|long
name|rowId
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
if|if
condition|(
name|arguments
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|writeIdBits
operator|=
name|DEFAULT_WRITE_ID_BITS
expr_stmt|;
name|taskIdBits
operator|=
name|DEFAULT_TASK_ID_BITS
expr_stmt|;
name|rowIdBits
operator|=
name|DEFAULT_ROW_ID_BITS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arguments
operator|.
name|length
operator|==
literal|2
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|arguments
index|[
name|i
index|]
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"SURROGATE_KEY input only takes primitive types, got "
operator|+
name|arguments
index|[
name|i
index|]
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|writeIdBits
operator|=
operator|(
operator|(
name|WritableConstantIntObjectInspector
operator|)
name|arguments
index|[
literal|0
index|]
operator|)
operator|.
name|getWritableConstantValue
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|taskIdBits
operator|=
operator|(
operator|(
name|WritableConstantIntObjectInspector
operator|)
name|arguments
index|[
literal|1
index|]
operator|)
operator|.
name|getWritableConstantValue
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|rowIdBits
operator|=
literal|64
operator|-
operator|(
name|writeIdBits
operator|+
name|taskIdBits
operator|)
expr_stmt|;
if|if
condition|(
name|writeIdBits
argument_list|<
literal|1
operator|||
name|writeIdBits
argument_list|>
literal|62
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"Write ID bits must be between 1 and 62 (value: "
operator|+
name|writeIdBits
operator|+
literal|")"
argument_list|)
throw|;
block|}
if|if
condition|(
name|taskIdBits
argument_list|<
literal|1
operator|||
name|taskIdBits
argument_list|>
literal|62
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"Task ID bits must be between 1 and 62 (value: "
operator|+
name|taskIdBits
operator|+
literal|")"
argument_list|)
throw|;
block|}
if|if
condition|(
name|writeIdBits
operator|+
name|taskIdBits
operator|>
literal|63
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"Write ID bits + Task ID bits must be less than 63 (value: "
operator|+
operator|(
name|writeIdBits
operator|+
name|taskIdBits
operator|)
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|UDFArgumentLengthException
argument_list|(
literal|"The function SURROGATE_KEY takes 0 or 2 integer arguments (write id bits, taks id bits), but found "
operator|+
name|arguments
operator|.
name|length
argument_list|)
throw|;
block|}
name|maxWriteId
operator|=
operator|(
literal|1L
operator|<<
name|writeIdBits
operator|)
operator|-
literal|1
expr_stmt|;
name|maxTaskId
operator|=
operator|(
literal|1L
operator|<<
name|taskIdBits
operator|)
operator|-
literal|1
expr_stmt|;
name|maxRowId
operator|=
operator|(
literal|1L
operator|<<
name|rowIdBits
operator|)
operator|-
literal|1
expr_stmt|;
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|MapredContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|instanceof
name|TezContext
condition|)
block|{
name|taskId
operator|=
operator|(
operator|(
name|TezContext
operator|)
name|context
operator|)
operator|.
name|getTezProcessorContext
argument_list|()
operator|.
name|getTaskIndex
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"surrogate_key function is only supported if the execution engine is Tez"
argument_list|)
throw|;
block|}
if|if
condition|(
name|taskId
operator|>
name|maxTaskId
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Task ID is out of range (%d bits) in surrogate_key"
argument_list|,
name|taskIdBits
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setWriteId
parameter_list|(
name|long
name|writeId
parameter_list|)
block|{
name|this
operator|.
name|writeId
operator|=
name|writeId
expr_stmt|;
if|if
condition|(
name|writeId
operator|>
name|maxWriteId
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Write ID is out of range (%d bits) in surrogate_key"
argument_list|,
name|writeIdBits
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|writeId
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Could not obtain Write ID for the surrogate_key function"
argument_list|)
throw|;
block|}
if|if
condition|(
name|rowId
operator|>
name|maxRowId
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Row ID is out of range (%d bits) in surrogate_key"
argument_list|,
name|rowIdBits
argument_list|)
argument_list|)
throw|;
block|}
name|long
name|uniqueId
init|=
operator|(
name|writeId
operator|<<
operator|(
name|taskIdBits
operator|+
name|rowIdBits
operator|)
operator|)
operator|+
operator|(
name|taskId
operator|<<
name|rowIdBits
operator|)
operator|+
name|rowId
decl_stmt|;
name|rowId
operator|++
expr_stmt|;
return|return
operator|new
name|LongWritable
argument_list|(
name|uniqueId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
return|return
literal|"SURROGATE_KEY()"
return|;
block|}
block|}
end_class

end_unit

