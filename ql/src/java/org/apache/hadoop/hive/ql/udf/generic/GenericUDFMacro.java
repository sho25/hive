begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExprNodeEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExprNodeEvaluatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentLengthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_comment
comment|/**  * GenericUDFMacro wraps a user-defined macro expression into a GenericUDF  * interface.  */
end_comment

begin_class
specifier|public
class|class
name|GenericUDFMacro
extends|extends
name|GenericUDF
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|2829755821687181020L
decl_stmt|;
specifier|private
name|String
name|macroName
decl_stmt|;
specifier|private
name|ExprNodeDesc
name|bodyDesc
decl_stmt|;
specifier|private
specifier|transient
name|ExprNodeEvaluator
name|body
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|colNames
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|colTypes
decl_stmt|;
specifier|private
specifier|transient
name|ObjectInspectorConverters
operator|.
name|Converter
name|converters
index|[]
decl_stmt|;
specifier|private
specifier|transient
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|evaluatedArguments
decl_stmt|;
specifier|public
name|GenericUDFMacro
parameter_list|(
name|String
name|macroName
parameter_list|,
name|ExprNodeDesc
name|bodyDesc
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|,
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|colTypes
parameter_list|)
block|{
name|this
operator|.
name|macroName
operator|=
name|macroName
expr_stmt|;
name|this
operator|.
name|bodyDesc
operator|=
name|bodyDesc
expr_stmt|;
name|this
operator|.
name|colNames
operator|=
name|colNames
expr_stmt|;
name|this
operator|.
name|colTypes
operator|=
name|colTypes
expr_stmt|;
assert|assert
operator|(
name|this
operator|.
name|bodyDesc
operator|!=
literal|null
operator|)
assert|;
assert|assert
operator|(
name|colNames
operator|.
name|size
argument_list|()
operator|==
name|colTypes
operator|.
name|size
argument_list|()
operator|)
assert|;
block|}
comment|// For serialization only.
specifier|public
name|GenericUDFMacro
parameter_list|()
block|{    }
specifier|public
name|boolean
name|isDeterministic
parameter_list|()
block|{
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
return|return
name|body
operator|.
name|isDeterministic
argument_list|()
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isStateful
parameter_list|()
block|{
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
return|return
name|body
operator|.
name|isStateful
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isRuntimeConstant
parameter_list|()
block|{
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
return|return
name|body
operator|.
name|isRuntimeConstant
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|checkNotNull
parameter_list|(
name|Object
name|object
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|checkNotNull
argument_list|(
name|colTypes
argument_list|,
literal|"colTypes"
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|arguments
argument_list|,
literal|"arguments"
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|bodyDesc
argument_list|,
literal|"bodyDesc"
argument_list|)
expr_stmt|;
if|if
condition|(
name|colTypes
operator|.
name|size
argument_list|()
operator|!=
name|arguments
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentLengthException
argument_list|(
literal|"The macro "
operator|+
name|macroName
operator|+
literal|" accepts exactly "
operator|+
name|colTypes
operator|.
name|size
argument_list|()
operator|+
literal|" arguments."
argument_list|)
throw|;
block|}
try|try
block|{
name|body
operator|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|bodyDesc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|converters
operator|=
operator|new
name|ObjectInspectorConverters
operator|.
name|Converter
index|[
name|arguments
operator|.
name|length
index|]
expr_stmt|;
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|colObjectInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|colTypes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|arguments
operator|.
name|length
condition|;
operator|++
name|index
control|)
block|{
name|ObjectInspector
name|objectInspector
init|=
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|colTypes
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
decl_stmt|;
name|colObjectInspectors
operator|.
name|add
argument_list|(
name|objectInspector
argument_list|)
expr_stmt|;
name|converters
index|[
name|index
index|]
operator|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|arguments
index|[
name|index
index|]
argument_list|,
name|objectInspector
argument_list|)
expr_stmt|;
block|}
name|evaluatedArguments
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|arguments
operator|.
name|length
argument_list|)
expr_stmt|;
name|ObjectInspector
name|structOI
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|colNames
argument_list|,
name|colObjectInspectors
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|body
operator|.
name|initialize
argument_list|(
name|structOI
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
name|evaluatedArguments
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|arguments
operator|.
name|length
condition|;
operator|++
name|index
control|)
block|{
name|evaluatedArguments
operator|.
name|add
argument_list|(
name|converters
index|[
name|index
index|]
operator|.
name|convert
argument_list|(
name|arguments
index|[
name|index
index|]
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|body
operator|.
name|evaluate
argument_list|(
name|evaluatedArguments
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
return|return
name|getStandardDisplayString
argument_list|(
name|macroName
argument_list|,
name|children
argument_list|)
return|;
block|}
specifier|public
name|void
name|setMacroName
parameter_list|(
name|String
name|macroName
parameter_list|)
block|{
name|this
operator|.
name|macroName
operator|=
name|macroName
expr_stmt|;
block|}
specifier|public
name|String
name|getMacroName
parameter_list|()
block|{
return|return
name|macroName
return|;
block|}
specifier|public
name|void
name|setBody
parameter_list|(
name|ExprNodeDesc
name|bodyDesc
parameter_list|)
block|{
name|this
operator|.
name|bodyDesc
operator|=
name|bodyDesc
expr_stmt|;
block|}
specifier|public
name|ExprNodeDesc
name|getBody
parameter_list|()
block|{
return|return
name|bodyDesc
return|;
block|}
specifier|public
name|void
name|setColNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
block|{
name|this
operator|.
name|colNames
operator|=
name|colNames
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getColNames
parameter_list|()
block|{
return|return
name|colNames
return|;
block|}
specifier|public
name|void
name|setColTypes
parameter_list|(
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|colTypes
parameter_list|)
block|{
name|this
operator|.
name|colTypes
operator|=
name|colTypes
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|getColTypes
parameter_list|()
block|{
return|return
name|colTypes
return|;
block|}
block|}
end_class

end_unit

