begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UnionOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|GenMRProcContext
operator|.
name|GenMRUnionCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|GenMRProcContext
operator|.
name|GenMapRedCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|unionproc
operator|.
name|UnionProcContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|unionproc
operator|.
name|UnionProcContext
operator|.
name|UnionParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|unionproc
operator|.
name|UnionProcFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapredWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_comment
comment|/**  * Processor for the rule - TableScan followed by Union.  */
end_comment

begin_class
specifier|public
class|class
name|GenMRUnion1
implements|implements
name|NodeProcessor
block|{
specifier|public
name|GenMRUnion1
parameter_list|()
block|{   }
comment|/**    * Process the union if all sub-queries are map-only    *    * @return    * @throws SemanticException    */
specifier|private
name|Object
name|processMapOnlyUnion
parameter_list|(
name|UnionOperator
name|union
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|GenMRProcContext
name|ctx
parameter_list|,
name|UnionProcContext
name|uCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// merge currTask from multiple topOps
name|GenMRUnionCtx
name|uCtxTask
init|=
name|ctx
operator|.
name|getUnionTask
argument_list|(
name|union
argument_list|)
decl_stmt|;
if|if
condition|(
name|uCtxTask
operator|!=
literal|null
condition|)
block|{
comment|// get task associated with this union
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|uTask
init|=
name|ctx
operator|.
name|getUnionTask
argument_list|(
name|union
argument_list|)
operator|.
name|getUTask
argument_list|()
decl_stmt|;
if|if
condition|(
name|uTask
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ctx
operator|.
name|getCurrTask
argument_list|()
operator|!=
literal|null
operator|&&
name|ctx
operator|.
name|getCurrTask
argument_list|()
operator|!=
name|uTask
condition|)
block|{
comment|// if ctx.getCurrTask() is in rootTasks, should be removed
name|ctx
operator|.
name|getRootTasks
argument_list|()
operator|.
name|remove
argument_list|(
name|ctx
operator|.
name|getCurrTask
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|setCurrTask
argument_list|(
name|uTask
argument_list|)
expr_stmt|;
block|}
block|}
name|UnionParseContext
name|uPrsCtx
init|=
name|uCtx
operator|.
name|getUnionParseContext
argument_list|(
name|union
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|getMapCurrCtx
argument_list|()
operator|.
name|put
argument_list|(
name|union
argument_list|,
operator|new
name|GenMapRedCtx
argument_list|(
name|ctx
operator|.
name|getCurrTask
argument_list|()
argument_list|,
name|ctx
operator|.
name|getCurrAliasId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// if the union is the first time seen, set current task to GenMRUnionCtx
name|uCtxTask
operator|=
name|ctx
operator|.
name|getUnionTask
argument_list|(
name|union
argument_list|)
expr_stmt|;
if|if
condition|(
name|uCtxTask
operator|==
literal|null
condition|)
block|{
name|uCtxTask
operator|=
operator|new
name|GenMRUnionCtx
argument_list|(
name|ctx
operator|.
name|getCurrTask
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setUnionTask
argument_list|(
name|union
argument_list|,
name|uCtxTask
argument_list|)
expr_stmt|;
block|}
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|uTask
init|=
name|ctx
operator|.
name|getCurrTask
argument_list|()
decl_stmt|;
if|if
condition|(
name|uTask
operator|.
name|getParentTasks
argument_list|()
operator|==
literal|null
operator|||
name|uTask
operator|.
name|getParentTasks
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|ctx
operator|.
name|getRootTasks
argument_list|()
operator|.
name|contains
argument_list|(
name|uTask
argument_list|)
condition|)
block|{
name|ctx
operator|.
name|getRootTasks
argument_list|()
operator|.
name|add
argument_list|(
name|uTask
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Process the union when the parent is a map-reduce job. Create a temporary    * output, and let the union task read from the temporary output.    *    * The files created for all the inputs are in the union context and later    * used to initialize the union plan    *    * @param parent    * @param child    * @param uTask    * @param ctx    * @param uCtxTask    */
specifier|private
name|void
name|processSubQueryUnionCreateIntermediate
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
parameter_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|uTask
parameter_list|,
name|GenMRProcContext
name|ctx
parameter_list|,
name|GenMRUnionCtx
name|uCtxTask
parameter_list|)
block|{
name|ParseContext
name|parseCtx
init|=
name|ctx
operator|.
name|getParseCtx
argument_list|()
decl_stmt|;
name|TableDesc
name|tt_desc
init|=
name|PlanUtils
operator|.
name|getIntermediateFileTableDesc
argument_list|(
name|PlanUtils
operator|.
name|getFieldSchemasFromRowSchema
argument_list|(
name|parent
operator|.
name|getSchema
argument_list|()
argument_list|,
literal|"temporarycol"
argument_list|)
argument_list|)
decl_stmt|;
comment|// generate the temporary file
name|Context
name|baseCtx
init|=
name|parseCtx
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|Path
name|taskTmpDir
init|=
name|baseCtx
operator|.
name|getMRTmpPath
argument_list|()
decl_stmt|;
comment|// Create the temporary file, its corresponding FileSinkOperaotr, and
comment|// its corresponding TableScanOperator.
name|TableScanOperator
name|tableScanOp
init|=
name|GenMapRedUtils
operator|.
name|createTemporaryFile
argument_list|(
name|parent
argument_list|,
name|child
argument_list|,
name|taskTmpDir
argument_list|,
name|tt_desc
argument_list|,
name|parseCtx
argument_list|)
decl_stmt|;
comment|// Add the path to alias mapping
name|uCtxTask
operator|.
name|addTaskTmpDir
argument_list|(
name|taskTmpDir
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|uCtxTask
operator|.
name|addTTDesc
argument_list|(
name|tt_desc
argument_list|)
expr_stmt|;
name|uCtxTask
operator|.
name|addListTopOperators
argument_list|(
name|tableScanOp
argument_list|)
expr_stmt|;
comment|// The union task is empty. The files created for all the inputs are
comment|// assembled in the union context and later used to initialize the union
comment|// plan
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|currTask
init|=
name|ctx
operator|.
name|getCurrTask
argument_list|()
decl_stmt|;
name|currTask
operator|.
name|addDependentTask
argument_list|(
name|uTask
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|getRootTasks
argument_list|()
operator|.
name|contains
argument_list|(
name|uTask
argument_list|)
condition|)
block|{
name|ctx
operator|.
name|getRootTasks
argument_list|()
operator|.
name|remove
argument_list|(
name|uTask
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ctx
operator|.
name|getRootTasks
argument_list|()
operator|.
name|contains
argument_list|(
name|currTask
argument_list|)
operator|&&
name|shouldBeRootTask
argument_list|(
name|currTask
argument_list|)
condition|)
block|{
name|ctx
operator|.
name|getRootTasks
argument_list|()
operator|.
name|add
argument_list|(
name|currTask
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Union Operator encountered. A map-only query is encountered at the given    * position. However, at least one sub-query is a map-reduce job. Copy the    * information from the current top operator to the union context.    *    * @param ctx    * @param uCtxTask    * @param union    * @param stack    * @throws SemanticException    */
specifier|private
name|void
name|processSubQueryUnionMerge
parameter_list|(
name|GenMRProcContext
name|ctx
parameter_list|,
name|GenMRUnionCtx
name|uCtxTask
parameter_list|,
name|UnionOperator
name|union
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// The current plan can be thrown away after being merged with the union
comment|// plan
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|uTask
init|=
name|uCtxTask
operator|.
name|getUTask
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|setCurrTask
argument_list|(
name|uTask
argument_list|)
expr_stmt|;
name|TableScanOperator
name|topOp
init|=
name|ctx
operator|.
name|getCurrTopOp
argument_list|()
decl_stmt|;
if|if
condition|(
name|topOp
operator|!=
literal|null
operator|&&
operator|!
name|ctx
operator|.
name|isSeenOp
argument_list|(
name|uTask
argument_list|,
name|topOp
argument_list|)
condition|)
block|{
name|GenMapRedUtils
operator|.
name|setTaskPlan
argument_list|(
name|ctx
operator|.
name|getCurrAliasId
argument_list|()
argument_list|,
name|ctx
operator|.
name|getCurrTopOp
argument_list|()
argument_list|,
name|uTask
argument_list|,
literal|false
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Union Operator encountered . Currently, the algorithm is pretty simple: If    * all the sub-queries are map-only, don't do anything. Otherwise, insert a    * FileSink on top of all the sub-queries.    *    * This can be optimized later on.    *    * @param nd    *          the file sink operator encountered    * @param opProcCtx    *          context    */
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|opProcCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|UnionOperator
name|union
init|=
operator|(
name|UnionOperator
operator|)
name|nd
decl_stmt|;
name|GenMRProcContext
name|ctx
init|=
operator|(
name|GenMRProcContext
operator|)
name|opProcCtx
decl_stmt|;
name|ParseContext
name|parseCtx
init|=
name|ctx
operator|.
name|getParseCtx
argument_list|()
decl_stmt|;
name|UnionProcContext
name|uCtx
init|=
name|parseCtx
operator|.
name|getUCtx
argument_list|()
decl_stmt|;
comment|// Map-only subqueries can be optimized in future to not write to a file in
comment|// future
name|Map
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|,
name|GenMapRedCtx
argument_list|>
name|mapCurrCtx
init|=
name|ctx
operator|.
name|getMapCurrCtx
argument_list|()
decl_stmt|;
if|if
condition|(
name|union
operator|.
name|getConf
argument_list|()
operator|.
name|isAllInputsInSameReducer
argument_list|()
condition|)
block|{
comment|// All inputs of this UnionOperator are in the same Reducer.
comment|// We do not need to break the operator tree.
name|mapCurrCtx
operator|.
name|put
argument_list|(
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
operator|)
name|nd
argument_list|,
operator|new
name|GenMapRedCtx
argument_list|(
name|ctx
operator|.
name|getCurrTask
argument_list|()
argument_list|,
name|ctx
operator|.
name|getCurrAliasId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|UnionParseContext
name|uPrsCtx
init|=
name|uCtx
operator|.
name|getUnionParseContext
argument_list|(
name|union
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|setCurrUnionOp
argument_list|(
name|union
argument_list|)
expr_stmt|;
comment|// The plan needs to be broken only if one of the sub-queries involve a
comment|// map-reduce job
if|if
condition|(
name|uPrsCtx
operator|.
name|allMapOnlySubQ
argument_list|()
condition|)
block|{
return|return
name|processMapOnlyUnion
argument_list|(
name|union
argument_list|,
name|stack
argument_list|,
name|ctx
argument_list|,
name|uCtx
argument_list|)
return|;
block|}
assert|assert
name|uPrsCtx
operator|!=
literal|null
assert|;
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|currTask
init|=
name|ctx
operator|.
name|getCurrTask
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|UnionProcFactory
operator|.
name|getPositionParent
argument_list|(
name|union
argument_list|,
name|stack
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|uTask
init|=
literal|null
decl_stmt|;
name|MapredWork
name|uPlan
init|=
literal|null
decl_stmt|;
comment|// union is encountered for the first time
name|GenMRUnionCtx
name|uCtxTask
init|=
name|ctx
operator|.
name|getUnionTask
argument_list|(
name|union
argument_list|)
decl_stmt|;
if|if
condition|(
name|uCtxTask
operator|==
literal|null
condition|)
block|{
name|uPlan
operator|=
name|GenMapRedUtils
operator|.
name|getMapRedWork
argument_list|(
name|parseCtx
argument_list|)
expr_stmt|;
name|uTask
operator|=
name|TaskFactory
operator|.
name|get
argument_list|(
name|uPlan
argument_list|,
name|parseCtx
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|uCtxTask
operator|=
operator|new
name|GenMRUnionCtx
argument_list|(
name|uTask
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setUnionTask
argument_list|(
name|union
argument_list|,
name|uCtxTask
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uTask
operator|=
name|uCtxTask
operator|.
name|getUTask
argument_list|()
expr_stmt|;
block|}
comment|// Copy into the current union task plan if
if|if
condition|(
name|uPrsCtx
operator|.
name|getMapOnlySubq
argument_list|(
name|pos
argument_list|)
operator|&&
name|uPrsCtx
operator|.
name|getRootTask
argument_list|(
name|pos
argument_list|)
condition|)
block|{
name|processSubQueryUnionMerge
argument_list|(
name|ctx
argument_list|,
name|uCtxTask
argument_list|,
name|union
argument_list|,
name|stack
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|getRootTasks
argument_list|()
operator|.
name|contains
argument_list|(
name|currTask
argument_list|)
condition|)
block|{
name|ctx
operator|.
name|getRootTasks
argument_list|()
operator|.
name|remove
argument_list|(
name|currTask
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If it a map-reduce job, create a temporary file
else|else
block|{
comment|// is the current task a root task
if|if
condition|(
name|shouldBeRootTask
argument_list|(
name|currTask
argument_list|)
operator|&&
operator|!
name|ctx
operator|.
name|getRootTasks
argument_list|()
operator|.
name|contains
argument_list|(
name|currTask
argument_list|)
operator|&&
operator|(
name|currTask
operator|.
name|getParentTasks
argument_list|()
operator|==
literal|null
operator|||
name|currTask
operator|.
name|getParentTasks
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|ctx
operator|.
name|getRootTasks
argument_list|()
operator|.
name|add
argument_list|(
name|currTask
argument_list|)
expr_stmt|;
block|}
name|processSubQueryUnionCreateIntermediate
argument_list|(
name|union
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
name|pos
argument_list|)
argument_list|,
name|union
argument_list|,
name|uTask
argument_list|,
name|ctx
argument_list|,
name|uCtxTask
argument_list|)
expr_stmt|;
comment|// the currAliasId and CurrTopOp is not valid any more
name|ctx
operator|.
name|setCurrAliasId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setCurrTopOp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|getOpTaskMap
argument_list|()
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|uTask
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|setCurrTask
argument_list|(
name|uTask
argument_list|)
expr_stmt|;
name|mapCurrCtx
operator|.
name|put
argument_list|(
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
operator|)
name|nd
argument_list|,
operator|new
name|GenMapRedCtx
argument_list|(
name|ctx
operator|.
name|getCurrTask
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|shouldBeRootTask
parameter_list|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|currTask
parameter_list|)
block|{
return|return
name|currTask
operator|.
name|getParentTasks
argument_list|()
operator|==
literal|null
operator|||
operator|(
name|currTask
operator|.
name|getParentTasks
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
return|;
block|}
block|}
end_class

end_unit

