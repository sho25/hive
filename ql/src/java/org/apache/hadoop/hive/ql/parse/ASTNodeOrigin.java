begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_comment
comment|/**  * ASTNodeOrigin contains contextual information about the object from whose  * definition a particular ASTNode originated. For example, suppose a view v is  * defined as<code>select x+1 as y from t</code>, and we're processing a query  *<code>select v1.y from v as v1</code>, and there's a type-checking problem  * with the expression<code>x+1</code> due to an ALTER TABLE on t subsequent to  * the creation of v. Then, when reporting the error, we want to provide the  * parser location with respect to the definition of v (rather than with respect  * to the top-level query, since that represents a completely different  * "parser coordinate system").  *   *<p>  *   * So, when expanding the definition of v while analyzing the top-level query,  * we tag each ASTNode with a reference to an ASTNodeOrign describing v and its  * usage within the query.  */
end_comment

begin_class
specifier|public
class|class
name|ASTNodeOrigin
block|{
specifier|private
specifier|final
name|String
name|objectType
decl_stmt|;
specifier|private
specifier|final
name|String
name|objectName
decl_stmt|;
specifier|private
specifier|final
name|String
name|objectDefinition
decl_stmt|;
specifier|private
specifier|final
name|String
name|usageAlias
decl_stmt|;
specifier|private
specifier|final
name|ASTNode
name|usageNode
decl_stmt|;
specifier|public
name|ASTNodeOrigin
parameter_list|(
name|String
name|objectType
parameter_list|,
name|String
name|objectName
parameter_list|,
name|String
name|objectDefinition
parameter_list|,
name|String
name|usageAlias
parameter_list|,
name|ASTNode
name|usageNode
parameter_list|)
block|{
name|this
operator|.
name|objectType
operator|=
name|objectType
expr_stmt|;
name|this
operator|.
name|objectName
operator|=
name|objectName
expr_stmt|;
name|this
operator|.
name|objectDefinition
operator|=
name|objectDefinition
expr_stmt|;
name|this
operator|.
name|usageAlias
operator|=
name|usageAlias
expr_stmt|;
name|this
operator|.
name|usageNode
operator|=
name|usageNode
expr_stmt|;
block|}
comment|/**    * @return the type of the object from which an ASTNode originated, e.g.    *         "view".    */
specifier|public
name|String
name|getObjectType
parameter_list|()
block|{
return|return
name|objectType
return|;
block|}
comment|/**    * @return the name of the object from which an ASTNode originated, e.g. "v".    */
specifier|public
name|String
name|getObjectName
parameter_list|()
block|{
return|return
name|objectName
return|;
block|}
comment|/**    * @return the definition of the object from which an ASTNode originated, e.g.    *<code>select x+1 as y from t</code>.    */
specifier|public
name|String
name|getObjectDefinition
parameter_list|()
block|{
return|return
name|objectDefinition
return|;
block|}
comment|/**    * @return the alias of the object from which an ASTNode originated, e.g. "v1"    *         (this can help with debugging context-dependent expansions)    */
specifier|public
name|String
name|getUsageAlias
parameter_list|()
block|{
return|return
name|usageAlias
return|;
block|}
comment|/**    * @return the expression node triggering usage of an object from which an    *         ASTNode originated, e.g.<code>v as v1</code> (this can help with    *         debugging context-dependent expansions)    */
specifier|public
name|ASTNode
name|getUsageNode
parameter_list|()
block|{
return|return
name|usageNode
return|;
block|}
block|}
end_class

begin_comment
comment|// End ASTNodeOrigin.java
end_comment

end_unit

