begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Holds index related constants  */
end_comment

begin_class
specifier|public
class|class
name|HiveIndex
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|l4j
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"HiveIndex"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|String
name|INDEX_TABLE_CREATETIME
init|=
literal|"hive.index.basetbl.dfs.lastModifiedTime"
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|IndexType
block|{
name|COMPACT_SUMMARY_TABLE
argument_list|(
literal|"compact"
argument_list|,
literal|"org.apache.hadoop.hive.ql.index.compact.CompactIndexHandler"
argument_list|)
block|;
specifier|private
name|IndexType
parameter_list|(
name|String
name|indexType
parameter_list|,
name|String
name|className
parameter_list|)
block|{
name|indexTypeName
operator|=
name|indexType
expr_stmt|;
name|this
operator|.
name|handlerClsName
operator|=
name|className
expr_stmt|;
block|}
specifier|private
specifier|final
name|String
name|indexTypeName
decl_stmt|;
specifier|private
specifier|final
name|String
name|handlerClsName
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|indexTypeName
return|;
block|}
specifier|public
name|String
name|getHandlerClsName
parameter_list|()
block|{
return|return
name|handlerClsName
return|;
block|}
block|}
specifier|public
specifier|static
name|IndexType
name|getIndexType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|IndexType
index|[]
name|types
init|=
name|IndexType
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexType
name|type
range|:
name|types
control|)
block|{
if|if
condition|(
name|type
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|type
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|IndexType
name|getIndexTypeByClassName
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|IndexType
index|[]
name|types
init|=
name|IndexType
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexType
name|type
range|:
name|types
control|)
block|{
if|if
condition|(
name|type
operator|.
name|getHandlerClsName
argument_list|()
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return
name|type
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

