begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveTxnManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|StageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * ReplTxnTask.  * Used for replaying the transaction related events.  */
end_comment

begin_class
specifier|public
class|class
name|ReplTxnTask
extends|extends
name|Task
argument_list|<
name|ReplTxnWork
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|ReplTxnTask
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|(
name|DriverContext
name|driverContext
parameter_list|)
block|{
name|String
name|replPolicy
init|=
name|work
operator|.
name|getReplPolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|Utilities
operator|.
name|FILE_OP_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|Utilities
operator|.
name|FILE_OP_LOGGER
operator|.
name|trace
argument_list|(
literal|"Executing ReplTxnTask "
operator|+
name|work
operator|.
name|getOperationType
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" for txn ids : "
operator|+
name|work
operator|.
name|getTxnIds
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" replPolicy : "
operator|+
name|replPolicy
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|HiveTxnManager
name|txnManager
init|=
name|driverContext
operator|.
name|getCtx
argument_list|()
operator|.
name|getHiveTxnManager
argument_list|()
decl_stmt|;
name|String
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Replaying "
operator|+
name|work
operator|.
name|getOperationType
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" Event for policy "
operator|+
name|replPolicy
operator|+
literal|" with srcTxn "
operator|+
name|work
operator|.
name|getTxnIds
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|work
operator|.
name|getOperationType
argument_list|()
condition|)
block|{
case|case
name|REPL_OPEN_TXN
case|:
name|List
argument_list|<
name|Long
argument_list|>
name|txnIds
init|=
name|txnManager
operator|.
name|replOpenTxn
argument_list|(
name|replPolicy
argument_list|,
name|work
operator|.
name|getTxnIds
argument_list|()
argument_list|,
name|user
argument_list|)
decl_stmt|;
assert|assert
name|txnIds
operator|.
name|size
argument_list|()
operator|==
name|work
operator|.
name|getTxnIds
argument_list|()
operator|.
name|size
argument_list|()
assert|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Replayed OpenTxn Event for policy "
operator|+
name|replPolicy
operator|+
literal|" with srcTxn "
operator|+
name|work
operator|.
name|getTxnIds
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" and target txn id "
operator|+
name|txnIds
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
case|case
name|REPL_ABORT_TXN
case|:
for|for
control|(
name|long
name|txnId
range|:
name|work
operator|.
name|getTxnIds
argument_list|()
control|)
block|{
name|txnManager
operator|.
name|replRollbackTxn
argument_list|(
name|replPolicy
argument_list|,
name|txnId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Replayed AbortTxn Event for policy "
operator|+
name|replPolicy
operator|+
literal|" with srcTxn "
operator|+
name|txnId
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
case|case
name|REPL_COMMIT_TXN
case|:
for|for
control|(
name|long
name|txnId
range|:
name|work
operator|.
name|getTxnIds
argument_list|()
control|)
block|{
name|txnManager
operator|.
name|replCommitTxn
argument_list|(
name|replPolicy
argument_list|,
name|txnId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Replayed CommitTxn Event for policy "
operator|+
name|replPolicy
operator|+
literal|" with srcTxn "
operator|+
name|txnId
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"Operation Type "
operator|+
name|work
operator|.
name|getOperationType
argument_list|()
operator|+
literal|" is not supported "
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Failed with exception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"\n"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|StageType
name|getType
parameter_list|()
block|{
return|return
name|StageType
operator|.
name|REPL_TXN
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"REPL_TRANSACTION"
return|;
block|}
block|}
end_class

end_unit

