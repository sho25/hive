begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_comment
comment|/**  * Class with utility methods to use typecheck processor factory  * functionality.  */
end_comment

begin_class
specifier|public
class|class
name|ExprNodeTypeCheck
block|{
specifier|private
name|ExprNodeTypeCheck
parameter_list|()
block|{
comment|// Defeat instantiation
block|}
comment|/**    * Given an AST expression and a context, it will produce a map from AST nodes    * to Hive ExprNode.    */
specifier|public
specifier|static
name|Map
argument_list|<
name|ASTNode
argument_list|,
name|ExprNodeDesc
argument_list|>
name|genExprNode
parameter_list|(
name|ASTNode
name|expr
parameter_list|,
name|TypeCheckCtx
name|tcCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TypeCheckProcFactory
argument_list|<
name|ExprNodeDesc
argument_list|>
name|factory
init|=
operator|new
name|TypeCheckProcFactory
argument_list|<>
argument_list|(
operator|new
name|ExprNodeDescExprFactory
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|factory
operator|.
name|genExprNode
argument_list|(
name|expr
argument_list|,
name|tcCtx
argument_list|)
return|;
block|}
comment|/**    * Given an AST join expression and a context, it will produce a map from AST nodes    * to Hive ExprNode.    */
specifier|public
specifier|static
name|Map
argument_list|<
name|ASTNode
argument_list|,
name|ExprNodeDesc
argument_list|>
name|genExprNodeJoinCond
parameter_list|(
name|ASTNode
name|expr
parameter_list|,
name|TypeCheckCtx
name|tcCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|JoinCondTypeCheckProcFactory
argument_list|<
name|ExprNodeDesc
argument_list|>
name|typeCheckProcFactory
init|=
operator|new
name|JoinCondTypeCheckProcFactory
argument_list|<>
argument_list|(
operator|new
name|ExprNodeDescExprFactory
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|typeCheckProcFactory
operator|.
name|genExprNode
argument_list|(
name|expr
argument_list|,
name|tcCtx
argument_list|)
return|;
block|}
comment|/**    * Returns the default processor to generate Hive ExprNode from AST nodes.    */
specifier|public
specifier|static
name|TypeCheckProcFactory
argument_list|<
name|ExprNodeDesc
argument_list|>
operator|.
name|DefaultExprProcessor
name|getExprNodeDefaultExprProcessor
parameter_list|()
block|{
name|TypeCheckProcFactory
argument_list|<
name|ExprNodeDesc
argument_list|>
name|factory
init|=
operator|new
name|TypeCheckProcFactory
argument_list|<>
argument_list|(
operator|new
name|ExprNodeDescExprFactory
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|factory
operator|.
name|getDefaultExprProcessor
argument_list|()
return|;
block|}
comment|/**    * Transforms column information into the corresponding Hive ExprNode.    */
specifier|public
specifier|static
name|ExprNodeDesc
name|toExprNodeDesc
parameter_list|(
name|ColumnInfo
name|columnInfo
parameter_list|)
block|{
name|ExprNodeDescExprFactory
name|factory
init|=
operator|new
name|ExprNodeDescExprFactory
argument_list|()
decl_stmt|;
return|return
name|factory
operator|.
name|toExpr
argument_list|(
name|columnInfo
argument_list|)
return|;
block|}
block|}
end_class

end_unit

