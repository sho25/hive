begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|Decimal64ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ListColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|MapColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|StructColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|UnionColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|UnionObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|BinaryObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|BooleanObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|ByteObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|DateObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|DoubleObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|FloatObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|HiveCharObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|HiveDecimalObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|HiveVarcharObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|IntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LongObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|ShortObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|StringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|TimestampObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|TypeDescription
import|;
end_import

begin_comment
comment|/**  * An ORC file writer. The file is divided into stripes, which is the natural  * unit of work when reading. Each stripe is buffered in memory until the  * memory reaches the stripe size and then it is written out broken down by  * columns. Each column is written by a TreeWriter that is specific to that  * type of column. TreeWriters may have children TreeWriters that handle the  * sub-types. Each of the TreeWriters writes the column's data as a set of  * streams.  *  * This class is unsynchronized like most Stream objects, so from the creation of an OrcFile and all  * access to a single instance has to be from a single thread.  *   * There are no known cases where these happen between different threads today.  *   * Caveat: the MemoryManager is created during WriterOptions create, that has to be confined to a single  * thread as well.  *   */
end_comment

begin_class
specifier|public
class|class
name|WriterImpl
extends|extends
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|WriterImpl
implements|implements
name|Writer
block|{
specifier|private
specifier|final
name|ObjectInspector
name|inspector
decl_stmt|;
specifier|private
specifier|final
name|VectorizedRowBatch
name|internalBatch
decl_stmt|;
specifier|private
specifier|final
name|StructField
index|[]
name|fields
decl_stmt|;
name|WriterImpl
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|OrcFile
operator|.
name|WriterOptions
name|opts
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|opts
argument_list|)
expr_stmt|;
name|this
operator|.
name|inspector
operator|=
name|opts
operator|.
name|getInspector
argument_list|()
expr_stmt|;
name|boolean
name|useDecimal64ColumnVectors
init|=
name|opts
operator|.
name|getConfiguration
argument_list|()
operator|!=
literal|null
operator|&&
name|HiveConf
operator|.
name|getVar
argument_list|(
name|opts
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZED_INPUT_FORMAT_SUPPORTS_ENABLED
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"decimal_64"
argument_list|)
decl_stmt|;
if|if
condition|(
name|useDecimal64ColumnVectors
condition|)
block|{
name|this
operator|.
name|internalBatch
operator|=
name|opts
operator|.
name|getSchema
argument_list|()
operator|.
name|createRowBatch
argument_list|(
name|TypeDescription
operator|.
name|RowBatchVersion
operator|.
name|USE_DECIMAL64
argument_list|,
name|opts
operator|.
name|getBatchSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|internalBatch
operator|=
name|opts
operator|.
name|getSchema
argument_list|()
operator|.
name|createRowBatch
argument_list|(
name|opts
operator|.
name|getBatchSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|fields
operator|=
name|initializeFieldsFromOi
argument_list|(
name|inspector
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|StructField
index|[]
name|initializeFieldsFromOi
parameter_list|(
name|ObjectInspector
name|inspector
parameter_list|)
block|{
if|if
condition|(
name|inspector
operator|instanceof
name|StructObjectInspector
condition|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldList
init|=
operator|(
operator|(
name|StructObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|StructField
index|[]
name|fields
init|=
operator|new
name|StructField
index|[
name|fieldList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|fieldList
operator|.
name|toArray
argument_list|(
name|fields
argument_list|)
expr_stmt|;
return|return
name|fields
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Set the value for a given column value within a batch.    * @param rowId the row to set    * @param column the column to set    * @param inspector the object inspector to interpret the obj    * @param obj the value to use    */
specifier|static
name|void
name|setColumn
parameter_list|(
name|int
name|rowId
parameter_list|,
name|ColumnVector
name|column
parameter_list|,
name|ObjectInspector
name|inspector
parameter_list|,
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
name|column
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|column
operator|.
name|isNull
index|[
name|rowId
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|inspector
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
switch|switch
condition|(
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
block|{
name|LongColumnVector
name|vector
init|=
operator|(
name|LongColumnVector
operator|)
name|column
decl_stmt|;
name|vector
operator|.
name|vector
index|[
name|rowId
index|]
operator|=
operator|(
operator|(
name|BooleanObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|get
argument_list|(
name|obj
argument_list|)
condition|?
literal|1
else|:
literal|0
expr_stmt|;
break|break;
block|}
case|case
name|BYTE
case|:
block|{
name|LongColumnVector
name|vector
init|=
operator|(
name|LongColumnVector
operator|)
name|column
decl_stmt|;
name|vector
operator|.
name|vector
index|[
name|rowId
index|]
operator|=
operator|(
operator|(
name|ByteObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|get
argument_list|(
name|obj
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SHORT
case|:
block|{
name|LongColumnVector
name|vector
init|=
operator|(
name|LongColumnVector
operator|)
name|column
decl_stmt|;
name|vector
operator|.
name|vector
index|[
name|rowId
index|]
operator|=
operator|(
operator|(
name|ShortObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|get
argument_list|(
name|obj
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|INT
case|:
block|{
name|LongColumnVector
name|vector
init|=
operator|(
name|LongColumnVector
operator|)
name|column
decl_stmt|;
name|vector
operator|.
name|vector
index|[
name|rowId
index|]
operator|=
operator|(
operator|(
name|IntObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|get
argument_list|(
name|obj
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LONG
case|:
block|{
name|LongColumnVector
name|vector
init|=
operator|(
name|LongColumnVector
operator|)
name|column
decl_stmt|;
name|vector
operator|.
name|vector
index|[
name|rowId
index|]
operator|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|get
argument_list|(
name|obj
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|FLOAT
case|:
block|{
name|DoubleColumnVector
name|vector
init|=
operator|(
name|DoubleColumnVector
operator|)
name|column
decl_stmt|;
name|vector
operator|.
name|vector
index|[
name|rowId
index|]
operator|=
operator|(
operator|(
name|FloatObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|get
argument_list|(
name|obj
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DOUBLE
case|:
block|{
name|DoubleColumnVector
name|vector
init|=
operator|(
name|DoubleColumnVector
operator|)
name|column
decl_stmt|;
name|vector
operator|.
name|vector
index|[
name|rowId
index|]
operator|=
operator|(
operator|(
name|DoubleObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|get
argument_list|(
name|obj
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|BINARY
case|:
block|{
name|BytesColumnVector
name|vector
init|=
operator|(
name|BytesColumnVector
operator|)
name|column
decl_stmt|;
name|BytesWritable
name|blob
init|=
operator|(
operator|(
name|BinaryObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|vector
operator|.
name|setVal
argument_list|(
name|rowId
argument_list|,
name|blob
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|blob
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|STRING
case|:
block|{
name|BytesColumnVector
name|vector
init|=
operator|(
name|BytesColumnVector
operator|)
name|column
decl_stmt|;
name|Text
name|blob
init|=
operator|(
operator|(
name|StringObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|vector
operator|.
name|setVal
argument_list|(
name|rowId
argument_list|,
name|blob
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|blob
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|VARCHAR
case|:
block|{
name|BytesColumnVector
name|vector
init|=
operator|(
name|BytesColumnVector
operator|)
name|column
decl_stmt|;
name|Text
name|blob
init|=
operator|(
operator|(
name|HiveVarcharObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|obj
argument_list|)
operator|.
name|getTextValue
argument_list|()
decl_stmt|;
name|vector
operator|.
name|setVal
argument_list|(
name|rowId
argument_list|,
name|blob
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|blob
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|CHAR
case|:
block|{
name|BytesColumnVector
name|vector
init|=
operator|(
name|BytesColumnVector
operator|)
name|column
decl_stmt|;
name|Text
name|blob
init|=
operator|(
operator|(
name|HiveCharObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|obj
argument_list|)
operator|.
name|getTextValue
argument_list|()
decl_stmt|;
name|vector
operator|.
name|setVal
argument_list|(
name|rowId
argument_list|,
name|blob
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|blob
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|TIMESTAMP
case|:
block|{
name|TimestampColumnVector
name|vector
init|=
operator|(
name|TimestampColumnVector
operator|)
name|column
decl_stmt|;
name|vector
operator|.
name|setIsUTC
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|vector
operator|.
name|set
argument_list|(
name|rowId
argument_list|,
operator|(
operator|(
name|TimestampObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|obj
argument_list|)
operator|.
name|toSqlTimestamp
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DATE
case|:
block|{
name|LongColumnVector
name|vector
init|=
operator|(
name|LongColumnVector
operator|)
name|column
decl_stmt|;
name|vector
operator|.
name|vector
index|[
name|rowId
index|]
operator|=
operator|(
operator|(
name|DateObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|obj
argument_list|)
operator|.
name|getDays
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|DECIMAL
case|:
block|{
if|if
condition|(
name|column
operator|instanceof
name|Decimal64ColumnVector
condition|)
block|{
name|Decimal64ColumnVector
name|vector
init|=
operator|(
name|Decimal64ColumnVector
operator|)
name|column
decl_stmt|;
name|vector
operator|.
name|set
argument_list|(
name|rowId
argument_list|,
operator|(
operator|(
name|HiveDecimalObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|obj
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DecimalColumnVector
name|vector
init|=
operator|(
name|DecimalColumnVector
operator|)
name|column
decl_stmt|;
name|vector
operator|.
name|set
argument_list|(
name|rowId
argument_list|,
operator|(
operator|(
name|HiveDecimalObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|obj
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
break|break;
case|case
name|STRUCT
case|:
block|{
name|StructColumnVector
name|vector
init|=
operator|(
name|StructColumnVector
operator|)
name|column
decl_stmt|;
name|StructObjectInspector
name|oi
init|=
operator|(
name|StructObjectInspector
operator|)
name|inspector
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|oi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|vector
operator|.
name|fields
operator|.
name|length
condition|;
operator|++
name|c
control|)
block|{
name|StructField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|setColumn
argument_list|(
name|rowId
argument_list|,
name|vector
operator|.
name|fields
index|[
name|c
index|]
argument_list|,
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|,
name|oi
operator|.
name|getStructFieldData
argument_list|(
name|obj
argument_list|,
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|UNION
case|:
block|{
name|UnionColumnVector
name|vector
init|=
operator|(
name|UnionColumnVector
operator|)
name|column
decl_stmt|;
name|UnionObjectInspector
name|oi
init|=
operator|(
name|UnionObjectInspector
operator|)
name|inspector
decl_stmt|;
name|int
name|tag
init|=
name|oi
operator|.
name|getTag
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|vector
operator|.
name|tags
index|[
name|rowId
index|]
operator|=
name|tag
expr_stmt|;
name|setColumn
argument_list|(
name|rowId
argument_list|,
name|vector
operator|.
name|fields
index|[
name|tag
index|]
argument_list|,
name|oi
operator|.
name|getObjectInspectors
argument_list|()
operator|.
name|get
argument_list|(
name|tag
argument_list|)
argument_list|,
name|oi
operator|.
name|getField
argument_list|(
name|obj
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LIST
case|:
block|{
name|ListColumnVector
name|vector
init|=
operator|(
name|ListColumnVector
operator|)
name|column
decl_stmt|;
name|ListObjectInspector
name|oi
init|=
operator|(
name|ListObjectInspector
operator|)
name|inspector
decl_stmt|;
name|int
name|offset
init|=
name|vector
operator|.
name|childCount
decl_stmt|;
name|int
name|length
init|=
name|oi
operator|.
name|getListLength
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|vector
operator|.
name|offsets
index|[
name|rowId
index|]
operator|=
name|offset
expr_stmt|;
name|vector
operator|.
name|lengths
index|[
name|rowId
index|]
operator|=
name|length
expr_stmt|;
name|vector
operator|.
name|child
operator|.
name|ensureSize
argument_list|(
name|offset
operator|+
name|length
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|vector
operator|.
name|childCount
operator|+=
name|length
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|length
condition|;
operator|++
name|c
control|)
block|{
name|setColumn
argument_list|(
name|offset
operator|+
name|c
argument_list|,
name|vector
operator|.
name|child
argument_list|,
name|oi
operator|.
name|getListElementObjectInspector
argument_list|()
argument_list|,
name|oi
operator|.
name|getListElement
argument_list|(
name|obj
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|MAP
case|:
block|{
name|MapColumnVector
name|vector
init|=
operator|(
name|MapColumnVector
operator|)
name|column
decl_stmt|;
name|MapObjectInspector
name|oi
init|=
operator|(
name|MapObjectInspector
operator|)
name|inspector
decl_stmt|;
name|int
name|offset
init|=
name|vector
operator|.
name|childCount
decl_stmt|;
name|Set
name|map
init|=
name|oi
operator|.
name|getMap
argument_list|(
name|obj
argument_list|)
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
name|vector
operator|.
name|offsets
index|[
name|rowId
index|]
operator|=
name|offset
expr_stmt|;
name|vector
operator|.
name|lengths
index|[
name|rowId
index|]
operator|=
name|length
expr_stmt|;
name|vector
operator|.
name|keys
operator|.
name|ensureSize
argument_list|(
name|offset
operator|+
name|length
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|vector
operator|.
name|values
operator|.
name|ensureSize
argument_list|(
name|offset
operator|+
name|length
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|vector
operator|.
name|childCount
operator|+=
name|length
expr_stmt|;
for|for
control|(
name|Object
name|item
range|:
name|map
control|)
block|{
name|Map
operator|.
name|Entry
name|pair
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|item
decl_stmt|;
name|setColumn
argument_list|(
name|offset
argument_list|,
name|vector
operator|.
name|keys
argument_list|,
name|oi
operator|.
name|getMapKeyObjectInspector
argument_list|()
argument_list|,
name|pair
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|setColumn
argument_list|(
name|offset
argument_list|,
name|vector
operator|.
name|values
argument_list|,
name|oi
operator|.
name|getMapValueObjectInspector
argument_list|()
argument_list|,
name|pair
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|1
expr_stmt|;
block|}
break|break;
block|}
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown ObjectInspector kind "
operator|+
name|inspector
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|void
name|flushInternalBatch
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|internalBatch
operator|.
name|size
operator|!=
literal|0
condition|)
block|{
name|super
operator|.
name|addRowBatch
argument_list|(
name|internalBatch
argument_list|)
expr_stmt|;
name|internalBatch
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRow
parameter_list|(
name|Object
name|row
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|rowId
init|=
name|internalBatch
operator|.
name|size
operator|++
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|inspector
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|setColumn
argument_list|(
name|rowId
argument_list|,
name|internalBatch
operator|.
name|cols
index|[
name|i
index|]
argument_list|,
name|fields
index|[
name|i
index|]
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|,
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|setColumn
argument_list|(
name|rowId
argument_list|,
name|internalBatch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|,
name|inspector
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|internalBatch
operator|.
name|size
operator|==
name|internalBatch
operator|.
name|getMaxSize
argument_list|()
condition|)
block|{
name|flushInternalBatch
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|writeIntermediateFooter
parameter_list|()
throws|throws
name|IOException
block|{
name|flushInternalBatch
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|writeIntermediateFooter
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRowBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|IOException
block|{
name|flushInternalBatch
argument_list|()
expr_stmt|;
name|super
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|flushInternalBatch
argument_list|()
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

