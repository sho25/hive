begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_class
specifier|public
class|class
name|DosToUnix
block|{
specifier|public
specifier|static
name|String
name|convertWindowsScriptToUnix
parameter_list|(
name|File
name|windowsScriptFile
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|windowsScriptFilename
init|=
name|windowsScriptFile
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|unixScriptFilename
init|=
name|getUnixScriptNameFor
argument_list|(
name|windowsScriptFilename
argument_list|)
decl_stmt|;
name|File
name|unixScriptFile
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|windowsScriptFile
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|unixScriptFile
operator|=
operator|new
name|File
argument_list|(
name|windowsScriptFile
operator|.
name|getParent
argument_list|()
operator|+
literal|"/"
operator|+
name|unixScriptFilename
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unixScriptFile
operator|=
operator|new
name|File
argument_list|(
name|unixScriptFilename
argument_list|)
expr_stmt|;
block|}
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|unixScriptFile
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|windowsScriptFile
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|prev
init|=
name|reader
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|next
init|=
name|reader
operator|.
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
name|prev
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|prev
operator|!=
operator|-
literal|1
operator|&&
operator|(
name|prev
operator|!=
literal|'\r'
operator|||
name|next
operator|!=
literal|'\n'
operator|)
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|prev
argument_list|)
expr_stmt|;
block|}
name|prev
operator|=
name|next
expr_stmt|;
name|next
operator|=
name|reader
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|unixScriptFile
operator|.
name|setExecutable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|unixScriptFile
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getUnixScriptNameFor
parameter_list|(
name|String
name|windowsScriptFilename
parameter_list|)
block|{
name|int
name|pos
init|=
name|windowsScriptFilename
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|unixScriptFilename
decl_stmt|;
if|if
condition|(
name|pos
operator|>=
literal|0
condition|)
block|{
name|unixScriptFilename
operator|=
name|windowsScriptFilename
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
operator|+
literal|"_unix"
operator|+
name|windowsScriptFilename
operator|.
name|substring
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unixScriptFilename
operator|=
name|windowsScriptFilename
operator|+
literal|"_unix"
expr_stmt|;
block|}
return|return
name|unixScriptFilename
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isWindowsScript
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|readLength
init|=
name|reader
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|readLength
operator|>=
literal|2
operator|&&
name|buffer
index|[
literal|0
index|]
operator|==
literal|'#'
operator|&&
name|buffer
index|[
literal|1
index|]
operator|==
literal|'!'
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|readLength
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|buffer
index|[
name|i
index|]
condition|)
block|{
case|case
literal|'\r'
case|:
return|return
literal|true
return|;
case|case
literal|'\n'
case|:
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// It means, It is not a valid windows script file so ignore the exception and return false.
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

