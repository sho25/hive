begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexVisitorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveDateGranularity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
operator|.
name|HiveProjectSortTransposeRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
operator|.
name|HiveSortProjectTransposeRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|Interval
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Rules and relational operators for {@link DruidQuery}.  *  * TODO: to be removed when Calcite is upgraded to 1.9  */
end_comment

begin_class
specifier|public
class|class
name|DruidRules
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DruidRules
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Avoid instantiation
specifier|private
name|DruidRules
parameter_list|()
block|{   }
specifier|public
specifier|static
specifier|final
name|DruidFilterRule
name|FILTER
init|=
operator|new
name|DruidFilterRule
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|DruidProjectRule
name|PROJECT
init|=
operator|new
name|DruidProjectRule
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|DruidAggregateRule
name|AGGREGATE
init|=
operator|new
name|DruidAggregateRule
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|DruidProjectAggregateRule
name|PROJECT_AGGREGATE
init|=
operator|new
name|DruidProjectAggregateRule
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|DruidSortRule
name|SORT
init|=
operator|new
name|DruidSortRule
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|DruidProjectSortRule
name|PROJECT_SORT
init|=
operator|new
name|DruidProjectSortRule
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|DruidSortProjectRule
name|SORT_PROJECT
init|=
operator|new
name|DruidSortProjectRule
argument_list|()
decl_stmt|;
comment|/** Predicate that returns whether Druid can not handle an aggregate. */
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|AggregateCall
argument_list|>
name|BAD_AGG
init|=
operator|new
name|Predicate
argument_list|<
name|AggregateCall
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|AggregateCall
name|aggregateCall
parameter_list|)
block|{
switch|switch
condition|(
name|aggregateCall
operator|.
name|getAggregation
argument_list|()
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|COUNT
case|:
case|case
name|SUM
case|:
case|case
name|SUM0
case|:
case|case
name|MIN
case|:
case|case
name|MAX
case|:
return|return
literal|false
return|;
default|default:
return|return
literal|true
return|;
block|}
block|}
block|}
decl_stmt|;
comment|/**    * Rule to push a {@link org.apache.calcite.rel.core.Filter} into a {@link DruidQuery}.    */
specifier|private
specifier|static
class|class
name|DruidFilterRule
extends|extends
name|RelOptRule
block|{
specifier|private
name|DruidFilterRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|Filter
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|DruidQuery
operator|.
name|class
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Filter
name|filter
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|DruidQuery
name|query
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|DruidQuery
operator|.
name|isValidSignature
argument_list|(
name|query
operator|.
name|signature
argument_list|()
operator|+
literal|'f'
argument_list|)
operator|||
operator|!
name|query
operator|.
name|isValidFilter
argument_list|(
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Timestamp
name|int
name|timestampFieldIdx
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|query
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|DruidTable
operator|.
name|DEFAULT_TIMESTAMP_COLUMN
operator|.
name|equals
argument_list|(
name|query
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|timestampFieldIdx
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
specifier|final
name|Pair
argument_list|<
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|>
name|pair
init|=
name|splitFilters
argument_list|(
name|filter
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
argument_list|,
name|query
argument_list|,
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|,
name|timestampFieldIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|==
literal|null
condition|)
block|{
comment|// We can't push anything useful to Druid.
return|return;
block|}
name|List
argument_list|<
name|Interval
argument_list|>
name|intervals
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|pair
operator|.
name|left
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|intervals
operator|=
name|DruidIntervalUtils
operator|.
name|createInterval
argument_list|(
name|query
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|timestampFieldIdx
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|,
name|pair
operator|.
name|left
argument_list|)
expr_stmt|;
if|if
condition|(
name|intervals
operator|==
literal|null
condition|)
block|{
comment|// We can't push anything useful to Druid.
return|return;
block|}
block|}
name|DruidQuery
name|newDruidQuery
init|=
name|query
decl_stmt|;
if|if
condition|(
operator|!
name|pair
operator|.
name|right
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|validConditions
argument_list|(
name|pair
operator|.
name|right
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|RelNode
name|newFilter
init|=
name|filter
operator|.
name|copy
argument_list|(
name|filter
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|Util
operator|.
name|last
argument_list|(
name|query
operator|.
name|rels
argument_list|)
argument_list|,
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|filter
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
argument_list|,
name|pair
operator|.
name|right
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|newDruidQuery
operator|=
name|DruidQuery
operator|.
name|extendQuery
argument_list|(
name|query
argument_list|,
name|newFilter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|intervals
operator|!=
literal|null
condition|)
block|{
name|newDruidQuery
operator|=
name|DruidQuery
operator|.
name|extendQuery
argument_list|(
name|newDruidQuery
argument_list|,
name|intervals
argument_list|)
expr_stmt|;
block|}
name|call
operator|.
name|transformTo
argument_list|(
name|newDruidQuery
argument_list|)
expr_stmt|;
block|}
comment|/* Splits the filter condition in two groups: those that filter on the timestamp column      * and those that filter on other fields */
specifier|private
specifier|static
name|Pair
argument_list|<
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|>
name|splitFilters
parameter_list|(
specifier|final
name|RexBuilder
name|rexBuilder
parameter_list|,
specifier|final
name|DruidQuery
name|input
parameter_list|,
name|RexNode
name|cond
parameter_list|,
specifier|final
name|int
name|timestampFieldIdx
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|timeRangeNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|otherNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|conjs
init|=
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|cond
argument_list|)
decl_stmt|;
if|if
condition|(
name|conjs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// We do not transform
return|return
literal|null
return|;
block|}
comment|// Number of columns with the dimensions and timestamp
name|int
name|max
init|=
name|input
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
operator|-
name|input
operator|.
name|druidTable
operator|.
name|metricFieldNames
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|conj
range|:
name|conjs
control|)
block|{
specifier|final
name|RelOptUtil
operator|.
name|InputReferencedVisitor
name|visitor
init|=
operator|new
name|RelOptUtil
operator|.
name|InputReferencedVisitor
argument_list|()
decl_stmt|;
name|conj
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
if|if
condition|(
name|visitor
operator|.
name|inputPosReferenced
operator|.
name|contains
argument_list|(
name|timestampFieldIdx
argument_list|)
condition|)
block|{
if|if
condition|(
name|visitor
operator|.
name|inputPosReferenced
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
comment|// Complex predicate, transformation currently not supported
return|return
literal|null
return|;
block|}
name|timeRangeNodes
operator|.
name|add
argument_list|(
name|conj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|visitor
operator|.
name|inputPosReferenced
operator|.
name|tailSet
argument_list|(
name|max
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Filter on metrics, not supported in Druid
return|return
literal|null
return|;
block|}
else|else
block|{
name|otherNodes
operator|.
name|add
argument_list|(
name|conj
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Pair
operator|.
name|of
argument_list|(
name|timeRangeNodes
argument_list|,
name|otherNodes
argument_list|)
return|;
block|}
comment|/* Checks that all conditions are on ref + literal*/
specifier|private
specifier|static
name|boolean
name|validConditions
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|nodes
parameter_list|)
block|{
for|for
control|(
name|RexNode
name|node
range|:
name|nodes
control|)
block|{
try|try
block|{
name|node
operator|.
name|accept
argument_list|(
operator|new
name|RexVisitorImpl
argument_list|<
name|Void
argument_list|>
argument_list|(
literal|true
argument_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"incomplete-switch"
argument_list|)
annotation|@
name|Override
specifier|public
name|Void
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
switch|switch
condition|(
name|call
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|CAST
case|:
comment|// Only if on top of ref or literal
if|if
condition|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|RexInputRef
operator|||
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|RexLiteral
condition|)
block|{
break|break;
block|}
comment|// Not supported
throw|throw
name|Util
operator|.
name|FoundOne
operator|.
name|NULL
throw|;
case|case
name|EQUALS
case|:
case|case
name|LESS_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
comment|// Check cast
name|RexNode
name|left
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|left
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|CAST
condition|)
block|{
name|left
operator|=
operator|(
operator|(
name|RexCall
operator|)
name|left
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|RexNode
name|right
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|right
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|CAST
condition|)
block|{
name|right
operator|=
operator|(
operator|(
name|RexCall
operator|)
name|right
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|left
operator|instanceof
name|RexInputRef
operator|&&
name|right
operator|instanceof
name|RexLiteral
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|right
operator|instanceof
name|RexInputRef
operator|&&
name|left
operator|instanceof
name|RexLiteral
condition|)
block|{
break|break;
block|}
comment|// Not supported if it is not ref + literal
throw|throw
name|Util
operator|.
name|FoundOne
operator|.
name|NULL
throw|;
case|case
name|BETWEEN
case|:
case|case
name|IN
case|:
comment|// Not supported here yet
throw|throw
name|Util
operator|.
name|FoundOne
operator|.
name|NULL
throw|;
block|}
return|return
name|super
operator|.
name|visitCall
argument_list|(
name|call
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Util
operator|.
name|FoundOne
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Rule to push a {@link org.apache.calcite.rel.core.Project} into a {@link DruidQuery}.    */
specifier|private
specifier|static
class|class
name|DruidProjectRule
extends|extends
name|RelOptRule
block|{
specifier|private
name|DruidProjectRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|Project
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|DruidQuery
operator|.
name|class
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Project
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|DruidQuery
name|query
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|DruidQuery
operator|.
name|isValidSignature
argument_list|(
name|query
operator|.
name|signature
argument_list|()
operator|+
literal|'p'
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|canProjectAll
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
argument_list|)
condition|)
block|{
comment|// All expressions can be pushed to Druid in their entirety.
specifier|final
name|RelNode
name|newProject
init|=
name|project
operator|.
name|copy
argument_list|(
name|project
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|query
operator|.
name|rels
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|RelNode
name|newNode
init|=
name|DruidQuery
operator|.
name|extendQuery
argument_list|(
name|query
argument_list|,
name|newProject
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|Pair
argument_list|<
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|>
name|pair
init|=
name|splitProjects
argument_list|(
name|project
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
argument_list|,
name|query
argument_list|,
name|project
operator|.
name|getProjects
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|==
literal|null
condition|)
block|{
comment|// We can't push anything useful to Druid.
return|return;
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|above
init|=
name|pair
operator|.
name|left
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|below
init|=
name|pair
operator|.
name|right
decl_stmt|;
specifier|final
name|RelDataTypeFactory
operator|.
name|FieldInfoBuilder
name|builder
init|=
name|project
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|input
init|=
name|Util
operator|.
name|last
argument_list|(
name|query
operator|.
name|rels
argument_list|)
decl_stmt|;
for|for
control|(
name|RexNode
name|e
range|:
name|below
control|)
block|{
specifier|final
name|String
name|name
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|RexInputRef
condition|)
block|{
name|name
operator|=
name|input
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
operator|.
name|get
argument_list|(
operator|(
operator|(
name|RexInputRef
operator|)
name|e
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
literal|null
expr_stmt|;
block|}
name|builder
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|e
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RelNode
name|newProject
init|=
name|project
operator|.
name|copy
argument_list|(
name|project
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|input
argument_list|,
name|below
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|DruidQuery
name|newQuery
init|=
name|DruidQuery
operator|.
name|extendQuery
argument_list|(
name|query
argument_list|,
name|newProject
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|newProject2
init|=
name|project
operator|.
name|copy
argument_list|(
name|project
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|newQuery
argument_list|,
name|above
argument_list|,
name|project
operator|.
name|getRowType
argument_list|()
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newProject2
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|canProjectAll
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|nodes
parameter_list|)
block|{
for|for
control|(
name|RexNode
name|e
range|:
name|nodes
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|e
operator|instanceof
name|RexInputRef
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|Pair
argument_list|<
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|>
name|splitProjects
parameter_list|(
specifier|final
name|RexBuilder
name|rexBuilder
parameter_list|,
specifier|final
name|RelNode
name|input
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|nodes
parameter_list|)
block|{
specifier|final
name|RelOptUtil
operator|.
name|InputReferencedVisitor
name|visitor
init|=
operator|new
name|RelOptUtil
operator|.
name|InputReferencedVisitor
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|node
range|:
name|nodes
control|)
block|{
name|node
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|visitor
operator|.
name|inputPosReferenced
operator|.
name|size
argument_list|()
operator|==
name|input
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
condition|)
block|{
comment|// All inputs are referenced
return|return
literal|null
return|;
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|belowNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataType
argument_list|>
name|belowTypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|positions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|visitor
operator|.
name|inputPosReferenced
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|positions
control|)
block|{
specifier|final
name|RexNode
name|node
init|=
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|input
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|belowNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|belowTypes
operator|.
name|add
argument_list|(
name|node
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|aboveNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|node
range|:
name|nodes
control|)
block|{
name|aboveNodes
operator|.
name|add
argument_list|(
name|node
operator|.
name|accept
argument_list|(
operator|new
name|RexShuttle
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RexNode
name|visitInputRef
parameter_list|(
name|RexInputRef
name|ref
parameter_list|)
block|{
specifier|final
name|int
name|index
init|=
name|positions
operator|.
name|indexOf
argument_list|(
name|ref
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|belowTypes
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
name|index
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Pair
operator|.
name|of
argument_list|(
name|aboveNodes
argument_list|,
name|belowNodes
argument_list|)
return|;
block|}
block|}
comment|/**    * Rule to push an {@link org.apache.calcite.rel.core.Aggregate} into a {@link DruidQuery}.    */
specifier|private
specifier|static
class|class
name|DruidAggregateRule
extends|extends
name|RelOptRule
block|{
specifier|private
name|DruidAggregateRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|Aggregate
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|DruidQuery
operator|.
name|class
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Aggregate
name|aggregate
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|DruidQuery
name|query
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|DruidQuery
operator|.
name|isValidSignature
argument_list|(
name|query
operator|.
name|signature
argument_list|()
operator|+
literal|'a'
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|aggregate
operator|.
name|indicator
operator|||
name|aggregate
operator|.
name|getGroupSets
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
name|Iterables
operator|.
name|any
argument_list|(
name|aggregate
operator|.
name|getAggCallList
argument_list|()
argument_list|,
name|BAD_AGG
argument_list|)
operator|||
operator|!
name|validAggregate
argument_list|(
name|aggregate
argument_list|,
name|query
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|RelNode
name|newAggregate
init|=
name|aggregate
operator|.
name|copy
argument_list|(
name|aggregate
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|query
operator|.
name|rels
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|DruidQuery
operator|.
name|extendQuery
argument_list|(
name|query
argument_list|,
name|newAggregate
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* Check whether agg functions reference timestamp */
specifier|private
specifier|static
name|boolean
name|validAggregate
parameter_list|(
name|Aggregate
name|aggregate
parameter_list|,
name|DruidQuery
name|query
parameter_list|)
block|{
name|ImmutableBitSet
operator|.
name|Builder
name|builder
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggregate
operator|.
name|getAggCallList
argument_list|()
control|)
block|{
name|builder
operator|.
name|addAll
argument_list|(
name|aggCall
operator|.
name|getArgList
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|checkTimestampRefOnQuery
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|query
operator|.
name|getTopNode
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Rule to push an {@link org.apache.calcite.rel.core.Aggregate} and    * {@link org.apache.calcite.rel.core.Project} into a {@link DruidQuery}.    */
specifier|private
specifier|static
class|class
name|DruidProjectAggregateRule
extends|extends
name|RelOptRule
block|{
specifier|private
name|DruidProjectAggregateRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|Aggregate
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|Project
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|DruidQuery
operator|.
name|class
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Aggregate
name|aggregate
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Project
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|DruidQuery
name|query
init|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|DruidQuery
operator|.
name|isValidSignature
argument_list|(
name|query
operator|.
name|signature
argument_list|()
operator|+
literal|'p'
operator|+
literal|'a'
argument_list|)
condition|)
block|{
return|return;
block|}
name|int
name|timestampIdx
decl_stmt|;
if|if
condition|(
operator|(
name|timestampIdx
operator|=
name|validProject
argument_list|(
name|project
argument_list|,
name|query
argument_list|)
operator|)
operator|==
operator|-
literal|1
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|aggregate
operator|.
name|indicator
operator|||
name|aggregate
operator|.
name|getGroupSets
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
name|Iterables
operator|.
name|any
argument_list|(
name|aggregate
operator|.
name|getAggCallList
argument_list|()
argument_list|,
name|BAD_AGG
argument_list|)
operator|||
operator|!
name|validAggregate
argument_list|(
name|aggregate
argument_list|,
name|timestampIdx
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|RelNode
name|newProject
init|=
name|project
operator|.
name|copy
argument_list|(
name|project
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|query
operator|.
name|rels
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|DruidQuery
name|projectDruidQuery
init|=
name|DruidQuery
operator|.
name|extendQuery
argument_list|(
name|query
argument_list|,
name|newProject
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|newAggregate
init|=
name|aggregate
operator|.
name|copy
argument_list|(
name|aggregate
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|projectDruidQuery
operator|.
name|rels
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|DruidQuery
operator|.
name|extendQuery
argument_list|(
name|projectDruidQuery
argument_list|,
name|newAggregate
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* To be a valid Project, we allow it to contain references, and a single call      * to an EXTRACT function on the timestamp column. Returns the reference to      * the timestamp, if any. */
specifier|private
specifier|static
name|int
name|validProject
parameter_list|(
name|Project
name|project
parameter_list|,
name|DruidQuery
name|query
parameter_list|)
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|nodes
init|=
name|project
operator|.
name|getProjects
argument_list|()
decl_stmt|;
name|int
name|idxTimestamp
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|RexNode
name|e
init|=
name|nodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|RexCall
condition|)
block|{
comment|// It is a call, check that it is EXTRACT and follow-up conditions
specifier|final
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|e
decl_stmt|;
if|if
condition|(
operator|!
name|HiveDateGranularity
operator|.
name|ALL_FUNCTIONS
operator|.
name|contains
argument_list|(
name|call
operator|.
name|getOperator
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|idxTimestamp
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Already one usage of timestamp column
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|RexInputRef
operator|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
specifier|final
name|RexInputRef
name|ref
init|=
operator|(
name|RexInputRef
operator|)
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|checkTimestampRefOnQuery
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|ref
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|,
name|query
operator|.
name|getTopNode
argument_list|()
argument_list|)
operator|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|idxTimestamp
operator|=
name|i
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
operator|(
name|e
operator|instanceof
name|RexInputRef
operator|)
condition|)
block|{
comment|// It needs to be a reference
return|return
operator|-
literal|1
return|;
block|}
specifier|final
name|RexInputRef
name|ref
init|=
operator|(
name|RexInputRef
operator|)
name|e
decl_stmt|;
if|if
condition|(
name|checkTimestampRefOnQuery
argument_list|(
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|ref
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|,
name|query
operator|.
name|getTopNode
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|idxTimestamp
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Already one usage of timestamp column
return|return
operator|-
literal|1
return|;
block|}
name|idxTimestamp
operator|=
name|i
expr_stmt|;
block|}
block|}
return|return
name|idxTimestamp
return|;
block|}
specifier|private
specifier|static
name|boolean
name|validAggregate
parameter_list|(
name|Aggregate
name|aggregate
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
if|if
condition|(
operator|!
name|aggregate
operator|.
name|getGroupSet
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|AggregateCall
name|aggCall
range|:
name|aggregate
operator|.
name|getAggCallList
argument_list|()
control|)
block|{
if|if
condition|(
name|aggCall
operator|.
name|getArgList
argument_list|()
operator|.
name|contains
argument_list|(
name|idx
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Rule to push an {@link org.apache.calcite.rel.core.Sort} through a    * {@link org.apache.calcite.rel.core.Project}. Useful to transform    * to complex Druid queries.    */
specifier|private
specifier|static
class|class
name|DruidProjectSortRule
extends|extends
name|HiveSortProjectTransposeRule
block|{
specifier|private
name|DruidProjectSortRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|Sort
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|Project
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|DruidQuery
operator|.
name|class
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Rule to push back {@link org.apache.calcite.rel.core.Project} through a    * {@link org.apache.calcite.rel.core.Sort}. Useful if after pushing Sort,    * we could not push it inside DruidQuery.    */
specifier|private
specifier|static
class|class
name|DruidSortProjectRule
extends|extends
name|HiveProjectSortTransposeRule
block|{
specifier|private
name|DruidSortProjectRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|Project
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|Sort
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|DruidQuery
operator|.
name|class
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Rule to push an {@link org.apache.calcite.rel.core.Aggregate} into a {@link DruidQuery}.    */
specifier|private
specifier|static
class|class
name|DruidSortRule
extends|extends
name|RelOptRule
block|{
specifier|private
name|DruidSortRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|Sort
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|DruidQuery
operator|.
name|class
argument_list|,
name|none
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|DruidQuery
name|query
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|DruidQuery
operator|.
name|isValidSignature
argument_list|(
name|query
operator|.
name|signature
argument_list|()
operator|+
literal|'l'
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Either it is:
comment|// - a sort without limit on the time column on top of
comment|//     Agg operator (transformable to timeseries query), or
comment|// - it is a sort w/o limit on columns that do not include
comment|//     the time column on top of Agg operator, or
comment|// - a simple limit on top of other operator than Agg
if|if
condition|(
operator|!
name|validSortLimit
argument_list|(
name|sort
argument_list|,
name|query
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|RelNode
name|newSort
init|=
name|sort
operator|.
name|copy
argument_list|(
name|sort
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|query
operator|.
name|rels
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|DruidQuery
operator|.
name|extendQuery
argument_list|(
name|query
argument_list|,
name|newSort
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* Check sort valid */
specifier|private
specifier|static
name|boolean
name|validSortLimit
parameter_list|(
name|Sort
name|sort
parameter_list|,
name|DruidQuery
name|query
parameter_list|)
block|{
if|if
condition|(
name|sort
operator|.
name|offset
operator|!=
literal|null
operator|&&
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|sort
operator|.
name|offset
argument_list|)
operator|!=
literal|0
condition|)
block|{
comment|// offset not supported by Druid
return|return
literal|false
return|;
block|}
if|if
condition|(
name|query
operator|.
name|getTopNode
argument_list|()
operator|instanceof
name|Aggregate
condition|)
block|{
specifier|final
name|Aggregate
name|topAgg
init|=
operator|(
name|Aggregate
operator|)
name|query
operator|.
name|getTopNode
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableBitSet
operator|.
name|Builder
name|positionsReferenced
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|int
name|metricsRefs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RelFieldCollation
name|col
range|:
name|sort
operator|.
name|collation
operator|.
name|getFieldCollations
argument_list|()
control|)
block|{
name|int
name|idx
init|=
name|col
operator|.
name|getFieldIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
name|topAgg
operator|.
name|getGroupCount
argument_list|()
condition|)
block|{
name|metricsRefs
operator|++
expr_stmt|;
continue|continue;
block|}
name|positionsReferenced
operator|.
name|set
argument_list|(
name|topAgg
operator|.
name|getGroupSet
argument_list|()
operator|.
name|nth
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|refsTimestamp
init|=
name|checkTimestampRefOnQuery
argument_list|(
name|positionsReferenced
operator|.
name|build
argument_list|()
argument_list|,
name|topAgg
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|refsTimestamp
operator|&&
name|metricsRefs
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|// If it is going to be a Druid select operator, we push the limit iff
comment|// 1) it does not contain a sort specification (required by Druid) and
comment|// 2) limit is smaller than select threshold, as otherwise it might be
comment|//   better to obtain some parallelization and let global limit
comment|//   optimizer kick in
name|HiveDruidConf
name|conf
init|=
name|sort
operator|.
name|getCluster
argument_list|()
operator|.
name|getPlanner
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|unwrap
argument_list|(
name|HiveDruidConf
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|HiveCalciteUtil
operator|.
name|pureLimitRelNode
argument_list|(
name|sort
argument_list|)
operator|&&
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|sort
operator|.
name|fetch
argument_list|)
operator|<=
name|conf
operator|.
name|getSelectThreshold
argument_list|()
return|;
block|}
block|}
comment|/* Check if any of the references leads to the timestamp column */
specifier|private
specifier|static
name|boolean
name|checkTimestampRefOnQuery
parameter_list|(
name|ImmutableBitSet
name|set
parameter_list|,
name|RelNode
name|top
parameter_list|)
block|{
if|if
condition|(
name|top
operator|instanceof
name|Project
condition|)
block|{
name|ImmutableBitSet
operator|.
name|Builder
name|newSet
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|Project
name|project
init|=
operator|(
name|Project
operator|)
name|top
decl_stmt|;
for|for
control|(
name|int
name|index
range|:
name|set
control|)
block|{
name|RexNode
name|node
init|=
name|project
operator|.
name|getProjects
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|RexInputRef
condition|)
block|{
name|newSet
operator|.
name|set
argument_list|(
operator|(
operator|(
name|RexInputRef
operator|)
name|node
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|RexCall
condition|)
block|{
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|node
decl_stmt|;
assert|assert
name|HiveDateGranularity
operator|.
name|ALL_FUNCTIONS
operator|.
name|contains
argument_list|(
name|call
operator|.
name|getOperator
argument_list|()
argument_list|)
assert|;
name|newSet
operator|.
name|set
argument_list|(
operator|(
operator|(
name|RexInputRef
operator|)
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|top
operator|=
name|project
operator|.
name|getInput
argument_list|()
expr_stmt|;
name|set
operator|=
name|newSet
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|// Check if any references the timestamp column
for|for
control|(
name|int
name|index
range|:
name|set
control|)
block|{
if|if
condition|(
name|DruidTable
operator|.
name|DEFAULT_TIMESTAMP_COLUMN
operator|.
name|equals
argument_list|(
name|top
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

begin_comment
comment|// End DruidRules.java
end_comment

end_unit

