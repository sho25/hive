begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ArchiveUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ArchiveUtils
operator|.
name|PartSpecInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HdfsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|storage
operator|.
name|AlterTableArchiveUtils
operator|.
name|ARCHIVE_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_comment
comment|/**  * Operation process of truncating a table.  */
end_comment

begin_class
specifier|public
class|class
name|AlterTableUnarchiveOperation
extends|extends
name|DDLOperation
argument_list|<
name|AlterTableUnarchiveDesc
argument_list|>
block|{
specifier|public
name|AlterTableUnarchiveOperation
parameter_list|(
name|DDLOperationContext
name|context
parameter_list|,
name|AlterTableUnarchiveDesc
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|()
throws|throws
name|HiveException
throws|,
name|URISyntaxException
block|{
name|Table
name|table
init|=
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|getTable
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|.
name|getTableType
argument_list|()
operator|!=
name|TableType
operator|.
name|MANAGED_TABLE
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"UNARCHIVE can only be performed on managed tables"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
init|=
name|desc
operator|.
name|getPartitionSpec
argument_list|()
decl_stmt|;
if|if
condition|(
name|partitionSpec
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"UNARCHIVE is for partitions only"
argument_list|)
throw|;
block|}
name|PartSpecInfo
name|partitionSpecInfo
init|=
name|PartSpecInfo
operator|.
name|create
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|getPartitions
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|)
decl_stmt|;
comment|// The originalDir directory represents the original directory of the partitions' files. They now contain an
comment|// archived version of those files eg. hdfs:/warehouse/myTable/ds=1/
name|Path
name|originalDir
init|=
name|getOriginalDir
argument_list|(
name|table
argument_list|,
name|partitionSpecInfo
argument_list|,
name|partitions
argument_list|)
decl_stmt|;
name|Path
name|intermediateArchivedDir
init|=
name|AlterTableArchiveUtils
operator|.
name|getInterMediateDir
argument_list|(
name|originalDir
argument_list|,
name|context
operator|.
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|METASTORE_INT_ARCHIVED
argument_list|)
decl_stmt|;
name|Path
name|intermediateExtractedDir
init|=
name|AlterTableArchiveUtils
operator|.
name|getInterMediateDir
argument_list|(
name|originalDir
argument_list|,
name|context
operator|.
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|METASTORE_INT_EXTRACTED
argument_list|)
decl_stmt|;
name|boolean
name|recovery
init|=
name|isRecovery
argument_list|(
name|intermediateArchivedDir
argument_list|,
name|intermediateExtractedDir
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
name|checkArchiveProperty
argument_list|(
name|partitionSpec
operator|.
name|size
argument_list|()
argument_list|,
name|recovery
argument_list|,
name|partition
argument_list|)
expr_stmt|;
block|}
comment|// assume the archive is in the original dir, check if it exists
comment|// The source directory is the directory containing all the files that should be in the partitions.
comment|// e.g. har:/warehouse/myTable/ds=1/myTable.har/ - Note the har:/ scheme
name|Path
name|archivePath
init|=
operator|new
name|Path
argument_list|(
name|originalDir
argument_list|,
name|ARCHIVE_NAME
argument_list|)
decl_stmt|;
name|URI
name|archiveUri
init|=
name|archivePath
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|URI
name|originalUri
init|=
name|ArchiveUtils
operator|.
name|addSlash
argument_list|(
name|originalDir
operator|.
name|toUri
argument_list|()
argument_list|)
decl_stmt|;
name|ArchiveUtils
operator|.
name|HarPathHelper
name|harHelper
init|=
operator|new
name|ArchiveUtils
operator|.
name|HarPathHelper
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|,
name|archiveUri
argument_list|,
name|originalUri
argument_list|)
decl_stmt|;
name|URI
name|sourceUri
init|=
name|harHelper
operator|.
name|getHarUri
argument_list|(
name|originalUri
argument_list|)
decl_stmt|;
name|Path
name|sourceDir
init|=
operator|new
name|Path
argument_list|(
name|sourceUri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|sourceUri
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|sourceUri
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|HdfsUtils
operator|.
name|pathExists
argument_list|(
name|intermediateArchivedDir
argument_list|,
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
operator|&&
operator|!
name|HdfsUtils
operator|.
name|pathExists
argument_list|(
name|archivePath
argument_list|,
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Haven't found any archive where it should be"
argument_list|)
throw|;
block|}
name|Path
name|tmpPath
init|=
name|context
operator|.
name|getContext
argument_list|()
operator|.
name|getExternalTmpPath
argument_list|(
name|originalDir
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fs
operator|=
name|tmpPath
operator|.
name|getFileSystem
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|recovery
condition|)
block|{
name|extractArchiveToIntermediateDir
argument_list|(
name|intermediateExtractedDir
argument_list|,
name|sourceDir
argument_list|,
name|tmpPath
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
comment|// At this point, we know that the extracted files are in the intermediate extracted dir, or in the the original dir
name|moveOriginalDirToIntermediateDir
argument_list|(
name|originalDir
argument_list|,
name|intermediateArchivedDir
argument_list|,
name|fs
argument_list|)
expr_stmt|;
comment|// If there is a failure from here to until when the metadata is changed, the partition will be empty or throw
comment|// errors on read. If the original location exists here, then it must be the extracted files because in the previous
comment|// step, we moved the previous original location (containing the archived files) to intermediateArchiveDir
name|moveIntermediateExtractedDirToOriginalParent
argument_list|(
name|originalDir
argument_list|,
name|intermediateExtractedDir
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|writeUnarchivationToMetastore
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
comment|// If a failure happens here, the intermediate archive files won't be
comment|// deleted. The user will need to call unarchive again to clear those up.
name|deleteIntermediateArchivedDir
argument_list|(
name|table
argument_list|,
name|intermediateArchivedDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|recovery
condition|)
block|{
name|context
operator|.
name|getConsole
argument_list|()
operator|.
name|printInfo
argument_list|(
literal|"Recovery after UNARCHIVE succeeded"
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|Path
name|getOriginalDir
parameter_list|(
name|Table
name|table
parameter_list|,
name|PartSpecInfo
name|partitionSpecInfo
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|)
throws|throws
name|HiveException
block|{
name|Path
name|originalDir
init|=
literal|null
decl_stmt|;
comment|// when we have partial partitions specification we must assume partitions
comment|// lie in standard place - if they were in custom locations putting
comment|// them into one archive would involve mass amount of copying
comment|// in full partition specification case we allow custom locations
comment|// to keep backward compatibility
if|if
condition|(
name|partitions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"No partition matches the specification"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|partitionSpecInfo
operator|.
name|values
operator|.
name|size
argument_list|()
operator|!=
name|table
operator|.
name|getPartCols
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// for partial specifications we need partitions to follow the scheme
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
if|if
condition|(
name|AlterTableArchiveUtils
operator|.
name|partitionInCustomLocation
argument_list|(
name|table
argument_list|,
name|partition
argument_list|)
condition|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"UNARCHIVE cannot run for partition groups with custom locations like %s"
argument_list|,
name|partition
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
name|originalDir
operator|=
name|partitionSpecInfo
operator|.
name|createPath
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Partition
name|partition
init|=
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|ArchiveUtils
operator|.
name|isArchived
argument_list|(
name|partition
argument_list|)
condition|)
block|{
name|originalDir
operator|=
operator|new
name|Path
argument_list|(
name|AlterTableArchiveUtils
operator|.
name|getOriginalLocation
argument_list|(
name|partition
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|originalDir
operator|=
operator|new
name|Path
argument_list|(
name|partition
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|originalDir
return|;
block|}
specifier|private
name|boolean
name|isRecovery
parameter_list|(
name|Path
name|intermediateArchivedDir
parameter_list|,
name|Path
name|intermediateExtractedDir
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|HdfsUtils
operator|.
name|pathExists
argument_list|(
name|intermediateArchivedDir
argument_list|,
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
operator|||
name|HdfsUtils
operator|.
name|pathExists
argument_list|(
name|intermediateExtractedDir
argument_list|,
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
condition|)
block|{
name|context
operator|.
name|getConsole
argument_list|()
operator|.
name|printInfo
argument_list|(
literal|"Starting recovery after failed UNARCHIVE"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|checkArchiveProperty
parameter_list|(
name|int
name|partitionSpecLevel
parameter_list|,
name|boolean
name|recovery
parameter_list|,
name|Partition
name|partition
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|ArchiveUtils
operator|.
name|isArchived
argument_list|(
name|partition
argument_list|)
operator|&&
operator|!
name|recovery
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Partition "
operator|+
name|partition
operator|.
name|getName
argument_list|()
operator|+
literal|" is not archived."
argument_list|)
throw|;
block|}
name|int
name|archiveLevel
init|=
name|ArchiveUtils
operator|.
name|getArchivingLevel
argument_list|(
name|partition
argument_list|)
decl_stmt|;
if|if
condition|(
name|partitionSpecLevel
operator|>
name|archiveLevel
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Partition "
operator|+
name|partition
operator|.
name|getName
argument_list|()
operator|+
literal|" is archived at level "
operator|+
name|archiveLevel
operator|+
literal|", and given partspec only has "
operator|+
name|partitionSpecLevel
operator|+
literal|" specs."
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|extractArchiveToIntermediateDir
parameter_list|(
name|Path
name|intermediateExtractedDir
parameter_list|,
name|Path
name|sourceDir
parameter_list|,
name|Path
name|tmpPath
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
comment|// Copy the files out of the archive into the temporary directory
name|String
name|copySource
init|=
name|sourceDir
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|copyDest
init|=
name|tmpPath
operator|.
name|toString
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"-cp"
argument_list|,
name|copySource
argument_list|,
name|copyDest
argument_list|)
decl_stmt|;
name|context
operator|.
name|getConsole
argument_list|()
operator|.
name|printInfo
argument_list|(
literal|"Copying "
operator|+
name|copySource
operator|+
literal|" to "
operator|+
name|copyDest
argument_list|)
expr_stmt|;
name|FileSystem
name|srcFs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|sourceDir
operator|.
name|toUri
argument_list|()
argument_list|,
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|srcFs
operator|.
name|initialize
argument_list|(
name|sourceDir
operator|.
name|toUri
argument_list|()
argument_list|,
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|FsShell
name|fss
init|=
operator|new
name|FsShell
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|fss
argument_list|,
name|args
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Error while copying files from archive, return code="
operator|+
name|ret
argument_list|)
throw|;
block|}
else|else
block|{
name|context
operator|.
name|getConsole
argument_list|()
operator|.
name|printInfo
argument_list|(
literal|"Successfully Copied "
operator|+
name|copySource
operator|+
literal|" to "
operator|+
name|copyDest
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|getConsole
argument_list|()
operator|.
name|printInfo
argument_list|(
literal|"Moving "
operator|+
name|tmpPath
operator|+
literal|" to "
operator|+
name|intermediateExtractedDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|intermediateExtractedDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Invalid state: the intermediate extracted  directory already exists."
argument_list|)
throw|;
block|}
name|fs
operator|.
name|rename
argument_list|(
name|tmpPath
argument_list|,
name|intermediateExtractedDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|moveOriginalDirToIntermediateDir
parameter_list|(
name|Path
name|originalDir
parameter_list|,
name|Path
name|intermediateArchivedDir
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|HdfsUtils
operator|.
name|pathExists
argument_list|(
name|intermediateArchivedDir
argument_list|,
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|context
operator|.
name|getConsole
argument_list|()
operator|.
name|printInfo
argument_list|(
literal|"Moving "
operator|+
name|originalDir
operator|+
literal|" to "
operator|+
name|intermediateArchivedDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|originalDir
argument_list|,
name|intermediateArchivedDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|context
operator|.
name|getConsole
argument_list|()
operator|.
name|printInfo
argument_list|(
name|intermediateArchivedDir
operator|+
literal|" already exists. "
operator|+
literal|"Assuming it contains the archived version of the partition"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|moveIntermediateExtractedDirToOriginalParent
parameter_list|(
name|Path
name|originalDir
parameter_list|,
name|Path
name|intermediateExtractedDir
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|HdfsUtils
operator|.
name|pathExists
argument_list|(
name|originalDir
argument_list|,
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|context
operator|.
name|getConsole
argument_list|()
operator|.
name|printInfo
argument_list|(
literal|"Moving "
operator|+
name|intermediateExtractedDir
operator|+
literal|" to "
operator|+
name|originalDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|intermediateExtractedDir
argument_list|,
name|originalDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|context
operator|.
name|getConsole
argument_list|()
operator|.
name|printInfo
argument_list|(
name|originalDir
operator|+
literal|" already exists. "
operator|+
literal|"Assuming it contains the extracted files in the partition"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeUnarchivationToMetastore
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|)
throws|throws
name|HiveException
block|{
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
name|setUnArchived
argument_list|(
name|partition
argument_list|)
expr_stmt|;
try|try
block|{
comment|// TODO: use getDb().alterPartition with catalog name
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|alterPartition
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partition
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Sets the appropriate attributes in the supplied Partition object to mark it as not archived.    * Note that the metastore is not touched - a separate call to alter_partition is needed.    *    * @param partition - the partition to modify    */
specifier|private
name|void
name|setUnArchived
parameter_list|(
name|Partition
name|partition
parameter_list|)
block|{
assert|assert
operator|(
name|ArchiveUtils
operator|.
name|isArchived
argument_list|(
name|partition
argument_list|)
operator|)
assert|;
name|String
name|parentDir
init|=
name|AlterTableArchiveUtils
operator|.
name|getOriginalLocation
argument_list|(
name|partition
argument_list|)
decl_stmt|;
name|AlterTableArchiveUtils
operator|.
name|setIsArchived
argument_list|(
name|partition
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|AlterTableArchiveUtils
operator|.
name|setOriginalLocation
argument_list|(
name|partition
argument_list|,
literal|null
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|parentDir
operator|!=
literal|null
operator|)
assert|;
name|partition
operator|.
name|setLocation
argument_list|(
name|parentDir
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deleteIntermediateArchivedDir
parameter_list|(
name|Table
name|table
parameter_list|,
name|Path
name|intermediateArchivedDir
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|HdfsUtils
operator|.
name|pathExists
argument_list|(
name|intermediateArchivedDir
argument_list|,
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
condition|)
block|{
name|AlterTableArchiveUtils
operator|.
name|deleteDir
argument_list|(
name|intermediateArchivedDir
argument_list|,
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|getDatabase
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|,
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

