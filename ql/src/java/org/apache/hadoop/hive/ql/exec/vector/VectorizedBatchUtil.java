begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ObjectPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalDayTimeWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalYearMonthWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|UnionObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|UnionTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_class
specifier|public
class|class
name|VectorizedBatchUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VectorizedBatchUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Sets the IsNull value for ColumnVector at specified index    * @param cv    * @param rowIndex    */
specifier|public
specifier|static
name|void
name|setNullColIsNullValue
parameter_list|(
name|ColumnVector
name|cv
parameter_list|,
name|int
name|rowIndex
parameter_list|)
block|{
name|cv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|cv
operator|.
name|noNulls
condition|)
block|{
name|cv
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**    * Iterates thru all the column vectors and sets noNull to    * specified value.    *    * @param batch    *          Batch on which noNull is set    */
specifier|public
specifier|static
name|void
name|setNoNullFields
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|numCols
condition|;
name|i
operator|++
control|)
block|{
name|batch
operator|.
name|cols
index|[
name|i
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**    * Iterates thru all the column vectors and sets repeating to    * specified column.    *    */
specifier|public
specifier|static
name|void
name|setRepeatingColumn
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|ColumnVector
name|cv
init|=
name|batch
operator|.
name|cols
index|[
name|column
index|]
decl_stmt|;
name|cv
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Reduce the batch size for a vectorized row batch    */
specifier|public
specifier|static
name|void
name|setBatchSize
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|size
parameter_list|)
block|{
assert|assert
operator|(
name|size
operator|<=
name|batch
operator|.
name|getMaxSize
argument_list|()
operator|)
assert|;
name|batch
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
specifier|public
specifier|static
name|ColumnVector
name|createColumnVector
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
name|typeName
operator|=
name|typeName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
comment|// Allow undecorated CHAR and VARCHAR to support scratch column type names.
if|if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"char"
argument_list|)
operator|||
name|typeName
operator|.
name|equals
argument_list|(
literal|"varchar"
argument_list|)
condition|)
block|{
return|return
operator|new
name|BytesColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
return|;
block|}
name|TypeInfo
name|typeInfo
init|=
operator|(
name|TypeInfo
operator|)
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
return|return
name|createColumnVector
argument_list|(
name|typeInfo
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ColumnVector
name|createColumnVector
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
switch|switch
condition|(
name|typeInfo
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
name|PrimitiveTypeInfo
name|primitiveTypeInfo
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
decl_stmt|;
switch|switch
condition|(
name|primitiveTypeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|DATE
case|:
case|case
name|INTERVAL_YEAR_MONTH
case|:
return|return
operator|new
name|LongColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
return|;
case|case
name|INTERVAL_DAY_TIME
case|:
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|TimestampColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
return|;
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
return|return
operator|new
name|DoubleColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
return|;
case|case
name|BINARY
case|:
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
return|return
operator|new
name|BytesColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
return|;
case|case
name|DECIMAL
case|:
name|DecimalTypeInfo
name|tInfo
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|primitiveTypeInfo
decl_stmt|;
return|return
operator|new
name|DecimalColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|tInfo
operator|.
name|precision
argument_list|()
argument_list|,
name|tInfo
operator|.
name|scale
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Vectorizaton is not supported for datatype:"
operator|+
name|primitiveTypeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
case|case
name|STRUCT
case|:
block|{
name|StructTypeInfo
name|structTypeInfo
init|=
operator|(
name|StructTypeInfo
operator|)
name|typeInfo
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|typeInfoList
init|=
name|structTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
name|ColumnVector
index|[]
name|children
init|=
operator|new
name|ColumnVector
index|[
name|typeInfoList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|children
index|[
name|i
index|]
operator|=
name|createColumnVector
argument_list|(
name|typeInfoList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|StructColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|children
argument_list|)
return|;
block|}
case|case
name|UNION
case|:
block|{
name|UnionTypeInfo
name|unionTypeInfo
init|=
operator|(
name|UnionTypeInfo
operator|)
name|typeInfo
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|typeInfoList
init|=
name|unionTypeInfo
operator|.
name|getAllUnionObjectTypeInfos
argument_list|()
decl_stmt|;
name|ColumnVector
index|[]
name|children
init|=
operator|new
name|ColumnVector
index|[
name|typeInfoList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|children
index|[
name|i
index|]
operator|=
name|createColumnVector
argument_list|(
name|typeInfoList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|UnionColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|children
argument_list|)
return|;
block|}
case|case
name|LIST
case|:
block|{
name|ListTypeInfo
name|listTypeInfo
init|=
operator|(
name|ListTypeInfo
operator|)
name|typeInfo
decl_stmt|;
return|return
operator|new
name|ListColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|createColumnVector
argument_list|(
name|listTypeInfo
operator|.
name|getListElementTypeInfo
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
case|case
name|MAP
case|:
block|{
name|MapTypeInfo
name|mapTypeInfo
init|=
operator|(
name|MapTypeInfo
operator|)
name|typeInfo
decl_stmt|;
return|return
operator|new
name|MapColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|createColumnVector
argument_list|(
name|mapTypeInfo
operator|.
name|getMapKeyTypeInfo
argument_list|()
argument_list|)
argument_list|,
name|createColumnVector
argument_list|(
name|mapTypeInfo
operator|.
name|getMapValueTypeInfo
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Vectorization is not supported for datatype:"
operator|+
name|typeInfo
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Iterates thru all the columns in a given row and populates the batch    * from a given offset    *    * @param row Deserialized row object    * @param oi Object insepector for that row    * @param rowIndex index to which the row should be added to batch    * @param colOffset offset from where the column begins    * @param batch Vectorized batch to which the row is added at rowIndex    * @throws HiveException    */
specifier|public
specifier|static
name|void
name|addRowToBatchFrom
parameter_list|(
name|Object
name|row
parameter_list|,
name|StructObjectInspector
name|oi
parameter_list|,
name|int
name|rowIndex
parameter_list|,
name|int
name|colOffset
parameter_list|,
name|VectorizedRowBatch
name|batch
parameter_list|,
name|DataOutputBuffer
name|buffer
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefs
init|=
name|oi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
specifier|final
name|int
name|off
init|=
name|colOffset
decl_stmt|;
comment|// Iterate thru the cols and load the batch
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldRefs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|setVector
argument_list|(
name|row
argument_list|,
name|oi
argument_list|,
name|fieldRefs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|batch
argument_list|,
name|buffer
argument_list|,
name|rowIndex
argument_list|,
name|i
argument_list|,
name|off
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add only the projected column of a regular row to the specified vectorized row batch    * @param row the regular row    * @param oi object inspector for the row    * @param rowIndex the offset to add in the batch    * @param batch vectorized row batch    * @param buffer data output buffer    * @throws HiveException    */
specifier|public
specifier|static
name|void
name|addProjectedRowToBatchFrom
parameter_list|(
name|Object
name|row
parameter_list|,
name|StructObjectInspector
name|oi
parameter_list|,
name|int
name|rowIndex
parameter_list|,
name|VectorizedRowBatch
name|batch
parameter_list|,
name|DataOutputBuffer
name|buffer
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefs
init|=
name|oi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldRefs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|projectedOutputCol
init|=
name|batch
operator|.
name|projectedColumns
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|batch
operator|.
name|cols
index|[
name|projectedOutputCol
index|]
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|setVector
argument_list|(
name|row
argument_list|,
name|oi
argument_list|,
name|fieldRefs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|batch
argument_list|,
name|buffer
argument_list|,
name|rowIndex
argument_list|,
name|projectedOutputCol
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Iterates thru all the columns in a given row and populates the batch    * from a given offset    *    * @param row Deserialized row object    * @param oi Object insepector for that row    * @param rowIndex index to which the row should be added to batch    * @param batch Vectorized batch to which the row is added at rowIndex    * @param context context object for this vectorized batch    * @param buffer    * @throws HiveException    */
specifier|public
specifier|static
name|void
name|acidAddRowToBatch
parameter_list|(
name|Object
name|row
parameter_list|,
name|StructObjectInspector
name|oi
parameter_list|,
name|int
name|rowIndex
parameter_list|,
name|VectorizedRowBatch
name|batch
parameter_list|,
name|VectorizedRowBatchCtx
name|context
parameter_list|,
name|DataOutputBuffer
name|buffer
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefs
init|=
name|oi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
comment|// Iterate thru the cols and load the batch
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldRefs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|batch
operator|.
name|cols
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
comment|// This means the column was not included in the projection from the underlying read
continue|continue;
block|}
if|if
condition|(
name|context
operator|.
name|isPartitionCol
argument_list|(
name|i
argument_list|)
condition|)
block|{
comment|// The value will have already been set before we're called, so don't overwrite it
continue|continue;
block|}
name|setVector
argument_list|(
name|row
argument_list|,
name|oi
argument_list|,
name|fieldRefs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|batch
argument_list|,
name|buffer
argument_list|,
name|rowIndex
argument_list|,
name|i
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|setVector
parameter_list|(
name|Object
name|row
parameter_list|,
name|StructObjectInspector
name|oi
parameter_list|,
name|StructField
name|field
parameter_list|,
name|VectorizedRowBatch
name|batch
parameter_list|,
name|DataOutputBuffer
name|buffer
parameter_list|,
name|int
name|rowIndex
parameter_list|,
name|int
name|colIndex
parameter_list|,
name|int
name|offset
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|fieldData
init|=
name|oi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|ObjectInspector
name|foi
init|=
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
comment|// Vectorization only supports PRIMITIVE data types. Assert the same
assert|assert
operator|(
name|foi
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|PRIMITIVE
operator|)
assert|;
comment|// Get writable object
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|foi
decl_stmt|;
name|Object
name|writableCol
init|=
name|poi
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|fieldData
argument_list|)
decl_stmt|;
comment|// NOTE: The default value for null fields in vectorization is 1 for int types, NaN for
comment|// float/double. String types have no default value for null.
switch|switch
condition|(
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
operator|(
operator|(
name|BooleanWritable
operator|)
name|writableCol
operator|)
operator|.
name|get
argument_list|()
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|lcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
literal|1
expr_stmt|;
name|setNullColIsNullValue
argument_list|(
name|lcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|BYTE
case|:
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
operator|(
operator|(
name|ByteWritable
operator|)
name|writableCol
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|lcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
literal|1
expr_stmt|;
name|setNullColIsNullValue
argument_list|(
name|lcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|SHORT
case|:
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
operator|(
operator|(
name|ShortWritable
operator|)
name|writableCol
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|lcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
literal|1
expr_stmt|;
name|setNullColIsNullValue
argument_list|(
name|lcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|INT
case|:
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
operator|(
operator|(
name|IntWritable
operator|)
name|writableCol
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|lcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
literal|1
expr_stmt|;
name|setNullColIsNullValue
argument_list|(
name|lcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|LONG
case|:
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
operator|(
operator|(
name|LongWritable
operator|)
name|writableCol
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|lcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
literal|1
expr_stmt|;
name|setNullColIsNullValue
argument_list|(
name|lcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DATE
case|:
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
operator|(
operator|(
name|DateWritable
operator|)
name|writableCol
operator|)
operator|.
name|getDays
argument_list|()
expr_stmt|;
name|lcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
literal|1
expr_stmt|;
name|setNullColIsNullValue
argument_list|(
name|lcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|FLOAT
case|:
block|{
name|DoubleColumnVector
name|dcv
init|=
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|dcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
operator|(
operator|(
name|FloatWritable
operator|)
name|writableCol
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|dcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|dcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
name|setNullColIsNullValue
argument_list|(
name|dcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DOUBLE
case|:
block|{
name|DoubleColumnVector
name|dcv
init|=
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|dcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
operator|(
operator|(
name|DoubleWritable
operator|)
name|writableCol
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|dcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|dcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
name|setNullColIsNullValue
argument_list|(
name|dcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|TIMESTAMP
case|:
block|{
name|TimestampColumnVector
name|lcv
init|=
operator|(
name|TimestampColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|lcv
operator|.
name|set
argument_list|(
name|rowIndex
argument_list|,
operator|(
operator|(
name|TimestampWritable
operator|)
name|writableCol
operator|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|lcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|lcv
operator|.
name|setNullValue
argument_list|(
name|rowIndex
argument_list|)
expr_stmt|;
name|setNullColIsNullValue
argument_list|(
name|lcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|HiveIntervalYearMonth
name|i
init|=
operator|(
operator|(
name|HiveIntervalYearMonthWritable
operator|)
name|writableCol
operator|)
operator|.
name|getHiveIntervalYearMonth
argument_list|()
decl_stmt|;
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
name|i
operator|.
name|getTotalMonths
argument_list|()
expr_stmt|;
name|lcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
literal|1
expr_stmt|;
name|setNullColIsNullValue
argument_list|(
name|lcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|HiveIntervalDayTime
name|i
init|=
operator|(
operator|(
name|HiveIntervalDayTimeWritable
operator|)
name|writableCol
operator|)
operator|.
name|getHiveIntervalDayTime
argument_list|()
decl_stmt|;
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
name|DateUtils
operator|.
name|getIntervalDayTimeTotalNanos
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|lcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
literal|1
expr_stmt|;
name|setNullColIsNullValue
argument_list|(
name|lcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|BINARY
case|:
block|{
name|BytesColumnVector
name|bcv
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|bcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
name|BytesWritable
name|bw
init|=
operator|(
name|BytesWritable
operator|)
name|writableCol
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|bw
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|int
name|start
init|=
name|buffer
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|bw
operator|.
name|getLength
argument_list|()
decl_stmt|;
try|try
block|{
name|buffer
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"bad write"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
name|bcv
operator|.
name|setRef
argument_list|(
name|rowIndex
argument_list|,
name|buffer
operator|.
name|getData
argument_list|()
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setNullColIsNullValue
argument_list|(
name|bcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|STRING
case|:
block|{
name|BytesColumnVector
name|bcv
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|bcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
name|Text
name|colText
init|=
operator|(
name|Text
operator|)
name|writableCol
decl_stmt|;
name|int
name|start
init|=
name|buffer
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|colText
operator|.
name|getLength
argument_list|()
decl_stmt|;
try|try
block|{
name|buffer
operator|.
name|write
argument_list|(
name|colText
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"bad write"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
name|bcv
operator|.
name|setRef
argument_list|(
name|rowIndex
argument_list|,
name|buffer
operator|.
name|getData
argument_list|()
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setNullColIsNullValue
argument_list|(
name|bcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|CHAR
case|:
block|{
name|BytesColumnVector
name|bcv
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|bcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
name|HiveChar
name|colHiveChar
init|=
operator|(
operator|(
name|HiveCharWritable
operator|)
name|writableCol
operator|)
operator|.
name|getHiveChar
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|colHiveChar
operator|.
name|getStrippedValue
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
comment|// We assume the CHAR maximum length was enforced when the object was created.
name|int
name|length
init|=
name|bytes
operator|.
name|length
decl_stmt|;
name|int
name|start
init|=
name|buffer
operator|.
name|getLength
argument_list|()
decl_stmt|;
try|try
block|{
comment|// In vector mode, we store CHAR as unpadded.
name|buffer
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"bad write"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
name|bcv
operator|.
name|setRef
argument_list|(
name|rowIndex
argument_list|,
name|buffer
operator|.
name|getData
argument_list|()
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setNullColIsNullValue
argument_list|(
name|bcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|VARCHAR
case|:
block|{
name|BytesColumnVector
name|bcv
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|bcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
name|HiveVarchar
name|colHiveVarchar
init|=
operator|(
operator|(
name|HiveVarcharWritable
operator|)
name|writableCol
operator|)
operator|.
name|getHiveVarchar
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|colHiveVarchar
operator|.
name|getValue
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
comment|// We assume the VARCHAR maximum length was enforced when the object was created.
name|int
name|length
init|=
name|bytes
operator|.
name|length
decl_stmt|;
name|int
name|start
init|=
name|buffer
operator|.
name|getLength
argument_list|()
decl_stmt|;
try|try
block|{
name|buffer
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"bad write"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
name|bcv
operator|.
name|setRef
argument_list|(
name|rowIndex
argument_list|,
name|buffer
operator|.
name|getData
argument_list|()
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setNullColIsNullValue
argument_list|(
name|bcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DECIMAL
case|:
name|DecimalColumnVector
name|dcv
init|=
operator|(
name|DecimalColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|dcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
name|HiveDecimalWritable
name|wobj
init|=
operator|(
name|HiveDecimalWritable
operator|)
name|writableCol
decl_stmt|;
name|dcv
operator|.
name|set
argument_list|(
name|rowIndex
argument_list|,
name|wobj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setNullColIsNullValue
argument_list|(
name|dcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Vectorizaton is not supported for datatype:"
operator|+
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|StandardStructObjectInspector
name|convertToStandardStructObjectInspector
parameter_list|(
name|StructObjectInspector
name|structObjectInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|structObjectInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|oids
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StructField
name|field
range|:
name|fields
control|)
block|{
name|TypeInfo
name|typeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
operator|.
name|getTypeName
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectInspector
name|standardWritableObjectInspector
init|=
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|typeInfo
argument_list|)
decl_stmt|;
name|oids
operator|.
name|add
argument_list|(
name|standardWritableObjectInspector
argument_list|)
expr_stmt|;
name|columnNames
operator|.
name|add
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|columnNames
argument_list|,
name|oids
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
index|[]
name|columnNamesFromStructObjectInspector
parameter_list|(
name|StructObjectInspector
name|structObjectInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|structObjectInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|String
index|[]
name|result
init|=
operator|new
name|String
index|[
name|fields
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StructField
name|field
range|:
name|fields
control|)
block|{
name|result
index|[
name|i
operator|++
index|]
operator|=
name|field
operator|.
name|getFieldName
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|TypeInfo
index|[]
name|typeInfosFromTypeNames
parameter_list|(
name|String
index|[]
name|typeNames
parameter_list|)
throws|throws
name|HiveException
block|{
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|typeInfoList
init|=
name|TypeInfoUtils
operator|.
name|typeInfosFromTypeNames
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|typeNames
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|typeInfoList
operator|.
name|toArray
argument_list|(
operator|new
name|TypeInfo
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TypeInfo
index|[]
name|typeInfosFromStructObjectInspector
parameter_list|(
name|StructObjectInspector
name|structObjectInspector
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|typeInfoList
init|=
name|TypeInfoUtils
operator|.
name|typeInfosFromStructObjectInspector
argument_list|(
name|structObjectInspector
argument_list|)
decl_stmt|;
return|return
name|typeInfoList
operator|.
name|toArray
argument_list|(
operator|new
name|TypeInfo
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|static
name|ColumnVector
name|cloneColumnVector
parameter_list|(
name|ColumnVector
name|source
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|source
operator|instanceof
name|LongColumnVector
condition|)
block|{
return|return
operator|new
name|LongColumnVector
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|source
operator|)
operator|.
name|vector
operator|.
name|length
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|DoubleColumnVector
condition|)
block|{
return|return
operator|new
name|DoubleColumnVector
argument_list|(
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|source
operator|)
operator|.
name|vector
operator|.
name|length
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|BytesColumnVector
condition|)
block|{
return|return
operator|new
name|BytesColumnVector
argument_list|(
operator|(
operator|(
name|BytesColumnVector
operator|)
name|source
operator|)
operator|.
name|vector
operator|.
name|length
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|DecimalColumnVector
condition|)
block|{
name|DecimalColumnVector
name|decColVector
init|=
operator|(
name|DecimalColumnVector
operator|)
name|source
decl_stmt|;
return|return
operator|new
name|DecimalColumnVector
argument_list|(
name|decColVector
operator|.
name|vector
operator|.
name|length
argument_list|,
name|decColVector
operator|.
name|precision
argument_list|,
name|decColVector
operator|.
name|scale
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|TimestampColumnVector
condition|)
block|{
return|return
operator|new
name|TimestampColumnVector
argument_list|(
operator|(
operator|(
name|TimestampColumnVector
operator|)
name|source
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|ListColumnVector
condition|)
block|{
name|ListColumnVector
name|src
init|=
operator|(
name|ListColumnVector
operator|)
name|source
decl_stmt|;
name|ColumnVector
name|child
init|=
name|cloneColumnVector
argument_list|(
name|src
operator|.
name|child
argument_list|)
decl_stmt|;
return|return
operator|new
name|ListColumnVector
argument_list|(
name|src
operator|.
name|offsets
operator|.
name|length
argument_list|,
name|child
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|MapColumnVector
condition|)
block|{
name|MapColumnVector
name|src
init|=
operator|(
name|MapColumnVector
operator|)
name|source
decl_stmt|;
name|ColumnVector
name|keys
init|=
name|cloneColumnVector
argument_list|(
name|src
operator|.
name|keys
argument_list|)
decl_stmt|;
name|ColumnVector
name|values
init|=
name|cloneColumnVector
argument_list|(
name|src
operator|.
name|values
argument_list|)
decl_stmt|;
return|return
operator|new
name|MapColumnVector
argument_list|(
name|src
operator|.
name|offsets
operator|.
name|length
argument_list|,
name|keys
argument_list|,
name|values
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|StructColumnVector
condition|)
block|{
name|StructColumnVector
name|src
init|=
operator|(
name|StructColumnVector
operator|)
name|source
decl_stmt|;
name|ColumnVector
index|[]
name|copy
init|=
operator|new
name|ColumnVector
index|[
name|src
operator|.
name|fields
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|copy
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|copy
index|[
name|i
index|]
operator|=
name|cloneColumnVector
argument_list|(
name|src
operator|.
name|fields
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|StructColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|copy
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|UnionColumnVector
condition|)
block|{
name|UnionColumnVector
name|src
init|=
operator|(
name|UnionColumnVector
operator|)
name|source
decl_stmt|;
name|ColumnVector
index|[]
name|copy
init|=
operator|new
name|ColumnVector
index|[
name|src
operator|.
name|fields
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|copy
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|copy
index|[
name|i
index|]
operator|=
name|cloneColumnVector
argument_list|(
name|src
operator|.
name|fields
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|UnionColumnVector
argument_list|(
name|src
operator|.
name|tags
operator|.
name|length
argument_list|,
name|copy
argument_list|)
return|;
block|}
else|else
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Column vector class "
operator|+
name|source
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" is not supported!"
argument_list|)
throw|;
block|}
comment|/**    * Make a new (scratch) batch, which is exactly "like" the batch provided, except that it's empty    * @param batch the batch to imitate    * @return the new batch    * @throws HiveException    */
specifier|public
specifier|static
name|VectorizedRowBatch
name|makeLike
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|newBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
name|batch
operator|.
name|numCols
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|numCols
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|batch
operator|.
name|cols
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|newBatch
operator|.
name|cols
index|[
name|i
index|]
operator|=
name|cloneColumnVector
argument_list|(
name|batch
operator|.
name|cols
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|newBatch
operator|.
name|cols
index|[
name|i
index|]
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
block|}
name|newBatch
operator|.
name|projectedColumns
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|batch
operator|.
name|projectedColumns
argument_list|,
name|batch
operator|.
name|projectedColumns
operator|.
name|length
argument_list|)
expr_stmt|;
name|newBatch
operator|.
name|projectionSize
operator|=
name|batch
operator|.
name|projectionSize
expr_stmt|;
name|newBatch
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|newBatch
return|;
block|}
specifier|public
specifier|static
name|String
name|displayBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|start
operator|+
name|length
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
operator|(
name|char
operator|)
name|bytes
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|ch
argument_list|<
literal|' '
operator|||
name|ch
argument_list|>
literal|'~'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\\%03d"
argument_list|,
name|bytes
index|[
name|i
index|]
operator|&
literal|0xff
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|debugDisplayOneRow
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|index
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|prefix
operator|+
literal|" row "
operator|+
name|index
operator|+
literal|" "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|batch
operator|.
name|projectionSize
condition|;
name|p
operator|++
control|)
block|{
name|int
name|column
init|=
name|batch
operator|.
name|projectedColumns
index|[
name|p
index|]
decl_stmt|;
if|if
condition|(
name|p
operator|==
name|column
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"(col "
operator|+
name|p
operator|+
literal|") "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"(proj col "
operator|+
name|p
operator|+
literal|" col "
operator|+
name|column
operator|+
literal|") "
argument_list|)
expr_stmt|;
block|}
name|ColumnVector
name|colVector
init|=
name|batch
operator|.
name|cols
index|[
name|column
index|]
decl_stmt|;
if|if
condition|(
name|colVector
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"(null ColumnVector)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|isRepeating
init|=
name|colVector
operator|.
name|isRepeating
decl_stmt|;
if|if
condition|(
name|isRepeating
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"(repeating)"
argument_list|)
expr_stmt|;
block|}
name|index
operator|=
operator|(
name|isRepeating
condition|?
literal|0
else|:
name|index
operator|)
expr_stmt|;
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|index
index|]
condition|)
block|{
if|if
condition|(
name|colVector
operator|instanceof
name|LongColumnVector
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colVector
operator|instanceof
name|DoubleColumnVector
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colVector
operator|instanceof
name|BytesColumnVector
condition|)
block|{
name|BytesColumnVector
name|bytesColumnVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|colVector
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|bytesColumnVector
operator|.
name|vector
index|[
name|index
index|]
decl_stmt|;
name|int
name|start
init|=
name|bytesColumnVector
operator|.
name|start
index|[
name|index
index|]
decl_stmt|;
name|int
name|length
init|=
name|bytesColumnVector
operator|.
name|length
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"(Unexpected null bytes with start "
operator|+
name|start
operator|+
literal|" length "
operator|+
name|length
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"bytes: '"
operator|+
name|displayBytes
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|colVector
operator|instanceof
name|DecimalColumnVector
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|DecimalColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
name|index
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colVector
operator|instanceof
name|TimestampColumnVector
condition|)
block|{
name|Timestamp
name|timestamp
init|=
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
decl_stmt|;
operator|(
operator|(
name|TimestampColumnVector
operator|)
name|colVector
operator|)
operator|.
name|timestampUpdate
argument_list|(
name|timestamp
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|timestamp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Unknown"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"NULL"
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|debugDisplayBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
name|int
name|index
init|=
operator|(
name|batch
operator|.
name|selectedInUse
condition|?
name|batch
operator|.
name|selected
index|[
name|i
index|]
else|:
name|i
operator|)
decl_stmt|;
name|debugDisplayOneRow
argument_list|(
name|batch
argument_list|,
name|index
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

