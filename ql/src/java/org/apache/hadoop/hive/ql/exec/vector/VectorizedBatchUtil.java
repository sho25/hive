begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|StringExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalDayTimeWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalYearMonthWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_class
specifier|public
class|class
name|VectorizedBatchUtil
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|VectorizedBatchUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Sets the IsNull value for ColumnVector at specified index    * @param cv    * @param rowIndex    */
specifier|public
specifier|static
name|void
name|setNullColIsNullValue
parameter_list|(
name|ColumnVector
name|cv
parameter_list|,
name|int
name|rowIndex
parameter_list|)
block|{
name|cv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|cv
operator|.
name|noNulls
condition|)
block|{
name|cv
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**    * Iterates thru all the column vectors and sets noNull to    * specified value.    *    * @param batch    *          Batch on which noNull is set    */
specifier|public
specifier|static
name|void
name|setNoNullFields
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|numCols
condition|;
name|i
operator|++
control|)
block|{
name|batch
operator|.
name|cols
index|[
name|i
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**    * Iterates thru all the column vectors and sets repeating to    * specified column.    *    */
specifier|public
specifier|static
name|void
name|setRepeatingColumn
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|ColumnVector
name|cv
init|=
name|batch
operator|.
name|cols
index|[
name|column
index|]
decl_stmt|;
name|cv
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Reduce the batch size for a vectorized row batch    */
specifier|public
specifier|static
name|void
name|setBatchSize
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|size
parameter_list|)
block|{
assert|assert
operator|(
name|size
operator|<=
name|batch
operator|.
name|getMaxSize
argument_list|()
operator|)
assert|;
name|batch
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
comment|/**    * Walk through the object inspector and add column vectors    *    * @param oi    * @param cvList    *          ColumnVectors are populated in this list    */
specifier|private
specifier|static
name|void
name|allocateColumnVector
parameter_list|(
name|StructObjectInspector
name|oi
parameter_list|,
name|List
argument_list|<
name|ColumnVector
argument_list|>
name|cvList
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|cvList
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Null columnvector list"
argument_list|)
throw|;
block|}
if|if
condition|(
name|oi
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|oi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|StructField
name|field
range|:
name|fields
control|)
block|{
name|ObjectInspector
name|fieldObjectInspector
init|=
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|fieldObjectInspector
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|fieldObjectInspector
decl_stmt|;
switch|switch
condition|(
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|TIMESTAMP
case|:
case|case
name|DATE
case|:
case|case
name|INTERVAL_YEAR_MONTH
case|:
case|case
name|INTERVAL_DAY_TIME
case|:
name|cvList
operator|.
name|add
argument_list|(
operator|new
name|LongColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
name|cvList
operator|.
name|add
argument_list|(
operator|new
name|DoubleColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|BINARY
case|:
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
name|cvList
operator|.
name|add
argument_list|(
operator|new
name|BytesColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
name|DecimalTypeInfo
name|tInfo
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|poi
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
name|cvList
operator|.
name|add
argument_list|(
operator|new
name|DecimalColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|tInfo
operator|.
name|precision
argument_list|()
argument_list|,
name|tInfo
operator|.
name|scale
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Vectorizaton is not supported for datatype:"
operator|+
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
throw|;
block|}
break|break;
case|case
name|STRUCT
case|:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Struct not supported"
argument_list|)
throw|;
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Flattening is not supported for datatype:"
operator|+
name|fieldObjectInspector
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Create VectorizedRowBatch from ObjectInspector    *    * @param oi    * @return    * @throws HiveException    */
specifier|public
specifier|static
name|VectorizedRowBatch
name|constructVectorizedRowBatch
parameter_list|(
name|StructObjectInspector
name|oi
parameter_list|)
throws|throws
name|HiveException
block|{
specifier|final
name|List
argument_list|<
name|ColumnVector
argument_list|>
name|cvList
init|=
operator|new
name|LinkedList
argument_list|<
name|ColumnVector
argument_list|>
argument_list|()
decl_stmt|;
name|allocateColumnVector
argument_list|(
name|oi
argument_list|,
name|cvList
argument_list|)
expr_stmt|;
specifier|final
name|VectorizedRowBatch
name|result
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
name|cvList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ColumnVector
name|cv
range|:
name|cvList
control|)
block|{
name|result
operator|.
name|cols
index|[
name|i
operator|++
index|]
operator|=
name|cv
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Create VectorizedRowBatch from key and value object inspectors    *    * @param keyInspector    * @param valueInspector    * @return VectorizedRowBatch    * @throws HiveException    */
specifier|public
specifier|static
name|VectorizedRowBatch
name|constructVectorizedRowBatch
parameter_list|(
name|StructObjectInspector
name|keyInspector
parameter_list|,
name|StructObjectInspector
name|valueInspector
parameter_list|)
throws|throws
name|HiveException
block|{
specifier|final
name|List
argument_list|<
name|ColumnVector
argument_list|>
name|cvList
init|=
operator|new
name|LinkedList
argument_list|<
name|ColumnVector
argument_list|>
argument_list|()
decl_stmt|;
name|allocateColumnVector
argument_list|(
name|keyInspector
argument_list|,
name|cvList
argument_list|)
expr_stmt|;
name|allocateColumnVector
argument_list|(
name|valueInspector
argument_list|,
name|cvList
argument_list|)
expr_stmt|;
specifier|final
name|VectorizedRowBatch
name|result
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
name|cvList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|cols
operator|=
name|cvList
operator|.
name|toArray
argument_list|(
name|result
operator|.
name|cols
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Iterates through all columns in a given row and populates the batch    *    * @param row    * @param oi    * @param rowIndex    * @param batch    * @param buffer    * @throws HiveException    */
specifier|public
specifier|static
name|void
name|addRowToBatch
parameter_list|(
name|Object
name|row
parameter_list|,
name|StructObjectInspector
name|oi
parameter_list|,
name|int
name|rowIndex
parameter_list|,
name|VectorizedRowBatch
name|batch
parameter_list|,
name|DataOutputBuffer
name|buffer
parameter_list|)
throws|throws
name|HiveException
block|{
name|addRowToBatchFrom
argument_list|(
name|row
argument_list|,
name|oi
argument_list|,
name|rowIndex
argument_list|,
literal|0
argument_list|,
name|batch
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Iterates thru all the columns in a given row and populates the batch    * from a given offset    *    * @param row Deserialized row object    * @param oi Object insepector for that row    * @param rowIndex index to which the row should be added to batch    * @param colOffset offset from where the column begins    * @param batch Vectorized batch to which the row is added at rowIndex    * @throws HiveException    */
specifier|public
specifier|static
name|void
name|addRowToBatchFrom
parameter_list|(
name|Object
name|row
parameter_list|,
name|StructObjectInspector
name|oi
parameter_list|,
name|int
name|rowIndex
parameter_list|,
name|int
name|colOffset
parameter_list|,
name|VectorizedRowBatch
name|batch
parameter_list|,
name|DataOutputBuffer
name|buffer
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefs
init|=
name|oi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
specifier|final
name|int
name|off
init|=
name|colOffset
decl_stmt|;
comment|// Iterate thru the cols and load the batch
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldRefs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|setVector
argument_list|(
name|row
argument_list|,
name|oi
argument_list|,
name|fieldRefs
argument_list|,
name|batch
argument_list|,
name|buffer
argument_list|,
name|rowIndex
argument_list|,
name|i
argument_list|,
name|off
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Iterates thru all the columns in a given row and populates the batch    * from a given offset    *    * @param row Deserialized row object    * @param oi Object insepector for that row    * @param rowIndex index to which the row should be added to batch    * @param batch Vectorized batch to which the row is added at rowIndex    * @param context context object for this vectorized batch    * @param buffer    * @throws HiveException    */
specifier|public
specifier|static
name|void
name|acidAddRowToBatch
parameter_list|(
name|Object
name|row
parameter_list|,
name|StructObjectInspector
name|oi
parameter_list|,
name|int
name|rowIndex
parameter_list|,
name|VectorizedRowBatch
name|batch
parameter_list|,
name|VectorizedRowBatchCtx
name|context
parameter_list|,
name|DataOutputBuffer
name|buffer
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefs
init|=
name|oi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
comment|// Iterate thru the cols and load the batch
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldRefs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|batch
operator|.
name|cols
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
comment|// This means the column was not included in the projection from the underlying read
continue|continue;
block|}
if|if
condition|(
name|context
operator|.
name|isPartitionCol
argument_list|(
name|i
argument_list|)
condition|)
block|{
comment|// The value will have already been set before we're called, so don't overwrite it
continue|continue;
block|}
name|setVector
argument_list|(
name|row
argument_list|,
name|oi
argument_list|,
name|fieldRefs
argument_list|,
name|batch
argument_list|,
name|buffer
argument_list|,
name|rowIndex
argument_list|,
name|i
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|setVector
parameter_list|(
name|Object
name|row
parameter_list|,
name|StructObjectInspector
name|oi
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefs
parameter_list|,
name|VectorizedRowBatch
name|batch
parameter_list|,
name|DataOutputBuffer
name|buffer
parameter_list|,
name|int
name|rowIndex
parameter_list|,
name|int
name|colIndex
parameter_list|,
name|int
name|offset
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|fieldData
init|=
name|oi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRefs
operator|.
name|get
argument_list|(
name|colIndex
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectInspector
name|foi
init|=
name|fieldRefs
operator|.
name|get
argument_list|(
name|colIndex
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
comment|// Vectorization only supports PRIMITIVE data types. Assert the same
assert|assert
operator|(
name|foi
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|PRIMITIVE
operator|)
assert|;
comment|// Get writable object
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|foi
decl_stmt|;
name|Object
name|writableCol
init|=
name|poi
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|fieldData
argument_list|)
decl_stmt|;
comment|// NOTE: The default value for null fields in vectorization is 1 for int types, NaN for
comment|// float/double. String types have no default value for null.
switch|switch
condition|(
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
operator|(
operator|(
name|BooleanWritable
operator|)
name|writableCol
operator|)
operator|.
name|get
argument_list|()
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|lcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
literal|1
expr_stmt|;
name|setNullColIsNullValue
argument_list|(
name|lcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|BYTE
case|:
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
operator|(
operator|(
name|ByteWritable
operator|)
name|writableCol
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|lcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
literal|1
expr_stmt|;
name|setNullColIsNullValue
argument_list|(
name|lcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|SHORT
case|:
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
operator|(
operator|(
name|ShortWritable
operator|)
name|writableCol
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|lcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
literal|1
expr_stmt|;
name|setNullColIsNullValue
argument_list|(
name|lcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|INT
case|:
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
operator|(
operator|(
name|IntWritable
operator|)
name|writableCol
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|lcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
literal|1
expr_stmt|;
name|setNullColIsNullValue
argument_list|(
name|lcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|LONG
case|:
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
operator|(
operator|(
name|LongWritable
operator|)
name|writableCol
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|lcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
literal|1
expr_stmt|;
name|setNullColIsNullValue
argument_list|(
name|lcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DATE
case|:
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
operator|(
operator|(
name|DateWritable
operator|)
name|writableCol
operator|)
operator|.
name|getDays
argument_list|()
expr_stmt|;
name|lcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
literal|1
expr_stmt|;
name|setNullColIsNullValue
argument_list|(
name|lcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|FLOAT
case|:
block|{
name|DoubleColumnVector
name|dcv
init|=
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|dcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
operator|(
operator|(
name|FloatWritable
operator|)
name|writableCol
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|dcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|dcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
name|setNullColIsNullValue
argument_list|(
name|dcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DOUBLE
case|:
block|{
name|DoubleColumnVector
name|dcv
init|=
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|dcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
operator|(
operator|(
name|DoubleWritable
operator|)
name|writableCol
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|dcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|dcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
name|setNullColIsNullValue
argument_list|(
name|dcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|TIMESTAMP
case|:
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|Timestamp
name|t
init|=
operator|(
operator|(
name|TimestampWritable
operator|)
name|writableCol
operator|)
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
name|TimestampUtils
operator|.
name|getTimeNanoSec
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|lcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
literal|1
expr_stmt|;
name|setNullColIsNullValue
argument_list|(
name|lcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|HiveIntervalYearMonth
name|i
init|=
operator|(
operator|(
name|HiveIntervalYearMonthWritable
operator|)
name|writableCol
operator|)
operator|.
name|getHiveIntervalYearMonth
argument_list|()
decl_stmt|;
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
name|i
operator|.
name|getTotalMonths
argument_list|()
expr_stmt|;
name|lcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
literal|1
expr_stmt|;
name|setNullColIsNullValue
argument_list|(
name|lcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|HiveIntervalDayTime
name|i
init|=
operator|(
operator|(
name|HiveIntervalDayTimeWritable
operator|)
name|writableCol
operator|)
operator|.
name|getHiveIntervalDayTime
argument_list|()
decl_stmt|;
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
name|DateUtils
operator|.
name|getIntervalDayTimeTotalNanos
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|lcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
literal|1
expr_stmt|;
name|setNullColIsNullValue
argument_list|(
name|lcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|BINARY
case|:
block|{
name|BytesColumnVector
name|bcv
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|bcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
name|BytesWritable
name|bw
init|=
operator|(
name|BytesWritable
operator|)
name|writableCol
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|bw
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|int
name|start
init|=
name|buffer
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|bw
operator|.
name|getLength
argument_list|()
decl_stmt|;
try|try
block|{
name|buffer
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"bad write"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
name|bcv
operator|.
name|setRef
argument_list|(
name|rowIndex
argument_list|,
name|buffer
operator|.
name|getData
argument_list|()
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setNullColIsNullValue
argument_list|(
name|bcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|STRING
case|:
block|{
name|BytesColumnVector
name|bcv
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|bcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
name|Text
name|colText
init|=
operator|(
name|Text
operator|)
name|writableCol
decl_stmt|;
name|int
name|start
init|=
name|buffer
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|colText
operator|.
name|getLength
argument_list|()
decl_stmt|;
try|try
block|{
name|buffer
operator|.
name|write
argument_list|(
name|colText
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"bad write"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
name|bcv
operator|.
name|setRef
argument_list|(
name|rowIndex
argument_list|,
name|buffer
operator|.
name|getData
argument_list|()
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setNullColIsNullValue
argument_list|(
name|bcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|CHAR
case|:
block|{
name|BytesColumnVector
name|bcv
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|bcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
name|HiveChar
name|colHiveChar
init|=
operator|(
operator|(
name|HiveCharWritable
operator|)
name|writableCol
operator|)
operator|.
name|getHiveChar
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|colHiveChar
operator|.
name|getStrippedValue
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
comment|// We assume the CHAR maximum length was enforced when the object was created.
name|int
name|length
init|=
name|bytes
operator|.
name|length
decl_stmt|;
name|int
name|start
init|=
name|buffer
operator|.
name|getLength
argument_list|()
decl_stmt|;
try|try
block|{
comment|// In vector mode, we store CHAR as unpadded.
name|buffer
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"bad write"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
name|bcv
operator|.
name|setRef
argument_list|(
name|rowIndex
argument_list|,
name|buffer
operator|.
name|getData
argument_list|()
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setNullColIsNullValue
argument_list|(
name|bcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|VARCHAR
case|:
block|{
name|BytesColumnVector
name|bcv
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|bcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
name|HiveVarchar
name|colHiveVarchar
init|=
operator|(
operator|(
name|HiveVarcharWritable
operator|)
name|writableCol
operator|)
operator|.
name|getHiveVarchar
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|colHiveVarchar
operator|.
name|getValue
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
comment|// We assume the VARCHAR maximum length was enforced when the object was created.
name|int
name|length
init|=
name|bytes
operator|.
name|length
decl_stmt|;
name|int
name|start
init|=
name|buffer
operator|.
name|getLength
argument_list|()
decl_stmt|;
try|try
block|{
name|buffer
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"bad write"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
name|bcv
operator|.
name|setRef
argument_list|(
name|rowIndex
argument_list|,
name|buffer
operator|.
name|getData
argument_list|()
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setNullColIsNullValue
argument_list|(
name|bcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DECIMAL
case|:
name|DecimalColumnVector
name|dcv
init|=
operator|(
name|DecimalColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|offset
operator|+
name|colIndex
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|dcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
name|HiveDecimalWritable
name|wobj
init|=
operator|(
name|HiveDecimalWritable
operator|)
name|writableCol
decl_stmt|;
name|dcv
operator|.
name|set
argument_list|(
name|rowIndex
argument_list|,
name|wobj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setNullColIsNullValue
argument_list|(
name|dcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Vectorizaton is not supported for datatype:"
operator|+
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

