begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_class
specifier|public
class|class
name|VectorizedBatchUtil
block|{
comment|/**    * Sets the IsNull value for ColumnVector at specified index    * @param cv    * @param rowIndex    */
specifier|public
specifier|static
name|void
name|SetNullColIsNullValue
parameter_list|(
name|ColumnVector
name|cv
parameter_list|,
name|int
name|rowIndex
parameter_list|)
block|{
name|cv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|cv
operator|.
name|noNulls
condition|)
block|{
name|cv
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**    * Iterates thru all the column vectors and sets noNull to    * specified value.    *    * @param valueToSet    *          noNull value to set    * @param batch    *          Batch on which noNull is set    */
specifier|public
specifier|static
name|void
name|SetNoNullFields
parameter_list|(
name|boolean
name|valueToSet
parameter_list|,
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|numCols
condition|;
name|i
operator|++
control|)
block|{
name|batch
operator|.
name|cols
index|[
name|i
index|]
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**    * Iterates thru all the columns in a given row and populates the batch    * @param row Deserialized row object    * @param oi Object insepector for that row    * @param rowIndex index to which the row should be added to batch    * @param batch Vectorized batch to which the row is added at rowIndex    * @throws HiveException    */
specifier|public
specifier|static
name|void
name|AddRowToBatch
parameter_list|(
name|Object
name|row
parameter_list|,
name|StructObjectInspector
name|oi
parameter_list|,
name|int
name|rowIndex
parameter_list|,
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefs
init|=
name|oi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
comment|// Iterate thru the cols and load the batch
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldRefs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|fieldData
init|=
name|oi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRefs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectInspector
name|foi
init|=
name|fieldRefs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
comment|// Vectorization only supports PRIMITIVE data types. Assert the same
assert|assert
operator|(
name|foi
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|PRIMITIVE
operator|)
assert|;
comment|// Get writable object
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|foi
decl_stmt|;
name|Object
name|writableCol
init|=
name|poi
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|fieldData
argument_list|)
decl_stmt|;
comment|// NOTE: The default value for null fields in vectorization is 1 for int types, NaN for
comment|// float/double. String types have no default value for null.
switch|switch
condition|(
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
operator|(
operator|(
name|BooleanWritable
operator|)
name|writableCol
operator|)
operator|.
name|get
argument_list|()
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|lcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
literal|1
expr_stmt|;
name|SetNullColIsNullValue
argument_list|(
name|lcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|BYTE
case|:
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
operator|(
operator|(
name|ByteWritable
operator|)
name|writableCol
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|lcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
literal|1
expr_stmt|;
name|SetNullColIsNullValue
argument_list|(
name|lcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|SHORT
case|:
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
operator|(
operator|(
name|ShortWritable
operator|)
name|writableCol
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|lcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
literal|1
expr_stmt|;
name|SetNullColIsNullValue
argument_list|(
name|lcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|INT
case|:
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
operator|(
operator|(
name|IntWritable
operator|)
name|writableCol
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|lcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
literal|1
expr_stmt|;
name|SetNullColIsNullValue
argument_list|(
name|lcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|LONG
case|:
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
operator|(
operator|(
name|LongWritable
operator|)
name|writableCol
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|lcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
literal|1
expr_stmt|;
name|SetNullColIsNullValue
argument_list|(
name|lcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|FLOAT
case|:
block|{
name|DoubleColumnVector
name|dcv
init|=
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|dcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
operator|(
operator|(
name|FloatWritable
operator|)
name|writableCol
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|dcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|dcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
name|SetNullColIsNullValue
argument_list|(
name|dcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DOUBLE
case|:
block|{
name|DoubleColumnVector
name|dcv
init|=
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|dcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
operator|(
operator|(
name|DoubleWritable
operator|)
name|writableCol
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|dcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|dcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
name|SetNullColIsNullValue
argument_list|(
name|dcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|TIMESTAMP
case|:
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|Timestamp
name|t
init|=
operator|(
operator|(
name|TimestampWritable
operator|)
name|writableCol
operator|)
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
name|TimestampUtils
operator|.
name|getTimeNanoSec
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|lcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|lcv
operator|.
name|vector
index|[
name|rowIndex
index|]
operator|=
literal|1
expr_stmt|;
name|SetNullColIsNullValue
argument_list|(
name|lcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|STRING
case|:
block|{
name|BytesColumnVector
name|bcv
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|writableCol
operator|!=
literal|null
condition|)
block|{
name|bcv
operator|.
name|isNull
index|[
name|rowIndex
index|]
operator|=
literal|false
expr_stmt|;
name|Text
name|colText
init|=
operator|(
name|Text
operator|)
name|writableCol
decl_stmt|;
name|bcv
operator|.
name|setRef
argument_list|(
name|rowIndex
argument_list|,
name|colText
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|colText
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SetNullColIsNullValue
argument_list|(
name|bcv
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Vectorizaton is not supported for datatype:"
operator|+
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

