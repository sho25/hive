begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|encoded
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|Pool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DiskRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DiskRangeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|encoded
operator|.
name|MemoryBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|DebugUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|FixedSizedObjectPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcProto
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * Single threaded IO trace.  * Note: this can be made MTT merely by using an AtomicInteger, and storing a thread ID.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|IoTrace
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IoTrace
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|long
index|[]
name|log
decl_stmt|;
specifier|private
name|int
name|offset
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isAlwaysDump
decl_stmt|;
specifier|private
name|boolean
name|hasDumped
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|RangesSrc
block|{
name|PLAN
block|,
name|CACHE
block|,
name|DISK
block|,
name|PREREAD
block|}
specifier|public
name|IoTrace
parameter_list|(
name|int
name|byteSize
parameter_list|,
name|boolean
name|isAlwaysDump
parameter_list|)
block|{
name|log
operator|=
operator|(
name|byteSize
operator|==
literal|0
operator|)
condition|?
literal|null
else|:
operator|new
name|long
index|[
name|byteSize
operator|>>
literal|3
index|]
expr_stmt|;
name|this
operator|.
name|isAlwaysDump
operator|=
name|isAlwaysDump
expr_stmt|;
block|}
comment|// Events.
specifier|public
specifier|static
specifier|final
name|int
name|TREE_READER_NEXT_VECTOR
init|=
literal|1
decl_stmt|,
name|READING_STRIPE
init|=
literal|2
decl_stmt|,
name|SARG_RESULT
init|=
literal|4
decl_stmt|,
name|RANGES
init|=
literal|5
decl_stmt|,
name|COLUMN_READ
init|=
literal|6
decl_stmt|,
name|SKIP_STREAM
init|=
literal|7
decl_stmt|,
name|ADD_STREAM
init|=
literal|8
decl_stmt|,
name|START_RG
init|=
literal|9
decl_stmt|,
name|START_COL
init|=
literal|10
decl_stmt|,
name|START_STRIPE_STREAM
init|=
literal|11
decl_stmt|,
name|START_STREAM
init|=
literal|12
decl_stmt|,
name|START_READ
init|=
literal|13
decl_stmt|,
name|UNCOMPRESSED_DATA
init|=
literal|14
decl_stmt|,
name|PARTIAL_UNCOMPRESSED_DATA
init|=
literal|15
decl_stmt|,
name|VALID_UNCOMPRESSEED_CHUNK
init|=
literal|16
decl_stmt|,
name|CACHE_COLLISION
init|=
literal|17
decl_stmt|,
name|ORC_CB
init|=
literal|18
decl_stmt|,
name|INVALID_ORC_CB
init|=
literal|19
decl_stmt|,
name|PARTIAL_CB
init|=
literal|20
decl_stmt|,
name|COMPOSITE_ORC_CB
init|=
literal|21
decl_stmt|,
name|SARG_RESULT2
init|=
literal|22
decl_stmt|;
specifier|public
name|void
name|reset
parameter_list|()
block|{
if|if
condition|(
name|isAlwaysDump
operator|&&
operator|!
name|hasDumped
condition|)
block|{
name|dumpLog
argument_list|(
name|LOG
argument_list|)
expr_stmt|;
block|}
name|offset
operator|=
literal|0
expr_stmt|;
name|hasDumped
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|dumpLog
parameter_list|(
name|Logger
name|logger
parameter_list|)
block|{
name|hasDumped
operator|=
literal|true
expr_stmt|;
name|int
name|ix
init|=
literal|0
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Dumping LLAP IO trace; "
operator|+
operator|(
name|offset
operator|<<
literal|3
operator|)
operator|+
literal|" bytes"
argument_list|)
expr_stmt|;
while|while
condition|(
name|ix
operator|<
name|offset
condition|)
block|{
name|ix
operator|=
name|dumpOneLine
argument_list|(
name|ix
argument_list|,
name|logger
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|int
name|dumpOneLine
parameter_list|(
name|int
name|ix
parameter_list|,
name|Logger
name|logger
parameter_list|,
name|long
index|[]
name|log
parameter_list|)
block|{
name|int
name|event
init|=
name|getFirstInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|event
condition|)
block|{
case|case
name|TREE_READER_NEXT_VECTOR
case|:
block|{
name|logger
operator|.
name|info
argument_list|(
name|ix
operator|+
literal|": TreeReader next vector "
operator|+
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|1
return|;
block|}
case|case
name|READING_STRIPE
case|:
block|{
name|logger
operator|.
name|info
argument_list|(
name|ix
operator|+
literal|": Reading stripe "
operator|+
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
operator|+
literal|" at "
operator|+
name|log
index|[
name|ix
operator|+
literal|1
index|]
operator|+
literal|" length "
operator|+
name|log
index|[
name|ix
operator|+
literal|2
index|]
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|3
return|;
block|}
case|case
name|SARG_RESULT
case|:
block|{
name|logger
operator|.
name|info
argument_list|(
name|ix
operator|+
literal|": Reading "
operator|+
name|log
index|[
name|ix
operator|+
literal|1
index|]
operator|+
literal|" rgs for stripe "
operator|+
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|2
return|;
block|}
case|case
name|SARG_RESULT2
case|:
block|{
name|int
name|rgsLength
init|=
operator|(
name|int
operator|)
name|log
index|[
name|ix
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|elements
init|=
operator|(
name|rgsLength
operator|>>
literal|6
operator|)
operator|+
operator|(
operator|(
name|rgsLength
operator|&
literal|63
operator|)
operator|==
literal|0
condition|?
literal|0
else|:
literal|1
operator|)
decl_stmt|;
name|boolean
index|[]
name|rgs
init|=
operator|new
name|boolean
index|[
name|rgsLength
index|]
decl_stmt|;
name|int
name|rgsOffset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
condition|;
operator|++
name|i
control|)
block|{
name|long
name|val
init|=
name|log
index|[
name|ix
operator|+
name|i
operator|+
literal|2
index|]
decl_stmt|;
name|int
name|bitsInByte
init|=
name|Math
operator|.
name|min
argument_list|(
name|rgsLength
operator|-
name|rgsOffset
argument_list|,
literal|64
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|rgsOffset
condition|;
operator|++
name|j
operator|,
name|val
operator|>>>=
literal|1
control|)
block|{
name|rgs
index|[
name|rgsOffset
operator|+
name|j
index|]
operator|=
operator|(
name|val
operator|&
literal|1
operator|)
operator|==
literal|1
expr_stmt|;
block|}
name|rgsOffset
operator|+=
name|bitsInByte
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
name|ix
operator|+
literal|": Reading filtered rgs for stripe "
operator|+
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
operator|+
literal|": "
operator|+
name|DebugUtils
operator|.
name|toString
argument_list|(
name|rgs
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
operator|(
name|elements
operator|+
literal|2
operator|)
return|;
block|}
case|case
name|RANGES
case|:
block|{
name|int
name|val
init|=
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
decl_stmt|;
name|RangesSrc
name|src
init|=
name|RangesSrc
operator|.
name|values
argument_list|()
index|[
name|val
operator|>>>
name|MAX_ELEMENT_BITS
index|]
decl_stmt|;
name|int
name|rangeCount
init|=
name|val
operator|&
operator|(
operator|(
literal|1
operator|<<
name|MAX_ELEMENT_BITS
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
name|int
name|currentOffset
init|=
name|ix
operator|+
literal|3
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rangeCount
condition|;
operator|++
name|i
operator|,
name|currentOffset
operator|+=
literal|3
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|printRange
argument_list|(
name|currentOffset
argument_list|,
name|log
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
name|ix
operator|+
literal|": Ranges for file "
operator|+
name|log
index|[
name|ix
operator|+
literal|1
index|]
operator|+
literal|" (base offset "
operator|+
name|log
index|[
name|ix
operator|+
literal|2
index|]
operator|+
literal|") after "
operator|+
name|src
operator|+
literal|": "
operator|+
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|3
operator|+
name|rangeCount
operator|*
literal|3
return|;
block|}
case|case
name|COLUMN_READ
case|:
block|{
name|logger
operator|.
name|info
argument_list|(
name|ix
operator|+
literal|": Reading column "
operator|+
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
operator|+
literal|" (included index "
operator|+
name|getFirstInt
argument_list|(
name|log
index|[
name|ix
operator|+
literal|1
index|]
argument_list|)
operator|+
literal|"; type "
operator|+
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|values
argument_list|()
index|[
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
operator|+
literal|1
index|]
argument_list|)
index|]
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|2
return|;
block|}
case|case
name|SKIP_STREAM
case|:
block|{
name|long
name|streamOffset
init|=
name|log
index|[
name|ix
operator|+
literal|1
index|]
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
name|ix
operator|+
literal|": Skipping stream for col "
operator|+
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
operator|+
literal|" ["
operator|+
name|streamOffset
operator|+
literal|", "
operator|+
operator|(
name|streamOffset
operator|+
name|getFirstInt
argument_list|(
name|log
index|[
name|ix
operator|+
literal|2
index|]
argument_list|)
operator|)
operator|+
literal|") kind "
operator|+
name|Kind
operator|.
name|values
argument_list|()
index|[
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
operator|+
literal|2
index|]
argument_list|)
index|]
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|3
return|;
block|}
case|case
name|ADD_STREAM
case|:
block|{
name|long
name|streamOffset
init|=
name|log
index|[
name|ix
operator|+
literal|1
index|]
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
name|ix
operator|+
literal|": Adding stream for col "
operator|+
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
operator|+
literal|" ["
operator|+
name|streamOffset
operator|+
literal|", "
operator|+
operator|(
name|streamOffset
operator|+
name|getFirstInt
argument_list|(
name|log
index|[
name|ix
operator|+
literal|2
index|]
argument_list|)
operator|)
operator|+
literal|") kind "
operator|+
name|Kind
operator|.
name|values
argument_list|()
index|[
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
operator|+
literal|2
index|]
argument_list|)
index|]
operator|+
literal|", index "
operator|+
name|getFirstInt
argument_list|(
name|log
index|[
name|ix
operator|+
literal|3
index|]
argument_list|)
operator|+
literal|", entire stream "
operator|+
operator|(
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
operator|+
literal|3
index|]
argument_list|)
operator|==
literal|1
operator|)
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|4
return|;
block|}
case|case
name|START_RG
case|:
block|{
name|logger
operator|.
name|info
argument_list|(
name|ix
operator|+
literal|": Starting rg "
operator|+
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|1
return|;
block|}
case|case
name|START_COL
case|:
block|{
name|logger
operator|.
name|info
argument_list|(
name|ix
operator|+
literal|": Starting column "
operator|+
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|1
return|;
block|}
case|case
name|START_STRIPE_STREAM
case|:
block|{
name|logger
operator|.
name|info
argument_list|(
name|ix
operator|+
literal|": Starting stripe-level stream "
operator|+
name|Kind
operator|.
name|values
argument_list|()
index|[
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
index|]
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|1
return|;
block|}
case|case
name|START_STREAM
case|:
block|{
name|long
name|offset
init|=
name|log
index|[
name|ix
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|unlockLen
init|=
name|getFirstInt
argument_list|(
name|log
index|[
name|ix
operator|+
literal|2
index|]
argument_list|)
decl_stmt|;
name|String
name|unlockStr
init|=
operator|(
name|unlockLen
operator|==
name|Integer
operator|.
name|MAX_VALUE
operator|)
condition|?
literal|""
else|:
literal|" unlock "
operator|+
operator|(
name|offset
operator|+
name|unlockLen
operator|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
name|ix
operator|+
literal|": Starting on stream "
operator|+
name|Kind
operator|.
name|values
argument_list|()
index|[
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
index|]
operator|+
literal|"["
operator|+
name|offset
operator|+
literal|", "
operator|+
operator|(
name|offset
operator|+
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
operator|+
literal|2
index|]
argument_list|)
operator|)
operator|+
literal|") "
operator|+
name|unlockStr
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|3
return|;
block|}
case|case
name|START_READ
case|:
block|{
name|logger
operator|.
name|info
argument_list|(
name|ix
operator|+
literal|": Starting read at 0x"
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|1
return|;
block|}
case|case
name|UNCOMPRESSED_DATA
case|:
block|{
name|long
name|offset
init|=
name|log
index|[
name|ix
operator|+
literal|1
index|]
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
name|ix
operator|+
literal|": Uncompressed data ["
operator|+
name|offset
operator|+
literal|", "
operator|+
operator|(
name|offset
operator|+
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
operator|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|2
return|;
block|}
case|case
name|PARTIAL_UNCOMPRESSED_DATA
case|:
block|{
name|long
name|offset
init|=
name|log
index|[
name|ix
operator|+
literal|1
index|]
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
name|ix
operator|+
literal|": Partial uncompressed data ["
operator|+
name|offset
operator|+
literal|", "
operator|+
operator|(
name|offset
operator|+
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
operator|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|2
return|;
block|}
case|case
name|VALID_UNCOMPRESSEED_CHUNK
case|:
block|{
name|logger
operator|.
name|info
argument_list|(
name|ix
operator|+
literal|": Combining uncompressed data for cache buffer of length "
operator|+
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
operator|+
literal|" from 0x"
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
operator|(
name|int
operator|)
name|log
index|[
name|ix
operator|+
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|2
return|;
block|}
case|case
name|CACHE_COLLISION
case|:
block|{
name|logger
operator|.
name|info
argument_list|(
name|ix
operator|+
literal|": Replacing "
operator|+
name|printRange
argument_list|(
name|ix
operator|+
literal|1
argument_list|,
name|log
argument_list|)
operator|+
literal|" with 0x"
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|4
return|;
block|}
case|case
name|ORC_CB
case|:
block|{
name|long
name|offset
init|=
name|log
index|[
name|ix
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|val
init|=
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
decl_stmt|;
name|boolean
name|isUncompressed
init|=
operator|(
name|val
operator|&
literal|1
operator|)
operator|==
literal|1
decl_stmt|;
name|int
name|cbLength
init|=
name|val
operator|>>>
literal|1
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
name|ix
operator|+
literal|": Found "
operator|+
operator|(
name|isUncompressed
condition|?
literal|"un"
else|:
literal|""
operator|)
operator|+
literal|"compressed ORC CB ["
operator|+
name|offset
operator|+
literal|", "
operator|+
operator|(
name|offset
operator|+
name|cbLength
operator|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|2
return|;
block|}
case|case
name|INVALID_ORC_CB
case|:
block|{
name|long
name|offset
init|=
name|log
index|[
name|ix
operator|+
literal|1
index|]
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
name|ix
operator|+
literal|": Found incomplete ORC CB ["
operator|+
name|offset
operator|+
literal|", "
operator|+
operator|(
name|offset
operator|+
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
operator|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|2
return|;
block|}
case|case
name|PARTIAL_CB
case|:
block|{
name|logger
operator|.
name|info
argument_list|(
name|ix
operator|+
literal|": Found buffer with a part of ORC CB "
operator|+
name|printRange
argument_list|(
name|ix
operator|+
literal|1
argument_list|,
name|log
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|4
return|;
block|}
case|case
name|COMPOSITE_ORC_CB
case|:
block|{
name|logger
operator|.
name|info
argument_list|(
name|ix
operator|+
literal|": Combined ORC CB from multiple buffers "
operator|+
name|printRange
argument_list|(
name|ix
operator|+
literal|2
argument_list|,
name|log
argument_list|)
operator|+
literal|" last chunk taken "
operator|+
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
operator|+
literal|", remaining "
operator|+
name|log
index|[
name|ix
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|5
return|;
block|}
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unknown "
operator|+
name|event
argument_list|)
throw|;
block|}
block|}
comment|//Utility methods used to store pairs of ints as long.
specifier|private
specifier|static
name|long
name|makeIntPair
parameter_list|(
name|int
name|first
parameter_list|,
name|int
name|second
parameter_list|)
block|{
return|return
operator|(
operator|(
name|long
operator|)
name|first
operator|)
operator|<<
literal|32
operator||
name|second
return|;
block|}
specifier|private
specifier|static
name|int
name|getFirstInt
parameter_list|(
name|long
name|result
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|result
operator|>>>
literal|32
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|getSecondInt
parameter_list|(
name|long
name|result
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|result
operator|&
operator|(
operator|(
literal|1L
operator|<<
literal|32
operator|)
operator|-
literal|1
operator|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|logTreeReaderNextVector
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
if|if
condition|(
name|log
operator|==
literal|null
condition|)
return|return;
name|int
name|offset
init|=
name|this
operator|.
name|offset
decl_stmt|;
if|if
condition|(
name|offset
operator|+
literal|1
operator|>
name|log
operator|.
name|length
condition|)
return|return;
name|log
index|[
name|offset
index|]
operator|=
name|makeIntPair
argument_list|(
name|TREE_READER_NEXT_VECTOR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|this
operator|.
name|offset
operator|+=
literal|1
expr_stmt|;
block|}
specifier|public
name|void
name|logReadingStripe
parameter_list|(
name|int
name|stripeIx
parameter_list|,
name|long
name|stripeOffset
parameter_list|,
name|long
name|length
parameter_list|)
block|{
if|if
condition|(
name|log
operator|==
literal|null
condition|)
return|return;
name|int
name|offset
init|=
name|this
operator|.
name|offset
decl_stmt|;
if|if
condition|(
name|offset
operator|+
literal|3
operator|>
name|log
operator|.
name|length
condition|)
return|return;
name|log
index|[
name|offset
index|]
operator|=
name|makeIntPair
argument_list|(
name|READING_STRIPE
argument_list|,
name|stripeIx
argument_list|)
expr_stmt|;
name|log
index|[
name|offset
operator|+
literal|1
index|]
operator|=
name|stripeOffset
expr_stmt|;
name|log
index|[
name|offset
operator|+
literal|2
index|]
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|offset
operator|+=
literal|3
expr_stmt|;
block|}
specifier|public
name|void
name|logSargResult
parameter_list|(
name|int
name|stripeIx
parameter_list|,
name|int
name|rgCount
parameter_list|)
block|{
if|if
condition|(
name|log
operator|==
literal|null
condition|)
return|return;
name|int
name|offset
init|=
name|this
operator|.
name|offset
decl_stmt|;
if|if
condition|(
name|offset
operator|+
literal|2
operator|>
name|log
operator|.
name|length
condition|)
return|return;
name|log
index|[
name|offset
index|]
operator|=
name|makeIntPair
argument_list|(
name|SARG_RESULT
argument_list|,
name|stripeIx
argument_list|)
expr_stmt|;
name|log
index|[
name|offset
operator|+
literal|1
index|]
operator|=
name|rgCount
expr_stmt|;
name|this
operator|.
name|offset
operator|+=
literal|2
expr_stmt|;
block|}
specifier|public
name|void
name|logSargResult
parameter_list|(
name|int
name|stripeIx
parameter_list|,
name|boolean
index|[]
name|rgsToRead
parameter_list|)
block|{
if|if
condition|(
name|log
operator|==
literal|null
condition|)
return|return;
name|int
name|offset
init|=
name|this
operator|.
name|offset
decl_stmt|;
name|int
name|elements
init|=
operator|(
name|rgsToRead
operator|.
name|length
operator|>>
literal|6
operator|)
operator|+
operator|(
operator|(
name|rgsToRead
operator|.
name|length
operator|&
literal|63
operator|)
operator|==
literal|0
condition|?
literal|0
else|:
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|offset
operator|+
name|elements
operator|+
literal|2
operator|>
name|log
operator|.
name|length
condition|)
return|return;
name|log
index|[
name|offset
index|]
operator|=
name|makeIntPair
argument_list|(
name|SARG_RESULT2
argument_list|,
name|stripeIx
argument_list|)
expr_stmt|;
name|log
index|[
name|offset
operator|+
literal|1
index|]
operator|=
name|rgsToRead
operator|.
name|length
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|valOffset
init|=
literal|0
init|;
name|i
operator|<
name|elements
condition|;
operator|++
name|i
operator|,
name|valOffset
operator|+=
literal|64
control|)
block|{
name|long
name|val
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|64
condition|;
operator|++
name|j
control|)
block|{
name|int
name|ix
init|=
name|valOffset
operator|+
name|j
decl_stmt|;
if|if
condition|(
name|rgsToRead
operator|.
name|length
operator|==
name|ix
condition|)
break|break;
if|if
condition|(
operator|!
name|rgsToRead
index|[
name|ix
index|]
condition|)
continue|continue;
name|val
operator|=
name|val
operator||
operator|(
literal|1
operator|<<
name|j
operator|)
expr_stmt|;
block|}
name|log
index|[
name|offset
operator|+
name|i
operator|+
literal|2
index|]
operator|=
name|val
expr_stmt|;
block|}
name|this
operator|.
name|offset
operator|+=
operator|(
name|elements
operator|+
literal|2
operator|)
expr_stmt|;
block|}
comment|// Safety limit for potential list bugs.
specifier|private
specifier|static
name|int
name|MAX_ELEMENT_BITS
init|=
literal|17
decl_stmt|,
name|MAX_ELEMENTS
init|=
operator|(
literal|1
operator|<<
name|MAX_ELEMENT_BITS
operator|)
operator|-
literal|1
decl_stmt|;
specifier|public
name|void
name|logRanges
parameter_list|(
name|Object
name|fileKey
parameter_list|,
name|long
name|baseOffset
parameter_list|,
name|DiskRangeList
name|range
parameter_list|,
name|RangesSrc
name|src
parameter_list|)
block|{
if|if
condition|(
name|log
operator|==
literal|null
condition|)
return|return;
name|int
name|offset
init|=
name|this
operator|.
name|offset
decl_stmt|;
if|if
condition|(
name|offset
operator|+
literal|3
operator|>
name|log
operator|.
name|length
condition|)
return|return;
comment|// At least the header should fit.
name|log
index|[
name|offset
operator|+
literal|1
index|]
operator|=
operator|(
name|fileKey
operator|instanceof
name|Long
operator|)
condition|?
operator|(
name|long
operator|)
name|fileKey
else|:
name|fileKey
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|log
index|[
name|offset
operator|+
literal|2
index|]
operator|=
name|baseOffset
expr_stmt|;
name|int
name|elementCount
init|=
literal|0
decl_stmt|;
name|int
name|currentOffset
init|=
name|offset
operator|+
literal|3
decl_stmt|;
while|while
condition|(
name|range
operator|!=
literal|null
operator|&&
name|elementCount
operator|<
name|MAX_ELEMENTS
condition|)
block|{
if|if
condition|(
name|currentOffset
operator|+
literal|3
operator|>
name|log
operator|.
name|length
condition|)
break|break;
name|logRange
argument_list|(
name|range
argument_list|,
name|currentOffset
argument_list|)
expr_stmt|;
name|currentOffset
operator|+=
literal|3
expr_stmt|;
operator|++
name|elementCount
expr_stmt|;
name|range
operator|=
name|range
operator|.
name|next
expr_stmt|;
block|}
name|log
index|[
name|offset
index|]
operator|=
name|makeIntPair
argument_list|(
name|RANGES
argument_list|,
operator|(
name|src
operator|.
name|ordinal
argument_list|()
operator|<<
name|MAX_ELEMENT_BITS
operator|)
operator||
name|elementCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|currentOffset
expr_stmt|;
block|}
specifier|private
name|void
name|logRange
parameter_list|(
name|DiskRange
name|range
parameter_list|,
name|int
name|currentOffset
parameter_list|)
block|{
name|log
index|[
name|currentOffset
index|]
operator|=
name|range
operator|.
name|getOffset
argument_list|()
expr_stmt|;
name|log
index|[
name|currentOffset
operator|+
literal|1
index|]
operator|=
name|range
operator|.
name|getEnd
argument_list|()
expr_stmt|;
name|log
index|[
name|currentOffset
operator|+
literal|2
index|]
operator|=
name|range
operator|.
name|hasData
argument_list|()
condition|?
name|System
operator|.
name|identityHashCode
argument_list|(
name|range
operator|.
name|getData
argument_list|()
argument_list|)
else|:
literal|0
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|printRange
parameter_list|(
name|int
name|ix
parameter_list|,
name|long
index|[]
name|log
parameter_list|)
block|{
return|return
literal|"["
operator|+
name|log
index|[
name|ix
index|]
operator|+
literal|", "
operator|+
name|log
index|[
name|ix
operator|+
literal|1
index|]
operator|+
literal|"): 0x"
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
operator|(
name|int
operator|)
name|log
index|[
name|ix
operator|+
literal|2
index|]
argument_list|)
return|;
block|}
specifier|public
name|void
name|logColumnRead
parameter_list|(
name|int
name|colIx
parameter_list|,
name|int
name|includedIx
parameter_list|,
name|ColumnEncoding
operator|.
name|Kind
name|kind
parameter_list|)
block|{
if|if
condition|(
name|log
operator|==
literal|null
condition|)
return|return;
name|int
name|offset
init|=
name|this
operator|.
name|offset
decl_stmt|;
if|if
condition|(
name|offset
operator|+
literal|2
operator|>
name|log
operator|.
name|length
condition|)
return|return;
name|log
index|[
name|offset
index|]
operator|=
name|makeIntPair
argument_list|(
name|COLUMN_READ
argument_list|,
name|colIx
argument_list|)
expr_stmt|;
name|log
index|[
name|offset
operator|+
literal|1
index|]
operator|=
name|makeIntPair
argument_list|(
name|includedIx
argument_list|,
name|kind
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|offset
operator|+=
literal|2
expr_stmt|;
block|}
specifier|public
name|void
name|logSkipStream
parameter_list|(
name|int
name|colIx
parameter_list|,
name|Stream
operator|.
name|Kind
name|streamKind
parameter_list|,
name|long
name|streamOffset
parameter_list|,
name|long
name|length
parameter_list|)
block|{
if|if
condition|(
name|log
operator|==
literal|null
condition|)
return|return;
name|int
name|offset
init|=
name|this
operator|.
name|offset
decl_stmt|;
if|if
condition|(
name|offset
operator|+
literal|3
operator|>
name|log
operator|.
name|length
condition|)
return|return;
name|log
index|[
name|offset
index|]
operator|=
name|makeIntPair
argument_list|(
name|SKIP_STREAM
argument_list|,
name|colIx
argument_list|)
expr_stmt|;
name|log
index|[
name|offset
operator|+
literal|1
index|]
operator|=
name|streamOffset
expr_stmt|;
name|log
index|[
name|offset
operator|+
literal|2
index|]
operator|=
name|makeIntPair
argument_list|(
operator|(
name|int
operator|)
name|length
argument_list|,
name|streamKind
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|offset
operator|+=
literal|3
expr_stmt|;
block|}
specifier|public
name|void
name|logAddStream
parameter_list|(
name|int
name|colIx
parameter_list|,
name|Stream
operator|.
name|Kind
name|streamKind
parameter_list|,
name|long
name|streamOffset
parameter_list|,
name|long
name|length
parameter_list|,
name|int
name|indexIx
parameter_list|,
name|boolean
name|isEntire
parameter_list|)
block|{
if|if
condition|(
name|log
operator|==
literal|null
condition|)
return|return;
name|int
name|offset
init|=
name|this
operator|.
name|offset
decl_stmt|;
if|if
condition|(
name|offset
operator|+
literal|4
operator|>
name|log
operator|.
name|length
condition|)
return|return;
name|log
index|[
name|offset
index|]
operator|=
name|makeIntPair
argument_list|(
name|ADD_STREAM
argument_list|,
name|colIx
argument_list|)
expr_stmt|;
name|log
index|[
name|offset
operator|+
literal|1
index|]
operator|=
name|streamOffset
expr_stmt|;
name|log
index|[
name|offset
operator|+
literal|2
index|]
operator|=
name|makeIntPair
argument_list|(
operator|(
name|int
operator|)
name|length
argument_list|,
name|streamKind
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|log
index|[
name|offset
operator|+
literal|3
index|]
operator|=
name|makeIntPair
argument_list|(
name|indexIx
argument_list|,
name|isEntire
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|offset
operator|+=
literal|4
expr_stmt|;
block|}
specifier|public
name|void
name|logStartRg
parameter_list|(
name|int
name|rgIx
parameter_list|)
block|{
if|if
condition|(
name|log
operator|==
literal|null
condition|)
return|return;
name|int
name|offset
init|=
name|this
operator|.
name|offset
decl_stmt|;
if|if
condition|(
name|offset
operator|+
literal|1
operator|>
name|log
operator|.
name|length
condition|)
return|return;
name|log
index|[
name|offset
index|]
operator|=
name|makeIntPair
argument_list|(
name|START_RG
argument_list|,
name|rgIx
argument_list|)
expr_stmt|;
name|this
operator|.
name|offset
operator|+=
literal|1
expr_stmt|;
block|}
specifier|public
name|void
name|logStartCol
parameter_list|(
name|int
name|colIx
parameter_list|)
block|{
if|if
condition|(
name|log
operator|==
literal|null
condition|)
return|return;
name|int
name|offset
init|=
name|this
operator|.
name|offset
decl_stmt|;
if|if
condition|(
name|offset
operator|+
literal|1
operator|>
name|log
operator|.
name|length
condition|)
return|return;
name|log
index|[
name|offset
index|]
operator|=
name|makeIntPair
argument_list|(
name|START_COL
argument_list|,
name|colIx
argument_list|)
expr_stmt|;
name|this
operator|.
name|offset
operator|+=
literal|1
expr_stmt|;
block|}
specifier|public
name|void
name|logStartStripeStream
parameter_list|(
name|Kind
name|kind
parameter_list|)
block|{
if|if
condition|(
name|log
operator|==
literal|null
condition|)
return|return;
name|int
name|offset
init|=
name|this
operator|.
name|offset
decl_stmt|;
if|if
condition|(
name|offset
operator|+
literal|1
operator|>
name|log
operator|.
name|length
condition|)
return|return;
name|log
index|[
name|offset
index|]
operator|=
name|makeIntPair
argument_list|(
name|START_STRIPE_STREAM
argument_list|,
name|kind
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|offset
operator|+=
literal|1
expr_stmt|;
block|}
specifier|public
name|void
name|logStartStream
parameter_list|(
name|Kind
name|kind
parameter_list|,
name|long
name|cOffset
parameter_list|,
name|long
name|endCOffset
parameter_list|,
name|long
name|unlockUntilCOffset
parameter_list|)
block|{
if|if
condition|(
name|log
operator|==
literal|null
condition|)
return|return;
name|int
name|offset
init|=
name|this
operator|.
name|offset
decl_stmt|;
if|if
condition|(
name|offset
operator|+
literal|3
operator|>
name|log
operator|.
name|length
condition|)
return|return;
name|log
index|[
name|offset
index|]
operator|=
name|makeIntPair
argument_list|(
name|START_STREAM
argument_list|,
name|kind
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|log
index|[
name|offset
operator|+
literal|1
index|]
operator|=
name|cOffset
expr_stmt|;
name|long
name|unlockLen
init|=
name|unlockUntilCOffset
operator|-
name|cOffset
decl_stmt|;
name|int
name|unlockLenToSave
init|=
name|unlockLen
operator|>=
literal|0
operator|&&
name|unlockLen
operator|<
name|Integer
operator|.
name|MAX_VALUE
condition|?
operator|(
name|int
operator|)
name|unlockLen
else|:
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|log
index|[
name|offset
operator|+
literal|2
index|]
operator|=
name|makeIntPair
argument_list|(
name|unlockLenToSave
argument_list|,
call|(
name|int
call|)
argument_list|(
name|endCOffset
operator|-
name|cOffset
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|offset
operator|+=
literal|3
expr_stmt|;
block|}
specifier|public
name|void
name|logStartRead
parameter_list|(
name|DiskRangeList
name|current
parameter_list|)
block|{
if|if
condition|(
name|log
operator|==
literal|null
condition|)
return|return;
name|int
name|offset
init|=
name|this
operator|.
name|offset
decl_stmt|;
if|if
condition|(
name|offset
operator|+
literal|1
operator|>
name|log
operator|.
name|length
condition|)
return|return;
name|log
index|[
name|offset
index|]
operator|=
name|makeIntPair
argument_list|(
name|START_READ
argument_list|,
name|current
operator|.
name|hasData
argument_list|()
condition|?
name|System
operator|.
name|identityHashCode
argument_list|(
name|current
operator|.
name|getData
argument_list|()
argument_list|)
else|:
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|offset
operator|+=
literal|1
expr_stmt|;
block|}
specifier|public
name|void
name|logUncompressedData
parameter_list|(
name|long
name|dataOffset
parameter_list|,
name|long
name|end
parameter_list|)
block|{
if|if
condition|(
name|log
operator|==
literal|null
condition|)
return|return;
name|int
name|offset
init|=
name|this
operator|.
name|offset
decl_stmt|;
if|if
condition|(
name|offset
operator|+
literal|2
operator|>
name|log
operator|.
name|length
condition|)
return|return;
name|log
index|[
name|offset
index|]
operator|=
name|makeIntPair
argument_list|(
name|UNCOMPRESSED_DATA
argument_list|,
call|(
name|int
call|)
argument_list|(
name|end
operator|-
name|dataOffset
argument_list|)
argument_list|)
expr_stmt|;
name|log
index|[
name|offset
operator|+
literal|1
index|]
operator|=
name|dataOffset
expr_stmt|;
name|this
operator|.
name|offset
operator|+=
literal|2
expr_stmt|;
block|}
specifier|public
name|void
name|logPartialUncompressedData
parameter_list|(
name|long
name|partOffset
parameter_list|,
name|long
name|candidateEnd
parameter_list|,
name|boolean
name|fromCache
parameter_list|)
block|{
if|if
condition|(
name|log
operator|==
literal|null
condition|)
return|return;
name|int
name|offset
init|=
name|this
operator|.
name|offset
decl_stmt|;
if|if
condition|(
name|offset
operator|+
literal|2
operator|>
name|log
operator|.
name|length
condition|)
return|return;
name|log
index|[
name|offset
index|]
operator|=
name|makeIntPair
argument_list|(
name|PARTIAL_UNCOMPRESSED_DATA
argument_list|,
call|(
name|int
call|)
argument_list|(
name|candidateEnd
operator|-
name|partOffset
argument_list|)
argument_list|)
expr_stmt|;
name|log
index|[
name|offset
operator|+
literal|1
index|]
operator|=
name|partOffset
expr_stmt|;
name|this
operator|.
name|offset
operator|+=
literal|2
expr_stmt|;
block|}
specifier|public
name|void
name|logValidUncompresseedChunk
parameter_list|(
name|int
name|totalLength
parameter_list|,
name|DiskRange
name|chunk
parameter_list|)
block|{
if|if
condition|(
name|log
operator|==
literal|null
condition|)
return|return;
name|int
name|offset
init|=
name|this
operator|.
name|offset
decl_stmt|;
if|if
condition|(
name|offset
operator|+
literal|2
operator|>
name|log
operator|.
name|length
condition|)
return|return;
name|log
index|[
name|offset
index|]
operator|=
name|makeIntPair
argument_list|(
name|VALID_UNCOMPRESSEED_CHUNK
argument_list|,
name|totalLength
argument_list|)
expr_stmt|;
name|log
index|[
name|offset
operator|+
literal|1
index|]
operator|=
name|chunk
operator|.
name|hasData
argument_list|()
condition|?
name|System
operator|.
name|identityHashCode
argument_list|(
name|chunk
operator|.
name|getData
argument_list|()
argument_list|)
else|:
literal|0
expr_stmt|;
name|this
operator|.
name|offset
operator|+=
literal|2
expr_stmt|;
block|}
specifier|public
name|void
name|logCacheCollision
parameter_list|(
name|DiskRange
name|replacedChunk
parameter_list|,
name|MemoryBuffer
name|replacementBuffer
parameter_list|)
block|{
if|if
condition|(
name|log
operator|==
literal|null
condition|)
return|return;
name|int
name|offset
init|=
name|this
operator|.
name|offset
decl_stmt|;
if|if
condition|(
name|offset
operator|+
literal|4
operator|>
name|log
operator|.
name|length
condition|)
return|return;
name|log
index|[
name|offset
index|]
operator|=
name|makeIntPair
argument_list|(
name|CACHE_COLLISION
argument_list|,
name|System
operator|.
name|identityHashCode
argument_list|(
name|replacementBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|logRange
argument_list|(
name|replacedChunk
argument_list|,
name|offset
operator|+
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|offset
operator|+=
literal|4
expr_stmt|;
block|}
specifier|public
name|void
name|logOrcCb
parameter_list|(
name|long
name|cbStartOffset
parameter_list|,
name|int
name|cbLength
parameter_list|,
name|boolean
name|isUncompressed
parameter_list|)
block|{
if|if
condition|(
name|log
operator|==
literal|null
condition|)
return|return;
name|int
name|offset
init|=
name|this
operator|.
name|offset
decl_stmt|;
if|if
condition|(
name|offset
operator|+
literal|2
operator|>
name|log
operator|.
name|length
condition|)
return|return;
name|log
index|[
name|offset
index|]
operator|=
name|makeIntPair
argument_list|(
name|ORC_CB
argument_list|,
operator|(
name|cbLength
operator|<<
literal|1
operator|)
operator||
operator|(
name|isUncompressed
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
name|log
index|[
name|offset
operator|+
literal|1
index|]
operator|=
name|cbStartOffset
expr_stmt|;
name|this
operator|.
name|offset
operator|+=
literal|2
expr_stmt|;
block|}
specifier|public
name|void
name|logInvalidOrcCb
parameter_list|(
name|long
name|cbStartOffset
parameter_list|,
name|long
name|end
parameter_list|)
block|{
if|if
condition|(
name|log
operator|==
literal|null
condition|)
return|return;
name|int
name|offset
init|=
name|this
operator|.
name|offset
decl_stmt|;
if|if
condition|(
name|offset
operator|+
literal|2
operator|>
name|log
operator|.
name|length
condition|)
return|return;
name|log
index|[
name|offset
index|]
operator|=
name|makeIntPair
argument_list|(
name|INVALID_ORC_CB
argument_list|,
call|(
name|int
call|)
argument_list|(
name|end
operator|-
name|cbStartOffset
argument_list|)
argument_list|)
expr_stmt|;
name|log
index|[
name|offset
operator|+
literal|1
index|]
operator|=
name|cbStartOffset
expr_stmt|;
name|this
operator|.
name|offset
operator|+=
literal|2
expr_stmt|;
block|}
specifier|public
name|void
name|logPartialCb
parameter_list|(
name|DiskRange
name|current
parameter_list|)
block|{
if|if
condition|(
name|log
operator|==
literal|null
condition|)
return|return;
name|int
name|offset
init|=
name|this
operator|.
name|offset
decl_stmt|;
if|if
condition|(
name|offset
operator|+
literal|4
operator|>
name|log
operator|.
name|length
condition|)
return|return;
name|log
index|[
name|offset
index|]
operator|=
name|makeIntPair
argument_list|(
name|PARTIAL_CB
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|logRange
argument_list|(
name|current
argument_list|,
name|offset
operator|+
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|offset
operator|+=
literal|4
expr_stmt|;
block|}
specifier|public
name|void
name|logCompositeOrcCb
parameter_list|(
name|int
name|lastChunkTaken
parameter_list|,
name|int
name|lastChunkRemaining
parameter_list|,
name|DiskRange
name|cc
parameter_list|)
block|{
if|if
condition|(
name|log
operator|==
literal|null
condition|)
return|return;
name|int
name|offset
init|=
name|this
operator|.
name|offset
decl_stmt|;
if|if
condition|(
name|offset
operator|+
literal|5
operator|>
name|log
operator|.
name|length
condition|)
return|return;
name|log
index|[
name|offset
index|]
operator|=
name|makeIntPair
argument_list|(
name|COMPOSITE_ORC_CB
argument_list|,
name|lastChunkTaken
argument_list|)
expr_stmt|;
name|log
index|[
name|offset
operator|+
literal|1
index|]
operator|=
name|lastChunkRemaining
expr_stmt|;
name|logRange
argument_list|(
name|cc
argument_list|,
name|offset
operator|+
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|offset
operator|+=
literal|5
expr_stmt|;
block|}
specifier|public
specifier|static
name|FixedSizedObjectPool
argument_list|<
name|IoTrace
argument_list|>
name|createTracePool
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|int
name|ioTraceSize
init|=
operator|(
name|int
operator|)
name|HiveConf
operator|.
name|getSizeVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_IO_TRACE_SIZE
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isAlwaysDump
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_IO_TRACE_ALWAYS_DUMP
argument_list|)
decl_stmt|;
name|int
name|ioThreads
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_IO_THREADPOOL_SIZE
argument_list|)
decl_stmt|;
return|return
operator|new
name|FixedSizedObjectPool
argument_list|<>
argument_list|(
name|ioThreads
argument_list|,
operator|new
name|Pool
operator|.
name|PoolObjectHelper
argument_list|<
name|IoTrace
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|IoTrace
name|create
parameter_list|()
block|{
return|return
operator|new
name|IoTrace
argument_list|(
name|ioTraceSize
argument_list|,
name|isAlwaysDump
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|resetBeforeOffer
parameter_list|(
name|IoTrace
name|t
parameter_list|)
block|{
name|t
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

