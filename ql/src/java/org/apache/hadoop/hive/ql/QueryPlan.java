begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ConditionalTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExplainTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FetchTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|mr
operator|.
name|ExecDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|LineageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ColumnAccessInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|TableAccessInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DDLDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DDLDesc
operator|.
name|DDLDescWithWriteId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FileSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReducerTimeStatsPerJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|AdjacencyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TJSONProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryBuffer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * QueryPlan can be serialized to disk so that we can restart/resume the  * progress of it in the future, either within or outside of the current  * jvm.  */
end_comment

begin_class
specifier|public
class|class
name|QueryPlan
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|String
name|cboInfo
decl_stmt|;
specifier|private
name|String
name|queryString
decl_stmt|;
specifier|private
name|String
name|optimizedQueryString
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
decl_stmt|;
specifier|private
name|FetchTask
name|fetchTask
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|ReducerTimeStatsPerJob
argument_list|>
name|reducerTimeStatsPerJobList
decl_stmt|;
specifier|private
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
decl_stmt|;
comment|/**    * Note: outputs are not all determined at compile time.    * Some of the tasks can change the outputs at run time, because only at run    * time, we know what are the changes.  These tasks should keep a reference    * to the outputs here.    */
specifier|private
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
decl_stmt|;
comment|/**    * Lineage information for the query.    */
specifier|protected
name|LineageInfo
name|linfo
decl_stmt|;
specifier|private
name|TableAccessInfo
name|tableAccessInfo
decl_stmt|;
specifier|private
name|ColumnAccessInfo
name|columnAccessInfo
decl_stmt|;
specifier|private
name|Schema
name|resultSchema
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|idToTableNameMap
decl_stmt|;
specifier|private
name|String
name|queryId
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Query
name|query
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|counters
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|done
init|=
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|started
init|=
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|QueryProperties
name|queryProperties
decl_stmt|;
specifier|private
specifier|transient
name|Long
name|queryStartTime
decl_stmt|;
specifier|private
specifier|final
name|HiveOperation
name|operation
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|acidResourcesInQuery
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|FileSinkDesc
argument_list|>
name|acidSinks
decl_stmt|;
comment|// Note: both full-ACID and insert-only sinks.
specifier|private
specifier|final
name|WriteEntity
name|acidAnalyzeTable
decl_stmt|;
specifier|private
specifier|final
name|DDLDesc
operator|.
name|DDLDescWithWriteId
name|acidDdlDesc
decl_stmt|;
specifier|private
name|Boolean
name|autoCommitValue
decl_stmt|;
specifier|public
name|QueryPlan
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|protected
name|QueryPlan
parameter_list|(
name|HiveOperation
name|command
parameter_list|)
block|{
name|this
operator|.
name|reducerTimeStatsPerJobList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|operation
operator|=
name|command
expr_stmt|;
name|this
operator|.
name|acidResourcesInQuery
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|acidSinks
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
name|this
operator|.
name|acidDdlDesc
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|acidAnalyzeTable
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|QueryPlan
parameter_list|(
name|String
name|queryString
parameter_list|,
name|BaseSemanticAnalyzer
name|sem
parameter_list|,
name|Long
name|startTime
parameter_list|,
name|String
name|queryId
parameter_list|,
name|HiveOperation
name|operation
parameter_list|,
name|Schema
name|resultSchema
parameter_list|)
block|{
name|this
operator|.
name|queryString
operator|=
name|queryString
expr_stmt|;
name|rootTasks
operator|=
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|(
name|sem
operator|.
name|getAllRootTasks
argument_list|()
argument_list|)
expr_stmt|;
name|reducerTimeStatsPerJobList
operator|=
operator|new
name|ArrayList
argument_list|<
name|ReducerTimeStatsPerJob
argument_list|>
argument_list|()
expr_stmt|;
name|fetchTask
operator|=
name|sem
operator|.
name|getFetchTask
argument_list|()
expr_stmt|;
comment|// Note that inputs and outputs can be changed when the query gets executed
name|inputs
operator|=
name|sem
operator|.
name|getAllInputs
argument_list|()
expr_stmt|;
name|outputs
operator|=
name|sem
operator|.
name|getAllOutputs
argument_list|()
expr_stmt|;
name|linfo
operator|=
name|sem
operator|.
name|getLineageInfo
argument_list|()
expr_stmt|;
name|tableAccessInfo
operator|=
name|sem
operator|.
name|getTableAccessInfo
argument_list|()
expr_stmt|;
name|columnAccessInfo
operator|=
name|sem
operator|.
name|getColumnAccessInfo
argument_list|()
expr_stmt|;
name|idToTableNameMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|sem
operator|.
name|getIdToTableNameMap
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|queryId
operator|=
name|queryId
operator|==
literal|null
condition|?
name|makeQueryId
argument_list|()
else|:
name|queryId
expr_stmt|;
name|query
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Query
argument_list|()
expr_stmt|;
name|query
operator|.
name|setQueryId
argument_list|(
name|this
operator|.
name|queryId
argument_list|)
expr_stmt|;
name|query
operator|.
name|putToQueryAttributes
argument_list|(
literal|"queryString"
argument_list|,
name|this
operator|.
name|queryString
argument_list|)
expr_stmt|;
name|queryProperties
operator|=
name|sem
operator|.
name|getQueryProperties
argument_list|()
expr_stmt|;
name|queryStartTime
operator|=
name|startTime
expr_stmt|;
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
name|this
operator|.
name|autoCommitValue
operator|=
name|sem
operator|.
name|getAutoCommitValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|resultSchema
operator|=
name|resultSchema
expr_stmt|;
comment|// TODO: all this ACID stuff should be in some sub-object
name|this
operator|.
name|acidResourcesInQuery
operator|=
name|sem
operator|.
name|hasTransactionalInQuery
argument_list|()
expr_stmt|;
name|this
operator|.
name|acidSinks
operator|=
name|sem
operator|.
name|getAcidFileSinks
argument_list|()
expr_stmt|;
name|this
operator|.
name|acidDdlDesc
operator|=
name|sem
operator|.
name|getAcidDdlDesc
argument_list|()
expr_stmt|;
name|this
operator|.
name|acidAnalyzeTable
operator|=
name|sem
operator|.
name|getAcidAnalyzeTable
argument_list|()
expr_stmt|;
name|this
operator|.
name|cboInfo
operator|=
name|sem
operator|.
name|getCboInfo
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return true if any acid resources are read/written    */
specifier|public
name|boolean
name|hasAcidResourcesInQuery
parameter_list|()
block|{
return|return
name|acidResourcesInQuery
return|;
block|}
specifier|public
name|WriteEntity
name|getAcidAnalyzeTable
parameter_list|()
block|{
return|return
name|acidAnalyzeTable
return|;
block|}
comment|/**    * @return Collection of FileSinkDesc representing writes to Acid resources    */
name|Set
argument_list|<
name|FileSinkDesc
argument_list|>
name|getAcidSinks
parameter_list|()
block|{
return|return
name|acidSinks
return|;
block|}
name|DDLDescWithWriteId
name|getAcidDdlDesc
parameter_list|()
block|{
return|return
name|acidDdlDesc
return|;
block|}
specifier|public
name|String
name|getQueryStr
parameter_list|()
block|{
return|return
name|queryString
return|;
block|}
specifier|public
name|String
name|getQueryId
parameter_list|()
block|{
return|return
name|queryId
return|;
block|}
specifier|public
specifier|static
name|String
name|makeQueryId
parameter_list|()
block|{
name|GregorianCalendar
name|gc
init|=
operator|new
name|GregorianCalendar
argument_list|()
decl_stmt|;
name|String
name|userid
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
return|return
name|userid
operator|+
literal|"_"
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%1$4d%2$02d%3$02d%4$02d%5$02d%6$02d"
argument_list|,
name|gc
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|,
name|gc
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
operator|+
literal|1
argument_list|,
name|gc
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|,
name|gc
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|,
name|gc
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|,
name|gc
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|)
operator|+
literal|"_"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * generate the operator graph and operator list for the given task based on    * the operators corresponding to that task.    *    * @param task    *          api.Task which needs its operator graph populated    * @param topOps    *          the set of top operators from which the operator graph for the    *          task is hanging    */
specifier|private
name|void
name|populateOperatorGraph
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Task
name|task
parameter_list|,
name|Collection
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|topOps
parameter_list|)
block|{
name|task
operator|.
name|setOperatorGraph
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Graph
argument_list|()
argument_list|)
expr_stmt|;
name|task
operator|.
name|getOperatorGraph
argument_list|()
operator|.
name|setNodeType
argument_list|(
name|NodeType
operator|.
name|OPERATOR
argument_list|)
expr_stmt|;
name|Queue
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|opsToVisit
init|=
operator|new
name|LinkedList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|opsVisited
init|=
operator|new
name|HashSet
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|opsToVisit
operator|.
name|addAll
argument_list|(
name|topOps
argument_list|)
expr_stmt|;
while|while
condition|(
name|opsToVisit
operator|.
name|peek
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
init|=
name|opsToVisit
operator|.
name|remove
argument_list|()
decl_stmt|;
name|opsVisited
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
comment|// populate the operator
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Operator
name|operator
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Operator
argument_list|()
decl_stmt|;
name|operator
operator|.
name|setOperatorId
argument_list|(
name|op
operator|.
name|getOperatorId
argument_list|()
argument_list|)
expr_stmt|;
name|operator
operator|.
name|setOperatorType
argument_list|(
name|op
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|task
operator|.
name|addToOperatorList
argument_list|(
name|operator
argument_list|)
expr_stmt|;
comment|// done processing the operator
if|if
condition|(
name|op
operator|.
name|getChildOperators
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Adjacency
name|entry
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Adjacency
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setAdjacencyType
argument_list|(
name|AdjacencyType
operator|.
name|CONJUNCTIVE
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setNode
argument_list|(
name|op
operator|.
name|getOperatorId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|childOp
range|:
name|op
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
name|entry
operator|.
name|addToChildren
argument_list|(
name|childOp
operator|.
name|getOperatorId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|opsVisited
operator|.
name|contains
argument_list|(
name|childOp
argument_list|)
condition|)
block|{
name|opsToVisit
operator|.
name|add
argument_list|(
name|childOp
argument_list|)
expr_stmt|;
block|}
block|}
name|task
operator|.
name|getOperatorGraph
argument_list|()
operator|.
name|addToAdjacencyList
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Populate api.QueryPlan from exec structures. This includes constructing the    * dependency graphs of stages and operators.    *    * @throws IOException    */
specifier|private
name|void
name|populateQueryPlan
parameter_list|()
throws|throws
name|IOException
block|{
name|query
operator|.
name|setStageGraph
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Graph
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|getStageGraph
argument_list|()
operator|.
name|setNodeType
argument_list|(
name|NodeType
operator|.
name|STAGE
argument_list|)
expr_stmt|;
name|Queue
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|tasksToVisit
init|=
operator|new
name|LinkedList
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|tasksVisited
init|=
operator|new
name|HashSet
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|tasksToVisit
operator|.
name|addAll
argument_list|(
name|rootTasks
argument_list|)
expr_stmt|;
while|while
condition|(
name|tasksToVisit
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
init|=
name|tasksToVisit
operator|.
name|remove
argument_list|()
decl_stmt|;
name|tasksVisited
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
comment|// populate stage
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Stage
name|stage
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Stage
argument_list|()
decl_stmt|;
name|stage
operator|.
name|setStageId
argument_list|(
name|task
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|stage
operator|.
name|setStageType
argument_list|(
name|task
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|addToStageList
argument_list|(
name|stage
argument_list|)
expr_stmt|;
if|if
condition|(
name|task
operator|instanceof
name|ExecDriver
condition|)
block|{
comment|// populate map task
name|ExecDriver
name|mrTask
init|=
operator|(
name|ExecDriver
operator|)
name|task
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Task
name|mapTask
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Task
argument_list|()
decl_stmt|;
name|mapTask
operator|.
name|setTaskId
argument_list|(
name|stage
operator|.
name|getStageId
argument_list|()
operator|+
literal|"_MAP"
argument_list|)
expr_stmt|;
name|mapTask
operator|.
name|setTaskType
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
expr_stmt|;
name|stage
operator|.
name|addToTaskList
argument_list|(
name|mapTask
argument_list|)
expr_stmt|;
name|populateOperatorGraph
argument_list|(
name|mapTask
argument_list|,
name|mrTask
operator|.
name|getWork
argument_list|()
operator|.
name|getMapWork
argument_list|()
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
comment|// populate reduce task
if|if
condition|(
name|mrTask
operator|.
name|hasReduce
argument_list|()
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Task
name|reduceTask
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Task
argument_list|()
decl_stmt|;
name|reduceTask
operator|.
name|setTaskId
argument_list|(
name|stage
operator|.
name|getStageId
argument_list|()
operator|+
literal|"_REDUCE"
argument_list|)
expr_stmt|;
name|reduceTask
operator|.
name|setTaskType
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
expr_stmt|;
name|stage
operator|.
name|addToTaskList
argument_list|(
name|reduceTask
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|reducerTopOps
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|reducerTopOps
operator|.
name|add
argument_list|(
name|mrTask
operator|.
name|getWork
argument_list|()
operator|.
name|getReduceWork
argument_list|()
operator|.
name|getReducer
argument_list|()
argument_list|)
expr_stmt|;
name|populateOperatorGraph
argument_list|(
name|reduceTask
argument_list|,
name|reducerTopOps
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Task
name|otherTask
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Task
argument_list|()
decl_stmt|;
name|otherTask
operator|.
name|setTaskId
argument_list|(
name|stage
operator|.
name|getStageId
argument_list|()
operator|+
literal|"_OTHER"
argument_list|)
expr_stmt|;
name|otherTask
operator|.
name|setTaskType
argument_list|(
name|TaskType
operator|.
name|OTHER
argument_list|)
expr_stmt|;
name|stage
operator|.
name|addToTaskList
argument_list|(
name|otherTask
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|task
operator|instanceof
name|ConditionalTask
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Adjacency
name|listEntry
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Adjacency
argument_list|()
decl_stmt|;
name|listEntry
operator|.
name|setAdjacencyType
argument_list|(
name|AdjacencyType
operator|.
name|DISJUNCTIVE
argument_list|)
expr_stmt|;
name|listEntry
operator|.
name|setNode
argument_list|(
name|task
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ConditionalTask
name|t
init|=
operator|(
name|ConditionalTask
operator|)
name|task
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|listTask
range|:
name|t
operator|.
name|getListTasks
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|.
name|getChildTasks
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Adjacency
name|childEntry
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Adjacency
argument_list|()
decl_stmt|;
name|childEntry
operator|.
name|setAdjacencyType
argument_list|(
name|AdjacencyType
operator|.
name|DISJUNCTIVE
argument_list|)
expr_stmt|;
name|childEntry
operator|.
name|setNode
argument_list|(
name|listTask
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// done processing the task
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|childTask
range|:
name|t
operator|.
name|getChildTasks
argument_list|()
control|)
block|{
name|childEntry
operator|.
name|addToChildren
argument_list|(
name|childTask
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tasksVisited
operator|.
name|contains
argument_list|(
name|childTask
argument_list|)
condition|)
block|{
name|tasksToVisit
operator|.
name|add
argument_list|(
name|childTask
argument_list|)
expr_stmt|;
block|}
block|}
name|query
operator|.
name|getStageGraph
argument_list|()
operator|.
name|addToAdjacencyList
argument_list|(
name|childEntry
argument_list|)
expr_stmt|;
block|}
name|listEntry
operator|.
name|addToChildren
argument_list|(
name|listTask
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tasksVisited
operator|.
name|contains
argument_list|(
name|listTask
argument_list|)
condition|)
block|{
name|tasksToVisit
operator|.
name|add
argument_list|(
name|listTask
argument_list|)
expr_stmt|;
block|}
block|}
name|query
operator|.
name|getStageGraph
argument_list|()
operator|.
name|addToAdjacencyList
argument_list|(
name|listEntry
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|task
operator|.
name|getChildTasks
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Adjacency
name|entry
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Adjacency
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setAdjacencyType
argument_list|(
name|AdjacencyType
operator|.
name|CONJUNCTIVE
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setNode
argument_list|(
name|task
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// done processing the task
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|childTask
range|:
name|task
operator|.
name|getChildTasks
argument_list|()
control|)
block|{
name|entry
operator|.
name|addToChildren
argument_list|(
name|childTask
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tasksVisited
operator|.
name|contains
argument_list|(
name|childTask
argument_list|)
condition|)
block|{
name|tasksToVisit
operator|.
name|add
argument_list|(
name|childTask
argument_list|)
expr_stmt|;
block|}
block|}
name|query
operator|.
name|getStageGraph
argument_list|()
operator|.
name|addToAdjacencyList
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * From the counters extracted via extractCounters(), update the counters in    * the query plan.    */
specifier|private
name|void
name|updateCountersInQueryPlan
parameter_list|()
block|{
name|query
operator|.
name|setStarted
argument_list|(
name|started
operator|.
name|contains
argument_list|(
name|query
operator|.
name|getQueryId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setDone
argument_list|(
name|done
operator|.
name|contains
argument_list|(
name|query
operator|.
name|getQueryId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|query
operator|.
name|getStageList
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Stage
name|stage
range|:
name|query
operator|.
name|getStageList
argument_list|()
control|)
block|{
if|if
condition|(
name|stage
operator|.
name|getStageId
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|stage
operator|.
name|setStarted
argument_list|(
name|started
operator|.
name|contains
argument_list|(
name|stage
operator|.
name|getStageId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|stage
operator|.
name|setStageCounters
argument_list|(
name|counters
operator|.
name|get
argument_list|(
name|stage
operator|.
name|getStageId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|stage
operator|.
name|setDone
argument_list|(
name|done
operator|.
name|contains
argument_list|(
name|stage
operator|.
name|getStageId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Task
name|task
range|:
name|stage
operator|.
name|getTaskList
argument_list|()
control|)
block|{
name|task
operator|.
name|setTaskCounters
argument_list|(
name|counters
operator|.
name|get
argument_list|(
name|task
operator|.
name|getTaskId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|task
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|OTHER
condition|)
block|{
name|task
operator|.
name|setStarted
argument_list|(
name|started
operator|.
name|contains
argument_list|(
name|stage
operator|.
name|getStageId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|task
operator|.
name|setDone
argument_list|(
name|done
operator|.
name|contains
argument_list|(
name|stage
operator|.
name|getStageId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|task
operator|.
name|setStarted
argument_list|(
name|started
operator|.
name|contains
argument_list|(
name|task
operator|.
name|getTaskId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|task
operator|.
name|setDone
argument_list|(
name|done
operator|.
name|contains
argument_list|(
name|task
operator|.
name|getTaskId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|task
operator|.
name|getOperatorList
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Operator
name|op
range|:
name|task
operator|.
name|getOperatorList
argument_list|()
control|)
block|{
comment|// if the task has started, all operators within the task have
comment|// started
name|op
operator|.
name|setStarted
argument_list|(
name|started
operator|.
name|contains
argument_list|(
name|task
operator|.
name|getTaskId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// if the task is done, all operators are done as well
name|op
operator|.
name|setDone
argument_list|(
name|done
operator|.
name|contains
argument_list|(
name|task
operator|.
name|getTaskId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|/**    * Extract all the counters from tasks and operators.    */
specifier|private
name|void
name|extractCounters
parameter_list|()
throws|throws
name|IOException
block|{
name|Queue
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|tasksToVisit
init|=
operator|new
name|LinkedList
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|tasksVisited
init|=
operator|new
name|HashSet
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|tasksToVisit
operator|.
name|addAll
argument_list|(
name|rootTasks
argument_list|)
expr_stmt|;
while|while
condition|(
name|tasksToVisit
operator|.
name|peek
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
init|=
name|tasksToVisit
operator|.
name|remove
argument_list|()
decl_stmt|;
name|tasksVisited
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
comment|// add children to tasksToVisit
if|if
condition|(
name|task
operator|.
name|getChildTasks
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|childTask
range|:
name|task
operator|.
name|getChildTasks
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|tasksVisited
operator|.
name|contains
argument_list|(
name|childTask
argument_list|)
condition|)
block|{
name|tasksToVisit
operator|.
name|add
argument_list|(
name|childTask
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|task
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|started
operator|.
name|contains
argument_list|(
name|task
operator|.
name|getId
argument_list|()
argument_list|)
operator|&&
name|done
operator|.
name|contains
argument_list|(
name|task
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// get the counters for the task
name|counters
operator|.
name|put
argument_list|(
name|task
operator|.
name|getId
argument_list|()
argument_list|,
name|task
operator|.
name|getCounters
argument_list|()
argument_list|)
expr_stmt|;
comment|// check if task is started
if|if
condition|(
name|task
operator|.
name|started
argument_list|()
condition|)
block|{
name|started
operator|.
name|add
argument_list|(
name|task
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|task
operator|.
name|done
argument_list|()
condition|)
block|{
name|done
operator|.
name|add
argument_list|(
name|task
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|task
operator|instanceof
name|ExecDriver
condition|)
block|{
name|ExecDriver
name|mrTask
init|=
operator|(
name|ExecDriver
operator|)
name|task
decl_stmt|;
if|if
condition|(
name|mrTask
operator|.
name|mapStarted
argument_list|()
condition|)
block|{
name|started
operator|.
name|add
argument_list|(
name|task
operator|.
name|getId
argument_list|()
operator|+
literal|"_MAP"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mrTask
operator|.
name|mapDone
argument_list|()
condition|)
block|{
name|done
operator|.
name|add
argument_list|(
name|task
operator|.
name|getId
argument_list|()
operator|+
literal|"_MAP"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mrTask
operator|.
name|hasReduce
argument_list|()
condition|)
block|{
if|if
condition|(
name|mrTask
operator|.
name|reduceStarted
argument_list|()
condition|)
block|{
name|started
operator|.
name|add
argument_list|(
name|task
operator|.
name|getId
argument_list|()
operator|+
literal|"_REDUCE"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mrTask
operator|.
name|reduceDone
argument_list|()
condition|)
block|{
name|done
operator|.
name|add
argument_list|(
name|task
operator|.
name|getId
argument_list|()
operator|+
literal|"_REDUCE"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|task
operator|instanceof
name|ConditionalTask
condition|)
block|{
name|ConditionalTask
name|cTask
init|=
operator|(
name|ConditionalTask
operator|)
name|task
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|listTask
range|:
name|cTask
operator|.
name|getListTasks
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|tasksVisited
operator|.
name|contains
argument_list|(
name|listTask
argument_list|)
condition|)
block|{
name|tasksToVisit
operator|.
name|add
argument_list|(
name|listTask
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Query
name|getQueryPlan
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|query
operator|.
name|getStageGraph
argument_list|()
operator|==
literal|null
condition|)
block|{
name|populateQueryPlan
argument_list|()
expr_stmt|;
block|}
name|extractCounters
argument_list|()
expr_stmt|;
name|updateCountersInQueryPlan
argument_list|()
expr_stmt|;
return|return
name|query
return|;
block|}
specifier|public
name|String
name|getJSONValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|String
name|v
init|=
literal|"null"
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|v
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|v
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'['
operator|&&
name|v
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'{'
condition|)
block|{
name|v
operator|=
literal|"\""
operator|+
name|v
operator|+
literal|"\""
expr_stmt|;
block|}
block|}
return|return
name|v
return|;
block|}
specifier|public
name|String
name|getJSONKeyValue
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
literal|"\""
operator|+
name|key
operator|+
literal|"\":"
operator|+
name|getJSONValue
argument_list|(
name|value
argument_list|)
operator|+
literal|","
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|String
name|getJSONList
parameter_list|(
name|List
name|list
parameter_list|)
block|{
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
return|return
literal|"null"
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|entry
range|:
name|list
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getJSONValue
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|public
name|String
name|getJSONMap
parameter_list|(
name|Map
name|map
parameter_list|)
block|{
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
literal|"null"
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
operator|.
name|Entry
name|e
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|entry
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|Object
name|getJSONGraph
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Graph
name|graph
parameter_list|)
block|{
if|if
condition|(
name|graph
operator|==
literal|null
condition|)
block|{
return|return
literal|"null"
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"nodeType"
argument_list|,
name|graph
operator|.
name|getNodeType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"roots"
argument_list|,
name|getJSONList
argument_list|(
name|graph
operator|.
name|getRoots
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// adjacency list
name|List
argument_list|<
name|String
argument_list|>
name|adjList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|graph
operator|.
name|getAdjacencyList
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Adjacency
name|adj
range|:
name|graph
operator|.
name|getAdjacencyList
argument_list|()
control|)
block|{
name|adjList
operator|.
name|add
argument_list|(
name|getJSONAdjacency
argument_list|(
name|adj
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"adjacencyList"
argument_list|,
name|getJSONList
argument_list|(
name|adjList
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getJSONAdjacency
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Adjacency
name|adj
parameter_list|)
block|{
if|if
condition|(
name|adj
operator|==
literal|null
condition|)
block|{
return|return
literal|"null"
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"node"
argument_list|,
name|adj
operator|.
name|getNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"children"
argument_list|,
name|getJSONList
argument_list|(
name|adj
operator|.
name|getChildren
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"adjacencyType"
argument_list|,
name|adj
operator|.
name|getAdjacencyType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getJSONOperator
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Operator
name|op
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"operatorId"
argument_list|,
name|op
operator|.
name|getOperatorId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"operatorType"
argument_list|,
name|op
operator|.
name|getOperatorType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"operatorAttributes"
argument_list|,
name|getJSONMap
argument_list|(
name|op
operator|.
name|getOperatorAttributes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"operatorCounters"
argument_list|,
name|getJSONMap
argument_list|(
name|op
operator|.
name|getOperatorCounters
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"done"
argument_list|,
name|op
operator|.
name|isDone
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"started"
argument_list|,
name|op
operator|.
name|isStarted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getJSONTask
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Task
name|task
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"taskId"
argument_list|,
name|task
operator|.
name|getTaskId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"taskType"
argument_list|,
name|task
operator|.
name|getTaskType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"taskAttributes"
argument_list|,
name|getJSONMap
argument_list|(
name|task
operator|.
name|getTaskAttributes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"taskCounters"
argument_list|,
name|getJSONMap
argument_list|(
name|task
operator|.
name|getTaskCounters
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"operatorGraph"
argument_list|,
name|getJSONGraph
argument_list|(
name|task
operator|.
name|getOperatorGraph
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// operator list
name|List
argument_list|<
name|String
argument_list|>
name|opList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|task
operator|.
name|getOperatorList
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Operator
name|op
range|:
name|task
operator|.
name|getOperatorList
argument_list|()
control|)
block|{
name|opList
operator|.
name|add
argument_list|(
name|getJSONOperator
argument_list|(
name|op
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"operatorList"
argument_list|,
name|getJSONList
argument_list|(
name|opList
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"done"
argument_list|,
name|task
operator|.
name|isDone
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"started"
argument_list|,
name|task
operator|.
name|isStarted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getJSONStage
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Stage
name|stage
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"stageId"
argument_list|,
name|stage
operator|.
name|getStageId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"stageType"
argument_list|,
name|stage
operator|.
name|getStageType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"stageAttributes"
argument_list|,
name|getJSONMap
argument_list|(
name|stage
operator|.
name|getStageAttributes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"stageCounters"
argument_list|,
name|getJSONMap
argument_list|(
name|stage
operator|.
name|getStageCounters
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|taskList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|stage
operator|.
name|getTaskList
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Task
name|task
range|:
name|stage
operator|.
name|getTaskList
argument_list|()
control|)
block|{
name|taskList
operator|.
name|add
argument_list|(
name|getJSONTask
argument_list|(
name|task
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"taskList"
argument_list|,
name|getJSONList
argument_list|(
name|taskList
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"done"
argument_list|,
name|stage
operator|.
name|isDone
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"started"
argument_list|,
name|stage
operator|.
name|isStarted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getJSONQuery
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Query
name|query
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"queryId"
argument_list|,
name|query
operator|.
name|getQueryId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"queryType"
argument_list|,
name|query
operator|.
name|getQueryType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"queryAttributes"
argument_list|,
name|getJSONMap
argument_list|(
name|query
operator|.
name|getQueryAttributes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"queryCounters"
argument_list|,
name|getJSONMap
argument_list|(
name|query
operator|.
name|getQueryCounters
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"stageGraph"
argument_list|,
name|getJSONGraph
argument_list|(
name|query
operator|.
name|getStageGraph
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// stageList
name|List
argument_list|<
name|String
argument_list|>
name|stageList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|getStageList
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Stage
name|stage
range|:
name|query
operator|.
name|getStageList
argument_list|()
control|)
block|{
name|stageList
operator|.
name|add
argument_list|(
name|getJSONStage
argument_list|(
name|stage
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"stageList"
argument_list|,
name|getJSONList
argument_list|(
name|stageList
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"done"
argument_list|,
name|query
operator|.
name|isDone
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getJSONKeyValue
argument_list|(
literal|"started"
argument_list|,
name|query
operator|.
name|isStarted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isExplain
parameter_list|()
block|{
return|return
name|rootTasks
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|rootTasks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ExplainTask
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
try|try
block|{
return|return
name|getJSONQuery
argument_list|(
name|getQueryPlan
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
name|e
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
name|String
name|toThriftJSONString
parameter_list|()
throws|throws
name|IOException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Query
name|q
init|=
name|getQueryPlan
argument_list|()
decl_stmt|;
name|TMemoryBuffer
name|tmb
init|=
operator|new
name|TMemoryBuffer
argument_list|(
name|q
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|*
literal|5
argument_list|)
decl_stmt|;
name|TJSONProtocol
name|oprot
init|=
operator|new
name|TJSONProtocol
argument_list|(
name|tmb
argument_list|)
decl_stmt|;
try|try
block|{
name|q
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
name|q
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
name|tmb
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
return|;
block|}
specifier|public
name|String
name|toBinaryString
parameter_list|()
throws|throws
name|IOException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Query
name|q
init|=
name|getQueryPlan
argument_list|()
decl_stmt|;
name|TMemoryBuffer
name|tmb
init|=
operator|new
name|TMemoryBuffer
argument_list|(
name|q
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|*
literal|5
argument_list|)
decl_stmt|;
name|TBinaryProtocol
name|oprot
init|=
operator|new
name|TBinaryProtocol
argument_list|(
name|tmb
argument_list|)
decl_stmt|;
try|try
block|{
name|q
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
name|q
operator|.
name|toString
argument_list|()
return|;
block|}
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|tmb
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
name|tmb
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|tmb
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|buf
argument_list|)
return|;
comment|// return getQueryPlan().toString();
block|}
specifier|public
name|void
name|setStarted
parameter_list|()
block|{
name|started
operator|.
name|add
argument_list|(
name|queryId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDone
parameter_list|()
block|{
name|done
operator|.
name|add
argument_list|(
name|queryId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getStarted
parameter_list|()
block|{
return|return
name|started
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getDone
parameter_list|()
block|{
return|return
name|done
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|getRootTasks
parameter_list|()
block|{
return|return
name|rootTasks
return|;
block|}
specifier|public
name|void
name|setRootTasks
parameter_list|(
name|ArrayList
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
parameter_list|)
block|{
name|this
operator|.
name|rootTasks
operator|=
name|rootTasks
expr_stmt|;
block|}
specifier|public
name|boolean
name|isForExplain
parameter_list|()
block|{
return|return
name|rootTasks
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|rootTasks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ExplainTask
return|;
block|}
specifier|public
name|FetchTask
name|getFetchTask
parameter_list|()
block|{
return|return
name|fetchTask
return|;
block|}
specifier|public
name|void
name|setFetchTask
parameter_list|(
name|FetchTask
name|fetchTask
parameter_list|)
block|{
name|this
operator|.
name|fetchTask
operator|=
name|fetchTask
expr_stmt|;
block|}
specifier|public
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
name|getInputs
parameter_list|()
block|{
return|return
name|inputs
return|;
block|}
specifier|public
name|void
name|setInputs
parameter_list|(
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|)
block|{
name|this
operator|.
name|inputs
operator|=
name|inputs
expr_stmt|;
block|}
specifier|public
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
name|getOutputs
parameter_list|()
block|{
return|return
name|outputs
return|;
block|}
specifier|public
name|void
name|setOutputs
parameter_list|(
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|)
block|{
name|this
operator|.
name|outputs
operator|=
name|outputs
expr_stmt|;
block|}
specifier|public
name|Schema
name|getResultSchema
parameter_list|()
block|{
return|return
name|resultSchema
return|;
block|}
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getIdToTableNameMap
parameter_list|()
block|{
return|return
name|idToTableNameMap
return|;
block|}
specifier|public
name|void
name|setIdToTableNameMap
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|idToTableNameMap
parameter_list|)
block|{
name|this
operator|.
name|idToTableNameMap
operator|=
name|idToTableNameMap
expr_stmt|;
block|}
specifier|public
name|String
name|getQueryString
parameter_list|()
block|{
return|return
name|queryString
return|;
block|}
specifier|public
name|void
name|setQueryString
parameter_list|(
name|String
name|queryString
parameter_list|)
block|{
name|this
operator|.
name|queryString
operator|=
name|queryString
expr_stmt|;
block|}
specifier|public
name|String
name|getOptimizedQueryString
parameter_list|()
block|{
return|return
name|this
operator|.
name|optimizedQueryString
return|;
block|}
specifier|public
name|void
name|setOptimizedQueryString
parameter_list|(
name|String
name|optimizedQueryString
parameter_list|)
block|{
name|this
operator|.
name|optimizedQueryString
operator|=
name|optimizedQueryString
expr_stmt|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Query
name|getQuery
parameter_list|()
block|{
return|return
name|query
return|;
block|}
specifier|public
name|List
argument_list|<
name|ReducerTimeStatsPerJob
argument_list|>
name|getReducerTimeStatsPerJobList
parameter_list|()
block|{
return|return
name|this
operator|.
name|reducerTimeStatsPerJobList
return|;
block|}
specifier|public
name|void
name|setQuery
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Query
name|query
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|getCounters
parameter_list|()
block|{
return|return
name|counters
return|;
block|}
specifier|public
name|void
name|setQueryId
parameter_list|(
name|String
name|queryId
parameter_list|)
block|{
name|this
operator|.
name|queryId
operator|=
name|queryId
expr_stmt|;
block|}
comment|/**    * Gets the lineage information.    *    * @return LineageInfo associated with the query.    */
specifier|public
name|LineageInfo
name|getLineageInfo
parameter_list|()
block|{
return|return
name|linfo
return|;
block|}
comment|/**    * Sets the lineage information.    *    * @param linfo The LineageInfo structure that is set in the optimization phase.    */
specifier|public
name|void
name|setLineageInfo
parameter_list|(
name|LineageInfo
name|linfo
parameter_list|)
block|{
name|this
operator|.
name|linfo
operator|=
name|linfo
expr_stmt|;
block|}
comment|/**    * Gets the table access information.    *    * @return TableAccessInfo associated with the query.    */
specifier|public
name|TableAccessInfo
name|getTableAccessInfo
parameter_list|()
block|{
return|return
name|tableAccessInfo
return|;
block|}
comment|/**    * Sets the table access information.    *    * @param tableAccessInfo The TableAccessInfo structure that is set right before the optimization phase.    */
specifier|public
name|void
name|setTableAccessInfo
parameter_list|(
name|TableAccessInfo
name|tableAccessInfo
parameter_list|)
block|{
name|this
operator|.
name|tableAccessInfo
operator|=
name|tableAccessInfo
expr_stmt|;
block|}
comment|/**    * Gets the column access information.    *    * @return ColumnAccessInfo associated with the query.    */
specifier|public
name|ColumnAccessInfo
name|getColumnAccessInfo
parameter_list|()
block|{
return|return
name|columnAccessInfo
return|;
block|}
comment|/**    * Sets the column access information.    *    * @param columnAccessInfo The ColumnAccessInfo structure that is set immediately after    * the optimization phase.    */
specifier|public
name|void
name|setColumnAccessInfo
parameter_list|(
name|ColumnAccessInfo
name|columnAccessInfo
parameter_list|)
block|{
name|this
operator|.
name|columnAccessInfo
operator|=
name|columnAccessInfo
expr_stmt|;
block|}
specifier|public
name|QueryProperties
name|getQueryProperties
parameter_list|()
block|{
return|return
name|queryProperties
return|;
block|}
specifier|public
name|Long
name|getQueryStartTime
parameter_list|()
block|{
return|return
name|queryStartTime
return|;
block|}
specifier|public
name|void
name|setQueryStartTime
parameter_list|(
name|Long
name|queryStartTime
parameter_list|)
block|{
name|this
operator|.
name|queryStartTime
operator|=
name|queryStartTime
expr_stmt|;
block|}
specifier|public
name|String
name|getOperationName
parameter_list|()
block|{
return|return
name|operation
operator|==
literal|null
condition|?
literal|null
else|:
name|operation
operator|.
name|getOperationName
argument_list|()
return|;
block|}
specifier|public
name|HiveOperation
name|getOperation
parameter_list|()
block|{
return|return
name|operation
return|;
block|}
specifier|public
name|Boolean
name|getAutoCommitValue
parameter_list|()
block|{
return|return
name|autoCommitValue
return|;
block|}
specifier|public
name|String
name|getCboInfo
parameter_list|()
block|{
return|return
name|cboInfo
return|;
block|}
block|}
end_class

end_unit

