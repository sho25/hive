begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|index
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FilterOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AggregationDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDescUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FilterDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|GroupByDesc
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_comment
comment|/**  * Factory of methods used by {@link RewriteGBUsingIndex}  * to determine if the rewrite optimization can be applied to the input query.  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|RewriteCanApplyProcFactory
block|{
comment|/**    * Check for conditions in FilterOperator that do not meet rewrite criteria.    */
specifier|private
specifier|static
class|class
name|CheckFilterProc
implements|implements
name|NodeProcessor
block|{
specifier|private
name|TableScanOperator
name|topOp
decl_stmt|;
specifier|public
name|CheckFilterProc
parameter_list|(
name|TableScanOperator
name|topOp
parameter_list|)
block|{
name|this
operator|.
name|topOp
operator|=
name|topOp
expr_stmt|;
block|}
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|FilterOperator
name|operator
init|=
operator|(
name|FilterOperator
operator|)
name|nd
decl_stmt|;
name|RewriteCanApplyCtx
name|canApplyCtx
init|=
operator|(
name|RewriteCanApplyCtx
operator|)
name|ctx
decl_stmt|;
name|FilterDesc
name|conf
init|=
name|operator
operator|.
name|getConf
argument_list|()
decl_stmt|;
comment|//The filter operator should have a predicate of ExprNodeGenericFuncDesc type.
comment|//This represents the comparison operator
name|ExprNodeDesc
name|oldengfd
init|=
name|conf
operator|.
name|getPredicate
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldengfd
operator|==
literal|null
condition|)
block|{
name|canApplyCtx
operator|.
name|setWhrClauseColsFetchException
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|ExprNodeDesc
name|backtrack
init|=
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|oldengfd
argument_list|,
name|operator
argument_list|,
name|topOp
argument_list|)
decl_stmt|;
if|if
condition|(
name|backtrack
operator|==
literal|null
condition|)
block|{
name|canApplyCtx
operator|.
name|setWhrClauseColsFetchException
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|//Add the predicate columns to RewriteCanApplyCtx's predColRefs list to check later
comment|//if index keys contain all filter predicate columns and vice-a-versa
for|for
control|(
name|String
name|col
range|:
name|backtrack
operator|.
name|getCols
argument_list|()
control|)
block|{
name|canApplyCtx
operator|.
name|getPredicateColumnsList
argument_list|()
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|CheckFilterProc
name|canApplyOnFilterOperator
parameter_list|(
name|TableScanOperator
name|topOp
parameter_list|)
block|{
return|return
operator|new
name|CheckFilterProc
argument_list|(
name|topOp
argument_list|)
return|;
block|}
comment|/**    * Check for conditions in GroupByOperator that do not meet rewrite criteria.    *    */
specifier|private
specifier|static
class|class
name|CheckGroupByProc
implements|implements
name|NodeProcessor
block|{
specifier|private
name|TableScanOperator
name|topOp
decl_stmt|;
specifier|public
name|CheckGroupByProc
parameter_list|(
name|TableScanOperator
name|topOp
parameter_list|)
block|{
name|this
operator|.
name|topOp
operator|=
name|topOp
expr_stmt|;
block|}
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|GroupByOperator
name|operator
init|=
operator|(
name|GroupByOperator
operator|)
name|nd
decl_stmt|;
name|RewriteCanApplyCtx
name|canApplyCtx
init|=
operator|(
name|RewriteCanApplyCtx
operator|)
name|ctx
decl_stmt|;
comment|//for each group-by clause in query, only one GroupByOperator of the
comment|//GBY-RS-GBY sequence is stored in  getGroupOpToInputTables
comment|//we need to process only this operator
comment|//Also, we do not rewrite for cases when same query branch has multiple group-by constructs
if|if
condition|(
name|canApplyCtx
operator|.
name|getParseContext
argument_list|()
operator|.
name|getGroupOpToInputTables
argument_list|()
operator|.
name|containsKey
argument_list|(
name|operator
argument_list|)
operator|&&
operator|!
name|canApplyCtx
operator|.
name|isQueryHasGroupBy
argument_list|()
condition|)
block|{
name|canApplyCtx
operator|.
name|setQueryHasGroupBy
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|GroupByDesc
name|conf
init|=
name|operator
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AggregationDesc
argument_list|>
name|aggrList
init|=
name|conf
operator|.
name|getAggregators
argument_list|()
decl_stmt|;
if|if
condition|(
name|aggrList
operator|!=
literal|null
operator|&&
name|aggrList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|AggregationDesc
name|aggregationDesc
range|:
name|aggrList
control|)
block|{
name|canApplyCtx
operator|.
name|setAggFuncCnt
argument_list|(
name|canApplyCtx
operator|.
name|getAggFuncCnt
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|//In the current implementation, we do not support more than 1 agg funcs in group-by
if|if
condition|(
name|canApplyCtx
operator|.
name|getAggFuncCnt
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|aggFunc
init|=
name|aggregationDesc
operator|.
name|getGenericUDAFName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
literal|"count"
operator|.
name|equals
argument_list|(
name|aggFunc
argument_list|)
operator|)
condition|)
block|{
name|canApplyCtx
operator|.
name|setAggFuncIsNotCount
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|para
init|=
name|aggregationDesc
operator|.
name|getParameters
argument_list|()
decl_stmt|;
comment|//for a valid aggregation, it needs to have non-null parameter list
if|if
condition|(
name|para
operator|==
literal|null
condition|)
block|{
name|canApplyCtx
operator|.
name|setAggFuncColsFetchException
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|para
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|//count(*) case
name|canApplyCtx
operator|.
name|setCountOnAllCols
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|canApplyCtx
operator|.
name|setAggFunction
argument_list|(
literal|"_count_of_all"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|para
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|ExprNodeDesc
name|expr
init|=
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|para
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|operator
argument_list|,
name|topOp
argument_list|)
decl_stmt|;
if|if
condition|(
name|expr
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
comment|//Add the columns to RewriteCanApplyCtx's selectColumnsList list
comment|//to check later if index keys contain all select clause columns
comment|//and vice-a-versa. We get the select column 'actual' names only here
comment|//if we have a agg func along with group-by
comment|//SelectOperator has internal names in its colList data structure
name|canApplyCtx
operator|.
name|getSelectColumnsList
argument_list|()
operator|.
name|add
argument_list|(
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|expr
operator|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
comment|//Add the columns to RewriteCanApplyCtx's aggFuncColList list to check later
comment|//if columns contained in agg func are index key columns
name|canApplyCtx
operator|.
name|getAggFuncColList
argument_list|()
operator|.
name|add
argument_list|(
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|expr
operator|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|canApplyCtx
operator|.
name|setAggFunction
argument_list|(
literal|"_count_of_"
operator|+
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|expr
operator|)
operator|.
name|getColumn
argument_list|()
operator|+
literal|""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expr
operator|instanceof
name|ExprNodeConstantDesc
condition|)
block|{
comment|//count(1) case
name|canApplyCtx
operator|.
name|setCountOfOne
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|canApplyCtx
operator|.
name|setAggFunction
argument_list|(
literal|"_count_of_1"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Invalid number of arguments for count"
argument_list|)
throw|;
block|}
block|}
block|}
comment|//we need to have non-null group-by keys for a valid group-by operator
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keyList
init|=
name|conf
operator|.
name|getKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyList
operator|==
literal|null
operator|||
name|keyList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|canApplyCtx
operator|.
name|setGbyKeysFetchException
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ExprNodeDesc
name|expr
range|:
name|keyList
control|)
block|{
name|checkExpression
argument_list|(
name|canApplyCtx
argument_list|,
name|expr
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|checkExpression
parameter_list|(
name|RewriteCanApplyCtx
name|canApplyCtx
parameter_list|,
name|ExprNodeDesc
name|expr
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
comment|//Add the group-by keys to RewriteCanApplyCtx's gbKeyNameList list to check later
comment|//if all keys are from index columns
name|canApplyCtx
operator|.
name|getGbKeyNameList
argument_list|()
operator|.
name|addAll
argument_list|(
name|expr
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expr
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
name|ExprNodeGenericFuncDesc
name|funcExpr
init|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|expr
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childExprs
init|=
name|funcExpr
operator|.
name|getChildren
argument_list|()
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|childExpr
range|:
name|childExprs
control|)
block|{
if|if
condition|(
name|childExpr
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|canApplyCtx
operator|.
name|getGbKeyNameList
argument_list|()
operator|.
name|addAll
argument_list|(
name|expr
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
name|canApplyCtx
operator|.
name|getSelectColumnsList
argument_list|()
operator|.
name|add
argument_list|(
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|childExpr
operator|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|childExpr
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
name|checkExpression
argument_list|(
name|canApplyCtx
argument_list|,
name|childExpr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|CheckGroupByProc
name|canApplyOnGroupByOperator
parameter_list|(
name|TableScanOperator
name|topOp
parameter_list|)
block|{
return|return
operator|new
name|CheckGroupByProc
argument_list|(
name|topOp
argument_list|)
return|;
block|}
block|}
end_class

end_unit

