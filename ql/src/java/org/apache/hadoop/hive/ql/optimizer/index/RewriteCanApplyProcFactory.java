begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|index
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AggregationDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDescUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|GroupByDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_comment
comment|/**  * Factory of methods used by {@link RewriteGBUsingIndex}  * to determine if the rewrite optimization can be applied to the input query.  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|RewriteCanApplyProcFactory
block|{
specifier|public
specifier|static
name|CheckTableScanProc
name|canApplyOnTableScanOperator
parameter_list|(
name|TableScanOperator
name|topOp
parameter_list|)
block|{
return|return
operator|new
name|CheckTableScanProc
argument_list|()
return|;
block|}
specifier|private
specifier|static
class|class
name|CheckTableScanProc
implements|implements
name|NodeProcessor
block|{
specifier|public
name|CheckTableScanProc
parameter_list|()
block|{     }
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|RewriteCanApplyCtx
name|canApplyCtx
init|=
operator|(
name|RewriteCanApplyCtx
operator|)
name|ctx
decl_stmt|;
for|for
control|(
name|Node
name|node
range|:
name|stack
control|)
block|{
comment|// For table scan operator,
comment|// check ReferencedColumns to make sure that only the index column is
comment|// selected for the following operators.
if|if
condition|(
name|node
operator|instanceof
name|TableScanOperator
condition|)
block|{
name|TableScanOperator
name|ts
init|=
operator|(
name|TableScanOperator
operator|)
name|node
decl_stmt|;
name|canApplyCtx
operator|.
name|setTableScanOperator
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|selectColumns
init|=
name|ts
operator|.
name|getConf
argument_list|()
operator|.
name|getReferencedColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|selectColumns
operator|==
literal|null
operator|||
name|selectColumns
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|canApplyCtx
operator|.
name|setSelClauseColsFetchException
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|canApplyCtx
operator|.
name|setIndexKey
argument_list|(
name|selectColumns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|SelectOperator
condition|)
block|{
comment|// For select operators in the stack, we just add them
if|if
condition|(
name|canApplyCtx
operator|.
name|getSelectOperators
argument_list|()
operator|==
literal|null
condition|)
block|{
name|canApplyCtx
operator|.
name|setSelectOperators
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|SelectOperator
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|canApplyCtx
operator|.
name|getSelectOperators
argument_list|()
operator|.
name|add
argument_list|(
operator|(
name|SelectOperator
operator|)
name|node
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|GroupByOperator
condition|)
block|{
if|if
condition|(
name|canApplyCtx
operator|.
name|getGroupByOperators
argument_list|()
operator|==
literal|null
condition|)
block|{
name|canApplyCtx
operator|.
name|setGroupByOperators
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|GroupByOperator
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// According to the pre-order,
comment|// the first GroupbyOperator is the one before RS
comment|// and the second one is the one after RS
name|GroupByOperator
name|operator
init|=
operator|(
name|GroupByOperator
operator|)
name|node
decl_stmt|;
name|canApplyCtx
operator|.
name|getGroupByOperators
argument_list|()
operator|.
name|add
argument_list|(
name|operator
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|canApplyCtx
operator|.
name|isQueryHasGroupBy
argument_list|()
condition|)
block|{
name|canApplyCtx
operator|.
name|setQueryHasGroupBy
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|GroupByDesc
name|conf
init|=
name|operator
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AggregationDesc
argument_list|>
name|aggrList
init|=
name|conf
operator|.
name|getAggregators
argument_list|()
decl_stmt|;
if|if
condition|(
name|aggrList
operator|==
literal|null
operator|||
name|aggrList
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
operator|!
operator|(
literal|"count"
operator|.
name|equals
argument_list|(
name|aggrList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGenericUDAFName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
comment|// In the current implementation, we make sure that only count is
comment|// in the function
name|canApplyCtx
operator|.
name|setAggFuncIsNotCount
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|para
init|=
name|aggrList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|para
operator|==
literal|null
operator|||
name|para
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
name|para
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|canApplyCtx
operator|.
name|setAggParameterException
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|ExprNodeDesc
name|expr
init|=
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|para
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|operator
argument_list|,
operator|(
name|Operator
argument_list|<
name|OperatorDesc
argument_list|>
operator|)
name|stack
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|expr
operator|instanceof
name|ExprNodeColumnDesc
operator|)
condition|)
block|{
name|canApplyCtx
operator|.
name|setAggParameterException
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

