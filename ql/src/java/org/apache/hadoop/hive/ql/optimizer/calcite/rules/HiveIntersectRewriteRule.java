begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Intersect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|CalciteSemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|TraitsUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveIntersect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveRelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveTableFunctionScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|translator
operator|.
name|SqlFunctionConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|translator
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|minlog
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Planner rule that rewrite  * {@link org.apache.hadoop.hive.ql.optimizer.calcite.reloperators.HiveIntersect}  * Rewrite: (GB-Union All-GB)-GB-UDTF (on all attributes)       Example: R1 Intersect All R2     R3 = GB(R1 on all attributes + count() as c) union all GB(R2 on all attributes + count() as c)     R4 = GB(R3 on all attributes + count(c) as cnt  + min(c) as m)     R5 = Fil ( cnt == #branch )          If it is intersect all then     R6 = UDTF (R5) which will explode the tuples based on min(c).     R7 = Proj(R6 on all attributes)     Else     R6 = Proj(R5 on all attributes) else  */
end_comment

begin_class
specifier|public
class|class
name|HiveIntersectRewriteRule
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|HiveIntersectRewriteRule
name|INSTANCE
init|=
operator|new
name|HiveIntersectRewriteRule
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveIntersectRewriteRule
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// ~ Constructors -----------------------------------------------------------
specifier|private
name|HiveIntersectRewriteRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|HiveIntersect
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// ~ Methods ----------------------------------------------------------------
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|HiveIntersect
name|hiveIntersect
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RelOptCluster
name|cluster
init|=
name|hiveIntersect
operator|.
name|getCluster
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|int
name|numOfBranch
init|=
name|hiveIntersect
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|Builder
argument_list|<
name|RelNode
argument_list|>
name|bldr
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelNode
argument_list|>
argument_list|()
decl_stmt|;
comment|// 1st level GB: create a GB (col0, col1, count(1) as c) for each branch
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|numOfBranch
condition|;
name|index
operator|++
control|)
block|{
name|RelNode
name|input
init|=
name|hiveIntersect
operator|.
name|getInputs
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|gbChildProjLst
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|groupSetPositions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|cInd
init|=
literal|0
init|;
name|cInd
operator|<
name|input
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|cInd
operator|++
control|)
block|{
name|gbChildProjLst
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|input
argument_list|,
name|cInd
argument_list|)
argument_list|)
expr_stmt|;
name|groupSetPositions
operator|.
name|add
argument_list|(
name|cInd
argument_list|)
expr_stmt|;
block|}
name|gbChildProjLst
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeBigintLiteral
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// create the project before GB because we need a new project with extra column '1'.
name|RelNode
name|gbInputRel
init|=
literal|null
decl_stmt|;
try|try
block|{
name|gbInputRel
operator|=
name|HiveProject
operator|.
name|create
argument_list|(
name|input
argument_list|,
name|gbChildProjLst
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CalciteSemanticException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// groupSetPosition includes all the positions
specifier|final
name|ImmutableBitSet
name|groupSet
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|groupSetPositions
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggregateCalls
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|RelDataType
name|aggFnRetType
init|=
name|TypeConverter
operator|.
name|convert
argument_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|,
name|cluster
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
decl_stmt|;
comment|// count(1), 1's position is input.getRowType().getFieldList().size()
name|AggregateCall
name|aggregateCall
init|=
name|HiveCalciteUtil
operator|.
name|createSingleArgAggCall
argument_list|(
literal|"count"
argument_list|,
name|cluster
argument_list|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|,
name|input
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|aggFnRetType
argument_list|)
decl_stmt|;
name|aggregateCalls
operator|.
name|add
argument_list|(
name|aggregateCall
argument_list|)
expr_stmt|;
name|HiveRelNode
name|aggregateRel
init|=
operator|new
name|HiveAggregate
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|HiveRelNode
operator|.
name|CONVENTION
argument_list|)
argument_list|,
name|gbInputRel
argument_list|,
literal|false
argument_list|,
name|groupSet
argument_list|,
literal|null
argument_list|,
name|aggregateCalls
argument_list|)
decl_stmt|;
name|bldr
operator|.
name|add
argument_list|(
name|aggregateRel
argument_list|)
expr_stmt|;
block|}
comment|// create a union above all the branches
name|HiveRelNode
name|union
init|=
operator|new
name|HiveUnion
argument_list|(
name|cluster
argument_list|,
name|TraitsUtil
operator|.
name|getDefaultTraitSet
argument_list|(
name|cluster
argument_list|)
argument_list|,
name|bldr
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
comment|// 2nd level GB: create a GB (col0, col1, count(c)) for each branch
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|groupSetPositions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// the index of c
name|int
name|cInd
init|=
name|union
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|union
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
name|index
operator|!=
name|cInd
condition|)
block|{
name|groupSetPositions
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggregateCalls
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|RelDataType
name|aggFnRetType
init|=
name|TypeConverter
operator|.
name|convert
argument_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|,
name|cluster
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
decl_stmt|;
name|AggregateCall
name|aggregateCall
init|=
name|HiveCalciteUtil
operator|.
name|createSingleArgAggCall
argument_list|(
literal|"count"
argument_list|,
name|cluster
argument_list|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|,
name|cInd
argument_list|,
name|aggFnRetType
argument_list|)
decl_stmt|;
name|aggregateCalls
operator|.
name|add
argument_list|(
name|aggregateCall
argument_list|)
expr_stmt|;
if|if
condition|(
name|hiveIntersect
operator|.
name|all
condition|)
block|{
name|aggregateCall
operator|=
name|HiveCalciteUtil
operator|.
name|createSingleArgAggCall
argument_list|(
literal|"min"
argument_list|,
name|cluster
argument_list|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|,
name|cInd
argument_list|,
name|aggFnRetType
argument_list|)
expr_stmt|;
name|aggregateCalls
operator|.
name|add
argument_list|(
name|aggregateCall
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ImmutableBitSet
name|groupSet
init|=
name|ImmutableBitSet
operator|.
name|of
argument_list|(
name|groupSetPositions
argument_list|)
decl_stmt|;
name|HiveRelNode
name|aggregateRel
init|=
operator|new
name|HiveAggregate
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|HiveRelNode
operator|.
name|CONVENTION
argument_list|)
argument_list|,
name|union
argument_list|,
literal|false
argument_list|,
name|groupSet
argument_list|,
literal|null
argument_list|,
name|aggregateCalls
argument_list|)
decl_stmt|;
comment|// add a filter count(c) = #branches
name|int
name|countInd
init|=
name|cInd
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|childRexNodeLst
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
name|RexInputRef
name|ref
init|=
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|aggregateRel
argument_list|,
name|countInd
argument_list|)
decl_stmt|;
name|RexLiteral
name|literal
init|=
name|rexBuilder
operator|.
name|makeBigintLiteral
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|numOfBranch
argument_list|)
argument_list|)
decl_stmt|;
name|childRexNodeLst
operator|.
name|add
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|childRexNodeLst
operator|.
name|add
argument_list|(
name|literal
argument_list|)
expr_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelDataType
argument_list|>
name|calciteArgTypesBldr
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelDataType
argument_list|>
argument_list|()
decl_stmt|;
name|calciteArgTypesBldr
operator|.
name|add
argument_list|(
name|TypeConverter
operator|.
name|convert
argument_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|,
name|cluster
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|calciteArgTypesBldr
operator|.
name|add
argument_list|(
name|TypeConverter
operator|.
name|convert
argument_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|,
name|cluster
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RexNode
name|factoredFilterExpr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|factoredFilterExpr
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlFunctionConverter
operator|.
name|getCalciteFn
argument_list|(
literal|"="
argument_list|,
name|calciteArgTypesBldr
operator|.
name|build
argument_list|()
argument_list|,
name|TypeConverter
operator|.
name|convert
argument_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|,
name|cluster
operator|.
name|getTypeFactory
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|,
name|childRexNodeLst
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CalciteSemanticException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|RelNode
name|filterRel
init|=
operator|new
name|HiveFilter
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|HiveRelNode
operator|.
name|CONVENTION
argument_list|)
argument_list|,
name|aggregateRel
argument_list|,
name|factoredFilterExpr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hiveIntersect
operator|.
name|all
condition|)
block|{
comment|// the schema for intersect distinct is like this
comment|// R3 on all attributes + count(c) as cnt
comment|// finally add a project to project out the last column
name|Set
argument_list|<
name|Integer
argument_list|>
name|projectOutColumnPositions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|projectOutColumnPositions
operator|.
name|add
argument_list|(
name|filterRel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|call
operator|.
name|transformTo
argument_list|(
name|HiveCalciteUtil
operator|.
name|createProjectWithoutColumn
argument_list|(
name|filterRel
argument_list|,
name|projectOutColumnPositions
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CalciteSemanticException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// the schema for intersect all is like this
comment|// R3 + count(c) as cnt + min(c) as m
comment|// we create a input project for udtf whose schema is like this
comment|// min(c) as m + R3
name|List
argument_list|<
name|RexNode
argument_list|>
name|originalInputRefs
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|filterRel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|RelDataTypeField
argument_list|,
name|RexNode
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RexNode
name|apply
parameter_list|(
name|RelDataTypeField
name|input
parameter_list|)
block|{
return|return
operator|new
name|RexInputRef
argument_list|(
name|input
operator|.
name|getIndex
argument_list|()
argument_list|,
name|input
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|copyInputRefs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|copyInputRefs
operator|.
name|add
argument_list|(
name|originalInputRefs
operator|.
name|get
argument_list|(
name|originalInputRefs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|originalInputRefs
operator|.
name|size
argument_list|()
operator|-
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|copyInputRefs
operator|.
name|add
argument_list|(
name|originalInputRefs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RelNode
name|srcRel
init|=
literal|null
decl_stmt|;
try|try
block|{
name|srcRel
operator|=
name|HiveProject
operator|.
name|create
argument_list|(
name|filterRel
argument_list|,
name|copyInputRefs
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|HiveTableFunctionScan
name|udtf
init|=
name|HiveCalciteUtil
operator|.
name|createUDTFForSetOp
argument_list|(
name|cluster
argument_list|,
name|srcRel
argument_list|)
decl_stmt|;
comment|// finally add a project to project out the 1st column
name|Set
argument_list|<
name|Integer
argument_list|>
name|projectOutColumnPositions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|projectOutColumnPositions
operator|.
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|HiveCalciteUtil
operator|.
name|createProjectWithoutColumn
argument_list|(
name|udtf
argument_list|,
name|projectOutColumnPositions
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

