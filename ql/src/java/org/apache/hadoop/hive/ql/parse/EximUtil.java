begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TJSONProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_comment
comment|/**  *  * EximUtil. Utility methods for the export/import semantic  * analyzers.  *  */
end_comment

begin_class
specifier|public
class|class
name|EximUtil
block|{
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|EximUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|EximUtil
parameter_list|()
block|{   }
comment|/**    * Initialize the URI where the exported data collection is    * to created for export, or is present for import    */
specifier|static
name|URI
name|getValidatedURI
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|dcPath
parameter_list|)
throws|throws
name|SemanticException
block|{
try|try
block|{
name|boolean
name|testMode
init|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETESTMODE
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
operator|new
name|Path
argument_list|(
name|dcPath
argument_list|)
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|String
name|scheme
init|=
name|uri
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|String
name|authority
init|=
name|uri
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|uri
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Path before norm :"
operator|+
name|path
argument_list|)
expr_stmt|;
comment|// generate absolute path relative to home directory
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
if|if
condition|(
name|testMode
condition|)
block|{
name|path
operator|=
operator|(
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"build.dir.hive"
argument_list|)
argument_list|,
name|path
argument_list|)
operator|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
operator|(
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
argument_list|,
name|path
argument_list|)
operator|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
block|}
comment|// set correct scheme and authority
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
if|if
condition|(
name|testMode
condition|)
block|{
name|scheme
operator|=
literal|"pfile"
expr_stmt|;
block|}
else|else
block|{
name|scheme
operator|=
literal|"hdfs"
expr_stmt|;
block|}
block|}
comment|// if scheme is specified but not authority then use the default
comment|// authority
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|authority
argument_list|)
condition|)
block|{
name|URI
name|defaultURI
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|authority
operator|=
name|defaultURI
operator|.
name|getAuthority
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Scheme:"
operator|+
name|scheme
operator|+
literal|", authority:"
operator|+
name|authority
operator|+
literal|", path:"
operator|+
name|path
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|eximSchemes
init|=
name|conf
operator|.
name|getStringCollection
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXIM_URI_SCHEME_WL
operator|.
name|varname
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|eximSchemes
operator|.
name|contains
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_PATH
operator|.
name|getMsg
argument_list|(
literal|"only the following file systems accepted for export/import : "
operator|+
name|conf
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXIM_URI_SCHEME_WL
operator|.
name|varname
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
try|try
block|{
return|return
operator|new
name|URI
argument_list|(
name|scheme
argument_list|,
name|authority
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_PATH
operator|.
name|getMsg
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|GENERIC_ERROR
operator|.
name|getMsg
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|static
name|void
name|validateTable
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
name|table
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|table
operator|.
name|isOffline
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|OFFLINE_TABLE_OR_PARTITION
operator|.
name|getMsg
argument_list|(
literal|":Table "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|table
operator|.
name|isView
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|DML_AGAINST_VIEW
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|table
operator|.
name|isNonNative
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|EXIM_FOR_NON_NATIVE
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|relativeToAbsolutePath
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|SemanticException
block|{
name|boolean
name|testMode
init|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETESTMODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|testMode
condition|)
block|{
name|URI
name|uri
init|=
operator|new
name|Path
argument_list|(
name|location
argument_list|)
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|String
name|scheme
init|=
name|uri
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|String
name|authority
init|=
name|uri
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|uri
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
operator|(
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"build.dir.hive"
argument_list|)
argument_list|,
name|path
argument_list|)
operator|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
name|scheme
operator|=
literal|"pfile"
expr_stmt|;
block|}
try|try
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|scheme
argument_list|,
name|authority
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_PATH
operator|.
name|getMsg
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|uri
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
comment|//no-op for non-test mode for now
return|return
name|location
return|;
block|}
block|}
comment|/* major version number should match for backward compatibility */
specifier|public
specifier|static
specifier|final
name|String
name|METADATA_FORMAT_VERSION
init|=
literal|"0.1"
decl_stmt|;
comment|/* If null, then the major version number should match */
specifier|public
specifier|static
specifier|final
name|String
name|METADATA_FORMAT_FORWARD_COMPATIBLE_VERSION
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|void
name|createExportDump
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|metadataPath
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
name|tableHandle
parameter_list|,
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
argument_list|>
name|partitions
parameter_list|)
throws|throws
name|SemanticException
throws|,
name|IOException
block|{
try|try
block|{
name|JSONObject
name|jsonContainer
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|jsonContainer
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|METADATA_FORMAT_VERSION
argument_list|)
expr_stmt|;
if|if
condition|(
name|METADATA_FORMAT_FORWARD_COMPATIBLE_VERSION
operator|!=
literal|null
condition|)
block|{
name|jsonContainer
operator|.
name|put
argument_list|(
literal|"fcversion"
argument_list|,
name|METADATA_FORMAT_FORWARD_COMPATIBLE_VERSION
argument_list|)
expr_stmt|;
block|}
name|TSerializer
name|serializer
init|=
operator|new
name|TSerializer
argument_list|(
operator|new
name|TJSONProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|tableDesc
init|=
name|serializer
operator|.
name|toString
argument_list|(
name|tableHandle
operator|.
name|getTTable
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|jsonContainer
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|tableDesc
argument_list|)
expr_stmt|;
name|JSONArray
name|jsonPartitions
init|=
operator|new
name|JSONArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|partitions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
name|String
name|partDesc
init|=
name|serializer
operator|.
name|toString
argument_list|(
name|partition
operator|.
name|getTPartition
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|jsonPartitions
operator|.
name|put
argument_list|(
name|partDesc
argument_list|)
expr_stmt|;
block|}
block|}
name|jsonContainer
operator|.
name|put
argument_list|(
literal|"partitions"
argument_list|,
name|jsonPartitions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|GENERIC_ERROR
operator|.
name|getMsg
argument_list|(
literal|"Exception while serializing the metastore objects"
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|OutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|metadataPath
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|jsonContainer
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|GENERIC_ERROR
operator|.
name|getMsg
argument_list|(
literal|"Error in serializing metadata"
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Map
operator|.
name|Entry
argument_list|<
name|Table
argument_list|,
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|readMetaData
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|metadataPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|SemanticException
block|{
name|FSDataInputStream
name|mdstream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|mdstream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|metadataPath
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|ByteArrayOutputStream
name|sb
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|read
init|=
name|mdstream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
while|while
condition|(
name|read
operator|!=
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|read
operator|=
name|mdstream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
name|String
name|md
init|=
operator|new
name|String
argument_list|(
name|sb
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|JSONObject
name|jsonContainer
init|=
operator|new
name|JSONObject
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|String
name|version
init|=
name|jsonContainer
operator|.
name|getString
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
name|String
name|fcversion
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fcversion
operator|=
name|jsonContainer
operator|.
name|getString
argument_list|(
literal|"fcversion"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|ignored
parameter_list|)
block|{}
name|checkCompatibility
argument_list|(
name|version
argument_list|,
name|fcversion
argument_list|)
expr_stmt|;
name|String
name|tableDesc
init|=
name|jsonContainer
operator|.
name|getString
argument_list|(
literal|"table"
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|TDeserializer
name|deserializer
init|=
operator|new
name|TDeserializer
argument_list|(
operator|new
name|TJSONProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
decl_stmt|;
name|deserializer
operator|.
name|deserialize
argument_list|(
name|table
argument_list|,
name|tableDesc
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|JSONArray
name|jsonPartitions
init|=
operator|new
name|JSONArray
argument_list|(
name|jsonContainer
operator|.
name|getString
argument_list|(
literal|"partitions"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitionsList
init|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|(
name|jsonPartitions
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jsonPartitions
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|String
name|partDesc
init|=
name|jsonPartitions
operator|.
name|getString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Partition
name|partition
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|deserializer
operator|.
name|deserialize
argument_list|(
name|partition
argument_list|,
name|partDesc
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|partitionsList
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<
name|Table
argument_list|,
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
argument_list|(
name|table
argument_list|,
name|partitionsList
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|GENERIC_ERROR
operator|.
name|getMsg
argument_list|(
literal|"Error in serializing metadata"
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|GENERIC_ERROR
operator|.
name|getMsg
argument_list|(
literal|"Error in serializing metadata"
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|mdstream
operator|!=
literal|null
condition|)
block|{
name|mdstream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/* check the forward and backward compatibility */
specifier|private
specifier|static
name|void
name|checkCompatibility
parameter_list|(
name|String
name|version
parameter_list|,
name|String
name|fcVersion
parameter_list|)
throws|throws
name|SemanticException
block|{
name|doCheckCompatibility
argument_list|(
name|METADATA_FORMAT_VERSION
argument_list|,
name|version
argument_list|,
name|fcVersion
argument_list|)
expr_stmt|;
block|}
comment|/* check the forward and backward compatibility */
specifier|public
specifier|static
name|void
name|doCheckCompatibility
parameter_list|(
name|String
name|currVersion
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|fcVersion
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_METADATA
operator|.
name|getMsg
argument_list|(
literal|"Version number missing"
argument_list|)
argument_list|)
throw|;
block|}
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|version
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
name|int
name|data_major
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|st
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
name|StringTokenizer
name|st2
init|=
operator|new
name|StringTokenizer
argument_list|(
name|currVersion
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
name|int
name|code_major
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|st2
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|code_minor
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|st2
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|code_major
operator|>
name|data_major
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_METADATA
operator|.
name|getMsg
argument_list|(
literal|"Not backward compatible."
operator|+
literal|" Producer version "
operator|+
name|version
operator|+
literal|", Consumer version "
operator|+
name|currVersion
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|fcVersion
operator|==
literal|null
operator|)
operator|||
name|fcVersion
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|code_major
operator|<
name|data_major
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_METADATA
operator|.
name|getMsg
argument_list|(
literal|"Not forward compatible."
operator|+
literal|"Producer version "
operator|+
name|version
operator|+
literal|", Consumer version "
operator|+
name|currVersion
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|StringTokenizer
name|st3
init|=
operator|new
name|StringTokenizer
argument_list|(
name|fcVersion
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
name|int
name|fc_major
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|st3
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|fc_minor
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|st3
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|fc_major
operator|>
name|code_major
operator|)
operator|||
operator|(
operator|(
name|fc_major
operator|==
name|code_major
operator|)
operator|&&
operator|(
name|fc_minor
operator|>
name|code_minor
operator|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_METADATA
operator|.
name|getMsg
argument_list|(
literal|"Not forward compatible."
operator|+
literal|"Minimum version "
operator|+
name|fcVersion
operator|+
literal|", Consumer version "
operator|+
name|currVersion
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**    * Return the partition specification from the specified keys and values    *     * @param partCols    *          the names of the partition keys    * @param partVals    *          the values of the partition keys    *     * @return the partition specification as a map    */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|makePartSpec
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partCols
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|partSpec
operator|.
name|put
argument_list|(
name|partCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|partVals
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|partSpec
return|;
block|}
comment|/**    * Compares the schemas - names, types and order, but ignoring comments    *     * @param newSchema    *          the new schema    * @param oldSchema    *          the old schema    * @return a boolean indicating match    */
specifier|public
specifier|static
name|boolean
name|schemaCompare
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|newSchema
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|oldSchema
parameter_list|)
block|{
name|Iterator
argument_list|<
name|FieldSchema
argument_list|>
name|newColIter
init|=
name|newSchema
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|oldCol
range|:
name|oldSchema
control|)
block|{
name|FieldSchema
name|newCol
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|newColIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|newCol
operator|=
name|newColIter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
comment|// not using FieldSchema.equals as comments can be different
if|if
condition|(
operator|!
name|oldCol
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|newCol
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
operator|!
name|oldCol
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|newCol
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|newColIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

