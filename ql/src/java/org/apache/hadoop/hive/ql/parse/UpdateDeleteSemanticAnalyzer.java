begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_comment
comment|/**  * A subclass of the {@link org.apache.hadoop.hive.ql.parse.SemanticAnalyzer} that just handles  * update and delete statements. It works by rewriting the updates and deletes into insert  * statements (since they are actually inserts) and then doing some patch up to make them work as  * updates and deletes instead.  */
end_comment

begin_class
specifier|public
class|class
name|UpdateDeleteSemanticAnalyzer
extends|extends
name|RewriteSemanticAnalyzer
block|{
specifier|private
name|Context
operator|.
name|Operation
name|operation
init|=
name|Context
operator|.
name|Operation
operator|.
name|OTHER
decl_stmt|;
name|UpdateDeleteSemanticAnalyzer
parameter_list|(
name|QueryState
name|queryState
parameter_list|)
throws|throws
name|SemanticException
block|{
name|super
argument_list|(
name|queryState
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|analyze
parameter_list|(
name|ASTNode
name|tree
parameter_list|)
throws|throws
name|SemanticException
block|{
switch|switch
condition|(
name|tree
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|TOK_DELETE_FROM
case|:
name|analyzeDelete
argument_list|(
name|tree
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_UPDATE_TABLE
case|:
name|analyzeUpdate
argument_list|(
name|tree
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Asked to parse token "
operator|+
name|tree
operator|.
name|getName
argument_list|()
operator|+
literal|" in "
operator|+
literal|"UpdateDeleteSemanticAnalyzer"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|analyzeUpdate
parameter_list|(
name|ASTNode
name|tree
parameter_list|)
throws|throws
name|SemanticException
block|{
name|operation
operator|=
name|Context
operator|.
name|Operation
operator|.
name|UPDATE
expr_stmt|;
name|reparseAndSuperAnalyze
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|analyzeDelete
parameter_list|(
name|ASTNode
name|tree
parameter_list|)
throws|throws
name|SemanticException
block|{
name|operation
operator|=
name|Context
operator|.
name|Operation
operator|.
name|DELETE
expr_stmt|;
name|reparseAndSuperAnalyze
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
comment|/**    * This supports update and delete statements    * Rewrite the delete or update into an insert.  Crazy, but it works as deletes and update    * actually are inserts into the delta file in Hive.  A delete    * DELETE FROM _tablename_ [WHERE ...]    * will be rewritten as    * INSERT INTO TABLE _tablename_ [PARTITION (_partcols_)] SELECT ROW__ID[,    * _partcols_] from _tablename_ SORT BY ROW__ID    * An update    * UPDATE _tablename_ SET x = _expr_ [WHERE...]    * will be rewritten as    * INSERT INTO TABLE _tablename_ [PARTITION (_partcols_)] SELECT _all_,    * _partcols_from _tablename_ SORT BY ROW__ID    * where _all_ is all the non-partition columns.  The expressions from the set clause will be    * re-attached later.    * The where clause will also be re-attached later.    * The sort by clause is put in there so that records come out in the right order to enable    * merge on read.    */
specifier|private
name|void
name|reparseAndSuperAnalyze
parameter_list|(
name|ASTNode
name|tree
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|?
extends|extends
name|Node
argument_list|>
name|children
init|=
name|tree
operator|.
name|getChildren
argument_list|()
decl_stmt|;
comment|// The first child should be the table we are updating / deleting from
name|ASTNode
name|tabName
init|=
operator|(
name|ASTNode
operator|)
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
name|tabName
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TABNAME
operator|:
literal|"Expected tablename as first child of "
operator|+
name|operation
operator|+
literal|" but found "
operator|+
name|tabName
operator|.
name|getName
argument_list|()
assert|;
name|Table
name|mTable
init|=
name|getTargetTable
argument_list|(
name|tabName
argument_list|)
decl_stmt|;
name|validateTargetTable
argument_list|(
name|mTable
argument_list|)
expr_stmt|;
name|StringBuilder
name|rewrittenQueryStr
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|"insert into table "
argument_list|)
expr_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
name|getFullTableNameForSQL
argument_list|(
name|tabName
argument_list|)
argument_list|)
expr_stmt|;
name|addPartitionColsToInsert
argument_list|(
name|mTable
operator|.
name|getPartCols
argument_list|()
argument_list|,
name|rewrittenQueryStr
argument_list|)
expr_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|" select ROW__ID"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|ASTNode
argument_list|>
name|setColExprs
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ASTNode
argument_list|>
name|setCols
init|=
literal|null
decl_stmt|;
comment|// Must be deterministic order set for consistent q-test output across Java versions
name|Set
argument_list|<
name|String
argument_list|>
name|setRCols
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|updating
argument_list|()
condition|)
block|{
comment|// We won't write the set
comment|// expressions in the rewritten query.  We'll patch that up later.
comment|// The set list from update should be the second child (index 1)
assert|assert
name|children
operator|.
name|size
argument_list|()
operator|>=
literal|2
operator|:
literal|"Expected update token to have at least two children"
assert|;
name|ASTNode
name|setClause
init|=
operator|(
name|ASTNode
operator|)
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|setCols
operator|=
name|collectSetColumnsAndExpressions
argument_list|(
name|setClause
argument_list|,
name|setRCols
argument_list|,
name|mTable
argument_list|)
expr_stmt|;
name|setColExprs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|setClause
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|nonPartCols
init|=
name|mTable
operator|.
name|getCols
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nonPartCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|nonPartCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ASTNode
name|setCol
init|=
name|setCols
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
name|HiveUtils
operator|.
name|unparseIdentifier
argument_list|(
name|name
argument_list|,
name|this
operator|.
name|conf
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|setCol
operator|!=
literal|null
condition|)
block|{
comment|// This is one of the columns we're setting, record it's position so we can come back
comment|// later and patch it up.
comment|// Add one to the index because the select has the ROW__ID as the first column.
name|setColExprs
operator|.
name|put
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|setCol
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|addPartitionColsToSelect
argument_list|(
name|mTable
operator|.
name|getPartCols
argument_list|()
argument_list|,
name|rewrittenQueryStr
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|" from "
argument_list|)
expr_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
name|getFullTableNameForSQL
argument_list|(
name|tabName
argument_list|)
argument_list|)
expr_stmt|;
name|ASTNode
name|where
init|=
literal|null
decl_stmt|;
name|int
name|whereIndex
init|=
name|deleting
argument_list|()
condition|?
literal|1
else|:
literal|2
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|>
name|whereIndex
condition|)
block|{
name|where
operator|=
operator|(
name|ASTNode
operator|)
name|children
operator|.
name|get
argument_list|(
name|whereIndex
argument_list|)
expr_stmt|;
assert|assert
name|where
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_WHERE
operator|:
literal|"Expected where clause, but found "
operator|+
name|where
operator|.
name|getName
argument_list|()
assert|;
block|}
comment|// Add a sort by clause so that the row ids come out in the correct order
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|" sort by ROW__ID "
argument_list|)
expr_stmt|;
name|ReparseResult
name|rr
init|=
name|parseRewrittenQuery
argument_list|(
name|rewrittenQueryStr
argument_list|,
name|ctx
operator|.
name|getCmd
argument_list|()
argument_list|)
decl_stmt|;
name|Context
name|rewrittenCtx
init|=
name|rr
operator|.
name|rewrittenCtx
decl_stmt|;
name|ASTNode
name|rewrittenTree
init|=
name|rr
operator|.
name|rewrittenTree
decl_stmt|;
name|ASTNode
name|rewrittenInsert
init|=
operator|(
name|ASTNode
operator|)
name|rewrittenTree
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
assert|assert
name|rewrittenInsert
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_INSERT
operator|:
literal|"Expected TOK_INSERT as second child of TOK_QUERY but found "
operator|+
name|rewrittenInsert
operator|.
name|getName
argument_list|()
assert|;
if|if
condition|(
name|updating
argument_list|()
condition|)
block|{
name|rewrittenCtx
operator|.
name|setOperation
argument_list|(
name|Context
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|rewrittenCtx
operator|.
name|addDestNamePrefix
argument_list|(
literal|1
argument_list|,
name|Context
operator|.
name|DestClausePrefix
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deleting
argument_list|()
condition|)
block|{
name|rewrittenCtx
operator|.
name|setOperation
argument_list|(
name|Context
operator|.
name|Operation
operator|.
name|DELETE
argument_list|)
expr_stmt|;
name|rewrittenCtx
operator|.
name|addDestNamePrefix
argument_list|(
literal|1
argument_list|,
name|Context
operator|.
name|DestClausePrefix
operator|.
name|DELETE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|where
operator|!=
literal|null
condition|)
block|{
comment|// The structure of the AST for the rewritten insert statement is:
comment|// TOK_QUERY -> TOK_FROM
comment|//          \-> TOK_INSERT -> TOK_INSERT_INTO
comment|//                        \-> TOK_SELECT
comment|//                        \-> TOK_SORTBY
comment|// The following adds the TOK_WHERE and its subtree from the original query as a child of
comment|// TOK_INSERT, which is where it would have landed if it had been there originally in the
comment|// string.  We do it this way because it's easy then turning the original AST back into a
comment|// string and reparsing it.  We have to move the SORT_BY over one,
comment|// so grab it and then push it to the second slot, and put the where in the first slot
name|ASTNode
name|sortBy
init|=
operator|(
name|ASTNode
operator|)
name|rewrittenInsert
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
assert|assert
name|sortBy
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_SORTBY
operator|:
literal|"Expected TOK_SORTBY to be first child of TOK_SELECT, but found "
operator|+
name|sortBy
operator|.
name|getName
argument_list|()
assert|;
name|rewrittenInsert
operator|.
name|addChild
argument_list|(
name|sortBy
argument_list|)
expr_stmt|;
name|rewrittenInsert
operator|.
name|setChild
argument_list|(
literal|2
argument_list|,
name|where
argument_list|)
expr_stmt|;
block|}
comment|// Patch up the projection list for updates, putting back the original set expressions.
if|if
condition|(
name|updating
argument_list|()
operator|&&
name|setColExprs
operator|!=
literal|null
condition|)
block|{
comment|// Walk through the projection list and replace the column names with the
comment|// expressions from the original update.  Under the TOK_SELECT (see above) the structure
comment|// looks like:
comment|// TOK_SELECT -> TOK_SELEXPR -> expr
comment|//           \-> TOK_SELEXPR -> expr ...
name|ASTNode
name|rewrittenSelect
init|=
operator|(
name|ASTNode
operator|)
name|rewrittenInsert
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
assert|assert
name|rewrittenSelect
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_SELECT
operator|:
literal|"Expected TOK_SELECT as second child of TOK_INSERT but found "
operator|+
name|rewrittenSelect
operator|.
name|getName
argument_list|()
assert|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|ASTNode
argument_list|>
name|entry
range|:
name|setColExprs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ASTNode
name|selExpr
init|=
operator|(
name|ASTNode
operator|)
name|rewrittenSelect
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|selExpr
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_SELEXPR
operator|:
literal|"Expected child of TOK_SELECT to be TOK_SELEXPR but was "
operator|+
name|selExpr
operator|.
name|getName
argument_list|()
assert|;
comment|// Now, change it's child
name|selExpr
operator|.
name|setChild
argument_list|(
literal|0
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|useSuper
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|analyze
argument_list|(
name|rewrittenTree
argument_list|,
name|rewrittenCtx
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|useSuper
operator|=
literal|false
expr_stmt|;
block|}
name|updateOutputs
argument_list|(
name|mTable
argument_list|)
expr_stmt|;
if|if
condition|(
name|updating
argument_list|()
condition|)
block|{
name|setUpAccessControlInfoForUpdate
argument_list|(
name|mTable
argument_list|,
name|setCols
argument_list|)
expr_stmt|;
comment|// Add the setRCols to the input list
for|for
control|(
name|String
name|colName
range|:
name|setRCols
control|)
block|{
if|if
condition|(
name|columnAccessInfo
operator|!=
literal|null
condition|)
block|{
comment|//assuming this means we are not doing Auth
name|columnAccessInfo
operator|.
name|add
argument_list|(
name|Table
operator|.
name|getCompleteName
argument_list|(
name|mTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|mTable
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|colName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|updating
parameter_list|()
block|{
return|return
name|operation
operator|==
name|Context
operator|.
name|Operation
operator|.
name|UPDATE
return|;
block|}
specifier|private
name|boolean
name|deleting
parameter_list|()
block|{
return|return
name|operation
operator|==
name|Context
operator|.
name|Operation
operator|.
name|DELETE
return|;
block|}
block|}
end_class

end_unit

