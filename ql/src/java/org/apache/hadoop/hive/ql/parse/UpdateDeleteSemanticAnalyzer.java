begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|TokenRewriteStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|InvalidTableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|VirtualColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_comment
comment|/**  * A subclass of the {@link org.apache.hadoop.hive.ql.parse.SemanticAnalyzer} that just handles  * update, delete and merge statements.  It works by rewriting the updates and deletes into insert  * statements (since they are actually inserts) and then doing some patch up to make them work as  * updates and deletes instead.  */
end_comment

begin_class
specifier|public
class|class
name|UpdateDeleteSemanticAnalyzer
extends|extends
name|SemanticAnalyzer
block|{
specifier|private
name|boolean
name|useSuper
init|=
literal|false
decl_stmt|;
name|UpdateDeleteSemanticAnalyzer
parameter_list|(
name|QueryState
name|queryState
parameter_list|)
throws|throws
name|SemanticException
block|{
name|super
argument_list|(
name|queryState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|analyzeInternal
parameter_list|(
name|ASTNode
name|tree
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|useSuper
condition|)
block|{
name|super
operator|.
name|analyzeInternal
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|getTxnMgr
argument_list|()
operator|.
name|supportsAcid
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|ACID_OP_ON_NONACID_TXNMGR
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|tree
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|TOK_DELETE_FROM
case|:
name|analyzeDelete
argument_list|(
name|tree
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_UPDATE_TABLE
case|:
name|analyzeUpdate
argument_list|(
name|tree
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_MERGE
case|:
name|analyzeMerge
argument_list|(
name|tree
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Asked to parse token "
operator|+
name|tree
operator|.
name|getName
argument_list|()
operator|+
literal|" in "
operator|+
literal|"UpdateDeleteSemanticAnalyzer"
argument_list|)
throw|;
block|}
name|cleanUpMetaColumnAccessControl
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|updating
parameter_list|()
block|{
return|return
name|currentOperation
operator|==
name|Context
operator|.
name|Operation
operator|.
name|UPDATE
return|;
block|}
specifier|private
name|boolean
name|deleting
parameter_list|()
block|{
return|return
name|currentOperation
operator|==
name|Context
operator|.
name|Operation
operator|.
name|DELETE
return|;
block|}
specifier|private
name|void
name|analyzeUpdate
parameter_list|(
name|ASTNode
name|tree
parameter_list|)
throws|throws
name|SemanticException
block|{
name|currentOperation
operator|=
name|Context
operator|.
name|Operation
operator|.
name|UPDATE
expr_stmt|;
name|reparseAndSuperAnalyze
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|analyzeDelete
parameter_list|(
name|ASTNode
name|tree
parameter_list|)
throws|throws
name|SemanticException
block|{
name|currentOperation
operator|=
name|Context
operator|.
name|Operation
operator|.
name|DELETE
expr_stmt|;
name|reparseAndSuperAnalyze
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
comment|/**    * Append list of partition columns to Insert statement, i.e. the 1st set of partCol1,partCol2    * INSERT INTO T PARTITION(partCol1,partCol2...) SELECT col1, ... partCol1,partCol2...    */
specifier|private
name|void
name|addPartitionColsToInsert
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
parameter_list|,
name|StringBuilder
name|rewrittenQueryStr
parameter_list|)
block|{
comment|// If the table is partitioned we have to put the partition() clause in
if|if
condition|(
name|partCols
operator|!=
literal|null
operator|&&
name|partCols
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|" partition ("
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|FieldSchema
name|fschema
range|:
name|partCols
control|)
block|{
if|if
condition|(
name|first
condition|)
name|first
operator|=
literal|false
expr_stmt|;
else|else
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
comment|//would be nice if there was a way to determine if quotes are needed
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
name|HiveUtils
operator|.
name|unparseIdentifier
argument_list|(
name|fschema
operator|.
name|getName
argument_list|()
argument_list|,
name|this
operator|.
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Append list of partition columns to Insert statement, i.e. the 2nd set of partCol1,partCol2    * INSERT INTO T PARTITION(partCol1,partCol2...) SELECT col1, ... partCol1,partCol2...    * @param target target table    */
specifier|private
name|void
name|addPartitionColsToSelect
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
parameter_list|,
name|StringBuilder
name|rewrittenQueryStr
parameter_list|,
name|ASTNode
name|target
parameter_list|)
throws|throws
name|SemanticException
block|{
name|String
name|targetName
init|=
name|target
operator|!=
literal|null
condition|?
name|getSimpleTableName
argument_list|(
name|target
argument_list|)
else|:
literal|null
decl_stmt|;
comment|// If the table is partitioned, we need to select the partition columns as well.
if|if
condition|(
name|partCols
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FieldSchema
name|fschema
range|:
name|partCols
control|)
block|{
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
comment|//would be nice if there was a way to determine if quotes are needed
if|if
condition|(
name|targetName
operator|!=
literal|null
condition|)
block|{
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
name|targetName
argument_list|)
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
name|HiveUtils
operator|.
name|unparseIdentifier
argument_list|(
name|fschema
operator|.
name|getName
argument_list|()
argument_list|,
name|this
operator|.
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Assert that we are not asked to update a bucketing column or partition column    * @param colName it's the A in "SET A = B"    */
specifier|private
name|void
name|checkValidSetClauseTarget
parameter_list|(
name|ASTNode
name|colName
parameter_list|,
name|Table
name|targetTable
parameter_list|)
throws|throws
name|SemanticException
block|{
name|String
name|columnName
init|=
name|normalizeColName
argument_list|(
name|colName
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
comment|// Make sure this isn't one of the partitioning columns, that's not supported.
for|for
control|(
name|FieldSchema
name|fschema
range|:
name|targetTable
operator|.
name|getPartCols
argument_list|()
control|)
block|{
if|if
condition|(
name|fschema
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|columnName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|UPDATE_CANNOT_UPDATE_PART_VALUE
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|//updating bucket column should move row from one file to another - not supported
if|if
condition|(
name|targetTable
operator|.
name|getBucketCols
argument_list|()
operator|!=
literal|null
operator|&&
name|targetTable
operator|.
name|getBucketCols
argument_list|()
operator|.
name|contains
argument_list|(
name|columnName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|UPDATE_CANNOT_UPDATE_BUCKET_VALUE
argument_list|,
name|columnName
argument_list|)
throw|;
block|}
name|boolean
name|foundColumnInTargetTable
init|=
literal|false
decl_stmt|;
for|for
control|(
name|FieldSchema
name|col
range|:
name|targetTable
operator|.
name|getCols
argument_list|()
control|)
block|{
if|if
condition|(
name|columnName
operator|.
name|equalsIgnoreCase
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundColumnInTargetTable
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|foundColumnInTargetTable
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_TARGET_COLUMN_IN_SET_CLAUSE
argument_list|,
name|colName
operator|.
name|getText
argument_list|()
argument_list|,
name|targetTable
operator|.
name|getFullyQualifiedName
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|ASTNode
name|findLHSofAssignment
parameter_list|(
name|ASTNode
name|assignment
parameter_list|)
block|{
assert|assert
name|assignment
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|EQUAL
operator|:
literal|"Expected set assignments to use equals operator but found "
operator|+
name|assignment
operator|.
name|getName
argument_list|()
assert|;
name|ASTNode
name|tableOrColTok
init|=
operator|(
name|ASTNode
operator|)
name|assignment
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
name|tableOrColTok
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TABLE_OR_COL
operator|:
literal|"Expected left side of assignment to be table or column"
assert|;
name|ASTNode
name|colName
init|=
operator|(
name|ASTNode
operator|)
name|tableOrColTok
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
name|colName
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|Identifier
operator|:
literal|"Expected column name"
assert|;
return|return
name|colName
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ASTNode
argument_list|>
name|collectSetColumnsAndExpressions
parameter_list|(
name|ASTNode
name|setClause
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|setRCols
parameter_list|,
name|Table
name|targetTable
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// An update needs to select all of the columns, as we rewrite the entire row.  Also,
comment|// we need to figure out which columns we are going to replace.
assert|assert
name|setClause
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_SET_COLUMNS_CLAUSE
operator|:
literal|"Expected second child of update token to be set token"
assert|;
comment|// Get the children of the set clause, each of which should be a column assignment
name|List
argument_list|<
name|?
extends|extends
name|Node
argument_list|>
name|assignments
init|=
name|setClause
operator|.
name|getChildren
argument_list|()
decl_stmt|;
comment|// Must be deterministic order map for consistent q-test output across Java versions
name|Map
argument_list|<
name|String
argument_list|,
name|ASTNode
argument_list|>
name|setCols
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|ASTNode
argument_list|>
argument_list|(
name|assignments
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|a
range|:
name|assignments
control|)
block|{
name|ASTNode
name|assignment
init|=
operator|(
name|ASTNode
operator|)
name|a
decl_stmt|;
name|ASTNode
name|colName
init|=
name|findLHSofAssignment
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
if|if
condition|(
name|setRCols
operator|!=
literal|null
condition|)
block|{
name|addSetRCols
argument_list|(
operator|(
name|ASTNode
operator|)
name|assignment
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|setRCols
argument_list|)
expr_stmt|;
block|}
name|checkValidSetClauseTarget
argument_list|(
name|colName
argument_list|,
name|targetTable
argument_list|)
expr_stmt|;
name|String
name|columnName
init|=
name|normalizeColName
argument_list|(
name|colName
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
comment|// This means that in UPDATE T SET x = _something_
comment|// _something_ can be whatever is supported in SELECT _something_
name|setCols
operator|.
name|put
argument_list|(
name|columnName
argument_list|,
operator|(
name|ASTNode
operator|)
name|assignment
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|setCols
return|;
block|}
comment|/**    * @return the Metastore representation of the target table    */
specifier|private
name|Table
name|getTargetTable
parameter_list|(
name|ASTNode
name|tabRef
parameter_list|)
throws|throws
name|SemanticException
block|{
name|String
index|[]
name|tableName
decl_stmt|;
name|Table
name|mTable
decl_stmt|;
switch|switch
condition|(
name|tabRef
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|TOK_TABREF
case|:
name|tableName
operator|=
name|getQualifiedTableName
argument_list|(
operator|(
name|ASTNode
operator|)
name|tabRef
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_TABNAME
case|:
name|tableName
operator|=
name|getQualifiedTableName
argument_list|(
name|tabRef
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
name|raiseWrongType
argument_list|(
literal|"TOK_TABREF|TOK_TABNAME"
argument_list|,
name|tabRef
argument_list|)
throw|;
block|}
try|try
block|{
name|mTable
operator|=
name|db
operator|.
name|getTable
argument_list|(
name|tableName
index|[
literal|0
index|]
argument_list|,
name|tableName
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidTableException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to find table "
operator|+
name|getDotName
argument_list|(
name|tableName
argument_list|)
operator|+
literal|" got exception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_TABLE
operator|.
name|getMsg
argument_list|(
name|getDotName
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to find table "
operator|+
name|getDotName
argument_list|(
name|tableName
argument_list|)
operator|+
literal|" got exception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|mTable
return|;
block|}
comment|// Walk through all our inputs and set them to note that this read is part of an update or a
comment|// delete.
specifier|private
name|void
name|markReadEntityForUpdate
parameter_list|()
block|{
for|for
control|(
name|ReadEntity
name|input
range|:
name|inputs
control|)
block|{
if|if
condition|(
name|isWritten
argument_list|(
name|input
argument_list|)
condition|)
block|{
comment|//todo: this is actually not adding anything since LockComponent uses a Trie to "promote" a lock
comment|//except by accident - when we have a partitioned target table we have a ReadEntity and WriteEntity
comment|//for the table, so we mark ReadEntity and then delete WriteEntity (replace with Partition entries)
comment|//so DbTxnManager skips Read lock on the ReadEntity....
name|input
operator|.
name|setUpdateOrDelete
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//input.noLockNeeded()?
block|}
block|}
block|}
comment|/**    *  For updates, we need to set the column access info so that it contains information on    *  the columns we are updating.    *  (But not all the columns of the target table even though the rewritten query writes    *  all columns of target table since that is an implmentation detail)    */
specifier|private
name|void
name|setUpAccessControlInfoForUpdate
parameter_list|(
name|Table
name|mTable
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ASTNode
argument_list|>
name|setCols
parameter_list|)
block|{
name|ColumnAccessInfo
name|cai
init|=
operator|new
name|ColumnAccessInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|colName
range|:
name|setCols
operator|.
name|keySet
argument_list|()
control|)
block|{
name|cai
operator|.
name|add
argument_list|(
name|Table
operator|.
name|getCompleteName
argument_list|(
name|mTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|mTable
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|colName
argument_list|)
expr_stmt|;
block|}
name|setUpdateColumnAccessInfo
argument_list|(
name|cai
argument_list|)
expr_stmt|;
block|}
comment|/**    * We need to weed ROW__ID out of the input column info, as it doesn't make any sense to    * require the user to have authorization on that column.    */
specifier|private
name|void
name|cleanUpMetaColumnAccessControl
parameter_list|()
block|{
comment|//we do this for Update/Delete (incl Merge) because we introduce this column into the query
comment|//as part of rewrite
if|if
condition|(
name|columnAccessInfo
operator|!=
literal|null
condition|)
block|{
name|columnAccessInfo
operator|.
name|stripVirtualColumn
argument_list|(
name|VirtualColumn
operator|.
name|ROWID
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Parse the newly generated SQL statement to get a new AST    */
specifier|private
name|ReparseResult
name|parseRewrittenQuery
parameter_list|(
name|StringBuilder
name|rewrittenQueryStr
parameter_list|,
name|String
name|originalQuery
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// Set dynamic partitioning to nonstrict so that queries do not need any partition
comment|// references.
comment|// todo: this may be a perf issue as it prevents the optimizer.. or not
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DYNAMICPARTITIONINGMODE
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
comment|// Parse the rewritten query string
name|Context
name|rewrittenCtx
decl_stmt|;
try|try
block|{
name|rewrittenCtx
operator|=
operator|new
name|Context
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// We keep track of all the contexts that are created by this query
comment|// so we can clear them when we finish execution
name|ctx
operator|.
name|addRewrittenStatementContext
argument_list|(
name|rewrittenCtx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|UPDATEDELETE_IO_ERROR
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
name|rewrittenCtx
operator|.
name|setExplainConfig
argument_list|(
name|ctx
operator|.
name|getExplainConfig
argument_list|()
argument_list|)
expr_stmt|;
name|rewrittenCtx
operator|.
name|setIsUpdateDeleteMerge
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rewrittenCtx
operator|.
name|setCmd
argument_list|(
name|rewrittenQueryStr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ASTNode
name|rewrittenTree
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Going to reparse<"
operator|+
name|originalQuery
operator|+
literal|"> as \n<"
operator|+
name|rewrittenQueryStr
operator|.
name|toString
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|rewrittenTree
operator|=
name|ParseUtils
operator|.
name|parse
argument_list|(
name|rewrittenQueryStr
operator|.
name|toString
argument_list|()
argument_list|,
name|rewrittenCtx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|UPDATEDELETE_PARSE_ERROR
operator|.
name|getMsg
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|ReparseResult
argument_list|(
name|rewrittenTree
argument_list|,
name|rewrittenCtx
argument_list|)
return|;
block|}
comment|/**    * Assert it supports Acid write    */
specifier|private
name|void
name|validateTargetTable
parameter_list|(
name|Table
name|mTable
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|mTable
operator|.
name|getTableType
argument_list|()
operator|==
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|||
name|mTable
operator|.
name|getTableType
argument_list|()
operator|==
name|TableType
operator|.
name|MATERIALIZED_VIEW
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Table "
operator|+
name|mTable
operator|.
name|getFullyQualifiedName
argument_list|()
operator|+
literal|" is a view or materialized view"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|UPDATE_DELETE_VIEW
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * This supports update and delete statements    */
specifier|private
name|void
name|reparseAndSuperAnalyze
parameter_list|(
name|ASTNode
name|tree
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|?
extends|extends
name|Node
argument_list|>
name|children
init|=
name|tree
operator|.
name|getChildren
argument_list|()
decl_stmt|;
comment|// The first child should be the table we are deleting from
name|ASTNode
name|tabName
init|=
operator|(
name|ASTNode
operator|)
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
name|tabName
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TABNAME
operator|:
literal|"Expected tablename as first child of "
operator|+
name|operation
argument_list|()
operator|+
literal|" but found "
operator|+
name|tabName
operator|.
name|getName
argument_list|()
assert|;
comment|// Rewrite the delete or update into an insert.  Crazy, but it works as deletes and update
comment|// actually are inserts into the delta file in Hive.  A delete
comment|// DELETE FROM _tablename_ [WHERE ...]
comment|// will be rewritten as
comment|// INSERT INTO TABLE _tablename_ [PARTITION (_partcols_)] SELECT ROW__ID[,
comment|// _partcols_] from _tablename_ SORT BY ROW__ID
comment|// An update
comment|// UPDATE _tablename_ SET x = _expr_ [WHERE...]
comment|// will be rewritten as
comment|// INSERT INTO TABLE _tablename_ [PARTITION (_partcols_)] SELECT _all_,
comment|// _partcols_from _tablename_ SORT BY ROW__ID
comment|// where _all_ is all the non-partition columns.  The expressions from the set clause will be
comment|// re-attached later.
comment|// The where clause will also be re-attached later.
comment|// The sort by clause is put in there so that records come out in the right order to enable
comment|// merge on read.
name|StringBuilder
name|rewrittenQueryStr
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Table
name|mTable
init|=
name|getTargetTable
argument_list|(
name|tabName
argument_list|)
decl_stmt|;
name|validateTargetTable
argument_list|(
name|mTable
argument_list|)
expr_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|"insert into table "
argument_list|)
expr_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
name|getFullTableNameForSQL
argument_list|(
name|tabName
argument_list|)
argument_list|)
expr_stmt|;
name|addPartitionColsToInsert
argument_list|(
name|mTable
operator|.
name|getPartCols
argument_list|()
argument_list|,
name|rewrittenQueryStr
argument_list|)
expr_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|" select ROW__ID"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|ASTNode
argument_list|>
name|setColExprs
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ASTNode
argument_list|>
name|setCols
init|=
literal|null
decl_stmt|;
comment|// Must be deterministic order set for consistent q-test output across Java versions
name|Set
argument_list|<
name|String
argument_list|>
name|setRCols
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|updating
argument_list|()
condition|)
block|{
comment|// We won't write the set
comment|// expressions in the rewritten query.  We'll patch that up later.
comment|// The set list from update should be the second child (index 1)
assert|assert
name|children
operator|.
name|size
argument_list|()
operator|>=
literal|2
operator|:
literal|"Expected update token to have at least two children"
assert|;
name|ASTNode
name|setClause
init|=
operator|(
name|ASTNode
operator|)
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|setCols
operator|=
name|collectSetColumnsAndExpressions
argument_list|(
name|setClause
argument_list|,
name|setRCols
argument_list|,
name|mTable
argument_list|)
expr_stmt|;
name|setColExprs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|setClause
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|nonPartCols
init|=
name|mTable
operator|.
name|getCols
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nonPartCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|nonPartCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ASTNode
name|setCol
init|=
name|setCols
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
name|HiveUtils
operator|.
name|unparseIdentifier
argument_list|(
name|name
argument_list|,
name|this
operator|.
name|conf
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|setCol
operator|!=
literal|null
condition|)
block|{
comment|// This is one of the columns we're setting, record it's position so we can come back
comment|// later and patch it up.
comment|// Add one to the index because the select has the ROW__ID as the first column.
name|setColExprs
operator|.
name|put
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|setCol
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|addPartitionColsToSelect
argument_list|(
name|mTable
operator|.
name|getPartCols
argument_list|()
argument_list|,
name|rewrittenQueryStr
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|" from "
argument_list|)
expr_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
name|getFullTableNameForSQL
argument_list|(
name|tabName
argument_list|)
argument_list|)
expr_stmt|;
name|ASTNode
name|where
init|=
literal|null
decl_stmt|;
name|int
name|whereIndex
init|=
name|deleting
argument_list|()
condition|?
literal|1
else|:
literal|2
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|>
name|whereIndex
condition|)
block|{
name|where
operator|=
operator|(
name|ASTNode
operator|)
name|children
operator|.
name|get
argument_list|(
name|whereIndex
argument_list|)
expr_stmt|;
assert|assert
name|where
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_WHERE
operator|:
literal|"Expected where clause, but found "
operator|+
name|where
operator|.
name|getName
argument_list|()
assert|;
block|}
comment|// Add a sort by clause so that the row ids come out in the correct order
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|" sort by ROW__ID "
argument_list|)
expr_stmt|;
name|ReparseResult
name|rr
init|=
name|parseRewrittenQuery
argument_list|(
name|rewrittenQueryStr
argument_list|,
name|ctx
operator|.
name|getCmd
argument_list|()
argument_list|)
decl_stmt|;
name|Context
name|rewrittenCtx
init|=
name|rr
operator|.
name|rewrittenCtx
decl_stmt|;
name|ASTNode
name|rewrittenTree
init|=
name|rr
operator|.
name|rewrittenTree
decl_stmt|;
name|ASTNode
name|rewrittenInsert
init|=
operator|(
name|ASTNode
operator|)
name|rewrittenTree
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
assert|assert
name|rewrittenInsert
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_INSERT
operator|:
literal|"Expected TOK_INSERT as second child of TOK_QUERY but found "
operator|+
name|rewrittenInsert
operator|.
name|getName
argument_list|()
assert|;
if|if
condition|(
name|updating
argument_list|()
condition|)
block|{
name|rewrittenCtx
operator|.
name|setOperation
argument_list|(
name|Context
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|rewrittenCtx
operator|.
name|addDestNamePrefix
argument_list|(
literal|1
argument_list|,
name|Context
operator|.
name|DestClausePrefix
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deleting
argument_list|()
condition|)
block|{
name|rewrittenCtx
operator|.
name|setOperation
argument_list|(
name|Context
operator|.
name|Operation
operator|.
name|DELETE
argument_list|)
expr_stmt|;
name|rewrittenCtx
operator|.
name|addDestNamePrefix
argument_list|(
literal|1
argument_list|,
name|Context
operator|.
name|DestClausePrefix
operator|.
name|DELETE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|where
operator|!=
literal|null
condition|)
block|{
comment|// The structure of the AST for the rewritten insert statement is:
comment|// TOK_QUERY -> TOK_FROM
comment|//          \-> TOK_INSERT -> TOK_INSERT_INTO
comment|//                        \-> TOK_SELECT
comment|//                        \-> TOK_SORTBY
comment|// The following adds the TOK_WHERE and its subtree from the original query as a child of
comment|// TOK_INSERT, which is where it would have landed if it had been there originally in the
comment|// string.  We do it this way because it's easy then turning the original AST back into a
comment|// string and reparsing it.  We have to move the SORT_BY over one,
comment|// so grab it and then push it to the second slot, and put the where in the first slot
name|ASTNode
name|sortBy
init|=
operator|(
name|ASTNode
operator|)
name|rewrittenInsert
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
assert|assert
name|sortBy
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_SORTBY
operator|:
literal|"Expected TOK_SORTBY to be first child of TOK_SELECT, but found "
operator|+
name|sortBy
operator|.
name|getName
argument_list|()
assert|;
name|rewrittenInsert
operator|.
name|addChild
argument_list|(
name|sortBy
argument_list|)
expr_stmt|;
name|rewrittenInsert
operator|.
name|setChild
argument_list|(
literal|2
argument_list|,
name|where
argument_list|)
expr_stmt|;
block|}
comment|// Patch up the projection list for updates, putting back the original set expressions.
if|if
condition|(
name|updating
argument_list|()
operator|&&
name|setColExprs
operator|!=
literal|null
condition|)
block|{
comment|// Walk through the projection list and replace the column names with the
comment|// expressions from the original update.  Under the TOK_SELECT (see above) the structure
comment|// looks like:
comment|// TOK_SELECT -> TOK_SELEXPR -> expr
comment|//           \-> TOK_SELEXPR -> expr ...
name|ASTNode
name|rewrittenSelect
init|=
operator|(
name|ASTNode
operator|)
name|rewrittenInsert
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
assert|assert
name|rewrittenSelect
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_SELECT
operator|:
literal|"Expected TOK_SELECT as second child of TOK_INSERT but found "
operator|+
name|rewrittenSelect
operator|.
name|getName
argument_list|()
assert|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|ASTNode
argument_list|>
name|entry
range|:
name|setColExprs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ASTNode
name|selExpr
init|=
operator|(
name|ASTNode
operator|)
name|rewrittenSelect
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|selExpr
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_SELEXPR
operator|:
literal|"Expected child of TOK_SELECT to be TOK_SELEXPR but was "
operator|+
name|selExpr
operator|.
name|getName
argument_list|()
assert|;
comment|// Now, change it's child
name|selExpr
operator|.
name|setChild
argument_list|(
literal|0
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|useSuper
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|analyze
argument_list|(
name|rewrittenTree
argument_list|,
name|rewrittenCtx
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|useSuper
operator|=
literal|false
expr_stmt|;
block|}
name|updateOutputs
argument_list|(
name|mTable
argument_list|)
expr_stmt|;
if|if
condition|(
name|updating
argument_list|()
condition|)
block|{
name|setUpAccessControlInfoForUpdate
argument_list|(
name|mTable
argument_list|,
name|setCols
argument_list|)
expr_stmt|;
comment|// Add the setRCols to the input list
for|for
control|(
name|String
name|colName
range|:
name|setRCols
control|)
block|{
if|if
condition|(
name|columnAccessInfo
operator|!=
literal|null
condition|)
block|{
comment|//assuming this means we are not doing Auth
name|columnAccessInfo
operator|.
name|add
argument_list|(
name|Table
operator|.
name|getCompleteName
argument_list|(
name|mTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|mTable
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|colName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Check that {@code readEntity} is also being written    */
specifier|private
name|boolean
name|isWritten
parameter_list|(
name|Entity
name|readEntity
parameter_list|)
block|{
for|for
control|(
name|Entity
name|writeEntity
range|:
name|outputs
control|)
block|{
comment|//make sure to compare them as Entity, i.e. that it's the same table or partition, etc
if|if
condition|(
name|writeEntity
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|readEntity
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|String
name|operation
parameter_list|()
block|{
if|if
condition|(
name|currentOperation
operator|==
name|Context
operator|.
name|Operation
operator|.
name|OTHER
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"UpdateDeleteSemanticAnalyzer neither updating nor "
operator|+
literal|"deleting, operation not known."
argument_list|)
throw|;
block|}
return|return
name|currentOperation
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// This method finds any columns on the right side of a set statement (thus rcols) and puts them
comment|// in a set so we can add them to the list of input cols to check.
specifier|private
name|void
name|addSetRCols
parameter_list|(
name|ASTNode
name|node
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|setRCols
parameter_list|)
block|{
comment|// See if this node is a TOK_TABLE_OR_COL.  If so, find the value and put it in the list.  If
comment|// not, recurse on any children
if|if
condition|(
name|node
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TABLE_OR_COL
condition|)
block|{
name|ASTNode
name|colName
init|=
operator|(
name|ASTNode
operator|)
name|node
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
name|colName
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|Identifier
operator|:
literal|"Expected column name"
assert|;
name|setRCols
operator|.
name|add
argument_list|(
name|normalizeColName
argument_list|(
name|colName
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|getChildren
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Node
name|n
range|:
name|node
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|addSetRCols
argument_list|(
operator|(
name|ASTNode
operator|)
name|n
argument_list|,
name|setRCols
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Column names are stored in metastore in lower case, regardless of the CREATE TABLE statement.    * Unfortunately there is no single place that normalizes the input query.    * @param colName not null    */
specifier|private
specifier|static
name|String
name|normalizeColName
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
return|return
name|colName
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
specifier|private
name|Context
operator|.
name|Operation
name|currentOperation
init|=
name|Context
operator|.
name|Operation
operator|.
name|OTHER
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|Indent
init|=
literal|"  "
decl_stmt|;
specifier|private
name|IdentifierQuoter
name|quotedIdenfierHelper
decl_stmt|;
comment|/**    * This allows us to take an arbitrary ASTNode and turn it back into SQL that produced it.    * Since HiveLexer.g is written such that it strips away any ` (back ticks) around     * quoted identifiers we need to add those back to generated SQL.    * Additionally, the parser only produces tokens of type Identifier and never    * QuotedIdentifier (HIVE-6013).  So here we just quote all identifiers.    * (') around String literals are retained w/o issues    */
specifier|private
specifier|static
class|class
name|IdentifierQuoter
block|{
specifier|private
specifier|final
name|TokenRewriteStream
name|trs
decl_stmt|;
specifier|private
specifier|final
name|IdentityHashMap
argument_list|<
name|ASTNode
argument_list|,
name|ASTNode
argument_list|>
name|visitedNodes
init|=
operator|new
name|IdentityHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|IdentifierQuoter
parameter_list|(
name|TokenRewriteStream
name|trs
parameter_list|)
block|{
name|this
operator|.
name|trs
operator|=
name|trs
expr_stmt|;
if|if
condition|(
name|trs
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must have a TokenRewriteStream"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|visit
parameter_list|(
name|ASTNode
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|Identifier
condition|)
block|{
if|if
condition|(
name|visitedNodes
operator|.
name|containsKey
argument_list|(
name|n
argument_list|)
condition|)
block|{
comment|/**            * Since we are modifying the stream, it's not idempotent.  Ideally, the caller would take            * care to only quote Identifiers in each subtree once, but this makes it safe            */
return|return;
block|}
name|visitedNodes
operator|.
name|put
argument_list|(
name|n
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|trs
operator|.
name|insertBefore
argument_list|(
name|n
operator|.
name|getToken
argument_list|()
argument_list|,
literal|"`"
argument_list|)
expr_stmt|;
name|trs
operator|.
name|insertAfter
argument_list|(
name|n
operator|.
name|getToken
argument_list|()
argument_list|,
literal|"`"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|.
name|getChildCount
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Node
name|c
range|:
name|n
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|visit
argument_list|(
operator|(
name|ASTNode
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This allows us to take an arbitrary ASTNode and turn it back into SQL that produced it without    * needing to understand what it is (except for QuotedIdentifiers)    *     */
specifier|private
name|String
name|getMatchedText
parameter_list|(
name|ASTNode
name|n
parameter_list|)
block|{
name|quotedIdenfierHelper
operator|.
name|visit
argument_list|(
name|n
argument_list|)
expr_stmt|;
return|return
name|ctx
operator|.
name|getTokenRewriteStream
argument_list|()
operator|.
name|toString
argument_list|(
name|n
operator|.
name|getTokenStartIndex
argument_list|()
argument_list|,
name|n
operator|.
name|getTokenStopIndex
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
comment|/**    * Here we take a Merge statement AST and generate a semantically equivalent multi-insert    * statement to exectue.  Each Insert leg represents a single WHEN clause.  As much as possible,    * the new SQL statement is made to look like the input SQL statement so that it's easier to map    * Query Compiler errors from generated SQL to original one this way.    * The generated SQL is a complete representation of the original input for the same reason.    * In many places SemanticAnalyzer throws exceptions that contain (line, position) coordinates.    * If generated SQL doesn't have everything and is patched up later, these coordinates point to    * the wrong place.    *    * @throws SemanticException    */
specifier|private
name|void
name|analyzeMerge
parameter_list|(
name|ASTNode
name|tree
parameter_list|)
throws|throws
name|SemanticException
block|{
name|currentOperation
operator|=
name|Context
operator|.
name|Operation
operator|.
name|MERGE
expr_stmt|;
name|quotedIdenfierHelper
operator|=
operator|new
name|IdentifierQuoter
argument_list|(
name|ctx
operator|.
name|getTokenRewriteStream
argument_list|()
argument_list|)
expr_stmt|;
comment|/*      * See org.apache.hadoop.hive.ql.parse.TestMergeStatement for some examples of the merge AST       For example, given:       merge into acidTbl using nonAcidPart2 source ON acidTbl.a = source.a2       WHEN MATCHED THEN UPDATE set b = source.b2       WHEN NOT MATCHED THEN INSERT VALUES(source.a2, source.b2)        We get AST like this:       "(tok_merge " +         "(tok_tabname acidtbl) (tok_tabref (tok_tabname nonacidpart2) source) " +         "(= (. (tok_table_or_col acidtbl) a) (. (tok_table_or_col source) a2)) " +         "(tok_matched " +         "(tok_update " +         "(tok_set_columns_clause (= (tok_table_or_col b) (. (tok_table_or_col source) b2))))) " +         "(tok_not_matched " +         "tok_insert " +         "(tok_value_row (. (tok_table_or_col source) a2) (. (tok_table_or_col source) b2))))");          And need to produce a multi-insert like this to execute:         FROM acidTbl right outer join nonAcidPart2 ON acidTbl.a = source.a2         Insert into table acidTbl select nonAcidPart2.a2, nonAcidPart2.b2 where acidTbl.a is null         INSERT INTO TABLE acidTbl select target.ROW__ID, nonAcidPart2.a2, nonAcidPart2.b2 where nonAcidPart2.a2=acidTbl.a sort by acidTbl.ROW__ID     */
comment|/*todo: we need some sort of validation phase over original AST to make things user friendly; for example, if      original command refers to a column that doesn't exist, this will be caught when processing the rewritten query but      the errors will point at locations that the user can't map to anything      - VALUES clause must have the same number of values as target table (including partition cols).  Part cols go last in Select clause of Insert as Select      todo: do we care to preserve comments in original SQL?      todo: check if identifiers are propertly escaped/quoted in the generated SQL - it's currently inconsistent       Look at UnparseTranslator.addIdentifierTranslation() - it does unescape + unparse...      todo: consider "WHEN NOT MATCHED BY SOURCE THEN UPDATE SET TargetTable.Col1 = SourceTable.Col1 "; what happens when source is empty?  This should be a runtime error - maybe not       the outer side of ROJ is empty => the join produces 0 rows.  If supporting WHEN NOT MATCHED BY SOURCE, then this should be a runtime error     */
name|ASTNode
name|target
init|=
operator|(
name|ASTNode
operator|)
name|tree
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ASTNode
name|source
init|=
operator|(
name|ASTNode
operator|)
name|tree
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|targetName
init|=
name|getSimpleTableName
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|String
name|sourceName
init|=
name|getSimpleTableName
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|ASTNode
name|onClause
init|=
operator|(
name|ASTNode
operator|)
name|tree
operator|.
name|getChild
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|onClauseAsText
init|=
name|getMatchedText
argument_list|(
name|onClause
argument_list|)
decl_stmt|;
name|Table
name|targetTable
init|=
name|getTargetTable
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|validateTargetTable
argument_list|(
name|targetTable
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ASTNode
argument_list|>
name|whenClauses
init|=
name|findWhenClauses
argument_list|(
name|tree
argument_list|)
decl_stmt|;
name|StringBuilder
name|rewrittenQueryStr
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"FROM\n"
argument_list|)
decl_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
name|Indent
argument_list|)
operator|.
name|append
argument_list|(
name|getFullTableNameForSQL
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAliased
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|targetName
argument_list|)
expr_stmt|;
block|}
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
name|Indent
argument_list|)
operator|.
name|append
argument_list|(
name|chooseJoinType
argument_list|(
name|whenClauses
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|source
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_SUBQUERY
condition|)
block|{
comment|//this includes the mandatory alias
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
name|Indent
argument_list|)
operator|.
name|append
argument_list|(
name|getMatchedText
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
name|Indent
argument_list|)
operator|.
name|append
argument_list|(
name|getFullTableNameForSQL
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAliased
argument_list|(
name|source
argument_list|)
condition|)
block|{
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|sourceName
argument_list|)
expr_stmt|;
block|}
block|}
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
name|Indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"ON "
argument_list|)
operator|.
name|append
argument_list|(
name|onClauseAsText
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
comment|/**      * We allow at most 2 WHEN MATCHED clause, in which case 1 must be Update the other Delete      * If we have both update and delete, the 1st one (in SQL code) must have "AND<extra predicate>"      * so that the 2nd can ensure not to process the same rows.      * Update and Delete may be in any order.  (Insert is always last)      */
name|String
name|extraPredicate
init|=
literal|null
decl_stmt|;
name|int
name|numWhenMatchedUpdateClauses
init|=
literal|0
decl_stmt|,
name|numWhenMatchedDeleteClauses
init|=
literal|0
decl_stmt|;
name|int
name|numInsertClauses
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ASTNode
name|whenClause
range|:
name|whenClauses
control|)
block|{
switch|switch
condition|(
name|getWhenClauseOperation
argument_list|(
name|whenClause
argument_list|)
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|TOK_INSERT
case|:
name|numInsertClauses
operator|++
expr_stmt|;
name|handleInsert
argument_list|(
name|whenClause
argument_list|,
name|rewrittenQueryStr
argument_list|,
name|target
argument_list|,
name|onClause
argument_list|,
name|targetTable
argument_list|,
name|targetName
argument_list|,
name|onClauseAsText
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_UPDATE
case|:
name|numWhenMatchedUpdateClauses
operator|++
expr_stmt|;
name|String
name|s
init|=
name|handleUpdate
argument_list|(
name|whenClause
argument_list|,
name|rewrittenQueryStr
argument_list|,
name|target
argument_list|,
name|onClauseAsText
argument_list|,
name|targetTable
argument_list|,
name|extraPredicate
argument_list|)
decl_stmt|;
if|if
condition|(
name|numWhenMatchedUpdateClauses
operator|+
name|numWhenMatchedDeleteClauses
operator|==
literal|1
condition|)
block|{
name|extraPredicate
operator|=
name|s
expr_stmt|;
comment|//i.e. it's the 1st WHEN MATCHED
block|}
break|break;
case|case
name|HiveParser
operator|.
name|TOK_DELETE
case|:
name|numWhenMatchedDeleteClauses
operator|++
expr_stmt|;
name|String
name|s1
init|=
name|handleDelete
argument_list|(
name|whenClause
argument_list|,
name|rewrittenQueryStr
argument_list|,
name|target
argument_list|,
name|onClauseAsText
argument_list|,
name|targetTable
argument_list|,
name|extraPredicate
argument_list|)
decl_stmt|;
if|if
condition|(
name|numWhenMatchedUpdateClauses
operator|+
name|numWhenMatchedDeleteClauses
operator|==
literal|1
condition|)
block|{
name|extraPredicate
operator|=
name|s1
expr_stmt|;
comment|//i.e. it's the 1st WHEN MATCHED
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected WHEN clause type: "
operator|+
name|whenClause
operator|.
name|getType
argument_list|()
operator|+
name|addParseInfo
argument_list|(
name|whenClause
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|numWhenMatchedDeleteClauses
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|MERGE_TOO_MANY_DELETE
argument_list|,
name|ctx
operator|.
name|getCmd
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|numWhenMatchedUpdateClauses
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|MERGE_TOO_MANY_UPDATE
argument_list|,
name|ctx
operator|.
name|getCmd
argument_list|()
argument_list|)
throw|;
block|}
assert|assert
name|numInsertClauses
operator|<
literal|2
operator|:
literal|"too many Insert clauses"
assert|;
block|}
if|if
condition|(
name|numWhenMatchedDeleteClauses
operator|+
name|numWhenMatchedUpdateClauses
operator|==
literal|2
operator|&&
name|extraPredicate
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|MERGE_PREDIACTE_REQUIRED
argument_list|,
name|ctx
operator|.
name|getCmd
argument_list|()
argument_list|)
throw|;
block|}
name|boolean
name|validating
init|=
name|handleCardinalityViolation
argument_list|(
name|rewrittenQueryStr
argument_list|,
name|target
argument_list|,
name|onClauseAsText
argument_list|,
name|targetTable
argument_list|,
name|numWhenMatchedDeleteClauses
operator|==
literal|0
operator|&&
name|numWhenMatchedUpdateClauses
operator|==
literal|0
argument_list|)
decl_stmt|;
name|ReparseResult
name|rr
init|=
name|parseRewrittenQuery
argument_list|(
name|rewrittenQueryStr
argument_list|,
name|ctx
operator|.
name|getCmd
argument_list|()
argument_list|)
decl_stmt|;
name|Context
name|rewrittenCtx
init|=
name|rr
operator|.
name|rewrittenCtx
decl_stmt|;
name|ASTNode
name|rewrittenTree
init|=
name|rr
operator|.
name|rewrittenTree
decl_stmt|;
name|rewrittenCtx
operator|.
name|setOperation
argument_list|(
name|Context
operator|.
name|Operation
operator|.
name|MERGE
argument_list|)
expr_stmt|;
comment|//set dest name mapping on new context; 1st chid is TOK_FROM
for|for
control|(
name|int
name|insClauseIdx
init|=
literal|1
init|,
name|whenClauseIdx
init|=
literal|0
init|;
name|insClauseIdx
operator|<
name|rewrittenTree
operator|.
name|getChildCount
argument_list|()
operator|-
operator|(
name|validating
condition|?
literal|1
else|:
literal|0
comment|/*skip cardinality violation clause*/
operator|)
condition|;
name|insClauseIdx
operator|++
operator|,
name|whenClauseIdx
operator|++
control|)
block|{
comment|//we've added Insert clauses in order or WHEN items in whenClauses
name|ASTNode
name|insertClause
init|=
operator|(
name|ASTNode
operator|)
name|rewrittenTree
operator|.
name|getChild
argument_list|(
name|insClauseIdx
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|getWhenClauseOperation
argument_list|(
name|whenClauses
operator|.
name|get
argument_list|(
name|whenClauseIdx
argument_list|)
argument_list|)
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|TOK_INSERT
case|:
name|rewrittenCtx
operator|.
name|addDestNamePrefix
argument_list|(
name|insClauseIdx
argument_list|,
name|Context
operator|.
name|DestClausePrefix
operator|.
name|INSERT
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_UPDATE
case|:
name|rewrittenCtx
operator|.
name|addDestNamePrefix
argument_list|(
name|insClauseIdx
argument_list|,
name|Context
operator|.
name|DestClausePrefix
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_DELETE
case|:
name|rewrittenCtx
operator|.
name|addDestNamePrefix
argument_list|(
name|insClauseIdx
argument_list|,
name|Context
operator|.
name|DestClausePrefix
operator|.
name|DELETE
argument_list|)
expr_stmt|;
break|break;
default|default:
assert|assert
literal|false
assert|;
block|}
block|}
if|if
condition|(
name|validating
condition|)
block|{
comment|//here means the last branch of the multi-insert is Cardinality Validation
name|rewrittenCtx
operator|.
name|addDestNamePrefix
argument_list|(
name|rewrittenTree
operator|.
name|getChildCount
argument_list|()
operator|-
literal|1
argument_list|,
name|Context
operator|.
name|DestClausePrefix
operator|.
name|INSERT
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|useSuper
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|analyze
argument_list|(
name|rewrittenTree
argument_list|,
name|rewrittenCtx
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|useSuper
operator|=
literal|false
expr_stmt|;
block|}
name|updateOutputs
argument_list|(
name|targetTable
argument_list|)
expr_stmt|;
block|}
comment|/**    * SemanticAnalyzer will generate a WriteEntity for the target table since it doesn't know/check    * if the read and write are of the same table in "insert ... select ....".  Since DbTxnManager    * uses Read/WriteEntity objects to decide which locks to acquire, we get more concurrency if we    * have change the table WriteEntity to a set of partition WriteEntity objects based on    * ReadEntity objects computed for this table.    */
specifier|private
name|void
name|updateOutputs
parameter_list|(
name|Table
name|targetTable
parameter_list|)
block|{
name|markReadEntityForUpdate
argument_list|()
expr_stmt|;
if|if
condition|(
name|targetTable
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ReadEntity
argument_list|>
name|partitionsRead
init|=
name|getRestrictedPartitionSet
argument_list|(
name|targetTable
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|partitionsRead
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//if there is WriteEntity with WriteType=UPDATE/DELETE for target table, replace it with
comment|//WriteEntity for each partition
name|List
argument_list|<
name|WriteEntity
argument_list|>
name|toRemove
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|WriteEntity
name|we
range|:
name|outputs
control|)
block|{
name|WriteEntity
operator|.
name|WriteType
name|wt
init|=
name|we
operator|.
name|getWriteType
argument_list|()
decl_stmt|;
if|if
condition|(
name|isTargetTable
argument_list|(
name|we
argument_list|,
name|targetTable
argument_list|)
operator|&&
operator|(
name|wt
operator|==
name|WriteEntity
operator|.
name|WriteType
operator|.
name|UPDATE
operator|||
name|wt
operator|==
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DELETE
operator|)
condition|)
block|{
comment|/**              * The assumption here is that SemanticAnalyzer will will generate ReadEntity for each              * partition that exists and is matched by the WHERE clause (which may be all of them).              * Since we don't allow updating the value of a partition column, we know that we always              * write the same (or fewer) partitions than we read.  Still, the write is a Dynamic              * Partition write - see HIVE-15032.              */
name|toRemove
operator|.
name|add
argument_list|(
name|we
argument_list|)
expr_stmt|;
block|}
block|}
name|outputs
operator|.
name|removeAll
argument_list|(
name|toRemove
argument_list|)
expr_stmt|;
comment|// TODO: why is this like that?
for|for
control|(
name|ReadEntity
name|re
range|:
name|partitionsRead
control|)
block|{
for|for
control|(
name|WriteEntity
name|original
range|:
name|toRemove
control|)
block|{
comment|//since we may have both Update and Delete branches, Auth needs to know
name|WriteEntity
name|we
init|=
operator|new
name|WriteEntity
argument_list|(
name|re
operator|.
name|getPartition
argument_list|()
argument_list|,
name|original
operator|.
name|getWriteType
argument_list|()
argument_list|)
decl_stmt|;
name|we
operator|.
name|setDynamicPartitionWrite
argument_list|(
name|original
operator|.
name|isDynamicPartitionWrite
argument_list|()
argument_list|)
expr_stmt|;
name|outputs
operator|.
name|add
argument_list|(
name|we
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * If the optimizer has determined that it only has to read some of the partitions of the    * target table to satisfy the query, then we know that the write side of update/delete    * (and update/delete parts of merge)    * can only write (at most) that set of partitions (since we currently don't allow updating    * partition (or bucket) columns).  So we want to replace the table level    * WriteEntity in the outputs with WriteEntity for each of these partitions    * ToDo: see if this should be moved to SemanticAnalyzer itself since it applies to any    * insert which does a select against the same table.  Then SemanticAnalyzer would also    * be able to not use DP for the Insert...    *    * Note that the Insert of Merge may be creating new partitions and writing to partitions    * which were not read  (WHEN NOT MATCHED...).  WriteEntity for that should be created    * in MoveTask (or some other task after the query is complete)    */
specifier|private
name|List
argument_list|<
name|ReadEntity
argument_list|>
name|getRestrictedPartitionSet
parameter_list|(
name|Table
name|targetTable
parameter_list|)
block|{
name|List
argument_list|<
name|ReadEntity
argument_list|>
name|partitionsRead
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ReadEntity
name|re
range|:
name|inputs
control|)
block|{
if|if
condition|(
name|re
operator|.
name|isFromTopLevelQuery
operator|&&
name|re
operator|.
name|getType
argument_list|()
operator|==
name|Entity
operator|.
name|Type
operator|.
name|PARTITION
operator|&&
name|isTargetTable
argument_list|(
name|re
argument_list|,
name|targetTable
argument_list|)
condition|)
block|{
name|partitionsRead
operator|.
name|add
argument_list|(
name|re
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|partitionsRead
return|;
block|}
comment|/**    * if there is no WHEN NOT MATCHED THEN INSERT, we don't outer join    */
specifier|private
name|String
name|chooseJoinType
parameter_list|(
name|List
argument_list|<
name|ASTNode
argument_list|>
name|whenClauses
parameter_list|)
block|{
for|for
control|(
name|ASTNode
name|whenClause
range|:
name|whenClauses
control|)
block|{
if|if
condition|(
name|getWhenClauseOperation
argument_list|(
name|whenClause
argument_list|)
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_INSERT
condition|)
block|{
return|return
literal|"RIGHT OUTER JOIN"
return|;
block|}
block|}
return|return
literal|"INNER JOIN"
return|;
block|}
comment|/**    * does this Entity belong to target table (partition)    */
specifier|private
name|boolean
name|isTargetTable
parameter_list|(
name|Entity
name|entity
parameter_list|,
name|Table
name|targetTable
parameter_list|)
block|{
comment|//todo: https://issues.apache.org/jira/browse/HIVE-15048
comment|/**      * is this the right way to compare?  Should it just compare paths?      * equals() impl looks heavy weight      */
return|return
name|targetTable
operator|.
name|equals
argument_list|(
name|entity
operator|.
name|getTable
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Per SQL Spec ISO/IEC 9075-2:2011(E) Section 14.2 under "General Rules" Item 6/Subitem a/Subitem 2/Subitem B,    * an error should be raised if> 1 row of "source" matches the same row in "target".    * This should not affect the runtime of the query as it's running in parallel with other    * branches of the multi-insert.  It won't actually write any data to merge_tmp_table since the    * cardinality_violation() UDF throws an error whenever it's called killing the query    * @return true if another Insert clause was added    */
specifier|private
name|boolean
name|handleCardinalityViolation
parameter_list|(
name|StringBuilder
name|rewrittenQueryStr
parameter_list|,
name|ASTNode
name|target
parameter_list|,
name|String
name|onClauseAsString
parameter_list|,
name|Table
name|targetTable
parameter_list|,
name|boolean
name|onlyHaveWhenNotMatchedClause
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
operator|!
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MERGE_CARDINALITY_VIOLATION_CHECK
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Merge statement cardinality violation check is disabled: "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MERGE_CARDINALITY_VIOLATION_CHECK
operator|.
name|varname
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|onlyHaveWhenNotMatchedClause
condition|)
block|{
comment|//if no update or delete in Merge, there is no need to to do cardinality check
return|return
literal|false
return|;
block|}
comment|//this is a tmp table and thus Session scoped and acid requires SQL statement to be serial in a
comment|// given session, i.e. the name can be fixed across all invocations
name|String
name|tableName
init|=
literal|"merge_tmp_table"
decl_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|"\nINSERT INTO "
argument_list|)
operator|.
name|append
argument_list|(
name|tableName
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n  SELECT cardinality_violation("
argument_list|)
operator|.
name|append
argument_list|(
name|getSimpleTableName
argument_list|(
name|target
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|".ROW__ID"
argument_list|)
expr_stmt|;
name|addPartitionColsToSelect
argument_list|(
name|targetTable
operator|.
name|getPartCols
argument_list|()
argument_list|,
name|rewrittenQueryStr
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|")\n WHERE "
argument_list|)
operator|.
name|append
argument_list|(
name|onClauseAsString
argument_list|)
operator|.
name|append
argument_list|(
literal|" GROUP BY "
argument_list|)
operator|.
name|append
argument_list|(
name|getSimpleTableName
argument_list|(
name|target
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|".ROW__ID"
argument_list|)
expr_stmt|;
name|addPartitionColsToSelect
argument_list|(
name|targetTable
operator|.
name|getPartCols
argument_list|()
argument_list|,
name|rewrittenQueryStr
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|" HAVING count(*)> 1"
argument_list|)
expr_stmt|;
comment|//say table T has partition p, we are generating
comment|//select cardinality_violation(ROW_ID, p) WHERE ... GROUP BY ROW__ID, p
comment|//the Group By args are passed to cardinality_violation to add the violating value to the error msg
try|try
block|{
if|if
condition|(
literal|null
operator|==
name|db
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|StorageFormat
name|format
init|=
operator|new
name|StorageFormat
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|format
operator|.
name|processStorageFormat
argument_list|(
literal|"TextFile"
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|db
operator|.
name|newTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|table
operator|.
name|setSerializationLib
argument_list|(
name|format
operator|.
name|getSerde
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"val"
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|setFields
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|table
operator|.
name|setDataLocation
argument_list|(
name|Warehouse
operator|.
name|getDnsPath
argument_list|(
operator|new
name|Path
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getTempTableSpace
argument_list|()
argument_list|,
name|tableName
argument_list|)
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|getTTable
argument_list|()
operator|.
name|setTemporary
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|table
operator|.
name|setStoredAsSubDirectories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|table
operator|.
name|setInputFormatClass
argument_list|(
name|format
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setOutputFormatClass
argument_list|(
name|format
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|createTable
argument_list|(
name|table
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
decl||
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * @param onClauseAsString - because there is no clone() and we need to use in multiple places    * @param deleteExtraPredicate - see notes at caller    */
specifier|private
name|String
name|handleUpdate
parameter_list|(
name|ASTNode
name|whenMatchedUpdateClause
parameter_list|,
name|StringBuilder
name|rewrittenQueryStr
parameter_list|,
name|ASTNode
name|target
parameter_list|,
name|String
name|onClauseAsString
parameter_list|,
name|Table
name|targetTable
parameter_list|,
name|String
name|deleteExtraPredicate
parameter_list|)
throws|throws
name|SemanticException
block|{
assert|assert
name|whenMatchedUpdateClause
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_MATCHED
assert|;
assert|assert
name|getWhenClauseOperation
argument_list|(
name|whenMatchedUpdateClause
argument_list|)
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_UPDATE
assert|;
name|String
name|targetName
init|=
name|getSimpleTableName
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|"INSERT INTO "
argument_list|)
operator|.
name|append
argument_list|(
name|getFullTableNameForSQL
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
name|addPartitionColsToInsert
argument_list|(
name|targetTable
operator|.
name|getPartCols
argument_list|()
argument_list|,
name|rewrittenQueryStr
argument_list|)
expr_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|"    -- update clause\n select "
argument_list|)
operator|.
name|append
argument_list|(
name|targetName
argument_list|)
operator|.
name|append
argument_list|(
literal|".ROW__ID"
argument_list|)
expr_stmt|;
name|ASTNode
name|setClause
init|=
operator|(
name|ASTNode
operator|)
name|getWhenClauseOperation
argument_list|(
name|whenMatchedUpdateClause
argument_list|)
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|//columns being updated -> update expressions; "setRCols" (last param) is null because we use actual expressions
comment|//before reparsing, i.e. they are known to SemanticAnalyzer logic
name|Map
argument_list|<
name|String
argument_list|,
name|ASTNode
argument_list|>
name|setColsExprs
init|=
name|collectSetColumnsAndExpressions
argument_list|(
name|setClause
argument_list|,
literal|null
argument_list|,
name|targetTable
argument_list|)
decl_stmt|;
comment|//if target table has cols c1,c2,c3 and p1 partition col and we had "SET c2 = 5, c1 = current_date()" we want to end up with
comment|//insert into target (p1) select current_date(), 5, c3, p1 where ....
comment|//since we take the RHS of set exactly as it was in Input, we don't need to deal with quoting/escaping column/table names
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|nonPartCols
init|=
name|targetTable
operator|.
name|getCols
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|nonPartCols
control|)
block|{
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|fs
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|setColsExprs
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|String
name|rhsExp
init|=
name|getMatchedText
argument_list|(
name|setColsExprs
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
comment|//"set a=5, b=8" - rhsExp picks up the next char (e.g. ',') from the token stream
switch|switch
condition|(
name|rhsExp
operator|.
name|charAt
argument_list|(
name|rhsExp
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
condition|)
block|{
case|case
literal|','
case|:
case|case
literal|'\n'
case|:
name|rhsExp
operator|=
name|rhsExp
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|rhsExp
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
name|rhsExp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
name|getSimpleTableName
argument_list|(
name|target
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|HiveUtils
operator|.
name|unparseIdentifier
argument_list|(
name|name
argument_list|,
name|this
operator|.
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|addPartitionColsToSelect
argument_list|(
name|targetTable
operator|.
name|getPartCols
argument_list|()
argument_list|,
name|rewrittenQueryStr
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|"\n   WHERE "
argument_list|)
operator|.
name|append
argument_list|(
name|onClauseAsString
argument_list|)
expr_stmt|;
name|String
name|extraPredicate
init|=
name|getWhenClausePredicate
argument_list|(
name|whenMatchedUpdateClause
argument_list|)
decl_stmt|;
if|if
condition|(
name|extraPredicate
operator|!=
literal|null
condition|)
block|{
comment|//we have WHEN MATCHED AND<boolean expr> THEN DELETE
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|" AND "
argument_list|)
operator|.
name|append
argument_list|(
name|extraPredicate
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteExtraPredicate
operator|!=
literal|null
condition|)
block|{
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|" AND NOT("
argument_list|)
operator|.
name|append
argument_list|(
name|deleteExtraPredicate
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|"\n sort by "
argument_list|)
expr_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
name|targetName
argument_list|)
operator|.
name|append
argument_list|(
literal|".ROW__ID \n"
argument_list|)
expr_stmt|;
name|setUpAccessControlInfoForUpdate
argument_list|(
name|targetTable
argument_list|,
name|setColsExprs
argument_list|)
expr_stmt|;
comment|//we don't deal with columns on RHS of SET expression since the whole expr is part of the
comment|//rewritten SQL statement and is thus handled by SemanticAnalzyer.  Nor do we have to
comment|//figure which cols on RHS are from source and which from target
return|return
name|extraPredicate
return|;
block|}
comment|/**    * @param onClauseAsString - because there is no clone() and we need to use in multiple places    * @param updateExtraPredicate - see notes at caller    */
specifier|private
name|String
name|handleDelete
parameter_list|(
name|ASTNode
name|whenMatchedDeleteClause
parameter_list|,
name|StringBuilder
name|rewrittenQueryStr
parameter_list|,
name|ASTNode
name|target
parameter_list|,
name|String
name|onClauseAsString
parameter_list|,
name|Table
name|targetTable
parameter_list|,
name|String
name|updateExtraPredicate
parameter_list|)
throws|throws
name|SemanticException
block|{
assert|assert
name|whenMatchedDeleteClause
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_MATCHED
assert|;
assert|assert
name|getWhenClauseOperation
argument_list|(
name|whenMatchedDeleteClause
argument_list|)
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_DELETE
assert|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
name|targetTable
operator|.
name|getPartCols
argument_list|()
decl_stmt|;
name|String
name|targetName
init|=
name|getSimpleTableName
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|"INSERT INTO "
argument_list|)
operator|.
name|append
argument_list|(
name|getFullTableNameForSQL
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
name|addPartitionColsToInsert
argument_list|(
name|partCols
argument_list|,
name|rewrittenQueryStr
argument_list|)
expr_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|"    -- delete clause\n select "
argument_list|)
operator|.
name|append
argument_list|(
name|targetName
argument_list|)
operator|.
name|append
argument_list|(
literal|".ROW__ID "
argument_list|)
expr_stmt|;
name|addPartitionColsToSelect
argument_list|(
name|partCols
argument_list|,
name|rewrittenQueryStr
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|"\n   WHERE "
argument_list|)
operator|.
name|append
argument_list|(
name|onClauseAsString
argument_list|)
expr_stmt|;
name|String
name|extraPredicate
init|=
name|getWhenClausePredicate
argument_list|(
name|whenMatchedDeleteClause
argument_list|)
decl_stmt|;
if|if
condition|(
name|extraPredicate
operator|!=
literal|null
condition|)
block|{
comment|//we have WHEN MATCHED AND<boolean expr> THEN DELETE
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|" AND "
argument_list|)
operator|.
name|append
argument_list|(
name|extraPredicate
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updateExtraPredicate
operator|!=
literal|null
condition|)
block|{
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|" AND NOT("
argument_list|)
operator|.
name|append
argument_list|(
name|updateExtraPredicate
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|"\n sort by "
argument_list|)
expr_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
name|targetName
argument_list|)
operator|.
name|append
argument_list|(
literal|".ROW__ID \n"
argument_list|)
expr_stmt|;
return|return
name|extraPredicate
return|;
block|}
specifier|private
specifier|static
name|String
name|addParseInfo
parameter_list|(
name|ASTNode
name|n
parameter_list|)
block|{
return|return
literal|" at "
operator|+
name|ErrorMsg
operator|.
name|renderPosition
argument_list|(
name|n
argument_list|)
return|;
block|}
comment|/**    * Returns the table name to use in the generated query preserving original quotes/escapes if any    * @see #getFullTableNameForSQL(ASTNode)    */
specifier|private
name|String
name|getSimpleTableName
parameter_list|(
name|ASTNode
name|n
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
name|HiveUtils
operator|.
name|unparseIdentifier
argument_list|(
name|getSimpleTableNameBase
argument_list|(
name|n
argument_list|)
argument_list|,
name|this
operator|.
name|conf
argument_list|)
return|;
block|}
specifier|private
name|String
name|getSimpleTableNameBase
parameter_list|(
name|ASTNode
name|n
parameter_list|)
throws|throws
name|SemanticException
block|{
switch|switch
condition|(
name|n
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|TOK_TABREF
case|:
name|int
name|aliasIndex
init|=
name|findTabRefIdxs
argument_list|(
name|n
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|aliasIndex
operator|!=
literal|0
condition|)
block|{
return|return
name|n
operator|.
name|getChild
argument_list|(
name|aliasIndex
argument_list|)
operator|.
name|getText
argument_list|()
return|;
comment|//the alias
block|}
return|return
name|getSimpleTableNameBase
argument_list|(
operator|(
name|ASTNode
operator|)
name|n
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
case|case
name|HiveParser
operator|.
name|TOK_TABNAME
case|:
if|if
condition|(
name|n
operator|.
name|getChildCount
argument_list|()
operator|==
literal|2
condition|)
block|{
comment|//db.table -> return table
return|return
name|n
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
return|;
block|}
return|return
name|n
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
return|;
case|case
name|HiveParser
operator|.
name|TOK_SUBQUERY
case|:
return|return
name|n
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
return|;
comment|//the alias
default|default:
throw|throw
name|raiseWrongType
argument_list|(
literal|"TOK_TABREF|TOK_TABNAME|TOK_SUBQUERY"
argument_list|,
name|n
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return table name in db.table form with proper quoting/escaping to be used in a SQL statement    */
specifier|private
name|String
name|getFullTableNameForSQL
parameter_list|(
name|ASTNode
name|n
parameter_list|)
throws|throws
name|SemanticException
block|{
switch|switch
condition|(
name|n
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|TOK_TABNAME
case|:
name|String
index|[]
name|tableName
init|=
name|getQualifiedTableName
argument_list|(
name|n
argument_list|)
decl_stmt|;
return|return
name|getDotName
argument_list|(
operator|new
name|String
index|[]
block|{
name|HiveUtils
operator|.
name|unparseIdentifier
argument_list|(
name|tableName
index|[
literal|0
index|]
argument_list|,
name|this
operator|.
name|conf
argument_list|)
block|,
name|HiveUtils
operator|.
name|unparseIdentifier
argument_list|(
name|tableName
index|[
literal|1
index|]
argument_list|,
name|this
operator|.
name|conf
argument_list|)
block|}
argument_list|)
return|;
case|case
name|HiveParser
operator|.
name|TOK_TABREF
case|:
return|return
name|getFullTableNameForSQL
argument_list|(
operator|(
name|ASTNode
operator|)
name|n
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
default|default:
throw|throw
name|raiseWrongType
argument_list|(
literal|"TOK_TABNAME"
argument_list|,
name|n
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|ReparseResult
block|{
specifier|private
specifier|final
name|ASTNode
name|rewrittenTree
decl_stmt|;
specifier|private
specifier|final
name|Context
name|rewrittenCtx
decl_stmt|;
name|ReparseResult
parameter_list|(
name|ASTNode
name|n
parameter_list|,
name|Context
name|c
parameter_list|)
block|{
name|rewrittenTree
operator|=
name|n
expr_stmt|;
name|rewrittenCtx
operator|=
name|c
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|IllegalArgumentException
name|raiseWrongType
parameter_list|(
name|String
name|expectedTokName
parameter_list|,
name|ASTNode
name|n
parameter_list|)
block|{
return|return
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected "
operator|+
name|expectedTokName
operator|+
literal|"; got "
operator|+
name|n
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isAliased
parameter_list|(
name|ASTNode
name|n
parameter_list|)
block|{
switch|switch
condition|(
name|n
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|TOK_TABREF
case|:
return|return
name|findTabRefIdxs
argument_list|(
name|n
argument_list|)
index|[
literal|0
index|]
operator|!=
literal|0
return|;
case|case
name|HiveParser
operator|.
name|TOK_TABNAME
case|:
return|return
literal|false
return|;
case|case
name|HiveParser
operator|.
name|TOK_SUBQUERY
case|:
assert|assert
name|n
operator|.
name|getChildCount
argument_list|()
operator|>
literal|1
operator|:
literal|"Expected Derived Table to be aliased"
assert|;
return|return
literal|true
return|;
default|default:
throw|throw
name|raiseWrongType
argument_list|(
literal|"TOK_TABREF|TOK_TABNAME"
argument_list|,
name|n
argument_list|)
throw|;
block|}
block|}
comment|/**    * Collect WHEN clauses from Merge statement AST    */
specifier|private
name|List
argument_list|<
name|ASTNode
argument_list|>
name|findWhenClauses
parameter_list|(
name|ASTNode
name|tree
parameter_list|)
throws|throws
name|SemanticException
block|{
assert|assert
name|tree
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_MERGE
assert|;
name|List
argument_list|<
name|ASTNode
argument_list|>
name|whenClauses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|3
init|;
name|idx
operator|<
name|tree
operator|.
name|getChildCount
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|ASTNode
name|whenClause
init|=
operator|(
name|ASTNode
operator|)
name|tree
operator|.
name|getChild
argument_list|(
name|idx
argument_list|)
decl_stmt|;
assert|assert
name|whenClause
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_MATCHED
operator|||
name|whenClause
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_NOT_MATCHED
operator|:
literal|"Unexpected node type found: "
operator|+
name|whenClause
operator|.
name|getType
argument_list|()
operator|+
name|addParseInfo
argument_list|(
name|whenClause
argument_list|)
assert|;
name|whenClauses
operator|.
name|add
argument_list|(
name|whenClause
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|whenClauses
operator|.
name|size
argument_list|()
operator|<=
literal|0
condition|)
block|{
comment|//Futureproofing: the parser will actually not allow this
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Must have at least 1 WHEN clause in MERGE statement"
argument_list|)
throw|;
block|}
return|return
name|whenClauses
return|;
block|}
specifier|private
name|ASTNode
name|getWhenClauseOperation
parameter_list|(
name|ASTNode
name|whenClause
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|whenClause
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_MATCHED
operator|||
name|whenClause
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_NOT_MATCHED
operator|)
condition|)
block|{
throw|throw
name|raiseWrongType
argument_list|(
literal|"Expected TOK_MATCHED|TOK_NOT_MATCHED"
argument_list|,
name|whenClause
argument_list|)
throw|;
block|}
return|return
operator|(
name|ASTNode
operator|)
name|whenClause
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * returns the<boolean predicate> as in WHEN MATCHED AND<boolean predicate> THEN...    * @return may be null    */
specifier|private
name|String
name|getWhenClausePredicate
parameter_list|(
name|ASTNode
name|whenClause
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|whenClause
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_MATCHED
operator|||
name|whenClause
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_NOT_MATCHED
operator|)
condition|)
block|{
throw|throw
name|raiseWrongType
argument_list|(
literal|"Expected TOK_MATCHED|TOK_NOT_MATCHED"
argument_list|,
name|whenClause
argument_list|)
throw|;
block|}
if|if
condition|(
name|whenClause
operator|.
name|getChildCount
argument_list|()
operator|==
literal|2
condition|)
block|{
return|return
name|getMatchedText
argument_list|(
operator|(
name|ASTNode
operator|)
name|whenClause
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Generates the Insert leg of the multi-insert SQL to represent WHEN NOT MATCHED THEN INSERT clause    * @param targetTableNameInSourceQuery - simple name/alias    * @throws SemanticException    */
specifier|private
name|void
name|handleInsert
parameter_list|(
name|ASTNode
name|whenNotMatchedClause
parameter_list|,
name|StringBuilder
name|rewrittenQueryStr
parameter_list|,
name|ASTNode
name|target
parameter_list|,
name|ASTNode
name|onClause
parameter_list|,
name|Table
name|targetTable
parameter_list|,
name|String
name|targetTableNameInSourceQuery
parameter_list|,
name|String
name|onClauseAsString
parameter_list|)
throws|throws
name|SemanticException
block|{
assert|assert
name|whenNotMatchedClause
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_NOT_MATCHED
assert|;
assert|assert
name|getWhenClauseOperation
argument_list|(
name|whenNotMatchedClause
argument_list|)
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_INSERT
assert|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
name|targetTable
operator|.
name|getPartCols
argument_list|()
decl_stmt|;
name|String
name|valuesClause
init|=
name|getMatchedText
argument_list|(
operator|(
name|ASTNode
operator|)
name|getWhenClauseOperation
argument_list|(
name|whenNotMatchedClause
argument_list|)
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|valuesClause
operator|=
name|valuesClause
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|valuesClause
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//strip '(' and ')'
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|"INSERT INTO "
argument_list|)
operator|.
name|append
argument_list|(
name|getFullTableNameForSQL
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
name|addPartitionColsToInsert
argument_list|(
name|partCols
argument_list|,
name|rewrittenQueryStr
argument_list|)
expr_stmt|;
name|OnClauseAnalyzer
name|oca
init|=
operator|new
name|OnClauseAnalyzer
argument_list|(
name|onClause
argument_list|,
name|targetTable
argument_list|,
name|targetTableNameInSourceQuery
argument_list|,
name|conf
argument_list|,
name|onClauseAsString
argument_list|)
decl_stmt|;
name|oca
operator|.
name|analyze
argument_list|()
expr_stmt|;
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|"    -- insert clause\n  select "
argument_list|)
operator|.
name|append
argument_list|(
name|valuesClause
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n   WHERE "
argument_list|)
operator|.
name|append
argument_list|(
name|oca
operator|.
name|getPredicate
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|extraPredicate
init|=
name|getWhenClausePredicate
argument_list|(
name|whenNotMatchedClause
argument_list|)
decl_stmt|;
if|if
condition|(
name|extraPredicate
operator|!=
literal|null
condition|)
block|{
comment|//we have WHEN NOT MATCHED AND<boolean expr> THEN INSERT
name|rewrittenQueryStr
operator|.
name|append
argument_list|(
literal|" AND "
argument_list|)
operator|.
name|append
argument_list|(
name|getMatchedText
argument_list|(
operator|(
operator|(
name|ASTNode
operator|)
name|whenNotMatchedClause
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|)
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Suppose the input Merge statement has ON target.a = source.b and c = d.  Assume, that 'c' is from    * target table and 'd' is from source expression.  In order to properly    * generate the Insert for WHEN NOT MATCHED THEN INSERT, we need to make sure that the Where    * clause of this Insert contains "target.a is null and target.c is null"  This ensures that this    * Insert leg does not receive any rows that are processed by Insert corresponding to    * WHEN MATCHED THEN ... clauses.  (Implicit in this is a mini resolver that figures out if an    * unqualified column is part of the target table.  We can get away with this simple logic because    * we know that target is always a table (as opposed to some derived table).    * The job of this class is to generate this predicate.    *    * Note that is this predicate cannot simply be NOT(on-clause-expr).  IF on-clause-expr evaluates    * to Unknown, it will be treated as False in the WHEN MATCHED Inserts but NOT(Unknown) = Unknown,    * and so it will be False for WHEN NOT MATCHED Insert...    */
specifier|private
specifier|static
specifier|final
class|class
name|OnClauseAnalyzer
block|{
specifier|private
specifier|final
name|ASTNode
name|onClause
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|table2column
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|unresolvedColumns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|allTargetTableColumns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|tableNamesFound
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|targetTableNameInSourceQuery
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|private
specifier|final
name|String
name|onClauseAsString
decl_stmt|;
comment|/**      * @param targetTableNameInSourceQuery alias or simple name      */
name|OnClauseAnalyzer
parameter_list|(
name|ASTNode
name|onClause
parameter_list|,
name|Table
name|targetTable
parameter_list|,
name|String
name|targetTableNameInSourceQuery
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|String
name|onClauseAsString
parameter_list|)
block|{
name|this
operator|.
name|onClause
operator|=
name|onClause
expr_stmt|;
name|allTargetTableColumns
operator|.
name|addAll
argument_list|(
name|targetTable
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
name|allTargetTableColumns
operator|.
name|addAll
argument_list|(
name|targetTable
operator|.
name|getPartCols
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|targetTableNameInSourceQuery
operator|=
name|unescapeIdentifier
argument_list|(
name|targetTableNameInSourceQuery
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|onClauseAsString
operator|=
name|onClauseAsString
expr_stmt|;
block|}
comment|/**      * finds all columns and groups by table ref (if there is one)      */
specifier|private
name|void
name|visit
parameter_list|(
name|ASTNode
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TABLE_OR_COL
condition|)
block|{
name|ASTNode
name|parent
init|=
operator|(
name|ASTNode
operator|)
name|n
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|parent
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|DOT
condition|)
block|{
comment|//the ref must be a table, so look for column name as right child of DOT
if|if
condition|(
name|parent
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
operator|&&
name|parent
operator|.
name|getParent
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|DOT
condition|)
block|{
comment|//I don't think this can happen... but just in case
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Found unexpected db.table.col reference in "
operator|+
name|onClauseAsString
argument_list|)
throw|;
block|}
name|addColumn2Table
argument_list|(
name|n
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|,
name|parent
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//must be just a column name
name|unresolvedColumns
operator|.
name|add
argument_list|(
name|n
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|n
operator|.
name|getChildCount
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Node
name|child
range|:
name|n
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|visit
argument_list|(
operator|(
name|ASTNode
operator|)
name|child
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|analyze
parameter_list|()
block|{
name|visit
argument_list|(
name|onClause
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableNamesFound
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Found> 2 table refs in ON clause.  Found "
operator|+
name|tableNamesFound
operator|+
literal|" in "
operator|+
name|onClauseAsString
argument_list|)
throw|;
block|}
name|handleUnresolvedColumns
argument_list|()
expr_stmt|;
if|if
condition|(
name|tableNamesFound
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Found> 2 table refs in ON clause (incl unresolved).  "
operator|+
literal|"Found "
operator|+
name|tableNamesFound
operator|+
literal|" in "
operator|+
name|onClauseAsString
argument_list|)
throw|;
block|}
block|}
comment|/**      * Find those that belong to target table      */
specifier|private
name|void
name|handleUnresolvedColumns
parameter_list|()
block|{
if|if
condition|(
name|unresolvedColumns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|String
name|c
range|:
name|unresolvedColumns
control|)
block|{
for|for
control|(
name|FieldSchema
name|fs
range|:
name|allTargetTableColumns
control|)
block|{
if|if
condition|(
name|c
operator|.
name|equalsIgnoreCase
argument_list|(
name|fs
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|//c belongs to target table; strictly speaking there maybe an ambiguous ref but
comment|//this will be caught later when multi-insert is parsed
name|addColumn2Table
argument_list|(
name|targetTableNameInSourceQuery
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|addColumn2Table
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
comment|//normalize name for mapping
name|tableNamesFound
operator|.
name|add
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cols
init|=
name|table2column
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|cols
operator|==
literal|null
condition|)
block|{
name|cols
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|table2column
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|cols
argument_list|)
expr_stmt|;
block|}
comment|//we want to preserve 'columnName' as it was in original input query so that rewrite
comment|//looks as much as possible like original query
name|cols
operator|.
name|add
argument_list|(
name|columnName
argument_list|)
expr_stmt|;
block|}
comment|/**      * Now generate the predicate for Where clause      */
specifier|private
name|String
name|getPredicate
parameter_list|()
block|{
comment|//normilize table name for mapping
name|List
argument_list|<
name|String
argument_list|>
name|targetCols
init|=
name|table2column
operator|.
name|get
argument_list|(
name|targetTableNameInSourceQuery
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetCols
operator|==
literal|null
condition|)
block|{
comment|/*e.g. ON source.t=1         * this is not strictly speaking invlaid but it does ensure that all columns from target         * table are all NULL for every row.  This would make any WHEN MATCHED clause invalid since         * we don't have a ROW__ID.  The WHEN NOT MATCHED could be meaningful but it's just data from         * source satisfying source.t=1...  not worth the effort to support this*/
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_TABLE_IN_ON_CLAUSE_OF_MERGE
operator|.
name|format
argument_list|(
name|targetTableNameInSourceQuery
argument_list|,
name|onClauseAsString
argument_list|)
argument_list|)
throw|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|col
range|:
name|targetCols
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" AND "
argument_list|)
expr_stmt|;
block|}
comment|//but preserve table name in SQL
name|sb
operator|.
name|append
argument_list|(
name|HiveUtils
operator|.
name|unparseIdentifier
argument_list|(
name|targetTableNameInSourceQuery
argument_list|,
name|conf
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|HiveUtils
operator|.
name|unparseIdentifier
argument_list|(
name|col
argument_list|,
name|conf
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" IS NULL"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

