begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|wm
operator|.
name|SessionTriggerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|wm
operator|.
name|TriggerActionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|PerPoolTriggerValidatorRunnable
implements|implements
name|Runnable
block|{
specifier|protected
specifier|static
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PerPoolTriggerValidatorRunnable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SessionTriggerProvider
argument_list|>
name|sessionTriggerProviders
decl_stmt|;
specifier|private
specifier|final
name|TriggerActionHandler
name|triggerActionHandler
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TriggerValidatorRunnable
argument_list|>
name|poolValidators
decl_stmt|;
specifier|private
specifier|final
name|long
name|triggerValidationIntervalMs
decl_stmt|;
name|PerPoolTriggerValidatorRunnable
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SessionTriggerProvider
argument_list|>
name|sessionTriggerProviders
parameter_list|,
specifier|final
name|TriggerActionHandler
name|triggerActionHandler
parameter_list|,
specifier|final
name|long
name|triggerValidationIntervalMs
parameter_list|)
block|{
name|this
operator|.
name|sessionTriggerProviders
operator|=
name|sessionTriggerProviders
expr_stmt|;
name|this
operator|.
name|triggerActionHandler
operator|=
name|triggerActionHandler
expr_stmt|;
name|this
operator|.
name|poolValidators
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|triggerValidationIntervalMs
operator|=
name|triggerValidationIntervalMs
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|ScheduledExecutorService
name|validatorExecutorService
init|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
name|sessionTriggerProviders
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SessionTriggerProvider
argument_list|>
name|entry
range|:
name|sessionTriggerProviders
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|poolName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|poolValidators
operator|.
name|containsKey
argument_list|(
name|poolName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating trigger validator for pool: {}"
argument_list|,
name|poolName
argument_list|)
expr_stmt|;
name|TriggerValidatorRunnable
name|poolValidator
init|=
operator|new
name|TriggerValidatorRunnable
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|triggerActionHandler
argument_list|)
decl_stmt|;
name|validatorExecutorService
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|poolValidator
argument_list|,
name|triggerValidationIntervalMs
argument_list|,
name|triggerValidationIntervalMs
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|poolValidators
operator|.
name|put
argument_list|(
name|poolName
argument_list|,
name|poolValidator
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// if exception is thrown in scheduled tasks, no further tasks will be scheduled, hence this ugly catch
name|LOG
operator|.
name|warn
argument_list|(
name|PerPoolTriggerValidatorRunnable
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" caught exception."
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

