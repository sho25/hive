begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentLengthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|DateObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|StringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|TimestampObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_comment
comment|/**  * deterministic version of UDFUnixTimeStamp. enforces argument  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"to_unix_timestamp"
argument_list|,
name|value
operator|=
literal|"_FUNC_(date[, pattern]) - Returns the UNIX timestamp"
argument_list|,
name|extended
operator|=
literal|"Converts the specified time to number of seconds since 1970-01-01."
argument_list|)
specifier|public
class|class
name|GenericUDFToUnixTimeStamp
extends|extends
name|GenericUDF
block|{
specifier|private
specifier|transient
name|StringObjectInspector
name|intputTextOI
decl_stmt|;
specifier|private
specifier|transient
name|DateObjectInspector
name|inputDateOI
decl_stmt|;
specifier|private
specifier|transient
name|TimestampObjectInspector
name|inputTimestampOI
decl_stmt|;
specifier|private
specifier|transient
name|StringObjectInspector
name|patternOI
decl_stmt|;
specifier|private
name|String
name|lasPattern
init|=
literal|"yyyy-MM-dd HH:mm:ss"
decl_stmt|;
specifier|private
specifier|transient
specifier|final
name|SimpleDateFormat
name|formatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|lasPattern
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|initializeInput
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
return|;
block|}
specifier|protected
name|void
name|initializeInput
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
if|if
condition|(
name|arguments
operator|.
name|length
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentLengthException
argument_list|(
literal|"The function TO_UNIX_TIMESTAMP "
operator|+
literal|"requires at least one argument"
argument_list|)
throw|;
block|}
if|if
condition|(
name|arguments
index|[
literal|0
index|]
operator|instanceof
name|StringObjectInspector
condition|)
block|{
name|intputTextOI
operator|=
operator|(
name|StringObjectInspector
operator|)
name|arguments
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|arguments
operator|.
name|length
operator|>
literal|1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|arguments
index|[
literal|1
index|]
operator|instanceof
name|StringObjectInspector
operator|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"The time pattern for "
operator|+
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|" should be string type"
argument_list|)
throw|;
block|}
name|patternOI
operator|=
operator|(
name|StringObjectInspector
operator|)
name|arguments
index|[
literal|1
index|]
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|arguments
index|[
literal|0
index|]
operator|instanceof
name|DateObjectInspector
condition|)
block|{
name|inputDateOI
operator|=
operator|(
name|DateObjectInspector
operator|)
name|arguments
index|[
literal|0
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arguments
index|[
literal|0
index|]
operator|instanceof
name|TimestampObjectInspector
condition|)
block|{
name|inputTimestampOI
operator|=
operator|(
name|TimestampObjectInspector
operator|)
name|arguments
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"The function "
operator|+
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|" takes only string or timestamp types"
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"to_unix_timestamp"
return|;
block|}
specifier|protected
specifier|transient
specifier|final
name|LongWritable
name|retValue
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|intputTextOI
operator|!=
literal|null
condition|)
block|{
name|String
name|textVal
init|=
name|intputTextOI
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|textVal
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|patternOI
operator|!=
literal|null
condition|)
block|{
name|String
name|patternVal
init|=
name|patternOI
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|arguments
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|patternVal
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|patternVal
operator|.
name|equals
argument_list|(
name|lasPattern
argument_list|)
condition|)
block|{
name|formatter
operator|.
name|applyPattern
argument_list|(
name|patternVal
argument_list|)
expr_stmt|;
name|lasPattern
operator|=
name|patternVal
expr_stmt|;
block|}
block|}
try|try
block|{
name|retValue
operator|.
name|set
argument_list|(
name|formatter
operator|.
name|parse
argument_list|(
name|textVal
argument_list|)
operator|.
name|getTime
argument_list|()
operator|/
literal|1000
argument_list|)
expr_stmt|;
return|return
name|retValue
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|inputDateOI
operator|!=
literal|null
condition|)
block|{
name|retValue
operator|.
name|set
argument_list|(
name|inputDateOI
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getTimeInSeconds
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|retValue
return|;
block|}
name|Timestamp
name|timestamp
init|=
name|inputTimestampOI
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|retValue
operator|.
name|set
argument_list|(
name|timestamp
operator|.
name|getTime
argument_list|()
operator|/
literal|1000
argument_list|)
expr_stmt|;
return|return
name|retValue
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|32
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|children
argument_list|,
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

