begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
class|class
name|UserPoolMapping
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UserPoolMapping
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|MappingType
block|{
name|USER
block|,
name|GROUP
block|,
name|APPLICATION
block|}
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Mapping
argument_list|>
name|userMappings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|,
name|groupMappings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|,
name|appMappings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|defaultPoolPath
decl_stmt|;
specifier|private
specifier|final
specifier|static
class|class
name|Mapping
block|{
specifier|public
name|Mapping
parameter_list|(
name|String
name|poolName
parameter_list|,
name|int
name|priority
parameter_list|)
block|{
name|this
operator|.
name|fullPoolName
operator|=
name|poolName
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
block|}
name|int
name|priority
decl_stmt|;
comment|/** The destination pool; null means unmanaged. */
name|String
name|fullPoolName
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
operator|(
name|fullPoolName
operator|==
literal|null
condition|?
literal|"unmanaged"
else|:
name|fullPoolName
operator|)
operator|+
literal|", priority="
operator|+
name|priority
operator|+
literal|"]"
return|;
block|}
block|}
comment|/** Contains all the information necessary to map a query to a pool. */
specifier|public
specifier|static
specifier|final
class|class
name|MappingInput
block|{
specifier|private
specifier|final
name|String
name|userName
decl_stmt|,
name|wmPool
decl_stmt|,
name|appName
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groups
decl_stmt|;
comment|// TODO: we may add app name, etc. later
specifier|public
name|MappingInput
parameter_list|(
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groups
parameter_list|,
name|String
name|wmPool
parameter_list|,
name|String
name|appName
parameter_list|)
block|{
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
name|this
operator|.
name|groups
operator|=
name|groups
expr_stmt|;
name|this
operator|.
name|appName
operator|=
name|appName
expr_stmt|;
name|this
operator|.
name|wmPool
operator|=
name|wmPool
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getGroups
parameter_list|()
block|{
return|return
name|groups
operator|==
literal|null
condition|?
name|Lists
operator|.
expr|<
name|String
operator|>
name|newArrayList
argument_list|()
else|:
name|groups
return|;
block|}
specifier|private
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{"
operator|+
name|userName
operator|+
literal|"; app "
operator|+
name|appName
operator|+
literal|"; pool "
operator|+
name|wmPool
operator|+
literal|"; groups "
operator|+
name|groups
operator|+
literal|"}"
return|;
block|}
specifier|public
name|String
name|getAppName
parameter_list|()
block|{
return|return
name|appName
return|;
block|}
block|}
specifier|public
name|UserPoolMapping
parameter_list|(
name|List
argument_list|<
name|WMMapping
argument_list|>
name|mappings
parameter_list|,
name|String
name|defaultPoolPath
parameter_list|)
block|{
if|if
condition|(
name|mappings
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|WMMapping
name|mapping
range|:
name|mappings
control|)
block|{
name|MappingType
name|type
init|=
name|MappingType
operator|.
name|valueOf
argument_list|(
name|mapping
operator|.
name|getEntityType
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|USER
case|:
block|{
name|addMapping
argument_list|(
name|mapping
argument_list|,
name|userMappings
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|GROUP
case|:
block|{
name|addMapping
argument_list|(
name|mapping
argument_list|,
name|groupMappings
argument_list|,
literal|"group"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|APPLICATION
case|:
block|{
name|addMapping
argument_list|(
name|mapping
argument_list|,
name|appMappings
argument_list|,
literal|"application"
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unknown type "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
block|}
name|this
operator|.
name|defaultPoolPath
operator|=
name|defaultPoolPath
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|addMapping
parameter_list|(
name|WMMapping
name|mapping
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Mapping
argument_list|>
name|map
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|Mapping
name|val
init|=
operator|new
name|Mapping
argument_list|(
name|mapping
operator|.
name|getPoolPath
argument_list|()
argument_list|,
name|mapping
operator|.
name|getOrdering
argument_list|()
argument_list|)
decl_stmt|;
name|Mapping
name|oldValue
init|=
name|map
operator|.
name|put
argument_list|(
name|mapping
operator|.
name|getEntityName
argument_list|()
argument_list|,
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValue
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Duplicate mapping for "
operator|+
name|text
operator|+
literal|" "
operator|+
name|mapping
operator|.
name|getEntityName
argument_list|()
operator|+
literal|"; "
operator|+
name|oldValue
operator|+
literal|" and "
operator|+
name|val
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|mapSessionToPoolName
parameter_list|(
name|MappingInput
name|input
parameter_list|,
name|boolean
name|allowAnyPool
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|pools
parameter_list|)
block|{
if|if
condition|(
name|allowAnyPool
operator|&&
name|input
operator|.
name|wmPool
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|pools
operator|==
literal|null
operator|||
name|pools
operator|.
name|contains
argument_list|(
name|input
operator|.
name|wmPool
argument_list|)
operator|)
condition|?
name|input
operator|.
name|wmPool
else|:
literal|null
return|;
block|}
comment|// For equal-priority rules, user rules come first because they are more specific; then apps,
comment|// then groups (this is arbitrary).
name|Mapping
name|mapping
init|=
name|userMappings
operator|.
name|get
argument_list|(
name|input
operator|.
name|getUserName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isExplicitMatch
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
name|isExplicitMatch
operator|=
name|isExplicitPoolMatch
argument_list|(
name|input
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
if|if
condition|(
name|isExplicitMatch
condition|)
return|return
name|mapping
operator|.
name|fullPoolName
return|;
block|}
comment|// We don't check explicit pool match for apps; both are specified on the jdbc string
comment|// so it doesn't make sense to have both and make sure one matches the other.
if|if
condition|(
name|mapping
operator|==
literal|null
operator|&&
name|input
operator|.
name|getAppName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|mapping
operator|=
name|appMappings
operator|.
name|get
argument_list|(
name|input
operator|.
name|getAppName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|group
range|:
name|input
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|Mapping
name|candidate
init|=
name|groupMappings
operator|.
name|get
argument_list|(
name|group
argument_list|)
decl_stmt|;
if|if
condition|(
name|candidate
operator|==
literal|null
condition|)
continue|continue;
name|isExplicitMatch
operator|=
name|isExplicitPoolMatch
argument_list|(
name|input
argument_list|,
name|candidate
argument_list|)
expr_stmt|;
if|if
condition|(
name|isExplicitMatch
condition|)
return|return
name|candidate
operator|.
name|fullPoolName
return|;
if|if
condition|(
name|mapping
operator|==
literal|null
operator|||
name|candidate
operator|.
name|priority
operator|<
name|mapping
operator|.
name|priority
condition|)
block|{
name|mapping
operator|=
name|candidate
expr_stmt|;
block|}
block|}
if|if
condition|(
name|input
operator|.
name|wmPool
operator|!=
literal|null
operator|&&
operator|!
name|isExplicitMatch
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
return|return
name|mapping
operator|.
name|fullPoolName
return|;
return|return
name|defaultPoolPath
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isExplicitPoolMatch
parameter_list|(
name|MappingInput
name|input
parameter_list|,
name|Mapping
name|mapping
parameter_list|)
block|{
return|return
name|input
operator|.
name|wmPool
operator|!=
literal|null
operator|&&
name|input
operator|.
name|wmPool
operator|.
name|equals
argument_list|(
name|mapping
operator|.
name|fullPoolName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

