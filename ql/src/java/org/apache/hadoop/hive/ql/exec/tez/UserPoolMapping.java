begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|WorkloadManager
operator|.
name|TmpUserMapping
import|;
end_import

begin_class
class|class
name|UserPoolMapping
block|{
specifier|private
specifier|final
specifier|static
class|class
name|Mapping
block|{
specifier|public
name|Mapping
parameter_list|(
name|String
name|poolName
parameter_list|,
name|int
name|priority
parameter_list|)
block|{
name|this
operator|.
name|fullPoolName
operator|=
name|poolName
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
block|}
name|int
name|priority
decl_stmt|;
name|String
name|fullPoolName
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|fullPoolName
operator|+
literal|", priority="
operator|+
name|priority
operator|+
literal|"]"
return|;
block|}
block|}
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Mapping
argument_list|>
name|userMappings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|defaultPoolName
decl_stmt|;
comment|// TODO: add other types as needed
specifier|public
name|UserPoolMapping
parameter_list|(
name|List
argument_list|<
name|TmpUserMapping
argument_list|>
name|mappings
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|poolNames
parameter_list|)
block|{
name|String
name|defaultPoolName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TmpUserMapping
name|mapping
range|:
name|mappings
control|)
block|{
switch|switch
condition|(
name|mapping
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|USER
case|:
block|{
name|String
name|poolName
init|=
name|getValidPoolName
argument_list|(
name|poolNames
argument_list|,
name|mapping
argument_list|)
decl_stmt|;
name|Mapping
name|val
init|=
operator|new
name|Mapping
argument_list|(
name|poolName
argument_list|,
name|mapping
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
name|Mapping
name|oldValue
init|=
name|userMappings
operator|.
name|put
argument_list|(
name|mapping
operator|.
name|getName
argument_list|()
argument_list|,
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValue
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Duplicate mapping for user "
operator|+
name|mapping
operator|.
name|getName
argument_list|()
operator|+
literal|"; "
operator|+
name|oldValue
operator|+
literal|" and "
operator|+
name|val
argument_list|)
throw|;
block|}
break|break;
block|}
case|case
name|DEFAULT
case|:
block|{
name|String
name|poolName
init|=
name|getValidPoolName
argument_list|(
name|poolNames
argument_list|,
name|mapping
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultPoolName
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Duplicate default mapping; "
operator|+
name|defaultPoolName
operator|+
literal|" and "
operator|+
name|poolName
argument_list|)
throw|;
block|}
name|defaultPoolName
operator|=
name|poolName
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unknown type "
operator|+
name|mapping
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|defaultPoolName
operator|=
name|defaultPoolName
expr_stmt|;
block|}
specifier|public
name|String
name|mapSessionToPoolName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
comment|// For now, we only have user rules, so this is very simple.
comment|// In future we'd also look up groups (each groups the user is in initially; we may do it
comment|// the opposite way if the user is a member of many groups but there are not many rules),
comment|// whatever user supplies in connection string to HS2, etc.
comment|// If multiple rules match, we'd need to get the highest priority one.
name|Mapping
name|userMapping
init|=
name|userMappings
operator|.
name|get
argument_list|(
name|userName
argument_list|)
decl_stmt|;
if|if
condition|(
name|userMapping
operator|!=
literal|null
condition|)
return|return
name|userMapping
operator|.
name|fullPoolName
return|;
return|return
name|defaultPoolName
return|;
block|}
specifier|private
specifier|static
name|String
name|getValidPoolName
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|poolNames
parameter_list|,
name|TmpUserMapping
name|mapping
parameter_list|)
block|{
name|String
name|poolName
init|=
name|mapping
operator|.
name|getPoolName
argument_list|()
decl_stmt|;
comment|// Should we really be validating here? The plan should be validated before applying.
if|if
condition|(
operator|!
name|poolNames
operator|.
name|contains
argument_list|(
name|mapping
operator|.
name|getPoolName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Invalid pool in the mapping "
operator|+
name|poolName
argument_list|)
throw|;
block|}
return|return
name|poolName
return|;
block|}
block|}
end_class

end_unit

