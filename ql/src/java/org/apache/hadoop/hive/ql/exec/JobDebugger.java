begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Exception
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|errors
operator|.
name|ErrorAndSolution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|errors
operator|.
name|TaskLogProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|LogHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RunningJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskCompletionEvent
import|;
end_import

begin_comment
comment|/**  * JobDebugger takes a RunningJob that has failed and grabs the top 4 failing  * tasks and outputs this information to the Hive CLI.  */
end_comment

begin_class
specifier|public
class|class
name|JobDebugger
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|JobConf
name|conf
decl_stmt|;
specifier|private
specifier|final
name|RunningJob
name|rj
decl_stmt|;
specifier|private
specifier|final
name|LogHelper
name|console
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|stackTraces
decl_stmt|;
comment|// Mapping from task ID to the number of failures
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|failures
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|successes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Successful task ID's
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TaskInfo
argument_list|>
name|taskIdToInfo
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TaskInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|maxFailures
init|=
literal|0
decl_stmt|;
comment|// Used for showJobFailDebugInfo
specifier|private
specifier|static
class|class
name|TaskInfo
block|{
name|String
name|jobId
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|logUrls
decl_stmt|;
name|int
name|errorCode
decl_stmt|;
comment|// Obtained from the HiveException thrown
name|String
index|[]
name|diagnosticMesgs
decl_stmt|;
specifier|public
name|TaskInfo
parameter_list|(
name|String
name|jobId
parameter_list|)
block|{
name|this
operator|.
name|jobId
operator|=
name|jobId
expr_stmt|;
name|logUrls
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|errorCode
operator|=
literal|0
expr_stmt|;
name|diagnosticMesgs
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|addLogUrl
parameter_list|(
name|String
name|logUrl
parameter_list|)
block|{
name|logUrls
operator|.
name|add
argument_list|(
name|logUrl
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setErrorCode
parameter_list|(
name|int
name|errorCode
parameter_list|)
block|{
name|this
operator|.
name|errorCode
operator|=
name|errorCode
expr_stmt|;
block|}
specifier|public
name|void
name|setDiagnosticMesgs
parameter_list|(
name|String
index|[]
name|diagnosticMesgs
parameter_list|)
block|{
name|this
operator|.
name|diagnosticMesgs
operator|=
name|diagnosticMesgs
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getLogUrls
parameter_list|()
block|{
return|return
name|logUrls
return|;
block|}
specifier|public
name|String
name|getJobId
parameter_list|()
block|{
return|return
name|jobId
return|;
block|}
specifier|public
name|int
name|getErrorCode
parameter_list|()
block|{
return|return
name|errorCode
return|;
block|}
specifier|public
name|String
index|[]
name|getDiagnosticMesgs
parameter_list|()
block|{
return|return
name|diagnosticMesgs
return|;
block|}
block|}
specifier|public
name|JobDebugger
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|RunningJob
name|rj
parameter_list|,
name|LogHelper
name|console
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|rj
operator|=
name|rj
expr_stmt|;
name|this
operator|.
name|console
operator|=
name|console
expr_stmt|;
name|this
operator|.
name|stackTraces
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|JobDebugger
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|RunningJob
name|rj
parameter_list|,
name|LogHelper
name|console
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|stackTraces
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|rj
operator|=
name|rj
expr_stmt|;
name|this
operator|.
name|console
operator|=
name|console
expr_stmt|;
name|this
operator|.
name|stackTraces
operator|=
name|stackTraces
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|showJobFailDebugInfo
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|int
name|extractErrorCode
parameter_list|(
name|String
index|[]
name|diagnostics
parameter_list|)
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
name|Pattern
name|errorCodeRegex
init|=
name|ErrorMsg
operator|.
name|getErrorCodePattern
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|mesg
range|:
name|diagnostics
control|)
block|{
name|Matcher
name|matcher
init|=
name|errorCodeRegex
operator|.
name|matcher
argument_list|(
name|mesg
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|result
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// We don't exit the loop early because we want to extract the error code
comment|// corresponding to the bottommost error coded exception.
block|}
block|}
return|return
name|result
return|;
block|}
class|class
name|TaskInfoGrabber
implements|implements
name|Runnable
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|getTaskInfos
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|getTaskInfos
parameter_list|()
throws|throws
name|IOException
throws|,
name|MalformedURLException
block|{
name|int
name|startIndex
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|TaskCompletionEvent
index|[]
name|taskCompletions
init|=
name|rj
operator|.
name|getTaskCompletionEvents
argument_list|(
name|startIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskCompletions
operator|==
literal|null
operator|||
name|taskCompletions
operator|.
name|length
operator|==
literal|0
condition|)
block|{
break|break;
block|}
name|boolean
name|more
init|=
literal|true
decl_stmt|;
name|boolean
name|firstError
init|=
literal|true
decl_stmt|;
for|for
control|(
name|TaskCompletionEvent
name|t
range|:
name|taskCompletions
control|)
block|{
comment|// getTaskJobIDs returns Strings for compatibility with Hadoop versions
comment|// without TaskID or TaskAttemptID
name|String
index|[]
name|taskJobIds
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getTaskJobIDs
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskJobIds
operator|==
literal|null
condition|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Task attempt info is unavailable in this Hadoop version"
argument_list|)
expr_stmt|;
name|more
operator|=
literal|false
expr_stmt|;
break|break;
block|}
comment|// For each task completion event, get the associated task id, job id
comment|// and the logs
name|String
name|taskId
init|=
name|taskJobIds
index|[
literal|0
index|]
decl_stmt|;
name|String
name|jobId
init|=
name|taskJobIds
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|firstError
condition|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Examining task ID: "
operator|+
name|taskId
operator|+
literal|" (and more) from job "
operator|+
name|jobId
argument_list|)
expr_stmt|;
name|firstError
operator|=
literal|false
expr_stmt|;
block|}
name|TaskInfo
name|ti
init|=
name|taskIdToInfo
operator|.
name|get
argument_list|(
name|taskId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ti
operator|==
literal|null
condition|)
block|{
name|ti
operator|=
operator|new
name|TaskInfo
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|taskIdToInfo
operator|.
name|put
argument_list|(
name|taskId
argument_list|,
name|ti
argument_list|)
expr_stmt|;
block|}
comment|// These tasks should have come from the same job.
assert|assert
operator|(
name|ti
operator|.
name|getJobId
argument_list|()
operator|!=
literal|null
operator|&&
name|ti
operator|.
name|getJobId
argument_list|()
operator|.
name|equals
argument_list|(
name|jobId
argument_list|)
operator|)
assert|;
name|String
name|taskAttemptLogUrl
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getTaskAttemptLogUrl
argument_list|(
name|conf
argument_list|,
name|t
operator|.
name|getTaskTrackerHttp
argument_list|()
argument_list|,
name|t
operator|.
name|getTaskId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskAttemptLogUrl
operator|!=
literal|null
condition|)
block|{
name|ti
operator|.
name|getLogUrls
argument_list|()
operator|.
name|add
argument_list|(
name|taskAttemptLogUrl
argument_list|)
expr_stmt|;
block|}
comment|// If a task failed, fetch its error code (if available).
comment|// Also keep track of the total number of failures for that
comment|// task (typically, a task gets re-run up to 4 times if it fails.
if|if
condition|(
name|t
operator|.
name|getTaskStatus
argument_list|()
operator|!=
name|TaskCompletionEvent
operator|.
name|Status
operator|.
name|SUCCEEDED
condition|)
block|{
if|if
condition|(
name|ti
operator|.
name|getErrorCode
argument_list|()
operator|==
literal|0
condition|)
block|{
name|String
index|[]
name|diags
init|=
name|rj
operator|.
name|getTaskDiagnostics
argument_list|(
name|t
operator|.
name|getTaskAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|ti
operator|.
name|setErrorCode
argument_list|(
name|extractErrorCode
argument_list|(
name|diags
argument_list|)
argument_list|)
expr_stmt|;
name|ti
operator|.
name|setDiagnosticMesgs
argument_list|(
name|diags
argument_list|)
expr_stmt|;
block|}
name|Integer
name|failAttempts
init|=
name|failures
operator|.
name|get
argument_list|(
name|taskId
argument_list|)
decl_stmt|;
if|if
condition|(
name|failAttempts
operator|==
literal|null
condition|)
block|{
name|failAttempts
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|failAttempts
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|failAttempts
operator|.
name|intValue
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|failures
operator|.
name|put
argument_list|(
name|taskId
argument_list|,
name|failAttempts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|successes
operator|.
name|add
argument_list|(
name|taskId
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|more
condition|)
block|{
break|break;
block|}
name|startIndex
operator|+=
name|taskCompletions
operator|.
name|length
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|computeMaxFailures
parameter_list|()
block|{
name|maxFailures
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Integer
name|failCount
range|:
name|failures
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|maxFailures
operator|<
name|failCount
operator|.
name|intValue
argument_list|()
condition|)
block|{
name|maxFailures
operator|=
name|failCount
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|private
name|void
name|showJobFailDebugInfo
parameter_list|()
throws|throws
name|IOException
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Error during job, obtaining debugging information..."
argument_list|)
expr_stmt|;
comment|// Loop to get all task completion events because getTaskCompletionEvents
comment|// only returns a subset per call
name|TaskInfoGrabber
name|tlg
init|=
operator|new
name|TaskInfoGrabber
argument_list|()
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|tlg
argument_list|)
decl_stmt|;
try|try
block|{
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|(
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|TASKLOG_DEBUG_TIMEOUT
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Timed out trying to finish grabbing task log URLs, "
operator|+
literal|"some task info may be missing"
argument_list|)
expr_stmt|;
block|}
comment|// Remove failures for tasks that succeeded
for|for
control|(
name|String
name|task
range|:
name|successes
control|)
block|{
name|failures
operator|.
name|remove
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|failures
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
comment|// Find the highest failure count
name|computeMaxFailures
argument_list|()
expr_stmt|;
comment|// Display Error Message for tasks with the highest failure count
name|String
name|jtUrl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jtUrl
operator|=
name|JobTrackerURLResolver
operator|.
name|getURL
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Unable to retrieve URL for Hadoop Task logs. "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|task
range|:
name|failures
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|failures
operator|.
name|get
argument_list|(
name|task
argument_list|)
operator|.
name|intValue
argument_list|()
operator|==
name|maxFailures
condition|)
block|{
name|TaskInfo
name|ti
init|=
name|taskIdToInfo
operator|.
name|get
argument_list|(
name|task
argument_list|)
decl_stmt|;
name|String
name|jobId
init|=
name|ti
operator|.
name|getJobId
argument_list|()
decl_stmt|;
name|String
name|taskUrl
init|=
operator|(
name|jtUrl
operator|==
literal|null
operator|)
condition|?
literal|"Unavailable"
else|:
name|jtUrl
operator|+
literal|"/taskdetails.jsp?jobid="
operator|+
name|jobId
operator|+
literal|"&tipid="
operator|+
name|task
operator|.
name|toString
argument_list|()
decl_stmt|;
name|TaskLogProcessor
name|tlp
init|=
operator|new
name|TaskLogProcessor
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|logUrl
range|:
name|ti
operator|.
name|getLogUrls
argument_list|()
control|)
block|{
name|tlp
operator|.
name|addTaskAttemptLogUrl
argument_list|(
name|logUrl
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|JOB_DEBUG_CAPTURE_STACKTRACES
argument_list|)
operator|&&
name|stackTraces
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|stackTraces
operator|.
name|containsKey
argument_list|(
name|jobId
argument_list|)
condition|)
block|{
name|stackTraces
operator|.
name|put
argument_list|(
name|jobId
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stackTraces
operator|.
name|get
argument_list|(
name|jobId
argument_list|)
operator|.
name|addAll
argument_list|(
name|tlp
operator|.
name|getStackTraces
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SHOW_JOB_FAIL_DEBUG_INFO
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|ErrorAndSolution
argument_list|>
name|errors
init|=
name|tlp
operator|.
name|getErrors
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// We use a StringBuilder and then call printError only once as
comment|// printError will write to both stderr and the error log file. In
comment|// situations where both the stderr and the log file output is
comment|// simultaneously output to a single stream, this will look cleaner.
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Task with the most failures("
operator|+
name|maxFailures
operator|+
literal|"): \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"-----\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Task ID:\n  "
operator|+
name|task
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"URL:\n  "
operator|+
name|taskUrl
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|ErrorAndSolution
name|e
range|:
name|errors
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Possible error:\n  "
operator|+
name|e
operator|.
name|getError
argument_list|()
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Solution:\n  "
operator|+
name|e
operator|.
name|getSolution
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"-----\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Diagnostic Messages for this Task:\n"
argument_list|)
expr_stmt|;
name|String
index|[]
name|diagMesgs
init|=
name|ti
operator|.
name|getDiagnosticMesgs
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|mesg
range|:
name|diagMesgs
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|mesg
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|console
operator|.
name|printError
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Only print out one task because that's good enough for debugging.
break|break;
block|}
block|}
return|return;
block|}
specifier|public
name|int
name|getErrorCode
parameter_list|()
block|{
for|for
control|(
name|String
name|task
range|:
name|failures
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|failures
operator|.
name|get
argument_list|(
name|task
argument_list|)
operator|.
name|intValue
argument_list|()
operator|==
name|maxFailures
condition|)
block|{
name|TaskInfo
name|ti
init|=
name|taskIdToInfo
operator|.
name|get
argument_list|(
name|task
argument_list|)
decl_stmt|;
return|return
name|ti
operator|.
name|getErrorCode
argument_list|()
return|;
block|}
block|}
comment|// Should never reach here unless there were no failed tasks.
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

