begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|NonSyncByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentLengthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedExpressions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorInBloomFilterColDynamicValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|BloomKFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  * GenericUDF to lookup a value in BloomFilter  */
end_comment

begin_class
annotation|@
name|VectorizedExpressions
argument_list|(
block|{
name|VectorInBloomFilterColDynamicValue
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|GenericUDFInBloomFilter
extends|extends
name|GenericUDF
block|{
specifier|private
specifier|transient
name|ObjectInspector
name|valObjectInspector
decl_stmt|;
specifier|private
specifier|transient
name|ObjectInspector
name|bloomFilterObjectInspector
decl_stmt|;
specifier|private
specifier|transient
name|BloomKFilter
name|bloomFilter
decl_stmt|;
specifier|private
specifier|transient
name|boolean
name|initializedBloomFilter
decl_stmt|;
specifier|private
specifier|transient
name|byte
index|[]
name|scratchBuffer
init|=
operator|new
name|byte
index|[
name|HiveDecimal
operator|.
name|SCRATCH_BUFFER_LEN_TO_BYTES
index|]
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
if|if
condition|(
name|arguments
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentLengthException
argument_list|(
literal|"InBloomFilter requires exactly 2 arguments but got "
operator|+
name|arguments
operator|.
name|length
argument_list|)
throw|;
block|}
comment|// Verify individual arguments
if|if
condition|(
name|arguments
index|[
literal|0
index|]
operator|.
name|getCategory
argument_list|()
operator|!=
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"The 1st argument must be a primitive type but "
operator|+
name|arguments
index|[
literal|0
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" was passed"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
literal|1
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
operator|!=
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
operator|.
name|BINARY
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|1
argument_list|,
literal|"The 2nd argument must be a binary type but "
operator|+
name|arguments
index|[
literal|1
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" was passed"
argument_list|)
throw|;
block|}
name|valObjectInspector
operator|=
name|arguments
index|[
literal|0
index|]
expr_stmt|;
name|bloomFilterObjectInspector
operator|=
name|arguments
index|[
literal|1
index|]
expr_stmt|;
assert|assert
name|bloomFilterObjectInspector
operator|instanceof
name|WritableBinaryObjectInspector
assert|;
name|initializedBloomFilter
operator|=
literal|false
expr_stmt|;
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|javaBooleanObjectInspector
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
return|return
name|getStandardDisplayString
argument_list|(
literal|"in_bloom_filter"
argument_list|,
name|children
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Return if either of the arguments is null
if|if
condition|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
operator|==
literal|null
operator|||
name|arguments
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|initializedBloomFilter
condition|)
block|{
comment|// Setup the bloom filter once
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|BytesWritable
name|bw
init|=
operator|(
name|BytesWritable
operator|)
name|arguments
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|bw
operator|.
name|getLength
argument_list|()
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bw
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|,
name|bw
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|NonSyncByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|bloomFilter
operator|=
name|BloomKFilter
operator|.
name|deserialize
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|initializedBloomFilter
operator|=
literal|true
expr_stmt|;
block|}
comment|// Check if the value is in bloom filter
switch|switch
condition|(
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|valObjectInspector
operator|)
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
name|boolean
name|vBoolean
init|=
operator|(
operator|(
name|BooleanObjectInspector
operator|)
name|valObjectInspector
operator|)
operator|.
name|get
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|bloomFilter
operator|.
name|testLong
argument_list|(
name|vBoolean
condition|?
literal|1
else|:
literal|0
argument_list|)
return|;
case|case
name|BYTE
case|:
name|byte
name|vByte
init|=
operator|(
operator|(
name|ByteObjectInspector
operator|)
name|valObjectInspector
operator|)
operator|.
name|get
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|bloomFilter
operator|.
name|testLong
argument_list|(
name|vByte
argument_list|)
return|;
case|case
name|SHORT
case|:
name|short
name|vShort
init|=
operator|(
operator|(
name|ShortObjectInspector
operator|)
name|valObjectInspector
operator|)
operator|.
name|get
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|bloomFilter
operator|.
name|testLong
argument_list|(
name|vShort
argument_list|)
return|;
case|case
name|INT
case|:
name|int
name|vInt
init|=
operator|(
operator|(
name|IntObjectInspector
operator|)
name|valObjectInspector
operator|)
operator|.
name|get
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|bloomFilter
operator|.
name|testLong
argument_list|(
name|vInt
argument_list|)
return|;
case|case
name|LONG
case|:
name|long
name|vLong
init|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|valObjectInspector
operator|)
operator|.
name|get
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|bloomFilter
operator|.
name|testLong
argument_list|(
name|vLong
argument_list|)
return|;
case|case
name|FLOAT
case|:
name|float
name|vFloat
init|=
operator|(
operator|(
name|FloatObjectInspector
operator|)
name|valObjectInspector
operator|)
operator|.
name|get
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|bloomFilter
operator|.
name|testDouble
argument_list|(
name|vFloat
argument_list|)
return|;
case|case
name|DOUBLE
case|:
name|double
name|vDouble
init|=
operator|(
operator|(
name|DoubleObjectInspector
operator|)
name|valObjectInspector
operator|)
operator|.
name|get
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|bloomFilter
operator|.
name|testDouble
argument_list|(
name|vDouble
argument_list|)
return|;
case|case
name|DECIMAL
case|:
name|HiveDecimalWritable
name|vDecimal
init|=
operator|(
operator|(
name|HiveDecimalObjectInspector
operator|)
name|valObjectInspector
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|startIdx
init|=
name|vDecimal
operator|.
name|toBytes
argument_list|(
name|scratchBuffer
argument_list|)
decl_stmt|;
return|return
name|bloomFilter
operator|.
name|testBytes
argument_list|(
name|scratchBuffer
argument_list|,
name|startIdx
argument_list|,
name|scratchBuffer
operator|.
name|length
operator|-
name|startIdx
argument_list|)
return|;
case|case
name|DATE
case|:
name|DateWritableV2
name|vDate
init|=
operator|(
operator|(
name|DateObjectInspector
operator|)
name|valObjectInspector
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|bloomFilter
operator|.
name|testLong
argument_list|(
name|vDate
operator|.
name|getDays
argument_list|()
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
name|Timestamp
name|vTimeStamp
init|=
operator|(
operator|(
name|TimestampObjectInspector
operator|)
name|valObjectInspector
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|bloomFilter
operator|.
name|testLong
argument_list|(
name|vTimeStamp
operator|.
name|toEpochMilli
argument_list|()
argument_list|)
return|;
case|case
name|CHAR
case|:
name|Text
name|vChar
init|=
operator|(
operator|(
name|HiveCharObjectInspector
operator|)
name|valObjectInspector
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getStrippedValue
argument_list|()
decl_stmt|;
return|return
name|bloomFilter
operator|.
name|testBytes
argument_list|(
name|vChar
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|vChar
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
case|case
name|VARCHAR
case|:
name|Text
name|vVarchar
init|=
operator|(
operator|(
name|HiveVarcharObjectInspector
operator|)
name|valObjectInspector
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getTextValue
argument_list|()
decl_stmt|;
return|return
name|bloomFilter
operator|.
name|testBytes
argument_list|(
name|vVarchar
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|vVarchar
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
case|case
name|STRING
case|:
name|Text
name|vString
init|=
operator|(
operator|(
name|StringObjectInspector
operator|)
name|valObjectInspector
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|bloomFilter
operator|.
name|testBytes
argument_list|(
name|vString
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|vString
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
case|case
name|BINARY
case|:
name|BytesWritable
name|vBytes
init|=
operator|(
operator|(
name|BinaryObjectInspector
operator|)
name|valObjectInspector
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|bloomFilter
operator|.
name|testBytes
argument_list|(
name|vBytes
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|vBytes
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"Bad primitive category "
operator|+
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|valObjectInspector
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

