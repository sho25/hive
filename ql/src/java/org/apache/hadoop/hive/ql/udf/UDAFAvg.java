begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|NumericUDAF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDAFEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_class
specifier|public
class|class
name|UDAFAvg
extends|extends
name|NumericUDAF
block|{
specifier|public
specifier|static
class|class
name|UDAFAvgEvaluator
implements|implements
name|UDAFEvaluator
block|{
specifier|private
name|long
name|mCount
decl_stmt|;
specifier|private
name|double
name|mSum
decl_stmt|;
specifier|public
name|UDAFAvgEvaluator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|()
block|{
name|mSum
operator|=
literal|0
expr_stmt|;
name|mCount
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|boolean
name|iterate
parameter_list|(
name|DoubleWritable
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|mSum
operator|+=
name|o
operator|.
name|get
argument_list|()
expr_stmt|;
name|mCount
operator|++
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|Text
name|terminatePartial
parameter_list|()
block|{
comment|// This is SQL standard - average of zero items should be null.
return|return
name|mCount
operator|==
literal|0
condition|?
literal|null
else|:
operator|new
name|Text
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|mSum
argument_list|)
operator|+
literal|'/'
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|mCount
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|merge
parameter_list|(
name|Text
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|String
name|s
init|=
name|o
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|pos
operator|!=
operator|-
literal|1
operator|)
assert|;
name|mSum
operator|+=
name|Double
operator|.
name|parseDouble
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|mCount
operator|+=
name|Long
operator|.
name|parseLong
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|DoubleWritable
name|terminate
parameter_list|()
block|{
comment|// This is SQL standard - average of zero items should be null.
return|return
name|mCount
operator|==
literal|0
condition|?
literal|null
else|:
operator|new
name|DoubleWritable
argument_list|(
name|mSum
operator|/
name|mCount
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

