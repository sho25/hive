begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|counter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|util
operator|.
name|ResourceBundles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|api
operator|.
name|java
operator|.
name|JavaSparkContext
import|;
end_import

begin_comment
comment|/**  * SparkCounters is used to collect Hive operator metric through Spark accumulator. There are few  * limitation of Spark accumulator, like:  * 1. accumulator should be created at Spark context side.  * 2. Spark tasks can only increment metric count.  * 3. User can only get accumulator value at Spark context side.  * These Spark Counter API is designed to fit into Hive requirement, while with several access  * restriction due to Spark accumulator previous mentioned:  * 1. Counter should be created on driver side if it would be accessed in task.  * 2. increment could only be invoked task side.  * 3. Hive could only get Counter value at driver side.  */
end_comment

begin_class
specifier|public
class|class
name|SparkCounters
implements|implements
name|Serializable
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|SparkCounterGroup
argument_list|>
name|sparkCounterGroups
decl_stmt|;
specifier|private
specifier|transient
name|JavaSparkContext
name|javaSparkContext
decl_stmt|;
specifier|private
specifier|transient
name|Configuration
name|hiveConf
decl_stmt|;
specifier|public
name|SparkCounters
parameter_list|(
name|JavaSparkContext
name|javaSparkContext
parameter_list|,
name|Configuration
name|hiveConf
parameter_list|)
block|{
name|this
operator|.
name|javaSparkContext
operator|=
name|javaSparkContext
expr_stmt|;
name|this
operator|.
name|hiveConf
operator|=
name|hiveConf
expr_stmt|;
name|sparkCounterGroups
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SparkCounterGroup
argument_list|>
argument_list|()
expr_stmt|;
name|initializeSparkCounters
argument_list|()
expr_stmt|;
block|}
comment|/**    * pre-define all needed Counters here.    */
specifier|private
name|void
name|initializeSparkCounters
parameter_list|()
block|{
name|createCounter
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVECOUNTERGROUP
argument_list|)
argument_list|,
name|Operator
operator|.
name|HIVECOUNTERCREATEDFILES
argument_list|)
expr_stmt|;
name|createCounter
argument_list|(
name|MapOperator
operator|.
name|Counter
operator|.
name|DESERIALIZE_ERRORS
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|createCounter
parameter_list|(
name|Enum
argument_list|<
name|?
argument_list|>
name|key
parameter_list|)
block|{
name|createCounter
argument_list|(
name|key
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|key
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|createCounter
parameter_list|(
name|String
name|groupName
parameter_list|,
name|String
name|counterName
parameter_list|)
block|{
name|createCounter
argument_list|(
name|groupName
argument_list|,
name|counterName
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|createCounter
parameter_list|(
name|String
name|groupName
parameter_list|,
name|String
name|counterName
parameter_list|,
name|long
name|initValue
parameter_list|)
block|{
name|getGroup
argument_list|(
name|groupName
argument_list|)
operator|.
name|createCounter
argument_list|(
name|counterName
argument_list|,
name|initValue
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|increment
parameter_list|(
name|Enum
argument_list|<
name|?
argument_list|>
name|key
parameter_list|,
name|long
name|incrValue
parameter_list|)
block|{
name|increment
argument_list|(
name|key
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|key
operator|.
name|name
argument_list|()
argument_list|,
name|incrValue
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|increment
parameter_list|(
name|String
name|groupName
parameter_list|,
name|String
name|counterName
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|SparkCounter
name|counter
init|=
name|getGroup
argument_list|(
name|groupName
argument_list|)
operator|.
name|getCounter
argument_list|(
name|counterName
argument_list|)
decl_stmt|;
if|if
condition|(
name|counter
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"counter[%s, %s] has not initialized before."
argument_list|,
name|groupName
argument_list|,
name|counterName
argument_list|)
argument_list|)
throw|;
block|}
name|counter
operator|.
name|increment
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getValue
parameter_list|(
name|String
name|groupName
parameter_list|,
name|String
name|counterName
parameter_list|)
block|{
name|SparkCounter
name|counter
init|=
name|getGroup
argument_list|(
name|groupName
argument_list|)
operator|.
name|getCounter
argument_list|(
name|counterName
argument_list|)
decl_stmt|;
if|if
condition|(
name|counter
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"counter[%s, %s] has not initialized before."
argument_list|,
name|groupName
argument_list|,
name|counterName
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|counter
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|public
name|SparkCounter
name|getCounter
parameter_list|(
name|String
name|groupName
parameter_list|,
name|String
name|counterName
parameter_list|)
block|{
return|return
name|getGroup
argument_list|(
name|groupName
argument_list|)
operator|.
name|getCounter
argument_list|(
name|counterName
argument_list|)
return|;
block|}
specifier|public
name|SparkCounter
name|getCounter
parameter_list|(
name|Enum
argument_list|<
name|?
argument_list|>
name|key
parameter_list|)
block|{
return|return
name|getCounter
argument_list|(
name|key
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|key
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|SparkCounterGroup
name|getGroup
parameter_list|(
name|String
name|groupName
parameter_list|)
block|{
name|SparkCounterGroup
name|group
init|=
name|sparkCounterGroups
operator|.
name|get
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|String
name|groupDisplayName
init|=
name|ResourceBundles
operator|.
name|getCounterGroupName
argument_list|(
name|groupName
argument_list|,
name|groupName
argument_list|)
decl_stmt|;
name|group
operator|=
operator|new
name|SparkCounterGroup
argument_list|(
name|groupName
argument_list|,
name|groupDisplayName
argument_list|,
name|javaSparkContext
argument_list|)
expr_stmt|;
name|sparkCounterGroups
operator|.
name|put
argument_list|(
name|groupName
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
return|return
name|group
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|SparkCounterGroup
argument_list|>
name|getSparkCounterGroups
parameter_list|()
block|{
return|return
name|sparkCounterGroups
return|;
block|}
block|}
end_class

end_unit

