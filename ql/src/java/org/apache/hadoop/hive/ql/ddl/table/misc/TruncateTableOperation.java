begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|misc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|rcfile
operator|.
name|truncate
operator|.
name|ColumnTruncateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|rcfile
operator|.
name|truncate
operator|.
name|ColumnTruncateWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ReplicationSpec
import|;
end_import

begin_comment
comment|/**  * Operation process of truncating a table.  */
end_comment

begin_class
specifier|public
class|class
name|TruncateTableOperation
extends|extends
name|DDLOperation
argument_list|<
name|TruncateTableDesc
argument_list|>
block|{
specifier|public
name|TruncateTableOperation
parameter_list|(
name|DDLOperationContext
name|context
parameter_list|,
name|TruncateTableDesc
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|()
throws|throws
name|HiveException
block|{
if|if
condition|(
name|desc
operator|.
name|getColumnIndexes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ColumnTruncateWork
name|truncateWork
init|=
operator|new
name|ColumnTruncateWork
argument_list|(
name|desc
operator|.
name|getColumnIndexes
argument_list|()
argument_list|,
name|desc
operator|.
name|getInputDir
argument_list|()
argument_list|,
name|desc
operator|.
name|getOutputDir
argument_list|()
argument_list|)
decl_stmt|;
name|truncateWork
operator|.
name|setListBucketingCtx
argument_list|(
name|desc
operator|.
name|getLbCtx
argument_list|()
argument_list|)
expr_stmt|;
name|truncateWork
operator|.
name|setMapperCannotSpanPartns
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DriverContext
name|driverCxt
init|=
operator|new
name|DriverContext
argument_list|()
decl_stmt|;
name|ColumnTruncateTask
name|taskExec
init|=
operator|new
name|ColumnTruncateTask
argument_list|()
decl_stmt|;
name|taskExec
operator|.
name|initialize
argument_list|(
name|context
operator|.
name|getQueryState
argument_list|()
argument_list|,
literal|null
argument_list|,
name|driverCxt
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|taskExec
operator|.
name|setWork
argument_list|(
name|truncateWork
argument_list|)
expr_stmt|;
name|taskExec
operator|.
name|setQueryPlan
argument_list|(
name|context
operator|.
name|getQueryPlan
argument_list|()
argument_list|)
expr_stmt|;
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|subtask
init|=
name|taskExec
decl_stmt|;
name|int
name|ret
init|=
name|taskExec
operator|.
name|execute
argument_list|(
name|driverCxt
argument_list|)
decl_stmt|;
if|if
condition|(
name|subtask
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|getTask
argument_list|()
operator|.
name|setException
argument_list|(
name|subtask
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
name|String
name|tableName
init|=
name|desc
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
init|=
name|desc
operator|.
name|getPartSpec
argument_list|()
decl_stmt|;
name|ReplicationSpec
name|replicationSpec
init|=
name|desc
operator|.
name|getReplicationSpec
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|DDLUtils
operator|.
name|allowOperationInReplicationScope
argument_list|(
name|context
operator|.
name|getDb
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|partSpec
argument_list|,
name|replicationSpec
argument_list|)
condition|)
block|{
comment|// no truncate, the table is missing either due to drop/rename which follows the truncate.
comment|// or the existing table is newer than our update.
name|LOG
operator|.
name|debug
argument_list|(
literal|"DDLTask: Truncate Table/Partition is skipped as table {} / partition {} is newer than update"
argument_list|,
name|tableName
argument_list|,
operator|(
name|partSpec
operator|==
literal|null
operator|)
condition|?
literal|"null"
else|:
name|FileUtils
operator|.
name|makePartName
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|partSpec
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|partSpec
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
try|try
block|{
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|truncateTable
argument_list|(
name|tableName
argument_list|,
name|partSpec
argument_list|,
name|replicationSpec
operator|!=
literal|null
operator|&&
name|replicationSpec
operator|.
name|isInReplicationScope
argument_list|()
condition|?
name|desc
operator|.
name|getWriteId
argument_list|()
else|:
literal|0L
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|,
name|ErrorMsg
operator|.
name|GENERIC_ERROR
argument_list|)
throw|;
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

