begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|monitoring
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|log
operator|.
name|InPlaceUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|counters
operator|.
name|TaskCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|counters
operator|.
name|TezCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|counters
operator|.
name|TezCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|DAG
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|Vertex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|client
operator|.
name|DAGClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|client
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|client
operator|.
name|StatusGetOpts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|client
operator|.
name|VertexStatus
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
class|class
name|DAGSummary
implements|implements
name|PrintSummary
block|{
specifier|private
specifier|static
specifier|final
name|String
name|FILE_HEADER_SEPARATOR
init|=
operator|new
name|String
argument_list|(
operator|new
name|char
index|[
name|InPlaceUpdate
operator|.
name|MIN_TERMINAL_WIDTH
index|]
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\0"
argument_list|,
literal|"-"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FORMATTING_PATTERN
init|=
literal|"%10s %17s %14s %14s %15s %16s"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FILE_HEADER
init|=
name|String
operator|.
name|format
argument_list|(
name|FORMATTING_PATTERN
argument_list|,
literal|"VERTICES"
argument_list|,
literal|"DURATION(ms)"
argument_list|,
literal|"CPU_TIME(ms)"
argument_list|,
literal|"GC_TIME(ms)"
argument_list|,
literal|"INPUT_RECORDS"
argument_list|,
literal|"OUTPUT_RECORDS"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|DecimalFormat
name|secondsFormatter
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"#0.00"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|NumberFormat
name|commaFormatter
init|=
name|NumberFormat
operator|.
name|getNumberInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|hiveCountersGroup
decl_stmt|;
specifier|private
specifier|final
name|TezCounters
name|hiveCounters
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Progress
argument_list|>
name|progressMap
decl_stmt|;
specifier|private
name|DAGClient
name|dagClient
decl_stmt|;
specifier|private
name|DAG
name|dag
decl_stmt|;
specifier|private
name|PerfLogger
name|perfLogger
decl_stmt|;
name|DAGSummary
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Progress
argument_list|>
name|progressMap
parameter_list|,
name|HiveConf
name|hiveConf
parameter_list|,
name|DAGClient
name|dagClient
parameter_list|,
name|DAG
name|dag
parameter_list|,
name|PerfLogger
name|perfLogger
parameter_list|)
block|{
name|this
operator|.
name|progressMap
operator|=
name|progressMap
expr_stmt|;
name|this
operator|.
name|dagClient
operator|=
name|dagClient
expr_stmt|;
name|this
operator|.
name|dag
operator|=
name|dag
expr_stmt|;
name|this
operator|.
name|perfLogger
operator|=
name|perfLogger
expr_stmt|;
name|this
operator|.
name|hiveCountersGroup
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVECOUNTERGROUP
argument_list|)
expr_stmt|;
name|this
operator|.
name|hiveCounters
operator|=
name|hiveCounters
argument_list|(
name|dagClient
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|hiveInputRecordsFromTezCounters
parameter_list|(
name|String
name|vertexName
parameter_list|,
name|String
name|inputVertexName
parameter_list|)
block|{
comment|// Get the counters for the input vertex.
name|Set
argument_list|<
name|StatusGetOpts
argument_list|>
name|statusOptions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|statusOptions
operator|.
name|add
argument_list|(
name|StatusGetOpts
operator|.
name|GET_COUNTERS
argument_list|)
expr_stmt|;
name|VertexStatus
name|inputVertexStatus
init|=
name|vertexStatus
argument_list|(
name|statusOptions
argument_list|,
name|inputVertexName
argument_list|)
decl_stmt|;
specifier|final
name|TezCounters
name|inputVertexCounters
init|=
name|inputVertexStatus
operator|.
name|getVertexCounters
argument_list|()
decl_stmt|;
comment|// eg, group name TaskCounter_Map_7_OUTPUT_Reducer_8, counter name OUTPUT_RECORDS
name|String
name|groupName
init|=
name|formattedName
argument_list|(
literal|"TaskCounter"
argument_list|,
name|inputVertexName
argument_list|,
name|vertexName
argument_list|)
decl_stmt|;
name|String
name|counterName
init|=
literal|"OUTPUT_RECORDS"
decl_stmt|;
comment|// Do not create counter if it does not exist -
comment|// instead fall back to default behavior for determining input records.
name|TezCounter
name|tezCounter
init|=
name|inputVertexCounters
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
operator|.
name|findCounter
argument_list|(
name|counterName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|tezCounter
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
name|tezCounter
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
specifier|private
name|long
name|hiveInputRecordsFromHiveCounters
parameter_list|(
name|String
name|inputVertexName
parameter_list|)
block|{
comment|// The record count from these counters may not be correct if the input vertex has
comment|// edges to more than one vertex, since this value counts the records going to all
comment|// destination vertices.
name|String
name|intermediateRecordsCounterName
init|=
name|formattedName
argument_list|(
name|ReduceSinkOperator
operator|.
name|Counter
operator|.
name|RECORDS_OUT_INTERMEDIATE
operator|.
name|toString
argument_list|()
argument_list|,
name|inputVertexName
argument_list|)
decl_stmt|;
name|String
name|recordsOutCounterName
init|=
name|formattedName
argument_list|(
name|FileSinkOperator
operator|.
name|Counter
operator|.
name|RECORDS_OUT
operator|.
name|toString
argument_list|()
argument_list|,
name|inputVertexName
argument_list|)
decl_stmt|;
return|return
name|hiveCounterValue
argument_list|(
name|intermediateRecordsCounterName
argument_list|)
operator|+
name|hiveCounterValue
argument_list|(
name|recordsOutCounterName
argument_list|)
return|;
block|}
specifier|private
name|long
name|hiveInputRecordsFromOtherVertices
parameter_list|(
name|String
name|vertexName
parameter_list|)
block|{
name|List
argument_list|<
name|Vertex
argument_list|>
name|inputVerticesList
init|=
name|dag
operator|.
name|getVertex
argument_list|(
name|vertexName
argument_list|)
operator|.
name|getInputVertices
argument_list|()
decl_stmt|;
name|long
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Vertex
name|inputVertex
range|:
name|inputVerticesList
control|)
block|{
name|long
name|inputVertexRecords
init|=
name|hiveInputRecordsFromTezCounters
argument_list|(
name|vertexName
argument_list|,
name|inputVertex
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputVertexRecords
operator|<
literal|0
condition|)
block|{
name|inputVertexRecords
operator|=
name|hiveInputRecordsFromHiveCounters
argument_list|(
name|inputVertex
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|+=
name|inputVertexRecords
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|String
name|formattedName
parameter_list|(
name|String
name|counterName
parameter_list|,
name|String
name|srcVertexName
parameter_list|,
name|String
name|destVertexName
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s_"
argument_list|,
name|counterName
argument_list|)
operator|+
name|srcVertexName
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"_"
argument_list|)
operator|+
literal|"_OUTPUT_"
operator|+
name|destVertexName
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"_"
argument_list|)
return|;
block|}
specifier|private
name|String
name|formattedName
parameter_list|(
name|String
name|counterName
parameter_list|,
name|String
name|vertexName
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s_"
argument_list|,
name|counterName
argument_list|)
operator|+
name|vertexName
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"_"
argument_list|)
return|;
block|}
specifier|private
name|long
name|getCounterValueByGroupName
parameter_list|(
name|TezCounters
name|counters
parameter_list|,
name|String
name|pattern
parameter_list|,
name|String
name|counterName
parameter_list|)
block|{
name|TezCounter
name|tezCounter
init|=
name|counters
operator|.
name|getGroup
argument_list|(
name|pattern
argument_list|)
operator|.
name|findCounter
argument_list|(
name|counterName
argument_list|)
decl_stmt|;
return|return
operator|(
name|tezCounter
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|tezCounter
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|private
name|long
name|hiveCounterValue
parameter_list|(
name|String
name|counterName
parameter_list|)
block|{
return|return
name|getCounterValueByGroupName
argument_list|(
name|hiveCounters
argument_list|,
name|hiveCountersGroup
argument_list|,
name|counterName
argument_list|)
return|;
block|}
specifier|private
name|TezCounters
name|hiveCounters
parameter_list|(
name|DAGClient
name|dagClient
parameter_list|)
block|{
try|try
block|{
return|return
name|dagClient
operator|.
name|getDAGStatus
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|StatusGetOpts
operator|.
name|GET_COUNTERS
argument_list|)
argument_list|)
operator|.
name|getDAGCounters
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|TezException
name|e
parameter_list|)
block|{
comment|// best attempt, shouldn't really kill DAG for this
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|print
parameter_list|(
name|SessionState
operator|.
name|LogHelper
name|console
parameter_list|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Task Execution Summary"
argument_list|)
expr_stmt|;
comment|/* If the counters are missing there is no point trying to print progress */
if|if
condition|(
name|hiveCounters
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|/* Print the per Vertex summary */
name|printHeader
argument_list|(
name|console
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|progressMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|StatusGetOpts
argument_list|>
name|statusOptions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|statusOptions
operator|.
name|add
argument_list|(
name|StatusGetOpts
operator|.
name|GET_COUNTERS
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|vertexName
range|:
name|keys
control|)
block|{
name|Progress
name|progress
init|=
name|progressMap
operator|.
name|get
argument_list|(
name|vertexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|progress
operator|==
literal|null
condition|)
continue|continue;
name|VertexStatus
name|vertexStatus
init|=
name|vertexStatus
argument_list|(
name|statusOptions
argument_list|,
name|vertexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|vertexStatus
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|console
operator|.
name|printInfo
argument_list|(
name|vertexSummary
argument_list|(
name|vertexName
argument_list|,
name|progress
argument_list|,
name|vertexStatus
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|console
operator|.
name|printInfo
argument_list|(
name|FILE_HEADER_SEPARATOR
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|vertexSummary
parameter_list|(
name|String
name|vertexName
parameter_list|,
name|Progress
name|progress
parameter_list|,
name|VertexStatus
name|vertexStatus
parameter_list|)
block|{
comment|/*    * Get the CPU& GC    *    * counters org.apache.tez.common.counters.TaskCounter    *  GC_TIME_MILLIS=37712    *  CPU_MILLISECONDS=2774230    */
specifier|final
name|TezCounters
name|vertexCounters
init|=
name|vertexStatus
operator|.
name|getVertexCounters
argument_list|()
decl_stmt|;
specifier|final
name|double
name|cpuTimeMillis
init|=
name|getCounterValueByGroupName
argument_list|(
name|vertexCounters
argument_list|,
name|TaskCounter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|TaskCounter
operator|.
name|CPU_MILLISECONDS
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|double
name|gcTimeMillis
init|=
name|getCounterValueByGroupName
argument_list|(
name|vertexCounters
argument_list|,
name|TaskCounter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|TaskCounter
operator|.
name|GC_TIME_MILLIS
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
comment|/*      * Get the HIVE counters      *      * HIVE      *  CREATED_FILES=1      *  DESERIALIZE_ERRORS=0      *  RECORDS_IN_Map_1=550076554      *  RECORDS_OUT_INTERMEDIATE_Map_1=854987      *  RECORDS_OUT_Reducer_2=1      */
specifier|final
name|long
name|hiveInputRecords
init|=
name|hiveCounterValue
argument_list|(
name|formattedName
argument_list|(
name|MapOperator
operator|.
name|Counter
operator|.
name|RECORDS_IN
operator|.
name|toString
argument_list|()
argument_list|,
name|vertexName
argument_list|)
argument_list|)
operator|+
name|hiveInputRecordsFromOtherVertices
argument_list|(
name|vertexName
argument_list|)
decl_stmt|;
specifier|final
name|long
name|hiveOutputRecords
init|=
name|hiveCounterValue
argument_list|(
name|formattedName
argument_list|(
name|FileSinkOperator
operator|.
name|Counter
operator|.
name|RECORDS_OUT
operator|.
name|toString
argument_list|()
argument_list|,
name|vertexName
argument_list|)
argument_list|)
operator|+
name|hiveCounterValue
argument_list|(
name|formattedName
argument_list|(
name|ReduceSinkOperator
operator|.
name|Counter
operator|.
name|RECORDS_OUT_INTERMEDIATE
operator|.
name|toString
argument_list|()
argument_list|,
name|vertexName
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|double
name|duration
init|=
name|perfLogger
operator|.
name|getDuration
argument_list|(
name|PerfLogger
operator|.
name|TEZ_RUN_VERTEX
operator|+
name|vertexName
argument_list|)
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
name|FORMATTING_PATTERN
argument_list|,
name|vertexName
argument_list|,
name|secondsFormatter
operator|.
name|format
argument_list|(
operator|(
name|duration
operator|)
argument_list|)
argument_list|,
name|commaFormatter
operator|.
name|format
argument_list|(
name|cpuTimeMillis
argument_list|)
argument_list|,
name|commaFormatter
operator|.
name|format
argument_list|(
name|gcTimeMillis
argument_list|)
argument_list|,
name|commaFormatter
operator|.
name|format
argument_list|(
name|hiveInputRecords
argument_list|)
argument_list|,
name|commaFormatter
operator|.
name|format
argument_list|(
name|hiveOutputRecords
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|VertexStatus
name|vertexStatus
parameter_list|(
name|Set
argument_list|<
name|StatusGetOpts
argument_list|>
name|statusOptions
parameter_list|,
name|String
name|vertexName
parameter_list|)
block|{
try|try
block|{
return|return
name|dagClient
operator|.
name|getVertexStatus
argument_list|(
name|vertexName
argument_list|,
name|statusOptions
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|TezException
name|e
parameter_list|)
block|{
comment|// best attempt, shouldn't really kill DAG for this
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|printHeader
parameter_list|(
name|SessionState
operator|.
name|LogHelper
name|console
parameter_list|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
name|FILE_HEADER_SEPARATOR
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|FILE_HEADER
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|FILE_HEADER_SEPARATOR
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

