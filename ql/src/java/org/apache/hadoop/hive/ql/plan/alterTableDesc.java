begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_class
annotation|@
name|explain
argument_list|(
name|displayName
operator|=
literal|"Alter Table"
argument_list|)
specifier|public
class|class
name|alterTableDesc
extends|extends
name|ddlDesc
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|alterTableTypes
block|{
name|RENAME
block|,
name|ADDCOLS
block|,
name|REPLACECOLS
block|,
name|ADDPROPS
block|,
name|ADDSERDE
block|,
name|ADDSERDEPROPS
block|,
name|ADDFILEFORMAT
block|}
empty_stmt|;
name|alterTableTypes
name|op
decl_stmt|;
name|String
name|oldName
decl_stmt|;
name|String
name|newName
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|newCols
decl_stmt|;
name|String
name|serdeName
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
decl_stmt|;
name|String
name|inputFormat
decl_stmt|;
name|String
name|outputFormat
decl_stmt|;
comment|/**    * @param oldName old name of the table    * @param newName new name of the table    */
specifier|public
name|alterTableDesc
parameter_list|(
name|String
name|oldName
parameter_list|,
name|String
name|newName
parameter_list|)
block|{
name|op
operator|=
name|alterTableTypes
operator|.
name|RENAME
expr_stmt|;
name|this
operator|.
name|oldName
operator|=
name|oldName
expr_stmt|;
name|this
operator|.
name|newName
operator|=
name|newName
expr_stmt|;
block|}
comment|/**    * @param name name of the table    * @param newCols new columns to be added    */
specifier|public
name|alterTableDesc
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|newCols
parameter_list|,
name|alterTableTypes
name|alterType
parameter_list|)
block|{
name|this
operator|.
name|op
operator|=
name|alterType
expr_stmt|;
name|this
operator|.
name|oldName
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|newCols
operator|=
name|newCols
expr_stmt|;
block|}
comment|/**    * @param alterType type of alter op    */
specifier|public
name|alterTableDesc
parameter_list|(
name|alterTableTypes
name|alterType
parameter_list|)
block|{
name|this
operator|.
name|op
operator|=
name|alterType
expr_stmt|;
block|}
comment|/**    *     * @param name name of the table    * @param inputFormat new table input format    * @param outputFormat new table output format     */
specifier|public
name|alterTableDesc
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|inputFormat
parameter_list|,
name|String
name|outputFormat
parameter_list|,
name|String
name|serdeName
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|op
operator|=
name|alterTableTypes
operator|.
name|ADDFILEFORMAT
expr_stmt|;
name|this
operator|.
name|oldName
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|inputFormat
operator|=
name|inputFormat
expr_stmt|;
name|this
operator|.
name|outputFormat
operator|=
name|outputFormat
expr_stmt|;
name|this
operator|.
name|serdeName
operator|=
name|serdeName
expr_stmt|;
block|}
comment|/**    * @return the old name of the table    */
annotation|@
name|explain
argument_list|(
name|displayName
operator|=
literal|"old name"
argument_list|)
specifier|public
name|String
name|getOldName
parameter_list|()
block|{
return|return
name|oldName
return|;
block|}
comment|/**    * @param oldName the oldName to set    */
specifier|public
name|void
name|setOldName
parameter_list|(
name|String
name|oldName
parameter_list|)
block|{
name|this
operator|.
name|oldName
operator|=
name|oldName
expr_stmt|;
block|}
comment|/**    * @return the newName    */
annotation|@
name|explain
argument_list|(
name|displayName
operator|=
literal|"new name"
argument_list|)
specifier|public
name|String
name|getNewName
parameter_list|()
block|{
return|return
name|newName
return|;
block|}
comment|/**    * @param newName the newName to set    */
specifier|public
name|void
name|setNewName
parameter_list|(
name|String
name|newName
parameter_list|)
block|{
name|this
operator|.
name|newName
operator|=
name|newName
expr_stmt|;
block|}
comment|/**    * @return the op    */
specifier|public
name|alterTableTypes
name|getOp
parameter_list|()
block|{
return|return
name|op
return|;
block|}
annotation|@
name|explain
argument_list|(
name|displayName
operator|=
literal|"type"
argument_list|)
specifier|public
name|String
name|getAlterTableTypeString
parameter_list|()
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|RENAME
case|:
return|return
literal|"rename"
return|;
case|case
name|ADDCOLS
case|:
return|return
literal|"add columns"
return|;
case|case
name|REPLACECOLS
case|:
return|return
literal|"replace columns"
return|;
block|}
return|return
literal|"unknown"
return|;
block|}
comment|/**    * @param op the op to set    */
specifier|public
name|void
name|setOp
parameter_list|(
name|alterTableTypes
name|op
parameter_list|)
block|{
name|this
operator|.
name|op
operator|=
name|op
expr_stmt|;
block|}
comment|/**    * @return the newCols    */
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getNewCols
parameter_list|()
block|{
return|return
name|newCols
return|;
block|}
annotation|@
name|explain
argument_list|(
name|displayName
operator|=
literal|"new columns"
argument_list|)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getNewColsString
parameter_list|()
block|{
return|return
name|Utilities
operator|.
name|getFieldSchemaString
argument_list|(
name|getNewCols
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @param newCols the newCols to set    */
specifier|public
name|void
name|setNewCols
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|newCols
parameter_list|)
block|{
name|this
operator|.
name|newCols
operator|=
name|newCols
expr_stmt|;
block|}
comment|/**    * @return the serdeName    */
annotation|@
name|explain
argument_list|(
name|displayName
operator|=
literal|"deserializer library"
argument_list|)
specifier|public
name|String
name|getSerdeName
parameter_list|()
block|{
return|return
name|serdeName
return|;
block|}
comment|/**    * @param serdeName the serdeName to set    */
specifier|public
name|void
name|setSerdeName
parameter_list|(
name|String
name|serdeName
parameter_list|)
block|{
name|this
operator|.
name|serdeName
operator|=
name|serdeName
expr_stmt|;
block|}
comment|/**    * @return the props    */
annotation|@
name|explain
argument_list|(
name|displayName
operator|=
literal|"properties"
argument_list|)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getProps
parameter_list|()
block|{
return|return
name|props
return|;
block|}
comment|/**    * @param props the props to set    */
specifier|public
name|void
name|setProps
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
block|{
name|this
operator|.
name|props
operator|=
name|props
expr_stmt|;
block|}
comment|/**    * @return the input format    */
annotation|@
name|explain
argument_list|(
name|displayName
operator|=
literal|"input format"
argument_list|)
specifier|public
name|String
name|getInputFormat
parameter_list|()
block|{
return|return
name|inputFormat
return|;
block|}
comment|/**    * @param inputFormat the input format to set    */
specifier|public
name|void
name|setInputFormat
parameter_list|(
name|String
name|inputFormat
parameter_list|)
block|{
name|this
operator|.
name|inputFormat
operator|=
name|inputFormat
expr_stmt|;
block|}
comment|/**    * @return the output format    */
annotation|@
name|explain
argument_list|(
name|displayName
operator|=
literal|"output format"
argument_list|)
specifier|public
name|String
name|getOutputFormat
parameter_list|()
block|{
return|return
name|outputFormat
return|;
block|}
comment|/**    * @param outputFormat the output format to set    */
specifier|public
name|void
name|setOutputFormat
parameter_list|(
name|String
name|outputFormat
parameter_list|)
block|{
name|this
operator|.
name|outputFormat
operator|=
name|outputFormat
expr_stmt|;
block|}
block|}
end_class

end_unit

