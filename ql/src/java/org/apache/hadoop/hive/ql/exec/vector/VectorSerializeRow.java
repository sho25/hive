begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|fast
operator|.
name|SerializeWrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_comment
comment|/**  * This class serializes columns from a row in a VectorizedRowBatch into a serialization format.  *  * The caller provides the hive type names and column numbers in the order desired to  * serialize.  *  * This class uses an provided SerializeWrite object to directly serialize by writing  * field-by-field into a serialization format from the primitive values of the VectorizedRowBatch.  *  * Note that when serializing a row, the logical mapping using selected in use has already  * been performed.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|VectorSerializeRow
parameter_list|<
name|T
extends|extends
name|SerializeWrite
parameter_list|>
block|{
specifier|private
name|T
name|serializeWrite
decl_stmt|;
specifier|private
name|Category
index|[]
name|categories
decl_stmt|;
specifier|private
name|PrimitiveCategory
index|[]
name|primitiveCategories
decl_stmt|;
specifier|private
name|int
index|[]
name|outputColumnNums
decl_stmt|;
specifier|public
name|VectorSerializeRow
parameter_list|(
name|T
name|serializeWrite
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|serializeWrite
operator|=
name|serializeWrite
expr_stmt|;
block|}
comment|// Not public since we must have the serialize write object.
specifier|private
name|VectorSerializeRow
parameter_list|()
block|{   }
specifier|public
name|void
name|init
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|typeNames
parameter_list|,
name|int
index|[]
name|columnMap
parameter_list|)
throws|throws
name|HiveException
block|{
specifier|final
name|int
name|size
init|=
name|typeNames
operator|.
name|size
argument_list|()
decl_stmt|;
name|categories
operator|=
operator|new
name|Category
index|[
name|size
index|]
expr_stmt|;
name|primitiveCategories
operator|=
operator|new
name|PrimitiveCategory
index|[
name|size
index|]
expr_stmt|;
name|outputColumnNums
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|columnMap
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|TypeInfo
name|typeInfo
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|typeInfo
operator|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|typeNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|categories
index|[
name|i
index|]
operator|=
name|typeInfo
operator|.
name|getCategory
argument_list|()
expr_stmt|;
if|if
condition|(
name|categories
index|[
name|i
index|]
operator|==
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
name|primitiveCategories
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|init
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|typeNames
parameter_list|)
throws|throws
name|HiveException
block|{
specifier|final
name|int
name|size
init|=
name|typeNames
operator|.
name|size
argument_list|()
decl_stmt|;
name|categories
operator|=
operator|new
name|Category
index|[
name|size
index|]
expr_stmt|;
name|primitiveCategories
operator|=
operator|new
name|PrimitiveCategory
index|[
name|size
index|]
expr_stmt|;
name|outputColumnNums
operator|=
operator|new
name|int
index|[
name|size
index|]
expr_stmt|;
name|TypeInfo
name|typeInfo
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|typeInfo
operator|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|typeNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|categories
index|[
name|i
index|]
operator|=
name|typeInfo
operator|.
name|getCategory
argument_list|()
expr_stmt|;
if|if
condition|(
name|categories
index|[
name|i
index|]
operator|==
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
name|primitiveCategories
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
expr_stmt|;
block|}
name|outputColumnNums
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|init
parameter_list|(
name|TypeInfo
index|[]
name|typeInfos
parameter_list|,
name|int
index|[]
name|columnMap
parameter_list|)
throws|throws
name|HiveException
block|{
specifier|final
name|int
name|size
init|=
name|typeInfos
operator|.
name|length
decl_stmt|;
name|categories
operator|=
operator|new
name|Category
index|[
name|size
index|]
expr_stmt|;
name|primitiveCategories
operator|=
operator|new
name|PrimitiveCategory
index|[
name|size
index|]
expr_stmt|;
name|outputColumnNums
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|columnMap
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|TypeInfo
name|typeInfo
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typeInfos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|typeInfo
operator|=
name|typeInfos
index|[
name|i
index|]
expr_stmt|;
name|categories
index|[
name|i
index|]
operator|=
name|typeInfo
operator|.
name|getCategory
argument_list|()
expr_stmt|;
if|if
condition|(
name|categories
index|[
name|i
index|]
operator|==
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
name|primitiveCategories
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|categories
operator|.
name|length
return|;
block|}
specifier|public
name|void
name|setOutput
parameter_list|(
name|Output
name|output
parameter_list|)
block|{
name|serializeWrite
operator|.
name|set
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setOutputAppend
parameter_list|(
name|Output
name|output
parameter_list|)
block|{
name|serializeWrite
operator|.
name|setAppend
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|hasAnyNulls
decl_stmt|;
specifier|private
name|boolean
name|isAllNulls
decl_stmt|;
comment|/*    * Note that when serializing a row, the logical mapping using selected in use has already    * been performed.  batchIndex is the actual index of the row.    */
specifier|public
name|void
name|serializeWrite
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|hasAnyNulls
operator|=
literal|false
expr_stmt|;
name|isAllNulls
operator|=
literal|true
expr_stmt|;
name|ColumnVector
name|colVector
decl_stmt|;
name|int
name|adjustedBatchIndex
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|categories
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|colVector
operator|=
name|batch
operator|.
name|cols
index|[
name|outputColumnNums
index|[
name|i
index|]
index|]
expr_stmt|;
if|if
condition|(
name|colVector
operator|.
name|isRepeating
condition|)
block|{
name|adjustedBatchIndex
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|adjustedBatchIndex
operator|=
name|batchIndex
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|colVector
operator|.
name|noNulls
operator|&&
name|colVector
operator|.
name|isNull
index|[
name|adjustedBatchIndex
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
name|hasAnyNulls
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
name|isAllNulls
operator|=
literal|false
expr_stmt|;
switch|switch
condition|(
name|categories
index|[
name|i
index|]
condition|)
block|{
case|case
name|PRIMITIVE
case|:
switch|switch
condition|(
name|primitiveCategories
index|[
name|i
index|]
condition|)
block|{
case|case
name|BOOLEAN
case|:
name|serializeWrite
operator|.
name|writeBoolean
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
name|adjustedBatchIndex
index|]
operator|!=
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|serializeWrite
operator|.
name|writeByte
argument_list|(
call|(
name|byte
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|colVector
argument_list|)
operator|.
name|vector
index|[
name|adjustedBatchIndex
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|serializeWrite
operator|.
name|writeShort
argument_list|(
call|(
name|short
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|colVector
argument_list|)
operator|.
name|vector
index|[
name|adjustedBatchIndex
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|serializeWrite
operator|.
name|writeInt
argument_list|(
call|(
name|int
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|colVector
argument_list|)
operator|.
name|vector
index|[
name|adjustedBatchIndex
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|serializeWrite
operator|.
name|writeLong
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
name|adjustedBatchIndex
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|serializeWrite
operator|.
name|writeDate
argument_list|(
call|(
name|int
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|colVector
argument_list|)
operator|.
name|vector
index|[
name|adjustedBatchIndex
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|serializeWrite
operator|.
name|writeTimestamp
argument_list|(
operator|(
operator|(
name|TimestampColumnVector
operator|)
name|colVector
operator|)
operator|.
name|asScratchTimestamp
argument_list|(
name|adjustedBatchIndex
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|serializeWrite
operator|.
name|writeFloat
argument_list|(
call|(
name|float
call|)
argument_list|(
operator|(
name|DoubleColumnVector
operator|)
name|colVector
argument_list|)
operator|.
name|vector
index|[
name|adjustedBatchIndex
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|serializeWrite
operator|.
name|writeDouble
argument_list|(
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
name|adjustedBatchIndex
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
block|{
comment|// We store CHAR and VARCHAR without pads, so write with STRING.
name|BytesColumnVector
name|bytesColVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|colVector
decl_stmt|;
name|serializeWrite
operator|.
name|writeString
argument_list|(
name|bytesColVector
operator|.
name|vector
index|[
name|adjustedBatchIndex
index|]
argument_list|,
name|bytesColVector
operator|.
name|start
index|[
name|adjustedBatchIndex
index|]
argument_list|,
name|bytesColVector
operator|.
name|length
index|[
name|adjustedBatchIndex
index|]
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BINARY
case|:
block|{
name|BytesColumnVector
name|bytesColVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|colVector
decl_stmt|;
name|serializeWrite
operator|.
name|writeBinary
argument_list|(
name|bytesColVector
operator|.
name|vector
index|[
name|adjustedBatchIndex
index|]
argument_list|,
name|bytesColVector
operator|.
name|start
index|[
name|adjustedBatchIndex
index|]
argument_list|,
name|bytesColVector
operator|.
name|length
index|[
name|adjustedBatchIndex
index|]
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DECIMAL
case|:
block|{
name|DecimalColumnVector
name|decimalColVector
init|=
operator|(
name|DecimalColumnVector
operator|)
name|colVector
decl_stmt|;
name|serializeWrite
operator|.
name|writeHiveDecimal
argument_list|(
name|decimalColVector
operator|.
name|vector
index|[
name|adjustedBatchIndex
index|]
argument_list|,
name|decimalColVector
operator|.
name|scale
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
name|serializeWrite
operator|.
name|writeHiveIntervalYearMonth
argument_list|(
call|(
name|int
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|colVector
argument_list|)
operator|.
name|vector
index|[
name|adjustedBatchIndex
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
name|serializeWrite
operator|.
name|writeHiveIntervalDayTime
argument_list|(
operator|(
operator|(
name|IntervalDayTimeColumnVector
operator|)
name|colVector
operator|)
operator|.
name|asScratchIntervalDayTime
argument_list|(
name|adjustedBatchIndex
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected primitive category "
operator|+
name|primitiveCategories
index|[
name|i
index|]
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected category "
operator|+
name|categories
index|[
name|i
index|]
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|boolean
name|getHasAnyNulls
parameter_list|()
block|{
return|return
name|hasAnyNulls
return|;
block|}
specifier|public
name|boolean
name|getIsAllNulls
parameter_list|()
block|{
return|return
name|isAllNulls
return|;
block|}
block|}
end_class

end_unit

