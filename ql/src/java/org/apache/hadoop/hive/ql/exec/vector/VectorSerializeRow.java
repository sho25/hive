begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|fast
operator|.
name|SerializeWrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_comment
comment|/**  * This class serializes columns from a row in a VectorizedRowBatch into a serialization format.  *  * The caller provides the hive type names and column numbers in the order desired to  * serialize.  *  * This class uses an provided SerializeWrite object to directly serialize by writing  * field-by-field into a serialization format from the primitive values of the VectorizedRowBatch.  *  * Note that when serializing a row, the logical mapping using selected in use has already  * been performed.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|VectorSerializeRow
parameter_list|<
name|T
extends|extends
name|SerializeWrite
parameter_list|>
block|{
specifier|private
name|T
name|serializeWrite
decl_stmt|;
specifier|public
name|VectorSerializeRow
parameter_list|(
name|T
name|serializeWrite
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|serializeWrite
operator|=
name|serializeWrite
expr_stmt|;
block|}
comment|// Not public since we must have the serialize write object.
specifier|private
name|VectorSerializeRow
parameter_list|()
block|{   }
specifier|private
specifier|abstract
class|class
name|Writer
parameter_list|<
name|W
extends|extends
name|SerializeWrite
parameter_list|>
block|{
specifier|protected
name|int
name|columnIndex
decl_stmt|;
name|Writer
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|this
operator|.
name|columnIndex
operator|=
name|columnIndex
expr_stmt|;
block|}
specifier|abstract
name|boolean
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|private
specifier|abstract
class|class
name|AbstractLongWriter
extends|extends
name|Writer
argument_list|<
name|T
argument_list|>
block|{
name|AbstractLongWriter
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|BooleanWriter
extends|extends
name|AbstractLongWriter
block|{
name|BooleanWriter
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|boolean
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|colVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeBoolean
argument_list|(
name|colVector
operator|.
name|vector
index|[
literal|0
index|]
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeBoolean
argument_list|(
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
specifier|private
class|class
name|ByteWriter
extends|extends
name|AbstractLongWriter
block|{
name|ByteWriter
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|boolean
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|colVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|colVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
specifier|private
class|class
name|ShortWriter
extends|extends
name|AbstractLongWriter
block|{
name|ShortWriter
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|boolean
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|colVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeShort
argument_list|(
operator|(
name|short
operator|)
name|colVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeShort
argument_list|(
operator|(
name|short
operator|)
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
specifier|private
class|class
name|IntWriter
extends|extends
name|AbstractLongWriter
block|{
name|IntWriter
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|boolean
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|colVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeInt
argument_list|(
operator|(
name|int
operator|)
name|colVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeInt
argument_list|(
operator|(
name|int
operator|)
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
specifier|private
class|class
name|LongWriter
extends|extends
name|AbstractLongWriter
block|{
name|LongWriter
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|boolean
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|colVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeLong
argument_list|(
name|colVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeLong
argument_list|(
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
specifier|private
class|class
name|DateWriter
extends|extends
name|AbstractLongWriter
block|{
name|DateWriter
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|boolean
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|colVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeDate
argument_list|(
operator|(
name|int
operator|)
name|colVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeDate
argument_list|(
operator|(
name|int
operator|)
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
specifier|private
class|class
name|TimestampWriter
extends|extends
name|AbstractLongWriter
block|{
name|Timestamp
name|scratchTimestamp
decl_stmt|;
name|TimestampWriter
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|scratchTimestamp
operator|=
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|boolean
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|colVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|TimestampUtils
operator|.
name|assignTimeInNanoSec
argument_list|(
name|colVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|scratchTimestamp
argument_list|)
expr_stmt|;
name|serializeWrite
operator|.
name|writeTimestamp
argument_list|(
name|scratchTimestamp
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
condition|)
block|{
name|TimestampUtils
operator|.
name|assignTimeInNanoSec
argument_list|(
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
argument_list|,
name|scratchTimestamp
argument_list|)
expr_stmt|;
name|serializeWrite
operator|.
name|writeTimestamp
argument_list|(
name|scratchTimestamp
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
specifier|private
class|class
name|IntervalYearMonthWriter
extends|extends
name|AbstractLongWriter
block|{
name|IntervalYearMonthWriter
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|boolean
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|colVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeHiveIntervalYearMonth
argument_list|(
operator|(
name|int
operator|)
name|colVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeHiveIntervalYearMonth
argument_list|(
operator|(
name|int
operator|)
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
specifier|private
class|class
name|IntervalDayTimeWriter
extends|extends
name|AbstractLongWriter
block|{
name|IntervalDayTimeWriter
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|boolean
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|colVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeHiveIntervalDayTime
argument_list|(
name|colVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeHiveIntervalDayTime
argument_list|(
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
specifier|private
specifier|abstract
class|class
name|AbstractDoubleWriter
extends|extends
name|Writer
argument_list|<
name|T
argument_list|>
block|{
name|AbstractDoubleWriter
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|FloatWriter
extends|extends
name|AbstractDoubleWriter
block|{
name|FloatWriter
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|boolean
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|DoubleColumnVector
name|colVector
init|=
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeFloat
argument_list|(
operator|(
name|float
operator|)
name|colVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeFloat
argument_list|(
operator|(
name|float
operator|)
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
specifier|private
class|class
name|DoubleWriter
extends|extends
name|AbstractDoubleWriter
block|{
name|DoubleWriter
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|boolean
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|DoubleColumnVector
name|colVector
init|=
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeDouble
argument_list|(
name|colVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeDouble
argument_list|(
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
specifier|private
class|class
name|StringWriter
extends|extends
name|Writer
argument_list|<
name|T
argument_list|>
block|{
name|StringWriter
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|boolean
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesColumnVector
name|colVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeString
argument_list|(
name|colVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|colVector
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|colVector
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeString
argument_list|(
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
argument_list|,
name|colVector
operator|.
name|start
index|[
name|batchIndex
index|]
argument_list|,
name|colVector
operator|.
name|length
index|[
name|batchIndex
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
specifier|private
class|class
name|BinaryWriter
extends|extends
name|Writer
argument_list|<
name|T
argument_list|>
block|{
name|BinaryWriter
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|boolean
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesColumnVector
name|colVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeBinary
argument_list|(
name|colVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|colVector
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|colVector
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeBinary
argument_list|(
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
argument_list|,
name|colVector
operator|.
name|start
index|[
name|batchIndex
index|]
argument_list|,
name|colVector
operator|.
name|length
index|[
name|batchIndex
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
specifier|private
class|class
name|HiveDecimalWriter
extends|extends
name|Writer
argument_list|<
name|T
argument_list|>
block|{
specifier|protected
name|HiveDecimalWritable
index|[]
name|vector
decl_stmt|;
name|HiveDecimalWriter
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|boolean
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|DecimalColumnVector
name|colVector
init|=
operator|(
name|DecimalColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeHiveDecimal
argument_list|(
name|colVector
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
condition|)
block|{
name|serializeWrite
operator|.
name|writeHiveDecimal
argument_list|(
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|.
name|getHiveDecimal
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
specifier|private
name|Writer
argument_list|<
name|T
argument_list|>
index|[]
name|writers
decl_stmt|;
specifier|private
name|Writer
argument_list|<
name|T
argument_list|>
name|createWriter
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|,
name|int
name|columnIndex
parameter_list|)
throws|throws
name|HiveException
block|{
name|Writer
argument_list|<
name|T
argument_list|>
name|writer
decl_stmt|;
name|Category
name|category
init|=
name|typeInfo
operator|.
name|getCategory
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|category
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
name|PrimitiveTypeInfo
name|primitiveTypeInfo
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
decl_stmt|;
name|PrimitiveCategory
name|primitiveCategory
init|=
name|primitiveTypeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|primitiveCategory
condition|)
block|{
comment|// case VOID:
comment|//   UNDONE:
comment|// break;
case|case
name|BOOLEAN
case|:
name|writer
operator|=
operator|new
name|BooleanWriter
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|writer
operator|=
operator|new
name|ByteWriter
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|writer
operator|=
operator|new
name|ShortWriter
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|writer
operator|=
operator|new
name|IntWriter
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|writer
operator|=
operator|new
name|LongWriter
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|writer
operator|=
operator|new
name|DateWriter
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|writer
operator|=
operator|new
name|TimestampWriter
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|writer
operator|=
operator|new
name|FloatWriter
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|writer
operator|=
operator|new
name|DoubleWriter
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
comment|// We store CHAR and VARCHAR without pads, so use STRING writer class.
name|writer
operator|=
operator|new
name|StringWriter
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|BINARY
case|:
name|writer
operator|=
operator|new
name|BinaryWriter
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
name|writer
operator|=
operator|new
name|HiveDecimalWriter
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
name|writer
operator|=
operator|new
name|IntervalYearMonthWriter
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
name|writer
operator|=
operator|new
name|IntervalDayTimeWriter
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unexpected primitive type category "
operator|+
name|primitiveCategory
argument_list|)
throw|;
block|}
block|}
break|break;
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unexpected type category "
operator|+
name|category
argument_list|)
throw|;
block|}
return|return
name|writer
return|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|typeNames
parameter_list|,
name|int
index|[]
name|columnMap
parameter_list|)
throws|throws
name|HiveException
block|{
name|writers
operator|=
operator|new
name|Writer
index|[
name|typeNames
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typeNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|typeName
init|=
name|typeNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|TypeInfo
name|typeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
name|int
name|columnIndex
init|=
name|columnMap
index|[
name|i
index|]
decl_stmt|;
name|Writer
argument_list|<
name|T
argument_list|>
name|writer
init|=
name|createWriter
argument_list|(
name|typeInfo
argument_list|,
name|columnIndex
argument_list|)
decl_stmt|;
name|writers
index|[
name|i
index|]
operator|=
name|writer
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|init
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|typeNames
parameter_list|)
throws|throws
name|HiveException
block|{
name|writers
operator|=
operator|new
name|Writer
index|[
name|typeNames
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typeNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|typeName
init|=
name|typeNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|TypeInfo
name|typeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
name|Writer
argument_list|<
name|T
argument_list|>
name|writer
init|=
name|createWriter
argument_list|(
name|typeInfo
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|writers
index|[
name|i
index|]
operator|=
name|writer
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|init
parameter_list|(
name|TypeInfo
index|[]
name|typeInfos
parameter_list|,
name|int
index|[]
name|columnMap
parameter_list|)
throws|throws
name|HiveException
block|{
name|writers
operator|=
operator|new
name|Writer
index|[
name|typeInfos
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typeInfos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|columnIndex
init|=
name|columnMap
index|[
name|i
index|]
decl_stmt|;
name|Writer
argument_list|<
name|T
argument_list|>
name|writer
init|=
name|createWriter
argument_list|(
name|typeInfos
index|[
name|i
index|]
argument_list|,
name|columnIndex
argument_list|)
decl_stmt|;
name|writers
index|[
name|i
index|]
operator|=
name|writer
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|writers
operator|.
name|length
return|;
block|}
specifier|public
name|void
name|setOutput
parameter_list|(
name|Output
name|output
parameter_list|)
block|{
name|serializeWrite
operator|.
name|set
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setOutputAppend
parameter_list|(
name|Output
name|output
parameter_list|)
block|{
name|serializeWrite
operator|.
name|setAppend
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|hasAnyNulls
decl_stmt|;
specifier|private
name|boolean
name|isAllNulls
decl_stmt|;
comment|/*    * Note that when serializing a row, the logical mapping using selected in use has already    * been performed.  batchIndex is the actual index of the row.    */
specifier|public
name|void
name|serializeWrite
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|hasAnyNulls
operator|=
literal|false
expr_stmt|;
name|isAllNulls
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Writer
argument_list|<
name|T
argument_list|>
name|writer
range|:
name|writers
control|)
block|{
if|if
condition|(
operator|!
name|writer
operator|.
name|apply
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|)
condition|)
block|{
name|hasAnyNulls
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|isAllNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|getHasAnyNulls
parameter_list|()
block|{
return|return
name|hasAnyNulls
return|;
block|}
specifier|public
name|boolean
name|getIsAllNulls
parameter_list|()
block|{
return|return
name|isAllNulls
return|;
block|}
block|}
end_class

end_unit

