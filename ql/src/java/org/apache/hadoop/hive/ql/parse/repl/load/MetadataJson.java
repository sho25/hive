begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|load
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|EximUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ReplicationSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|dump
operator|.
name|io
operator|.
name|DBSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|dump
operator|.
name|io
operator|.
name|FunctionSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|dump
operator|.
name|io
operator|.
name|PartitionSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|dump
operator|.
name|io
operator|.
name|TableSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TJSONProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|dump
operator|.
name|io
operator|.
name|JsonWriter
operator|.
name|Serializer
operator|.
name|UTF_8
import|;
end_import

begin_class
specifier|public
class|class
name|MetadataJson
block|{
specifier|private
specifier|final
name|JSONObject
name|json
decl_stmt|;
specifier|private
specifier|final
name|TDeserializer
name|deserializer
decl_stmt|;
specifier|private
specifier|final
name|String
name|tableDesc
decl_stmt|;
specifier|public
name|MetadataJson
parameter_list|(
name|String
name|message
parameter_list|)
throws|throws
name|JSONException
throws|,
name|SemanticException
block|{
name|deserializer
operator|=
operator|new
name|TDeserializer
argument_list|(
operator|new
name|TJSONProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
operator|new
name|JSONObject
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|checkCompatibility
argument_list|()
expr_stmt|;
name|tableDesc
operator|=
name|jsonEntry
argument_list|(
name|TableSerializer
operator|.
name|FIELD_NAME
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MetaData
name|getMetaData
parameter_list|()
throws|throws
name|TException
throws|,
name|JSONException
block|{
return|return
operator|new
name|MetaData
argument_list|(
name|database
argument_list|()
argument_list|,
name|table
argument_list|()
argument_list|,
name|partitions
argument_list|()
argument_list|,
name|readReplicationSpec
argument_list|()
argument_list|,
name|function
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Function
name|function
parameter_list|()
throws|throws
name|TException
block|{
return|return
name|deserialize
argument_list|(
operator|new
name|Function
argument_list|()
argument_list|,
name|jsonEntry
argument_list|(
name|FunctionSerializer
operator|.
name|FIELD_NAME
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Database
name|database
parameter_list|()
throws|throws
name|TException
block|{
return|return
name|deserialize
argument_list|(
operator|new
name|Database
argument_list|()
argument_list|,
name|jsonEntry
argument_list|(
name|DBSerializer
operator|.
name|FIELD_NAME
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Table
name|table
parameter_list|()
throws|throws
name|TException
block|{
return|return
name|deserialize
argument_list|(
operator|new
name|Table
argument_list|()
argument_list|,
name|tableDesc
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|TBase
parameter_list|>
name|T
name|deserialize
parameter_list|(
name|T
name|intoObject
parameter_list|,
name|String
name|json
parameter_list|)
throws|throws
name|TException
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|deserializer
operator|.
name|deserialize
argument_list|(
name|intoObject
argument_list|,
name|json
argument_list|,
name|UTF_8
argument_list|)
expr_stmt|;
return|return
name|intoObject
return|;
block|}
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|()
throws|throws
name|JSONException
throws|,
name|TException
block|{
if|if
condition|(
name|tableDesc
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// TODO : jackson-streaming-iterable-redo this
name|JSONArray
name|jsonPartitions
init|=
operator|new
name|JSONArray
argument_list|(
name|json
operator|.
name|getString
argument_list|(
name|PartitionSerializer
operator|.
name|FIELD_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitionsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|jsonPartitions
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jsonPartitions
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|String
name|partDesc
init|=
name|jsonPartitions
operator|.
name|getString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|partitionsList
operator|.
name|add
argument_list|(
name|deserialize
argument_list|(
operator|new
name|Partition
argument_list|()
argument_list|,
name|partDesc
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|partitionsList
return|;
block|}
specifier|private
name|ReplicationSpec
name|readReplicationSpec
parameter_list|()
block|{
return|return
operator|new
name|ReplicationSpec
argument_list|(
name|this
operator|::
name|jsonEntry
argument_list|)
return|;
block|}
specifier|private
name|void
name|checkCompatibility
parameter_list|()
throws|throws
name|SemanticException
throws|,
name|JSONException
block|{
name|String
name|version
init|=
name|json
operator|.
name|getString
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
name|String
name|fcVersion
init|=
name|jsonEntry
argument_list|(
literal|"fcversion"
argument_list|)
decl_stmt|;
name|EximUtil
operator|.
name|doCheckCompatibility
argument_list|(
name|EximUtil
operator|.
name|METADATA_FORMAT_VERSION
argument_list|,
name|version
argument_list|,
name|fcVersion
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|jsonEntry
parameter_list|(
name|String
name|forName
parameter_list|)
block|{
try|try
block|{
return|return
name|json
operator|.
name|getString
argument_list|(
name|forName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|ignored
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

