begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|translator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexOver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexVisitorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexWindow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexWindowBound
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|translator
operator|.
name|ASTConverter
operator|.
name|RexVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|translator
operator|.
name|ASTConverter
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|OrderExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|OrderSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|PartitionExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|PartitionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|PartitioningSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|BoundarySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|CurrentRowSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|Direction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|RangeBoundarySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|ValueBoundarySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|WindowFrameSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|WindowFunctionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|WindowSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_comment
comment|/*  * convert a RexNode to an ExprNodeDesc  */
end_comment

begin_class
specifier|public
class|class
name|ExprNodeConverter
extends|extends
name|RexVisitorImpl
argument_list|<
name|ExprNodeDesc
argument_list|>
block|{
specifier|private
specifier|final
name|String
name|tabAlias
decl_stmt|;
specifier|private
specifier|final
name|String
name|columnAlias
decl_stmt|;
specifier|private
specifier|final
name|RelDataType
name|inputRowType
decl_stmt|;
specifier|private
specifier|final
name|RelDataType
name|outputRowType
decl_stmt|;
specifier|private
specifier|final
name|ImmutableSet
argument_list|<
name|Integer
argument_list|>
name|inputVCols
decl_stmt|;
specifier|private
name|WindowFunctionSpec
name|wfs
decl_stmt|;
specifier|private
specifier|final
name|RelDataTypeFactory
name|dTFactory
decl_stmt|;
specifier|protected
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|ExprNodeConverter
parameter_list|(
name|String
name|tabAlias
parameter_list|,
name|RelDataType
name|inputRowType
parameter_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
name|vCols
parameter_list|,
name|RelDataTypeFactory
name|dTFactory
parameter_list|)
block|{
name|this
argument_list|(
name|tabAlias
argument_list|,
literal|null
argument_list|,
name|inputRowType
argument_list|,
literal|null
argument_list|,
name|vCols
argument_list|,
name|dTFactory
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ExprNodeConverter
parameter_list|(
name|String
name|tabAlias
parameter_list|,
name|String
name|columnAlias
parameter_list|,
name|RelDataType
name|inputRowType
parameter_list|,
name|RelDataType
name|outputRowType
parameter_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
name|inputVCols
parameter_list|,
name|RelDataTypeFactory
name|dTFactory
parameter_list|)
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|tabAlias
operator|=
name|tabAlias
expr_stmt|;
name|this
operator|.
name|columnAlias
operator|=
name|columnAlias
expr_stmt|;
name|this
operator|.
name|inputRowType
operator|=
name|inputRowType
expr_stmt|;
name|this
operator|.
name|outputRowType
operator|=
name|outputRowType
expr_stmt|;
name|this
operator|.
name|inputVCols
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|inputVCols
argument_list|)
expr_stmt|;
name|this
operator|.
name|dTFactory
operator|=
name|dTFactory
expr_stmt|;
block|}
specifier|public
name|WindowFunctionSpec
name|getWindowFunctionSpec
parameter_list|()
block|{
return|return
name|this
operator|.
name|wfs
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExprNodeDesc
name|visitInputRef
parameter_list|(
name|RexInputRef
name|inputRef
parameter_list|)
block|{
name|RelDataTypeField
name|f
init|=
name|inputRowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|inputRef
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeConverter
operator|.
name|convert
argument_list|(
name|f
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|tabAlias
argument_list|,
name|inputVCols
operator|.
name|contains
argument_list|(
name|inputRef
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * TODO: Handle 1) cast 2) Field Access 3) Windowing Over() 4, Windowing Agg Call    */
annotation|@
name|Override
specifier|public
name|ExprNodeDesc
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
name|ExprNodeGenericFuncDesc
name|gfDesc
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|deep
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|args
init|=
operator|new
name|LinkedList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
name|call
operator|.
name|operands
control|)
block|{
name|args
operator|.
name|add
argument_list|(
name|operand
operator|.
name|accept
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// If Call is a redundant cast then bail out. Ex: cast(true)BOOLEAN
if|if
condition|(
name|call
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|CAST
argument_list|)
operator|&&
operator|(
name|call
operator|.
name|operands
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
operator|&&
name|SqlTypeUtil
operator|.
name|equalSansNullability
argument_list|(
name|dTFactory
argument_list|,
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|ASTConverter
operator|.
name|isFlat
argument_list|(
name|call
argument_list|)
condition|)
block|{
comment|// If Expr is flat (and[p,q,r,s] or[p,q,r,s]) then recursively build the
comment|// exprnode
name|GenericUDF
name|hiveUdf
init|=
name|SqlFunctionConverter
operator|.
name|getHiveUDF
argument_list|(
name|call
operator|.
name|getOperator
argument_list|()
argument_list|,
name|call
operator|.
name|getType
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|tmpExprArgs
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|tmpExprArgs
operator|.
name|addAll
argument_list|(
name|args
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|gfDesc
operator|=
name|ExprNodeGenericFuncDesc
operator|.
name|newInstance
argument_list|(
name|hiveUdf
argument_list|,
name|tmpExprArgs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UDFArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|call
operator|.
name|operands
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|tmpExprArgs
operator|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
expr_stmt|;
name|tmpExprArgs
operator|.
name|add
argument_list|(
name|gfDesc
argument_list|)
expr_stmt|;
name|tmpExprArgs
operator|.
name|add
argument_list|(
name|args
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|gfDesc
operator|=
name|ExprNodeGenericFuncDesc
operator|.
name|newInstance
argument_list|(
name|hiveUdf
argument_list|,
name|tmpExprArgs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UDFArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|GenericUDF
name|hiveUdf
init|=
name|SqlFunctionConverter
operator|.
name|getHiveUDF
argument_list|(
name|call
operator|.
name|getOperator
argument_list|()
argument_list|,
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|args
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|hiveUdf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot find UDF for "
operator|+
name|call
operator|.
name|getType
argument_list|()
operator|+
literal|" "
operator|+
name|call
operator|.
name|getOperator
argument_list|()
operator|+
literal|"["
operator|+
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|getKind
argument_list|()
operator|+
literal|"]/"
operator|+
name|args
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
name|gfDesc
operator|=
name|ExprNodeGenericFuncDesc
operator|.
name|newInstance
argument_list|(
name|hiveUdf
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UDFArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|gfDesc
return|;
block|}
comment|/**    * TODO: 1. Handle NULL    */
annotation|@
name|Override
specifier|public
name|ExprNodeDesc
name|visitLiteral
parameter_list|(
name|RexLiteral
name|literal
parameter_list|)
block|{
name|RelDataType
name|lType
init|=
name|literal
operator|.
name|getType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|literal
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|RexLiteral
operator|.
name|booleanValue
argument_list|(
name|literal
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
name|TINYINT
case|:
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|byteTypeInfo
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|literal
operator|.
name|getValue3
argument_list|()
operator|)
operator|.
name|byteValue
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|SMALLINT
case|:
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|shortTypeInfo
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|literal
operator|.
name|getValue3
argument_list|()
operator|)
operator|.
name|shortValue
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|INTEGER
case|:
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|literal
operator|.
name|getValue3
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|BIGINT
case|:
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|literal
operator|.
name|getValue3
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|FLOAT
case|:
case|case
name|REAL
case|:
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|floatTypeInfo
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|literal
operator|.
name|getValue3
argument_list|()
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|literal
operator|.
name|getValue3
argument_list|()
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|dateTypeInfo
argument_list|,
operator|new
name|Date
argument_list|(
operator|(
operator|(
name|Calendar
operator|)
name|literal
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|TIME
case|:
case|case
name|TIMESTAMP
case|:
block|{
name|Object
name|value
init|=
name|literal
operator|.
name|getValue3
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Long
condition|)
block|{
name|value
operator|=
operator|new
name|Timestamp
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
argument_list|,
name|value
argument_list|)
return|;
block|}
case|case
name|BINARY
case|:
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|binaryTypeInfo
argument_list|,
name|literal
operator|.
name|getValue3
argument_list|()
argument_list|)
return|;
case|case
name|DECIMAL
case|:
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|getDecimalTypeInfo
argument_list|(
name|lType
operator|.
name|getPrecision
argument_list|()
argument_list|,
name|lType
operator|.
name|getScale
argument_list|()
argument_list|)
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
operator|(
name|BigDecimal
operator|)
name|literal
operator|.
name|getValue3
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|VARCHAR
case|:
block|{
name|int
name|varcharLength
init|=
name|lType
operator|.
name|getPrecision
argument_list|()
decl_stmt|;
comment|// If we cannot use Varchar due to type length restrictions, we use String
if|if
condition|(
name|varcharLength
argument_list|<
literal|1
operator|||
name|varcharLength
argument_list|>
name|HiveVarchar
operator|.
name|MAX_VARCHAR_LENGTH
condition|)
block|{
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|literal
operator|.
name|getValue3
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|getVarcharTypeInfo
argument_list|(
name|varcharLength
argument_list|)
argument_list|,
operator|new
name|HiveVarchar
argument_list|(
operator|(
name|String
operator|)
name|literal
operator|.
name|getValue3
argument_list|()
argument_list|,
name|varcharLength
argument_list|)
argument_list|)
return|;
block|}
case|case
name|CHAR
case|:
block|{
name|int
name|charLength
init|=
name|lType
operator|.
name|getPrecision
argument_list|()
decl_stmt|;
comment|// If we cannot use Char due to type length restrictions, we use String
if|if
condition|(
name|charLength
argument_list|<
literal|1
operator|||
name|charLength
argument_list|>
name|HiveChar
operator|.
name|MAX_CHAR_LENGTH
condition|)
block|{
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|literal
operator|.
name|getValue3
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|getCharTypeInfo
argument_list|(
name|charLength
argument_list|)
argument_list|,
operator|new
name|HiveChar
argument_list|(
operator|(
name|String
operator|)
name|literal
operator|.
name|getValue3
argument_list|()
argument_list|,
name|charLength
argument_list|)
argument_list|)
return|;
block|}
case|case
name|INTERVAL_YEAR_MONTH
case|:
block|{
name|BigDecimal
name|monthsBd
init|=
operator|(
name|BigDecimal
operator|)
name|literal
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intervalYearMonthTypeInfo
argument_list|,
operator|new
name|HiveIntervalYearMonth
argument_list|(
name|monthsBd
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
case|case
name|INTERVAL_DAY_TIME
case|:
block|{
name|BigDecimal
name|millisBd
init|=
operator|(
name|BigDecimal
operator|)
name|literal
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// Calcite literal is in millis, we need to convert to seconds
name|BigDecimal
name|secsBd
init|=
name|millisBd
operator|.
name|divide
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intervalDayTimeTypeInfo
argument_list|,
operator|new
name|HiveIntervalDayTime
argument_list|(
name|secsBd
argument_list|)
argument_list|)
return|;
block|}
case|case
name|OTHER
case|:
default|default:
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|voidTypeInfo
argument_list|,
name|literal
operator|.
name|getValue3
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ExprNodeDesc
name|visitOver
parameter_list|(
name|RexOver
name|over
parameter_list|)
block|{
if|if
condition|(
operator|!
name|deep
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|RexWindow
name|window
init|=
name|over
operator|.
name|getWindow
argument_list|()
decl_stmt|;
specifier|final
name|WindowSpec
name|windowSpec
init|=
operator|new
name|WindowSpec
argument_list|()
decl_stmt|;
specifier|final
name|PartitioningSpec
name|partitioningSpec
init|=
name|getPSpec
argument_list|(
name|window
argument_list|)
decl_stmt|;
name|windowSpec
operator|.
name|setPartitioning
argument_list|(
name|partitioningSpec
argument_list|)
expr_stmt|;
specifier|final
name|WindowFrameSpec
name|windowFrameSpec
init|=
name|getWindowRange
argument_list|(
name|window
argument_list|)
decl_stmt|;
name|windowSpec
operator|.
name|setWindowFrame
argument_list|(
name|windowFrameSpec
argument_list|)
expr_stmt|;
name|wfs
operator|=
operator|new
name|WindowFunctionSpec
argument_list|()
expr_stmt|;
name|wfs
operator|.
name|setWindowSpec
argument_list|(
name|windowSpec
argument_list|)
expr_stmt|;
specifier|final
name|Schema
name|schema
init|=
operator|new
name|Schema
argument_list|(
name|tabAlias
argument_list|,
name|inputRowType
operator|.
name|getFieldList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ASTNode
name|wUDAFAst
init|=
operator|new
name|ASTConverter
operator|.
name|RexVisitor
argument_list|(
name|schema
argument_list|)
operator|.
name|visitOver
argument_list|(
name|over
argument_list|)
decl_stmt|;
name|wfs
operator|.
name|setExpression
argument_list|(
name|wUDAFAst
argument_list|)
expr_stmt|;
name|ASTNode
name|nameNode
init|=
operator|(
name|ASTNode
operator|)
name|wUDAFAst
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|wfs
operator|.
name|setName
argument_list|(
name|nameNode
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|wUDAFAst
operator|.
name|getChildCount
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|wUDAFAst
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|wfs
operator|.
name|addArg
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
name|wfs
operator|.
name|setAlias
argument_list|(
name|columnAlias
argument_list|)
expr_stmt|;
name|RelDataTypeField
name|f
init|=
name|outputRowType
operator|.
name|getField
argument_list|(
name|columnAlias
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeConverter
operator|.
name|convert
argument_list|(
name|f
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|columnAlias
argument_list|,
name|tabAlias
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|PartitioningSpec
name|getPSpec
parameter_list|(
name|RexWindow
name|window
parameter_list|)
block|{
name|PartitioningSpec
name|partitioning
init|=
operator|new
name|PartitioningSpec
argument_list|()
decl_stmt|;
name|Schema
name|schema
init|=
operator|new
name|Schema
argument_list|(
name|tabAlias
argument_list|,
name|inputRowType
operator|.
name|getFieldList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|window
operator|.
name|partitionKeys
operator|!=
literal|null
operator|&&
operator|!
name|window
operator|.
name|partitionKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PartitionSpec
name|pSpec
init|=
operator|new
name|PartitionSpec
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|pk
range|:
name|window
operator|.
name|partitionKeys
control|)
block|{
name|PartitionExpression
name|exprSpec
init|=
operator|new
name|PartitionExpression
argument_list|()
decl_stmt|;
name|ASTNode
name|astNode
init|=
name|pk
operator|.
name|accept
argument_list|(
operator|new
name|RexVisitor
argument_list|(
name|schema
argument_list|)
argument_list|)
decl_stmt|;
name|exprSpec
operator|.
name|setExpression
argument_list|(
name|astNode
argument_list|)
expr_stmt|;
name|pSpec
operator|.
name|addExpression
argument_list|(
name|exprSpec
argument_list|)
expr_stmt|;
block|}
name|partitioning
operator|.
name|setPartSpec
argument_list|(
name|pSpec
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|window
operator|.
name|orderKeys
operator|!=
literal|null
operator|&&
operator|!
name|window
operator|.
name|orderKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|OrderSpec
name|oSpec
init|=
operator|new
name|OrderSpec
argument_list|()
decl_stmt|;
for|for
control|(
name|RexFieldCollation
name|ok
range|:
name|window
operator|.
name|orderKeys
control|)
block|{
name|OrderExpression
name|exprSpec
init|=
operator|new
name|OrderExpression
argument_list|()
decl_stmt|;
name|Order
name|order
init|=
name|ok
operator|.
name|getDirection
argument_list|()
operator|==
name|RelFieldCollation
operator|.
name|Direction
operator|.
name|ASCENDING
condition|?
name|Order
operator|.
name|ASC
else|:
name|Order
operator|.
name|DESC
decl_stmt|;
name|exprSpec
operator|.
name|setOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|ASTNode
name|astNode
init|=
name|ok
operator|.
name|left
operator|.
name|accept
argument_list|(
operator|new
name|RexVisitor
argument_list|(
name|schema
argument_list|)
argument_list|)
decl_stmt|;
name|exprSpec
operator|.
name|setExpression
argument_list|(
name|astNode
argument_list|)
expr_stmt|;
name|oSpec
operator|.
name|addExpression
argument_list|(
name|exprSpec
argument_list|)
expr_stmt|;
block|}
name|partitioning
operator|.
name|setOrderSpec
argument_list|(
name|oSpec
argument_list|)
expr_stmt|;
block|}
return|return
name|partitioning
return|;
block|}
specifier|private
name|WindowFrameSpec
name|getWindowRange
parameter_list|(
name|RexWindow
name|window
parameter_list|)
block|{
comment|// NOTE: in Hive AST Rows->Range(Physical)& Range -> Values (logical)
name|WindowFrameSpec
name|windowFrame
init|=
operator|new
name|WindowFrameSpec
argument_list|()
decl_stmt|;
name|BoundarySpec
name|start
init|=
literal|null
decl_stmt|;
name|RexWindowBound
name|ub
init|=
name|window
operator|.
name|getUpperBound
argument_list|()
decl_stmt|;
if|if
condition|(
name|ub
operator|!=
literal|null
condition|)
block|{
name|start
operator|=
name|getWindowBound
argument_list|(
name|ub
argument_list|,
name|window
operator|.
name|isRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|BoundarySpec
name|end
init|=
literal|null
decl_stmt|;
name|RexWindowBound
name|lb
init|=
name|window
operator|.
name|getLowerBound
argument_list|()
decl_stmt|;
if|if
condition|(
name|lb
operator|!=
literal|null
condition|)
block|{
name|end
operator|=
name|getWindowBound
argument_list|(
name|lb
argument_list|,
name|window
operator|.
name|isRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|start
operator|!=
literal|null
operator|||
name|end
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|start
operator|!=
literal|null
condition|)
block|{
name|windowFrame
operator|.
name|setStart
argument_list|(
name|start
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|end
operator|!=
literal|null
condition|)
block|{
name|windowFrame
operator|.
name|setEnd
argument_list|(
name|end
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|windowFrame
return|;
block|}
specifier|private
name|BoundarySpec
name|getWindowBound
parameter_list|(
name|RexWindowBound
name|wb
parameter_list|,
name|boolean
name|isRows
parameter_list|)
block|{
name|BoundarySpec
name|boundarySpec
decl_stmt|;
if|if
condition|(
name|wb
operator|.
name|isCurrentRow
argument_list|()
condition|)
block|{
name|boundarySpec
operator|=
operator|new
name|CurrentRowSpec
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Direction
name|direction
decl_stmt|;
specifier|final
name|int
name|amt
decl_stmt|;
if|if
condition|(
name|wb
operator|.
name|isPreceding
argument_list|()
condition|)
block|{
name|direction
operator|=
name|Direction
operator|.
name|PRECEDING
expr_stmt|;
block|}
else|else
block|{
name|direction
operator|=
name|Direction
operator|.
name|FOLLOWING
expr_stmt|;
block|}
if|if
condition|(
name|wb
operator|.
name|isUnbounded
argument_list|()
condition|)
block|{
name|amt
operator|=
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
expr_stmt|;
block|}
else|else
block|{
name|amt
operator|=
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|wb
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isRows
condition|)
block|{
name|boundarySpec
operator|=
operator|new
name|RangeBoundarySpec
argument_list|(
name|direction
argument_list|,
name|amt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boundarySpec
operator|=
operator|new
name|ValueBoundarySpec
argument_list|(
name|direction
argument_list|,
name|amt
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|boundarySpec
return|;
block|}
block|}
end_class

end_unit

