begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|arrow
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ArrowBuf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|BigIntVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|BitVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|DateDayVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|DecimalVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|FieldVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|Float4Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|Float8Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|IntVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|IntervalDayVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|IntervalYearVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|SmallIntVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|TimeStampNanoVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|TinyIntVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|VarBinaryVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|VarCharVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|VectorSchemaRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|holders
operator|.
name|NullableIntervalDayHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|IntervalDayTimeColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ListColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|MapColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|StructColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|UnionColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorExtractRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedBatchUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|UnionTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedBatchUtil
operator|.
name|createColumnVector
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|arrow
operator|.
name|ArrowColumnarBatchSerDe
operator|.
name|MS_PER_SECOND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|arrow
operator|.
name|ArrowColumnarBatchSerDe
operator|.
name|NS_PER_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|arrow
operator|.
name|ArrowColumnarBatchSerDe
operator|.
name|NS_PER_SECOND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|arrow
operator|.
name|ArrowColumnarBatchSerDe
operator|.
name|SECOND_PER_DAY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|arrow
operator|.
name|ArrowColumnarBatchSerDe
operator|.
name|toStructListTypeInfo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|arrow
operator|.
name|ArrowColumnarBatchSerDe
operator|.
name|toStructListVector
import|;
end_import

begin_class
class|class
name|Deserializer
block|{
specifier|private
specifier|final
name|ArrowColumnarBatchSerDe
name|serDe
decl_stmt|;
specifier|private
specifier|final
name|VectorExtractRow
name|vectorExtractRow
decl_stmt|;
specifier|private
specifier|final
name|VectorizedRowBatch
name|vectorizedRowBatch
decl_stmt|;
specifier|private
name|Object
index|[]
index|[]
name|rows
decl_stmt|;
name|Deserializer
parameter_list|(
name|ArrowColumnarBatchSerDe
name|serDe
parameter_list|)
throws|throws
name|SerDeException
block|{
name|this
operator|.
name|serDe
operator|=
name|serDe
expr_stmt|;
name|vectorExtractRow
operator|=
operator|new
name|VectorExtractRow
argument_list|()
expr_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfoList
init|=
name|serDe
operator|.
name|rowTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|fieldTypeInfoList
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|TypeInfo
index|[]
name|typeInfos
init|=
name|fieldTypeInfoList
operator|.
name|toArray
argument_list|(
operator|new
name|TypeInfo
index|[
name|fieldCount
index|]
argument_list|)
decl_stmt|;
try|try
block|{
name|vectorExtractRow
operator|.
name|init
argument_list|(
name|typeInfos
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|vectorizedRowBatch
operator|=
operator|new
name|VectorizedRowBatch
argument_list|(
name|fieldCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|fieldIndex
init|=
literal|0
init|;
name|fieldIndex
operator|<
name|fieldCount
condition|;
name|fieldIndex
operator|++
control|)
block|{
specifier|final
name|ColumnVector
name|columnVector
init|=
name|createColumnVector
argument_list|(
name|typeInfos
index|[
name|fieldIndex
index|]
argument_list|)
decl_stmt|;
name|columnVector
operator|.
name|init
argument_list|()
expr_stmt|;
name|vectorizedRowBatch
operator|.
name|cols
index|[
name|fieldIndex
index|]
operator|=
name|columnVector
expr_stmt|;
block|}
block|}
specifier|public
name|Object
name|deserialize
parameter_list|(
name|Writable
name|writable
parameter_list|)
block|{
specifier|final
name|ArrowWrapperWritable
name|arrowWrapperWritable
init|=
operator|(
name|ArrowWrapperWritable
operator|)
name|writable
decl_stmt|;
specifier|final
name|VectorSchemaRoot
name|vectorSchemaRoot
init|=
name|arrowWrapperWritable
operator|.
name|getVectorSchemaRoot
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FieldVector
argument_list|>
name|fieldVectors
init|=
name|vectorSchemaRoot
operator|.
name|getFieldVectors
argument_list|()
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|fieldVectors
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|int
name|rowCount
init|=
name|vectorSchemaRoot
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
name|vectorizedRowBatch
operator|.
name|ensureSize
argument_list|(
name|rowCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|rows
operator|==
literal|null
operator|||
name|rows
operator|.
name|length
operator|<
name|rowCount
condition|)
block|{
name|rows
operator|=
operator|new
name|Object
index|[
name|rowCount
index|]
index|[]
expr_stmt|;
for|for
control|(
name|int
name|rowIndex
init|=
literal|0
init|;
name|rowIndex
operator|<
name|rowCount
condition|;
name|rowIndex
operator|++
control|)
block|{
name|rows
index|[
name|rowIndex
index|]
operator|=
operator|new
name|Object
index|[
name|fieldCount
index|]
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|fieldIndex
init|=
literal|0
init|;
name|fieldIndex
operator|<
name|fieldCount
condition|;
name|fieldIndex
operator|++
control|)
block|{
specifier|final
name|FieldVector
name|fieldVector
init|=
name|fieldVectors
operator|.
name|get
argument_list|(
name|fieldIndex
argument_list|)
decl_stmt|;
specifier|final
name|int
name|projectedCol
init|=
name|vectorizedRowBatch
operator|.
name|projectedColumns
index|[
name|fieldIndex
index|]
decl_stmt|;
specifier|final
name|ColumnVector
name|columnVector
init|=
name|vectorizedRowBatch
operator|.
name|cols
index|[
name|projectedCol
index|]
decl_stmt|;
specifier|final
name|TypeInfo
name|typeInfo
init|=
name|serDe
operator|.
name|rowTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
operator|.
name|get
argument_list|(
name|fieldIndex
argument_list|)
decl_stmt|;
name|read
argument_list|(
name|fieldVector
argument_list|,
name|columnVector
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|rowIndex
init|=
literal|0
init|;
name|rowIndex
operator|<
name|rowCount
condition|;
name|rowIndex
operator|++
control|)
block|{
name|vectorExtractRow
operator|.
name|extractRow
argument_list|(
name|vectorizedRowBatch
argument_list|,
name|rowIndex
argument_list|,
name|rows
index|[
name|rowIndex
index|]
argument_list|)
expr_stmt|;
block|}
name|vectorizedRowBatch
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|rows
return|;
block|}
specifier|private
name|void
name|read
parameter_list|(
name|FieldVector
name|arrowVector
parameter_list|,
name|ColumnVector
name|hiveVector
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
switch|switch
condition|(
name|typeInfo
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
name|readPrimitive
argument_list|(
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
break|break;
case|case
name|LIST
case|:
name|readList
argument_list|(
name|arrowVector
argument_list|,
operator|(
name|ListColumnVector
operator|)
name|hiveVector
argument_list|,
operator|(
name|ListTypeInfo
operator|)
name|typeInfo
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAP
case|:
name|readMap
argument_list|(
name|arrowVector
argument_list|,
operator|(
name|MapColumnVector
operator|)
name|hiveVector
argument_list|,
operator|(
name|MapTypeInfo
operator|)
name|typeInfo
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRUCT
case|:
name|readStruct
argument_list|(
name|arrowVector
argument_list|,
operator|(
name|StructColumnVector
operator|)
name|hiveVector
argument_list|,
operator|(
name|StructTypeInfo
operator|)
name|typeInfo
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNION
case|:
name|readUnion
argument_list|(
name|arrowVector
argument_list|,
operator|(
name|UnionColumnVector
operator|)
name|hiveVector
argument_list|,
operator|(
name|UnionTypeInfo
operator|)
name|typeInfo
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
specifier|private
name|void
name|readPrimitive
parameter_list|(
name|FieldVector
name|arrowVector
parameter_list|,
name|ColumnVector
name|hiveVector
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
specifier|final
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
name|primitiveCategory
init|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|arrowVector
operator|.
name|getValueCount
argument_list|()
decl_stmt|;
name|hiveVector
operator|.
name|ensureSize
argument_list|(
name|size
argument_list|,
literal|false
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|primitiveCategory
condition|)
block|{
case|case
name|BOOLEAN
case|:
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|arrowVector
operator|.
name|isNull
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|hiveVector
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|hiveVector
operator|)
operator|.
name|vector
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|BitVector
operator|)
name|arrowVector
operator|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|BYTE
case|:
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|arrowVector
operator|.
name|isNull
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|hiveVector
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|hiveVector
operator|)
operator|.
name|vector
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|TinyIntVector
operator|)
name|arrowVector
operator|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|SHORT
case|:
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|arrowVector
operator|.
name|isNull
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|hiveVector
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|hiveVector
operator|)
operator|.
name|vector
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|SmallIntVector
operator|)
name|arrowVector
operator|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|INT
case|:
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|arrowVector
operator|.
name|isNull
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|hiveVector
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|hiveVector
operator|)
operator|.
name|vector
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|IntVector
operator|)
name|arrowVector
operator|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|LONG
case|:
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|arrowVector
operator|.
name|isNull
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|hiveVector
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|hiveVector
operator|)
operator|.
name|vector
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|BigIntVector
operator|)
name|arrowVector
operator|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|FLOAT
case|:
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|arrowVector
operator|.
name|isNull
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|hiveVector
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|hiveVector
operator|)
operator|.
name|vector
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|Float4Vector
operator|)
name|arrowVector
operator|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|DOUBLE
case|:
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|arrowVector
operator|.
name|isNull
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|hiveVector
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|hiveVector
operator|)
operator|.
name|vector
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|Float8Vector
operator|)
name|arrowVector
operator|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|STRING
case|:
case|case
name|VARCHAR
case|:
case|case
name|CHAR
case|:
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|arrowVector
operator|.
name|isNull
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|hiveVector
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|hiveVector
operator|)
operator|.
name|setVal
argument_list|(
name|i
argument_list|,
operator|(
operator|(
name|VarCharVector
operator|)
name|arrowVector
operator|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|DATE
case|:
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|arrowVector
operator|.
name|isNull
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|hiveVector
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|hiveVector
operator|)
operator|.
name|vector
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|DateDayVector
operator|)
name|arrowVector
operator|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|TIMESTAMP
case|:
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|arrowVector
operator|.
name|isNull
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|hiveVector
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
comment|// Time = second + sub-second
specifier|final
name|long
name|timeInNanos
init|=
operator|(
operator|(
name|TimeStampNanoVector
operator|)
name|arrowVector
operator|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|TimestampColumnVector
name|timestampColumnVector
init|=
operator|(
name|TimestampColumnVector
operator|)
name|hiveVector
decl_stmt|;
name|int
name|subSecondInNanos
init|=
call|(
name|int
call|)
argument_list|(
name|timeInNanos
operator|%
name|NS_PER_SECOND
argument_list|)
decl_stmt|;
name|long
name|second
init|=
name|timeInNanos
operator|/
name|NS_PER_SECOND
decl_stmt|;
comment|// A nanosecond value should not be negative
if|if
condition|(
name|subSecondInNanos
operator|<
literal|0
condition|)
block|{
comment|// So add one second to the negative nanosecond value to make it positive
name|subSecondInNanos
operator|+=
name|NS_PER_SECOND
expr_stmt|;
comment|// Subtract one second from the second value because we added one second,
comment|// then subtract one more second because of the ceiling in the division.
name|second
operator|-=
literal|2
expr_stmt|;
block|}
name|timestampColumnVector
operator|.
name|time
index|[
name|i
index|]
operator|=
name|second
operator|*
name|MS_PER_SECOND
expr_stmt|;
name|timestampColumnVector
operator|.
name|nanos
index|[
name|i
index|]
operator|=
name|subSecondInNanos
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|BINARY
case|:
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|arrowVector
operator|.
name|isNull
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|hiveVector
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|hiveVector
operator|)
operator|.
name|setVal
argument_list|(
name|i
argument_list|,
operator|(
operator|(
name|VarBinaryVector
operator|)
name|arrowVector
operator|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|DECIMAL
case|:
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|arrowVector
operator|.
name|isNull
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|hiveVector
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
operator|(
operator|(
name|DecimalColumnVector
operator|)
name|hiveVector
operator|)
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
operator|(
operator|(
name|DecimalVector
operator|)
name|arrowVector
operator|)
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|arrowVector
operator|.
name|isNull
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|hiveVector
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|hiveVector
operator|)
operator|.
name|vector
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|IntervalYearVector
operator|)
name|arrowVector
operator|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
block|{
specifier|final
name|IntervalDayVector
name|intervalDayVector
init|=
operator|(
name|IntervalDayVector
operator|)
name|arrowVector
decl_stmt|;
specifier|final
name|NullableIntervalDayHolder
name|intervalDayHolder
init|=
operator|new
name|NullableIntervalDayHolder
argument_list|()
decl_stmt|;
specifier|final
name|HiveIntervalDayTime
name|intervalDayTime
init|=
operator|new
name|HiveIntervalDayTime
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|arrowVector
operator|.
name|isNull
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|hiveVector
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|intervalDayVector
operator|.
name|get
argument_list|(
name|i
argument_list|,
name|intervalDayHolder
argument_list|)
expr_stmt|;
specifier|final
name|long
name|seconds
init|=
name|intervalDayHolder
operator|.
name|days
operator|*
name|SECOND_PER_DAY
operator|+
name|intervalDayHolder
operator|.
name|milliseconds
operator|/
name|MS_PER_SECOND
decl_stmt|;
specifier|final
name|int
name|nanos
init|=
operator|(
name|intervalDayHolder
operator|.
name|milliseconds
operator|%
literal|1_000
operator|)
operator|*
name|NS_PER_MS
decl_stmt|;
name|intervalDayTime
operator|.
name|set
argument_list|(
name|seconds
argument_list|,
name|nanos
argument_list|)
expr_stmt|;
operator|(
operator|(
name|IntervalDayTimeColumnVector
operator|)
name|hiveVector
operator|)
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|intervalDayTime
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|VOID
case|:
case|case
name|TIMESTAMPLOCALTZ
case|:
case|case
name|UNKNOWN
case|:
default|default:
break|break;
block|}
block|}
specifier|private
name|void
name|readList
parameter_list|(
name|FieldVector
name|arrowVector
parameter_list|,
name|ListColumnVector
name|hiveVector
parameter_list|,
name|ListTypeInfo
name|typeInfo
parameter_list|)
block|{
specifier|final
name|int
name|size
init|=
name|arrowVector
operator|.
name|getValueCount
argument_list|()
decl_stmt|;
specifier|final
name|ArrowBuf
name|offsets
init|=
name|arrowVector
operator|.
name|getOffsetBuffer
argument_list|()
decl_stmt|;
specifier|final
name|int
name|OFFSET_WIDTH
init|=
literal|4
decl_stmt|;
name|read
argument_list|(
name|arrowVector
operator|.
name|getChildrenFromFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|hiveVector
operator|.
name|child
argument_list|,
name|typeInfo
operator|.
name|getListElementTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|arrowVector
operator|.
name|isNull
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|hiveVector
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
specifier|final
name|int
name|offset
init|=
name|offsets
operator|.
name|getInt
argument_list|(
name|i
operator|*
name|OFFSET_WIDTH
argument_list|)
decl_stmt|;
name|hiveVector
operator|.
name|offsets
index|[
name|i
index|]
operator|=
name|offset
expr_stmt|;
name|hiveVector
operator|.
name|lengths
index|[
name|i
index|]
operator|=
name|offsets
operator|.
name|getInt
argument_list|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|*
name|OFFSET_WIDTH
argument_list|)
operator|-
name|offset
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|readMap
parameter_list|(
name|FieldVector
name|arrowVector
parameter_list|,
name|MapColumnVector
name|hiveVector
parameter_list|,
name|MapTypeInfo
name|typeInfo
parameter_list|)
block|{
specifier|final
name|int
name|size
init|=
name|arrowVector
operator|.
name|getValueCount
argument_list|()
decl_stmt|;
specifier|final
name|ListTypeInfo
name|mapStructListTypeInfo
init|=
name|toStructListTypeInfo
argument_list|(
name|typeInfo
argument_list|)
decl_stmt|;
specifier|final
name|ListColumnVector
name|mapStructListVector
init|=
name|toStructListVector
argument_list|(
name|hiveVector
argument_list|)
decl_stmt|;
specifier|final
name|StructColumnVector
name|mapStructVector
init|=
operator|(
name|StructColumnVector
operator|)
name|mapStructListVector
operator|.
name|child
decl_stmt|;
name|read
argument_list|(
name|arrowVector
argument_list|,
name|mapStructListVector
argument_list|,
name|mapStructListTypeInfo
argument_list|)
expr_stmt|;
name|hiveVector
operator|.
name|isRepeating
operator|=
name|mapStructListVector
operator|.
name|isRepeating
expr_stmt|;
name|hiveVector
operator|.
name|childCount
operator|=
name|mapStructListVector
operator|.
name|childCount
expr_stmt|;
name|hiveVector
operator|.
name|noNulls
operator|=
name|mapStructListVector
operator|.
name|noNulls
expr_stmt|;
name|hiveVector
operator|.
name|keys
operator|=
name|mapStructVector
operator|.
name|fields
index|[
literal|0
index|]
expr_stmt|;
name|hiveVector
operator|.
name|values
operator|=
name|mapStructVector
operator|.
name|fields
index|[
literal|1
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|mapStructListVector
operator|.
name|offsets
argument_list|,
literal|0
argument_list|,
name|hiveVector
operator|.
name|offsets
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|mapStructListVector
operator|.
name|lengths
argument_list|,
literal|0
argument_list|,
name|hiveVector
operator|.
name|lengths
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|mapStructListVector
operator|.
name|isNull
argument_list|,
literal|0
argument_list|,
name|hiveVector
operator|.
name|isNull
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|readStruct
parameter_list|(
name|FieldVector
name|arrowVector
parameter_list|,
name|StructColumnVector
name|hiveVector
parameter_list|,
name|StructTypeInfo
name|typeInfo
parameter_list|)
block|{
specifier|final
name|int
name|size
init|=
name|arrowVector
operator|.
name|getValueCount
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
init|=
name|typeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|int
name|fieldSize
init|=
name|arrowVector
operator|.
name|getChildrenFromFields
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldSize
condition|;
name|i
operator|++
control|)
block|{
name|read
argument_list|(
name|arrowVector
operator|.
name|getChildrenFromFields
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|hiveVector
operator|.
name|fields
index|[
name|i
index|]
argument_list|,
name|fieldTypeInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|arrowVector
operator|.
name|isNull
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|hiveVector
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|readUnion
parameter_list|(
name|FieldVector
name|arrowVector
parameter_list|,
name|UnionColumnVector
name|hiveVector
parameter_list|,
name|UnionTypeInfo
name|typeInfo
parameter_list|)
block|{   }
block|}
end_class

end_unit

