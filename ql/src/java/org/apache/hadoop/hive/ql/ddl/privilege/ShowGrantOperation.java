begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|privilege
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthorizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
import|;
end_import

begin_comment
comment|/**  * Operation process of showing a grant.  */
end_comment

begin_class
specifier|public
class|class
name|ShowGrantOperation
extends|extends
name|DDLOperation
block|{
specifier|private
specifier|final
name|ShowGrantDesc
name|desc
decl_stmt|;
specifier|public
name|ShowGrantOperation
parameter_list|(
name|DDLOperationContext
name|context
parameter_list|,
name|ShowGrantDesc
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|desc
operator|=
name|desc
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|()
throws|throws
name|HiveException
block|{
name|HiveAuthorizer
name|authorizer
init|=
name|RoleUtils
operator|.
name|getSessionAuthorizer
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|HivePrivilegeInfo
argument_list|>
name|privInfos
init|=
name|authorizer
operator|.
name|showPrivileges
argument_list|(
name|RoleUtils
operator|.
name|getAuthorizationTranslator
argument_list|(
name|authorizer
argument_list|)
operator|.
name|getHivePrincipal
argument_list|(
name|desc
operator|.
name|getPrincipalDesc
argument_list|()
argument_list|)
argument_list|,
name|RoleUtils
operator|.
name|getAuthorizationTranslator
argument_list|(
name|authorizer
argument_list|)
operator|.
name|getHivePrivilegeObject
argument_list|(
name|desc
operator|.
name|getHiveObj
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|testMode
init|=
name|context
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|)
decl_stmt|;
name|DDLUtils
operator|.
name|writeToFile
argument_list|(
name|writeGrantInfo
argument_list|(
name|privInfos
argument_list|,
name|testMode
argument_list|)
argument_list|,
name|desc
operator|.
name|getResFile
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Error in show grant statement"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|String
name|writeGrantInfo
parameter_list|(
name|List
argument_list|<
name|HivePrivilegeInfo
argument_list|>
name|privileges
parameter_list|,
name|boolean
name|testMode
parameter_list|)
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|privileges
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
block|}
comment|//sort the list to get sorted (deterministic) output (for ease of testing)
name|Collections
operator|.
name|sort
argument_list|(
name|privileges
argument_list|,
operator|new
name|Comparator
argument_list|<
name|HivePrivilegeInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|HivePrivilegeInfo
name|o1
parameter_list|,
name|HivePrivilegeInfo
name|o2
parameter_list|)
block|{
name|int
name|compare
init|=
name|o1
operator|.
name|getObject
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getObject
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|compare
operator|==
literal|0
condition|)
block|{
name|compare
operator|=
name|o1
operator|.
name|getPrincipal
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compare
operator|==
literal|0
condition|)
block|{
name|compare
operator|=
name|o1
operator|.
name|getPrivilege
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|compare
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|HivePrivilegeInfo
name|privilege
range|:
name|privileges
control|)
block|{
name|HivePrincipal
name|principal
init|=
name|privilege
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|HivePrivilegeObject
name|resource
init|=
name|privilege
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|HivePrincipal
name|grantor
init|=
name|privilege
operator|.
name|getGrantorPrincipal
argument_list|()
decl_stmt|;
name|DDLUtils
operator|.
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|resource
operator|.
name|getDbname
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DDLUtils
operator|.
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|resource
operator|.
name|getObjectName
argument_list|()
argument_list|)
expr_stmt|;
name|DDLUtils
operator|.
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|resource
operator|.
name|getPartKeys
argument_list|()
argument_list|)
expr_stmt|;
name|DDLUtils
operator|.
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|resource
operator|.
name|getColumns
argument_list|()
argument_list|)
expr_stmt|;
name|DDLUtils
operator|.
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|DDLUtils
operator|.
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|principal
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|DDLUtils
operator|.
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|privilege
operator|.
name|getPrivilege
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|DDLUtils
operator|.
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|privilege
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
name|DDLUtils
operator|.
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|testMode
condition|?
operator|-
literal|1
else|:
name|privilege
operator|.
name|getGrantTime
argument_list|()
operator|*
literal|1000L
argument_list|)
expr_stmt|;
name|DDLUtils
operator|.
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|grantor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

