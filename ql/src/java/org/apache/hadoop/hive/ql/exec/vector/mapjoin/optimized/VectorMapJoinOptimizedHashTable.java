begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|optimized
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|BytesBytesMultiHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinTableContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinTableContainerDirectAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|ReusableGetAdaptorDirectAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinTableContainer
operator|.
name|ReusableGetAdaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinHashTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinHashTableResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/*  * Root interface for a vector map join hash table (which could be a hash map, hash multi-set, or  * hash set).  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|VectorMapJoinOptimizedHashTable
implements|implements
name|VectorMapJoinHashTable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VectorMapJoinOptimizedMultiKeyHashMap
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|MapJoinTableContainer
name|originalTableContainer
decl_stmt|;
specifier|protected
specifier|final
name|MapJoinTableContainerDirectAccess
name|containerDirectAccess
decl_stmt|;
specifier|protected
specifier|final
name|ReusableGetAdaptorDirectAccess
name|adapatorDirectAccess
decl_stmt|;
specifier|public
specifier|static
class|class
name|SerializedBytes
block|{
name|byte
index|[]
name|bytes
decl_stmt|;
name|int
name|offset
decl_stmt|;
name|int
name|length
decl_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|putRow
parameter_list|(
name|BytesWritable
name|currentKey
parameter_list|,
name|BytesWritable
name|currentValue
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|HiveException
throws|,
name|IOException
block|{
name|putRowInternal
argument_list|(
name|currentKey
argument_list|,
name|currentValue
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|putRowInternal
parameter_list|(
name|BytesWritable
name|key
parameter_list|,
name|BytesWritable
name|value
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|HiveException
throws|,
name|IOException
block|{
name|containerDirectAccess
operator|.
name|put
argument_list|(
operator|(
name|Writable
operator|)
name|key
argument_list|,
operator|(
name|Writable
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JoinUtil
operator|.
name|JoinResult
name|doLookup
parameter_list|(
name|byte
index|[]
name|keyBytes
parameter_list|,
name|int
name|keyOffset
parameter_list|,
name|int
name|keyLength
parameter_list|,
name|BytesBytesMultiHashMap
operator|.
name|Result
name|bytesBytesMultiHashMapResult
parameter_list|,
name|VectorMapJoinHashTableResult
name|hashTableResult
parameter_list|)
block|{
name|hashTableResult
operator|.
name|forget
argument_list|()
expr_stmt|;
name|JoinUtil
operator|.
name|JoinResult
name|joinResult
init|=
name|adapatorDirectAccess
operator|.
name|setDirect
argument_list|(
name|keyBytes
argument_list|,
name|keyOffset
argument_list|,
name|keyLength
argument_list|,
name|bytesBytesMultiHashMapResult
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinResult
operator|==
name|JoinUtil
operator|.
name|JoinResult
operator|.
name|SPILL
condition|)
block|{
name|hashTableResult
operator|.
name|setSpillPartitionId
argument_list|(
name|adapatorDirectAccess
operator|.
name|directSpillPartitionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hashTableResult
operator|.
name|setJoinResult
argument_list|(
name|joinResult
argument_list|)
expr_stmt|;
return|return
name|joinResult
return|;
block|}
specifier|public
name|VectorMapJoinOptimizedHashTable
parameter_list|(
name|MapJoinTableContainer
name|originalTableContainer
parameter_list|,
name|ReusableGetAdaptor
name|hashMapRowGetter
parameter_list|)
block|{
name|this
operator|.
name|originalTableContainer
operator|=
name|originalTableContainer
expr_stmt|;
name|containerDirectAccess
operator|=
operator|(
name|MapJoinTableContainerDirectAccess
operator|)
name|originalTableContainer
expr_stmt|;
name|adapatorDirectAccess
operator|=
operator|(
name|ReusableGetAdaptorDirectAccess
operator|)
name|hashMapRowGetter
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|originalTableContainer
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

