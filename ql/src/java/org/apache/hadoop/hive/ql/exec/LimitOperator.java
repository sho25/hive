begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LimitDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_comment
comment|/**  * Limit operator implementation Limits the number of rows to be passed on.  **/
end_comment

begin_class
specifier|public
class|class
name|LimitOperator
extends|extends
name|Operator
argument_list|<
name|LimitDesc
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
specifier|transient
name|int
name|limit
decl_stmt|;
specifier|protected
specifier|transient
name|int
name|offset
decl_stmt|;
specifier|protected
specifier|transient
name|int
name|leastRow
decl_stmt|;
specifier|protected
specifier|transient
name|int
name|currCount
decl_stmt|;
specifier|protected
specifier|transient
name|boolean
name|isMap
decl_stmt|;
comment|/** Kryo ctor. */
specifier|protected
name|LimitOperator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|LimitOperator
parameter_list|(
name|CompilationOpContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|initializeOp
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|limit
operator|=
name|conf
operator|.
name|getLimit
argument_list|()
expr_stmt|;
name|leastRow
operator|=
name|conf
operator|.
name|getLeastRows
argument_list|()
expr_stmt|;
name|offset
operator|=
operator|(
name|conf
operator|.
name|getOffset
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|conf
operator|.
name|getOffset
argument_list|()
expr_stmt|;
name|currCount
operator|=
literal|0
expr_stmt|;
name|isMap
operator|=
name|hconf
operator|.
name|getBoolean
argument_list|(
literal|"mapred.task.is.map"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|offset
operator|<=
name|currCount
operator|&&
name|currCount
operator|<
operator|(
name|offset
operator|+
name|limit
operator|)
condition|)
block|{
name|forward
argument_list|(
name|row
argument_list|,
name|inputObjInspectors
index|[
name|tag
index|]
argument_list|)
expr_stmt|;
name|currCount
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|offset
operator|>
name|currCount
condition|)
block|{
name|currCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|setDone
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|LimitOperator
operator|.
name|getOperatorName
argument_list|()
return|;
block|}
specifier|static
specifier|public
name|String
name|getOperatorName
parameter_list|()
block|{
return|return
literal|"LIM"
return|;
block|}
annotation|@
name|Override
specifier|public
name|OperatorType
name|getType
parameter_list|()
block|{
return|return
name|OperatorType
operator|.
name|LIMIT
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|closeOp
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|isMap
operator|&&
name|currCount
operator|<
name|leastRow
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"No sufficient row found"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

