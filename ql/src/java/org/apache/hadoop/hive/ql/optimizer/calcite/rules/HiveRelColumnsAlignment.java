begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|SetOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexOver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ReflectUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ReflectiveVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|jdbc
operator|.
name|HiveJdbcConverter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * This class infers the order in Aggregate columns and the order of conjuncts  * in a Join condition that might be more beneficial to avoid additional sort  * stages. The only visible change is that order of join conditions might change.  * Further, Aggregate operators might get annotated with order in which Aggregate  * columns should be generated when we transform the operator tree into AST or  * Hive operator tree.  */
end_comment

begin_class
specifier|public
class|class
name|HiveRelColumnsAlignment
implements|implements
name|ReflectiveVisitor
block|{
specifier|private
specifier|final
name|ReflectUtil
operator|.
name|MethodDispatcher
argument_list|<
name|RelNode
argument_list|>
name|alignDispatcher
decl_stmt|;
specifier|private
specifier|final
name|RelBuilder
name|relBuilder
decl_stmt|;
comment|/**    * Creates a HiveRelColumnsAlignment.    */
specifier|public
name|HiveRelColumnsAlignment
parameter_list|(
name|RelBuilder
name|relBuilder
parameter_list|)
block|{
name|this
operator|.
name|relBuilder
operator|=
name|relBuilder
expr_stmt|;
name|this
operator|.
name|alignDispatcher
operator|=
name|ReflectUtil
operator|.
name|createMethodDispatcher
argument_list|(
name|RelNode
operator|.
name|class
argument_list|,
name|this
argument_list|,
literal|"align"
argument_list|,
name|RelNode
operator|.
name|class
argument_list|,
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Execute the logic in this class. In particular, make a top-down traversal of the tree    * and annotate and recreate appropiate operators.    */
specifier|public
name|RelNode
name|align
parameter_list|(
name|RelNode
name|root
parameter_list|)
block|{
specifier|final
name|RelNode
name|newRoot
init|=
name|dispatchAlign
argument_list|(
name|root
argument_list|,
name|ImmutableList
operator|.
expr|<
name|RelFieldCollation
operator|>
name|of
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|newRoot
return|;
block|}
specifier|protected
specifier|final
name|RelNode
name|dispatchAlign
parameter_list|(
name|RelNode
name|node
parameter_list|,
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|collations
parameter_list|)
block|{
if|if
condition|(
name|node
operator|instanceof
name|HiveJdbcConverter
condition|)
block|{
return|return
name|node
return|;
block|}
return|return
name|alignDispatcher
operator|.
name|invoke
argument_list|(
name|node
argument_list|,
name|collations
argument_list|)
return|;
block|}
specifier|public
name|RelNode
name|align
parameter_list|(
name|Aggregate
name|rel
parameter_list|,
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|collations
parameter_list|)
block|{
comment|// 1) We extract the group by positions that are part of the collations and
comment|// sort them so they respect it
name|LinkedHashSet
argument_list|<
name|Integer
argument_list|>
name|aggregateColumnsOrder
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelFieldCollation
argument_list|>
name|propagateCollations
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|rel
operator|.
name|getGroupType
argument_list|()
operator|==
name|Group
operator|.
name|SIMPLE
operator|&&
operator|!
name|collations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|RelFieldCollation
name|c
range|:
name|collations
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getFieldIndex
argument_list|()
operator|<
name|rel
operator|.
name|getGroupCount
argument_list|()
condition|)
block|{
comment|// Group column found
if|if
condition|(
name|aggregateColumnsOrder
operator|.
name|add
argument_list|(
name|c
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
condition|)
block|{
name|propagateCollations
operator|.
name|add
argument_list|(
name|c
operator|.
name|copy
argument_list|(
name|rel
operator|.
name|getGroupSet
argument_list|()
operator|.
name|nth
argument_list|(
name|c
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rel
operator|.
name|getGroupCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|aggregateColumnsOrder
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
comment|// Not included in the input collations, but can be propagated as this Aggregate
comment|// will enforce it
name|propagateCollations
operator|.
name|add
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
name|rel
operator|.
name|getGroupSet
argument_list|()
operator|.
name|nth
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// 2) We propagate
specifier|final
name|RelNode
name|child
init|=
name|dispatchAlign
argument_list|(
name|rel
operator|.
name|getInput
argument_list|()
argument_list|,
name|propagateCollations
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
comment|// 3) We annotate the Aggregate operator with this info
specifier|final
name|HiveAggregate
name|newAggregate
init|=
operator|(
name|HiveAggregate
operator|)
name|rel
operator|.
name|copy
argument_list|(
name|rel
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|child
argument_list|)
argument_list|)
decl_stmt|;
name|newAggregate
operator|.
name|setAggregateColumnsOrder
argument_list|(
name|aggregateColumnsOrder
argument_list|)
expr_stmt|;
return|return
name|newAggregate
return|;
block|}
specifier|public
name|RelNode
name|align
parameter_list|(
name|Join
name|rel
parameter_list|,
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|collations
parameter_list|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelFieldCollation
argument_list|>
name|propagateCollationsLeft
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelFieldCollation
argument_list|>
name|propagateCollationsRight
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|int
name|nLeftColumns
init|=
name|rel
operator|.
name|getLeft
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|RexNode
argument_list|>
name|idxToConjuncts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|refToRef
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// 1) We extract the conditions that can be useful
name|List
argument_list|<
name|RexNode
argument_list|>
name|conjuncts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|otherConjuncts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|conj
range|:
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|rel
operator|.
name|getCondition
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|conj
operator|.
name|getKind
argument_list|()
operator|!=
name|SqlKind
operator|.
name|EQUALS
condition|)
block|{
name|otherConjuncts
operator|.
name|add
argument_list|(
name|conj
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// TODO: Currently we only support EQUAL operator on two references.
comment|// We might extend the logic to support other (order-preserving)
comment|// UDFs here.
name|RexCall
name|equals
init|=
operator|(
name|RexCall
operator|)
name|conj
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|equals
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|RexInputRef
operator|)
operator|||
operator|!
operator|(
name|equals
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|RexInputRef
operator|)
condition|)
block|{
name|otherConjuncts
operator|.
name|add
argument_list|(
name|conj
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|RexInputRef
name|ref0
init|=
operator|(
name|RexInputRef
operator|)
name|equals
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RexInputRef
name|ref1
init|=
operator|(
name|RexInputRef
operator|)
name|equals
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|ref0
operator|.
name|getIndex
argument_list|()
operator|<
name|nLeftColumns
operator|&&
name|ref1
operator|.
name|getIndex
argument_list|()
operator|>=
name|nLeftColumns
operator|)
operator|||
operator|(
name|ref1
operator|.
name|getIndex
argument_list|()
operator|<
name|nLeftColumns
operator|&&
name|ref0
operator|.
name|getIndex
argument_list|()
operator|>=
name|nLeftColumns
operator|)
condition|)
block|{
comment|// We made sure the references are for different join inputs
name|idxToConjuncts
operator|.
name|put
argument_list|(
name|ref0
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equals
argument_list|)
expr_stmt|;
name|idxToConjuncts
operator|.
name|put
argument_list|(
name|ref1
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equals
argument_list|)
expr_stmt|;
name|refToRef
operator|.
name|put
argument_list|(
name|ref0
operator|.
name|getIndex
argument_list|()
argument_list|,
name|ref1
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|refToRef
operator|.
name|put
argument_list|(
name|ref1
operator|.
name|getIndex
argument_list|()
argument_list|,
name|ref0
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|otherConjuncts
operator|.
name|add
argument_list|(
name|conj
argument_list|)
expr_stmt|;
block|}
block|}
comment|// 2) We extract the collation for this operator and the collations
comment|// that we will propagate to the inputs of the join
for|for
control|(
name|RelFieldCollation
name|c
range|:
name|collations
control|)
block|{
name|RexNode
name|equals
init|=
name|idxToConjuncts
operator|.
name|get
argument_list|(
name|c
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|equals
operator|!=
literal|null
condition|)
block|{
name|conjuncts
operator|.
name|add
argument_list|(
name|equals
argument_list|)
expr_stmt|;
name|idxToConjuncts
operator|.
name|remove
argument_list|(
name|c
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
expr_stmt|;
name|idxToConjuncts
operator|.
name|remove
argument_list|(
name|refToRef
operator|.
name|get
argument_list|(
name|c
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getFieldIndex
argument_list|()
operator|<
name|nLeftColumns
condition|)
block|{
name|propagateCollationsLeft
operator|.
name|add
argument_list|(
name|c
operator|.
name|copy
argument_list|(
name|c
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|propagateCollationsRight
operator|.
name|add
argument_list|(
name|c
operator|.
name|copy
argument_list|(
name|refToRef
operator|.
name|get
argument_list|(
name|c
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
operator|-
name|nLeftColumns
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|propagateCollationsLeft
operator|.
name|add
argument_list|(
name|c
operator|.
name|copy
argument_list|(
name|refToRef
operator|.
name|get
argument_list|(
name|c
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|propagateCollationsRight
operator|.
name|add
argument_list|(
name|c
operator|.
name|copy
argument_list|(
name|c
operator|.
name|getFieldIndex
argument_list|()
operator|-
name|nLeftColumns
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|Set
argument_list|<
name|RexNode
argument_list|>
name|visited
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|RexNode
argument_list|>
name|e
range|:
name|idxToConjuncts
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|visited
operator|.
name|add
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
comment|// Not included in the input collations, but can be propagated as this Join
comment|// might enforce it
name|conjuncts
operator|.
name|add
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|<
name|nLeftColumns
condition|)
block|{
name|propagateCollationsLeft
operator|.
name|add
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|propagateCollationsRight
operator|.
name|add
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
name|refToRef
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|-
name|nLeftColumns
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|propagateCollationsLeft
operator|.
name|add
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
name|refToRef
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|propagateCollationsRight
operator|.
name|add
argument_list|(
operator|new
name|RelFieldCollation
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|-
name|nLeftColumns
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|conjuncts
operator|.
name|addAll
argument_list|(
name|otherConjuncts
argument_list|)
expr_stmt|;
comment|// 3) We propagate
specifier|final
name|RelNode
name|newLeftInput
init|=
name|dispatchAlign
argument_list|(
name|rel
operator|.
name|getLeft
argument_list|()
argument_list|,
name|propagateCollationsLeft
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|newRightInput
init|=
name|dispatchAlign
argument_list|(
name|rel
operator|.
name|getRight
argument_list|()
argument_list|,
name|propagateCollationsRight
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
comment|// 4) We change the Join operator to reflect this info
specifier|final
name|RelNode
name|newJoin
init|=
name|rel
operator|.
name|copy
argument_list|(
name|rel
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|relBuilder
operator|.
name|getRexBuilder
argument_list|()
argument_list|,
name|conjuncts
argument_list|,
literal|false
argument_list|)
argument_list|,
name|newLeftInput
argument_list|,
name|newRightInput
argument_list|,
name|rel
operator|.
name|getJoinType
argument_list|()
argument_list|,
name|rel
operator|.
name|isSemiJoinDone
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|newJoin
return|;
block|}
specifier|public
name|RelNode
name|align
parameter_list|(
name|SetOp
name|rel
parameter_list|,
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|collations
parameter_list|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelNode
argument_list|>
name|newInputs
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|rel
operator|.
name|getInputs
argument_list|()
control|)
block|{
name|newInputs
operator|.
name|add
argument_list|(
name|dispatchAlign
argument_list|(
name|input
argument_list|,
name|collations
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rel
operator|.
name|copy
argument_list|(
name|rel
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|newInputs
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|RelNode
name|align
parameter_list|(
name|Project
name|rel
parameter_list|,
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|collations
parameter_list|)
block|{
comment|// 1) We extract the collations indices
name|boolean
name|containsWindowing
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RexNode
name|childExp
range|:
name|rel
operator|.
name|getChildExps
argument_list|()
control|)
block|{
if|if
condition|(
name|childExp
operator|instanceof
name|RexOver
condition|)
block|{
comment|// TODO: support propagation for partitioning/ordering in windowing
name|containsWindowing
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelFieldCollation
argument_list|>
name|propagateCollations
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|containsWindowing
condition|)
block|{
for|for
control|(
name|RelFieldCollation
name|c
range|:
name|collations
control|)
block|{
name|RexNode
name|rexNode
init|=
name|rel
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rexNode
operator|instanceof
name|RexInputRef
condition|)
block|{
name|int
name|newIdx
init|=
operator|(
operator|(
name|RexInputRef
operator|)
name|rexNode
operator|)
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|propagateCollations
operator|.
name|add
argument_list|(
name|c
operator|.
name|copy
argument_list|(
operator|(
name|newIdx
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// 2) We propagate
specifier|final
name|RelNode
name|child
init|=
name|dispatchAlign
argument_list|(
name|rel
operator|.
name|getInput
argument_list|()
argument_list|,
name|propagateCollations
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
comment|// 3) Return new Project
return|return
name|rel
operator|.
name|copy
argument_list|(
name|rel
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|child
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|RelNode
name|align
parameter_list|(
name|Filter
name|rel
parameter_list|,
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|collations
parameter_list|)
block|{
specifier|final
name|RelNode
name|child
init|=
name|dispatchAlign
argument_list|(
name|rel
operator|.
name|getInput
argument_list|()
argument_list|,
name|collations
argument_list|)
decl_stmt|;
return|return
name|rel
operator|.
name|copy
argument_list|(
name|rel
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|child
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|RelNode
name|align
parameter_list|(
name|Sort
name|rel
parameter_list|,
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|collations
parameter_list|)
block|{
specifier|final
name|RelNode
name|child
init|=
name|dispatchAlign
argument_list|(
name|rel
operator|.
name|getInput
argument_list|()
argument_list|,
name|rel
operator|.
name|collation
operator|.
name|getFieldCollations
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|rel
operator|.
name|copy
argument_list|(
name|rel
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|child
argument_list|)
argument_list|)
return|;
block|}
comment|// Catch-all rule when none of the others apply.
specifier|public
name|RelNode
name|align
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|List
argument_list|<
name|RelFieldCollation
argument_list|>
name|collations
parameter_list|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelNode
argument_list|>
name|newInputs
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|rel
operator|.
name|getInputs
argument_list|()
control|)
block|{
name|newInputs
operator|.
name|add
argument_list|(
name|dispatchAlign
argument_list|(
name|input
argument_list|,
name|ImmutableList
operator|.
expr|<
name|RelFieldCollation
operator|>
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rel
operator|.
name|copy
argument_list|(
name|rel
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|newInputs
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

