begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|listbucketingpruner
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FilterOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|PrunerOperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|pcr
operator|.
name|PcrOpProcFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|ppr
operator|.
name|PartitionPruner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PrunedPartitionList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_comment
comment|/**  * Walk through top operators in tree to find all partitions.  *  * It should be done already in by {@link PcrOpProcFactory}  *  */
end_comment

begin_class
specifier|public
class|class
name|LBPartitionProcFactory
extends|extends
name|PrunerOperatorFactory
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ListBucketingPruner
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Retrieve partitions for the filter. This is called only when    * the filter follows a table scan operator.    */
specifier|public
specifier|static
class|class
name|LBPRPartitionFilterPruner
extends|extends
name|FilterPruner
block|{
annotation|@
name|Override
specifier|protected
name|void
name|generatePredicate
parameter_list|(
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|FilterOperator
name|fop
parameter_list|,
name|TableScanOperator
name|top
parameter_list|)
throws|throws
name|SemanticException
throws|,
name|UDFArgumentException
block|{
name|LBOpPartitionWalkerCtx
name|owc
init|=
operator|(
name|LBOpPartitionWalkerCtx
operator|)
name|procCtx
decl_stmt|;
comment|//Run partition pruner to get partitions
name|ParseContext
name|parseCtx
init|=
name|owc
operator|.
name|getParseContext
argument_list|()
decl_stmt|;
name|PrunedPartitionList
name|prunedPartList
init|=
name|parseCtx
operator|.
name|getOpToPartList
argument_list|()
operator|.
name|get
argument_list|(
name|top
argument_list|)
decl_stmt|;
if|if
condition|(
name|prunedPartList
operator|==
literal|null
condition|)
block|{
comment|// We never pruned the partition. Try to prune it.
name|ExprNodeDesc
name|ppr_pred
init|=
name|parseCtx
operator|.
name|getOpToPartPruner
argument_list|()
operator|.
name|get
argument_list|(
name|top
argument_list|)
decl_stmt|;
if|if
condition|(
name|ppr_pred
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|prunedPartList
operator|=
name|PartitionPruner
operator|.
name|prune
argument_list|(
name|parseCtx
operator|.
name|getTopToTable
argument_list|()
operator|.
name|get
argument_list|(
name|top
argument_list|)
argument_list|,
name|ppr_pred
argument_list|,
name|parseCtx
operator|.
name|getConf
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|parseCtx
operator|.
name|getTopOps
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|parseCtx
operator|.
name|getPrunedPartitions
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|prunedPartList
operator|!=
literal|null
condition|)
block|{
name|owc
operator|.
name|getParseContext
argument_list|()
operator|.
name|getOpToPartList
argument_list|()
operator|.
name|put
argument_list|(
name|top
argument_list|,
name|prunedPartList
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
comment|// Has to use full name to make sure it does not conflict with
comment|// org.apache.commons.lang.StringUtils
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|prunedPartList
operator|!=
literal|null
condition|)
block|{
name|owc
operator|.
name|setPartitions
argument_list|(
name|prunedPartList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getFilterProc
parameter_list|()
block|{
return|return
operator|new
name|LBPRPartitionFilterPruner
argument_list|()
return|;
block|}
specifier|private
name|LBPartitionProcFactory
parameter_list|()
block|{
comment|// prevent instantiation
block|}
block|}
end_class

end_unit

