begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
operator|.
name|DATE_GROUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
operator|.
name|NUMERIC_GROUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
operator|.
name|STRING_GROUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
operator|.
name|VOID_GROUP
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|DateTimeMath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ConstantObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_comment
comment|/**  * GenericUDFAddMonths.  *  * Add a number of months to the date. The time part of the string will be  * ignored.  *  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"add_months"
argument_list|,
name|value
operator|=
literal|"_FUNC_(start_date, num_months, output_date_format) - "
operator|+
literal|"Returns the date that is num_months after start_date."
argument_list|,
name|extended
operator|=
literal|"start_date is a string or timestamp indicating a valid date. "
operator|+
literal|"num_months is a number. output_date_format is an optional String which specifies the format for output.\n"
operator|+
literal|"The default output format is 'YYYY-MM-dd'.\n"
operator|+
literal|"Example:\n> SELECT _FUNC_('2009-08-31', 1) FROM src LIMIT 1;\n"
operator|+
literal|" '2009-09-30'."
operator|+
literal|"\n> SELECT _FUNC_('2017-12-31 14:15:16', 2, 'YYYY-MM-dd HH:mm:ss') LIMIT 1;\n"
operator|+
literal|"'2018-02-28 14:15:16'.\n"
argument_list|)
annotation|@
name|NDV
argument_list|(
name|maxNdv
operator|=
literal|250
argument_list|)
comment|// 250 seems to be reasonable upper limit for this
specifier|public
class|class
name|GenericUDFAddMonths
extends|extends
name|GenericUDF
block|{
specifier|private
specifier|transient
name|Converter
index|[]
name|tsConverters
init|=
operator|new
name|Converter
index|[
literal|3
index|]
decl_stmt|;
specifier|private
specifier|transient
name|PrimitiveCategory
index|[]
name|tsInputTypes
init|=
operator|new
name|PrimitiveCategory
index|[
literal|3
index|]
decl_stmt|;
specifier|private
specifier|transient
name|Converter
index|[]
name|dtConverters
init|=
operator|new
name|Converter
index|[
literal|3
index|]
decl_stmt|;
specifier|private
specifier|transient
name|PrimitiveCategory
index|[]
name|dtInputTypes
init|=
operator|new
name|PrimitiveCategory
index|[
literal|3
index|]
decl_stmt|;
specifier|private
specifier|final
name|Text
name|output
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
specifier|private
specifier|transient
name|SimpleDateFormat
name|formatter
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|Calendar
name|calendar
init|=
name|DateTimeMath
operator|.
name|getProlepticGregorianCalendarUTC
argument_list|()
decl_stmt|;
specifier|private
specifier|transient
name|Integer
name|numMonthsConst
decl_stmt|;
specifier|private
specifier|transient
name|boolean
name|isNumMonthsConst
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|checkArgsSize
argument_list|(
name|arguments
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkArgPrimitive
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkArgPrimitive
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|arguments
operator|.
name|length
operator|==
literal|3
condition|)
block|{
if|if
condition|(
name|arguments
index|[
literal|2
index|]
operator|instanceof
name|ConstantObjectInspector
condition|)
block|{
name|checkArgPrimitive
argument_list|(
name|arguments
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkArgGroups
argument_list|(
name|arguments
argument_list|,
literal|2
argument_list|,
name|tsInputTypes
argument_list|,
name|STRING_GROUP
argument_list|)
expr_stmt|;
name|String
name|fmtStr
init|=
name|getConstantStringValue
argument_list|(
name|arguments
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|fmtStr
operator|!=
literal|null
condition|)
block|{
name|formatter
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
name|fmtStr
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setCalendar
argument_list|(
name|calendar
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|2
argument_list|,
name|getFuncName
argument_list|()
operator|+
literal|" only takes constant as "
operator|+
name|getArgOrder
argument_list|(
literal|2
argument_list|)
operator|+
literal|" argument"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|formatter
operator|==
literal|null
condition|)
block|{
comment|//If the DateFormat is not provided by the user or is invalid, use the default format YYYY-MM-dd
name|formatter
operator|=
name|DateUtils
operator|.
name|getDateFormat
argument_list|()
expr_stmt|;
name|formatter
operator|.
name|setCalendar
argument_list|(
name|calendar
argument_list|)
expr_stmt|;
block|}
comment|// the function should support both short date and full timestamp format
comment|// time part of the timestamp should not be skipped
name|checkArgGroups
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|,
name|tsInputTypes
argument_list|,
name|STRING_GROUP
argument_list|,
name|DATE_GROUP
argument_list|,
name|VOID_GROUP
argument_list|)
expr_stmt|;
name|checkArgGroups
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|,
name|dtInputTypes
argument_list|,
name|STRING_GROUP
argument_list|,
name|DATE_GROUP
argument_list|,
name|VOID_GROUP
argument_list|)
expr_stmt|;
name|obtainTimestampConverter
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|,
name|tsInputTypes
argument_list|,
name|tsConverters
argument_list|)
expr_stmt|;
name|obtainDateConverter
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|,
name|dtInputTypes
argument_list|,
name|dtConverters
argument_list|)
expr_stmt|;
name|checkArgGroups
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|,
name|tsInputTypes
argument_list|,
name|NUMERIC_GROUP
argument_list|,
name|VOID_GROUP
argument_list|)
expr_stmt|;
name|obtainIntConverter
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|,
name|tsInputTypes
argument_list|,
name|tsConverters
argument_list|)
expr_stmt|;
if|if
condition|(
name|arguments
index|[
literal|1
index|]
operator|instanceof
name|ConstantObjectInspector
condition|)
block|{
name|numMonthsConst
operator|=
name|getConstantIntValue
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|isNumMonthsConst
operator|=
literal|true
expr_stmt|;
block|}
name|ObjectInspector
name|outputOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
return|return
name|outputOI
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
name|Integer
name|numMonthV
decl_stmt|;
if|if
condition|(
name|isNumMonthsConst
condition|)
block|{
name|numMonthV
operator|=
name|numMonthsConst
expr_stmt|;
block|}
else|else
block|{
name|numMonthV
operator|=
name|getIntValue
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|,
name|tsConverters
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numMonthV
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|numMonthInt
init|=
name|numMonthV
operator|.
name|intValue
argument_list|()
decl_stmt|;
comment|// the function should support both short date and full timestamp format
comment|// time part of the timestamp should not be skipped
name|Timestamp
name|ts
init|=
name|getTimestampValue
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|,
name|tsConverters
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts
operator|!=
literal|null
condition|)
block|{
name|addMonth
argument_list|(
name|ts
argument_list|,
name|numMonthInt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Date
name|date
init|=
name|getDateValue
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|,
name|dtInputTypes
argument_list|,
name|dtConverters
argument_list|)
decl_stmt|;
if|if
condition|(
name|date
operator|!=
literal|null
condition|)
block|{
name|addMonth
argument_list|(
name|date
argument_list|,
name|numMonthInt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
name|String
name|res
init|=
name|formatter
operator|.
name|format
argument_list|(
name|calendar
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|output
operator|.
name|set
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
return|return
name|getStandardDisplayString
argument_list|(
name|getFuncName
argument_list|()
argument_list|,
name|children
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getFuncName
parameter_list|()
block|{
return|return
literal|"add_months"
return|;
block|}
specifier|private
name|Calendar
name|addMonth
parameter_list|(
name|Date
name|d
parameter_list|,
name|int
name|numMonths
parameter_list|)
block|{
name|calendar
operator|.
name|setTimeInMillis
argument_list|(
name|d
operator|.
name|toEpochMilli
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|addMonth
argument_list|(
name|numMonths
argument_list|)
return|;
block|}
specifier|private
name|Calendar
name|addMonth
parameter_list|(
name|Timestamp
name|ts
parameter_list|,
name|int
name|numMonths
parameter_list|)
block|{
name|calendar
operator|.
name|setTimeInMillis
argument_list|(
name|ts
operator|.
name|toEpochMilli
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|addMonth
argument_list|(
name|numMonths
argument_list|)
return|;
block|}
specifier|private
name|Calendar
name|addMonth
parameter_list|(
name|int
name|numMonths
parameter_list|)
block|{
name|boolean
name|lastDatOfMonth
init|=
name|isLastDayOfMonth
argument_list|(
name|calendar
argument_list|)
decl_stmt|;
name|calendar
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|,
name|numMonths
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastDatOfMonth
condition|)
block|{
name|int
name|maxDd
init|=
name|calendar
operator|.
name|getActualMaximum
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
decl_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
name|maxDd
argument_list|)
expr_stmt|;
block|}
return|return
name|calendar
return|;
block|}
specifier|private
name|boolean
name|isLastDayOfMonth
parameter_list|(
name|Calendar
name|cal
parameter_list|)
block|{
name|int
name|maxDd
init|=
name|cal
operator|.
name|getActualMaximum
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
decl_stmt|;
name|int
name|dd
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
decl_stmt|;
return|return
name|dd
operator|==
name|maxDd
return|;
block|}
block|}
end_class

end_unit

