begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|unionproc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UnionOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_comment
comment|/**  * UnionProcContext.  *  */
end_comment

begin_class
specifier|public
class|class
name|UnionProcContext
implements|implements
name|NodeProcessorCtx
block|{
comment|/**    * UnionParseContext.    *    */
specifier|public
specifier|static
class|class
name|UnionParseContext
block|{
specifier|private
specifier|final
specifier|transient
name|boolean
index|[]
name|mapOnlySubq
decl_stmt|;
specifier|private
specifier|final
specifier|transient
name|boolean
index|[]
name|mapOnlySubqSet
decl_stmt|;
specifier|private
specifier|final
specifier|transient
name|boolean
index|[]
name|rootTask
decl_stmt|;
specifier|private
specifier|transient
name|int
name|numInputs
decl_stmt|;
specifier|public
name|UnionParseContext
parameter_list|(
name|int
name|numInputs
parameter_list|)
block|{
name|this
operator|.
name|numInputs
operator|=
name|numInputs
expr_stmt|;
name|mapOnlySubq
operator|=
operator|new
name|boolean
index|[
name|numInputs
index|]
expr_stmt|;
name|rootTask
operator|=
operator|new
name|boolean
index|[
name|numInputs
index|]
expr_stmt|;
name|mapOnlySubqSet
operator|=
operator|new
name|boolean
index|[
name|numInputs
index|]
expr_stmt|;
block|}
specifier|public
name|boolean
name|getMapOnlySubq
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
name|mapOnlySubq
index|[
name|pos
index|]
return|;
block|}
specifier|public
name|void
name|setMapOnlySubq
parameter_list|(
name|int
name|pos
parameter_list|,
name|boolean
name|mapOnlySubq
parameter_list|)
block|{
name|this
operator|.
name|mapOnlySubq
index|[
name|pos
index|]
operator|=
name|mapOnlySubq
expr_stmt|;
name|this
operator|.
name|mapOnlySubqSet
index|[
name|pos
index|]
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|getRootTask
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
name|rootTask
index|[
name|pos
index|]
return|;
block|}
specifier|public
name|void
name|setRootTask
parameter_list|(
name|int
name|pos
parameter_list|,
name|boolean
name|rootTask
parameter_list|)
block|{
name|this
operator|.
name|rootTask
index|[
name|pos
index|]
operator|=
name|rootTask
expr_stmt|;
block|}
specifier|public
name|int
name|getNumInputs
parameter_list|()
block|{
return|return
name|numInputs
return|;
block|}
specifier|public
name|void
name|setNumInputs
parameter_list|(
name|int
name|numInputs
parameter_list|)
block|{
name|this
operator|.
name|numInputs
operator|=
name|numInputs
expr_stmt|;
block|}
specifier|public
name|boolean
name|allMapOnlySubQ
parameter_list|()
block|{
if|if
condition|(
name|mapOnlySubq
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|boolean
name|mapOnly
range|:
name|mapOnlySubq
control|)
block|{
if|if
condition|(
operator|!
name|mapOnly
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|allMapOnlySubQSet
parameter_list|()
block|{
if|if
condition|(
name|mapOnlySubqSet
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|boolean
name|mapOnlySet
range|:
name|mapOnlySubqSet
control|)
block|{
if|if
condition|(
operator|!
name|mapOnlySet
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
comment|// the subqueries are map-only jobs
specifier|private
name|boolean
name|mapOnlySubq
decl_stmt|;
comment|// ParseContext
specifier|private
name|ParseContext
name|parseContext
decl_stmt|;
comment|/**    * @return the mapOnlySubq    */
specifier|public
name|boolean
name|isMapOnlySubq
parameter_list|()
block|{
return|return
name|mapOnlySubq
return|;
block|}
comment|/**    * @param mapOnlySubq    *          the mapOnlySubq to set    */
specifier|public
name|void
name|setMapOnlySubq
parameter_list|(
name|boolean
name|mapOnlySubq
parameter_list|)
block|{
name|this
operator|.
name|mapOnlySubq
operator|=
name|mapOnlySubq
expr_stmt|;
block|}
specifier|private
specifier|final
name|Map
argument_list|<
name|UnionOperator
argument_list|,
name|UnionParseContext
argument_list|>
name|uCtxMap
decl_stmt|;
specifier|public
name|UnionProcContext
parameter_list|()
block|{
name|uCtxMap
operator|=
operator|new
name|HashMap
argument_list|<
name|UnionOperator
argument_list|,
name|UnionParseContext
argument_list|>
argument_list|()
expr_stmt|;
name|mapOnlySubq
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|setUnionParseContext
parameter_list|(
name|UnionOperator
name|u
parameter_list|,
name|UnionParseContext
name|uCtx
parameter_list|)
block|{
name|uCtxMap
operator|.
name|put
argument_list|(
name|u
argument_list|,
name|uCtx
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UnionParseContext
name|getUnionParseContext
parameter_list|(
name|UnionOperator
name|u
parameter_list|)
block|{
return|return
name|uCtxMap
operator|.
name|get
argument_list|(
name|u
argument_list|)
return|;
block|}
specifier|public
name|ParseContext
name|getParseContext
parameter_list|()
block|{
return|return
name|parseContext
return|;
block|}
specifier|public
name|void
name|setParseContext
parameter_list|(
name|ParseContext
name|parseContext
parameter_list|)
block|{
name|this
operator|.
name|parseContext
operator|=
name|parseContext
expr_stmt|;
block|}
block|}
end_class

end_unit

