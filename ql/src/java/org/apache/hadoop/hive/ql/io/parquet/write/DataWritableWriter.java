begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|write
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|serde
operator|.
name|ParquetHiveSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|timestamp
operator|.
name|NanoTimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ParquetHiveRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|BinaryObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|BooleanObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|ByteObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|DateObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|DoubleObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|FloatObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|HiveCharObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|HiveDecimalObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|HiveVarcharObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|IntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LongObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|ShortObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|StringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|TimestampObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|RecordConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|GroupType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|OriginalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  *  * DataWritableWriter sends a record to the Parquet API with the expected schema in order  * to be written to a file.  * This class is only used through DataWritableWriteSupport class.  */
end_comment

begin_class
specifier|public
class|class
name|DataWritableWriter
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DataWritableWriter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|RecordConsumer
name|recordConsumer
decl_stmt|;
specifier|private
specifier|final
name|GroupType
name|schema
decl_stmt|;
comment|/* This writer will be created when writing the first row in order to get   information about how to inspect the record data.  */
specifier|private
name|DataWriter
name|messageWriter
decl_stmt|;
specifier|public
name|DataWritableWriter
parameter_list|(
specifier|final
name|RecordConsumer
name|recordConsumer
parameter_list|,
specifier|final
name|GroupType
name|schema
parameter_list|)
block|{
name|this
operator|.
name|recordConsumer
operator|=
name|recordConsumer
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
block|}
comment|/**    * It writes a record to Parquet.    * @param record Contains the record that is going to be written.    */
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|ParquetHiveRecord
name|record
parameter_list|)
block|{
if|if
condition|(
name|record
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|messageWriter
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|messageWriter
operator|=
name|createMessageWriter
argument_list|(
name|record
operator|.
name|getObjectInspector
argument_list|()
argument_list|,
name|schema
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|String
name|errorMessage
init|=
literal|"Parquet record is malformed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|errorMessage
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|messageWriter
operator|.
name|write
argument_list|(
name|record
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|MessageDataWriter
name|createMessageWriter
parameter_list|(
name|StructObjectInspector
name|inspector
parameter_list|,
name|GroupType
name|schema
parameter_list|)
block|{
return|return
operator|new
name|MessageDataWriter
argument_list|(
name|inspector
argument_list|,
name|schema
argument_list|)
return|;
block|}
comment|/**    * Creates a writer for the specific object inspector. The returned writer will be used    * to call Parquet API for the specific data type.    * @param inspector The object inspector used to get the correct value type.    * @param type Type that contains information about the type schema.    * @return A ParquetWriter object used to call the Parquet API fo the specific data type.    */
specifier|private
name|DataWriter
name|createWriter
parameter_list|(
name|ObjectInspector
name|inspector
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|checkInspectorCategory
argument_list|(
name|inspector
argument_list|,
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
argument_list|)
expr_stmt|;
name|PrimitiveObjectInspector
name|primitiveInspector
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|inspector
decl_stmt|;
switch|switch
condition|(
name|primitiveInspector
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
operator|new
name|BooleanDataWriter
argument_list|(
operator|(
name|BooleanObjectInspector
operator|)
name|inspector
argument_list|)
return|;
case|case
name|BYTE
case|:
return|return
operator|new
name|ByteDataWriter
argument_list|(
operator|(
name|ByteObjectInspector
operator|)
name|inspector
argument_list|)
return|;
case|case
name|SHORT
case|:
return|return
operator|new
name|ShortDataWriter
argument_list|(
operator|(
name|ShortObjectInspector
operator|)
name|inspector
argument_list|)
return|;
case|case
name|INT
case|:
return|return
operator|new
name|IntDataWriter
argument_list|(
operator|(
name|IntObjectInspector
operator|)
name|inspector
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
operator|new
name|LongDataWriter
argument_list|(
operator|(
name|LongObjectInspector
operator|)
name|inspector
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
operator|new
name|FloatDataWriter
argument_list|(
operator|(
name|FloatObjectInspector
operator|)
name|inspector
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|new
name|DoubleDataWriter
argument_list|(
operator|(
name|DoubleObjectInspector
operator|)
name|inspector
argument_list|)
return|;
case|case
name|STRING
case|:
return|return
operator|new
name|StringDataWriter
argument_list|(
operator|(
name|StringObjectInspector
operator|)
name|inspector
argument_list|)
return|;
case|case
name|CHAR
case|:
return|return
operator|new
name|CharDataWriter
argument_list|(
operator|(
name|HiveCharObjectInspector
operator|)
name|inspector
argument_list|)
return|;
case|case
name|VARCHAR
case|:
return|return
operator|new
name|VarcharDataWriter
argument_list|(
operator|(
name|HiveVarcharObjectInspector
operator|)
name|inspector
argument_list|)
return|;
case|case
name|BINARY
case|:
return|return
operator|new
name|BinaryDataWriter
argument_list|(
operator|(
name|BinaryObjectInspector
operator|)
name|inspector
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|TimestampDataWriter
argument_list|(
operator|(
name|TimestampObjectInspector
operator|)
name|inspector
argument_list|)
return|;
case|case
name|DECIMAL
case|:
return|return
operator|new
name|DecimalDataWriter
argument_list|(
operator|(
name|HiveDecimalObjectInspector
operator|)
name|inspector
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
operator|new
name|DateDataWriter
argument_list|(
operator|(
name|DateObjectInspector
operator|)
name|inspector
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported primitive data type: "
operator|+
name|primitiveInspector
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|GroupType
name|groupType
init|=
name|type
operator|.
name|asGroupType
argument_list|()
decl_stmt|;
name|OriginalType
name|originalType
init|=
name|type
operator|.
name|getOriginalType
argument_list|()
decl_stmt|;
if|if
condition|(
name|originalType
operator|!=
literal|null
operator|&&
name|originalType
operator|.
name|equals
argument_list|(
name|OriginalType
operator|.
name|LIST
argument_list|)
condition|)
block|{
name|checkInspectorCategory
argument_list|(
name|inspector
argument_list|,
name|ObjectInspector
operator|.
name|Category
operator|.
name|LIST
argument_list|)
expr_stmt|;
return|return
operator|new
name|ListDataWriter
argument_list|(
operator|(
name|ListObjectInspector
operator|)
name|inspector
argument_list|,
name|groupType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|originalType
operator|!=
literal|null
operator|&&
name|originalType
operator|.
name|equals
argument_list|(
name|OriginalType
operator|.
name|MAP
argument_list|)
condition|)
block|{
name|checkInspectorCategory
argument_list|(
name|inspector
argument_list|,
name|ObjectInspector
operator|.
name|Category
operator|.
name|MAP
argument_list|)
expr_stmt|;
return|return
operator|new
name|MapDataWriter
argument_list|(
operator|(
name|MapObjectInspector
operator|)
name|inspector
argument_list|,
name|groupType
argument_list|)
return|;
block|}
else|else
block|{
name|checkInspectorCategory
argument_list|(
name|inspector
argument_list|,
name|ObjectInspector
operator|.
name|Category
operator|.
name|STRUCT
argument_list|)
expr_stmt|;
return|return
operator|new
name|StructDataWriter
argument_list|(
operator|(
name|StructObjectInspector
operator|)
name|inspector
argument_list|,
name|groupType
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * Checks that an inspector matches the category indicated as a parameter.    * @param inspector The object inspector to check    * @param category The category to match    * @throws IllegalArgumentException if inspector does not match the category    */
specifier|private
name|void
name|checkInspectorCategory
parameter_list|(
name|ObjectInspector
name|inspector
parameter_list|,
name|ObjectInspector
operator|.
name|Category
name|category
parameter_list|)
block|{
if|if
condition|(
operator|!
name|inspector
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|category
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid data type: expected "
operator|+
name|category
operator|+
literal|" type, but found: "
operator|+
name|inspector
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
interface|interface
name|DataWriter
block|{
name|void
name|write
parameter_list|(
name|Object
name|value
parameter_list|)
function_decl|;
block|}
specifier|private
class|class
name|GroupDataWriter
implements|implements
name|DataWriter
block|{
specifier|private
name|StructObjectInspector
name|inspector
decl_stmt|;
specifier|private
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|structFields
decl_stmt|;
specifier|private
name|DataWriter
index|[]
name|structWriters
decl_stmt|;
specifier|public
name|GroupDataWriter
parameter_list|(
name|StructObjectInspector
name|inspector
parameter_list|,
name|GroupType
name|groupType
parameter_list|)
block|{
name|this
operator|.
name|inspector
operator|=
name|inspector
expr_stmt|;
name|structFields
operator|=
name|this
operator|.
name|inspector
operator|.
name|getAllStructFieldRefs
argument_list|()
expr_stmt|;
name|structWriters
operator|=
operator|new
name|DataWriter
index|[
name|structFields
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|structFields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|StructField
name|field
init|=
name|structFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|structWriters
index|[
name|i
index|]
operator|=
name|createWriter
argument_list|(
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|,
name|groupType
operator|.
name|getType
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|structFields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|StructField
name|field
init|=
name|structFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|fieldValue
init|=
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|value
argument_list|,
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldValue
operator|!=
literal|null
condition|)
block|{
name|String
name|fieldName
init|=
name|field
operator|.
name|getFieldName
argument_list|()
decl_stmt|;
name|DataWriter
name|writer
init|=
name|structWriters
index|[
name|i
index|]
decl_stmt|;
name|recordConsumer
operator|.
name|startField
argument_list|(
name|fieldName
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|fieldValue
argument_list|)
expr_stmt|;
name|recordConsumer
operator|.
name|endField
argument_list|(
name|fieldName
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
class|class
name|MessageDataWriter
extends|extends
name|GroupDataWriter
implements|implements
name|DataWriter
block|{
specifier|public
name|MessageDataWriter
parameter_list|(
name|StructObjectInspector
name|inspector
parameter_list|,
name|GroupType
name|groupType
parameter_list|)
block|{
name|super
argument_list|(
name|inspector
argument_list|,
name|groupType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|recordConsumer
operator|.
name|startMessage
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|recordConsumer
operator|.
name|endMessage
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|StructDataWriter
extends|extends
name|GroupDataWriter
implements|implements
name|DataWriter
block|{
specifier|public
name|StructDataWriter
parameter_list|(
name|StructObjectInspector
name|inspector
parameter_list|,
name|GroupType
name|groupType
parameter_list|)
block|{
name|super
argument_list|(
name|inspector
argument_list|,
name|groupType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|recordConsumer
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|super
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|recordConsumer
operator|.
name|endGroup
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|ListDataWriter
implements|implements
name|DataWriter
block|{
specifier|private
name|ListObjectInspector
name|inspector
decl_stmt|;
specifier|private
name|String
name|elementName
decl_stmt|;
specifier|private
name|DataWriter
name|elementWriter
decl_stmt|;
specifier|private
name|String
name|repeatedGroupName
decl_stmt|;
specifier|public
name|ListDataWriter
parameter_list|(
name|ListObjectInspector
name|inspector
parameter_list|,
name|GroupType
name|groupType
parameter_list|)
block|{
name|this
operator|.
name|inspector
operator|=
name|inspector
expr_stmt|;
comment|// Get the internal array structure
name|GroupType
name|repeatedType
init|=
name|groupType
operator|.
name|getType
argument_list|(
literal|0
argument_list|)
operator|.
name|asGroupType
argument_list|()
decl_stmt|;
name|this
operator|.
name|repeatedGroupName
operator|=
name|repeatedType
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Type
name|elementType
init|=
name|repeatedType
operator|.
name|getType
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|this
operator|.
name|elementName
operator|=
name|elementType
operator|.
name|getName
argument_list|()
expr_stmt|;
name|ObjectInspector
name|elementInspector
init|=
name|this
operator|.
name|inspector
operator|.
name|getListElementObjectInspector
argument_list|()
decl_stmt|;
name|this
operator|.
name|elementWriter
operator|=
name|createWriter
argument_list|(
name|elementInspector
argument_list|,
name|elementType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|recordConsumer
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|recordConsumer
operator|.
name|startField
argument_list|(
name|repeatedGroupName
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|listLength
init|=
name|inspector
operator|.
name|getListLength
argument_list|(
name|value
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listLength
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|element
init|=
name|inspector
operator|.
name|getListElement
argument_list|(
name|value
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|recordConsumer
operator|.
name|startGroup
argument_list|()
expr_stmt|;
if|if
condition|(
name|element
operator|!=
literal|null
condition|)
block|{
name|recordConsumer
operator|.
name|startField
argument_list|(
name|elementName
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|elementWriter
operator|.
name|write
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|recordConsumer
operator|.
name|endField
argument_list|(
name|elementName
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|recordConsumer
operator|.
name|endGroup
argument_list|()
expr_stmt|;
block|}
name|recordConsumer
operator|.
name|endField
argument_list|(
name|repeatedGroupName
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|recordConsumer
operator|.
name|endGroup
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|MapDataWriter
implements|implements
name|DataWriter
block|{
specifier|private
name|MapObjectInspector
name|inspector
decl_stmt|;
specifier|private
name|String
name|repeatedGroupName
decl_stmt|;
specifier|private
name|String
name|keyName
decl_stmt|,
name|valueName
decl_stmt|;
specifier|private
name|DataWriter
name|keyWriter
decl_stmt|,
name|valueWriter
decl_stmt|;
specifier|public
name|MapDataWriter
parameter_list|(
name|MapObjectInspector
name|inspector
parameter_list|,
name|GroupType
name|groupType
parameter_list|)
block|{
name|this
operator|.
name|inspector
operator|=
name|inspector
expr_stmt|;
comment|// Get the internal map structure (MAP_KEY_VALUE)
name|GroupType
name|repeatedType
init|=
name|groupType
operator|.
name|getType
argument_list|(
literal|0
argument_list|)
operator|.
name|asGroupType
argument_list|()
decl_stmt|;
name|this
operator|.
name|repeatedGroupName
operator|=
name|repeatedType
operator|.
name|getName
argument_list|()
expr_stmt|;
comment|// Get key element information
name|Type
name|keyType
init|=
name|repeatedType
operator|.
name|getType
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ObjectInspector
name|keyInspector
init|=
name|this
operator|.
name|inspector
operator|.
name|getMapKeyObjectInspector
argument_list|()
decl_stmt|;
name|this
operator|.
name|keyName
operator|=
name|keyType
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|keyWriter
operator|=
name|createWriter
argument_list|(
name|keyInspector
argument_list|,
name|keyType
argument_list|)
expr_stmt|;
comment|// Get value element information
name|Type
name|valuetype
init|=
name|repeatedType
operator|.
name|getType
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ObjectInspector
name|valueInspector
init|=
name|this
operator|.
name|inspector
operator|.
name|getMapValueObjectInspector
argument_list|()
decl_stmt|;
name|this
operator|.
name|valueName
operator|=
name|valuetype
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|valueWriter
operator|=
name|createWriter
argument_list|(
name|valueInspector
argument_list|,
name|valuetype
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|recordConsumer
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|recordConsumer
operator|.
name|startField
argument_list|(
name|repeatedGroupName
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|mapValues
init|=
name|inspector
operator|.
name|getMap
argument_list|(
name|value
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|keyValue
range|:
name|mapValues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|recordConsumer
operator|.
name|startGroup
argument_list|()
expr_stmt|;
if|if
condition|(
name|keyValue
operator|!=
literal|null
condition|)
block|{
comment|// write key element
name|Object
name|keyElement
init|=
name|keyValue
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|recordConsumer
operator|.
name|startField
argument_list|(
name|keyName
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|keyWriter
operator|.
name|write
argument_list|(
name|keyElement
argument_list|)
expr_stmt|;
name|recordConsumer
operator|.
name|endField
argument_list|(
name|keyName
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// write value element
name|Object
name|valueElement
init|=
name|keyValue
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|valueElement
operator|!=
literal|null
condition|)
block|{
name|recordConsumer
operator|.
name|startField
argument_list|(
name|valueName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|valueWriter
operator|.
name|write
argument_list|(
name|valueElement
argument_list|)
expr_stmt|;
name|recordConsumer
operator|.
name|endField
argument_list|(
name|valueName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|recordConsumer
operator|.
name|endGroup
argument_list|()
expr_stmt|;
block|}
name|recordConsumer
operator|.
name|endField
argument_list|(
name|repeatedGroupName
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|recordConsumer
operator|.
name|endGroup
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|BooleanDataWriter
implements|implements
name|DataWriter
block|{
specifier|private
name|BooleanObjectInspector
name|inspector
decl_stmt|;
specifier|public
name|BooleanDataWriter
parameter_list|(
name|BooleanObjectInspector
name|inspector
parameter_list|)
block|{
name|this
operator|.
name|inspector
operator|=
name|inspector
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|recordConsumer
operator|.
name|addBoolean
argument_list|(
name|inspector
operator|.
name|get
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|ByteDataWriter
implements|implements
name|DataWriter
block|{
specifier|private
name|ByteObjectInspector
name|inspector
decl_stmt|;
specifier|public
name|ByteDataWriter
parameter_list|(
name|ByteObjectInspector
name|inspector
parameter_list|)
block|{
name|this
operator|.
name|inspector
operator|=
name|inspector
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|recordConsumer
operator|.
name|addInteger
argument_list|(
name|inspector
operator|.
name|get
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|ShortDataWriter
implements|implements
name|DataWriter
block|{
specifier|private
name|ShortObjectInspector
name|inspector
decl_stmt|;
specifier|public
name|ShortDataWriter
parameter_list|(
name|ShortObjectInspector
name|inspector
parameter_list|)
block|{
name|this
operator|.
name|inspector
operator|=
name|inspector
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|recordConsumer
operator|.
name|addInteger
argument_list|(
name|inspector
operator|.
name|get
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|IntDataWriter
implements|implements
name|DataWriter
block|{
specifier|private
name|IntObjectInspector
name|inspector
decl_stmt|;
specifier|public
name|IntDataWriter
parameter_list|(
name|IntObjectInspector
name|inspector
parameter_list|)
block|{
name|this
operator|.
name|inspector
operator|=
name|inspector
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|recordConsumer
operator|.
name|addInteger
argument_list|(
name|inspector
operator|.
name|get
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|LongDataWriter
implements|implements
name|DataWriter
block|{
specifier|private
name|LongObjectInspector
name|inspector
decl_stmt|;
specifier|public
name|LongDataWriter
parameter_list|(
name|LongObjectInspector
name|inspector
parameter_list|)
block|{
name|this
operator|.
name|inspector
operator|=
name|inspector
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|recordConsumer
operator|.
name|addLong
argument_list|(
name|inspector
operator|.
name|get
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|FloatDataWriter
implements|implements
name|DataWriter
block|{
specifier|private
name|FloatObjectInspector
name|inspector
decl_stmt|;
specifier|public
name|FloatDataWriter
parameter_list|(
name|FloatObjectInspector
name|inspector
parameter_list|)
block|{
name|this
operator|.
name|inspector
operator|=
name|inspector
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|recordConsumer
operator|.
name|addFloat
argument_list|(
name|inspector
operator|.
name|get
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|DoubleDataWriter
implements|implements
name|DataWriter
block|{
specifier|private
name|DoubleObjectInspector
name|inspector
decl_stmt|;
specifier|public
name|DoubleDataWriter
parameter_list|(
name|DoubleObjectInspector
name|inspector
parameter_list|)
block|{
name|this
operator|.
name|inspector
operator|=
name|inspector
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|recordConsumer
operator|.
name|addDouble
argument_list|(
name|inspector
operator|.
name|get
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|StringDataWriter
implements|implements
name|DataWriter
block|{
specifier|private
name|StringObjectInspector
name|inspector
decl_stmt|;
specifier|public
name|StringDataWriter
parameter_list|(
name|StringObjectInspector
name|inspector
parameter_list|)
block|{
name|this
operator|.
name|inspector
operator|=
name|inspector
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|String
name|v
init|=
name|inspector
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|recordConsumer
operator|.
name|addBinary
argument_list|(
name|Binary
operator|.
name|fromString
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|CharDataWriter
implements|implements
name|DataWriter
block|{
specifier|private
name|HiveCharObjectInspector
name|inspector
decl_stmt|;
specifier|public
name|CharDataWriter
parameter_list|(
name|HiveCharObjectInspector
name|inspector
parameter_list|)
block|{
name|this
operator|.
name|inspector
operator|=
name|inspector
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|String
name|v
init|=
name|inspector
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|value
argument_list|)
operator|.
name|getStrippedValue
argument_list|()
decl_stmt|;
name|recordConsumer
operator|.
name|addBinary
argument_list|(
name|Binary
operator|.
name|fromString
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|VarcharDataWriter
implements|implements
name|DataWriter
block|{
specifier|private
name|HiveVarcharObjectInspector
name|inspector
decl_stmt|;
specifier|public
name|VarcharDataWriter
parameter_list|(
name|HiveVarcharObjectInspector
name|inspector
parameter_list|)
block|{
name|this
operator|.
name|inspector
operator|=
name|inspector
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|String
name|v
init|=
name|inspector
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|value
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|recordConsumer
operator|.
name|addBinary
argument_list|(
name|Binary
operator|.
name|fromString
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|BinaryDataWriter
implements|implements
name|DataWriter
block|{
specifier|private
name|BinaryObjectInspector
name|inspector
decl_stmt|;
specifier|public
name|BinaryDataWriter
parameter_list|(
name|BinaryObjectInspector
name|inspector
parameter_list|)
block|{
name|this
operator|.
name|inspector
operator|=
name|inspector
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|byte
index|[]
name|vBinary
init|=
name|inspector
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|recordConsumer
operator|.
name|addBinary
argument_list|(
name|Binary
operator|.
name|fromByteArray
argument_list|(
name|vBinary
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|TimestampDataWriter
implements|implements
name|DataWriter
block|{
specifier|private
name|TimestampObjectInspector
name|inspector
decl_stmt|;
specifier|public
name|TimestampDataWriter
parameter_list|(
name|TimestampObjectInspector
name|inspector
parameter_list|)
block|{
name|this
operator|.
name|inspector
operator|=
name|inspector
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|Timestamp
name|ts
init|=
name|inspector
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|recordConsumer
operator|.
name|addBinary
argument_list|(
name|NanoTimeUtils
operator|.
name|getNanoTime
argument_list|(
name|ts
argument_list|,
literal|false
argument_list|)
operator|.
name|toBinary
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|DecimalDataWriter
implements|implements
name|DataWriter
block|{
specifier|private
name|HiveDecimalObjectInspector
name|inspector
decl_stmt|;
specifier|public
name|DecimalDataWriter
parameter_list|(
name|HiveDecimalObjectInspector
name|inspector
parameter_list|)
block|{
name|this
operator|.
name|inspector
operator|=
name|inspector
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|HiveDecimal
name|vDecimal
init|=
name|inspector
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|DecimalTypeInfo
name|decTypeInfo
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|inspector
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
name|recordConsumer
operator|.
name|addBinary
argument_list|(
name|decimalToBinary
argument_list|(
name|vDecimal
argument_list|,
name|decTypeInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Binary
name|decimalToBinary
parameter_list|(
specifier|final
name|HiveDecimal
name|hiveDecimal
parameter_list|,
specifier|final
name|DecimalTypeInfo
name|decimalTypeInfo
parameter_list|)
block|{
name|int
name|prec
init|=
name|decimalTypeInfo
operator|.
name|precision
argument_list|()
decl_stmt|;
name|int
name|scale
init|=
name|decimalTypeInfo
operator|.
name|scale
argument_list|()
decl_stmt|;
name|byte
index|[]
name|decimalBytes
init|=
name|hiveDecimal
operator|.
name|setScale
argument_list|(
name|scale
argument_list|)
operator|.
name|unscaledValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
comment|// Estimated number of bytes needed.
name|int
name|precToBytes
init|=
name|ParquetHiveSerDe
operator|.
name|PRECISION_TO_BYTE_COUNT
index|[
name|prec
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|precToBytes
operator|==
name|decimalBytes
operator|.
name|length
condition|)
block|{
comment|// No padding needed.
return|return
name|Binary
operator|.
name|fromByteArray
argument_list|(
name|decimalBytes
argument_list|)
return|;
block|}
name|byte
index|[]
name|tgt
init|=
operator|new
name|byte
index|[
name|precToBytes
index|]
decl_stmt|;
if|if
condition|(
name|hiveDecimal
operator|.
name|signum
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
comment|// For negative number, initializing bits to 1
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|precToBytes
condition|;
name|i
operator|++
control|)
block|{
name|tgt
index|[
name|i
index|]
operator||=
literal|0xFF
expr_stmt|;
block|}
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|decimalBytes
argument_list|,
literal|0
argument_list|,
name|tgt
argument_list|,
name|precToBytes
operator|-
name|decimalBytes
operator|.
name|length
argument_list|,
name|decimalBytes
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Padding leading zeroes/ones.
return|return
name|Binary
operator|.
name|fromByteArray
argument_list|(
name|tgt
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|DateDataWriter
implements|implements
name|DataWriter
block|{
specifier|private
name|DateObjectInspector
name|inspector
decl_stmt|;
specifier|public
name|DateDataWriter
parameter_list|(
name|DateObjectInspector
name|inspector
parameter_list|)
block|{
name|this
operator|.
name|inspector
operator|=
name|inspector
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|Date
name|vDate
init|=
name|inspector
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|recordConsumer
operator|.
name|addInteger
argument_list|(
name|DateWritable
operator|.
name|dateToDays
argument_list|(
name|vDate
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

