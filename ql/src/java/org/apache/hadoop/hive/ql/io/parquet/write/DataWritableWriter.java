begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|write
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|timestamp
operator|.
name|NanoTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|timestamp
operator|.
name|NanoTimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ArrayWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|RecordConsumer
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|schema
operator|.
name|GroupType
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|schema
operator|.
name|OriginalType
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|schema
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  *  * DataWritableWriter is a writer,  * that will read an ArrayWritable and give the data to parquet  * with the expected schema  * This is a helper class used by DataWritableWriteSupport class.  */
end_comment

begin_class
specifier|public
class|class
name|DataWritableWriter
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DataWritableWriter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|RecordConsumer
name|recordConsumer
decl_stmt|;
specifier|private
specifier|final
name|GroupType
name|schema
decl_stmt|;
specifier|public
name|DataWritableWriter
parameter_list|(
specifier|final
name|RecordConsumer
name|recordConsumer
parameter_list|,
specifier|final
name|GroupType
name|schema
parameter_list|)
block|{
name|this
operator|.
name|recordConsumer
operator|=
name|recordConsumer
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
block|}
comment|/**    * It writes all record values to the Parquet RecordConsumer.    * @param record Contains the record of values that are going to be written    */
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|ArrayWritable
name|record
parameter_list|)
block|{
if|if
condition|(
name|record
operator|!=
literal|null
condition|)
block|{
name|recordConsumer
operator|.
name|startMessage
argument_list|()
expr_stmt|;
try|try
block|{
name|writeGroupFields
argument_list|(
name|record
argument_list|,
name|schema
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|String
name|errorMessage
init|=
literal|"Parquet record is malformed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|errorMessage
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|recordConsumer
operator|.
name|endMessage
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * It writes all the fields contained inside a group to the RecordConsumer.    * @param value The list of values contained in the group.    * @param type Type that contains information about the group schema.    */
specifier|public
name|void
name|writeGroupFields
parameter_list|(
specifier|final
name|ArrayWritable
name|value
parameter_list|,
specifier|final
name|GroupType
name|type
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|type
operator|.
name|getFieldCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Type
name|fieldType
init|=
name|type
operator|.
name|getType
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|fieldName
init|=
name|fieldType
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Writable
name|fieldValue
init|=
name|value
operator|.
name|get
argument_list|()
index|[
name|i
index|]
decl_stmt|;
comment|// Parquet does not write null elements
if|if
condition|(
name|fieldValue
operator|!=
literal|null
condition|)
block|{
name|recordConsumer
operator|.
name|startField
argument_list|(
name|fieldName
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|writeValue
argument_list|(
name|fieldValue
argument_list|,
name|fieldType
argument_list|)
expr_stmt|;
name|recordConsumer
operator|.
name|endField
argument_list|(
name|fieldName
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * It writes the field value to the Parquet RecordConsumer. It detects the field type, and writes    * the correct write function.    * @param value The writable object that contains the value.    * @param type Type that contains information about the type schema.    */
specifier|private
name|void
name|writeValue
parameter_list|(
specifier|final
name|Writable
name|value
parameter_list|,
specifier|final
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|writePrimitive
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|ArrayWritable
condition|)
block|{
name|GroupType
name|groupType
init|=
name|type
operator|.
name|asGroupType
argument_list|()
decl_stmt|;
name|OriginalType
name|originalType
init|=
name|type
operator|.
name|getOriginalType
argument_list|()
decl_stmt|;
if|if
condition|(
name|originalType
operator|!=
literal|null
operator|&&
name|originalType
operator|.
name|equals
argument_list|(
name|OriginalType
operator|.
name|LIST
argument_list|)
condition|)
block|{
name|writeArray
argument_list|(
operator|(
name|ArrayWritable
operator|)
name|value
argument_list|,
name|groupType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|originalType
operator|!=
literal|null
operator|&&
name|originalType
operator|.
name|equals
argument_list|(
name|OriginalType
operator|.
name|MAP
argument_list|)
condition|)
block|{
name|writeMap
argument_list|(
operator|(
name|ArrayWritable
operator|)
name|value
argument_list|,
name|groupType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeGroup
argument_list|(
operator|(
name|ArrayWritable
operator|)
name|value
argument_list|,
name|groupType
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Field value is not an ArrayWritable object: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
comment|/**    * It writes a group type and all its values to the Parquet RecordConsumer.    * This is used only for optional and required groups.    * @param value ArrayWritable object that contains the group values    * @param type Type that contains information about the group schema    */
specifier|private
name|void
name|writeGroup
parameter_list|(
specifier|final
name|ArrayWritable
name|value
parameter_list|,
specifier|final
name|GroupType
name|type
parameter_list|)
block|{
name|recordConsumer
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|writeGroupFields
argument_list|(
name|value
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|recordConsumer
operator|.
name|endGroup
argument_list|()
expr_stmt|;
block|}
comment|/**    * It writes a map type and its key-pair values to the Parquet RecordConsumer.    * This is called when the original type (MAP) is detected by writeValue()    * @param value The list of map values that contains the repeated KEY_PAIR_VALUE group type    * @param type Type that contains information about the group schema    */
specifier|private
name|void
name|writeMap
parameter_list|(
specifier|final
name|ArrayWritable
name|value
parameter_list|,
specifier|final
name|GroupType
name|type
parameter_list|)
block|{
name|GroupType
name|repeatedType
init|=
name|type
operator|.
name|getType
argument_list|(
literal|0
argument_list|)
operator|.
name|asGroupType
argument_list|()
decl_stmt|;
name|ArrayWritable
name|repeatedValue
init|=
operator|(
name|ArrayWritable
operator|)
name|value
operator|.
name|get
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|recordConsumer
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|recordConsumer
operator|.
name|startField
argument_list|(
name|repeatedType
operator|.
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Writable
index|[]
name|map_values
init|=
name|repeatedValue
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|record
init|=
literal|0
init|;
name|record
operator|<
name|map_values
operator|.
name|length
condition|;
name|record
operator|++
control|)
block|{
name|Writable
name|key_value_pair
init|=
name|map_values
index|[
name|record
index|]
decl_stmt|;
if|if
condition|(
name|key_value_pair
operator|!=
literal|null
condition|)
block|{
comment|// Hive wraps a map key-pair into an ArrayWritable
if|if
condition|(
name|key_value_pair
operator|instanceof
name|ArrayWritable
condition|)
block|{
name|writeGroup
argument_list|(
operator|(
name|ArrayWritable
operator|)
name|key_value_pair
argument_list|,
name|repeatedType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Map key-value pair is not an ArrayWritable object on record "
operator|+
name|record
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Map key-value pair is null on record "
operator|+
name|record
argument_list|)
throw|;
block|}
block|}
name|recordConsumer
operator|.
name|endField
argument_list|(
name|repeatedType
operator|.
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|recordConsumer
operator|.
name|endGroup
argument_list|()
expr_stmt|;
block|}
comment|/**    * It writes a list type and its array elements to the Parquet RecordConsumer.    * This is called when the original type (LIST) is detected by writeValue()    * @param array The list of array values that contains the repeated array group type    * @param type Type that contains information about the group schema    */
specifier|private
name|void
name|writeArray
parameter_list|(
specifier|final
name|ArrayWritable
name|array
parameter_list|,
specifier|final
name|GroupType
name|type
parameter_list|)
block|{
name|GroupType
name|repeatedType
init|=
name|type
operator|.
name|getType
argument_list|(
literal|0
argument_list|)
operator|.
name|asGroupType
argument_list|()
decl_stmt|;
name|ArrayWritable
name|repeatedValue
init|=
operator|(
name|ArrayWritable
operator|)
name|array
operator|.
name|get
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|recordConsumer
operator|.
name|startGroup
argument_list|()
expr_stmt|;
name|recordConsumer
operator|.
name|startField
argument_list|(
name|repeatedType
operator|.
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Writable
index|[]
name|array_values
init|=
name|repeatedValue
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|record
init|=
literal|0
init|;
name|record
operator|<
name|array_values
operator|.
name|length
condition|;
name|record
operator|++
control|)
block|{
name|recordConsumer
operator|.
name|startGroup
argument_list|()
expr_stmt|;
comment|// Null values must be wrapped into startGroup/endGroup
name|Writable
name|element
init|=
name|array_values
index|[
name|record
index|]
decl_stmt|;
if|if
condition|(
name|element
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|type
operator|.
name|getFieldCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Type
name|fieldType
init|=
name|repeatedType
operator|.
name|getType
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|fieldName
init|=
name|fieldType
operator|.
name|getName
argument_list|()
decl_stmt|;
name|recordConsumer
operator|.
name|startField
argument_list|(
name|fieldName
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|writeValue
argument_list|(
name|element
argument_list|,
name|fieldType
argument_list|)
expr_stmt|;
name|recordConsumer
operator|.
name|endField
argument_list|(
name|fieldName
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|recordConsumer
operator|.
name|endGroup
argument_list|()
expr_stmt|;
block|}
name|recordConsumer
operator|.
name|endField
argument_list|(
name|repeatedType
operator|.
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|recordConsumer
operator|.
name|endGroup
argument_list|()
expr_stmt|;
block|}
comment|/**    * It writes the primitive value to the Parquet RecordConsumer.    * @param value The writable object that contains the primitive value.    */
specifier|private
name|void
name|writePrimitive
parameter_list|(
specifier|final
name|Writable
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|value
operator|instanceof
name|DoubleWritable
condition|)
block|{
name|recordConsumer
operator|.
name|addDouble
argument_list|(
operator|(
operator|(
name|DoubleWritable
operator|)
name|value
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|BooleanWritable
condition|)
block|{
name|recordConsumer
operator|.
name|addBoolean
argument_list|(
operator|(
operator|(
name|BooleanWritable
operator|)
name|value
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|FloatWritable
condition|)
block|{
name|recordConsumer
operator|.
name|addFloat
argument_list|(
operator|(
operator|(
name|FloatWritable
operator|)
name|value
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|IntWritable
condition|)
block|{
name|recordConsumer
operator|.
name|addInteger
argument_list|(
operator|(
operator|(
name|IntWritable
operator|)
name|value
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|LongWritable
condition|)
block|{
name|recordConsumer
operator|.
name|addLong
argument_list|(
operator|(
operator|(
name|LongWritable
operator|)
name|value
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|ShortWritable
condition|)
block|{
name|recordConsumer
operator|.
name|addInteger
argument_list|(
operator|(
operator|(
name|ShortWritable
operator|)
name|value
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|ByteWritable
condition|)
block|{
name|recordConsumer
operator|.
name|addInteger
argument_list|(
operator|(
operator|(
name|ByteWritable
operator|)
name|value
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|HiveDecimalWritable
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"HiveDecimalWritable writing not implemented"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|BytesWritable
condition|)
block|{
name|recordConsumer
operator|.
name|addBinary
argument_list|(
operator|(
name|Binary
operator|.
name|fromByteArray
argument_list|(
operator|(
operator|(
name|BytesWritable
operator|)
name|value
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|TimestampWritable
condition|)
block|{
name|Timestamp
name|ts
init|=
operator|(
operator|(
name|TimestampWritable
operator|)
name|value
operator|)
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|NanoTime
name|nt
init|=
name|NanoTimeUtils
operator|.
name|getNanoTime
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|nt
operator|.
name|writeValue
argument_list|(
name|recordConsumer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown value type: "
operator|+
name|value
operator|+
literal|" "
operator|+
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

