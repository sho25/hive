begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_comment
comment|/**  * This class collects column information for mapping vector columns, including the hive type name.  *  * The column information are kept ordered by a specified column.  *  * Call getMapping to collects the results into convenient arrays.  */
end_comment

begin_class
specifier|public
class|class
name|VectorColumnOrderedMap
block|{
specifier|protected
specifier|static
specifier|transient
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VectorColumnOrderedMap
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|String
name|name
decl_stmt|;
specifier|private
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Value
argument_list|>
name|orderedTreeMap
decl_stmt|;
specifier|private
class|class
name|Value
block|{
name|int
name|valueColumn
decl_stmt|;
name|TypeInfo
name|typeInfo
decl_stmt|;
name|Value
parameter_list|(
name|int
name|valueColumn
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
name|this
operator|.
name|valueColumn
operator|=
name|valueColumn
expr_stmt|;
name|this
operator|.
name|typeInfo
operator|=
name|typeInfo
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"(value column: "
operator|+
name|valueColumn
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", type info: "
operator|+
name|typeInfo
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
class|class
name|Mapping
block|{
specifier|private
specifier|final
name|int
index|[]
name|orderedColumns
decl_stmt|;
specifier|private
specifier|final
name|int
index|[]
name|valueColumns
decl_stmt|;
specifier|private
specifier|final
name|TypeInfo
index|[]
name|typeInfos
decl_stmt|;
name|Mapping
parameter_list|(
name|int
index|[]
name|orderedColumns
parameter_list|,
name|int
index|[]
name|valueColumns
parameter_list|,
name|TypeInfo
index|[]
name|typeInfos
parameter_list|)
block|{
name|this
operator|.
name|orderedColumns
operator|=
name|orderedColumns
expr_stmt|;
name|this
operator|.
name|valueColumns
operator|=
name|valueColumns
expr_stmt|;
name|this
operator|.
name|typeInfos
operator|=
name|typeInfos
expr_stmt|;
block|}
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|orderedColumns
operator|.
name|length
return|;
block|}
specifier|public
name|int
index|[]
name|getOrderedColumns
parameter_list|()
block|{
return|return
name|orderedColumns
return|;
block|}
specifier|public
name|int
index|[]
name|getValueColumns
parameter_list|()
block|{
return|return
name|valueColumns
return|;
block|}
specifier|public
name|TypeInfo
index|[]
name|getTypeInfos
parameter_list|()
block|{
return|return
name|typeInfos
return|;
block|}
block|}
specifier|public
name|VectorColumnOrderedMap
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|orderedTreeMap
operator|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Value
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|int
name|orderedColumn
parameter_list|,
name|int
name|valueColumn
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
if|if
condition|(
name|orderedTreeMap
operator|.
name|containsKey
argument_list|(
name|orderedColumn
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|name
operator|+
literal|" duplicate column "
operator|+
name|orderedColumn
operator|+
literal|" in ordered column map "
operator|+
name|orderedTreeMap
operator|.
name|toString
argument_list|()
operator|+
literal|" when adding value column "
operator|+
name|valueColumn
operator|+
literal|", type into "
operator|+
name|typeInfo
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|orderedTreeMap
operator|.
name|put
argument_list|(
name|orderedColumn
argument_list|,
operator|new
name|Value
argument_list|(
name|valueColumn
argument_list|,
name|typeInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|orderedColumnsContain
parameter_list|(
name|int
name|orderedColumn
parameter_list|)
block|{
return|return
name|orderedTreeMap
operator|.
name|containsKey
argument_list|(
name|orderedColumn
argument_list|)
return|;
block|}
specifier|public
name|Mapping
name|getMapping
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|orderedColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|valueColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|typeInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Value
argument_list|>
name|entry
range|:
name|orderedTreeMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|orderedColumns
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|Value
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|valueColumns
operator|.
name|add
argument_list|(
name|value
operator|.
name|valueColumn
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
name|value
operator|.
name|typeInfo
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Mapping
argument_list|(
name|ArrayUtils
operator|.
name|toPrimitive
argument_list|(
name|orderedColumns
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|,
name|ArrayUtils
operator|.
name|toPrimitive
argument_list|(
name|valueColumns
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|,
name|typeInfos
operator|.
name|toArray
argument_list|(
operator|new
name|TypeInfo
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

