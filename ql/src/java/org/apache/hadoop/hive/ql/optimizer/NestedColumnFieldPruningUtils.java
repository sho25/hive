begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|NestedColumnFieldPruningUtils
block|{
comment|/**    * Add a leaf node to the field tree if the specified path is not contained by    * current tree specified by the passed parameter field node.    *    * @param fieldNode the root of the column tree    * @param path contains the path from root to leaf    * @return the root of the newly built tree    */
specifier|public
specifier|static
name|FieldNode
name|addNodeByPath
parameter_list|(
name|FieldNode
name|fieldNode
parameter_list|,
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|fieldNode
return|;
block|}
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|String
index|[]
name|ps
init|=
name|path
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|FieldNode
name|c
init|=
name|fieldNode
decl_stmt|;
if|if
condition|(
name|fieldNode
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|FieldNode
argument_list|>
name|currentList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|c
argument_list|)
decl_stmt|;
while|while
condition|(
name|index
operator|<
name|ps
operator|.
name|length
condition|)
block|{
name|found
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|FieldNode
name|n
range|:
name|currentList
control|)
block|{
if|if
condition|(
name|n
operator|.
name|getFieldName
argument_list|()
operator|.
name|equals
argument_list|(
name|ps
index|[
name|index
index|]
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
comment|// If the matched field is leaf which means all leaves are required, not need to go
comment|// deeper.
if|if
condition|(
name|n
operator|.
name|getNodes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|fieldNode
return|;
block|}
name|c
operator|=
name|n
expr_stmt|;
name|currentList
operator|=
name|c
operator|.
name|getNodes
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
name|index
operator|++
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
while|while
condition|(
name|index
operator|<
name|ps
operator|.
name|length
condition|)
block|{
name|FieldNode
name|n
init|=
operator|new
name|FieldNode
argument_list|(
name|ps
index|[
name|index
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldNode
operator|==
literal|null
condition|)
block|{
comment|// rebuild the tree since original is empty
name|fieldNode
operator|=
name|n
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|addFieldNodes
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
name|c
operator|=
name|n
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|index
operator|==
name|ps
operator|.
name|length
condition|)
block|{
comment|// Consolidation since all leaves are required.
name|c
operator|.
name|getNodes
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|fieldNode
return|;
block|}
block|}
end_class

end_unit

