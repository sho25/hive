begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * GenericUDTFGetSplits2 -  Memory efficient version of GenericUDTFGetSplits.  * It separates out information like schema and planBytes[] which is common to all the splits.  * This produces output in following format.  *<p>  * type                           split  * ----------------------------------------------------  * schema-split             LlapInputSplit -- contains only schema  * plan-split               LlapInputSplit -- contains only planBytes[]  * 0                        LlapInputSplit -- actual split 1  * 1                        LlapInputSplit -- actual split 2  * ...                         ...  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"get_llap_splits"
argument_list|,
name|value
operator|=
literal|"_FUNC_(string,int) - "
operator|+
literal|"Returns an array of length int serialized splits for the referenced tables string."
operator|+
literal|" Passing length 0 returns only schema data for the compiled query. "
operator|+
literal|"The order of splits is: schema-split, plan-split, 0, 1, 2...where 0, 1, 2...are the actual splits "
operator|+
literal|"This UDTF is for internal use by LlapBaseInputFormat and not to be invoked explicitly"
argument_list|)
annotation|@
name|UDFType
argument_list|(
name|deterministic
operator|=
literal|false
argument_list|)
specifier|public
class|class
name|GenericUDTFGetSplits2
extends|extends
name|GenericUDTFGetSplits
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GenericUDTFGetSplits2
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|StructObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"initializing GenericUDFGetSplits2"
argument_list|)
expr_stmt|;
name|validateInput
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"type"
argument_list|,
literal|"split"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldOIs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaByteArrayObjectInspector
argument_list|)
decl_stmt|;
name|StructObjectInspector
name|outputOI
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|names
argument_list|,
name|fieldOIs
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"done initializing GenericUDFGetSplits2"
argument_list|)
expr_stmt|;
return|return
name|outputOI
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Object
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|initArgs
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|SplitResult
name|splitResult
init|=
name|getSplitResult
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|forwardOutput
argument_list|(
name|splitResult
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|forwardOutput
parameter_list|(
name|SplitResult
name|splitResult
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|InputSplit
argument_list|>
name|entry
range|:
name|transformSplitResult
argument_list|(
name|splitResult
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
index|[]
name|os
init|=
operator|new
name|Object
index|[
literal|2
index|]
decl_stmt|;
name|os
index|[
literal|0
index|]
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|InputSplit
name|split
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|bos
operator|.
name|reset
argument_list|()
expr_stmt|;
name|split
operator|.
name|write
argument_list|(
name|dos
argument_list|)
expr_stmt|;
name|os
index|[
literal|1
index|]
operator|=
name|bos
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|forward
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|InputSplit
argument_list|>
name|transformSplitResult
parameter_list|(
name|SplitResult
name|splitResult
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|InputSplit
argument_list|>
name|splitMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|splitMap
operator|.
name|put
argument_list|(
literal|"schema-split"
argument_list|,
name|splitResult
operator|.
name|schemaSplit
argument_list|)
expr_stmt|;
if|if
condition|(
name|splitResult
operator|.
name|actualSplits
operator|!=
literal|null
operator|&&
name|splitResult
operator|.
name|actualSplits
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|splitResult
operator|.
name|planSplit
argument_list|)
expr_stmt|;
name|splitMap
operator|.
name|put
argument_list|(
literal|"plan-split"
argument_list|,
name|splitResult
operator|.
name|planSplit
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splitResult
operator|.
name|actualSplits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|splitMap
operator|.
name|put
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|splitResult
operator|.
name|actualSplits
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|splitMap
return|;
block|}
block|}
end_class

end_unit

