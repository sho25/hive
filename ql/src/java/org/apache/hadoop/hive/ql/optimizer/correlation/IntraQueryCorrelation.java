begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|correlation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_comment
comment|/**  * IntraQueryCorrelation records a sub-tree of the query plan tree which can be  * evaluated in a single MR job. The boundary of this sub-tree is recorded by  * the ReduceSinkOperators the the bottom of this sub-tree.  * Also, allReduceSinkOperators in IntraQueryCorrelation contains all  * ReduceSinkOperators of this sub-tree.  */
end_comment

begin_class
specifier|public
class|class
name|IntraQueryCorrelation
block|{
specifier|private
name|boolean
name|jobFlowCorrelation
decl_stmt|;
comment|// The bottom layer ReduceSinkOperators. These ReduceSinkOperators are used
comment|// to record the boundary of this sub-tree which can be evaluated in a single MR
comment|// job.
specifier|private
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|bottomReduceSinkOperators
decl_stmt|;
comment|// The number of reducer(s) should be used for those bottom layer ReduceSinkOperators
specifier|private
name|int
name|numReducers
decl_stmt|;
comment|// This is the min number of reducer(s) for the bottom layer ReduceSinkOperators to avoid query
comment|// executed on too small number of reducers.
specifier|private
specifier|final
name|int
name|minReducers
decl_stmt|;
comment|// All ReduceSinkOperators in this sub-tree. This set is used when we start to remove unnecessary
comment|// ReduceSinkOperators.
specifier|private
specifier|final
name|Set
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|allReduceSinkOperators
decl_stmt|;
comment|// Since we merge multiple operation paths, we assign new tags to bottom layer
comment|// ReduceSinkOperators. This mapping is used to map new tags to original tags associated
comment|// to these bottom layer ReduceSinkOperators.
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|newTagToOldTag
decl_stmt|;
comment|// A map from new tags to indices of children of DemuxOperator (the first Operator at the
comment|// Reduce side of optimized plan)
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|newTagToChildIndex
decl_stmt|;
specifier|public
name|IntraQueryCorrelation
parameter_list|(
name|int
name|minReducers
parameter_list|)
block|{
name|this
operator|.
name|jobFlowCorrelation
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|numReducers
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|minReducers
operator|=
name|minReducers
expr_stmt|;
name|this
operator|.
name|allReduceSinkOperators
operator|=
operator|new
name|HashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|newTagToOldTag
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|newTagToChildIndex
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|getNewTagToOldTag
parameter_list|()
block|{
return|return
name|newTagToOldTag
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|getNewTagToChildIndex
parameter_list|()
block|{
return|return
name|newTagToChildIndex
return|;
block|}
specifier|public
name|void
name|setNewTag
parameter_list|(
name|Integer
name|newTag
parameter_list|,
name|Integer
name|oldTag
parameter_list|,
name|Integer
name|childIndex
parameter_list|)
block|{
name|newTagToOldTag
operator|.
name|put
argument_list|(
name|newTag
argument_list|,
name|oldTag
argument_list|)
expr_stmt|;
name|newTagToChildIndex
operator|.
name|put
argument_list|(
name|newTag
argument_list|,
name|childIndex
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addToAllReduceSinkOperators
parameter_list|(
name|ReduceSinkOperator
name|rsop
parameter_list|)
block|{
name|allReduceSinkOperators
operator|.
name|add
argument_list|(
name|rsop
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|getAllReduceSinkOperators
parameter_list|()
block|{
return|return
name|allReduceSinkOperators
return|;
block|}
specifier|public
name|void
name|setJobFlowCorrelation
parameter_list|(
name|boolean
name|jobFlowCorrelation
parameter_list|,
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|bottomReduceSinkOperators
parameter_list|)
block|{
name|this
operator|.
name|jobFlowCorrelation
operator|=
name|jobFlowCorrelation
expr_stmt|;
name|this
operator|.
name|bottomReduceSinkOperators
operator|=
name|bottomReduceSinkOperators
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasJobFlowCorrelation
parameter_list|()
block|{
return|return
name|jobFlowCorrelation
return|;
block|}
specifier|public
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|getBottomReduceSinkOperators
parameter_list|()
block|{
return|return
name|bottomReduceSinkOperators
return|;
block|}
specifier|public
name|int
name|getNumReducers
parameter_list|()
block|{
return|return
name|numReducers
return|;
block|}
specifier|public
name|boolean
name|adjustNumReducers
parameter_list|(
name|int
name|newNumReducers
parameter_list|)
block|{
assert|assert
name|newNumReducers
operator|!=
literal|0
assert|;
if|if
condition|(
name|newNumReducers
operator|>
literal|0
condition|)
block|{
comment|// If the new numReducer is less than minReducer, we will not consider
comment|// ReduceSinkOperator with this newNumReducer as a correlated ReduceSinkOperator
if|if
condition|(
name|newNumReducers
operator|<
name|minReducers
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|numReducers
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|newNumReducers
operator|!=
name|numReducers
condition|)
block|{
comment|// If (numReducers> 0&& newNumReducers> 0&& newNumReducers != numReducers),
comment|// we will not consider ReduceSinkOperator with this newNumReducer as a correlated
comment|// ReduceSinkOperator
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|// if numReducers< 0 and newNumReducers> 0
name|numReducers
operator|=
name|newNumReducers
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

