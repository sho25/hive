begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorExpressionDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_class
specifier|public
class|class
name|PosModDoubleToDouble
extends|extends
name|MathFuncDoubleToDouble
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|final
name|double
name|divisor
decl_stmt|;
specifier|private
name|boolean
name|isOutputTypeFloat
decl_stmt|;
specifier|public
name|PosModDoubleToDouble
parameter_list|(
name|int
name|inputCol
parameter_list|,
name|double
name|scalarVal
parameter_list|,
name|int
name|outputColumnNum
parameter_list|)
block|{
name|super
argument_list|(
name|inputCol
argument_list|,
name|outputColumnNum
argument_list|)
expr_stmt|;
name|this
operator|.
name|divisor
operator|=
name|scalarVal
expr_stmt|;
block|}
specifier|public
name|PosModDoubleToDouble
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
comment|// Dummy final assignments.
name|divisor
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * Set type of the output column and also set the flag which determines if cast to float    * is needed while calculating PosMod expression    */
annotation|@
name|Override
specifier|public
name|void
name|setOutputTypeInfo
parameter_list|(
name|TypeInfo
name|outputTypeInfo
parameter_list|)
block|{
name|this
operator|.
name|outputTypeInfo
operator|=
name|outputTypeInfo
expr_stmt|;
name|isOutputTypeFloat
operator|=
name|outputTypeInfo
operator|!=
literal|null
operator|&&
name|serdeConstants
operator|.
name|FLOAT_TYPE_NAME
operator|.
name|equals
argument_list|(
name|outputTypeInfo
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|double
name|func
parameter_list|(
name|double
name|v
parameter_list|)
block|{
comment|// if the outputType is a float cast the arguments to float to replicate the overflow behavior
comment|// in non-vectorized UDF GenericUDFPosMod
if|if
condition|(
name|isOutputTypeFloat
condition|)
block|{
name|float
name|castedV
init|=
operator|(
name|float
operator|)
name|v
decl_stmt|;
name|float
name|castedDivisor
init|=
operator|(
name|float
operator|)
name|divisor
decl_stmt|;
return|return
operator|(
operator|(
name|castedV
operator|%
name|castedDivisor
operator|)
operator|+
name|castedDivisor
operator|)
operator|%
name|castedDivisor
return|;
block|}
comment|// return positive modulo
return|return
operator|(
operator|(
name|v
operator|%
name|divisor
operator|)
operator|+
name|divisor
operator|)
operator|%
name|divisor
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|vectorExpressionParameters
parameter_list|()
block|{
return|return
literal|"col "
operator|+
name|colNum
operator|+
literal|", divisor "
operator|+
name|divisor
return|;
block|}
annotation|@
name|Override
specifier|public
name|VectorExpressionDescriptor
operator|.
name|Descriptor
name|getDescriptor
parameter_list|()
block|{
return|return
operator|(
operator|new
name|VectorExpressionDescriptor
operator|.
name|Builder
argument_list|()
operator|)
operator|.
name|setMode
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
operator|.
name|setNumArguments
argument_list|(
literal|2
argument_list|)
operator|.
name|setArgumentTypes
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|ArgumentType
operator|.
name|INT_FAMILY
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|ArgumentType
operator|.
name|FLOAT_FAMILY
argument_list|)
operator|.
name|setInputExpressionTypes
argument_list|(
name|VectorExpressionDescriptor
operator|.
name|InputExpressionType
operator|.
name|COLUMN
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|InputExpressionType
operator|.
name|SCALAR
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

