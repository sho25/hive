begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|ColumnarSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|split
operator|.
name|SplitSizeEstimator
import|;
end_import

begin_comment
comment|/**  * Split size estimator for columnar file formats.  */
end_comment

begin_class
specifier|public
class|class
name|ColumnarSplitSizeEstimator
implements|implements
name|SplitSizeEstimator
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ColumnarSplitSizeEstimator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|isDebugEnabled
init|=
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|long
name|getEstimatedSize
parameter_list|(
name|InputSplit
name|inputSplit
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|colProjSize
init|=
name|inputSplit
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputSplit
operator|instanceof
name|ColumnarSplit
condition|)
block|{
name|colProjSize
operator|=
operator|(
operator|(
name|ColumnarSplit
operator|)
name|inputSplit
operator|)
operator|.
name|getColumnarProjectionSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|isDebugEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Estimated column projection size: "
operator|+
name|colProjSize
argument_list|)
expr_stmt|;
block|}
return|return
name|colProjSize
return|;
block|}
elseif|else
if|if
condition|(
name|inputSplit
operator|instanceof
name|HiveInputFormat
operator|.
name|HiveInputSplit
condition|)
block|{
name|InputSplit
name|innerSplit
init|=
operator|(
operator|(
name|HiveInputFormat
operator|.
name|HiveInputSplit
operator|)
name|inputSplit
operator|)
operator|.
name|getInputSplit
argument_list|()
decl_stmt|;
if|if
condition|(
name|innerSplit
operator|instanceof
name|ColumnarSplit
condition|)
block|{
name|colProjSize
operator|=
operator|(
operator|(
name|ColumnarSplit
operator|)
name|innerSplit
operator|)
operator|.
name|getColumnarProjectionSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|isDebugEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Estimated column projection size: "
operator|+
name|colProjSize
argument_list|)
expr_stmt|;
block|}
return|return
name|colProjSize
return|;
block|}
block|}
return|return
name|colProjSize
return|;
block|}
block|}
end_class

end_unit

