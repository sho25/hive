begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * UDFSubstr.  *  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"substr,substring"
argument_list|,
name|value
operator|=
literal|"_FUNC_(str, pos[, len]) - returns the substring of str that"
operator|+
literal|" starts at pos and is of length len or"
operator|+
literal|"_FUNC_(bin, pos[, len]) - returns the slice of byte array that"
operator|+
literal|" starts at pos and is of length len"
argument_list|,
name|extended
operator|=
literal|"pos is a 1-based index. If pos<0 the starting position is"
operator|+
literal|" determined by counting backwards from the end of str.\n"
operator|+
literal|"Example:\n "
operator|+
literal|"> SELECT _FUNC_('Facebook', 5) FROM src LIMIT 1;\n"
operator|+
literal|"  'book'\n"
operator|+
literal|"> SELECT _FUNC_('Facebook', -5) FROM src LIMIT 1;\n"
operator|+
literal|"  'ebook'\n"
operator|+
literal|"> SELECT _FUNC_('Facebook', 5, 1) FROM src LIMIT 1;\n"
operator|+
literal|"  'b'"
argument_list|)
specifier|public
class|class
name|UDFSubstr
extends|extends
name|UDF
block|{
specifier|private
specifier|final
name|int
index|[]
name|index
decl_stmt|;
specifier|private
specifier|final
name|Text
name|r
decl_stmt|;
specifier|public
name|UDFSubstr
parameter_list|()
block|{
name|index
operator|=
operator|new
name|int
index|[
literal|2
index|]
expr_stmt|;
name|r
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Text
name|evaluate
parameter_list|(
name|Text
name|t
parameter_list|,
name|IntWritable
name|pos
parameter_list|,
name|IntWritable
name|len
parameter_list|)
block|{
if|if
condition|(
operator|(
name|t
operator|==
literal|null
operator|)
operator|||
operator|(
name|pos
operator|==
literal|null
operator|)
operator|||
operator|(
name|len
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|r
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|len
operator|.
name|get
argument_list|()
operator|<=
literal|0
operator|)
condition|)
block|{
return|return
name|r
return|;
block|}
name|int
index|[]
name|index
init|=
name|makeIndex
argument_list|(
name|pos
operator|.
name|get
argument_list|()
argument_list|,
name|len
operator|.
name|get
argument_list|()
argument_list|,
name|t
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
return|return
name|r
return|;
block|}
name|String
name|s
init|=
name|t
operator|.
name|toString
argument_list|()
decl_stmt|;
name|r
operator|.
name|set
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|index
index|[
literal|0
index|]
argument_list|,
name|index
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
specifier|private
name|int
index|[]
name|makeIndex
parameter_list|(
name|int
name|pos
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|inputLen
parameter_list|)
block|{
if|if
condition|(
operator|(
name|Math
operator|.
name|abs
argument_list|(
name|pos
argument_list|)
operator|>
name|inputLen
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|start
decl_stmt|,
name|end
decl_stmt|;
if|if
condition|(
name|pos
operator|>
literal|0
condition|)
block|{
name|start
operator|=
name|pos
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
name|start
operator|=
name|inputLen
operator|+
name|pos
expr_stmt|;
block|}
else|else
block|{
name|start
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|inputLen
operator|-
name|start
operator|)
operator|<
name|len
condition|)
block|{
name|end
operator|=
name|inputLen
expr_stmt|;
block|}
else|else
block|{
name|end
operator|=
name|start
operator|+
name|len
expr_stmt|;
block|}
name|index
index|[
literal|0
index|]
operator|=
name|start
expr_stmt|;
name|index
index|[
literal|1
index|]
operator|=
name|end
expr_stmt|;
return|return
name|index
return|;
block|}
specifier|private
specifier|final
name|IntWritable
name|maxValue
init|=
operator|new
name|IntWritable
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|public
name|Text
name|evaluate
parameter_list|(
name|Text
name|s
parameter_list|,
name|IntWritable
name|pos
parameter_list|)
block|{
return|return
name|evaluate
argument_list|(
name|s
argument_list|,
name|pos
argument_list|,
name|maxValue
argument_list|)
return|;
block|}
specifier|public
name|BytesWritable
name|evaluate
parameter_list|(
name|BytesWritable
name|bw
parameter_list|,
name|IntWritable
name|pos
parameter_list|,
name|IntWritable
name|len
parameter_list|)
block|{
if|if
condition|(
operator|(
name|bw
operator|==
literal|null
operator|)
operator|||
operator|(
name|pos
operator|==
literal|null
operator|)
operator|||
operator|(
name|len
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|(
name|len
operator|.
name|get
argument_list|()
operator|<=
literal|0
operator|)
condition|)
block|{
return|return
operator|new
name|BytesWritable
argument_list|()
return|;
block|}
name|int
index|[]
name|index
init|=
name|makeIndex
argument_list|(
name|pos
operator|.
name|get
argument_list|()
argument_list|,
name|len
operator|.
name|get
argument_list|()
argument_list|,
name|bw
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|BytesWritable
argument_list|()
return|;
block|}
return|return
operator|new
name|BytesWritable
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|bw
operator|.
name|getBytes
argument_list|()
argument_list|,
name|index
index|[
literal|0
index|]
argument_list|,
name|index
index|[
literal|1
index|]
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|BytesWritable
name|evaluate
parameter_list|(
name|BytesWritable
name|bw
parameter_list|,
name|IntWritable
name|pos
parameter_list|)
block|{
return|return
name|evaluate
argument_list|(
name|bw
argument_list|,
name|pos
argument_list|,
name|maxValue
argument_list|)
return|;
block|}
block|}
end_class

end_unit

