begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|physical
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FilterOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|mr
operator|.
name|MapRedTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorExpressionDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationContextRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedInputFormatInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultGraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|PreOrderWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|RuleRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|TaskGraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|RowResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AbstractOperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AggregationDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableScanDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFAcos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFAsin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFAtan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFBin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFConv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFCos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFDayOfMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFDegrees
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFHex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFHour
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLTrim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLength
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLike
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLog10
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLog2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFMinute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFRTrim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFRadians
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFRand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFSecond
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFSign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFSin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFSqrt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFSubstr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFTan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFToBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFToByte
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFToDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFToFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFToInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFToLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFToShort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFToString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFTrim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFWeekOfYear
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFYear
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFAbs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFBetween
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFCeil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFConcat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFFloor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFIn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFLower
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPAnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPDivide
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualOrGreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualOrLessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPGreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPLessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPMinus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPMod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPMultiply
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNegative
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNotEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPOr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPPositive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFPower
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFRound
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFPosMod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFTimestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFToUnixTimeStamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFUpper
import|;
end_import

begin_class
specifier|public
class|class
name|Vectorizer
implements|implements
name|PhysicalPlanResolver
block|{
specifier|protected
specifier|static
specifier|transient
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Vectorizer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|supportedDataTypes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|vectorizableTasks
init|=
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|supportedGenericUDFs
init|=
operator|new
name|HashSet
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|supportedAggregationUdfs
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|PhysicalContext
name|physicalContext
init|=
literal|null
decl_stmt|;
empty_stmt|;
specifier|public
name|Vectorizer
parameter_list|()
block|{
name|supportedDataTypes
operator|.
name|add
argument_list|(
literal|"int"
argument_list|)
expr_stmt|;
name|supportedDataTypes
operator|.
name|add
argument_list|(
literal|"smallint"
argument_list|)
expr_stmt|;
name|supportedDataTypes
operator|.
name|add
argument_list|(
literal|"tinyint"
argument_list|)
expr_stmt|;
name|supportedDataTypes
operator|.
name|add
argument_list|(
literal|"bigint"
argument_list|)
expr_stmt|;
name|supportedDataTypes
operator|.
name|add
argument_list|(
literal|"integer"
argument_list|)
expr_stmt|;
name|supportedDataTypes
operator|.
name|add
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|supportedDataTypes
operator|.
name|add
argument_list|(
literal|"short"
argument_list|)
expr_stmt|;
name|supportedDataTypes
operator|.
name|add
argument_list|(
literal|"timestamp"
argument_list|)
expr_stmt|;
name|supportedDataTypes
operator|.
name|add
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|supportedDataTypes
operator|.
name|add
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|supportedDataTypes
operator|.
name|add
argument_list|(
literal|"byte"
argument_list|)
expr_stmt|;
name|supportedDataTypes
operator|.
name|add
argument_list|(
literal|"float"
argument_list|)
expr_stmt|;
name|supportedDataTypes
operator|.
name|add
argument_list|(
literal|"double"
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFOPPlus
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFOPMinus
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFOPMultiply
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFOPDivide
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFOPMod
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFOPNegative
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFOPPositive
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFOPEqualOrLessThan
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFOPEqualOrGreaterThan
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFOPGreaterThan
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFOPLessThan
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFOPNot
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFOPNotEqual
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFOPNotNull
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFOPNull
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFOPOr
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFOPAnd
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFOPEqual
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFToUnixTimeStamp
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFHour
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFLength
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFMinute
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFSecond
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFYear
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFWeekOfYear
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFDayOfMonth
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFLike
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFRegExp
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFSubstr
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFLTrim
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFRTrim
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFTrim
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFSin
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFCos
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFTan
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFAsin
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFAcos
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFAtan
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFDegrees
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFRadians
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFFloor
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFCeil
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFExp
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFLn
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFLog2
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFLog10
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFLog
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFPower
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFRound
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFPosMod
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFSqrt
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFSign
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFRand
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFBin
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFHex
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFConv
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFLower
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFUpper
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFConcat
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFAbs
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFBetween
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFIn
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// For type casts
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFToLong
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFToInteger
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFToShort
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFToByte
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFToBoolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFToFloat
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFToDouble
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|UDFToString
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedGenericUDFs
operator|.
name|add
argument_list|(
name|GenericUDFTimestamp
operator|.
name|class
argument_list|)
expr_stmt|;
name|supportedAggregationUdfs
operator|.
name|add
argument_list|(
literal|"min"
argument_list|)
expr_stmt|;
name|supportedAggregationUdfs
operator|.
name|add
argument_list|(
literal|"max"
argument_list|)
expr_stmt|;
name|supportedAggregationUdfs
operator|.
name|add
argument_list|(
literal|"count"
argument_list|)
expr_stmt|;
name|supportedAggregationUdfs
operator|.
name|add
argument_list|(
literal|"sum"
argument_list|)
expr_stmt|;
name|supportedAggregationUdfs
operator|.
name|add
argument_list|(
literal|"avg"
argument_list|)
expr_stmt|;
name|supportedAggregationUdfs
operator|.
name|add
argument_list|(
literal|"variance"
argument_list|)
expr_stmt|;
name|supportedAggregationUdfs
operator|.
name|add
argument_list|(
literal|"var_pop"
argument_list|)
expr_stmt|;
name|supportedAggregationUdfs
operator|.
name|add
argument_list|(
literal|"var_samp"
argument_list|)
expr_stmt|;
name|supportedAggregationUdfs
operator|.
name|add
argument_list|(
literal|"std"
argument_list|)
expr_stmt|;
name|supportedAggregationUdfs
operator|.
name|add
argument_list|(
literal|"stddev"
argument_list|)
expr_stmt|;
name|supportedAggregationUdfs
operator|.
name|add
argument_list|(
literal|"stddev_pop"
argument_list|)
expr_stmt|;
name|supportedAggregationUdfs
operator|.
name|add
argument_list|(
literal|"stddev_samp"
argument_list|)
expr_stmt|;
block|}
class|class
name|VectorizationDispatcher
implements|implements
name|Dispatcher
block|{
specifier|public
name|VectorizationDispatcher
parameter_list|(
name|PhysicalContext
name|pctx
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|Object
name|dispatch
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|currTask
init|=
operator|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
operator|)
name|nd
decl_stmt|;
if|if
condition|(
name|currTask
operator|instanceof
name|MapRedTask
condition|)
block|{
name|boolean
name|ret
init|=
name|validateMRTask
argument_list|(
operator|(
name|MapRedTask
operator|)
name|currTask
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
condition|)
block|{
name|vectorizeMRTask
argument_list|(
operator|(
name|MapRedTask
operator|)
name|currTask
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|validateMRTask
parameter_list|(
name|MapRedTask
name|mrTask
parameter_list|)
throws|throws
name|SemanticException
block|{
name|MapWork
name|mapWork
init|=
name|mrTask
operator|.
name|getWork
argument_list|()
operator|.
name|getMapWork
argument_list|()
decl_stmt|;
comment|// Validate the input format
for|for
control|(
name|String
name|path
range|:
name|mapWork
operator|.
name|getPathToPartitionInfo
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|PartitionDesc
name|pd
init|=
name|mapWork
operator|.
name|getPathToPartitionInfo
argument_list|()
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|interfaceList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|pd
operator|.
name|getInputFileFormatClass
argument_list|()
operator|.
name|getInterfaces
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|interfaceList
operator|.
name|contains
argument_list|(
name|VectorizedInputFormatInterface
operator|.
name|class
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Input format: "
operator|+
name|pd
operator|.
name|getInputFileFormatClassName
argument_list|()
operator|+
literal|", doesn't provide vectorized input"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
name|ValidationNodeProcessor
name|vnp
init|=
operator|new
name|ValidationNodeProcessor
argument_list|()
decl_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R1"
argument_list|,
name|TableScanOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|".*"
operator|+
name|FileSinkOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
argument_list|,
name|vnp
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R2"
argument_list|,
name|TableScanOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|".*"
operator|+
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
argument_list|,
name|vnp
argument_list|)
expr_stmt|;
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|vnp
argument_list|,
name|opRules
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
comment|// iterator the mapper operator tree
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|addAll
argument_list|(
name|mapWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|nodeOutput
init|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
name|nodeOutput
argument_list|)
expr_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|nodeOutput
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|nodeOutput
operator|.
name|get
argument_list|(
name|n
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|Boolean
operator|)
name|nodeOutput
operator|.
name|get
argument_list|(
name|n
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|vectorizeMRTask
parameter_list|(
name|MapRedTask
name|mrTask
parameter_list|)
throws|throws
name|SemanticException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Vectorizing task..."
argument_list|)
expr_stmt|;
name|MapWork
name|mapWork
init|=
name|mrTask
operator|.
name|getWork
argument_list|()
operator|.
name|getMapWork
argument_list|()
decl_stmt|;
name|mapWork
operator|.
name|setVectorMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
name|VectorizationNodeProcessor
name|vnp
init|=
operator|new
name|VectorizationNodeProcessor
argument_list|(
name|mrTask
argument_list|)
decl_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R1"
argument_list|,
name|TableScanOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|".*"
operator|+
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
argument_list|,
name|vnp
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R2"
argument_list|,
name|TableScanOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|".*"
operator|+
name|FileSinkOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
argument_list|,
name|vnp
argument_list|)
expr_stmt|;
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|vnp
argument_list|,
name|opRules
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|PreOrderWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
comment|// iterator the mapper operator tree
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|addAll
argument_list|(
name|mapWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|nodeOutput
init|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
name|nodeOutput
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|columnVectorTypes
init|=
name|vnp
operator|.
name|getScratchColumnVectorTypes
argument_list|()
decl_stmt|;
name|mapWork
operator|.
name|setScratchColumnVectorTypes
argument_list|(
name|columnVectorTypes
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|columnMap
init|=
name|vnp
operator|.
name|getScratchColumnMap
argument_list|()
decl_stmt|;
name|mapWork
operator|.
name|setScratchColumnMap
argument_list|(
name|columnMap
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"vectorTypes: %s"
argument_list|,
name|columnVectorTypes
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"columnMap: %s"
argument_list|,
name|columnMap
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
class|class
name|ValidationNodeProcessor
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
for|for
control|(
name|Node
name|n
range|:
name|stack
control|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
init|=
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
operator|)
name|n
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|OperatorType
operator|.
name|REDUCESINK
argument_list|)
operator|&&
name|op
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|OperatorType
operator|.
name|GROUPBY
argument_list|)
condition|)
block|{
return|return
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
return|;
block|}
name|boolean
name|ret
init|=
name|validateOperator
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ret
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Operator: "
operator|+
name|op
operator|.
name|getName
argument_list|()
operator|+
literal|" could not be vectorized."
argument_list|)
expr_stmt|;
return|return
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
return|return
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
return|;
block|}
block|}
class|class
name|VectorizationNodeProcessor
implements|implements
name|NodeProcessor
block|{
specifier|private
specifier|final
name|MapWork
name|mWork
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|VectorizationContext
argument_list|>
name|vectorizationContexts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|VectorizationContext
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|,
name|VectorizationContext
argument_list|>
name|vContextsByTSOp
init|=
operator|new
name|HashMap
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|,
name|VectorizationContext
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|opsDone
init|=
operator|new
name|HashSet
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|VectorizationNodeProcessor
parameter_list|(
name|MapRedTask
name|mrTask
parameter_list|)
block|{
name|this
operator|.
name|mWork
operator|=
name|mrTask
operator|.
name|getWork
argument_list|()
operator|.
name|getMapWork
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|getScratchColumnVectorTypes
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|scratchColumnVectorTypes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|onefile
range|:
name|vectorizationContexts
operator|.
name|keySet
argument_list|()
control|)
block|{
name|VectorizationContext
name|vc
init|=
name|vectorizationContexts
operator|.
name|get
argument_list|(
name|onefile
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cmap
init|=
name|vc
operator|.
name|getOutputColumnTypeMap
argument_list|()
decl_stmt|;
name|scratchColumnVectorTypes
operator|.
name|put
argument_list|(
name|onefile
argument_list|,
name|cmap
argument_list|)
expr_stmt|;
block|}
return|return
name|scratchColumnVectorTypes
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|getScratchColumnMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|scratchColumnMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|oneFile
range|:
name|vectorizationContexts
operator|.
name|keySet
argument_list|()
control|)
block|{
name|VectorizationContext
name|vc
init|=
name|vectorizationContexts
operator|.
name|get
argument_list|(
name|oneFile
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|cmap
init|=
name|vc
operator|.
name|getColumnMap
argument_list|()
decl_stmt|;
name|scratchColumnMap
operator|.
name|put
argument_list|(
name|oneFile
argument_list|,
name|cmap
argument_list|)
expr_stmt|;
block|}
return|return
name|scratchColumnMap
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
init|=
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
operator|)
name|nd
decl_stmt|;
name|VectorizationContext
name|vContext
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|op
operator|instanceof
name|TableScanOperator
condition|)
block|{
name|vContext
operator|=
name|getVectorizationContext
argument_list|(
name|op
argument_list|,
name|physicalContext
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|onefile
range|:
name|mWork
operator|.
name|getPathToAliases
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|aliases
init|=
name|mWork
operator|.
name|getPathToAliases
argument_list|()
operator|.
name|get
argument_list|(
name|onefile
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|aliases
control|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|opRoot
init|=
name|mWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
name|opRoot
condition|)
block|{
comment|// The same vectorization context is copied multiple times into
comment|// the MapWork scratch columnMap
comment|// Each partition gets a copy
comment|//
name|vContext
operator|.
name|setFileKey
argument_list|(
name|onefile
argument_list|)
expr_stmt|;
name|vectorizationContexts
operator|.
name|put
argument_list|(
name|onefile
argument_list|,
name|vContext
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|vContextsByTSOp
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|vContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|stack
operator|.
name|size
argument_list|()
operator|>
literal|1
assert|;
comment|// Walk down the stack of operators until we found one willing to give us a context.
comment|// At the bottom will be the TS operator, guaranteed to have a context
name|int
name|i
init|=
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|2
decl_stmt|;
while|while
condition|(
name|vContext
operator|==
literal|null
condition|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|opParent
init|=
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
operator|)
name|stack
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|vContext
operator|=
name|vContextsByTSOp
operator|.
name|get
argument_list|(
name|opParent
argument_list|)
expr_stmt|;
operator|--
name|i
expr_stmt|;
block|}
block|}
assert|assert
name|vContext
operator|!=
literal|null
assert|;
if|if
condition|(
name|op
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|OperatorType
operator|.
name|REDUCESINK
argument_list|)
operator|&&
name|op
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|OperatorType
operator|.
name|GROUPBY
argument_list|)
condition|)
block|{
comment|// No need to vectorize
if|if
condition|(
operator|!
name|opsDone
operator|.
name|contains
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|opsDone
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
if|if
condition|(
operator|!
name|opsDone
operator|.
name|contains
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|vectorOp
init|=
name|vectorizeOperator
argument_list|(
name|op
argument_list|,
name|vContext
argument_list|)
decl_stmt|;
name|opsDone
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|vectorOp
operator|!=
name|op
condition|)
block|{
name|opsDone
operator|.
name|add
argument_list|(
name|vectorOp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|vectorOp
operator|instanceof
name|VectorizationContextRegion
condition|)
block|{
name|VectorizationContextRegion
name|vcRegion
init|=
operator|(
name|VectorizationContextRegion
operator|)
name|vectorOp
decl_stmt|;
name|VectorizationContext
name|vOutContext
init|=
name|vcRegion
operator|.
name|getOuputVectorizationContext
argument_list|()
decl_stmt|;
name|vContextsByTSOp
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|vOutContext
argument_list|)
expr_stmt|;
name|vectorizationContexts
operator|.
name|put
argument_list|(
name|vOutContext
operator|.
name|getFileKey
argument_list|()
argument_list|,
name|vOutContext
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ValidatorVectorizationContext
extends|extends
name|VectorizationContext
block|{
specifier|private
name|ValidatorVectorizationContext
parameter_list|()
block|{
name|super
argument_list|(
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|getInputColumnIndex
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|getInputColumnIndex
parameter_list|(
name|ExprNodeColumnDesc
name|colExpr
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|PhysicalContext
name|resolve
parameter_list|(
name|PhysicalContext
name|pctx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|this
operator|.
name|physicalContext
operator|=
name|pctx
expr_stmt|;
name|boolean
name|vectorPath
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|pctx
operator|.
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|vectorPath
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Vectorization is disabled"
argument_list|)
expr_stmt|;
return|return
name|pctx
return|;
block|}
comment|// create dispatcher and graph walker
name|Dispatcher
name|disp
init|=
operator|new
name|VectorizationDispatcher
argument_list|(
name|pctx
argument_list|)
decl_stmt|;
name|TaskGraphWalker
name|ogw
init|=
operator|new
name|TaskGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
comment|// get all the tasks nodes from root task
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|addAll
argument_list|(
name|pctx
operator|.
name|getRootTasks
argument_list|()
argument_list|)
expr_stmt|;
comment|// begin to walk through the task tree.
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|pctx
return|;
block|}
name|boolean
name|validateOperator
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|)
block|{
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|op
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|MAPJOIN
case|:
if|if
condition|(
name|op
operator|instanceof
name|MapJoinOperator
condition|)
block|{
name|ret
operator|=
name|validateMapJoinOperator
argument_list|(
operator|(
name|MapJoinOperator
operator|)
name|op
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|GROUPBY
case|:
name|ret
operator|=
name|validateGroupByOperator
argument_list|(
operator|(
name|GroupByOperator
operator|)
name|op
argument_list|)
expr_stmt|;
break|break;
case|case
name|FILTER
case|:
name|ret
operator|=
name|validateFilterOperator
argument_list|(
operator|(
name|FilterOperator
operator|)
name|op
argument_list|)
expr_stmt|;
break|break;
case|case
name|SELECT
case|:
name|ret
operator|=
name|validateSelectOperator
argument_list|(
operator|(
name|SelectOperator
operator|)
name|op
argument_list|)
expr_stmt|;
break|break;
case|case
name|REDUCESINK
case|:
name|ret
operator|=
name|validateReduceSinkOperator
argument_list|(
operator|(
name|ReduceSinkOperator
operator|)
name|op
argument_list|)
expr_stmt|;
break|break;
case|case
name|TABLESCAN
case|:
name|ret
operator|=
name|validateTableScanOperator
argument_list|(
operator|(
name|TableScanOperator
operator|)
name|op
argument_list|)
expr_stmt|;
break|break;
case|case
name|FILESINK
case|:
case|case
name|LIMIT
case|:
name|ret
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
name|ret
operator|=
literal|false
expr_stmt|;
break|break;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|boolean
name|validateTableScanOperator
parameter_list|(
name|TableScanOperator
name|op
parameter_list|)
block|{
name|TableScanDesc
name|desc
init|=
name|op
operator|.
name|getConf
argument_list|()
decl_stmt|;
return|return
operator|!
name|desc
operator|.
name|isGatherStats
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|validateMapJoinOperator
parameter_list|(
name|MapJoinOperator
name|op
parameter_list|)
block|{
name|MapJoinDesc
name|desc
init|=
name|op
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|byte
name|posBigTable
init|=
operator|(
name|byte
operator|)
name|desc
operator|.
name|getPosBigTable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|filterExprs
init|=
name|desc
operator|.
name|getFilters
argument_list|()
operator|.
name|get
argument_list|(
name|posBigTable
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keyExprs
init|=
name|desc
operator|.
name|getKeys
argument_list|()
operator|.
name|get
argument_list|(
name|posBigTable
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|valueExprs
init|=
name|desc
operator|.
name|getExprs
argument_list|()
operator|.
name|get
argument_list|(
name|posBigTable
argument_list|)
decl_stmt|;
return|return
name|validateExprNodeDesc
argument_list|(
name|filterExprs
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
operator|&&
name|validateExprNodeDesc
argument_list|(
name|keyExprs
argument_list|)
operator|&&
name|validateExprNodeDesc
argument_list|(
name|valueExprs
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|validateReduceSinkOperator
parameter_list|(
name|ReduceSinkOperator
name|op
parameter_list|)
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keyDescs
init|=
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getKeyCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|partitionDescs
init|=
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getPartitionCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|valueDesc
init|=
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getValueCols
argument_list|()
decl_stmt|;
return|return
name|validateExprNodeDesc
argument_list|(
name|keyDescs
argument_list|)
operator|&&
name|validateExprNodeDesc
argument_list|(
name|partitionDescs
argument_list|)
operator|&&
name|validateExprNodeDesc
argument_list|(
name|valueDesc
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|validateSelectOperator
parameter_list|(
name|SelectOperator
name|op
parameter_list|)
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|descList
init|=
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getColList
argument_list|()
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|desc
range|:
name|descList
control|)
block|{
name|boolean
name|ret
init|=
name|validateExprNodeDesc
argument_list|(
name|desc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ret
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|validateFilterOperator
parameter_list|(
name|FilterOperator
name|op
parameter_list|)
block|{
name|ExprNodeDesc
name|desc
init|=
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getPredicate
argument_list|()
decl_stmt|;
return|return
name|validateExprNodeDesc
argument_list|(
name|desc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|validateGroupByOperator
parameter_list|(
name|GroupByOperator
name|op
parameter_list|)
block|{
name|boolean
name|ret
init|=
name|validateExprNodeDesc
argument_list|(
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getKeys
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ret
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|validateAggregationDesc
argument_list|(
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getAggregators
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|validateExprNodeDesc
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|descs
parameter_list|)
block|{
return|return
name|validateExprNodeDesc
argument_list|(
name|descs
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|validateExprNodeDesc
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|descs
parameter_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
name|mode
parameter_list|)
block|{
for|for
control|(
name|ExprNodeDesc
name|d
range|:
name|descs
control|)
block|{
name|boolean
name|ret
init|=
name|validateExprNodeDesc
argument_list|(
name|d
argument_list|,
name|mode
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ret
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|validateAggregationDesc
parameter_list|(
name|List
argument_list|<
name|AggregationDesc
argument_list|>
name|descs
parameter_list|)
block|{
for|for
control|(
name|AggregationDesc
name|d
range|:
name|descs
control|)
block|{
name|boolean
name|ret
init|=
name|validateAggregationDesc
argument_list|(
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ret
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|validateExprNodeDescRecursive
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
name|boolean
name|ret
init|=
name|validateDataType
argument_list|(
name|desc
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|getTypeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ret
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|desc
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
name|ExprNodeGenericFuncDesc
name|d
init|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|desc
decl_stmt|;
name|boolean
name|r
init|=
name|validateGenericUdf
argument_list|(
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|r
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|desc
operator|.
name|getChildren
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExprNodeDesc
name|d
range|:
name|desc
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|boolean
name|r
init|=
name|validateExprNodeDescRecursive
argument_list|(
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|r
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|validateExprNodeDesc
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
return|return
name|validateExprNodeDesc
argument_list|(
name|desc
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|PROJECTION
argument_list|)
return|;
block|}
name|boolean
name|validateExprNodeDesc
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
name|mode
parameter_list|)
block|{
if|if
condition|(
operator|!
name|validateExprNodeDescRecursive
argument_list|(
name|desc
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|VectorizationContext
name|vc
init|=
operator|new
name|ValidatorVectorizationContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|desc
argument_list|,
name|mode
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to vectorize"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|validateGenericUdf
parameter_list|(
name|ExprNodeGenericFuncDesc
name|genericUDFExpr
parameter_list|)
block|{
if|if
condition|(
name|VectorizationContext
operator|.
name|isCustomUDF
argument_list|(
name|genericUDFExpr
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|GenericUDF
name|genericUDF
init|=
name|genericUDFExpr
operator|.
name|getGenericUDF
argument_list|()
decl_stmt|;
if|if
condition|(
name|genericUDF
operator|instanceof
name|GenericUDFBridge
condition|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|UDF
argument_list|>
name|udf
init|=
operator|(
operator|(
name|GenericUDFBridge
operator|)
name|genericUDF
operator|)
operator|.
name|getUdfClass
argument_list|()
decl_stmt|;
return|return
name|supportedGenericUDFs
operator|.
name|contains
argument_list|(
name|udf
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|supportedGenericUDFs
operator|.
name|contains
argument_list|(
name|genericUDF
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
name|boolean
name|validateAggregationDesc
parameter_list|(
name|AggregationDesc
name|aggDesc
parameter_list|)
block|{
if|if
condition|(
operator|!
name|supportedAggregationUdfs
operator|.
name|contains
argument_list|(
name|aggDesc
operator|.
name|getGenericUDAFName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|aggDesc
operator|.
name|getParameters
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|validateExprNodeDesc
argument_list|(
name|aggDesc
operator|.
name|getParameters
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|validateDataType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|supportedDataTypes
operator|.
name|contains
argument_list|(
name|type
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|VectorizationContext
name|getVectorizationContext
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|,
name|PhysicalContext
name|pctx
parameter_list|)
block|{
name|RowResolver
name|rr
init|=
name|pctx
operator|.
name|getParseContext
argument_list|()
operator|.
name|getOpParseCtx
argument_list|()
operator|.
name|get
argument_list|(
name|op
argument_list|)
operator|.
name|getRowResolver
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|cmap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|columnCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ColumnInfo
name|c
range|:
name|rr
operator|.
name|getColumnInfos
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|c
operator|.
name|getIsVirtualCol
argument_list|()
condition|)
block|{
name|cmap
operator|.
name|put
argument_list|(
name|c
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|columnCount
operator|++
argument_list|)
expr_stmt|;
block|}
block|}
name|Table
name|tab
init|=
name|pctx
operator|.
name|getParseContext
argument_list|()
operator|.
name|getTopToTable
argument_list|()
operator|.
name|get
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|tab
operator|.
name|getPartitionKeys
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FieldSchema
name|fs
range|:
name|tab
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|cmap
operator|.
name|put
argument_list|(
name|fs
operator|.
name|getName
argument_list|()
argument_list|,
name|columnCount
operator|++
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|VectorizationContext
argument_list|(
name|cmap
argument_list|,
name|columnCount
argument_list|)
return|;
block|}
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|vectorizeOperator
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|,
name|VectorizationContext
name|vContext
parameter_list|)
throws|throws
name|HiveException
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|vectorOp
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|op
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|MAPJOIN
case|:
case|case
name|GROUPBY
case|:
case|case
name|FILTER
case|:
case|case
name|SELECT
case|:
case|case
name|FILESINK
case|:
case|case
name|REDUCESINK
case|:
case|case
name|LIMIT
case|:
name|vectorOp
operator|=
name|OperatorFactory
operator|.
name|getVectorOperator
argument_list|(
name|op
operator|.
name|getConf
argument_list|()
argument_list|,
name|vContext
argument_list|)
expr_stmt|;
break|break;
default|default:
name|vectorOp
operator|=
name|op
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|vectorOp
operator|!=
name|op
condition|)
block|{
if|if
condition|(
name|op
operator|.
name|getParentOperators
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|vectorOp
operator|.
name|setParentOperators
argument_list|(
name|op
operator|.
name|getParentOperators
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|p
range|:
name|op
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
name|p
operator|.
name|replaceChild
argument_list|(
name|op
argument_list|,
name|vectorOp
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|op
operator|.
name|getChildOperators
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|vectorOp
operator|.
name|setChildOperators
argument_list|(
name|op
operator|.
name|getChildOperators
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|c
range|:
name|op
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
name|c
operator|.
name|replaceParent
argument_list|(
name|op
argument_list|,
name|vectorOp
argument_list|)
expr_stmt|;
block|}
block|}
operator|(
operator|(
name|AbstractOperatorDesc
operator|)
name|vectorOp
operator|.
name|getConf
argument_list|()
operator|)
operator|.
name|setVectorMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|vectorOp
return|;
block|}
block|}
end_class

end_unit

