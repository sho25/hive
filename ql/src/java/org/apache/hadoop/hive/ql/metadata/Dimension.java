begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
package|;
end_package

begin_comment
comment|/**  * Hive consists of a fixed, well defined set of Dimensions. Each dimension has  * a type and id. Dimensions link columns in different tables  *   */
end_comment

begin_class
specifier|public
class|class
name|Dimension
block|{
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|dimensionType
decl_stmt|;
specifier|protected
name|String
name|dimensionId
decl_stmt|;
specifier|public
name|Dimension
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|t
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|dimensionType
operator|=
name|t
expr_stmt|;
name|dimensionId
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getDimensionType
parameter_list|()
block|{
return|return
name|dimensionType
return|;
block|}
specifier|public
name|String
name|getDimensionId
parameter_list|()
block|{
return|return
name|dimensionId
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|Dimension
condition|)
block|{
name|Dimension
name|d
init|=
operator|(
name|Dimension
operator|)
name|o
decl_stmt|;
return|return
operator|(
name|dimensionId
operator|.
name|equals
argument_list|(
name|d
operator|.
name|dimensionId
argument_list|)
operator|&&
operator|(
name|dimensionType
operator|==
name|d
operator|.
name|dimensionType
operator|)
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Type="
operator|+
name|dimensionType
operator|.
name|getName
argument_list|()
operator|+
literal|","
operator|+
literal|"Id="
operator|+
name|dimensionId
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|dimensionId
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|dimensionId
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|dimensionType
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|dimensionType
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|dimensionType
operator|.
name|hashCode
argument_list|()
operator|^
name|dimensionId
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

