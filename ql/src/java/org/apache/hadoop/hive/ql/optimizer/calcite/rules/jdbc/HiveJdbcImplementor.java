begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|JavaTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|jdbc
operator|.
name|JdbcImplementor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|tree
operator|.
name|Expressions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|CorrelationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|JoinConditionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|JoinType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlDialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlNodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_class
specifier|public
class|class
name|HiveJdbcImplementor
extends|extends
name|JdbcImplementor
block|{
specifier|public
name|HiveJdbcImplementor
parameter_list|(
name|SqlDialect
name|dialect
parameter_list|,
name|JavaTypeFactory
name|typeFactory
parameter_list|)
block|{
name|super
argument_list|(
name|dialect
argument_list|,
name|typeFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|visit
parameter_list|(
name|Project
name|e
parameter_list|)
block|{
comment|// This variant keeps the column aliases instead of producing STAR
name|Result
name|x
init|=
name|visitChild
argument_list|(
literal|0
argument_list|,
name|e
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
name|parseCorrelTable
argument_list|(
name|e
argument_list|,
name|x
argument_list|)
expr_stmt|;
specifier|final
name|Builder
name|builder
init|=
name|x
operator|.
name|builder
argument_list|(
name|e
argument_list|,
name|Clause
operator|.
name|SELECT
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SqlNode
argument_list|>
name|selectList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|ref
range|:
name|e
operator|.
name|getChildExps
argument_list|()
control|)
block|{
name|SqlNode
name|sqlExpr
init|=
name|builder
operator|.
name|context
operator|.
name|toSql
argument_list|(
literal|null
argument_list|,
name|ref
argument_list|)
decl_stmt|;
name|addSelect
argument_list|(
name|selectList
argument_list|,
name|sqlExpr
argument_list|,
name|e
operator|.
name|getRowType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setSelect
argument_list|(
operator|new
name|SqlNodeList
argument_list|(
name|selectList
argument_list|,
name|POS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|result
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|visit
parameter_list|(
name|Sort
name|e
parameter_list|)
block|{
name|Result
name|x
init|=
name|visitChild
argument_list|(
literal|0
argument_list|,
name|e
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
name|Builder
name|builder
init|=
name|x
operator|.
name|builder
argument_list|(
name|e
argument_list|,
name|Clause
operator|.
name|ORDER_BY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SqlNode
argument_list|>
name|orderByList
init|=
name|Expressions
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|RelFieldCollation
name|field
range|:
name|e
operator|.
name|getCollation
argument_list|()
operator|.
name|getFieldCollations
argument_list|()
control|)
block|{
name|builder
operator|.
name|addOrderItem
argument_list|(
name|orderByList
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
comment|// Create select list as we want to keep the column aliases
comment|// instead of producing STAR
specifier|final
name|List
argument_list|<
name|SqlNode
argument_list|>
name|selectList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|e
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RexInputRef
name|ref
init|=
name|RexInputRef
operator|.
name|of
argument_list|(
name|i
argument_list|,
name|e
operator|.
name|getRowType
argument_list|()
argument_list|)
decl_stmt|;
name|SqlNode
name|sqlExpr
init|=
name|builder
operator|.
name|context
operator|.
name|toSql
argument_list|(
literal|null
argument_list|,
name|ref
argument_list|)
decl_stmt|;
name|addSelect
argument_list|(
name|selectList
argument_list|,
name|sqlExpr
argument_list|,
name|e
operator|.
name|getRowType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setSelect
argument_list|(
operator|new
name|SqlNodeList
argument_list|(
name|selectList
argument_list|,
name|POS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|orderByList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setOrderBy
argument_list|(
operator|new
name|SqlNodeList
argument_list|(
name|orderByList
argument_list|,
name|POS
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|=
name|builder
operator|.
name|result
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|.
name|fetch
operator|!=
literal|null
condition|)
block|{
name|builder
operator|=
name|x
operator|.
name|builder
argument_list|(
name|e
argument_list|,
name|Clause
operator|.
name|FETCH
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setFetch
argument_list|(
name|builder
operator|.
name|context
operator|.
name|toSql
argument_list|(
literal|null
argument_list|,
name|e
operator|.
name|fetch
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|=
name|builder
operator|.
name|result
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|.
name|offset
operator|!=
literal|null
condition|)
block|{
name|builder
operator|=
name|x
operator|.
name|builder
argument_list|(
name|e
argument_list|,
name|Clause
operator|.
name|OFFSET
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setOffset
argument_list|(
name|builder
operator|.
name|context
operator|.
name|toSql
argument_list|(
literal|null
argument_list|,
name|e
operator|.
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|=
name|builder
operator|.
name|result
argument_list|()
expr_stmt|;
block|}
return|return
name|x
return|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|visit
parameter_list|(
name|Join
name|e
parameter_list|)
block|{
specifier|final
name|Result
name|leftResult
init|=
name|visitChild
argument_list|(
literal|0
argument_list|,
name|e
operator|.
name|getLeft
argument_list|()
argument_list|)
operator|.
name|resetAlias
argument_list|()
decl_stmt|;
specifier|final
name|Result
name|rightResult
init|=
name|visitChild
argument_list|(
literal|1
argument_list|,
name|e
operator|.
name|getRight
argument_list|()
argument_list|)
operator|.
name|resetAlias
argument_list|()
decl_stmt|;
specifier|final
name|Context
name|leftContext
init|=
name|leftResult
operator|.
name|qualifiedContext
argument_list|()
decl_stmt|;
specifier|final
name|Context
name|rightContext
init|=
name|rightResult
operator|.
name|qualifiedContext
argument_list|()
decl_stmt|;
name|SqlNode
name|sqlCondition
init|=
literal|null
decl_stmt|;
name|SqlLiteral
name|condType
init|=
name|JoinConditionType
operator|.
name|ON
operator|.
name|symbol
argument_list|(
name|POS
argument_list|)
decl_stmt|;
name|JoinType
name|joinType
init|=
name|joinType
argument_list|(
name|e
operator|.
name|getJoinType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getJoinType
argument_list|()
operator|==
name|JoinRelType
operator|.
name|INNER
operator|&&
name|e
operator|.
name|getCondition
argument_list|()
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
name|joinType
operator|=
name|JoinType
operator|.
name|COMMA
expr_stmt|;
name|condType
operator|=
name|JoinConditionType
operator|.
name|NONE
operator|.
name|symbol
argument_list|(
name|POS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sqlCondition
operator|=
name|convertConditionToSqlNode
argument_list|(
name|e
operator|.
name|getCondition
argument_list|()
argument_list|,
name|leftContext
argument_list|,
name|rightContext
argument_list|,
name|e
operator|.
name|getLeft
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SqlNode
name|join
init|=
operator|new
name|SqlJoin
argument_list|(
name|POS
argument_list|,
name|leftResult
operator|.
name|asFrom
argument_list|()
argument_list|,
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
literal|false
argument_list|,
name|POS
argument_list|)
argument_list|,
name|joinType
operator|.
name|symbol
argument_list|(
name|POS
argument_list|)
argument_list|,
name|rightResult
operator|.
name|asFrom
argument_list|()
argument_list|,
name|condType
argument_list|,
name|sqlCondition
argument_list|)
decl_stmt|;
return|return
name|result
argument_list|(
name|join
argument_list|,
name|leftResult
argument_list|,
name|rightResult
argument_list|)
return|;
block|}
comment|/**    * Converts a {@link RexNode} condition into a {@link SqlNode}.    *    * @param node            Join condition    * @param leftContext     Left context    * @param rightContext    Right context    * @param leftFieldCount  Number of fields on left result    * @return SqlNode that represents the condition    */
specifier|public
specifier|static
name|SqlNode
name|convertConditionToSqlNode
parameter_list|(
name|RexNode
name|node
parameter_list|,
name|Context
name|leftContext
parameter_list|,
name|Context
name|rightContext
parameter_list|,
name|int
name|leftFieldCount
parameter_list|)
block|{
comment|// This variant replaces the default case for a call so it does not
comment|// throw an Exception
if|if
condition|(
name|node
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
return|return
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
literal|true
argument_list|,
name|POS
argument_list|)
return|;
block|}
if|if
condition|(
name|node
operator|.
name|isAlwaysFalse
argument_list|()
condition|)
block|{
return|return
name|SqlLiteral
operator|.
name|createBoolean
argument_list|(
literal|false
argument_list|,
name|POS
argument_list|)
return|;
block|}
if|if
condition|(
name|node
operator|instanceof
name|RexInputRef
condition|)
block|{
name|Context
name|joinContext
init|=
name|leftContext
operator|.
name|implementor
argument_list|()
operator|.
name|joinContext
argument_list|(
name|leftContext
argument_list|,
name|rightContext
argument_list|)
decl_stmt|;
return|return
name|joinContext
operator|.
name|toSql
argument_list|(
literal|null
argument_list|,
name|node
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|node
operator|instanceof
name|RexCall
operator|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|node
argument_list|)
throw|;
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
decl_stmt|;
specifier|final
name|SqlOperator
name|op
decl_stmt|;
specifier|final
name|Context
name|joinContext
decl_stmt|;
switch|switch
condition|(
name|node
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|AND
case|:
case|case
name|OR
case|:
name|operands
operator|=
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
expr_stmt|;
name|op
operator|=
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperator
argument_list|()
expr_stmt|;
name|SqlNode
name|sqlCondition
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
name|operands
control|)
block|{
name|SqlNode
name|x
init|=
name|convertConditionToSqlNode
argument_list|(
name|operand
argument_list|,
name|leftContext
argument_list|,
name|rightContext
argument_list|,
name|leftFieldCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|sqlCondition
operator|==
literal|null
condition|)
block|{
name|sqlCondition
operator|=
name|x
expr_stmt|;
block|}
else|else
block|{
name|sqlCondition
operator|=
name|op
operator|.
name|createCall
argument_list|(
name|POS
argument_list|,
name|sqlCondition
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sqlCondition
return|;
case|case
name|EQUALS
case|:
case|case
name|IS_NOT_DISTINCT_FROM
case|:
case|case
name|NOT_EQUALS
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
case|case
name|LESS_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
name|node
operator|=
name|stripCastFromString
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|operands
operator|=
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
expr_stmt|;
name|op
operator|=
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperator
argument_list|()
expr_stmt|;
if|if
condition|(
name|operands
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|&&
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|RexInputRef
operator|&&
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|RexInputRef
condition|)
block|{
specifier|final
name|RexInputRef
name|op0
init|=
operator|(
name|RexInputRef
operator|)
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexInputRef
name|op1
init|=
operator|(
name|RexInputRef
operator|)
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|op0
operator|.
name|getIndex
argument_list|()
operator|<
name|leftFieldCount
operator|&&
name|op1
operator|.
name|getIndex
argument_list|()
operator|>=
name|leftFieldCount
condition|)
block|{
comment|// Arguments were of form 'op0 = op1'
return|return
name|op
operator|.
name|createCall
argument_list|(
name|POS
argument_list|,
name|leftContext
operator|.
name|field
argument_list|(
name|op0
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|,
name|rightContext
operator|.
name|field
argument_list|(
name|op1
operator|.
name|getIndex
argument_list|()
operator|-
name|leftFieldCount
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|op1
operator|.
name|getIndex
argument_list|()
operator|<
name|leftFieldCount
operator|&&
name|op0
operator|.
name|getIndex
argument_list|()
operator|>=
name|leftFieldCount
condition|)
block|{
comment|// Arguments were of form 'op1 = op0'
return|return
name|reverseOperatorDirection
argument_list|(
name|op
argument_list|)
operator|.
name|createCall
argument_list|(
name|POS
argument_list|,
name|leftContext
operator|.
name|field
argument_list|(
name|op1
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|,
name|rightContext
operator|.
name|field
argument_list|(
name|op0
operator|.
name|getIndex
argument_list|()
operator|-
name|leftFieldCount
argument_list|)
argument_list|)
return|;
block|}
block|}
name|joinContext
operator|=
name|leftContext
operator|.
name|implementor
argument_list|()
operator|.
name|joinContext
argument_list|(
name|leftContext
argument_list|,
name|rightContext
argument_list|)
expr_stmt|;
return|return
name|joinContext
operator|.
name|toSql
argument_list|(
literal|null
argument_list|,
name|node
argument_list|)
return|;
case|case
name|IS_NULL
case|:
case|case
name|IS_NOT_NULL
case|:
name|operands
operator|=
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
expr_stmt|;
if|if
condition|(
name|operands
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|RexInputRef
condition|)
block|{
name|op
operator|=
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperator
argument_list|()
expr_stmt|;
specifier|final
name|RexInputRef
name|op0
init|=
operator|(
name|RexInputRef
operator|)
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|op0
operator|.
name|getIndex
argument_list|()
operator|<
name|leftFieldCount
condition|)
block|{
return|return
name|op
operator|.
name|createCall
argument_list|(
name|POS
argument_list|,
name|leftContext
operator|.
name|field
argument_list|(
name|op0
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|op
operator|.
name|createCall
argument_list|(
name|POS
argument_list|,
name|rightContext
operator|.
name|field
argument_list|(
name|op0
operator|.
name|getIndex
argument_list|()
operator|-
name|leftFieldCount
argument_list|)
argument_list|)
return|;
block|}
block|}
name|joinContext
operator|=
name|leftContext
operator|.
name|implementor
argument_list|()
operator|.
name|joinContext
argument_list|(
name|leftContext
argument_list|,
name|rightContext
argument_list|)
expr_stmt|;
return|return
name|joinContext
operator|.
name|toSql
argument_list|(
literal|null
argument_list|,
name|node
argument_list|)
return|;
default|default:
name|joinContext
operator|=
name|leftContext
operator|.
name|implementor
argument_list|()
operator|.
name|joinContext
argument_list|(
name|leftContext
argument_list|,
name|rightContext
argument_list|)
expr_stmt|;
return|return
name|joinContext
operator|.
name|toSql
argument_list|(
literal|null
argument_list|,
name|node
argument_list|)
return|;
block|}
block|}
comment|/** Removes cast from string.    *    *<p>For example, {@code x> CAST('2015-01-07' AS DATE)}    * becomes {@code x> '2015-01-07'}.    */
specifier|private
specifier|static
name|RexNode
name|stripCastFromString
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
switch|switch
condition|(
name|node
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
case|case
name|IS_NOT_DISTINCT_FROM
case|:
case|case
name|NOT_EQUALS
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
case|case
name|LESS_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
specifier|final
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|node
decl_stmt|;
specifier|final
name|RexNode
name|o0
init|=
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|o1
init|=
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|o0
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|CAST
operator|&&
name|o1
operator|.
name|getKind
argument_list|()
operator|!=
name|SqlKind
operator|.
name|CAST
condition|)
block|{
specifier|final
name|RexNode
name|o0b
init|=
operator|(
operator|(
name|RexCall
operator|)
name|o0
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|o0b
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
return|return
name|call
operator|.
name|clone
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|o0b
argument_list|,
name|o1
argument_list|)
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|o1
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|CAST
operator|&&
name|o0
operator|.
name|getKind
argument_list|()
operator|!=
name|SqlKind
operator|.
name|CAST
condition|)
block|{
specifier|final
name|RexNode
name|o1b
init|=
operator|(
operator|(
name|RexCall
operator|)
name|o1
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|o1b
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
return|return
name|call
operator|.
name|clone
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|o0
argument_list|,
name|o1b
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|node
return|;
block|}
specifier|private
specifier|static
name|SqlOperator
name|reverseOperatorDirection
parameter_list|(
name|SqlOperator
name|op
parameter_list|)
block|{
switch|switch
condition|(
name|op
operator|.
name|kind
condition|)
block|{
case|case
name|GREATER_THAN
case|:
return|return
name|SqlStdOperatorTable
operator|.
name|LESS_THAN
return|;
case|case
name|GREATER_THAN_OR_EQUAL
case|:
return|return
name|SqlStdOperatorTable
operator|.
name|LESS_THAN_OR_EQUAL
return|;
case|case
name|LESS_THAN
case|:
return|return
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN
return|;
case|case
name|LESS_THAN_OR_EQUAL
case|:
return|return
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN_OR_EQUAL
return|;
case|case
name|EQUALS
case|:
case|case
name|IS_NOT_DISTINCT_FROM
case|:
case|case
name|NOT_EQUALS
case|:
return|return
name|op
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|op
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|parseCorrelTable
parameter_list|(
name|RelNode
name|relNode
parameter_list|,
name|Result
name|x
parameter_list|)
block|{
for|for
control|(
name|CorrelationId
name|id
range|:
name|relNode
operator|.
name|getVariablesSet
argument_list|()
control|)
block|{
name|correlTableMap
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|x
operator|.
name|qualifiedContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Result
name|implement
parameter_list|(
name|RelNode
name|node
parameter_list|)
block|{
return|return
name|dispatch
argument_list|(
name|node
argument_list|)
return|;
block|}
block|}
end_class

end_unit

