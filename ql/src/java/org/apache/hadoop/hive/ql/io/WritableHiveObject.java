begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|HiveObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapredWork
import|;
end_import

begin_comment
comment|/**  * A wrapper over hive objects that allows interfacing with Map-Reduce  * serialization layer.  *  * Writable Hive Objects are deserialized only in reduce phase. 'Value'  * fields are encapsulated in WritableHiveObjects - and they are heterogenous.  * Hence we use prefix a tag to the actual object to figure out different   * kinds of objects  *   */
end_comment

begin_class
specifier|public
class|class
name|WritableHiveObject
implements|implements
name|Writable
implements|,
name|Configurable
block|{
specifier|protected
name|int
name|tag
decl_stmt|;
specifier|protected
name|HiveObject
name|ho
decl_stmt|;
specifier|protected
name|HiveObjectSerializer
name|hos
decl_stmt|;
specifier|protected
specifier|static
name|HiveObjectSerializer
index|[]
name|mapredDeserializer
decl_stmt|;
specifier|public
name|WritableHiveObject
parameter_list|()
block|{}
comment|/**    * Should not be called.    */
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected invocation"
argument_list|)
throw|;
block|}
comment|/**    *     * 1. we come through this code path when being initialized by map-reduce    *     *    In this case we fall back on one common deserializer - but create an    *    instance for each tag (since deserializers cannot deal with differing    *    schemas    *    *    It turns out that objects may be deserialized and again serialized. This    *    is done unnecessarily in some code paths in 0.15 - but is legitimate in     *    in the case of combiner.    *    * TODO: how to do this initialization without making this configurable? Need to     * find a very early hook!    */
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|mapredDeserializer
operator|==
literal|null
condition|)
block|{
name|mapredWork
name|gWork
init|=
name|Utilities
operator|.
name|getMapRedWork
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|setSerialFormat
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Meant to be accessed directly from test code only     *     * TODO: this deserializers need to be initialized with the schema    */
specifier|public
specifier|static
name|void
name|setSerialFormat
parameter_list|()
block|{
name|mapredDeserializer
operator|=
operator|new
name|HiveObjectSerializer
index|[
operator|(
name|int
operator|)
name|Byte
operator|.
name|MAX_VALUE
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Byte
operator|.
name|MAX_VALUE
condition|;
name|i
operator|++
control|)
block|{
comment|// we initialize a deserializer for each tag. in future we will
comment|// pass the schema in the deserializer as well. For now ..
comment|// TODO: use MetadataTypedSerDe to replace NaviiveSerializer.
name|mapredDeserializer
index|[
name|i
index|]
operator|=
operator|new
name|NaiiveSerializer
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * 2. when map-reduce initializes the object - we just read data.    *    for each row we read the tag and then use the deserializer for    *    that tag.    *    */
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|tag
operator|=
operator|(
name|int
operator|)
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
comment|// stash away the serializer in case we are written out
name|hos
operator|=
name|mapredDeserializer
index|[
name|tag
index|]
expr_stmt|;
name|ho
operator|=
name|hos
operator|.
name|deserialize
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
comment|/**    * 1. this constructor will be invoked by hive when creating writable  objects    */
specifier|public
name|WritableHiveObject
parameter_list|(
name|int
name|tag
parameter_list|,
name|HiveObject
name|ho
parameter_list|,
name|HiveObjectSerializer
name|hos
parameter_list|)
block|{
name|this
operator|.
name|tag
operator|=
name|tag
expr_stmt|;
name|this
operator|.
name|ho
operator|=
name|ho
expr_stmt|;
name|this
operator|.
name|hos
operator|=
name|hos
expr_stmt|;
block|}
comment|/**    * 2. when Hive instantiates Writable objects - we will repeatedly set a new object    */
specifier|public
name|void
name|setHo
parameter_list|(
name|HiveObject
name|ho
parameter_list|)
block|{
name|this
operator|.
name|ho
operator|=
name|ho
expr_stmt|;
block|}
comment|/**    * 3. and ask for the object to be serialized out    */
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|hos
operator|.
name|serialize
argument_list|(
name|ho
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HiveObject
name|getHo
parameter_list|()
block|{
return|return
operator|(
name|ho
operator|)
return|;
block|}
specifier|public
name|int
name|getTag
parameter_list|()
block|{
return|return
name|tag
return|;
block|}
block|}
end_class

end_unit

