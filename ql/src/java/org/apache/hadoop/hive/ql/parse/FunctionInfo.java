begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Class
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * The type information returned by the TypeRegistry  *  **/
end_comment

begin_class
specifier|public
class|class
name|FunctionInfo
block|{
specifier|private
name|TypeInfo
name|returnType
decl_stmt|;
specifier|private
name|String
name|UDFName
decl_stmt|;
specifier|private
name|boolean
name|hasUDF
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FunctionInfo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|FunctionInfo
parameter_list|(
name|TypeInfo
name|returnType
parameter_list|,
name|String
name|UDFName
parameter_list|)
block|{
name|this
operator|.
name|returnType
operator|=
name|returnType
expr_stmt|;
name|this
operator|.
name|UDFName
operator|=
name|UDFName
expr_stmt|;
name|this
operator|.
name|hasUDF
operator|=
operator|(
name|this
operator|.
name|UDFName
operator|!=
literal|null
operator|)
expr_stmt|;
block|}
specifier|public
name|FunctionInfo
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|returnClass
parameter_list|,
name|String
name|UDFName
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|TypeInfo
argument_list|(
name|returnClass
argument_list|)
argument_list|,
name|UDFName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TypeInfo
name|getReturnType
parameter_list|()
block|{
return|return
name|returnType
return|;
block|}
specifier|public
name|String
name|getUDFName
parameter_list|()
block|{
return|return
name|UDFName
return|;
block|}
specifier|public
name|boolean
name|hasUDF
parameter_list|()
block|{
return|return
name|hasUDF
return|;
block|}
block|}
end_class

end_unit

