begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
package|;
end_package

begin_comment
comment|/**  * A sample defines a subset of data based on sampling on a given dimension.  *   **/
end_comment

begin_class
specifier|public
class|class
name|Sample
block|{
specifier|protected
name|int
name|sampleNum
decl_stmt|;
specifier|protected
name|int
name|sampleFraction
decl_stmt|;
specifier|protected
name|Dimension
name|sampleDimension
decl_stmt|;
specifier|protected
name|int
name|moduloNum
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|public
name|Sample
parameter_list|(
name|int
name|num
parameter_list|,
name|int
name|fraction
parameter_list|,
name|Dimension
name|d
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|(
name|num
operator|<=
literal|0
operator|)
operator|||
operator|(
name|num
operator|>
name|fraction
operator|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Bad sample spec: "
operator|+
name|num
operator|+
literal|"/"
operator|+
name|fraction
argument_list|)
throw|;
block|}
name|sampleNum
operator|=
name|num
expr_stmt|;
name|moduloNum
operator|=
name|sampleNum
operator|-
literal|1
expr_stmt|;
name|sampleFraction
operator|=
name|fraction
expr_stmt|;
name|sampleDimension
operator|=
name|d
expr_stmt|;
block|}
comment|/**    * Given an arbitrary object, determine if it falls within this sample.    */
specifier|public
name|boolean
name|inSample
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
name|sampleDimension
operator|.
name|hashCode
argument_list|(
name|o
argument_list|)
operator|&
name|Integer
operator|.
name|MAX_VALUE
operator|)
operator|%
name|sampleFraction
operator|)
operator|==
name|moduloNum
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|Sample
condition|)
block|{
name|Sample
name|s
init|=
operator|(
name|Sample
operator|)
name|o
decl_stmt|;
return|return
operator|(
operator|(
name|sampleNum
operator|==
name|s
operator|.
name|sampleNum
operator|)
operator|&&
operator|(
name|sampleFraction
operator|==
name|s
operator|.
name|sampleFraction
operator|)
operator|&&
name|sampleDimension
operator|.
name|equals
argument_list|(
name|s
operator|.
name|sampleDimension
argument_list|)
operator|)
return|;
block|}
return|return
operator|(
literal|false
operator|)
return|;
block|}
specifier|public
name|int
name|getSampleNum
parameter_list|()
block|{
return|return
name|sampleNum
return|;
block|}
specifier|public
name|int
name|getSampleFraction
parameter_list|()
block|{
return|return
name|sampleFraction
return|;
block|}
specifier|public
name|Dimension
name|getSampleDimension
parameter_list|()
block|{
return|return
name|sampleDimension
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|sampleNum
operator|+
literal|"/"
operator|+
name|sampleFraction
operator|+
literal|"@("
operator|+
name|sampleDimension
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|sampleDimension
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|sampleDimension
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|sampleFraction
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|sampleNum
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

