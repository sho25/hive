begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|CommonToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|tree
operator|.
name|TreeWizard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|tree
operator|.
name|TreeWizard
operator|.
name|ContextVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExprNodeEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|PTFPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|WindowFunctionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|OrderExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|OrderSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|PTFInputSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|PTFQueryInputSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|PTFQueryInputType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|PartitionExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|PartitionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|PartitionedTableFunctionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|PartitioningSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|BoundarySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|WindowExpressionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|WindowFrameSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|WindowFunctionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|WindowSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|WindowType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PTFDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PTFDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|BoundaryDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|OrderDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|OrderExpressionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|PTFExpressionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|PTFInputDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|PTFQueryInputDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|PartitionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|PartitionedTableFunctionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|ShapeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|WindowFrameDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|WindowFunctionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|WindowTableFunctionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFLeadLag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|ptf
operator|.
name|TableFunctionEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|ptf
operator|.
name|TableFunctionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|ptf
operator|.
name|WindowingTableFunction
operator|.
name|WindowingTableFunctionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinarySerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|PTFTranslator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"org.apache.hadoop.hive.ql.parse"
argument_list|)
decl_stmt|;
name|HiveConf
name|hCfg
decl_stmt|;
name|LeadLagInfo
name|llInfo
decl_stmt|;
name|SemanticAnalyzer
name|semAly
decl_stmt|;
name|UnparseTranslator
name|unparseT
decl_stmt|;
name|RowResolver
name|inputRR
decl_stmt|;
name|PTFDesc
name|ptfDesc
decl_stmt|;
name|PTFInvocationSpec
name|ptfInvocation
decl_stmt|;
name|WindowingSpec
name|windowingSpec
decl_stmt|;
specifier|private
name|void
name|init
parameter_list|(
name|SemanticAnalyzer
name|semAly
parameter_list|,
name|HiveConf
name|hCfg
parameter_list|,
name|RowResolver
name|inputRR
parameter_list|,
name|UnparseTranslator
name|unparseT
parameter_list|)
block|{
name|this
operator|.
name|semAly
operator|=
name|semAly
expr_stmt|;
name|this
operator|.
name|hCfg
operator|=
name|hCfg
expr_stmt|;
name|this
operator|.
name|inputRR
operator|=
name|inputRR
expr_stmt|;
name|this
operator|.
name|unparseT
operator|=
name|unparseT
expr_stmt|;
name|llInfo
operator|=
operator|new
name|LeadLagInfo
argument_list|()
expr_stmt|;
block|}
specifier|public
name|PTFDesc
name|translate
parameter_list|(
name|PTFInvocationSpec
name|qSpec
parameter_list|,
name|SemanticAnalyzer
name|semAly
parameter_list|,
name|HiveConf
name|hCfg
parameter_list|,
name|RowResolver
name|inputRR
parameter_list|,
name|UnparseTranslator
name|unparseT
parameter_list|)
throws|throws
name|SemanticException
block|{
name|init
argument_list|(
name|semAly
argument_list|,
name|hCfg
argument_list|,
name|inputRR
argument_list|,
name|unparseT
argument_list|)
expr_stmt|;
name|ptfInvocation
operator|=
name|qSpec
expr_stmt|;
name|ptfDesc
operator|=
operator|new
name|PTFDesc
argument_list|()
expr_stmt|;
name|ptfDesc
operator|.
name|setCfg
argument_list|(
name|hCfg
argument_list|)
expr_stmt|;
name|ptfDesc
operator|.
name|setLlInfo
argument_list|(
name|llInfo
argument_list|)
expr_stmt|;
name|translatePTFChain
argument_list|()
expr_stmt|;
name|PTFDeserializer
operator|.
name|alterOutputOIForStreaming
argument_list|(
name|ptfDesc
argument_list|)
expr_stmt|;
return|return
name|ptfDesc
return|;
block|}
specifier|public
name|PTFDesc
name|translate
parameter_list|(
name|WindowingSpec
name|wdwSpec
parameter_list|,
name|SemanticAnalyzer
name|semAly
parameter_list|,
name|HiveConf
name|hCfg
parameter_list|,
name|RowResolver
name|inputRR
parameter_list|,
name|UnparseTranslator
name|unparseT
parameter_list|)
throws|throws
name|SemanticException
block|{
name|init
argument_list|(
name|semAly
argument_list|,
name|hCfg
argument_list|,
name|inputRR
argument_list|,
name|unparseT
argument_list|)
expr_stmt|;
name|windowingSpec
operator|=
name|wdwSpec
expr_stmt|;
name|ptfDesc
operator|=
operator|new
name|PTFDesc
argument_list|()
expr_stmt|;
name|ptfDesc
operator|.
name|setCfg
argument_list|(
name|hCfg
argument_list|)
expr_stmt|;
name|ptfDesc
operator|.
name|setLlInfo
argument_list|(
name|llInfo
argument_list|)
expr_stmt|;
name|WindowTableFunctionDef
name|wdwTFnDef
init|=
operator|new
name|WindowTableFunctionDef
argument_list|()
decl_stmt|;
name|ptfDesc
operator|.
name|setFuncDef
argument_list|(
name|wdwTFnDef
argument_list|)
expr_stmt|;
name|PTFQueryInputSpec
name|inpSpec
init|=
operator|new
name|PTFQueryInputSpec
argument_list|()
decl_stmt|;
name|inpSpec
operator|.
name|setType
argument_list|(
name|PTFQueryInputType
operator|.
name|WINDOWING
argument_list|)
expr_stmt|;
name|wdwTFnDef
operator|.
name|setInput
argument_list|(
name|translate
argument_list|(
name|inpSpec
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ShapeDetails
name|inpShape
init|=
name|wdwTFnDef
operator|.
name|getInput
argument_list|()
operator|.
name|getOutputShape
argument_list|()
decl_stmt|;
name|WindowingTableFunctionResolver
name|tFn
init|=
operator|(
name|WindowingTableFunctionResolver
operator|)
name|FunctionRegistry
operator|.
name|getTableFunctionResolver
argument_list|(
name|FunctionRegistry
operator|.
name|WINDOWING_TABLE_FUNCTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|tFn
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Internal Error: Unknown Table Function %s"
argument_list|,
name|FunctionRegistry
operator|.
name|WINDOWING_TABLE_FUNCTION
argument_list|)
argument_list|)
throw|;
block|}
name|wdwTFnDef
operator|.
name|setName
argument_list|(
name|FunctionRegistry
operator|.
name|WINDOWING_TABLE_FUNCTION
argument_list|)
expr_stmt|;
name|wdwTFnDef
operator|.
name|setResolverClassName
argument_list|(
name|tFn
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|wdwTFnDef
operator|.
name|setAlias
argument_list|(
literal|"ptf_"
operator|+
literal|1
argument_list|)
expr_stmt|;
name|wdwTFnDef
operator|.
name|setExpressionTreeString
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|wdwTFnDef
operator|.
name|setTransformsRawInput
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|tFn
operator|.
name|initialize
argument_list|(
name|hCfg
argument_list|,
name|ptfDesc
argument_list|,
name|wdwTFnDef
argument_list|)
expr_stmt|;
name|TableFunctionEvaluator
name|tEval
init|=
name|tFn
operator|.
name|getEvaluator
argument_list|()
decl_stmt|;
name|wdwTFnDef
operator|.
name|setTFunction
argument_list|(
name|tEval
argument_list|)
expr_stmt|;
name|wdwTFnDef
operator|.
name|setCarryForwardNames
argument_list|(
name|tFn
operator|.
name|carryForwardNames
argument_list|()
argument_list|)
expr_stmt|;
name|wdwTFnDef
operator|.
name|setRawInputShape
argument_list|(
name|inpShape
argument_list|)
expr_stmt|;
name|PartitioningSpec
name|partiSpec
init|=
name|wdwSpec
operator|.
name|getQueryPartitioningSpec
argument_list|()
decl_stmt|;
if|if
condition|(
name|partiSpec
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Invalid use of Windowing: there is no Partitioning associated with Windowing"
argument_list|)
throw|;
block|}
name|PartitionDef
name|partDef
init|=
name|translate
argument_list|(
name|inpShape
argument_list|,
name|wdwSpec
operator|.
name|getQueryPartitionSpec
argument_list|()
argument_list|)
decl_stmt|;
name|OrderDef
name|ordDef
init|=
name|translate
argument_list|(
name|inpShape
argument_list|,
name|wdwSpec
operator|.
name|getQueryOrderSpec
argument_list|()
argument_list|,
name|partDef
argument_list|)
decl_stmt|;
name|wdwTFnDef
operator|.
name|setPartition
argument_list|(
name|partDef
argument_list|)
expr_stmt|;
name|wdwTFnDef
operator|.
name|setOrder
argument_list|(
name|ordDef
argument_list|)
expr_stmt|;
comment|/*      * process Wdw functions      */
name|ArrayList
argument_list|<
name|WindowFunctionDef
argument_list|>
name|windowFunctions
init|=
operator|new
name|ArrayList
argument_list|<
name|WindowFunctionDef
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|wdwSpec
operator|.
name|getWindowExpressions
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|WindowExpressionSpec
name|expr
range|:
name|wdwSpec
operator|.
name|getWindowExpressions
argument_list|()
control|)
block|{
if|if
condition|(
name|expr
operator|instanceof
name|WindowFunctionSpec
condition|)
block|{
name|WindowFunctionDef
name|wFnDef
init|=
name|translate
argument_list|(
name|wdwTFnDef
argument_list|,
operator|(
name|WindowFunctionSpec
operator|)
name|expr
argument_list|)
decl_stmt|;
name|windowFunctions
operator|.
name|add
argument_list|(
name|wFnDef
argument_list|)
expr_stmt|;
block|}
block|}
name|wdwTFnDef
operator|.
name|setWindowFunctions
argument_list|(
name|windowFunctions
argument_list|)
expr_stmt|;
block|}
comment|/*      * set outputFromWdwFnProcessing      */
name|ArrayList
argument_list|<
name|String
argument_list|>
name|aliases
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldOIs
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|WindowFunctionDef
name|wFnDef
range|:
name|windowFunctions
control|)
block|{
name|aliases
operator|.
name|add
argument_list|(
name|wFnDef
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|wFnDef
operator|.
name|isPivotResult
argument_list|()
condition|)
block|{
name|fieldOIs
operator|.
name|add
argument_list|(
operator|(
operator|(
name|ListObjectInspector
operator|)
name|wFnDef
operator|.
name|getOI
argument_list|()
operator|)
operator|.
name|getListElementObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fieldOIs
operator|.
name|add
argument_list|(
name|wFnDef
operator|.
name|getOI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|PTFTranslator
operator|.
name|addInputColumnsToList
argument_list|(
name|inpShape
argument_list|,
name|aliases
argument_list|,
name|fieldOIs
argument_list|)
expr_stmt|;
name|StructObjectInspector
name|wdwOutOI
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|aliases
argument_list|,
name|fieldOIs
argument_list|)
decl_stmt|;
name|tFn
operator|.
name|setWdwProcessingOutputOI
argument_list|(
name|wdwOutOI
argument_list|)
expr_stmt|;
name|RowResolver
name|wdwOutRR
init|=
name|buildRowResolverForWindowing
argument_list|(
name|wdwTFnDef
argument_list|)
decl_stmt|;
name|ShapeDetails
name|wdwOutShape
init|=
name|setupShape
argument_list|(
name|wdwOutOI
argument_list|,
literal|null
argument_list|,
name|wdwOutRR
argument_list|)
decl_stmt|;
name|wdwTFnDef
operator|.
name|setOutputShape
argument_list|(
name|wdwOutShape
argument_list|)
expr_stmt|;
name|tFn
operator|.
name|setupOutputOI
argument_list|()
expr_stmt|;
name|PTFDeserializer
operator|.
name|alterOutputOIForStreaming
argument_list|(
name|ptfDesc
argument_list|)
expr_stmt|;
return|return
name|ptfDesc
return|;
block|}
specifier|private
name|void
name|translatePTFChain
parameter_list|()
throws|throws
name|SemanticException
block|{
name|Deque
argument_list|<
name|PTFInputSpec
argument_list|>
name|ptfChain
init|=
operator|new
name|ArrayDeque
argument_list|<
name|PTFInvocationSpec
operator|.
name|PTFInputSpec
argument_list|>
argument_list|()
decl_stmt|;
name|PTFInputSpec
name|currentSpec
init|=
name|ptfInvocation
operator|.
name|getFunction
argument_list|()
decl_stmt|;
while|while
condition|(
name|currentSpec
operator|!=
literal|null
condition|)
block|{
name|ptfChain
operator|.
name|push
argument_list|(
name|currentSpec
argument_list|)
expr_stmt|;
name|currentSpec
operator|=
name|currentSpec
operator|.
name|getInput
argument_list|()
expr_stmt|;
block|}
name|int
name|inputNum
init|=
literal|0
decl_stmt|;
name|PTFInputDef
name|currentDef
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|!
name|ptfChain
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|currentSpec
operator|=
name|ptfChain
operator|.
name|pop
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentSpec
operator|instanceof
name|PTFQueryInputSpec
condition|)
block|{
name|currentDef
operator|=
name|translate
argument_list|(
operator|(
name|PTFQueryInputSpec
operator|)
name|currentSpec
argument_list|,
name|inputNum
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentDef
operator|=
name|translate
argument_list|(
operator|(
name|PartitionedTableFunctionSpec
operator|)
name|currentSpec
argument_list|,
name|currentDef
argument_list|,
name|inputNum
argument_list|)
expr_stmt|;
block|}
name|inputNum
operator|++
expr_stmt|;
block|}
name|ptfDesc
operator|.
name|setFuncDef
argument_list|(
operator|(
name|PartitionedTableFunctionDef
operator|)
name|currentDef
argument_list|)
expr_stmt|;
block|}
specifier|private
name|PTFQueryInputDef
name|translate
parameter_list|(
name|PTFQueryInputSpec
name|spec
parameter_list|,
name|int
name|inpNum
parameter_list|)
throws|throws
name|SemanticException
block|{
name|PTFQueryInputDef
name|def
init|=
operator|new
name|PTFQueryInputDef
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|oi
init|=
name|PTFTranslator
operator|.
name|getStandardStructOI
argument_list|(
name|inputRR
argument_list|)
decl_stmt|;
name|ShapeDetails
name|shp
init|=
name|setupShape
argument_list|(
name|oi
argument_list|,
literal|null
argument_list|,
name|inputRR
argument_list|)
decl_stmt|;
name|def
operator|.
name|setOutputShape
argument_list|(
name|shp
argument_list|)
expr_stmt|;
name|def
operator|.
name|setType
argument_list|(
name|spec
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|def
operator|.
name|setAlias
argument_list|(
name|spec
operator|.
name|getSource
argument_list|()
operator|==
literal|null
condition|?
literal|"ptf_"
operator|+
name|inpNum
else|:
name|spec
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|def
return|;
block|}
specifier|private
name|PartitionedTableFunctionDef
name|translate
parameter_list|(
name|PartitionedTableFunctionSpec
name|spec
parameter_list|,
name|PTFInputDef
name|inpDef
parameter_list|,
name|int
name|inpNum
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TableFunctionResolver
name|tFn
init|=
name|FunctionRegistry
operator|.
name|getTableFunctionResolver
argument_list|(
name|spec
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tFn
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unknown Table Function %s"
argument_list|,
name|spec
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|PartitionedTableFunctionDef
name|def
init|=
operator|new
name|PartitionedTableFunctionDef
argument_list|()
decl_stmt|;
name|def
operator|.
name|setInput
argument_list|(
name|inpDef
argument_list|)
expr_stmt|;
name|def
operator|.
name|setName
argument_list|(
name|spec
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|def
operator|.
name|setResolverClassName
argument_list|(
name|tFn
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|def
operator|.
name|setAlias
argument_list|(
name|spec
operator|.
name|getAlias
argument_list|()
operator|==
literal|null
condition|?
literal|"ptf_"
operator|+
name|inpNum
else|:
name|spec
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
name|def
operator|.
name|setExpressionTreeString
argument_list|(
name|spec
operator|.
name|getAstNode
argument_list|()
operator|.
name|toStringTree
argument_list|()
argument_list|)
expr_stmt|;
name|def
operator|.
name|setTransformsRawInput
argument_list|(
name|tFn
operator|.
name|transformsRawInput
argument_list|()
argument_list|)
expr_stmt|;
comment|/*      * translate args      */
name|List
argument_list|<
name|ASTNode
argument_list|>
name|args
init|=
name|spec
operator|.
name|getArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ASTNode
name|expr
range|:
name|args
control|)
block|{
name|PTFExpressionDef
name|argDef
init|=
literal|null
decl_stmt|;
try|try
block|{
name|argDef
operator|=
name|buildExpressionDef
argument_list|(
name|inpDef
operator|.
name|getOutputShape
argument_list|()
argument_list|,
name|expr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|he
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|he
argument_list|)
throw|;
block|}
name|def
operator|.
name|addArg
argument_list|(
name|argDef
argument_list|)
expr_stmt|;
block|}
block|}
name|tFn
operator|.
name|initialize
argument_list|(
name|hCfg
argument_list|,
name|ptfDesc
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|TableFunctionEvaluator
name|tEval
init|=
name|tFn
operator|.
name|getEvaluator
argument_list|()
decl_stmt|;
name|def
operator|.
name|setTFunction
argument_list|(
name|tEval
argument_list|)
expr_stmt|;
name|def
operator|.
name|setCarryForwardNames
argument_list|(
name|tFn
operator|.
name|carryForwardNames
argument_list|()
argument_list|)
expr_stmt|;
name|tFn
operator|.
name|setupRawInputOI
argument_list|()
expr_stmt|;
if|if
condition|(
name|tFn
operator|.
name|transformsRawInput
argument_list|()
condition|)
block|{
name|StructObjectInspector
name|rawInOutOI
init|=
name|tEval
operator|.
name|getRawInputOI
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rawInOutColNames
init|=
name|tFn
operator|.
name|getRawInputColumnNames
argument_list|()
decl_stmt|;
name|RowResolver
name|rawInRR
init|=
name|buildRowResolverForPTF
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|,
name|spec
operator|.
name|getAlias
argument_list|()
argument_list|,
name|rawInOutOI
argument_list|,
name|rawInOutColNames
argument_list|,
name|inpDef
operator|.
name|getOutputShape
argument_list|()
operator|.
name|getRr
argument_list|()
argument_list|)
decl_stmt|;
name|ShapeDetails
name|rawInpShape
init|=
name|setupTableFnShape
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|,
name|inpDef
operator|.
name|getOutputShape
argument_list|()
argument_list|,
name|rawInOutOI
argument_list|,
name|rawInOutColNames
argument_list|,
name|rawInRR
argument_list|)
decl_stmt|;
name|def
operator|.
name|setRawInputShape
argument_list|(
name|rawInpShape
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|def
operator|.
name|setRawInputShape
argument_list|(
name|inpDef
operator|.
name|getOutputShape
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|translatePartitioning
argument_list|(
name|def
argument_list|,
name|spec
argument_list|)
expr_stmt|;
name|tFn
operator|.
name|setupOutputOI
argument_list|()
expr_stmt|;
name|StructObjectInspector
name|outputOI
init|=
name|tEval
operator|.
name|getOutputOI
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|outColNames
init|=
name|tFn
operator|.
name|getOutputColumnNames
argument_list|()
decl_stmt|;
name|RowResolver
name|outRR
init|=
name|buildRowResolverForPTF
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|,
name|spec
operator|.
name|getAlias
argument_list|()
argument_list|,
name|outputOI
argument_list|,
name|outColNames
argument_list|,
name|def
operator|.
name|getRawInputShape
argument_list|()
operator|.
name|getRr
argument_list|()
argument_list|)
decl_stmt|;
name|ShapeDetails
name|outputShape
init|=
name|setupTableFnShape
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|,
name|inpDef
operator|.
name|getOutputShape
argument_list|()
argument_list|,
name|outputOI
argument_list|,
name|outColNames
argument_list|,
name|outRR
argument_list|)
decl_stmt|;
name|def
operator|.
name|setOutputShape
argument_list|(
name|outputShape
argument_list|)
expr_stmt|;
name|def
operator|.
name|setReferencedColumns
argument_list|(
name|tFn
operator|.
name|getReferencedColumns
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|def
return|;
block|}
specifier|private
name|WindowFunctionDef
name|translate
parameter_list|(
name|WindowTableFunctionDef
name|wdwTFnDef
parameter_list|,
name|WindowFunctionSpec
name|spec
parameter_list|)
throws|throws
name|SemanticException
block|{
name|WindowFunctionInfo
name|wFnInfo
init|=
name|FunctionRegistry
operator|.
name|getWindowFunctionInfo
argument_list|(
name|spec
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|wFnInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_FUNCTION
operator|.
name|getMsg
argument_list|(
name|spec
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|WindowFunctionDef
name|def
init|=
operator|new
name|WindowFunctionDef
argument_list|()
decl_stmt|;
name|def
operator|.
name|setName
argument_list|(
name|spec
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|def
operator|.
name|setAlias
argument_list|(
name|spec
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
name|def
operator|.
name|setDistinct
argument_list|(
name|spec
operator|.
name|isDistinct
argument_list|()
argument_list|)
expr_stmt|;
name|def
operator|.
name|setExpressionTreeString
argument_list|(
name|spec
operator|.
name|getExpression
argument_list|()
operator|.
name|toStringTree
argument_list|()
argument_list|)
expr_stmt|;
name|def
operator|.
name|setStar
argument_list|(
name|spec
operator|.
name|isStar
argument_list|()
argument_list|)
expr_stmt|;
name|def
operator|.
name|setPivotResult
argument_list|(
name|wFnInfo
operator|.
name|isPivotResult
argument_list|()
argument_list|)
expr_stmt|;
name|ShapeDetails
name|inpShape
init|=
name|wdwTFnDef
operator|.
name|getRawInputShape
argument_list|()
decl_stmt|;
comment|/*      * translate args      */
name|ArrayList
argument_list|<
name|ASTNode
argument_list|>
name|args
init|=
name|spec
operator|.
name|getArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ASTNode
name|expr
range|:
name|args
control|)
block|{
name|PTFExpressionDef
name|argDef
init|=
literal|null
decl_stmt|;
try|try
block|{
name|argDef
operator|=
name|buildExpressionDef
argument_list|(
name|inpShape
argument_list|,
name|expr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|he
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|he
argument_list|)
throw|;
block|}
name|def
operator|.
name|addArg
argument_list|(
name|argDef
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|FunctionRegistry
operator|.
name|isRankingFunction
argument_list|(
name|spec
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|setupRankingArgs
argument_list|(
name|wdwTFnDef
argument_list|,
name|def
argument_list|,
name|spec
argument_list|)
expr_stmt|;
block|}
name|WindowSpec
name|wdwSpec
init|=
name|spec
operator|.
name|getWindowSpec
argument_list|()
decl_stmt|;
if|if
condition|(
name|wdwSpec
operator|!=
literal|null
condition|)
block|{
name|String
name|desc
init|=
name|spec
operator|.
name|toString
argument_list|()
decl_stmt|;
name|WindowFrameDef
name|wdwFrame
init|=
name|translate
argument_list|(
name|spec
operator|.
name|getName
argument_list|()
argument_list|,
name|inpShape
argument_list|,
name|wdwSpec
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|wFnInfo
operator|.
name|isSupportsWindow
argument_list|()
condition|)
block|{
name|BoundarySpec
name|start
init|=
name|wdwSpec
operator|.
name|getWindowFrame
argument_list|()
operator|.
name|getStart
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|.
name|getAmt
argument_list|()
operator|!=
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expecting left window frame boundary for "
operator|+
literal|"function %s to be unbounded. Found : %d"
argument_list|,
name|desc
argument_list|,
name|start
operator|.
name|getAmt
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|BoundarySpec
name|end
init|=
name|wdwSpec
operator|.
name|getWindowFrame
argument_list|()
operator|.
name|getEnd
argument_list|()
decl_stmt|;
if|if
condition|(
name|end
operator|.
name|getAmt
argument_list|()
operator|!=
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expecting right window frame boundary for "
operator|+
literal|"function %s to be unbounded. Found : %d"
argument_list|,
name|desc
argument_list|,
name|start
operator|.
name|getAmt
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|def
operator|.
name|setWindowFrame
argument_list|(
name|wdwFrame
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|setupWdwFnEvaluator
argument_list|(
name|def
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|he
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|he
argument_list|)
throw|;
block|}
return|return
name|def
return|;
block|}
specifier|private
name|void
name|translatePartitioning
parameter_list|(
name|PartitionedTableFunctionDef
name|def
parameter_list|,
name|PartitionedTableFunctionSpec
name|spec
parameter_list|)
throws|throws
name|SemanticException
block|{
name|applyConstantPartition
argument_list|(
name|spec
argument_list|)
expr_stmt|;
if|if
condition|(
name|spec
operator|.
name|getPartition
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|PartitionDef
name|partDef
init|=
name|translate
argument_list|(
name|def
operator|.
name|getRawInputShape
argument_list|()
argument_list|,
name|spec
operator|.
name|getPartition
argument_list|()
argument_list|)
decl_stmt|;
name|OrderDef
name|orderDef
init|=
name|translate
argument_list|(
name|def
operator|.
name|getRawInputShape
argument_list|()
argument_list|,
name|spec
operator|.
name|getOrder
argument_list|()
argument_list|,
name|partDef
argument_list|)
decl_stmt|;
name|def
operator|.
name|setPartition
argument_list|(
name|partDef
argument_list|)
expr_stmt|;
name|def
operator|.
name|setOrder
argument_list|(
name|orderDef
argument_list|)
expr_stmt|;
block|}
comment|/*    * If this the first PPTF in the chain and there is no partition specified    * then assume the user wants to include the entire input in 1 partition.    */
specifier|private
specifier|static
name|void
name|applyConstantPartition
parameter_list|(
name|PartitionedTableFunctionSpec
name|spec
parameter_list|)
block|{
if|if
condition|(
name|spec
operator|.
name|getPartition
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|PTFInputSpec
name|iSpec
init|=
name|spec
operator|.
name|getInput
argument_list|()
decl_stmt|;
if|if
condition|(
name|iSpec
operator|instanceof
name|PTFInputSpec
condition|)
block|{
name|PartitionSpec
name|partSpec
init|=
operator|new
name|PartitionSpec
argument_list|()
decl_stmt|;
name|PartitionExpression
name|partExpr
init|=
operator|new
name|PartitionExpression
argument_list|()
decl_stmt|;
name|partExpr
operator|.
name|setExpression
argument_list|(
operator|new
name|ASTNode
argument_list|(
operator|new
name|CommonToken
argument_list|(
name|HiveParser
operator|.
name|Number
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|partSpec
operator|.
name|addExpression
argument_list|(
name|partExpr
argument_list|)
expr_stmt|;
name|spec
operator|.
name|setPartition
argument_list|(
name|partSpec
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|PartitionDef
name|translate
parameter_list|(
name|ShapeDetails
name|inpShape
parameter_list|,
name|PartitionSpec
name|spec
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|spec
operator|==
literal|null
operator|||
name|spec
operator|.
name|getExpressions
argument_list|()
operator|==
literal|null
operator|||
name|spec
operator|.
name|getExpressions
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|PartitionDef
name|pDef
init|=
operator|new
name|PartitionDef
argument_list|()
decl_stmt|;
for|for
control|(
name|PartitionExpression
name|pExpr
range|:
name|spec
operator|.
name|getExpressions
argument_list|()
control|)
block|{
name|PTFExpressionDef
name|expDef
init|=
name|translate
argument_list|(
name|inpShape
argument_list|,
name|pExpr
argument_list|)
decl_stmt|;
name|pDef
operator|.
name|addExpression
argument_list|(
name|expDef
argument_list|)
expr_stmt|;
block|}
return|return
name|pDef
return|;
block|}
specifier|private
name|PTFExpressionDef
name|translate
parameter_list|(
name|ShapeDetails
name|inpShape
parameter_list|,
name|PartitionExpression
name|pExpr
parameter_list|)
throws|throws
name|SemanticException
block|{
name|PTFExpressionDef
name|expDef
init|=
literal|null
decl_stmt|;
try|try
block|{
name|expDef
operator|=
name|buildExpressionDef
argument_list|(
name|inpShape
argument_list|,
name|pExpr
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|he
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|he
argument_list|)
throw|;
block|}
name|PTFTranslator
operator|.
name|validateComparable
argument_list|(
name|expDef
operator|.
name|getOI
argument_list|()
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Partition Expression %s is not a comparable expression"
argument_list|,
name|pExpr
operator|.
name|getExpression
argument_list|()
operator|.
name|toStringTree
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|expDef
return|;
block|}
specifier|private
name|OrderDef
name|translate
parameter_list|(
name|ShapeDetails
name|inpShape
parameter_list|,
name|OrderSpec
name|spec
parameter_list|,
name|PartitionDef
name|partitionDef
parameter_list|)
throws|throws
name|SemanticException
block|{
name|OrderDef
name|def
init|=
operator|new
name|OrderDef
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|spec
condition|)
block|{
return|return
name|def
return|;
block|}
for|for
control|(
name|OrderExpression
name|oExpr
range|:
name|spec
operator|.
name|getExpressions
argument_list|()
control|)
block|{
name|OrderExpressionDef
name|oexpDef
init|=
name|translate
argument_list|(
name|inpShape
argument_list|,
name|oExpr
argument_list|)
decl_stmt|;
name|def
operator|.
name|addExpression
argument_list|(
name|oexpDef
argument_list|)
expr_stmt|;
block|}
return|return
name|def
return|;
block|}
specifier|private
name|OrderExpressionDef
name|translate
parameter_list|(
name|ShapeDetails
name|inpShape
parameter_list|,
name|OrderExpression
name|oExpr
parameter_list|)
throws|throws
name|SemanticException
block|{
name|OrderExpressionDef
name|oexpDef
init|=
operator|new
name|OrderExpressionDef
argument_list|()
decl_stmt|;
name|oexpDef
operator|.
name|setOrder
argument_list|(
name|oExpr
operator|.
name|getOrder
argument_list|()
argument_list|)
expr_stmt|;
name|oexpDef
operator|.
name|setNullOrder
argument_list|(
name|oExpr
operator|.
name|getNullOrder
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|PTFExpressionDef
name|expDef
init|=
name|buildExpressionDef
argument_list|(
name|inpShape
argument_list|,
name|oExpr
operator|.
name|getExpression
argument_list|()
argument_list|)
decl_stmt|;
name|oexpDef
operator|.
name|setExpressionTreeString
argument_list|(
name|expDef
operator|.
name|getExpressionTreeString
argument_list|()
argument_list|)
expr_stmt|;
name|oexpDef
operator|.
name|setExprEvaluator
argument_list|(
name|expDef
operator|.
name|getExprEvaluator
argument_list|()
argument_list|)
expr_stmt|;
name|oexpDef
operator|.
name|setExprNode
argument_list|(
name|expDef
operator|.
name|getExprNode
argument_list|()
argument_list|)
expr_stmt|;
name|oexpDef
operator|.
name|setOI
argument_list|(
name|expDef
operator|.
name|getOI
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|he
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|he
argument_list|)
throw|;
block|}
name|PTFTranslator
operator|.
name|validateComparable
argument_list|(
name|oexpDef
operator|.
name|getOI
argument_list|()
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Partition Expression %s is not a comparable expression"
argument_list|,
name|oExpr
operator|.
name|getExpression
argument_list|()
operator|.
name|toStringTree
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|oexpDef
return|;
block|}
specifier|private
name|WindowFrameDef
name|translate
parameter_list|(
name|String
name|wFnName
parameter_list|,
name|ShapeDetails
name|inpShape
parameter_list|,
name|WindowSpec
name|spec
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|/*      * Since we componentize Windowing, no need to translate      * the Partition& Order specs of individual WFns.      */
return|return
name|translate
argument_list|(
name|inpShape
argument_list|,
name|spec
operator|.
name|getWindowFrame
argument_list|()
argument_list|,
name|spec
operator|.
name|getOrder
argument_list|()
operator|.
name|getExpressions
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|WindowFrameDef
name|translate
parameter_list|(
name|ShapeDetails
name|inpShape
parameter_list|,
name|WindowFrameSpec
name|spec
parameter_list|,
name|List
argument_list|<
name|OrderExpression
argument_list|>
name|orderExpressions
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|spec
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|BoundarySpec
name|s
init|=
name|spec
operator|.
name|getStart
argument_list|()
decl_stmt|;
name|BoundarySpec
name|e
init|=
name|spec
operator|.
name|getEnd
argument_list|()
decl_stmt|;
name|int
name|cmp
init|=
name|s
operator|.
name|compareTo
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Window range invalid, start boundary is greater than end boundary: %s"
argument_list|,
name|spec
argument_list|)
argument_list|)
throw|;
block|}
name|WindowFrameDef
name|winFrame
init|=
operator|new
name|WindowFrameDef
argument_list|(
name|spec
operator|.
name|getWindowType
argument_list|()
argument_list|,
operator|new
name|BoundaryDef
argument_list|(
name|s
operator|.
name|direction
argument_list|,
name|s
operator|.
name|getAmt
argument_list|()
argument_list|)
argument_list|,
operator|new
name|BoundaryDef
argument_list|(
name|e
operator|.
name|direction
argument_list|,
name|e
operator|.
name|getAmt
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|winFrame
operator|.
name|getWindowType
argument_list|()
operator|==
name|WindowType
operator|.
name|RANGE
condition|)
block|{
name|winFrame
operator|.
name|setOrderDef
argument_list|(
name|buildOrderExpressions
argument_list|(
name|inpShape
argument_list|,
name|orderExpressions
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|winFrame
return|;
block|}
comment|/**    * Collect order expressions for RANGE based windowing    * @throws SemanticException    */
specifier|private
name|OrderDef
name|buildOrderExpressions
parameter_list|(
name|ShapeDetails
name|inpShape
parameter_list|,
name|List
argument_list|<
name|OrderExpression
argument_list|>
name|orderExpressions
parameter_list|)
throws|throws
name|SemanticException
block|{
name|OrderDef
name|orderDef
init|=
operator|new
name|OrderDef
argument_list|()
decl_stmt|;
for|for
control|(
name|OrderExpression
name|oe
range|:
name|orderExpressions
control|)
block|{
name|PTFTranslator
operator|.
name|validateNoLeadLagInValueBoundarySpec
argument_list|(
name|oe
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|PTFExpressionDef
name|exprDef
init|=
literal|null
decl_stmt|;
try|try
block|{
name|exprDef
operator|=
name|buildExpressionDef
argument_list|(
name|inpShape
argument_list|,
name|oe
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|he
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|he
argument_list|)
throw|;
block|}
name|PTFTranslator
operator|.
name|validateValueBoundaryExprType
argument_list|(
name|exprDef
operator|.
name|getOI
argument_list|()
argument_list|)
expr_stmt|;
name|OrderExpressionDef
name|orderExprDef
init|=
operator|new
name|OrderExpressionDef
argument_list|(
name|exprDef
argument_list|)
decl_stmt|;
name|orderExprDef
operator|.
name|setOrder
argument_list|(
name|oe
operator|.
name|getOrder
argument_list|()
argument_list|)
expr_stmt|;
name|orderExprDef
operator|.
name|setNullOrder
argument_list|(
name|oe
operator|.
name|getNullOrder
argument_list|()
argument_list|)
expr_stmt|;
name|orderDef
operator|.
name|addExpression
argument_list|(
name|orderExprDef
argument_list|)
expr_stmt|;
block|}
return|return
name|orderDef
return|;
block|}
specifier|static
name|void
name|setupWdwFnEvaluator
parameter_list|(
name|WindowFunctionDef
name|def
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|PTFExpressionDef
argument_list|>
name|args
init|=
name|def
operator|.
name|getArgs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|argOIs
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|ObjectInspector
index|[]
name|funcArgOIs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PTFExpressionDef
name|arg
range|:
name|args
control|)
block|{
name|argOIs
operator|.
name|add
argument_list|(
name|arg
operator|.
name|getOI
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|funcArgOIs
operator|=
operator|new
name|ObjectInspector
index|[
name|args
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|funcArgOIs
operator|=
name|argOIs
operator|.
name|toArray
argument_list|(
name|funcArgOIs
argument_list|)
expr_stmt|;
block|}
name|GenericUDAFEvaluator
name|wFnEval
init|=
name|FunctionRegistry
operator|.
name|getGenericWindowingEvaluator
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|,
name|argOIs
argument_list|,
name|def
operator|.
name|isDistinct
argument_list|()
argument_list|,
name|def
operator|.
name|isStar
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectInspector
name|OI
init|=
name|wFnEval
operator|.
name|init
argument_list|(
name|GenericUDAFEvaluator
operator|.
name|Mode
operator|.
name|COMPLETE
argument_list|,
name|funcArgOIs
argument_list|)
decl_stmt|;
name|def
operator|.
name|setWFnEval
argument_list|(
name|wFnEval
argument_list|)
expr_stmt|;
name|def
operator|.
name|setOI
argument_list|(
name|OI
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|validateValueBoundaryExprType
parameter_list|(
name|ObjectInspector
name|OI
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
operator|!
name|OI
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|PRIMITIVE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Value Boundary expression must be of primitive type. Found: %s"
argument_list|,
name|OI
operator|.
name|getTypeName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|PrimitiveObjectInspector
name|pOI
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|OI
decl_stmt|;
name|PrimitiveCategory
name|pC
init|=
name|pOI
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|pC
condition|)
block|{
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|DOUBLE
case|:
case|case
name|FLOAT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|SHORT
case|:
case|case
name|DECIMAL
case|:
case|case
name|TIMESTAMP
case|:
case|case
name|TIMESTAMPLOCALTZ
case|:
case|case
name|DATE
case|:
case|case
name|STRING
case|:
case|case
name|VARCHAR
case|:
case|case
name|CHAR
case|:
break|break;
default|default:
throw|throw
operator|new
name|SemanticException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Primitive type %s not supported in Value Boundary expression"
argument_list|,
name|pC
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
name|ShapeDetails
name|setupTableFnShape
parameter_list|(
name|String
name|fnName
parameter_list|,
name|ShapeDetails
name|inpShape
parameter_list|,
name|StructObjectInspector
name|OI
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
parameter_list|,
name|RowResolver
name|rr
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|FunctionRegistry
operator|.
name|isNoopFunction
argument_list|(
name|fnName
argument_list|)
condition|)
block|{
return|return
name|setupShapeForNoop
argument_list|(
name|inpShape
argument_list|,
name|OI
argument_list|,
name|columnNames
argument_list|,
name|rr
argument_list|)
return|;
block|}
return|return
name|setupShape
argument_list|(
name|OI
argument_list|,
name|columnNames
argument_list|,
name|rr
argument_list|)
return|;
block|}
specifier|private
name|ShapeDetails
name|setupShape
parameter_list|(
name|StructObjectInspector
name|OI
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
parameter_list|,
name|RowResolver
name|rr
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdePropsMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|AbstractSerDe
name|serde
init|=
literal|null
decl_stmt|;
name|ShapeDetails
name|shp
init|=
operator|new
name|ShapeDetails
argument_list|()
decl_stmt|;
try|try
block|{
name|serde
operator|=
name|PTFTranslator
operator|.
name|createLazyBinarySerDe
argument_list|(
name|hCfg
argument_list|,
name|OI
argument_list|,
name|serdePropsMap
argument_list|)
expr_stmt|;
name|StructObjectInspector
name|outOI
init|=
name|PTFPartition
operator|.
name|setupPartitionOutputOI
argument_list|(
name|serde
argument_list|,
name|OI
argument_list|)
decl_stmt|;
name|shp
operator|.
name|setOI
argument_list|(
name|outOI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|se
argument_list|)
throw|;
block|}
name|shp
operator|.
name|setRr
argument_list|(
name|rr
argument_list|)
expr_stmt|;
name|shp
operator|.
name|setSerde
argument_list|(
name|serde
argument_list|)
expr_stmt|;
name|shp
operator|.
name|setSerdeClassName
argument_list|(
name|serde
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|shp
operator|.
name|setSerdeProps
argument_list|(
name|serdePropsMap
argument_list|)
expr_stmt|;
name|shp
operator|.
name|setColumnNames
argument_list|(
name|columnNames
argument_list|)
expr_stmt|;
name|TypeCheckCtx
name|tCtx
init|=
operator|new
name|TypeCheckCtx
argument_list|(
name|rr
argument_list|)
decl_stmt|;
name|tCtx
operator|.
name|setUnparseTranslator
argument_list|(
name|unparseT
argument_list|)
expr_stmt|;
name|shp
operator|.
name|setTypeCheckCtx
argument_list|(
name|tCtx
argument_list|)
expr_stmt|;
return|return
name|shp
return|;
block|}
specifier|private
name|ShapeDetails
name|copyShape
parameter_list|(
name|ShapeDetails
name|src
parameter_list|)
block|{
name|ShapeDetails
name|dest
init|=
operator|new
name|ShapeDetails
argument_list|()
decl_stmt|;
name|dest
operator|.
name|setSerdeClassName
argument_list|(
name|src
operator|.
name|getSerdeClassName
argument_list|()
argument_list|)
expr_stmt|;
name|dest
operator|.
name|setSerdeProps
argument_list|(
name|src
operator|.
name|getSerdeProps
argument_list|()
argument_list|)
expr_stmt|;
name|dest
operator|.
name|setColumnNames
argument_list|(
name|src
operator|.
name|getColumnNames
argument_list|()
argument_list|)
expr_stmt|;
name|dest
operator|.
name|setOI
argument_list|(
name|src
operator|.
name|getOI
argument_list|()
argument_list|)
expr_stmt|;
name|dest
operator|.
name|setSerde
argument_list|(
name|src
operator|.
name|getSerde
argument_list|()
argument_list|)
expr_stmt|;
name|dest
operator|.
name|setRr
argument_list|(
name|src
operator|.
name|getRr
argument_list|()
argument_list|)
expr_stmt|;
name|dest
operator|.
name|setTypeCheckCtx
argument_list|(
name|src
operator|.
name|getTypeCheckCtx
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|dest
return|;
block|}
specifier|private
name|ShapeDetails
name|setupShapeForNoop
parameter_list|(
name|ShapeDetails
name|inpShape
parameter_list|,
name|StructObjectInspector
name|OI
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
parameter_list|,
name|RowResolver
name|rr
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ShapeDetails
name|shp
init|=
operator|new
name|ShapeDetails
argument_list|()
decl_stmt|;
name|shp
operator|.
name|setRr
argument_list|(
name|rr
argument_list|)
expr_stmt|;
name|shp
operator|.
name|setOI
argument_list|(
name|inpShape
operator|.
name|getOI
argument_list|()
argument_list|)
expr_stmt|;
name|shp
operator|.
name|setSerde
argument_list|(
name|inpShape
operator|.
name|getSerde
argument_list|()
argument_list|)
expr_stmt|;
name|shp
operator|.
name|setSerdeClassName
argument_list|(
name|inpShape
operator|.
name|getSerde
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|shp
operator|.
name|setSerdeProps
argument_list|(
name|inpShape
operator|.
name|getSerdeProps
argument_list|()
argument_list|)
expr_stmt|;
name|shp
operator|.
name|setColumnNames
argument_list|(
name|columnNames
argument_list|)
expr_stmt|;
name|TypeCheckCtx
name|tCtx
init|=
operator|new
name|TypeCheckCtx
argument_list|(
name|rr
argument_list|)
decl_stmt|;
name|tCtx
operator|.
name|setUnparseTranslator
argument_list|(
name|unparseT
argument_list|)
expr_stmt|;
name|shp
operator|.
name|setTypeCheckCtx
argument_list|(
name|tCtx
argument_list|)
expr_stmt|;
return|return
name|shp
return|;
block|}
specifier|protected
specifier|static
name|ArrayList
argument_list|<
name|OrderExpression
argument_list|>
name|addPartitionExpressionsToOrderList
parameter_list|(
name|ArrayList
argument_list|<
name|PartitionExpression
argument_list|>
name|partCols
parameter_list|,
name|ArrayList
argument_list|<
name|OrderExpression
argument_list|>
name|orderCols
parameter_list|)
throws|throws
name|SemanticException
block|{
name|int
name|numOfPartColumns
init|=
literal|0
decl_stmt|;
name|int
name|chkSize
init|=
name|partCols
operator|.
name|size
argument_list|()
decl_stmt|;
name|chkSize
operator|=
name|chkSize
operator|>
name|orderCols
operator|.
name|size
argument_list|()
condition|?
name|orderCols
operator|.
name|size
argument_list|()
else|:
name|chkSize
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chkSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|orderCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getExpression
argument_list|()
operator|.
name|toStringTree
argument_list|()
operator|.
name|equals
argument_list|(
name|partCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getExpression
argument_list|()
operator|.
name|toStringTree
argument_list|()
argument_list|)
condition|)
block|{
name|numOfPartColumns
operator|++
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|numOfPartColumns
operator|!=
literal|0
operator|&&
name|numOfPartColumns
operator|!=
name|partCols
operator|.
name|size
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partitionColumnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PartitionExpression
name|partitionExpression
range|:
name|partCols
control|)
block|{
name|ASTNode
name|column
init|=
name|partitionExpression
operator|.
name|getExpression
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|!=
literal|null
operator|&&
name|column
operator|.
name|getChildCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|partitionColumnNames
operator|.
name|add
argument_list|(
name|column
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|SemanticException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"all partition columns %s must be in order clause or none should be specified"
argument_list|,
name|partitionColumnNames
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|ArrayList
argument_list|<
name|OrderExpression
argument_list|>
name|combinedOrdExprs
init|=
operator|new
name|ArrayList
argument_list|<
name|OrderExpression
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|numOfPartColumns
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|PartitionExpression
name|partCol
range|:
name|partCols
control|)
block|{
name|OrderExpression
name|orderCol
init|=
operator|new
name|OrderExpression
argument_list|(
name|partCol
argument_list|)
decl_stmt|;
name|combinedOrdExprs
operator|.
name|add
argument_list|(
name|orderCol
argument_list|)
expr_stmt|;
block|}
block|}
name|combinedOrdExprs
operator|.
name|addAll
argument_list|(
name|orderCols
argument_list|)
expr_stmt|;
return|return
name|combinedOrdExprs
return|;
block|}
specifier|private
name|void
name|setupRankingArgs
parameter_list|(
name|WindowTableFunctionDef
name|wdwTFnDef
parameter_list|,
name|WindowFunctionDef
name|wFnDef
parameter_list|,
name|WindowFunctionSpec
name|wSpec
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|wSpec
operator|.
name|getArgs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Ranking Functions can take no arguments"
argument_list|)
throw|;
block|}
name|OrderDef
name|oDef
init|=
name|wdwTFnDef
operator|.
name|getOrder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OrderExpressionDef
argument_list|>
name|oExprs
init|=
name|oDef
operator|.
name|getExpressions
argument_list|()
decl_stmt|;
for|for
control|(
name|OrderExpressionDef
name|oExpr
range|:
name|oExprs
control|)
block|{
name|wFnDef
operator|.
name|addArg
argument_list|(
name|oExpr
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Expr translation helper methods    */
specifier|public
name|PTFExpressionDef
name|buildExpressionDef
parameter_list|(
name|ShapeDetails
name|inpShape
parameter_list|,
name|ASTNode
name|arg
parameter_list|)
throws|throws
name|HiveException
block|{
name|PTFExpressionDef
name|argDef
init|=
operator|new
name|PTFExpressionDef
argument_list|()
decl_stmt|;
name|ExprNodeDesc
name|exprNode
init|=
name|semAly
operator|.
name|genExprNodeDesc
argument_list|(
name|arg
argument_list|,
name|inpShape
operator|.
name|getRr
argument_list|()
argument_list|,
name|inpShape
operator|.
name|getTypeCheckCtx
argument_list|()
argument_list|)
decl_stmt|;
name|ExprNodeEvaluator
name|exprEval
init|=
name|WindowingExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|llInfo
argument_list|,
name|exprNode
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|initExprNodeEvaluator
argument_list|(
name|exprEval
argument_list|,
name|exprNode
argument_list|,
name|inpShape
argument_list|)
decl_stmt|;
name|argDef
operator|.
name|setExpressionTreeString
argument_list|(
name|arg
operator|.
name|toStringTree
argument_list|()
argument_list|)
expr_stmt|;
name|argDef
operator|.
name|setExprNode
argument_list|(
name|exprNode
argument_list|)
expr_stmt|;
name|argDef
operator|.
name|setExprEvaluator
argument_list|(
name|exprEval
argument_list|)
expr_stmt|;
name|argDef
operator|.
name|setOI
argument_list|(
name|oi
argument_list|)
expr_stmt|;
return|return
name|argDef
return|;
block|}
specifier|private
name|ObjectInspector
name|initExprNodeEvaluator
parameter_list|(
name|ExprNodeEvaluator
name|exprEval
parameter_list|,
name|ExprNodeDesc
name|exprNode
parameter_list|,
name|ShapeDetails
name|inpShape
parameter_list|)
throws|throws
name|HiveException
block|{
name|ObjectInspector
name|outOI
decl_stmt|;
name|outOI
operator|=
name|exprEval
operator|.
name|initialize
argument_list|(
name|inpShape
operator|.
name|getOI
argument_list|()
argument_list|)
expr_stmt|;
comment|/*      * if there are any LeadLag functions in this Expression Tree: - setup a      * duplicate Evaluator for the 1st arg of the LLFuncDesc - initialize it      * using the InputInfo provided for this Expr tree - set the duplicate      * evaluator on the LLUDF instance.      */
name|List
argument_list|<
name|ExprNodeGenericFuncDesc
argument_list|>
name|llFuncExprs
init|=
name|llInfo
operator|.
name|getLLFuncExprsInTopExpr
argument_list|(
name|exprNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|llFuncExprs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExprNodeGenericFuncDesc
name|llFuncExpr
range|:
name|llFuncExprs
control|)
block|{
name|ExprNodeDesc
name|firstArg
init|=
name|llFuncExpr
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ExprNodeEvaluator
name|dupExprEval
init|=
name|WindowingExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|llInfo
argument_list|,
name|firstArg
argument_list|)
decl_stmt|;
name|dupExprEval
operator|.
name|initialize
argument_list|(
name|inpShape
operator|.
name|getOI
argument_list|()
argument_list|)
expr_stmt|;
name|GenericUDFLeadLag
name|llFn
init|=
operator|(
name|GenericUDFLeadLag
operator|)
name|llFuncExpr
operator|.
name|getGenericUDF
argument_list|()
decl_stmt|;
name|llFn
operator|.
name|setExprEvaluator
argument_list|(
name|dupExprEval
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|outOI
return|;
block|}
comment|/*    * OI& Serde helper methods    */
specifier|protected
specifier|static
name|AbstractSerDe
name|createLazyBinarySerDe
parameter_list|(
name|Configuration
name|cfg
parameter_list|,
name|StructObjectInspector
name|oi
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdePropsMap
parameter_list|)
throws|throws
name|SerDeException
block|{
name|serdePropsMap
operator|=
name|serdePropsMap
operator|==
literal|null
condition|?
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
else|:
name|serdePropsMap
expr_stmt|;
name|PTFDeserializer
operator|.
name|addOIPropertiestoSerDePropsMap
argument_list|(
name|oi
argument_list|,
name|serdePropsMap
argument_list|)
expr_stmt|;
name|AbstractSerDe
name|serDe
init|=
operator|new
name|LazyBinarySerDe
argument_list|()
decl_stmt|;
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|serdePropsMap
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|serdePropsMap
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serDe
argument_list|,
name|cfg
argument_list|,
name|p
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|serDe
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
index|[]
name|getTypeMap
parameter_list|(
name|StructObjectInspector
name|oi
parameter_list|)
block|{
name|StructTypeInfo
name|t
init|=
operator|(
name|StructTypeInfo
operator|)
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|oi
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fnames
init|=
name|t
operator|.
name|getAllStructFieldNames
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|fields
init|=
name|t
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
return|return
operator|new
name|ArrayList
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|fnames
operator|,
name|fields
block|}
empty_stmt|;
block|}
comment|/**    * For each column on the input RR, construct a StructField for it    * OI is constructed using the list of input column names and    * their corresponding OIs.    *    * @param rr    * @return    */
specifier|public
specifier|static
name|StructObjectInspector
name|getStandardStructOI
parameter_list|(
name|RowResolver
name|rr
parameter_list|)
block|{
name|StructObjectInspector
name|oi
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|colLists
init|=
name|rr
operator|.
name|getColumnInfos
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|structFieldNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|structFieldObjectInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnInfo
name|columnInfo
range|:
name|colLists
control|)
block|{
name|String
name|colName
init|=
name|columnInfo
operator|.
name|getInternalName
argument_list|()
decl_stmt|;
name|ObjectInspector
name|colOI
init|=
name|columnInfo
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|structFieldNames
operator|.
name|add
argument_list|(
name|colName
argument_list|)
expr_stmt|;
name|structFieldObjectInspectors
operator|.
name|add
argument_list|(
name|colOI
argument_list|)
expr_stmt|;
block|}
name|oi
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|structFieldNames
argument_list|,
name|structFieldObjectInspectors
argument_list|)
expr_stmt|;
return|return
name|oi
return|;
block|}
specifier|protected
specifier|static
name|void
name|validateComparable
parameter_list|(
name|ObjectInspector
name|OI
parameter_list|,
name|String
name|errMsg
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
operator|!
name|ObjectInspectorUtils
operator|.
name|compareSupported
argument_list|(
name|OI
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|addInputColumnsToList
parameter_list|(
name|ShapeDetails
name|shape
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|,
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldOIs
parameter_list|)
block|{
name|StructObjectInspector
name|OI
init|=
name|shape
operator|.
name|getOI
argument_list|()
decl_stmt|;
for|for
control|(
name|StructField
name|f
range|:
name|OI
operator|.
name|getAllStructFieldRefs
argument_list|()
control|)
block|{
name|fieldNames
operator|.
name|add
argument_list|(
name|f
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|fieldOIs
operator|.
name|add
argument_list|(
name|f
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * RowResolver helper methods    */
specifier|protected
specifier|static
name|RowResolver
name|buildRowResolverForPTF
parameter_list|(
name|String
name|tbFnName
parameter_list|,
name|String
name|tabAlias
parameter_list|,
name|StructObjectInspector
name|rowObjectInspector
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|outputColNames
parameter_list|,
name|RowResolver
name|inputRR
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|FunctionRegistry
operator|.
name|isNoopFunction
argument_list|(
name|tbFnName
argument_list|)
condition|)
block|{
return|return
name|buildRowResolverForNoop
argument_list|(
name|tabAlias
argument_list|,
name|rowObjectInspector
argument_list|,
name|inputRR
argument_list|)
return|;
block|}
name|RowResolver
name|rwsch
init|=
operator|new
name|RowResolver
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|rowObjectInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ColumnInfo
name|colInfo
init|=
operator|new
name|ColumnInfo
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
argument_list|,
name|tabAlias
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|rwsch
operator|.
name|put
argument_list|(
name|tabAlias
argument_list|,
name|outputColNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|colInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|rwsch
return|;
block|}
specifier|protected
name|RowResolver
name|buildRowResolverForWindowing
parameter_list|(
name|WindowTableFunctionDef
name|def
parameter_list|)
throws|throws
name|SemanticException
block|{
name|RowResolver
name|rr
init|=
operator|new
name|RowResolver
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|WindowExpressionSpec
argument_list|>
name|aliasToExprMap
init|=
name|windowingSpec
operator|.
name|getAliasToWdwExpr
argument_list|()
decl_stmt|;
comment|/*      * add Window Functions      */
for|for
control|(
name|WindowFunctionDef
name|wFnDef
range|:
name|def
operator|.
name|getWindowFunctions
argument_list|()
control|)
block|{
name|ASTNode
name|ast
init|=
name|aliasToExprMap
operator|.
name|get
argument_list|(
name|wFnDef
operator|.
name|getAlias
argument_list|()
argument_list|)
operator|.
name|getExpression
argument_list|()
decl_stmt|;
name|ObjectInspector
name|wFnOI
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|wFnDef
operator|.
name|isPivotResult
argument_list|()
condition|)
block|{
name|wFnOI
operator|=
operator|(
operator|(
name|ListObjectInspector
operator|)
name|wFnDef
operator|.
name|getOI
argument_list|()
operator|)
operator|.
name|getListElementObjectInspector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|wFnOI
operator|=
name|wFnDef
operator|.
name|getOI
argument_list|()
expr_stmt|;
block|}
name|ColumnInfo
name|cInfo
init|=
operator|new
name|ColumnInfo
argument_list|(
name|wFnDef
operator|.
name|getAlias
argument_list|()
argument_list|,
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|wFnOI
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|rr
operator|.
name|putExpression
argument_list|(
name|ast
argument_list|,
name|cInfo
argument_list|)
expr_stmt|;
block|}
name|RowResolver
name|inpRR
init|=
name|def
operator|.
name|getRawInputShape
argument_list|()
operator|.
name|getRr
argument_list|()
decl_stmt|;
comment|/*      * add columns from inpRR      */
for|for
control|(
name|ColumnInfo
name|inpCInfo
range|:
name|inputRR
operator|.
name|getColumnInfos
argument_list|()
control|)
block|{
name|ColumnInfo
name|cInfo
init|=
operator|new
name|ColumnInfo
argument_list|(
name|inpCInfo
argument_list|)
decl_stmt|;
name|ASTNode
name|inExpr
init|=
name|PTFTranslator
operator|.
name|getASTNode
argument_list|(
name|inpCInfo
argument_list|,
name|inpRR
argument_list|)
decl_stmt|;
if|if
condition|(
name|inExpr
operator|!=
literal|null
condition|)
block|{
name|rr
operator|.
name|putExpression
argument_list|(
name|inExpr
argument_list|,
name|cInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|tabColAlias
init|=
name|inputRR
operator|.
name|reverseLookup
argument_list|(
name|inpCInfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tabColAlias
operator|!=
literal|null
condition|)
block|{
name|rr
operator|.
name|put
argument_list|(
name|tabColAlias
index|[
literal|0
index|]
argument_list|,
name|tabColAlias
index|[
literal|1
index|]
argument_list|,
name|cInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rr
operator|.
name|put
argument_list|(
name|inpCInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|inpCInfo
operator|.
name|getAlias
argument_list|()
argument_list|,
name|cInfo
argument_list|)
expr_stmt|;
block|}
block|}
name|String
index|[]
name|altMapping
init|=
name|inputRR
operator|.
name|getAlternateMappings
argument_list|(
name|inpCInfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|altMapping
operator|!=
literal|null
condition|)
block|{
name|rr
operator|.
name|put
argument_list|(
name|altMapping
index|[
literal|0
index|]
argument_list|,
name|altMapping
index|[
literal|1
index|]
argument_list|,
name|cInfo
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rr
return|;
block|}
specifier|protected
specifier|static
name|RowResolver
name|buildRowResolverForNoop
parameter_list|(
name|String
name|tabAlias
parameter_list|,
name|StructObjectInspector
name|rowObjectInspector
parameter_list|,
name|RowResolver
name|inputRowResolver
parameter_list|)
throws|throws
name|SemanticException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"QueryTranslationInfo::getRowResolver invoked on ObjectInspector"
argument_list|)
expr_stmt|;
name|RowResolver
name|rwsch
init|=
operator|new
name|RowResolver
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|rowObjectInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|StructField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|internalName
init|=
name|field
operator|.
name|getFieldName
argument_list|()
decl_stmt|;
name|String
index|[]
name|tabColAlias
init|=
name|inputRowResolver
operator|==
literal|null
condition|?
literal|null
else|:
name|inputRowResolver
operator|.
name|reverseLookup
argument_list|(
name|internalName
argument_list|)
decl_stmt|;
name|String
name|colTabAlias
init|=
name|tabColAlias
operator|==
literal|null
condition|?
name|tabAlias
else|:
name|tabColAlias
index|[
literal|0
index|]
decl_stmt|;
name|String
name|colAlias
init|=
name|tabColAlias
operator|==
literal|null
condition|?
literal|null
else|:
name|tabColAlias
index|[
literal|1
index|]
decl_stmt|;
name|ColumnInfo
name|inpColInfo
decl_stmt|;
name|ColumnInfo
name|colInfo
decl_stmt|;
if|if
condition|(
name|tabColAlias
operator|!=
literal|null
condition|)
block|{
name|inpColInfo
operator|=
name|inputRowResolver
operator|.
name|get
argument_list|(
name|colTabAlias
argument_list|,
name|colAlias
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/*          * for the Virtual columns:          * - the internalName is UPPER Case and the alias is lower case          * - since we put them in an OI, the fieldnames became lower cased.          * - so we look in the inputRR for the fieldName as an alias.          */
name|inpColInfo
operator|=
name|inputRowResolver
operator|==
literal|null
condition|?
literal|null
else|:
name|inputRowResolver
operator|.
name|get
argument_list|(
name|tabAlias
argument_list|,
name|internalName
argument_list|)
expr_stmt|;
name|colAlias
operator|=
name|inpColInfo
operator|!=
literal|null
condition|?
name|inpColInfo
operator|.
name|getInternalName
argument_list|()
else|:
name|colAlias
expr_stmt|;
block|}
if|if
condition|(
name|inpColInfo
operator|!=
literal|null
condition|)
block|{
name|colInfo
operator|=
operator|new
name|ColumnInfo
argument_list|(
name|inpColInfo
argument_list|)
expr_stmt|;
name|colInfo
operator|.
name|setTabAlias
argument_list|(
name|tabAlias
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|colInfo
operator|=
operator|new
name|ColumnInfo
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
argument_list|,
name|tabAlias
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|colAlias
operator|=
name|colInfo
operator|.
name|getInternalName
argument_list|()
expr_stmt|;
block|}
name|ASTNode
name|expr
init|=
name|inputRowResolver
operator|==
literal|null
condition|?
literal|null
else|:
name|PTFTranslator
operator|.
name|getASTNode
argument_list|(
name|inpColInfo
argument_list|,
name|inputRowResolver
argument_list|)
decl_stmt|;
if|if
condition|(
name|expr
operator|!=
literal|null
condition|)
block|{
name|rwsch
operator|.
name|putExpression
argument_list|(
name|expr
argument_list|,
name|colInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rwsch
operator|.
name|put
argument_list|(
name|tabAlias
argument_list|,
name|colAlias
argument_list|,
name|colInfo
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rwsch
return|;
block|}
comment|/*    * If the cInfo is for an ASTNode, this function returns the ASTNode that it is for.    */
specifier|public
specifier|static
name|ASTNode
name|getASTNode
parameter_list|(
name|ColumnInfo
name|cInfo
parameter_list|,
name|RowResolver
name|rr
parameter_list|)
throws|throws
name|SemanticException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ASTNode
argument_list|>
name|entry
range|:
name|rr
operator|.
name|getExpressionMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ASTNode
name|expr
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|rr
operator|.
name|getExpression
argument_list|(
name|expr
argument_list|)
operator|.
name|equals
argument_list|(
name|cInfo
argument_list|)
condition|)
block|{
return|return
name|expr
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/*    * Utility to visit all nodes in an AST tree.    */
specifier|public
specifier|static
name|void
name|visit
parameter_list|(
name|Object
name|t
parameter_list|,
name|ContextVisitor
name|visitor
parameter_list|)
block|{
name|_visit
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
comment|/** Do the recursive work for visit */
specifier|private
specifier|static
name|void
name|_visit
parameter_list|(
name|Object
name|t
parameter_list|,
name|Object
name|parent
parameter_list|,
name|int
name|childIndex
parameter_list|,
name|ContextVisitor
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|visitor
operator|.
name|visit
argument_list|(
name|t
argument_list|,
name|parent
argument_list|,
name|childIndex
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|int
name|n
init|=
name|ParseDriver
operator|.
name|adaptor
operator|.
name|getChildCount
argument_list|(
name|t
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|child
init|=
name|ParseDriver
operator|.
name|adaptor
operator|.
name|getChild
argument_list|(
name|t
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|_visit
argument_list|(
name|child
argument_list|,
name|t
argument_list|,
name|i
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|PTFInvocationSpec
argument_list|>
name|componentize
parameter_list|(
name|PTFInvocationSpec
name|ptfInvocation
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ArrayList
argument_list|<
name|PTFInvocationSpec
argument_list|>
name|componentInvocations
init|=
operator|new
name|ArrayList
argument_list|<
name|PTFInvocationSpec
argument_list|>
argument_list|()
decl_stmt|;
name|Stack
argument_list|<
name|PTFInputSpec
argument_list|>
name|ptfChain
init|=
operator|new
name|Stack
argument_list|<
name|PTFInvocationSpec
operator|.
name|PTFInputSpec
argument_list|>
argument_list|()
decl_stmt|;
name|PTFInputSpec
name|spec
init|=
name|ptfInvocation
operator|.
name|getFunction
argument_list|()
decl_stmt|;
while|while
condition|(
name|spec
operator|instanceof
name|PartitionedTableFunctionSpec
condition|)
block|{
name|ptfChain
operator|.
name|push
argument_list|(
name|spec
argument_list|)
expr_stmt|;
name|spec
operator|=
name|spec
operator|.
name|getInput
argument_list|()
expr_stmt|;
block|}
name|PartitionedTableFunctionSpec
name|prevFn
init|=
operator|(
name|PartitionedTableFunctionSpec
operator|)
name|ptfChain
operator|.
name|pop
argument_list|()
decl_stmt|;
name|applyConstantPartition
argument_list|(
name|prevFn
argument_list|)
expr_stmt|;
name|PartitionSpec
name|partSpec
init|=
name|prevFn
operator|.
name|getPartition
argument_list|()
decl_stmt|;
name|OrderSpec
name|orderSpec
init|=
name|prevFn
operator|.
name|getOrder
argument_list|()
decl_stmt|;
if|if
condition|(
name|partSpec
operator|==
literal|null
condition|)
block|{
comment|// oops this should have been caught before trying to componentize
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"No Partitioning specification specified at start of a PTFChain"
argument_list|)
throw|;
block|}
if|if
condition|(
name|orderSpec
operator|==
literal|null
condition|)
block|{
name|orderSpec
operator|=
operator|new
name|OrderSpec
argument_list|(
name|partSpec
argument_list|)
expr_stmt|;
name|prevFn
operator|.
name|setOrder
argument_list|(
name|orderSpec
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|ptfChain
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PartitionedTableFunctionSpec
name|currentFn
init|=
operator|(
name|PartitionedTableFunctionSpec
operator|)
name|ptfChain
operator|.
name|pop
argument_list|()
decl_stmt|;
name|String
name|fnName
init|=
name|currentFn
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|FunctionRegistry
operator|.
name|isTableFunction
argument_list|(
name|fnName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_FUNCTION
operator|.
name|getMsg
argument_list|(
name|fnName
argument_list|)
argument_list|)
throw|;
block|}
name|boolean
name|transformsRawInput
init|=
name|FunctionRegistry
operator|.
name|getTableFunctionResolver
argument_list|(
name|fnName
argument_list|)
operator|.
name|transformsRawInput
argument_list|()
decl_stmt|;
comment|/*        * if the current table function has no partition info specified: inherit it from the PTF up        * the chain.        */
if|if
condition|(
name|currentFn
operator|.
name|getPartition
argument_list|()
operator|==
literal|null
condition|)
block|{
name|currentFn
operator|.
name|setPartition
argument_list|(
name|prevFn
operator|.
name|getPartition
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentFn
operator|.
name|getOrder
argument_list|()
operator|==
literal|null
condition|)
block|{
name|currentFn
operator|.
name|setOrder
argument_list|(
name|prevFn
operator|.
name|getOrder
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*        * If the current table function has no order info specified;        */
if|if
condition|(
name|currentFn
operator|.
name|getOrder
argument_list|()
operator|==
literal|null
condition|)
block|{
name|currentFn
operator|.
name|setOrder
argument_list|(
operator|new
name|OrderSpec
argument_list|(
name|currentFn
operator|.
name|getPartition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|currentFn
operator|.
name|getPartition
argument_list|()
operator|.
name|equals
argument_list|(
name|partSpec
argument_list|)
operator|||
operator|!
name|currentFn
operator|.
name|getOrder
argument_list|()
operator|.
name|equals
argument_list|(
name|orderSpec
argument_list|)
operator|||
name|transformsRawInput
condition|)
block|{
name|PTFInvocationSpec
name|component
init|=
operator|new
name|PTFInvocationSpec
argument_list|()
decl_stmt|;
name|component
operator|.
name|setFunction
argument_list|(
name|prevFn
argument_list|)
expr_stmt|;
name|componentInvocations
operator|.
name|add
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|PTFQueryInputSpec
name|cQInSpec
init|=
operator|new
name|PTFQueryInputSpec
argument_list|()
decl_stmt|;
name|cQInSpec
operator|.
name|setType
argument_list|(
name|PTFQueryInputType
operator|.
name|PTFCOMPONENT
argument_list|)
expr_stmt|;
name|currentFn
operator|.
name|setInput
argument_list|(
name|cQInSpec
argument_list|)
expr_stmt|;
block|}
name|prevFn
operator|=
name|currentFn
expr_stmt|;
name|partSpec
operator|=
name|prevFn
operator|.
name|getPartition
argument_list|()
expr_stmt|;
name|orderSpec
operator|=
name|prevFn
operator|.
name|getOrder
argument_list|()
expr_stmt|;
block|}
name|componentInvocations
operator|.
name|add
argument_list|(
name|ptfInvocation
argument_list|)
expr_stmt|;
return|return
name|componentInvocations
return|;
block|}
specifier|public
specifier|static
name|void
name|validateNoLeadLagInValueBoundarySpec
parameter_list|(
name|ASTNode
name|node
parameter_list|)
throws|throws
name|SemanticException
block|{
name|String
name|errMsg
init|=
literal|"Lead/Lag not allowed in ValueBoundary Spec"
decl_stmt|;
name|TreeWizard
name|tw
init|=
operator|new
name|TreeWizard
argument_list|(
name|ParseDriver
operator|.
name|adaptor
argument_list|,
name|HiveParser
operator|.
name|tokenNames
argument_list|)
decl_stmt|;
name|ValidateNoLeadLag
name|visitor
init|=
operator|new
name|ValidateNoLeadLag
argument_list|(
name|errMsg
argument_list|)
decl_stmt|;
name|tw
operator|.
name|visit
argument_list|(
name|node
argument_list|,
name|HiveParser
operator|.
name|TOK_FUNCTION
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|checkValid
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|ValidateNoLeadLag
implements|implements
name|ContextVisitor
block|{
name|String
name|errMsg
decl_stmt|;
name|boolean
name|throwError
init|=
literal|false
decl_stmt|;
name|ASTNode
name|errorNode
decl_stmt|;
specifier|public
name|ValidateNoLeadLag
parameter_list|(
name|String
name|errMsg
parameter_list|)
block|{
name|this
operator|.
name|errMsg
operator|=
name|errMsg
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|Object
name|t
parameter_list|,
name|Object
name|parent
parameter_list|,
name|int
name|childIndex
parameter_list|,
name|Map
name|labels
parameter_list|)
block|{
name|ASTNode
name|expr
init|=
operator|(
name|ASTNode
operator|)
name|t
decl_stmt|;
name|ASTNode
name|nameNode
init|=
operator|(
name|ASTNode
operator|)
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameNode
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|FunctionRegistry
operator|.
name|LEAD_FUNC_NAME
argument_list|)
operator|||
name|nameNode
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|FunctionRegistry
operator|.
name|LAG_FUNC_NAME
argument_list|)
condition|)
block|{
name|throwError
operator|=
literal|true
expr_stmt|;
name|errorNode
operator|=
name|expr
expr_stmt|;
block|}
block|}
name|void
name|checkValid
parameter_list|()
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|throwError
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|errMsg
operator|+
name|errorNode
operator|.
name|toStringTree
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

