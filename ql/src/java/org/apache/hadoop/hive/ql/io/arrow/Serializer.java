begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|arrow
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ArrowBuf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|BigIntVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|BitVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|BitVectorHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|DateDayVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|DecimalVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|FieldVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|Float4Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|Float8Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|IntVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|IntervalDayVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|IntervalYearVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|SmallIntVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|TimeStampMicroTZVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|TinyIntVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|VarBinaryVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|VarCharVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|VectorSchemaRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|complex
operator|.
name|ListVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|complex
operator|.
name|MapVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|complex
operator|.
name|NullableMapVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|types
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|types
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|types
operator|.
name|pojo
operator|.
name|ArrowType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|vector
operator|.
name|types
operator|.
name|pojo
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|Decimal64ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|IntervalDayTimeColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ListColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|MapColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|StructColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|UnionColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorAssignRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|StringExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|CharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|UnionTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|arrow
operator|.
name|memory
operator|.
name|BufferAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ARROW_BATCH_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ARROW_BATCH_ALLOCATOR_LIMIT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedBatchUtil
operator|.
name|createColumnVector
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|arrow
operator|.
name|ArrowColumnarBatchSerDe
operator|.
name|MICROS_PER_MILLIS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|arrow
operator|.
name|ArrowColumnarBatchSerDe
operator|.
name|MILLIS_PER_SECOND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|arrow
operator|.
name|ArrowColumnarBatchSerDe
operator|.
name|NS_PER_MICROS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|arrow
operator|.
name|ArrowColumnarBatchSerDe
operator|.
name|NS_PER_MILLIS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|arrow
operator|.
name|ArrowColumnarBatchSerDe
operator|.
name|SECOND_PER_DAY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|arrow
operator|.
name|ArrowColumnarBatchSerDe
operator|.
name|toStructListTypeInfo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|arrow
operator|.
name|ArrowColumnarBatchSerDe
operator|.
name|toStructListVector
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
operator|.
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
import|;
end_import

begin_class
specifier|public
class|class
name|Serializer
block|{
specifier|private
specifier|final
name|int
name|MAX_BUFFERED_ROWS
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|EMPTY_BYTES
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
comment|// Hive columns
specifier|private
specifier|final
name|VectorizedRowBatch
name|vectorizedRowBatch
decl_stmt|;
specifier|private
specifier|final
name|VectorAssignRow
name|vectorAssignRow
decl_stmt|;
specifier|private
name|int
name|batchSize
decl_stmt|;
specifier|private
name|BufferAllocator
name|allocator
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
decl_stmt|;
specifier|private
name|int
name|fieldSize
decl_stmt|;
specifier|private
specifier|final
name|NullableMapVector
name|rootVector
decl_stmt|;
comment|//Constructor for non-serde serialization
specifier|public
name|Serializer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|attemptId
parameter_list|,
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|typeInfos
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
name|this
operator|.
name|fieldTypeInfos
operator|=
name|typeInfos
expr_stmt|;
name|this
operator|.
name|fieldNames
operator|=
name|fieldNames
expr_stmt|;
name|long
name|childAllocatorLimit
init|=
name|HiveConf
operator|.
name|getLongVar
argument_list|(
name|conf
argument_list|,
name|HIVE_ARROW_BATCH_ALLOCATOR_LIMIT
argument_list|)
decl_stmt|;
comment|//Use per-task allocator for accounting only, no need to reserve per-task memory
name|long
name|childAllocatorReservation
init|=
literal|0L
decl_stmt|;
comment|//Break out accounting of direct memory per-task, so we can check no memory is leaked when task is completed
name|allocator
operator|=
name|RootAllocatorFactory
operator|.
name|INSTANCE
operator|.
name|getRootAllocator
argument_list|(
name|conf
argument_list|)
operator|.
name|newChildAllocator
argument_list|(
name|attemptId
argument_list|,
name|childAllocatorReservation
argument_list|,
name|childAllocatorLimit
argument_list|)
expr_stmt|;
name|rootVector
operator|=
name|NullableMapVector
operator|.
name|empty
argument_list|(
literal|null
argument_list|,
name|allocator
argument_list|)
expr_stmt|;
comment|//These last fields are unused in non-serde usage
name|vectorizedRowBatch
operator|=
literal|null
expr_stmt|;
name|vectorAssignRow
operator|=
literal|null
expr_stmt|;
name|MAX_BUFFERED_ROWS
operator|=
literal|0
expr_stmt|;
block|}
name|Serializer
parameter_list|(
name|ArrowColumnarBatchSerDe
name|serDe
parameter_list|)
throws|throws
name|SerDeException
block|{
name|MAX_BUFFERED_ROWS
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|serDe
operator|.
name|conf
argument_list|,
name|HIVE_ARROW_BATCH_SIZE
argument_list|)
expr_stmt|;
name|long
name|childAllocatorLimit
init|=
name|HiveConf
operator|.
name|getLongVar
argument_list|(
name|serDe
operator|.
name|conf
argument_list|,
name|HIVE_ARROW_BATCH_ALLOCATOR_LIMIT
argument_list|)
decl_stmt|;
name|ArrowColumnarBatchSerDe
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"ArrowColumnarBatchSerDe max number of buffered columns: "
operator|+
name|MAX_BUFFERED_ROWS
argument_list|)
expr_stmt|;
name|String
name|childAllocatorName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|//Use per-task allocator for accounting only, no need to reserve per-task memory
name|long
name|childAllocatorReservation
init|=
literal|0L
decl_stmt|;
comment|//Break out accounting of direct memory per-task, so we can check no memory is leaked when task is completed
name|allocator
operator|=
name|serDe
operator|.
name|rootAllocator
operator|.
name|newChildAllocator
argument_list|(
name|childAllocatorName
argument_list|,
name|childAllocatorReservation
argument_list|,
name|childAllocatorLimit
argument_list|)
expr_stmt|;
comment|// Schema
name|StructTypeInfo
name|structTypeInfo
init|=
operator|(
name|StructTypeInfo
operator|)
name|getTypeInfoFromObjectInspector
argument_list|(
name|serDe
operator|.
name|rowObjectInspector
argument_list|)
decl_stmt|;
name|fieldTypeInfos
operator|=
name|structTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
expr_stmt|;
name|fieldNames
operator|=
name|structTypeInfo
operator|.
name|getAllStructFieldNames
argument_list|()
expr_stmt|;
name|fieldSize
operator|=
name|fieldTypeInfos
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// Init Arrow stuffs
name|rootVector
operator|=
name|NullableMapVector
operator|.
name|empty
argument_list|(
literal|null
argument_list|,
name|allocator
argument_list|)
expr_stmt|;
comment|// Init Hive stuffs
name|vectorizedRowBatch
operator|=
operator|new
name|VectorizedRowBatch
argument_list|(
name|fieldSize
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|fieldIndex
init|=
literal|0
init|;
name|fieldIndex
operator|<
name|fieldSize
condition|;
name|fieldIndex
operator|++
control|)
block|{
specifier|final
name|ColumnVector
name|columnVector
init|=
name|createColumnVector
argument_list|(
name|fieldTypeInfos
operator|.
name|get
argument_list|(
name|fieldIndex
argument_list|)
argument_list|)
decl_stmt|;
name|vectorizedRowBatch
operator|.
name|cols
index|[
name|fieldIndex
index|]
operator|=
name|columnVector
expr_stmt|;
name|columnVector
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
name|vectorizedRowBatch
operator|.
name|ensureSize
argument_list|(
name|MAX_BUFFERED_ROWS
argument_list|)
expr_stmt|;
name|vectorAssignRow
operator|=
operator|new
name|VectorAssignRow
argument_list|()
expr_stmt|;
try|try
block|{
name|vectorAssignRow
operator|.
name|init
argument_list|(
name|serDe
operator|.
name|rowObjectInspector
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|//Construct an emptyBatch which contains schema-only info
specifier|public
name|ArrowWrapperWritable
name|emptyBatch
parameter_list|()
block|{
name|rootVector
operator|.
name|setValueCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|fieldIndex
init|=
literal|0
init|;
name|fieldIndex
operator|<
name|fieldTypeInfos
operator|.
name|size
argument_list|()
condition|;
name|fieldIndex
operator|++
control|)
block|{
specifier|final
name|TypeInfo
name|fieldTypeInfo
init|=
name|fieldTypeInfos
operator|.
name|get
argument_list|(
name|fieldIndex
argument_list|)
decl_stmt|;
specifier|final
name|String
name|fieldName
init|=
name|fieldNames
operator|.
name|get
argument_list|(
name|fieldIndex
argument_list|)
decl_stmt|;
specifier|final
name|FieldType
name|fieldType
init|=
name|toFieldType
argument_list|(
name|fieldTypeInfo
argument_list|)
decl_stmt|;
specifier|final
name|FieldVector
name|arrowVector
init|=
name|rootVector
operator|.
name|addOrGet
argument_list|(
name|fieldName
argument_list|,
name|fieldType
argument_list|,
name|FieldVector
operator|.
name|class
argument_list|)
decl_stmt|;
name|arrowVector
operator|.
name|setInitialCapacity
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|arrowVector
operator|.
name|allocateNew
argument_list|()
expr_stmt|;
block|}
name|VectorSchemaRoot
name|vectorSchemaRoot
init|=
operator|new
name|VectorSchemaRoot
argument_list|(
name|rootVector
argument_list|)
decl_stmt|;
return|return
operator|new
name|ArrowWrapperWritable
argument_list|(
name|vectorSchemaRoot
argument_list|,
name|allocator
argument_list|,
name|rootVector
argument_list|)
return|;
block|}
comment|//Used for both:
comment|//1. VectorizedRowBatch constructed by batching rows
comment|//2. VectorizedRowBatch provided from upstream (isNative)
specifier|public
name|ArrowWrapperWritable
name|serializeBatch
parameter_list|(
name|VectorizedRowBatch
name|vectorizedRowBatch
parameter_list|,
name|boolean
name|isNative
parameter_list|)
block|{
name|rootVector
operator|.
name|setValueCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|fieldIndex
init|=
literal|0
init|;
name|fieldIndex
operator|<
name|vectorizedRowBatch
operator|.
name|projectionSize
condition|;
name|fieldIndex
operator|++
control|)
block|{
specifier|final
name|int
name|projectedColumn
init|=
name|vectorizedRowBatch
operator|.
name|projectedColumns
index|[
name|fieldIndex
index|]
decl_stmt|;
specifier|final
name|ColumnVector
name|hiveVector
init|=
name|vectorizedRowBatch
operator|.
name|cols
index|[
name|projectedColumn
index|]
decl_stmt|;
specifier|final
name|TypeInfo
name|fieldTypeInfo
init|=
name|fieldTypeInfos
operator|.
name|get
argument_list|(
name|fieldIndex
argument_list|)
decl_stmt|;
specifier|final
name|String
name|fieldName
init|=
name|fieldNames
operator|.
name|get
argument_list|(
name|fieldIndex
argument_list|)
decl_stmt|;
specifier|final
name|FieldType
name|fieldType
init|=
name|toFieldType
argument_list|(
name|fieldTypeInfo
argument_list|)
decl_stmt|;
comment|//Reuse existing FieldVector buffers
comment|//since we always call setValue or setNull for each row
name|boolean
name|fieldExists
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|rootVector
operator|.
name|getChild
argument_list|(
name|fieldName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|fieldExists
operator|=
literal|true
expr_stmt|;
block|}
specifier|final
name|FieldVector
name|arrowVector
init|=
name|rootVector
operator|.
name|addOrGet
argument_list|(
name|fieldName
argument_list|,
name|fieldType
argument_list|,
name|FieldVector
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldExists
condition|)
block|{
name|arrowVector
operator|.
name|setValueCount
argument_list|(
name|isNative
condition|?
name|vectorizedRowBatch
operator|.
name|size
else|:
name|batchSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|arrowVector
operator|.
name|setInitialCapacity
argument_list|(
name|isNative
condition|?
name|vectorizedRowBatch
operator|.
name|size
else|:
name|batchSize
argument_list|)
expr_stmt|;
name|arrowVector
operator|.
name|allocateNew
argument_list|()
expr_stmt|;
block|}
name|write
argument_list|(
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|fieldTypeInfo
argument_list|,
name|isNative
condition|?
name|vectorizedRowBatch
operator|.
name|size
else|:
name|batchSize
argument_list|,
name|vectorizedRowBatch
argument_list|,
name|isNative
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isNative
condition|)
block|{
comment|//Only mutate batches that are constructed by this serde
name|vectorizedRowBatch
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rootVector
operator|.
name|setValueCount
argument_list|(
name|batchSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rootVector
operator|.
name|setValueCount
argument_list|(
name|vectorizedRowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
name|batchSize
operator|=
literal|0
expr_stmt|;
name|VectorSchemaRoot
name|vectorSchemaRoot
init|=
operator|new
name|VectorSchemaRoot
argument_list|(
name|rootVector
argument_list|)
decl_stmt|;
return|return
operator|new
name|ArrowWrapperWritable
argument_list|(
name|vectorSchemaRoot
argument_list|,
name|allocator
argument_list|,
name|rootVector
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|FieldType
name|toFieldType
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
return|return
operator|new
name|FieldType
argument_list|(
literal|true
argument_list|,
name|toArrowType
argument_list|(
name|typeInfo
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ArrowType
name|toArrowType
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
switch|switch
condition|(
name|typeInfo
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
switch|switch
condition|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|BIT
operator|.
name|getType
argument_list|()
return|;
case|case
name|BYTE
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|TINYINT
operator|.
name|getType
argument_list|()
return|;
case|case
name|SHORT
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|SMALLINT
operator|.
name|getType
argument_list|()
return|;
case|case
name|INT
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|INT
operator|.
name|getType
argument_list|()
return|;
case|case
name|LONG
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|BIGINT
operator|.
name|getType
argument_list|()
return|;
case|case
name|FLOAT
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|FLOAT4
operator|.
name|getType
argument_list|()
return|;
case|case
name|DOUBLE
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|FLOAT8
operator|.
name|getType
argument_list|()
return|;
case|case
name|STRING
case|:
case|case
name|VARCHAR
case|:
case|case
name|CHAR
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|VARCHAR
operator|.
name|getType
argument_list|()
return|;
case|case
name|DATE
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|DATEDAY
operator|.
name|getType
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
comment|// HIVE-19853: Prefer timestamp in microsecond with time zone because Spark supports it
return|return
operator|new
name|ArrowType
operator|.
name|Timestamp
argument_list|(
name|TimeUnit
operator|.
name|MICROSECOND
argument_list|,
literal|"UTC"
argument_list|)
return|;
case|case
name|BINARY
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|VARBINARY
operator|.
name|getType
argument_list|()
return|;
case|case
name|DECIMAL
case|:
specifier|final
name|DecimalTypeInfo
name|decimalTypeInfo
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|typeInfo
decl_stmt|;
return|return
operator|new
name|ArrowType
operator|.
name|Decimal
argument_list|(
name|decimalTypeInfo
operator|.
name|precision
argument_list|()
argument_list|,
name|decimalTypeInfo
operator|.
name|scale
argument_list|()
argument_list|)
return|;
case|case
name|INTERVAL_YEAR_MONTH
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|INTERVALYEAR
operator|.
name|getType
argument_list|()
return|;
case|case
name|INTERVAL_DAY_TIME
case|:
return|return
name|Types
operator|.
name|MinorType
operator|.
name|INTERVALDAY
operator|.
name|getType
argument_list|()
return|;
case|case
name|VOID
case|:
case|case
name|TIMESTAMPLOCALTZ
case|:
case|case
name|UNKNOWN
case|:
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
case|case
name|LIST
case|:
return|return
name|ArrowType
operator|.
name|List
operator|.
name|INSTANCE
return|;
case|case
name|STRUCT
case|:
return|return
name|ArrowType
operator|.
name|Struct
operator|.
name|INSTANCE
return|;
case|case
name|MAP
case|:
return|return
name|ArrowType
operator|.
name|List
operator|.
name|INSTANCE
return|;
case|case
name|UNION
case|:
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|write
parameter_list|(
name|FieldVector
name|arrowVector
parameter_list|,
name|ColumnVector
name|hiveVector
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|,
name|int
name|size
parameter_list|,
name|VectorizedRowBatch
name|vectorizedRowBatch
parameter_list|,
name|boolean
name|isNative
parameter_list|)
block|{
switch|switch
condition|(
name|typeInfo
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
name|writePrimitive
argument_list|(
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|typeInfo
argument_list|,
name|size
argument_list|,
name|vectorizedRowBatch
argument_list|,
name|isNative
argument_list|)
expr_stmt|;
break|break;
case|case
name|LIST
case|:
name|writeList
argument_list|(
operator|(
name|ListVector
operator|)
name|arrowVector
argument_list|,
operator|(
name|ListColumnVector
operator|)
name|hiveVector
argument_list|,
operator|(
name|ListTypeInfo
operator|)
name|typeInfo
argument_list|,
name|size
argument_list|,
name|vectorizedRowBatch
argument_list|,
name|isNative
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRUCT
case|:
name|writeStruct
argument_list|(
operator|(
name|MapVector
operator|)
name|arrowVector
argument_list|,
operator|(
name|StructColumnVector
operator|)
name|hiveVector
argument_list|,
operator|(
name|StructTypeInfo
operator|)
name|typeInfo
argument_list|,
name|size
argument_list|,
name|vectorizedRowBatch
argument_list|,
name|isNative
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNION
case|:
name|writeUnion
argument_list|(
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|typeInfo
argument_list|,
name|size
argument_list|,
name|vectorizedRowBatch
argument_list|,
name|isNative
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAP
case|:
name|writeMap
argument_list|(
operator|(
name|ListVector
operator|)
name|arrowVector
argument_list|,
operator|(
name|MapColumnVector
operator|)
name|hiveVector
argument_list|,
operator|(
name|MapTypeInfo
operator|)
name|typeInfo
argument_list|,
name|size
argument_list|,
name|vectorizedRowBatch
argument_list|,
name|isNative
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|writeMap
parameter_list|(
name|ListVector
name|arrowVector
parameter_list|,
name|MapColumnVector
name|hiveVector
parameter_list|,
name|MapTypeInfo
name|typeInfo
parameter_list|,
name|int
name|size
parameter_list|,
name|VectorizedRowBatch
name|vectorizedRowBatch
parameter_list|,
name|boolean
name|isNative
parameter_list|)
block|{
specifier|final
name|ListTypeInfo
name|structListTypeInfo
init|=
name|toStructListTypeInfo
argument_list|(
name|typeInfo
argument_list|)
decl_stmt|;
specifier|final
name|ListColumnVector
name|structListVector
init|=
name|toStructListVector
argument_list|(
name|hiveVector
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|arrowVector
argument_list|,
name|structListVector
argument_list|,
name|structListTypeInfo
argument_list|,
name|size
argument_list|,
name|vectorizedRowBatch
argument_list|,
name|isNative
argument_list|)
expr_stmt|;
specifier|final
name|ArrowBuf
name|validityBuffer
init|=
name|arrowVector
operator|.
name|getValidityBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|rowIndex
init|=
literal|0
init|;
name|rowIndex
operator|<
name|size
condition|;
name|rowIndex
operator|++
control|)
block|{
if|if
condition|(
name|hiveVector
operator|.
name|isNull
index|[
name|rowIndex
index|]
condition|)
block|{
name|BitVectorHelper
operator|.
name|setValidityBit
argument_list|(
name|validityBuffer
argument_list|,
name|rowIndex
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BitVectorHelper
operator|.
name|setValidityBitToOne
argument_list|(
name|validityBuffer
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|writeUnion
parameter_list|(
name|FieldVector
name|arrowVector
parameter_list|,
name|ColumnVector
name|hiveVector
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|,
name|int
name|size
parameter_list|,
name|VectorizedRowBatch
name|vectorizedRowBatch
parameter_list|,
name|boolean
name|isNative
parameter_list|)
block|{
specifier|final
name|UnionTypeInfo
name|unionTypeInfo
init|=
operator|(
name|UnionTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|objectTypeInfos
init|=
name|unionTypeInfo
operator|.
name|getAllUnionObjectTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|UnionColumnVector
name|hiveUnionVector
init|=
operator|(
name|UnionColumnVector
operator|)
name|hiveVector
decl_stmt|;
specifier|final
name|ColumnVector
index|[]
name|hiveObjectVectors
init|=
name|hiveUnionVector
operator|.
name|fields
decl_stmt|;
specifier|final
name|int
name|tag
init|=
name|hiveUnionVector
operator|.
name|tags
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|ColumnVector
name|hiveObjectVector
init|=
name|hiveObjectVectors
index|[
name|tag
index|]
decl_stmt|;
specifier|final
name|TypeInfo
name|objectTypeInfo
init|=
name|objectTypeInfos
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|arrowVector
argument_list|,
name|hiveObjectVector
argument_list|,
name|objectTypeInfo
argument_list|,
name|size
argument_list|,
name|vectorizedRowBatch
argument_list|,
name|isNative
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|writeStruct
parameter_list|(
name|MapVector
name|arrowVector
parameter_list|,
name|StructColumnVector
name|hiveVector
parameter_list|,
name|StructTypeInfo
name|typeInfo
parameter_list|,
name|int
name|size
parameter_list|,
name|VectorizedRowBatch
name|vectorizedRowBatch
parameter_list|,
name|boolean
name|isNative
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|typeInfo
operator|.
name|getAllStructFieldNames
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
init|=
name|typeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|ColumnVector
index|[]
name|hiveFieldVectors
init|=
name|hiveVector
operator|.
name|fields
decl_stmt|;
specifier|final
name|int
name|fieldSize
init|=
name|fieldTypeInfos
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|fieldIndex
init|=
literal|0
init|;
name|fieldIndex
operator|<
name|fieldSize
condition|;
name|fieldIndex
operator|++
control|)
block|{
specifier|final
name|TypeInfo
name|fieldTypeInfo
init|=
name|fieldTypeInfos
operator|.
name|get
argument_list|(
name|fieldIndex
argument_list|)
decl_stmt|;
specifier|final
name|ColumnVector
name|hiveFieldVector
init|=
name|hiveFieldVectors
index|[
name|fieldIndex
index|]
decl_stmt|;
specifier|final
name|String
name|fieldName
init|=
name|fieldNames
operator|.
name|get
argument_list|(
name|fieldIndex
argument_list|)
decl_stmt|;
specifier|final
name|FieldVector
name|arrowFieldVector
init|=
name|arrowVector
operator|.
name|addOrGet
argument_list|(
name|fieldName
argument_list|,
name|toFieldType
argument_list|(
name|fieldTypeInfos
operator|.
name|get
argument_list|(
name|fieldIndex
argument_list|)
argument_list|)
argument_list|,
name|FieldVector
operator|.
name|class
argument_list|)
decl_stmt|;
name|arrowFieldVector
operator|.
name|setInitialCapacity
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|arrowFieldVector
operator|.
name|allocateNew
argument_list|()
expr_stmt|;
name|write
argument_list|(
name|arrowFieldVector
argument_list|,
name|hiveFieldVector
argument_list|,
name|fieldTypeInfo
argument_list|,
name|size
argument_list|,
name|vectorizedRowBatch
argument_list|,
name|isNative
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ArrowBuf
name|validityBuffer
init|=
name|arrowVector
operator|.
name|getValidityBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|rowIndex
init|=
literal|0
init|;
name|rowIndex
operator|<
name|size
condition|;
name|rowIndex
operator|++
control|)
block|{
if|if
condition|(
name|hiveVector
operator|.
name|isNull
index|[
name|rowIndex
index|]
condition|)
block|{
name|BitVectorHelper
operator|.
name|setValidityBit
argument_list|(
name|validityBuffer
argument_list|,
name|rowIndex
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BitVectorHelper
operator|.
name|setValidityBitToOne
argument_list|(
name|validityBuffer
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|writeList
parameter_list|(
name|ListVector
name|arrowVector
parameter_list|,
name|ListColumnVector
name|hiveVector
parameter_list|,
name|ListTypeInfo
name|typeInfo
parameter_list|,
name|int
name|size
parameter_list|,
name|VectorizedRowBatch
name|vectorizedRowBatch
parameter_list|,
name|boolean
name|isNative
parameter_list|)
block|{
specifier|final
name|int
name|OFFSET_WIDTH
init|=
literal|4
decl_stmt|;
specifier|final
name|TypeInfo
name|elementTypeInfo
init|=
name|typeInfo
operator|.
name|getListElementTypeInfo
argument_list|()
decl_stmt|;
specifier|final
name|ColumnVector
name|hiveElementVector
init|=
name|hiveVector
operator|.
name|child
decl_stmt|;
specifier|final
name|FieldVector
name|arrowElementVector
init|=
operator|(
name|FieldVector
operator|)
name|arrowVector
operator|.
name|addOrGetVector
argument_list|(
name|toFieldType
argument_list|(
name|elementTypeInfo
argument_list|)
argument_list|)
operator|.
name|getVector
argument_list|()
decl_stmt|;
name|arrowElementVector
operator|.
name|setInitialCapacity
argument_list|(
name|hiveVector
operator|.
name|childCount
argument_list|)
expr_stmt|;
name|arrowElementVector
operator|.
name|allocateNew
argument_list|()
expr_stmt|;
name|write
argument_list|(
name|arrowElementVector
argument_list|,
name|hiveElementVector
argument_list|,
name|elementTypeInfo
argument_list|,
name|hiveVector
operator|.
name|childCount
argument_list|,
name|vectorizedRowBatch
argument_list|,
name|isNative
argument_list|)
expr_stmt|;
specifier|final
name|ArrowBuf
name|offsetBuffer
init|=
name|arrowVector
operator|.
name|getOffsetBuffer
argument_list|()
decl_stmt|;
name|int
name|nextOffset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|rowIndex
init|=
literal|0
init|;
name|rowIndex
operator|<
name|size
condition|;
name|rowIndex
operator|++
control|)
block|{
if|if
condition|(
name|hiveVector
operator|.
name|isNull
index|[
name|rowIndex
index|]
condition|)
block|{
name|offsetBuffer
operator|.
name|setInt
argument_list|(
name|rowIndex
operator|*
name|OFFSET_WIDTH
argument_list|,
name|nextOffset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|offsetBuffer
operator|.
name|setInt
argument_list|(
name|rowIndex
operator|*
name|OFFSET_WIDTH
argument_list|,
name|nextOffset
argument_list|)
expr_stmt|;
name|nextOffset
operator|+=
operator|(
name|int
operator|)
name|hiveVector
operator|.
name|lengths
index|[
name|rowIndex
index|]
expr_stmt|;
name|arrowVector
operator|.
name|setNotNull
argument_list|(
name|rowIndex
argument_list|)
expr_stmt|;
block|}
block|}
name|offsetBuffer
operator|.
name|setInt
argument_list|(
name|size
operator|*
name|OFFSET_WIDTH
argument_list|,
name|nextOffset
argument_list|)
expr_stmt|;
block|}
comment|//Handle cases for both internally constructed
comment|//and externally provided (isNative) VectorRowBatch
specifier|private
specifier|static
name|void
name|writePrimitive
parameter_list|(
name|FieldVector
name|arrowVector
parameter_list|,
name|ColumnVector
name|hiveVector
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|,
name|int
name|size
parameter_list|,
name|VectorizedRowBatch
name|vectorizedRowBatch
parameter_list|,
name|boolean
name|isNative
parameter_list|)
block|{
specifier|final
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
name|primitiveCategory
init|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|primitiveCategory
condition|)
block|{
case|case
name|BOOLEAN
case|:
block|{
if|if
condition|(
name|isNative
condition|)
block|{
name|writeGeneric
argument_list|(
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|size
argument_list|,
name|vectorizedRowBatch
operator|.
name|selectedInUse
argument_list|,
name|vectorizedRowBatch
operator|.
name|selected
argument_list|,
name|boolNullSetter
argument_list|,
name|boolValueSetter
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|BitVector
name|bitVector
init|=
operator|(
name|BitVector
operator|)
name|arrowVector
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|boolNullSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolValueSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|BYTE
case|:
block|{
if|if
condition|(
name|isNative
condition|)
block|{
name|writeGeneric
argument_list|(
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|size
argument_list|,
name|vectorizedRowBatch
operator|.
name|selectedInUse
argument_list|,
name|vectorizedRowBatch
operator|.
name|selected
argument_list|,
name|byteNullSetter
argument_list|,
name|byteValueSetter
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|TinyIntVector
name|tinyIntVector
init|=
operator|(
name|TinyIntVector
operator|)
name|arrowVector
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|byteNullSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byteValueSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|SHORT
case|:
block|{
if|if
condition|(
name|isNative
condition|)
block|{
name|writeGeneric
argument_list|(
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|size
argument_list|,
name|vectorizedRowBatch
operator|.
name|selectedInUse
argument_list|,
name|vectorizedRowBatch
operator|.
name|selected
argument_list|,
name|shortNullSetter
argument_list|,
name|shortValueSetter
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|SmallIntVector
name|smallIntVector
init|=
operator|(
name|SmallIntVector
operator|)
name|arrowVector
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|shortNullSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shortValueSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|INT
case|:
block|{
if|if
condition|(
name|isNative
condition|)
block|{
name|writeGeneric
argument_list|(
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|size
argument_list|,
name|vectorizedRowBatch
operator|.
name|selectedInUse
argument_list|,
name|vectorizedRowBatch
operator|.
name|selected
argument_list|,
name|intNullSetter
argument_list|,
name|intValueSetter
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|intNullSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|intValueSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|LONG
case|:
block|{
if|if
condition|(
name|isNative
condition|)
block|{
name|writeGeneric
argument_list|(
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|size
argument_list|,
name|vectorizedRowBatch
operator|.
name|selectedInUse
argument_list|,
name|vectorizedRowBatch
operator|.
name|selected
argument_list|,
name|longNullSetter
argument_list|,
name|longValueSetter
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|BigIntVector
name|bigIntVector
init|=
operator|(
name|BigIntVector
operator|)
name|arrowVector
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|longNullSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|longValueSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|FLOAT
case|:
block|{
if|if
condition|(
name|isNative
condition|)
block|{
name|writeGeneric
argument_list|(
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|size
argument_list|,
name|vectorizedRowBatch
operator|.
name|selectedInUse
argument_list|,
name|vectorizedRowBatch
operator|.
name|selected
argument_list|,
name|floatNullSetter
argument_list|,
name|floatValueSetter
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|floatNullSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|floatValueSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|DOUBLE
case|:
block|{
if|if
condition|(
name|isNative
condition|)
block|{
name|writeGeneric
argument_list|(
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|size
argument_list|,
name|vectorizedRowBatch
operator|.
name|selectedInUse
argument_list|,
name|vectorizedRowBatch
operator|.
name|selected
argument_list|,
name|doubleNullSetter
argument_list|,
name|doubleValueSetter
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|Float8Vector
name|float8Vector
init|=
operator|(
name|Float8Vector
operator|)
name|arrowVector
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|doubleNullSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doubleValueSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|CHAR
case|:
block|{
if|if
condition|(
name|isNative
condition|)
block|{
name|writeGeneric
argument_list|(
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|size
argument_list|,
name|vectorizedRowBatch
operator|.
name|selectedInUse
argument_list|,
name|vectorizedRowBatch
operator|.
name|selected
argument_list|,
name|charNullSetter
argument_list|,
name|charValueSetter
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|charNullSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|charValueSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|STRING
case|:
case|case
name|VARCHAR
case|:
block|{
if|if
condition|(
name|isNative
condition|)
block|{
name|writeGeneric
argument_list|(
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|size
argument_list|,
name|vectorizedRowBatch
operator|.
name|selectedInUse
argument_list|,
name|vectorizedRowBatch
operator|.
name|selected
argument_list|,
name|stringNullSetter
argument_list|,
name|stringValueSetter
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|stringNullSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stringValueSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|DATE
case|:
block|{
if|if
condition|(
name|isNative
condition|)
block|{
name|writeGeneric
argument_list|(
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|size
argument_list|,
name|vectorizedRowBatch
operator|.
name|selectedInUse
argument_list|,
name|vectorizedRowBatch
operator|.
name|selected
argument_list|,
name|dateNullSetter
argument_list|,
name|dateValueSetter
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|dateNullSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dateValueSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|TIMESTAMP
case|:
block|{
if|if
condition|(
name|isNative
condition|)
block|{
name|writeGeneric
argument_list|(
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|size
argument_list|,
name|vectorizedRowBatch
operator|.
name|selectedInUse
argument_list|,
name|vectorizedRowBatch
operator|.
name|selected
argument_list|,
name|timestampNullSetter
argument_list|,
name|timestampValueSetter
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|timestampNullSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|timestampValueSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|BINARY
case|:
block|{
if|if
condition|(
name|isNative
condition|)
block|{
name|writeGeneric
argument_list|(
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|size
argument_list|,
name|vectorizedRowBatch
operator|.
name|selectedInUse
argument_list|,
name|vectorizedRowBatch
operator|.
name|selected
argument_list|,
name|binaryNullSetter
argument_list|,
name|binaryValueSetter
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|binaryNullSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|binaryValueSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|DECIMAL
case|:
block|{
if|if
condition|(
name|isNative
condition|)
block|{
if|if
condition|(
name|hiveVector
operator|instanceof
name|DecimalColumnVector
condition|)
block|{
name|writeGeneric
argument_list|(
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|size
argument_list|,
name|vectorizedRowBatch
operator|.
name|selectedInUse
argument_list|,
name|vectorizedRowBatch
operator|.
name|selected
argument_list|,
name|decimalNullSetter
argument_list|,
name|decimalValueSetter
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeGeneric
argument_list|(
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|size
argument_list|,
name|vectorizedRowBatch
operator|.
name|selectedInUse
argument_list|,
name|vectorizedRowBatch
operator|.
name|selected
argument_list|,
name|decimalNullSetter
argument_list|,
name|decimal64ValueSetter
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|decimalNullSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hiveVector
operator|instanceof
name|DecimalColumnVector
condition|)
block|{
name|decimalValueSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hiveVector
operator|instanceof
name|Decimal64ColumnVector
condition|)
block|{
name|decimal64ValueSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported vector column type: "
operator|+
name|hiveVector
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
block|{
if|if
condition|(
name|isNative
condition|)
block|{
name|writeGeneric
argument_list|(
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|size
argument_list|,
name|vectorizedRowBatch
operator|.
name|selectedInUse
argument_list|,
name|vectorizedRowBatch
operator|.
name|selected
argument_list|,
name|intervalYearMonthNullSetter
argument_list|,
name|intervalYearMonthValueSetter
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|intervalYearMonthNullSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|intervalYearMonthValueSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
block|{
if|if
condition|(
name|isNative
condition|)
block|{
name|writeGeneric
argument_list|(
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|size
argument_list|,
name|vectorizedRowBatch
operator|.
name|selectedInUse
argument_list|,
name|vectorizedRowBatch
operator|.
name|selected
argument_list|,
name|intervalDayTimeNullSetter
argument_list|,
name|intervalDayTimeValueSetter
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|hiveVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|intervalDayTimeNullSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|intervalDayTimeValueSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|arrowVector
argument_list|,
name|hiveVector
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|VOID
case|:
case|case
name|UNKNOWN
case|:
case|case
name|TIMESTAMPLOCALTZ
case|:
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
name|ArrowWrapperWritable
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|)
block|{
comment|// if row is null, it means there are no more rows (closeOp()).
comment|// another case can be that the buffer is full.
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
name|serializeBatch
argument_list|(
name|vectorizedRowBatch
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|standardObjects
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|standardObjects
argument_list|,
name|obj
argument_list|,
operator|(
operator|(
name|StructObjectInspector
operator|)
name|objInspector
operator|)
argument_list|,
name|WRITABLE
argument_list|)
expr_stmt|;
name|vectorAssignRow
operator|.
name|assignRow
argument_list|(
name|vectorizedRowBatch
argument_list|,
name|batchSize
argument_list|,
name|standardObjects
argument_list|,
name|fieldSize
argument_list|)
expr_stmt|;
name|batchSize
operator|++
expr_stmt|;
if|if
condition|(
name|batchSize
operator|==
name|MAX_BUFFERED_ROWS
condition|)
block|{
return|return
name|serializeBatch
argument_list|(
name|vectorizedRowBatch
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|//Use a provided nullSetter and valueSetter function to populate
comment|//fieldVector from hiveVector
specifier|private
specifier|static
name|void
name|writeGeneric
parameter_list|(
specifier|final
name|FieldVector
name|fieldVector
parameter_list|,
specifier|final
name|ColumnVector
name|hiveVector
parameter_list|,
specifier|final
name|int
name|size
parameter_list|,
specifier|final
name|boolean
name|selectedInUse
parameter_list|,
specifier|final
name|int
index|[]
name|selected
parameter_list|,
specifier|final
name|IntAndVectorsConsumer
name|nullSetter
parameter_list|,
specifier|final
name|IntIntAndVectorsConsumer
name|valueSetter
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
specifier|final
name|boolean
index|[]
name|inputIsNull
init|=
name|hiveVector
operator|.
name|isNull
decl_stmt|;
specifier|final
name|int
index|[]
name|sel
init|=
name|selected
decl_stmt|;
if|if
condition|(
name|hiveVector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|hiveVector
operator|.
name|noNulls
operator|||
operator|!
name|inputIsNull
index|[
literal|0
index|]
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
comment|//Fill n rows with value in row 0
name|valueSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|fieldVector
argument_list|,
name|hiveVector
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
comment|//Fill n rows with NULL
name|nullSetter
operator|.
name|accept
argument_list|(
name|i
argument_list|,
name|fieldVector
argument_list|,
name|hiveVector
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
if|if
condition|(
name|hiveVector
operator|.
name|noNulls
condition|)
block|{
if|if
condition|(
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|logical
init|=
literal|0
init|;
name|logical
operator|<
name|size
condition|;
name|logical
operator|++
control|)
block|{
specifier|final
name|int
name|batchIndex
init|=
name|sel
index|[
name|logical
index|]
decl_stmt|;
comment|//Add row batchIndex
name|valueSetter
operator|.
name|accept
argument_list|(
name|logical
argument_list|,
name|batchIndex
argument_list|,
name|fieldVector
argument_list|,
name|hiveVector
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|batchIndex
init|=
literal|0
init|;
name|batchIndex
operator|<
name|size
condition|;
name|batchIndex
operator|++
control|)
block|{
comment|//Add row batchIndex
name|valueSetter
operator|.
name|accept
argument_list|(
name|batchIndex
argument_list|,
name|batchIndex
argument_list|,
name|fieldVector
argument_list|,
name|hiveVector
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|logical
init|=
literal|0
init|;
name|logical
operator|<
name|size
condition|;
name|logical
operator|++
control|)
block|{
specifier|final
name|int
name|batchIndex
init|=
name|sel
index|[
name|logical
index|]
decl_stmt|;
if|if
condition|(
name|inputIsNull
index|[
name|batchIndex
index|]
condition|)
block|{
comment|//Add NULL
name|nullSetter
operator|.
name|accept
argument_list|(
name|batchIndex
argument_list|,
name|fieldVector
argument_list|,
name|hiveVector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Add row batchIndex
name|valueSetter
operator|.
name|accept
argument_list|(
name|logical
argument_list|,
name|batchIndex
argument_list|,
name|fieldVector
argument_list|,
name|hiveVector
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|batchIndex
init|=
literal|0
init|;
name|batchIndex
operator|<
name|size
condition|;
name|batchIndex
operator|++
control|)
block|{
if|if
condition|(
name|inputIsNull
index|[
name|batchIndex
index|]
condition|)
block|{
comment|//Add NULL
name|nullSetter
operator|.
name|accept
argument_list|(
name|batchIndex
argument_list|,
name|fieldVector
argument_list|,
name|hiveVector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Add row batchIndex
name|valueSetter
operator|.
name|accept
argument_list|(
name|batchIndex
argument_list|,
name|batchIndex
argument_list|,
name|fieldVector
argument_list|,
name|hiveVector
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|//nullSetters and valueSetter for each type
comment|//bool
specifier|private
specifier|static
specifier|final
name|IntAndVectorsConsumer
name|boolNullSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|)
lambda|->
operator|(
operator|(
name|BitVector
operator|)
name|arrowVector
operator|)
operator|.
name|setNull
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IntIntAndVectorsConsumer
name|boolValueSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|j
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|,
name|typeInfo
parameter_list|)
lambda|->
operator|(
operator|(
name|BitVector
operator|)
name|arrowVector
operator|)
operator|.
name|set
argument_list|(
name|i
argument_list|,
call|(
name|int
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|hiveVector
argument_list|)
operator|.
name|vector
index|[
name|j
index|]
argument_list|)
decl_stmt|;
comment|//byte
specifier|private
specifier|static
specifier|final
name|IntAndVectorsConsumer
name|byteNullSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|)
lambda|->
operator|(
operator|(
name|TinyIntVector
operator|)
name|arrowVector
operator|)
operator|.
name|setNull
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IntIntAndVectorsConsumer
name|byteValueSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|j
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|,
name|typeInfo
parameter_list|)
lambda|->
operator|(
operator|(
name|TinyIntVector
operator|)
name|arrowVector
operator|)
operator|.
name|set
argument_list|(
name|i
argument_list|,
call|(
name|byte
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|hiveVector
argument_list|)
operator|.
name|vector
index|[
name|j
index|]
argument_list|)
decl_stmt|;
comment|//short
specifier|private
specifier|static
specifier|final
name|IntAndVectorsConsumer
name|shortNullSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|)
lambda|->
operator|(
operator|(
name|SmallIntVector
operator|)
name|arrowVector
operator|)
operator|.
name|setNull
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IntIntAndVectorsConsumer
name|shortValueSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|j
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|,
name|typeInfo
parameter_list|)
lambda|->
operator|(
operator|(
name|SmallIntVector
operator|)
name|arrowVector
operator|)
operator|.
name|set
argument_list|(
name|i
argument_list|,
call|(
name|short
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|hiveVector
argument_list|)
operator|.
name|vector
index|[
name|j
index|]
argument_list|)
decl_stmt|;
comment|//int
specifier|private
specifier|static
specifier|final
name|IntAndVectorsConsumer
name|intNullSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|)
lambda|->
operator|(
operator|(
name|IntVector
operator|)
name|arrowVector
operator|)
operator|.
name|setNull
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IntIntAndVectorsConsumer
name|intValueSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|j
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|,
name|typeInfo
parameter_list|)
lambda|->
operator|(
operator|(
name|IntVector
operator|)
name|arrowVector
operator|)
operator|.
name|set
argument_list|(
name|i
argument_list|,
call|(
name|int
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|hiveVector
argument_list|)
operator|.
name|vector
index|[
name|j
index|]
argument_list|)
decl_stmt|;
comment|//long
specifier|private
specifier|static
specifier|final
name|IntAndVectorsConsumer
name|longNullSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|)
lambda|->
operator|(
operator|(
name|BigIntVector
operator|)
name|arrowVector
operator|)
operator|.
name|setNull
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IntIntAndVectorsConsumer
name|longValueSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|j
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|,
name|typeInfo
parameter_list|)
lambda|->
operator|(
operator|(
name|BigIntVector
operator|)
name|arrowVector
operator|)
operator|.
name|set
argument_list|(
name|i
argument_list|,
operator|(
operator|(
name|LongColumnVector
operator|)
name|hiveVector
operator|)
operator|.
name|vector
index|[
name|j
index|]
argument_list|)
decl_stmt|;
comment|//float
specifier|private
specifier|static
specifier|final
name|IntAndVectorsConsumer
name|floatNullSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|)
lambda|->
operator|(
operator|(
name|Float4Vector
operator|)
name|arrowVector
operator|)
operator|.
name|setNull
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IntIntAndVectorsConsumer
name|floatValueSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|j
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|,
name|typeInfo
parameter_list|)
lambda|->
operator|(
operator|(
name|Float4Vector
operator|)
name|arrowVector
operator|)
operator|.
name|set
argument_list|(
name|i
argument_list|,
call|(
name|float
call|)
argument_list|(
operator|(
name|DoubleColumnVector
operator|)
name|hiveVector
argument_list|)
operator|.
name|vector
index|[
name|j
index|]
argument_list|)
decl_stmt|;
comment|//double
specifier|private
specifier|static
specifier|final
name|IntAndVectorsConsumer
name|doubleNullSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|)
lambda|->
operator|(
operator|(
name|Float8Vector
operator|)
name|arrowVector
operator|)
operator|.
name|setNull
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IntIntAndVectorsConsumer
name|doubleValueSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|j
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|,
name|typeInfo
parameter_list|)
lambda|->
operator|(
operator|(
name|Float8Vector
operator|)
name|arrowVector
operator|)
operator|.
name|set
argument_list|(
name|i
argument_list|,
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|hiveVector
operator|)
operator|.
name|vector
index|[
name|j
index|]
argument_list|)
decl_stmt|;
comment|//string/varchar
specifier|private
specifier|static
specifier|final
name|IntAndVectorsConsumer
name|stringNullSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|)
lambda|->
operator|(
operator|(
name|VarCharVector
operator|)
name|arrowVector
operator|)
operator|.
name|setNull
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IntIntAndVectorsConsumer
name|stringValueSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|j
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|,
name|typeInfo
parameter_list|)
lambda|->
block|{
name|BytesColumnVector
name|bytesVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|hiveVector
decl_stmt|;
operator|(
operator|(
name|VarCharVector
operator|)
name|arrowVector
operator|)
operator|.
name|setSafe
argument_list|(
name|i
argument_list|,
name|bytesVector
operator|.
name|vector
index|[
name|j
index|]
argument_list|,
name|bytesVector
operator|.
name|start
index|[
name|j
index|]
argument_list|,
name|bytesVector
operator|.
name|length
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
comment|//fixed-length CHAR
specifier|private
specifier|static
specifier|final
name|IntAndVectorsConsumer
name|charNullSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|)
lambda|->
operator|(
operator|(
name|VarCharVector
operator|)
name|arrowVector
operator|)
operator|.
name|setNull
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IntIntAndVectorsConsumer
name|charValueSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|j
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|,
name|typeInfo
parameter_list|)
lambda|->
block|{
name|BytesColumnVector
name|bytesVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|hiveVector
decl_stmt|;
name|VarCharVector
name|varCharVector
init|=
operator|(
name|VarCharVector
operator|)
name|arrowVector
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|bytesVector
operator|.
name|vector
index|[
name|j
index|]
decl_stmt|;
name|int
name|length
init|=
name|bytesVector
operator|.
name|length
index|[
name|j
index|]
decl_stmt|;
name|int
name|start
init|=
name|bytesVector
operator|.
name|start
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
name|bytes
operator|=
name|EMPTY_BYTES
expr_stmt|;
name|start
operator|=
literal|0
expr_stmt|;
name|length
operator|=
literal|0
expr_stmt|;
block|}
specifier|final
name|CharTypeInfo
name|charTypeInfo
init|=
operator|(
name|CharTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|int
name|paddedLength
init|=
name|charTypeInfo
operator|.
name|getLength
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|paddedBytes
init|=
name|StringExpr
operator|.
name|padRight
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|length
argument_list|,
name|paddedLength
argument_list|)
decl_stmt|;
name|varCharVector
operator|.
name|setSafe
argument_list|(
name|i
argument_list|,
name|paddedBytes
argument_list|,
literal|0
argument_list|,
name|paddedBytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
comment|//date
specifier|private
specifier|static
specifier|final
name|IntAndVectorsConsumer
name|dateNullSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|)
lambda|->
operator|(
operator|(
name|DateDayVector
operator|)
name|arrowVector
operator|)
operator|.
name|setNull
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IntIntAndVectorsConsumer
name|dateValueSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|j
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|,
name|typeInfo
parameter_list|)
lambda|->
operator|(
operator|(
name|DateDayVector
operator|)
name|arrowVector
operator|)
operator|.
name|set
argument_list|(
name|i
argument_list|,
call|(
name|int
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|hiveVector
argument_list|)
operator|.
name|vector
index|[
name|j
index|]
argument_list|)
decl_stmt|;
comment|//timestamp
specifier|private
specifier|static
specifier|final
name|IntAndVectorsConsumer
name|timestampNullSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|)
lambda|->
operator|(
operator|(
name|TimeStampMicroTZVector
operator|)
name|arrowVector
operator|)
operator|.
name|setNull
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IntIntAndVectorsConsumer
name|timestampValueSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|j
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|,
name|typeInfo
parameter_list|)
lambda|->
block|{
specifier|final
name|TimeStampMicroTZVector
name|timeStampMicroTZVector
init|=
operator|(
name|TimeStampMicroTZVector
operator|)
name|arrowVector
decl_stmt|;
specifier|final
name|TimestampColumnVector
name|timestampColumnVector
init|=
operator|(
name|TimestampColumnVector
operator|)
name|hiveVector
decl_stmt|;
comment|// Time = second + sub-second
specifier|final
name|long
name|secondInMillis
init|=
name|timestampColumnVector
operator|.
name|getTime
argument_list|(
name|j
argument_list|)
decl_stmt|;
specifier|final
name|long
name|secondInMicros
init|=
operator|(
name|secondInMillis
operator|-
name|secondInMillis
operator|%
name|MILLIS_PER_SECOND
operator|)
operator|*
name|MICROS_PER_MILLIS
decl_stmt|;
specifier|final
name|long
name|subSecondInMicros
init|=
name|timestampColumnVector
operator|.
name|getNanos
argument_list|(
name|j
argument_list|)
operator|/
name|NS_PER_MICROS
decl_stmt|;
if|if
condition|(
operator|(
name|secondInMillis
operator|>
literal|0
operator|&&
name|secondInMicros
operator|<
literal|0
operator|)
operator|||
operator|(
name|secondInMillis
argument_list|<
literal|0
operator|&&
name|secondInMicros
argument_list|>
literal|0
operator|)
condition|)
block|{
comment|// If the timestamp cannot be represented in long microsecond, set it as a null value
name|timeStampMicroTZVector
operator|.
name|setNull
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|timeStampMicroTZVector
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|secondInMicros
operator|+
name|subSecondInMicros
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|//binary
specifier|private
specifier|static
specifier|final
name|IntAndVectorsConsumer
name|binaryNullSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|)
lambda|->
operator|(
operator|(
name|VarBinaryVector
operator|)
name|arrowVector
operator|)
operator|.
name|setNull
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IntIntAndVectorsConsumer
name|binaryValueSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|j
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|,
name|typeInfo
parameter_list|)
lambda|->
block|{
name|BytesColumnVector
name|bytesVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|hiveVector
decl_stmt|;
operator|(
operator|(
name|VarBinaryVector
operator|)
name|arrowVector
operator|)
operator|.
name|setSafe
argument_list|(
name|i
argument_list|,
name|bytesVector
operator|.
name|vector
index|[
name|j
index|]
argument_list|,
name|bytesVector
operator|.
name|start
index|[
name|j
index|]
argument_list|,
name|bytesVector
operator|.
name|length
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
comment|//decimal and decimal64
specifier|private
specifier|static
specifier|final
name|IntAndVectorsConsumer
name|decimalNullSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|)
lambda|->
operator|(
operator|(
name|DecimalVector
operator|)
name|arrowVector
operator|)
operator|.
name|setNull
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IntIntAndVectorsConsumer
name|decimalValueSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|j
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|,
name|typeInfo
parameter_list|)
lambda|->
block|{
specifier|final
name|DecimalVector
name|decimalVector
init|=
operator|(
name|DecimalVector
operator|)
name|arrowVector
decl_stmt|;
specifier|final
name|int
name|scale
init|=
name|decimalVector
operator|.
name|getScale
argument_list|()
decl_stmt|;
name|decimalVector
operator|.
name|set
argument_list|(
name|i
argument_list|,
operator|(
operator|(
name|DecimalColumnVector
operator|)
name|hiveVector
operator|)
operator|.
name|vector
index|[
name|j
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|bigDecimalValue
argument_list|()
operator|.
name|setScale
argument_list|(
name|scale
argument_list|)
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IntIntAndVectorsConsumer
name|decimal64ValueSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|j
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|,
name|typeInfo
parameter_list|)
lambda|->
block|{
specifier|final
name|DecimalVector
name|decimalVector
init|=
operator|(
name|DecimalVector
operator|)
name|arrowVector
decl_stmt|;
specifier|final
name|int
name|scale
init|=
name|decimalVector
operator|.
name|getScale
argument_list|()
decl_stmt|;
name|HiveDecimalWritable
name|decimalHolder
init|=
operator|new
name|HiveDecimalWritable
argument_list|()
decl_stmt|;
name|decimalHolder
operator|.
name|setFromLongAndScale
argument_list|(
operator|(
operator|(
name|Decimal64ColumnVector
operator|)
name|hiveVector
operator|)
operator|.
name|vector
index|[
name|j
index|]
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|decimalVector
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|decimalHolder
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|bigDecimalValue
argument_list|()
operator|.
name|setScale
argument_list|(
name|scale
argument_list|)
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
comment|//interval year
specifier|private
specifier|static
specifier|final
name|IntAndVectorsConsumer
name|intervalYearMonthNullSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|)
lambda|->
operator|(
operator|(
name|IntervalYearVector
operator|)
name|arrowVector
operator|)
operator|.
name|setNull
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|IntIntAndVectorsConsumer
name|intervalYearMonthValueSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|j
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|,
name|typeInfo
parameter_list|)
lambda|->
operator|(
operator|(
name|IntervalYearVector
operator|)
name|arrowVector
operator|)
operator|.
name|set
argument_list|(
name|i
argument_list|,
call|(
name|int
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|hiveVector
argument_list|)
operator|.
name|vector
index|[
name|j
index|]
argument_list|)
decl_stmt|;
comment|//interval day
specifier|private
specifier|static
specifier|final
name|IntAndVectorsConsumer
name|intervalDayTimeNullSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|)
lambda|->
operator|(
operator|(
name|IntervalDayVector
operator|)
name|arrowVector
operator|)
operator|.
name|setNull
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|IntIntAndVectorsConsumer
name|intervalDayTimeValueSetter
init|=
parameter_list|(
name|i
parameter_list|,
name|j
parameter_list|,
name|arrowVector
parameter_list|,
name|hiveVector
parameter_list|,
name|typeInfo
parameter_list|)
lambda|->
block|{
specifier|final
name|IntervalDayVector
name|intervalDayVector
init|=
operator|(
name|IntervalDayVector
operator|)
name|arrowVector
decl_stmt|;
specifier|final
name|IntervalDayTimeColumnVector
name|intervalDayTimeColumnVector
init|=
operator|(
name|IntervalDayTimeColumnVector
operator|)
name|hiveVector
decl_stmt|;
name|long
name|totalSeconds
init|=
name|intervalDayTimeColumnVector
operator|.
name|getTotalSeconds
argument_list|(
name|j
argument_list|)
decl_stmt|;
specifier|final
name|long
name|days
init|=
name|totalSeconds
operator|/
name|SECOND_PER_DAY
decl_stmt|;
specifier|final
name|long
name|millis
init|=
operator|(
name|totalSeconds
operator|-
name|days
operator|*
name|SECOND_PER_DAY
operator|)
operator|*
name|MILLIS_PER_SECOND
operator|+
name|intervalDayTimeColumnVector
operator|.
name|getNanos
argument_list|(
name|j
argument_list|)
operator|/
name|NS_PER_MILLIS
decl_stmt|;
name|intervalDayVector
operator|.
name|set
argument_list|(
name|i
argument_list|,
operator|(
name|int
operator|)
name|days
argument_list|,
operator|(
name|int
operator|)
name|millis
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
comment|//Used for setting null at arrowVector[i]
specifier|private
interface|interface
name|IntAndVectorsConsumer
block|{
name|void
name|accept
parameter_list|(
name|int
name|i
parameter_list|,
name|FieldVector
name|arrowVector
parameter_list|,
name|ColumnVector
name|hiveVector
parameter_list|)
function_decl|;
block|}
comment|//Used to copy value from hiveVector[j] -> arrowVector[i]
comment|//since hiveVector might be referenced through vector.selected
specifier|private
interface|interface
name|IntIntAndVectorsConsumer
block|{
name|void
name|accept
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|,
name|FieldVector
name|arrowVector
parameter_list|,
name|ColumnVector
name|hiveVector
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

