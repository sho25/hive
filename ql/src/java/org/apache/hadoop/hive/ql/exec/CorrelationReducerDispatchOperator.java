begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|CorrelationReducerDispatchDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SelectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_comment
comment|/**  * CorrelationReducerDispatchOperator is an operator used by MapReduce join optimized by  * CorrelationOptimizer. If used, CorrelationReducerDispatchOperator is the first operator in reduce  * phase. In the case that multiple operation paths are merged into a single one, it will dispatch  * the record to corresponding JOIN or GBY operators. Every child of this operator is associated  * with a DispatcherHnadler, which evaluates the input row of this operator and then select  * corresponding fields for its associated child.  */
end_comment

begin_class
specifier|public
class|class
name|CorrelationReducerDispatchOperator
extends|extends
name|Operator
argument_list|<
name|CorrelationReducerDispatchDesc
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
name|fieldNames
decl_stmt|;
static|static
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fieldNameArray
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Utilities
operator|.
name|ReduceField
name|r
range|:
name|Utilities
operator|.
name|ReduceField
operator|.
name|values
argument_list|()
control|)
block|{
name|fieldNameArray
operator|.
name|add
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fieldNames
operator|=
name|fieldNameArray
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
class|class
name|DispatchHandler
block|{
specifier|protected
name|Log
name|l4j
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ObjectInspector
index|[]
name|inputObjInspector
decl_stmt|;
specifier|private
name|ObjectInspector
name|outputObjInspector
decl_stmt|;
specifier|private
name|ObjectInspector
name|keyObjInspector
decl_stmt|;
specifier|private
name|ObjectInspector
name|valueObjInspector
decl_stmt|;
specifier|private
specifier|final
name|byte
name|inputTag
decl_stmt|;
specifier|private
specifier|final
name|byte
name|outputTag
decl_stmt|;
specifier|private
specifier|final
name|byte
name|childIndx
decl_stmt|;
specifier|private
specifier|final
name|ByteWritable
name|outputTagByteWritable
decl_stmt|;
specifier|private
specifier|final
name|SelectDesc
name|keySelectDesc
decl_stmt|;
specifier|private
specifier|final
name|SelectDesc
name|valueSelectDesc
decl_stmt|;
specifier|private
name|ExprNodeEvaluator
index|[]
name|keyEval
decl_stmt|;
specifier|private
name|ExprNodeEvaluator
index|[]
name|eval
decl_stmt|;
comment|// counters for debugging
specifier|private
specifier|transient
name|long
name|cntr
init|=
literal|0
decl_stmt|;
specifier|private
specifier|transient
name|long
name|nextCntr
init|=
literal|1
decl_stmt|;
specifier|private
name|long
name|getNextCntr
parameter_list|(
name|long
name|cntr
parameter_list|)
block|{
comment|// A very simple counter to keep track of number of rows processed by an
comment|// operator. It dumps
comment|// every 1 million times, and quickly before that
if|if
condition|(
name|cntr
operator|>=
literal|1000000
condition|)
block|{
return|return
name|cntr
operator|+
literal|1000000
return|;
block|}
return|return
literal|10
operator|*
name|cntr
return|;
block|}
specifier|public
name|long
name|getCntr
parameter_list|()
block|{
return|return
name|this
operator|.
name|cntr
return|;
block|}
specifier|private
specifier|final
name|Log
name|LOG
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isLogInfoEnabled
decl_stmt|;
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
specifier|public
name|DispatchHandler
parameter_list|(
name|ObjectInspector
index|[]
name|inputObjInspector
parameter_list|,
name|byte
name|inputTag
parameter_list|,
name|byte
name|childIndx
parameter_list|,
name|byte
name|outputTag
parameter_list|,
name|SelectDesc
name|valueSelectDesc
parameter_list|,
name|SelectDesc
name|keySelectDesc
parameter_list|,
name|Log
name|LOG
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|HiveException
block|{
name|this
operator|.
name|inputObjInspector
operator|=
name|inputObjInspector
expr_stmt|;
assert|assert
name|this
operator|.
name|inputObjInspector
operator|.
name|length
operator|==
literal|1
assert|;
name|this
operator|.
name|inputTag
operator|=
name|inputTag
expr_stmt|;
name|this
operator|.
name|childIndx
operator|=
name|childIndx
expr_stmt|;
name|this
operator|.
name|outputTag
operator|=
name|outputTag
expr_stmt|;
name|this
operator|.
name|valueSelectDesc
operator|=
name|valueSelectDesc
expr_stmt|;
name|this
operator|.
name|keySelectDesc
operator|=
name|keySelectDesc
expr_stmt|;
name|this
operator|.
name|outputTagByteWritable
operator|=
operator|new
name|ByteWritable
argument_list|(
name|outputTag
argument_list|)
expr_stmt|;
name|this
operator|.
name|LOG
operator|=
name|LOG
expr_stmt|;
name|this
operator|.
name|isLogInfoEnabled
operator|=
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|ois
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|keySelectDesc
operator|.
name|isSelStarNoCompute
argument_list|()
condition|)
block|{
name|ois
operator|.
name|add
argument_list|(
call|(
name|ObjectInspector
call|)
argument_list|(
operator|(
name|List
operator|)
name|inputObjInspector
index|[
literal|0
index|]
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|colList
init|=
name|this
operator|.
name|keySelectDesc
operator|.
name|getColList
argument_list|()
decl_stmt|;
name|keyEval
operator|=
operator|new
name|ExprNodeEvaluator
index|[
name|colList
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|colList
operator|.
name|size
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
assert|assert
operator|(
name|colList
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|!=
literal|null
operator|)
assert|;
name|keyEval
index|[
name|k
index|]
operator|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|colList
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|keyObjInspector
operator|=
name|initEvaluatorsAndReturnStruct
argument_list|(
name|keyEval
argument_list|,
name|keySelectDesc
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|,
operator|(
operator|(
name|StandardStructObjectInspector
operator|)
name|inputObjInspector
index|[
literal|0
index|]
operator|)
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
name|ois
operator|.
name|add
argument_list|(
name|keyObjInspector
argument_list|)
expr_stmt|;
name|l4j
operator|.
name|info
argument_list|(
literal|"Key: input tag "
operator|+
operator|(
name|int
operator|)
name|inputTag
operator|+
literal|", output tag "
operator|+
operator|(
name|int
operator|)
name|outputTag
operator|+
literal|", SELECT inputOIForThisTag"
operator|+
operator|(
operator|(
name|StructObjectInspector
operator|)
name|inputObjInspector
index|[
literal|0
index|]
operator|)
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|valueSelectDesc
operator|.
name|isSelStarNoCompute
argument_list|()
condition|)
block|{
name|ois
operator|.
name|add
argument_list|(
call|(
name|ObjectInspector
call|)
argument_list|(
operator|(
name|List
operator|)
name|inputObjInspector
index|[
literal|0
index|]
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|colList
init|=
name|this
operator|.
name|valueSelectDesc
operator|.
name|getColList
argument_list|()
decl_stmt|;
name|eval
operator|=
operator|new
name|ExprNodeEvaluator
index|[
name|colList
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|colList
operator|.
name|size
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
assert|assert
operator|(
name|colList
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|!=
literal|null
operator|)
assert|;
name|eval
index|[
name|k
index|]
operator|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|colList
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|valueObjInspector
operator|=
name|initEvaluatorsAndReturnStruct
argument_list|(
name|eval
argument_list|,
name|valueSelectDesc
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|,
operator|(
operator|(
name|StandardStructObjectInspector
operator|)
name|inputObjInspector
index|[
literal|0
index|]
operator|)
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
name|ois
operator|.
name|add
argument_list|(
name|valueObjInspector
argument_list|)
expr_stmt|;
name|l4j
operator|.
name|info
argument_list|(
literal|"input tag "
operator|+
operator|(
name|int
operator|)
name|inputTag
operator|+
literal|", output tag "
operator|+
operator|(
name|int
operator|)
name|outputTag
operator|+
literal|", SELECT inputOIForThisTag"
operator|+
operator|(
operator|(
name|StructObjectInspector
operator|)
name|inputObjInspector
index|[
literal|0
index|]
operator|)
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ois
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableByteObjectInspector
argument_list|)
expr_stmt|;
name|outputObjInspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|fieldNames
argument_list|)
argument_list|,
name|ois
argument_list|)
expr_stmt|;
name|l4j
operator|.
name|info
argument_list|(
literal|"input tag "
operator|+
operator|(
name|int
operator|)
name|inputTag
operator|+
literal|", output tag "
operator|+
operator|(
name|int
operator|)
name|outputTag
operator|+
literal|", SELECT outputObjInspector"
operator|+
operator|(
operator|(
name|StructObjectInspector
operator|)
name|outputObjInspector
operator|)
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ObjectInspector
name|getOutputObjInspector
parameter_list|()
block|{
return|return
name|outputObjInspector
return|;
block|}
specifier|public
name|Object
name|process
parameter_list|(
name|Object
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|keyOutput
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|keyEval
operator|.
name|length
argument_list|)
decl_stmt|;
name|Object
index|[]
name|valueOutput
init|=
operator|new
name|Object
index|[
name|eval
operator|.
name|length
index|]
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|outputRow
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|List
name|thisRow
init|=
operator|(
name|List
operator|)
name|row
decl_stmt|;
if|if
condition|(
name|keySelectDesc
operator|.
name|isSelStarNoCompute
argument_list|()
condition|)
block|{
name|outputRow
operator|.
name|add
argument_list|(
name|thisRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|key
init|=
name|thisRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|keyEval
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
try|try
block|{
name|keyOutput
operator|.
name|add
argument_list|(
name|keyEval
index|[
name|j
index|]
operator|.
name|evaluate
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Error evaluating "
operator|+
name|keySelectDesc
operator|.
name|getColList
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getExprString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|outputRow
operator|.
name|add
argument_list|(
name|keyOutput
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|valueSelectDesc
operator|.
name|isSelStarNoCompute
argument_list|()
condition|)
block|{
name|outputRow
operator|.
name|add
argument_list|(
name|thisRow
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|value
init|=
name|thisRow
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|eval
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
try|try
block|{
name|valueOutput
index|[
name|j
index|]
operator|=
name|eval
index|[
name|j
index|]
operator|.
name|evaluate
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Error evaluating "
operator|+
name|valueSelectDesc
operator|.
name|getColList
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getExprString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|outputRow
operator|.
name|add
argument_list|(
name|valueOutput
argument_list|)
expr_stmt|;
block|}
name|outputRow
operator|.
name|add
argument_list|(
name|outputTagByteWritable
argument_list|)
expr_stmt|;
if|if
condition|(
name|isLogInfoEnabled
condition|)
block|{
name|cntr
operator|++
expr_stmt|;
if|if
condition|(
name|cntr
operator|==
name|nextCntr
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|id
operator|+
literal|"(inputTag, childIndx, outputTag)=("
operator|+
name|inputTag
operator|+
literal|", "
operator|+
name|childIndx
operator|+
literal|", "
operator|+
name|outputTag
operator|+
literal|"), forwarding "
operator|+
name|cntr
operator|+
literal|" rows"
argument_list|)
expr_stmt|;
name|nextCntr
operator|=
name|getNextCntr
argument_list|(
name|cntr
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|outputRow
return|;
block|}
specifier|public
name|void
name|printCloseOpLog
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
name|id
operator|+
literal|"(inputTag, childIndx, outputTag)=("
operator|+
name|inputTag
operator|+
literal|", "
operator|+
name|childIndx
operator|+
literal|", "
operator|+
name|outputTag
operator|+
literal|"),  forwarded "
operator|+
name|cntr
operator|+
literal|" rows"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// inputTag->(Child->List<outputTag>)
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|dispatchConf
decl_stmt|;
comment|// inputTag->(Child->List<SelectDesc>)
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|SelectDesc
argument_list|>
argument_list|>
argument_list|>
name|dispatchValueSelectDescConf
decl_stmt|;
comment|// inputTag->(Child->List<SelectDesc>)
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|SelectDesc
argument_list|>
argument_list|>
argument_list|>
name|dispatchKeySelectDescConf
decl_stmt|;
comment|// inputTag->(Child->List<DispatchHandler>)
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|DispatchHandler
argument_list|>
argument_list|>
argument_list|>
name|dispatchHandlers
decl_stmt|;
comment|// Child->(outputTag->DispatchHandler)
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|DispatchHandler
argument_list|>
argument_list|>
name|child2OutputTag2DispatchHandlers
decl_stmt|;
comment|// Child->Child's inputObjInspectors
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|ObjectInspector
index|[]
argument_list|>
name|childInputObjInspectors
decl_stmt|;
specifier|private
name|int
name|operationPathTag
decl_stmt|;
specifier|private
name|int
name|inputTag
decl_stmt|;
specifier|private
name|Object
index|[]
name|lastDispatchedRows
decl_stmt|;
specifier|private
name|int
index|[]
name|lastDispatchedTags
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|dispatchConf
operator|=
name|conf
operator|.
name|getDispatchConf
argument_list|()
expr_stmt|;
name|dispatchValueSelectDescConf
operator|=
name|conf
operator|.
name|getDispatchValueSelectDescConf
argument_list|()
expr_stmt|;
name|dispatchKeySelectDescConf
operator|=
name|conf
operator|.
name|getDispatchKeySelectDescConf
argument_list|()
expr_stmt|;
name|dispatchHandlers
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|DispatchHandler
argument_list|>
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|entry
range|:
name|dispatchConf
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|DispatchHandler
argument_list|>
argument_list|>
name|tmp
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|DispatchHandler
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|child2outputTag
range|:
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|tmp
operator|.
name|put
argument_list|(
name|child2outputTag
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|DispatchHandler
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|indx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|outputTag
range|:
name|child2outputTag
operator|.
name|getValue
argument_list|()
control|)
block|{
name|ObjectInspector
index|[]
name|thisInputObjectInspector
init|=
operator|new
name|ObjectInspector
index|[]
block|{
name|inputObjInspectors
index|[
name|entry
operator|.
name|getKey
argument_list|()
index|]
block|}
decl_stmt|;
name|Integer
name|thisInputTag
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Integer
name|thisChildIndx
init|=
name|child2outputTag
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|SelectDesc
name|thisValueSelectDesc
init|=
name|dispatchValueSelectDescConf
operator|.
name|get
argument_list|(
name|thisInputTag
argument_list|)
operator|.
name|get
argument_list|(
name|thisChildIndx
argument_list|)
operator|.
name|get
argument_list|(
name|indx
argument_list|)
decl_stmt|;
name|SelectDesc
name|thisKeySelectDesc
init|=
name|dispatchKeySelectDescConf
operator|.
name|get
argument_list|(
name|thisInputTag
argument_list|)
operator|.
name|get
argument_list|(
name|thisChildIndx
argument_list|)
operator|.
name|get
argument_list|(
name|indx
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|get
argument_list|(
name|child2outputTag
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DispatchHandler
argument_list|(
name|thisInputObjectInspector
argument_list|,
name|thisInputTag
operator|.
name|byteValue
argument_list|()
argument_list|,
name|thisChildIndx
operator|.
name|byteValue
argument_list|()
argument_list|,
name|outputTag
operator|.
name|byteValue
argument_list|()
argument_list|,
name|thisValueSelectDesc
argument_list|,
name|thisKeySelectDesc
argument_list|,
name|LOG
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|indx
operator|++
expr_stmt|;
block|}
block|}
name|dispatchHandlers
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
block|}
name|child2OutputTag2DispatchHandlers
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|DispatchHandler
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|entry
range|:
name|dispatchConf
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|child2outputTag
range|:
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|child2OutputTag2DispatchHandlers
operator|.
name|containsKey
argument_list|(
name|child2outputTag
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|child2OutputTag2DispatchHandlers
operator|.
name|put
argument_list|(
name|child2outputTag
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|DispatchHandler
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|indx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|outputTag
range|:
name|child2outputTag
operator|.
name|getValue
argument_list|()
control|)
block|{
name|child2OutputTag2DispatchHandlers
operator|.
name|get
argument_list|(
name|child2outputTag
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|outputTag
argument_list|,
name|dispatchHandlers
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|child2outputTag
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|indx
argument_list|)
argument_list|)
expr_stmt|;
name|indx
operator|++
expr_stmt|;
block|}
block|}
block|}
name|childInputObjInspectors
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ObjectInspector
index|[]
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|DispatchHandler
argument_list|>
argument_list|>
name|entry
range|:
name|child2OutputTag2DispatchHandlers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Integer
name|l
init|=
name|Collections
operator|.
name|max
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectInspector
index|[]
name|childObjInspectors
init|=
operator|new
name|ObjectInspector
index|[
name|l
operator|.
name|intValue
argument_list|()
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|DispatchHandler
argument_list|>
name|e
range|:
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
assert|assert
name|childObjInspectors
operator|.
name|length
operator|==
literal|1
assert|;
name|childObjInspectors
index|[
literal|0
index|]
operator|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getOutputObjInspector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|childObjInspectors
index|[
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|intValue
argument_list|()
index|]
operator|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getOutputObjInspector
argument_list|()
expr_stmt|;
block|}
block|}
name|childInputObjInspectors
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|childObjInspectors
argument_list|)
expr_stmt|;
block|}
name|lastDispatchedRows
operator|=
operator|new
name|Object
index|[
name|childOperatorsArray
operator|.
name|length
index|]
expr_stmt|;
name|lastDispatchedTags
operator|=
operator|new
name|int
index|[
name|childOperatorsArray
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childOperatorsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|lastDispatchedRows
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
name|lastDispatchedTags
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|initializeChildren
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
block|}
comment|// Each child should has its own outputObjInspector
annotation|@
name|Override
specifier|protected
name|void
name|initializeChildren
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|state
operator|=
name|State
operator|.
name|INIT
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Operator "
operator|+
name|id
operator|+
literal|" "
operator|+
name|getName
argument_list|()
operator|+
literal|" initialized"
argument_list|)
expr_stmt|;
if|if
condition|(
name|childOperators
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing children of "
operator|+
name|id
operator|+
literal|" "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childOperatorsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing child "
operator|+
name|i
operator|+
literal|" "
operator|+
name|childOperatorsArray
index|[
name|i
index|]
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|" "
operator|+
name|childOperatorsArray
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|childInputObjInspectors
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|childOperatorsArray
index|[
name|i
index|]
operator|.
name|initialize
argument_list|(
name|hconf
argument_list|,
name|childInputObjInspectors
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|reporter
operator|!=
literal|null
condition|)
block|{
name|childOperatorsArray
index|[
name|i
index|]
operator|.
name|setReporter
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|processOp
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|thisRow
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|row
decl_stmt|;
assert|assert
name|thisRow
operator|.
name|size
argument_list|()
operator|==
literal|4
assert|;
name|operationPathTag
operator|=
operator|(
operator|(
name|ByteWritable
operator|)
name|thisRow
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|inputTag
operator|=
operator|(
operator|(
name|ByteWritable
operator|)
name|thisRow
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|forward
argument_list|(
name|thisRow
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|,
name|inputObjInspectors
index|[
name|inputTag
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|forward
parameter_list|(
name|Object
name|row
parameter_list|,
name|ObjectInspector
name|rowInspector
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|(
operator|++
name|outputRows
operator|%
literal|1000
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|counterNameToEnum
operator|!=
literal|null
condition|)
block|{
name|incrCounter
argument_list|(
name|numOutputRowsCntr
argument_list|,
name|outputRows
argument_list|)
expr_stmt|;
name|outputRows
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
name|childOperatorsArray
operator|==
literal|null
operator|&&
name|childOperators
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal Hive error during operator initialization."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|childOperatorsArray
operator|==
literal|null
operator|)
operator|||
operator|(
name|getDone
argument_list|()
operator|)
condition|)
block|{
return|return;
block|}
name|int
name|childrenDone
init|=
literal|0
decl_stmt|;
name|int
name|forwardFlag
init|=
literal|1
decl_stmt|;
assert|assert
name|childOperatorsArray
operator|.
name|length
operator|<=
literal|8
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childOperatorsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|o
init|=
name|childOperatorsArray
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|o
operator|.
name|getDone
argument_list|()
condition|)
block|{
name|childrenDone
operator|++
expr_stmt|;
block|}
else|else
block|{
name|int
name|isProcess
init|=
operator|(
name|operationPathTag
operator|&
operator|(
name|forwardFlag
operator|<<
name|i
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|isProcess
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|o
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|GroupByOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
condition|)
block|{
name|GroupByOperator
name|gbyop
init|=
operator|(
name|GroupByOperator
operator|)
name|o
decl_stmt|;
name|gbyop
operator|.
name|setForcedForward
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|bytesWritableGroupKey
operator|.
name|equals
argument_list|(
name|o
operator|.
name|getBytesWritableGroupKey
argument_list|()
argument_list|)
condition|)
block|{
name|o
operator|.
name|setBytesWritableGroupKey
argument_list|(
name|this
operator|.
name|bytesWritableGroupKey
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|dispatchHandlers
operator|.
name|get
argument_list|(
name|inputTag
argument_list|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Object
name|dispatchedRow
init|=
name|dispatchHandlers
operator|.
name|get
argument_list|(
name|inputTag
argument_list|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|process
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|int
name|dispatchedTag
init|=
name|dispatchConf
operator|.
name|get
argument_list|(
name|inputTag
argument_list|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|o
operator|.
name|process
argument_list|(
name|dispatchedRow
argument_list|,
name|dispatchedTag
argument_list|)
expr_stmt|;
name|lastDispatchedRows
index|[
name|i
index|]
operator|=
name|dispatchedRow
expr_stmt|;
name|lastDispatchedTags
index|[
name|i
index|]
operator|=
name|dispatchedTag
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isProcess
operator|==
literal|0
operator|&&
name|o
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|GroupByOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|lastDispatchedRows
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|bytesWritableGroupKey
operator|.
name|equals
argument_list|(
name|o
operator|.
name|getBytesWritableGroupKey
argument_list|()
argument_list|)
condition|)
block|{
name|GroupByOperator
name|gbyop
init|=
operator|(
name|GroupByOperator
operator|)
name|o
decl_stmt|;
name|gbyop
operator|.
name|setForcedForward
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|o
operator|.
name|setBytesWritableGroupKey
argument_list|(
name|this
operator|.
name|bytesWritableGroupKey
argument_list|)
expr_stmt|;
name|o
operator|.
name|process
argument_list|(
name|lastDispatchedRows
index|[
name|i
index|]
argument_list|,
name|lastDispatchedTags
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// if all children are done, this operator is also done
if|if
condition|(
name|childrenDone
operator|==
name|childOperatorsArray
operator|.
name|length
condition|)
block|{
name|setDone
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|closeOp
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// log the number of rows forwarded from each dispatcherHandler
for|for
control|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|DispatchHandler
argument_list|>
argument_list|>
name|childIndx2DispatchHandlers
range|:
name|dispatchHandlers
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|List
argument_list|<
name|DispatchHandler
argument_list|>
name|dispatchHandlers
range|:
name|childIndx2DispatchHandlers
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|DispatchHandler
name|dispatchHandler
range|:
name|dispatchHandlers
control|)
block|{
name|dispatchHandler
operator|.
name|printCloseOpLog
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setGroupKeyObject
parameter_list|(
name|Object
name|keyObject
parameter_list|)
block|{
name|this
operator|.
name|groupKeyObject
operator|=
name|keyObject
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
range|:
name|childOperators
control|)
block|{
name|op
operator|.
name|setGroupKeyObject
argument_list|(
name|keyObject
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return the name of the operator    */
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getOperatorName
argument_list|()
return|;
block|}
specifier|static
specifier|public
name|String
name|getOperatorName
parameter_list|()
block|{
return|return
literal|"CDP"
return|;
block|}
annotation|@
name|Override
specifier|public
name|OperatorType
name|getType
parameter_list|()
block|{
return|return
name|OperatorType
operator|.
name|CORRELATIONREDUCERDISPATCH
return|;
block|}
block|}
end_class

end_unit

