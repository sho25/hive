begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentLengthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ConstantObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveTypeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|StringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * A simple generic udf to call java functions via reflection.  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"reflect2"
argument_list|,
name|value
operator|=
literal|"_FUNC_(arg0,method[,arg1[,arg2..]]) calls method of arg0 with reflection"
argument_list|,
name|extended
operator|=
literal|"Use this UDF to call Java methods by matching the argument signature\n"
argument_list|)
annotation|@
name|UDFType
argument_list|(
name|deterministic
operator|=
literal|true
argument_list|)
specifier|public
class|class
name|GenericUDFReflect2
extends|extends
name|AbstractGenericUDFReflect
block|{
specifier|private
name|PrimitiveObjectInspector
name|targetOI
decl_stmt|;
specifier|private
name|PrimitiveObjectInspector
name|returnOI
decl_stmt|;
specifier|private
specifier|transient
name|Method
name|method
decl_stmt|;
specifier|private
specifier|transient
name|Writable
name|returnObj
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
if|if
condition|(
name|arguments
operator|.
name|length
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentLengthException
argument_list|(
literal|"The function GenericUDFReflect2(arg0,method[,arg1[,arg2]...])"
operator|+
literal|" accepts 2 or more arguments."
argument_list|)
throw|;
block|}
if|if
condition|(
name|arguments
index|[
literal|0
index|]
operator|.
name|getCategory
argument_list|()
operator|!=
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|1
argument_list|,
literal|"The target instance should be a primitive type."
argument_list|)
throw|;
block|}
name|targetOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|arguments
index|[
literal|1
index|]
operator|instanceof
name|StringObjectInspector
operator|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|1
argument_list|,
literal|"The method name should be string type."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|arguments
index|[
literal|1
index|]
operator|instanceof
name|ConstantObjectInspector
operator|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|1
argument_list|,
literal|"The method name should be a constant."
argument_list|)
throw|;
block|}
name|Text
name|methodName
init|=
call|(
name|Text
call|)
argument_list|(
operator|(
name|ConstantObjectInspector
operator|)
name|arguments
index|[
literal|1
index|]
argument_list|)
operator|.
name|getWritableConstantValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|methodName
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hashCode"
argument_list|)
operator|&&
name|arguments
operator|.
name|length
operator|==
literal|2
condition|)
block|{
comment|// it's non-deterministic
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|1
argument_list|,
literal|"Use hash() UDF instead of this."
argument_list|)
throw|;
block|}
name|setupParameterOIs
argument_list|(
name|arguments
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|targetClass
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getTypeEntryFromPrimitiveCategory
argument_list|(
name|targetOI
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
operator|.
name|primitiveJavaClass
decl_stmt|;
try|try
block|{
name|method
operator|=
name|findMethod
argument_list|(
name|targetClass
argument_list|,
name|methodName
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Note: type param is not available here.
name|PrimitiveTypeEntry
name|typeEntry
init|=
name|getTypeFor
argument_list|(
name|method
operator|.
name|getReturnType
argument_list|()
argument_list|)
decl_stmt|;
name|returnOI
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|typeEntry
operator|.
name|primitiveCategory
argument_list|)
expr_stmt|;
name|returnObj
operator|=
operator|(
name|Writable
operator|)
name|returnOI
operator|.
name|getPrimitiveWritableClass
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|returnOI
return|;
block|}
specifier|private
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveTypeEntry
name|getTypeFor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|retType
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveTypeEntry
name|entry
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getTypeEntryFromPrimitiveJavaType
argument_list|(
name|retType
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|entry
operator|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getTypeEntryFromPrimitiveJavaClass
argument_list|(
name|retType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"Invalid return type "
operator|+
name|retType
argument_list|)
throw|;
block|}
return|return
name|entry
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|targetObject
init|=
name|targetOI
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetObject
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|method
operator|.
name|invoke
argument_list|(
name|targetObject
argument_list|,
name|setupParameters
argument_list|(
name|arguments
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|returnOI
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VOID
case|:
return|return
literal|null
return|;
case|case
name|BOOLEAN
case|:
operator|(
operator|(
name|BooleanWritable
operator|)
name|returnObj
operator|)
operator|.
name|set
argument_list|(
operator|(
name|Boolean
operator|)
name|result
argument_list|)
expr_stmt|;
return|return
name|returnObj
return|;
case|case
name|BYTE
case|:
operator|(
operator|(
name|ByteWritable
operator|)
name|returnObj
operator|)
operator|.
name|set
argument_list|(
operator|(
name|Byte
operator|)
name|result
argument_list|)
expr_stmt|;
return|return
name|returnObj
return|;
case|case
name|SHORT
case|:
operator|(
operator|(
name|ShortWritable
operator|)
name|returnObj
operator|)
operator|.
name|set
argument_list|(
operator|(
name|Short
operator|)
name|result
argument_list|)
expr_stmt|;
return|return
name|returnObj
return|;
case|case
name|INT
case|:
operator|(
operator|(
name|IntWritable
operator|)
name|returnObj
operator|)
operator|.
name|set
argument_list|(
operator|(
name|Integer
operator|)
name|result
argument_list|)
expr_stmt|;
return|return
name|returnObj
return|;
case|case
name|LONG
case|:
operator|(
operator|(
name|LongWritable
operator|)
name|returnObj
operator|)
operator|.
name|set
argument_list|(
operator|(
name|Long
operator|)
name|result
argument_list|)
expr_stmt|;
return|return
name|returnObj
return|;
case|case
name|FLOAT
case|:
operator|(
operator|(
name|FloatWritable
operator|)
name|returnObj
operator|)
operator|.
name|set
argument_list|(
operator|(
name|Float
operator|)
name|result
argument_list|)
expr_stmt|;
return|return
name|returnObj
return|;
case|case
name|DOUBLE
case|:
operator|(
operator|(
name|DoubleWritable
operator|)
name|returnObj
operator|)
operator|.
name|set
argument_list|(
operator|(
name|Double
operator|)
name|result
argument_list|)
expr_stmt|;
return|return
name|returnObj
return|;
case|case
name|STRING
case|:
operator|(
operator|(
name|Text
operator|)
name|returnObj
operator|)
operator|.
name|set
argument_list|(
operator|(
name|String
operator|)
name|result
argument_list|)
expr_stmt|;
return|return
name|returnObj
return|;
case|case
name|TIMESTAMP
case|:
operator|(
operator|(
name|TimestampWritable
operator|)
name|returnObj
operator|)
operator|.
name|set
argument_list|(
operator|(
name|Timestamp
operator|)
name|result
argument_list|)
expr_stmt|;
return|return
name|returnObj
return|;
case|case
name|BINARY
case|:
operator|(
operator|(
name|BytesWritable
operator|)
name|returnObj
operator|)
operator|.
name|set
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|result
argument_list|,
literal|0
argument_list|,
operator|(
operator|(
name|byte
index|[]
operator|)
name|result
operator|)
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|returnObj
return|;
case|case
name|DECIMAL
case|:
operator|(
operator|(
name|HiveDecimalWritable
operator|)
name|returnObj
operator|)
operator|.
name|set
argument_list|(
operator|(
name|HiveDecimal
operator|)
name|result
argument_list|)
expr_stmt|;
return|return
name|returnObj
return|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Invalid type "
operator|+
name|returnOI
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|functionName
parameter_list|()
block|{
return|return
literal|"reflect2"
return|;
block|}
block|}
end_class

end_unit

