begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|translator
operator|.
name|opconventer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|LimitOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveMultiJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveSemiJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveSortExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveSortLimit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveTableFunctionScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveTableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|UnparseTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_class
specifier|public
class|class
name|HiveOpConverter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveOpConverter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// TODO: remove this after stashing only rqd pieces from opconverter
specifier|private
specifier|final
name|SemanticAnalyzer
name|semanticAnalyzer
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|private
specifier|final
name|UnparseTranslator
name|unparseTranslator
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TableScanOperator
argument_list|>
name|topOps
decl_stmt|;
specifier|private
name|int
name|uniqueCounter
decl_stmt|;
specifier|public
name|HiveOpConverter
parameter_list|(
name|SemanticAnalyzer
name|semanticAnalyzer
parameter_list|,
name|HiveConf
name|hiveConf
parameter_list|,
name|UnparseTranslator
name|unparseTranslator
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|TableScanOperator
argument_list|>
name|topOps
parameter_list|)
block|{
name|this
operator|.
name|semanticAnalyzer
operator|=
name|semanticAnalyzer
expr_stmt|;
name|this
operator|.
name|hiveConf
operator|=
name|hiveConf
expr_stmt|;
name|this
operator|.
name|unparseTranslator
operator|=
name|unparseTranslator
expr_stmt|;
name|this
operator|.
name|topOps
operator|=
name|topOps
expr_stmt|;
name|this
operator|.
name|uniqueCounter
operator|=
literal|0
expr_stmt|;
block|}
specifier|static
class|class
name|OpAttr
block|{
specifier|final
name|String
name|tabAlias
decl_stmt|;
name|ImmutableList
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|inputs
decl_stmt|;
name|ImmutableSet
argument_list|<
name|Integer
argument_list|>
name|vcolsInCalcite
decl_stmt|;
name|OpAttr
parameter_list|(
name|String
name|tabAlias
parameter_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
name|vcols
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
modifier|...
name|inputs
parameter_list|)
block|{
name|this
operator|.
name|tabAlias
operator|=
name|tabAlias
expr_stmt|;
name|this
operator|.
name|inputs
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|inputs
argument_list|)
expr_stmt|;
name|this
operator|.
name|vcolsInCalcite
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|vcols
argument_list|)
expr_stmt|;
block|}
name|OpAttr
name|clone
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
modifier|...
name|inputs
parameter_list|)
block|{
return|return
operator|new
name|OpAttr
argument_list|(
name|tabAlias
argument_list|,
name|vcolsInCalcite
argument_list|,
name|inputs
argument_list|)
return|;
block|}
block|}
specifier|public
name|Operator
argument_list|<
name|?
argument_list|>
name|convert
parameter_list|(
name|RelNode
name|root
parameter_list|)
throws|throws
name|SemanticException
block|{
name|OpAttr
name|opAf
init|=
name|dispatch
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
argument_list|>
name|rootOp
init|=
name|opAf
operator|.
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|handleTopLimit
argument_list|(
name|rootOp
argument_list|)
expr_stmt|;
return|return
name|rootOp
return|;
block|}
name|OpAttr
name|dispatch
parameter_list|(
name|RelNode
name|rn
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|rn
operator|instanceof
name|HiveTableScan
condition|)
block|{
return|return
operator|new
name|HiveTableScanVisitor
argument_list|(
name|this
argument_list|)
operator|.
name|visit
argument_list|(
operator|(
name|HiveTableScan
operator|)
name|rn
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rn
operator|instanceof
name|HiveProject
condition|)
block|{
return|return
operator|new
name|HiveProjectVisitor
argument_list|(
name|this
argument_list|)
operator|.
name|visit
argument_list|(
operator|(
name|HiveProject
operator|)
name|rn
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rn
operator|instanceof
name|HiveMultiJoin
condition|)
block|{
return|return
operator|new
name|JoinVisitor
argument_list|(
name|this
argument_list|)
operator|.
name|visit
argument_list|(
operator|(
name|HiveMultiJoin
operator|)
name|rn
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rn
operator|instanceof
name|HiveJoin
condition|)
block|{
return|return
operator|new
name|JoinVisitor
argument_list|(
name|this
argument_list|)
operator|.
name|visit
argument_list|(
operator|(
name|HiveJoin
operator|)
name|rn
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rn
operator|instanceof
name|HiveSemiJoin
condition|)
block|{
return|return
operator|new
name|JoinVisitor
argument_list|(
name|this
argument_list|)
operator|.
name|visit
argument_list|(
operator|(
name|HiveSemiJoin
operator|)
name|rn
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rn
operator|instanceof
name|HiveFilter
condition|)
block|{
return|return
operator|new
name|HiveFilterVisitor
argument_list|(
name|this
argument_list|)
operator|.
name|visit
argument_list|(
operator|(
name|HiveFilter
operator|)
name|rn
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rn
operator|instanceof
name|HiveSortLimit
condition|)
block|{
return|return
operator|new
name|HiveSortLimitVisitor
argument_list|(
name|this
argument_list|)
operator|.
name|visit
argument_list|(
operator|(
name|HiveSortLimit
operator|)
name|rn
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rn
operator|instanceof
name|HiveUnion
condition|)
block|{
return|return
operator|new
name|HiveUnionVisitor
argument_list|(
name|this
argument_list|)
operator|.
name|visit
argument_list|(
operator|(
name|HiveUnion
operator|)
name|rn
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rn
operator|instanceof
name|HiveSortExchange
condition|)
block|{
return|return
operator|new
name|HiveSortExchangeVisitor
argument_list|(
name|this
argument_list|)
operator|.
name|visit
argument_list|(
operator|(
name|HiveSortExchange
operator|)
name|rn
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rn
operator|instanceof
name|HiveAggregate
condition|)
block|{
return|return
operator|new
name|HiveAggregateVisitor
argument_list|(
name|this
argument_list|)
operator|.
name|visit
argument_list|(
operator|(
name|HiveAggregate
operator|)
name|rn
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rn
operator|instanceof
name|HiveTableFunctionScan
condition|)
block|{
return|return
operator|new
name|HiveTableFunctionScanVisitor
argument_list|(
name|this
argument_list|)
operator|.
name|visit
argument_list|(
operator|(
name|HiveTableFunctionScan
operator|)
name|rn
argument_list|)
return|;
block|}
name|LOG
operator|.
name|error
argument_list|(
name|rn
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"operator translation not supported yet in return path."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|handleTopLimit
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|rootOp
parameter_list|)
block|{
if|if
condition|(
name|rootOp
operator|instanceof
name|LimitOperator
condition|)
block|{
comment|// this can happen only on top most limit, not while visiting Limit Operator
comment|// since that can be within subquery.
name|this
operator|.
name|semanticAnalyzer
operator|.
name|getQB
argument_list|()
operator|.
name|getParseInfo
argument_list|()
operator|.
name|setOuterQueryLimit
argument_list|(
operator|(
operator|(
name|LimitOperator
operator|)
name|rootOp
operator|)
operator|.
name|getConf
argument_list|()
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|getHiveDerivedTableAlias
parameter_list|()
block|{
return|return
literal|"$hdt$_"
operator|+
operator|(
name|this
operator|.
name|uniqueCounter
operator|++
operator|)
return|;
block|}
name|SemanticAnalyzer
name|getSemanticAnalyzer
parameter_list|()
block|{
return|return
name|semanticAnalyzer
return|;
block|}
name|HiveConf
name|getHiveConf
parameter_list|()
block|{
return|return
name|hiveConf
return|;
block|}
name|UnparseTranslator
name|getUnparseTranslator
parameter_list|()
block|{
return|return
name|unparseTranslator
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|TableScanOperator
argument_list|>
name|getTopOps
parameter_list|()
block|{
return|return
name|topOps
return|;
block|}
name|int
name|getUniqueCounter
parameter_list|()
block|{
return|return
name|uniqueCounter
return|;
block|}
block|}
end_class

end_unit

