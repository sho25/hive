begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|Interval
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BoundType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**   * Utilities for generating intervals from RexNode.  *   * Based on Navis logic implemented on Hive data structures.  * See<a href="https://github.com/druid-io/druid/pull/2880">Druid PR-2880</a>  *   */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|public
class|class
name|DruidIntervalUtils
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DruidIntervalUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Given a list of predicates, it generates the equivalent Interval    * (if possible). It assumes that all the predicates in the input    * reference a single column : the timestamp column.    *     * @param conjs list of conditions to use for the transformation    * @return interval representing the conditions in the input list    */
specifier|public
specifier|static
name|List
argument_list|<
name|Interval
argument_list|>
name|createInterval
parameter_list|(
name|RelDataType
name|type
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|conjs
parameter_list|)
block|{
name|List
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|child
range|:
name|conjs
control|)
block|{
name|List
argument_list|<
name|Range
argument_list|>
name|extractedRanges
init|=
name|extractRanges
argument_list|(
name|type
argument_list|,
name|child
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|extractedRanges
operator|==
literal|null
operator|||
name|extractedRanges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// We could not extract, we bail out
return|return
literal|null
return|;
block|}
if|if
condition|(
name|ranges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ranges
operator|.
name|addAll
argument_list|(
name|extractedRanges
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|List
argument_list|<
name|Range
argument_list|>
name|overlapped
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Range
name|current
range|:
name|ranges
control|)
block|{
for|for
control|(
name|Range
name|interval
range|:
name|extractedRanges
control|)
block|{
if|if
condition|(
name|current
operator|.
name|isConnected
argument_list|(
name|interval
argument_list|)
condition|)
block|{
name|overlapped
operator|.
name|add
argument_list|(
name|current
operator|.
name|intersection
argument_list|(
name|interval
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ranges
operator|=
name|overlapped
expr_stmt|;
block|}
name|List
argument_list|<
name|Range
argument_list|>
name|compactRanges
init|=
name|condenseRanges
argument_list|(
name|ranges
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Inferred ranges on interval : "
operator|+
name|compactRanges
argument_list|)
expr_stmt|;
return|return
name|toInterval
argument_list|(
name|compactRanges
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|List
argument_list|<
name|Interval
argument_list|>
name|toInterval
parameter_list|(
name|List
argument_list|<
name|Range
argument_list|>
name|ranges
parameter_list|)
block|{
name|List
argument_list|<
name|Interval
argument_list|>
name|intervals
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|ranges
argument_list|,
operator|new
name|Function
argument_list|<
name|Range
argument_list|,
name|Interval
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Interval
name|apply
parameter_list|(
name|Range
name|range
parameter_list|)
block|{
if|if
condition|(
operator|!
name|range
operator|.
name|hasLowerBound
argument_list|()
operator|&&
operator|!
name|range
operator|.
name|hasUpperBound
argument_list|()
condition|)
block|{
return|return
name|DruidTable
operator|.
name|DEFAULT_INTERVAL
return|;
block|}
name|long
name|start
init|=
name|range
operator|.
name|hasLowerBound
argument_list|()
condition|?
name|toLong
argument_list|(
name|range
operator|.
name|lowerEndpoint
argument_list|()
argument_list|)
else|:
name|DruidTable
operator|.
name|DEFAULT_INTERVAL
operator|.
name|getStartMillis
argument_list|()
decl_stmt|;
name|long
name|end
init|=
name|range
operator|.
name|hasUpperBound
argument_list|()
condition|?
name|toLong
argument_list|(
name|range
operator|.
name|upperEndpoint
argument_list|()
argument_list|)
else|:
name|DruidTable
operator|.
name|DEFAULT_INTERVAL
operator|.
name|getEndMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|range
operator|.
name|hasLowerBound
argument_list|()
operator|&&
name|range
operator|.
name|lowerBoundType
argument_list|()
operator|==
name|BoundType
operator|.
name|OPEN
condition|)
block|{
name|start
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|range
operator|.
name|hasUpperBound
argument_list|()
operator|&&
name|range
operator|.
name|upperBoundType
argument_list|()
operator|==
name|BoundType
operator|.
name|CLOSED
condition|)
block|{
name|end
operator|++
expr_stmt|;
block|}
return|return
operator|new
name|Interval
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Converted time ranges "
operator|+
name|ranges
operator|+
literal|" to interval "
operator|+
name|intervals
argument_list|)
expr_stmt|;
return|return
name|intervals
return|;
block|}
specifier|protected
specifier|static
name|List
argument_list|<
name|Range
argument_list|>
name|extractRanges
parameter_list|(
name|RelDataType
name|type
parameter_list|,
name|RexNode
name|node
parameter_list|,
name|boolean
name|withNot
parameter_list|)
block|{
switch|switch
condition|(
name|node
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
case|case
name|LESS_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
case|case
name|BETWEEN
case|:
case|case
name|IN
case|:
return|return
name|leafToRanges
argument_list|(
name|type
argument_list|,
operator|(
name|RexCall
operator|)
name|node
argument_list|,
name|withNot
argument_list|)
return|;
case|case
name|NOT
case|:
return|return
name|extractRanges
argument_list|(
name|type
argument_list|,
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|!
name|withNot
argument_list|)
return|;
case|case
name|OR
case|:
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|node
decl_stmt|;
name|List
argument_list|<
name|Range
argument_list|>
name|intervals
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|child
range|:
name|call
operator|.
name|getOperands
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Range
argument_list|>
name|extracted
init|=
name|extractRanges
argument_list|(
name|type
argument_list|,
name|child
argument_list|,
name|withNot
argument_list|)
decl_stmt|;
if|if
condition|(
name|extracted
operator|!=
literal|null
condition|)
block|{
name|intervals
operator|.
name|addAll
argument_list|(
name|extracted
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|intervals
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|protected
specifier|static
name|List
argument_list|<
name|Range
argument_list|>
name|leafToRanges
parameter_list|(
name|RelDataType
name|type
parameter_list|,
name|RexCall
name|call
parameter_list|,
name|boolean
name|withNot
parameter_list|)
block|{
switch|switch
condition|(
name|call
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
case|case
name|LESS_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
block|{
name|RexLiteral
name|literal
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|RexInputRef
operator|&&
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|RexLiteral
condition|)
block|{
name|literal
operator|=
name|extractLiteral
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|RexInputRef
operator|&&
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|CAST
condition|)
block|{
name|literal
operator|=
name|extractLiteral
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|RexInputRef
operator|&&
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|RexLiteral
condition|)
block|{
name|literal
operator|=
name|extractLiteral
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|RexInputRef
operator|&&
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|CAST
condition|)
block|{
name|literal
operator|=
name|extractLiteral
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|literal
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Comparable
name|value
init|=
name|literalToType
argument_list|(
name|literal
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|call
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|LESS_THAN
condition|)
block|{
return|return
name|Arrays
operator|.
expr|<
name|Range
operator|>
name|asList
argument_list|(
name|withNot
condition|?
name|Range
operator|.
name|atLeast
argument_list|(
name|value
argument_list|)
else|:
name|Range
operator|.
name|lessThan
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|call
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|LESS_THAN_OR_EQUAL
condition|)
block|{
return|return
name|Arrays
operator|.
expr|<
name|Range
operator|>
name|asList
argument_list|(
name|withNot
condition|?
name|Range
operator|.
name|greaterThan
argument_list|(
name|value
argument_list|)
else|:
name|Range
operator|.
name|atMost
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|call
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|GREATER_THAN
condition|)
block|{
return|return
name|Arrays
operator|.
expr|<
name|Range
operator|>
name|asList
argument_list|(
name|withNot
condition|?
name|Range
operator|.
name|atMost
argument_list|(
name|value
argument_list|)
else|:
name|Range
operator|.
name|greaterThan
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|call
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|GREATER_THAN_OR_EQUAL
condition|)
block|{
return|return
name|Arrays
operator|.
expr|<
name|Range
operator|>
name|asList
argument_list|(
name|withNot
condition|?
name|Range
operator|.
name|lessThan
argument_list|(
name|value
argument_list|)
else|:
name|Range
operator|.
name|atLeast
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
comment|//EQUALS
if|if
condition|(
operator|!
name|withNot
condition|)
block|{
return|return
name|Arrays
operator|.
expr|<
name|Range
operator|>
name|asList
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
name|value
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Arrays
operator|.
expr|<
name|Range
operator|>
name|asList
argument_list|(
name|Range
operator|.
name|lessThan
argument_list|(
name|value
argument_list|)
argument_list|,
name|Range
operator|.
name|greaterThan
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
block|}
case|case
name|BETWEEN
case|:
block|{
name|RexLiteral
name|literal1
init|=
name|extractLiteral
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|literal1
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RexLiteral
name|literal2
init|=
name|extractLiteral
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|literal2
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Comparable
name|value1
init|=
name|literalToType
argument_list|(
name|literal1
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|Comparable
name|value2
init|=
name|literalToType
argument_list|(
name|literal2
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|value1
operator|==
literal|null
operator|||
name|value2
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|boolean
name|inverted
init|=
name|value1
operator|.
name|compareTo
argument_list|(
name|value2
argument_list|)
operator|>
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|withNot
condition|)
block|{
return|return
name|Arrays
operator|.
expr|<
name|Range
operator|>
name|asList
argument_list|(
name|inverted
condition|?
name|Range
operator|.
name|closed
argument_list|(
name|value2
argument_list|,
name|value1
argument_list|)
else|:
name|Range
operator|.
name|closed
argument_list|(
name|value1
argument_list|,
name|value2
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Arrays
operator|.
expr|<
name|Range
operator|>
name|asList
argument_list|(
name|Range
operator|.
name|lessThan
argument_list|(
name|inverted
condition|?
name|value2
else|:
name|value1
argument_list|)
argument_list|,
name|Range
operator|.
name|greaterThan
argument_list|(
name|inverted
condition|?
name|value1
else|:
name|value2
argument_list|)
argument_list|)
return|;
block|}
case|case
name|IN
case|:
block|{
name|List
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RexLiteral
name|literal
init|=
name|extractLiteral
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|literal
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Comparable
name|element
init|=
name|literalToType
argument_list|(
name|literal
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|withNot
condition|)
block|{
name|ranges
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
expr|<
name|Range
operator|>
name|asList
argument_list|(
name|Range
operator|.
name|lessThan
argument_list|(
name|element
argument_list|)
argument_list|,
name|Range
operator|.
name|greaterThan
argument_list|(
name|element
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ranges
operator|.
name|add
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
name|element
argument_list|,
name|element
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ranges
return|;
block|}
default|default:
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"incomplete-switch"
argument_list|)
specifier|protected
specifier|static
name|Comparable
name|literalToType
parameter_list|(
name|RexLiteral
name|literal
parameter_list|,
name|RelDataType
name|type
parameter_list|)
block|{
comment|// Extract
name|Object
name|value
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|literal
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|DATE
case|:
case|case
name|TIME
case|:
case|case
name|TIMESTAMP
case|:
case|case
name|INTERVAL_YEAR_MONTH
case|:
case|case
name|INTERVAL_DAY_TIME
case|:
name|value
operator|=
name|literal
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|TINYINT
case|:
case|case
name|SMALLINT
case|:
case|case
name|INTEGER
case|:
case|case
name|BIGINT
case|:
case|case
name|DOUBLE
case|:
case|case
name|DECIMAL
case|:
case|case
name|FLOAT
case|:
case|case
name|REAL
case|:
case|case
name|VARCHAR
case|:
case|case
name|CHAR
case|:
case|case
name|BOOLEAN
case|:
name|value
operator|=
name|literal
operator|.
name|getValue3
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Convert
switch|switch
condition|(
name|type
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|BIGINT
case|:
return|return
name|toLong
argument_list|(
name|value
argument_list|)
return|;
case|case
name|INTEGER
case|:
return|return
name|toInt
argument_list|(
name|value
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
name|toFloat
argument_list|(
name|value
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|toDouble
argument_list|(
name|value
argument_list|)
return|;
case|case
name|VARCHAR
case|:
case|case
name|CHAR
case|:
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|toTimestamp
argument_list|(
name|value
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|RexLiteral
name|extractLiteral
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
name|RexNode
name|target
init|=
name|node
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|CAST
condition|)
block|{
name|target
operator|=
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|target
operator|instanceof
name|RexLiteral
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|RexLiteral
operator|)
name|target
return|;
block|}
specifier|private
specifier|static
name|Comparable
name|toTimestamp
parameter_list|(
name|Object
name|literal
parameter_list|)
block|{
if|if
condition|(
name|literal
operator|instanceof
name|Timestamp
condition|)
block|{
return|return
operator|(
name|Timestamp
operator|)
name|literal
return|;
block|}
if|if
condition|(
name|literal
operator|instanceof
name|Date
condition|)
block|{
return|return
operator|new
name|Timestamp
argument_list|(
operator|(
operator|(
name|Date
operator|)
name|literal
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|literal
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|new
name|Timestamp
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|literal
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|literal
operator|instanceof
name|String
condition|)
block|{
name|String
name|string
init|=
operator|(
name|String
operator|)
name|literal
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNumeric
argument_list|(
name|string
argument_list|)
condition|)
block|{
return|return
operator|new
name|Timestamp
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|string
argument_list|)
argument_list|)
return|;
block|}
try|try
block|{
return|return
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|string
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|Long
name|toLong
parameter_list|(
name|Object
name|literal
parameter_list|)
block|{
if|if
condition|(
name|literal
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|literal
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
if|if
condition|(
name|literal
operator|instanceof
name|Date
condition|)
block|{
return|return
operator|(
operator|(
name|Date
operator|)
name|literal
operator|)
operator|.
name|getTime
argument_list|()
return|;
block|}
if|if
condition|(
name|literal
operator|instanceof
name|Timestamp
condition|)
block|{
return|return
operator|(
operator|(
name|Timestamp
operator|)
name|literal
operator|)
operator|.
name|getTime
argument_list|()
return|;
block|}
if|if
condition|(
name|literal
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|literal
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
try|try
block|{
return|return
name|DateFormat
operator|.
name|getDateInstance
argument_list|()
operator|.
name|parse
argument_list|(
operator|(
name|String
operator|)
name|literal
argument_list|)
operator|.
name|getTime
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
comment|// best effort. ignore
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|Integer
name|toInt
parameter_list|(
name|Object
name|literal
parameter_list|)
block|{
if|if
condition|(
name|literal
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|literal
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
if|if
condition|(
name|literal
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|literal
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|Float
name|toFloat
parameter_list|(
name|Object
name|literal
parameter_list|)
block|{
if|if
condition|(
name|literal
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|literal
operator|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
if|if
condition|(
name|literal
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|literal
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|Double
name|toDouble
parameter_list|(
name|Object
name|literal
parameter_list|)
block|{
if|if
condition|(
name|literal
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|literal
operator|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
if|if
condition|(
name|literal
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
return|return
name|Double
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|literal
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
specifier|static
name|List
argument_list|<
name|Range
argument_list|>
name|condenseRanges
parameter_list|(
name|List
argument_list|<
name|Range
argument_list|>
name|ranges
parameter_list|)
block|{
if|if
condition|(
name|ranges
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
return|return
name|ranges
return|;
block|}
name|Comparator
argument_list|<
name|Range
argument_list|>
name|startThenEnd
init|=
operator|new
name|Comparator
argument_list|<
name|Range
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Range
name|lhs
parameter_list|,
name|Range
name|rhs
parameter_list|)
block|{
name|int
name|compare
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|lhs
operator|.
name|hasLowerBound
argument_list|()
operator|&&
name|rhs
operator|.
name|hasLowerBound
argument_list|()
condition|)
block|{
name|compare
operator|=
name|lhs
operator|.
name|lowerEndpoint
argument_list|()
operator|.
name|compareTo
argument_list|(
name|rhs
operator|.
name|lowerEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|lhs
operator|.
name|hasLowerBound
argument_list|()
operator|&&
name|rhs
operator|.
name|hasLowerBound
argument_list|()
condition|)
block|{
name|compare
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lhs
operator|.
name|hasLowerBound
argument_list|()
operator|&&
operator|!
name|rhs
operator|.
name|hasLowerBound
argument_list|()
condition|)
block|{
name|compare
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|compare
operator|!=
literal|0
condition|)
block|{
return|return
name|compare
return|;
block|}
if|if
condition|(
name|lhs
operator|.
name|hasUpperBound
argument_list|()
operator|&&
name|rhs
operator|.
name|hasUpperBound
argument_list|()
condition|)
block|{
name|compare
operator|=
name|lhs
operator|.
name|upperEndpoint
argument_list|()
operator|.
name|compareTo
argument_list|(
name|rhs
operator|.
name|upperEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|lhs
operator|.
name|hasUpperBound
argument_list|()
operator|&&
name|rhs
operator|.
name|hasUpperBound
argument_list|()
condition|)
block|{
name|compare
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lhs
operator|.
name|hasUpperBound
argument_list|()
operator|&&
operator|!
name|rhs
operator|.
name|hasUpperBound
argument_list|()
condition|)
block|{
name|compare
operator|=
literal|1
expr_stmt|;
block|}
return|return
name|compare
return|;
block|}
block|}
decl_stmt|;
name|TreeSet
argument_list|<
name|Range
argument_list|>
name|sortedIntervals
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|startThenEnd
argument_list|)
decl_stmt|;
name|sortedIntervals
operator|.
name|addAll
argument_list|(
name|ranges
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Range
argument_list|>
name|retVal
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Range
argument_list|>
name|intervalsIter
init|=
name|sortedIntervals
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Range
name|currInterval
init|=
name|intervalsIter
operator|.
name|next
argument_list|()
decl_stmt|;
while|while
condition|(
name|intervalsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Range
name|next
init|=
name|intervalsIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|currInterval
operator|.
name|encloses
argument_list|(
name|next
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|mergeable
argument_list|(
name|currInterval
argument_list|,
name|next
argument_list|)
condition|)
block|{
name|currInterval
operator|=
name|currInterval
operator|.
name|span
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|retVal
operator|.
name|add
argument_list|(
name|currInterval
argument_list|)
expr_stmt|;
name|currInterval
operator|=
name|next
expr_stmt|;
block|}
block|}
name|retVal
operator|.
name|add
argument_list|(
name|currInterval
argument_list|)
expr_stmt|;
return|return
name|retVal
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|mergeable
parameter_list|(
name|Range
name|range1
parameter_list|,
name|Range
name|range2
parameter_list|)
block|{
name|Comparable
name|x1
init|=
name|range1
operator|.
name|upperEndpoint
argument_list|()
decl_stmt|;
name|Comparable
name|x2
init|=
name|range2
operator|.
name|lowerEndpoint
argument_list|()
decl_stmt|;
name|int
name|compare
init|=
name|x1
operator|.
name|compareTo
argument_list|(
name|x2
argument_list|)
decl_stmt|;
return|return
name|compare
operator|>
literal|0
operator|||
operator|(
name|compare
operator|==
literal|0
operator|&&
name|range1
operator|.
name|upperBoundType
argument_list|()
operator|==
name|BoundType
operator|.
name|CLOSED
operator|&&
name|range2
operator|.
name|lowerBoundType
argument_list|()
operator|==
name|BoundType
operator|.
name|CLOSED
operator|)
return|;
block|}
specifier|public
specifier|static
name|long
name|extractTotalTime
parameter_list|(
name|List
argument_list|<
name|Interval
argument_list|>
name|intervals
parameter_list|)
block|{
name|long
name|totalTime
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Interval
name|interval
range|:
name|intervals
control|)
block|{
name|totalTime
operator|+=
operator|(
name|interval
operator|.
name|getEndMillis
argument_list|()
operator|-
name|interval
operator|.
name|getStartMillis
argument_list|()
operator|)
expr_stmt|;
block|}
return|return
name|totalTime
return|;
block|}
block|}
end_class

end_unit

