begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableFunctionScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelColumnMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|CalciteSemanticException
import|;
end_import

begin_class
specifier|public
class|class
name|HiveTableFunctionScan
extends|extends
name|TableFunctionScan
implements|implements
name|HiveRelNode
block|{
comment|/**    * @param cluster    *          cluster - Cluster that this relational expression belongs to    * @param traitSet    * @param inputs    *          inputs - 0 or more relational inputs    * @param rexCall    *          rexCall - Function invocation expression    * @param elementType    *          elementType - Element type of the collection that will implement    *          this table    * @param rowType    *          rowType - Row type produced by function    * @param columnMappings    *          columnMappings - Column mappings associated with this function    */
specifier|public
name|HiveTableFunctionScan
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|RexNode
name|rexCall
parameter_list|,
name|Type
name|elementType
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|Set
argument_list|<
name|RelColumnMapping
argument_list|>
name|columnMappings
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|rexCall
argument_list|,
name|elementType
argument_list|,
name|rowType
argument_list|,
name|columnMappings
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|HiveTableFunctionScan
name|create
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|RexNode
name|rexCall
parameter_list|,
name|Type
name|elementType
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|Set
argument_list|<
name|RelColumnMapping
argument_list|>
name|columnMappings
parameter_list|)
throws|throws
name|CalciteSemanticException
block|{
name|HiveTableFunctionScan
name|hiveTableFunctionScan
init|=
operator|new
name|HiveTableFunctionScan
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|rexCall
argument_list|,
name|elementType
argument_list|,
name|rowType
argument_list|,
name|columnMappings
argument_list|)
decl_stmt|;
return|return
name|hiveTableFunctionScan
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableFunctionScan
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|,
name|RexNode
name|rexCall
parameter_list|,
name|Type
name|elementType
parameter_list|,
name|RelDataType
name|rowType
parameter_list|,
name|Set
argument_list|<
name|RelColumnMapping
argument_list|>
name|columnMappings
parameter_list|)
block|{
name|HiveTableFunctionScan
name|htfs
init|=
operator|new
name|HiveTableFunctionScan
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|inputs
argument_list|,
name|rexCall
argument_list|,
name|elementType
argument_list|,
name|rowType
argument_list|,
name|columnMappings
argument_list|)
decl_stmt|;
return|return
name|htfs
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|implement
parameter_list|(
name|Implementor
name|implementor
parameter_list|)
block|{    }
block|}
end_class

end_unit

