begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_comment
comment|/**  * Operation process showing the table status.  */
end_comment

begin_class
specifier|public
class|class
name|ShowTablePropertiesOperation
extends|extends
name|DDLOperation
block|{
specifier|private
specifier|final
name|ShowTablePropertiesDesc
name|desc
decl_stmt|;
specifier|public
name|ShowTablePropertiesOperation
parameter_list|(
name|DDLOperationContext
name|context
parameter_list|,
name|ShowTablePropertiesDesc
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|desc
operator|=
name|desc
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|()
throws|throws
name|HiveException
block|{
name|String
name|tableName
init|=
name|desc
operator|.
name|getTableName
argument_list|()
decl_stmt|;
comment|// show table properties - populate the output stream
name|Table
name|tbl
init|=
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
name|String
name|errMsg
init|=
literal|"Table "
operator|+
name|tableName
operator|+
literal|" does not exist"
decl_stmt|;
name|DDLUtils
operator|.
name|writeToFile
argument_list|(
name|errMsg
argument_list|,
name|desc
operator|.
name|getResFile
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"DDLTask: show properties for {}"
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|propertyName
init|=
name|desc
operator|.
name|getPropertyName
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertyName
operator|!=
literal|null
condition|)
block|{
name|String
name|propertyValue
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyValue
operator|==
literal|null
condition|)
block|{
name|String
name|errMsg
init|=
literal|"Table "
operator|+
name|tableName
operator|+
literal|" does not have property: "
operator|+
name|propertyName
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DDLUtils
operator|.
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|propertyName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DDLUtils
operator|.
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|propertyValue
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|DDLUtils
operator|.
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DDLUtils
operator|.
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"DDLTask: written data for showing properties of {}"
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|DDLUtils
operator|.
name|writeToFile
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|desc
operator|.
name|getResFile
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"show table properties: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

