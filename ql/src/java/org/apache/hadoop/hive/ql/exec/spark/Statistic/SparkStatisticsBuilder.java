begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|Statistic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|counter
operator|.
name|SparkCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|counter
operator|.
name|SparkCounterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|counter
operator|.
name|SparkCounters
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|SparkStatisticsBuilder
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SparkStatistic
argument_list|>
argument_list|>
name|statisticMap
decl_stmt|;
specifier|public
name|SparkStatisticsBuilder
parameter_list|()
block|{
name|statisticMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SparkStatistic
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|SparkStatistics
name|build
parameter_list|()
block|{
name|List
argument_list|<
name|SparkStatisticGroup
argument_list|>
name|statisticGroups
init|=
operator|new
name|LinkedList
argument_list|<
name|SparkStatisticGroup
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SparkStatistic
argument_list|>
argument_list|>
name|entry
range|:
name|statisticMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|groupName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SparkStatistic
argument_list|>
name|statisitcList
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|statisticGroups
operator|.
name|add
argument_list|(
operator|new
name|SparkStatisticGroup
argument_list|(
name|groupName
argument_list|,
name|statisitcList
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SparkStatistics
argument_list|(
name|statisticGroups
argument_list|)
return|;
block|}
specifier|public
name|SparkStatisticsBuilder
name|add
parameter_list|(
name|SparkCounters
name|sparkCounters
parameter_list|)
block|{
for|for
control|(
name|SparkCounterGroup
name|counterGroup
range|:
name|sparkCounters
operator|.
name|getSparkCounterGroups
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|groupDisplayName
init|=
name|counterGroup
operator|.
name|getGroupDisplayName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SparkStatistic
argument_list|>
name|statisticList
init|=
name|statisticMap
operator|.
name|get
argument_list|(
name|groupDisplayName
argument_list|)
decl_stmt|;
if|if
condition|(
name|statisticList
operator|==
literal|null
condition|)
block|{
name|statisticList
operator|=
operator|new
name|LinkedList
argument_list|<
name|SparkStatistic
argument_list|>
argument_list|()
expr_stmt|;
name|statisticMap
operator|.
name|put
argument_list|(
name|groupDisplayName
argument_list|,
name|statisticList
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SparkCounter
name|counter
range|:
name|counterGroup
operator|.
name|getSparkCounters
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|displayName
init|=
name|counter
operator|.
name|getDisplayName
argument_list|()
decl_stmt|;
name|statisticList
operator|.
name|add
argument_list|(
operator|new
name|SparkStatistic
argument_list|(
name|displayName
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|counter
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
specifier|public
name|SparkStatisticsBuilder
name|add
parameter_list|(
name|String
name|groupName
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|List
argument_list|<
name|SparkStatistic
argument_list|>
name|statisticList
init|=
name|statisticMap
operator|.
name|get
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|statisticList
operator|==
literal|null
condition|)
block|{
name|statisticList
operator|=
operator|new
name|LinkedList
argument_list|<
name|SparkStatistic
argument_list|>
argument_list|()
expr_stmt|;
name|statisticMap
operator|.
name|put
argument_list|(
name|groupName
argument_list|,
name|statisticList
argument_list|)
expr_stmt|;
block|}
name|statisticList
operator|.
name|add
argument_list|(
operator|new
name|SparkStatistic
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

