begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|storage
operator|.
name|skewed
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLSemanticAnalyzerFactory
operator|.
name|DDLType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|AbstractAlterTableAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|AbstractAlterTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|AlterTableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * Analyzer for set skewed location commands.  */
end_comment

begin_class
annotation|@
name|DDLType
argument_list|(
name|types
operator|=
name|HiveParser
operator|.
name|TOK_ALTERTABLE_SKEWED_LOCATION
argument_list|)
specifier|public
class|class
name|AlterTableSetSkewedLocationAnalyzer
extends|extends
name|AbstractAlterTableAnalyzer
block|{
specifier|public
name|AlterTableSetSkewedLocationAnalyzer
parameter_list|(
name|QueryState
name|queryState
parameter_list|)
throws|throws
name|SemanticException
block|{
name|super
argument_list|(
name|queryState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|analyzeCommand
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|ASTNode
name|command
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|locationNodes
init|=
name|command
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|locationNodes
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|ALTER_TBL_SKEWED_LOC_NO_LOC
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|locations
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|locationNode
range|:
name|locationNodes
control|)
block|{
name|List
argument_list|<
name|Node
argument_list|>
name|locationListNodes
init|=
operator|(
operator|(
name|ASTNode
operator|)
name|locationNode
operator|)
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|locationListNodes
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|ALTER_TBL_SKEWED_LOC_NO_LOC
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
for|for
control|(
name|Node
name|locationListNode
range|:
name|locationListNodes
control|)
block|{
name|List
argument_list|<
name|Node
argument_list|>
name|locationMapNodes
init|=
operator|(
operator|(
name|ASTNode
operator|)
name|locationListNode
operator|)
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|locationMapNodes
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|ALTER_TBL_SKEWED_LOC_NO_LOC
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
for|for
control|(
name|Node
name|locationMapNode
range|:
name|locationMapNodes
control|)
block|{
name|List
argument_list|<
name|Node
argument_list|>
name|locationMapNodeMaps
init|=
operator|(
operator|(
name|ASTNode
operator|)
name|locationMapNode
operator|)
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|locationMapNodeMaps
operator|==
literal|null
operator|)
operator|||
operator|(
name|locationMapNodeMaps
operator|.
name|size
argument_list|()
operator|!=
literal|2
operator|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|ALTER_TBL_SKEWED_LOC_NO_MAP
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|keyList
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ASTNode
name|node
init|=
operator|(
name|ASTNode
operator|)
name|locationMapNodeMaps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TABCOLVALUES
condition|)
block|{
name|keyList
operator|=
name|SkewedTableUtils
operator|.
name|getSkewedValuesFromASTNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isConstant
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|keyList
operator|.
name|add
argument_list|(
name|PlanUtils
operator|.
name|stripQuotes
argument_list|(
name|node
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|SKEWED_TABLE_NO_COLUMN_VALUE
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|newLocation
init|=
name|PlanUtils
operator|.
name|stripQuotes
argument_list|(
name|unescapeSQLString
argument_list|(
operator|(
operator|(
name|ASTNode
operator|)
name|locationMapNodeMaps
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|validateSkewedLocationString
argument_list|(
name|newLocation
argument_list|)
expr_stmt|;
name|locations
operator|.
name|put
argument_list|(
name|keyList
argument_list|,
name|newLocation
argument_list|)
expr_stmt|;
name|outputs
operator|.
name|add
argument_list|(
name|toWriteEntity
argument_list|(
name|newLocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|AbstractAlterTableDesc
name|desc
init|=
operator|new
name|AlterTableSetSkewedLocationDesc
argument_list|(
name|tableName
argument_list|,
name|partitionSpec
argument_list|,
name|locations
argument_list|)
decl_stmt|;
name|addInputsOutputsAlterTable
argument_list|(
name|tableName
argument_list|,
name|partitionSpec
argument_list|,
name|desc
argument_list|,
name|AlterTableType
operator|.
name|SET_SKEWED_LOCATION
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rootTasks
operator|.
name|add
argument_list|(
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork
argument_list|(
name|getInputs
argument_list|()
argument_list|,
name|getOutputs
argument_list|()
argument_list|,
name|desc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|CONSTANT_TYPES
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|HiveParser
operator|.
name|Number
argument_list|,
name|HiveParser
operator|.
name|StringLiteral
argument_list|,
name|HiveParser
operator|.
name|IntegralLiteral
argument_list|,
name|HiveParser
operator|.
name|NumberLiteral
argument_list|,
name|HiveParser
operator|.
name|CharSetName
argument_list|,
name|HiveParser
operator|.
name|KW_TRUE
argument_list|,
name|HiveParser
operator|.
name|KW_FALSE
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|isConstant
parameter_list|(
name|ASTNode
name|node
parameter_list|)
block|{
return|return
name|CONSTANT_TYPES
operator|.
name|contains
argument_list|(
name|node
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|validateSkewedLocationString
parameter_list|(
name|String
name|location
parameter_list|)
throws|throws
name|SemanticException
block|{
try|try
block|{
name|URI
name|locationUri
init|=
operator|new
name|URI
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|locationUri
operator|.
name|isAbsolute
argument_list|()
operator|||
name|locationUri
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
operator|||
name|locationUri
operator|.
name|getScheme
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|location
operator|+
literal|" is not absolute or has no scheme information. "
operator|+
literal|"Please specify a complete absolute uri with scheme information."
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

