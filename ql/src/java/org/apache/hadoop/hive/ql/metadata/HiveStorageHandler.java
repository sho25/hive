begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|HiveAuthorizationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputFormat
import|;
end_import

begin_comment
comment|/**  * HiveStorageHandler defines a pluggable interface for adding  * new storage handlers to Hive.  A storage handler consists of  * a bundle of the following:  *  *<ul>  *<li>input format  *<li>output format  *<li>serde  *<li>metadata hooks for keeping an external catalog in sync  * with Hive's metastore  *<li>rules for setting up the configuration properties on  * map/reduce jobs which access tables stored by this handler  *</ul>  *  * Storage handler classes are plugged in using the STORED BY 'classname'  * clause in CREATE TABLE.  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
specifier|public
interface|interface
name|HiveStorageHandler
extends|extends
name|Configurable
block|{
comment|/**    * @return Class providing an implementation of {@link InputFormat}    */
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|getInputFormatClass
parameter_list|()
function_decl|;
comment|/**    * @return Class providing an implementation of {@link OutputFormat}    */
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|>
name|getOutputFormatClass
parameter_list|()
function_decl|;
comment|/**    * @return Class providing an implementation of {@link AbstractSerDe}    */
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|AbstractSerDe
argument_list|>
name|getSerDeClass
parameter_list|()
function_decl|;
comment|/**    * @return metadata hook implementation, or null if this    * storage handler does not need any metadata notifications    */
specifier|public
name|HiveMetaHook
name|getMetaHook
parameter_list|()
function_decl|;
comment|/**    * Returns the implementation specific authorization provider    *    * @return authorization provider    * @throws HiveException    */
specifier|public
name|HiveAuthorizationProvider
name|getAuthorizationProvider
parameter_list|()
throws|throws
name|HiveException
function_decl|;
comment|/**    * This method is called to allow the StorageHandlers the chance    * to populate the JobContext.getConfiguration() with properties that    * maybe be needed by the handler's bundled artifacts (ie InputFormat, SerDe, etc).    * Key value pairs passed into jobProperties are guaranteed to be set in the job's    * configuration object. User's can retrieve "context" information from tableDesc.    * User's should avoid mutating tableDesc and only make changes in jobProperties.    * This method is expected to be idempotent such that a job called with the    * same tableDesc values should return the same key-value pairs in jobProperties.    * Any external state set by this method should remain the same if this method is    * called again. It is up to the user to determine how best guarantee this invariant.    *    * This method in particular is to create a configuration for input.    * @param tableDesc descriptor for the table being accessed    * @param jobProperties receives properties copied or transformed    * from the table properties    */
specifier|public
specifier|abstract
name|void
name|configureInputJobProperties
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobProperties
parameter_list|)
function_decl|;
comment|/**    * This method is called to allow the StorageHandlers the chance to    * populate secret keys into the job's credentials.    */
specifier|public
specifier|abstract
name|void
name|configureInputJobCredentials
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|secrets
parameter_list|)
function_decl|;
comment|/**    * This method is called to allow the StorageHandlers the chance    * to populate the JobContext.getConfiguration() with properties that    * maybe be needed by the handler's bundled artifacts (ie InputFormat, SerDe, etc).    * Key value pairs passed into jobProperties are guaranteed to be set in the job's    * configuration object. User's can retrieve "context" information from tableDesc.    * User's should avoid mutating tableDesc and only make changes in jobProperties.    * This method is expected to be idempotent such that a job called with the    * same tableDesc values should return the same key-value pairs in jobProperties.    * Any external state set by this method should remain the same if this method is    * called again. It is up to the user to determine how best guarantee this invariant.    *    * This method in particular is to create a configuration for output.    * @param tableDesc descriptor for the table being accessed    * @param jobProperties receives properties copied or transformed    * from the table properties    */
specifier|public
specifier|abstract
name|void
name|configureOutputJobProperties
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobProperties
parameter_list|)
function_decl|;
comment|/**    * Deprecated use configureInputJobProperties/configureOutputJobProperties    * methods instead.    *    * Configures properties for a job based on the definition of the    * source or target table it accesses.    *    * @param tableDesc descriptor for the table being accessed    *    * @param jobProperties receives properties copied or transformed    * from the table properties    */
annotation|@
name|Deprecated
specifier|public
name|void
name|configureTableJobProperties
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobProperties
parameter_list|)
function_decl|;
comment|/**    * Called just before submitting MapReduce job.    *    * @param tableDesc descriptor for the table being accessed    * @param jobConf jobConf for MapReduce job    */
specifier|public
name|void
name|configureJobConf
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|,
name|JobConf
name|jobConf
parameter_list|)
function_decl|;
comment|/**    * Used to fetch runtime information about storage handler during DESCRIBE EXTENDED statement    *    * @param table table definition    * @return StorageHandlerInfo containing runtime information about storage handler    * OR `null` if the storage handler choose to not provide any runtime information.    */
specifier|public
specifier|default
name|StorageHandlerInfo
name|getStorageHandlerInfo
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
literal|null
return|;
block|}
block|}
end_interface

end_unit

