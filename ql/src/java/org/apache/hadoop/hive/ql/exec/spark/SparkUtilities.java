begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MoveTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|StatsTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|BaseWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DynamicPartitionCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FileSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LoadTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MoveWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|StatsWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableScanDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_comment
comment|/**  * Contains utilities methods used as part of Spark tasks  */
end_comment

begin_class
specifier|public
class|class
name|SparkUtilities
block|{
comment|// Used to save and retrieve IOContext for multi-insertion.
specifier|public
specifier|static
specifier|final
name|String
name|MAP_IO_CONTEXT
init|=
literal|"MAP_IO_CONTEXT"
decl_stmt|;
specifier|public
specifier|static
name|HiveKey
name|copyHiveKey
parameter_list|(
name|HiveKey
name|key
parameter_list|)
block|{
name|HiveKey
name|copy
init|=
operator|new
name|HiveKey
argument_list|()
decl_stmt|;
name|copy
operator|.
name|setDistKeyLength
argument_list|(
name|key
operator|.
name|getDistKeyLength
argument_list|()
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setHashCode
argument_list|(
name|key
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|copy
operator|.
name|set
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|copy
return|;
block|}
specifier|public
specifier|static
name|BytesWritable
name|copyBytesWritable
parameter_list|(
name|BytesWritable
name|bw
parameter_list|)
block|{
name|BytesWritable
name|copy
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
name|copy
operator|.
name|set
argument_list|(
name|bw
argument_list|)
expr_stmt|;
return|return
name|copy
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getRequiredCounterPrefix
parameter_list|(
name|SparkTask
name|sparkTask
parameter_list|,
name|Hive
name|db
parameter_list|)
throws|throws
name|HiveException
throws|,
name|MetaException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|prefixs
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BaseWork
argument_list|>
name|works
init|=
name|sparkTask
operator|.
name|getWork
argument_list|()
operator|.
name|getAllWork
argument_list|()
decl_stmt|;
for|for
control|(
name|BaseWork
name|baseWork
range|:
name|works
control|)
block|{
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|operators
init|=
name|baseWork
operator|.
name|getAllOperators
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|operator
range|:
name|operators
control|)
block|{
if|if
condition|(
name|operator
operator|instanceof
name|TableScanOperator
condition|)
block|{
name|TableScanOperator
name|tableScanOperator
init|=
operator|(
name|TableScanOperator
operator|)
name|operator
decl_stmt|;
name|TableScanDesc
name|tableScanDesc
init|=
name|tableScanOperator
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableScanDesc
operator|.
name|isGatherStats
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|childTasks
init|=
name|getChildTasks
argument_list|(
name|sparkTask
argument_list|)
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
range|:
name|childTasks
control|)
block|{
if|if
condition|(
name|task
operator|instanceof
name|StatsTask
condition|)
block|{
name|StatsTask
name|statsTask
init|=
operator|(
name|StatsTask
operator|)
name|task
decl_stmt|;
name|StatsWork
name|statsWork
init|=
name|statsTask
operator|.
name|getWork
argument_list|()
decl_stmt|;
comment|// ANALYZE command
name|BaseSemanticAnalyzer
operator|.
name|tableSpec
name|tblSpec
init|=
name|statsWork
operator|.
name|getTableSpecs
argument_list|()
decl_stmt|;
name|Table
name|table
init|=
name|tblSpec
operator|.
name|tableHandle
decl_stmt|;
if|if
condition|(
operator|!
name|table
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|prefixs
operator|.
name|add
argument_list|(
name|tableScanDesc
operator|.
name|getStatsAggPrefix
argument_list|()
argument_list|)
expr_stmt|;
comment|// non-partitioned
block|}
else|else
block|{
for|for
control|(
name|Partition
name|partition
range|:
name|tblSpec
operator|.
name|partitions
control|)
block|{
name|String
name|aggrPrefix
init|=
name|getAggregationPrefix
argument_list|(
name|table
argument_list|,
name|partition
operator|.
name|getSpec
argument_list|()
argument_list|,
name|tableScanDesc
operator|.
name|getMaxStatsKeyPrefixLength
argument_list|()
argument_list|)
decl_stmt|;
name|prefixs
operator|.
name|add
argument_list|(
name|aggrPrefix
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|operator
operator|instanceof
name|FileSinkOperator
condition|)
block|{
name|FileSinkOperator
name|fileSinkOperator
init|=
operator|(
name|FileSinkOperator
operator|)
name|operator
decl_stmt|;
name|FileSinkDesc
name|fileSinkDesc
init|=
name|fileSinkOperator
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileSinkDesc
operator|.
name|isGatherStats
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|childTasks
init|=
name|getChildTasks
argument_list|(
name|sparkTask
argument_list|)
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
range|:
name|childTasks
control|)
block|{
if|if
condition|(
name|task
operator|instanceof
name|MoveTask
condition|)
block|{
name|MoveTask
name|moveTask
init|=
operator|(
name|MoveTask
operator|)
name|task
decl_stmt|;
name|MoveWork
name|moveWork
init|=
name|moveTask
operator|.
name|getWork
argument_list|()
decl_stmt|;
comment|// INSERT OVERWRITE command
name|LoadTableDesc
name|tbd
init|=
name|moveWork
operator|.
name|getLoadTableWork
argument_list|()
decl_stmt|;
name|Table
name|table
init|=
name|db
operator|.
name|getTable
argument_list|(
name|tbd
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|table
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|prefixs
operator|.
name|add
argument_list|(
name|getAggregationPrefix
argument_list|(
name|table
argument_list|,
literal|null
argument_list|,
name|fileSinkDesc
operator|.
name|getMaxStatsKeyPrefixLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DynamicPartitionCtx
name|dpCtx
init|=
name|tbd
operator|.
name|getDPCtx
argument_list|()
decl_stmt|;
if|if
condition|(
name|dpCtx
operator|==
literal|null
operator|||
name|dpCtx
operator|.
name|getNumDPCols
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// static partition
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
init|=
name|tbd
operator|.
name|getPartitionSpec
argument_list|()
decl_stmt|;
if|if
condition|(
name|partitionSpec
operator|!=
literal|null
operator|&&
operator|!
name|partitionSpec
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|aggrPrefix
init|=
name|getAggregationPrefix
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|,
name|fileSinkDesc
operator|.
name|getMaxStatsKeyPrefixLength
argument_list|()
argument_list|)
decl_stmt|;
name|prefixs
operator|.
name|add
argument_list|(
name|aggrPrefix
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// dynamic partition
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|prefixs
return|;
block|}
specifier|private
specifier|static
name|String
name|getAggregationPrefix
parameter_list|(
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|int
name|maxKeyLength
parameter_list|)
throws|throws
name|MetaException
block|{
name|StringBuilder
name|prefix
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// prefix is of the form dbName.tblName
name|prefix
operator|.
name|append
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|partitionSpec
operator|!=
literal|null
condition|)
block|{
return|return
name|Utilities
operator|.
name|join
argument_list|(
name|prefix
operator|.
name|toString
argument_list|()
argument_list|,
name|Warehouse
operator|.
name|makePartPath
argument_list|(
name|partitionSpec
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Utilities
operator|.
name|getHashedStatsPrefix
argument_list|(
name|prefix
operator|.
name|toString
argument_list|()
argument_list|,
name|maxKeyLength
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|getChildTasks
parameter_list|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|rootTask
parameter_list|)
block|{
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|fillChildTasks
argument_list|(
name|tasks
argument_list|,
name|rootTask
argument_list|)
expr_stmt|;
return|return
name|tasks
return|;
block|}
specifier|private
specifier|static
name|void
name|fillChildTasks
parameter_list|(
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|tasks
parameter_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|rootTask
parameter_list|)
block|{
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|childTasks
init|=
name|rootTask
operator|.
name|getChildTasks
argument_list|()
decl_stmt|;
name|tasks
operator|.
name|add
argument_list|(
name|rootTask
argument_list|)
expr_stmt|;
if|if
condition|(
name|childTasks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
range|:
name|childTasks
control|)
block|{
name|fillChildTasks
argument_list|(
name|tasks
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

