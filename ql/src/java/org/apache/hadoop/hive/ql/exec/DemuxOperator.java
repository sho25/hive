begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DemuxDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * DemuxOperator is an operator used by MapReduce Jobs optimized by  * CorrelationOptimizer. If used, DemuxOperator is the first operator in reduce  * phase. In the case that multiple operation paths are merged into a single one, it will dispatch  * the record to corresponding child operators (Join or GBY).  */
end_comment

begin_class
specifier|public
class|class
name|DemuxOperator
extends|extends
name|Operator
argument_list|<
name|DemuxDesc
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DemuxOperator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Handler is used to assign original tag (oldTag) to a row and    * track how many rows are forwarded to every child of DemuxOperator.    */
specifier|protected
specifier|static
class|class
name|Handler
block|{
comment|// oldTag is the tag assigned to ReduceSinkOperators BEFORE Correlation Optimizer
comment|// optimizes the operator tree. newTag is the tag assigned to ReduceSinkOperators
comment|// AFTER Correlation Optimizer optimizes the operator tree.
comment|// Example: we have an operator tree shown below ...
comment|//        JOIN2
comment|//       /     \
comment|//   GBY1       JOIN1
comment|//    |         /    \
comment|//   RS1       RS2   RS3
comment|// If GBY1, JOIN1, and JOIN2 are executed in the same Reducer
comment|// (optimized by Correlation Optimizer), we will have ...
comment|// oldTag: RS1:0, RS2:0, RS3:1
comment|// newTag: RS1:0, RS2:1, RS3:2
comment|// We need to know the mapping from the newTag to oldTag and revert
comment|// the newTag to oldTag to make operators in the operator tree
comment|// function correctly.
specifier|private
specifier|final
name|byte
name|newTag
decl_stmt|;
specifier|private
specifier|final
name|byte
name|oldTag
decl_stmt|;
specifier|private
specifier|final
name|byte
name|childIndex
decl_stmt|;
specifier|private
specifier|final
name|ByteWritable
name|oldTagByteWritable
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|forwardedRow
decl_stmt|;
comment|// counters for debugging
specifier|private
specifier|transient
name|long
name|cntr
init|=
literal|0
decl_stmt|;
specifier|private
specifier|transient
name|long
name|nextCntr
init|=
literal|1
decl_stmt|;
specifier|private
name|long
name|getNextCntr
parameter_list|(
name|long
name|cntr
parameter_list|)
block|{
comment|// A very simple counter to keep track of number of rows processed by an
comment|// operator. It dumps
comment|// every 1 million times, and quickly before that
if|if
condition|(
name|cntr
operator|>=
literal|1000000
condition|)
block|{
return|return
name|cntr
operator|+
literal|1000000
return|;
block|}
return|return
literal|10
operator|*
name|cntr
return|;
block|}
specifier|public
name|long
name|getCntr
parameter_list|()
block|{
return|return
name|this
operator|.
name|cntr
return|;
block|}
specifier|private
specifier|final
name|Log
name|log
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isLogInfoEnabled
decl_stmt|;
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
specifier|public
name|Handler
parameter_list|(
name|byte
name|newTag
parameter_list|,
name|byte
name|childIndex
parameter_list|,
name|byte
name|oldTag
parameter_list|,
name|Log
name|LOG
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|HiveException
block|{
name|this
operator|.
name|newTag
operator|=
name|newTag
expr_stmt|;
name|this
operator|.
name|oldTag
operator|=
name|oldTag
expr_stmt|;
name|this
operator|.
name|childIndex
operator|=
name|childIndex
expr_stmt|;
name|this
operator|.
name|oldTagByteWritable
operator|=
operator|new
name|ByteWritable
argument_list|(
name|oldTag
argument_list|)
expr_stmt|;
name|this
operator|.
name|log
operator|=
name|LOG
expr_stmt|;
name|this
operator|.
name|isLogInfoEnabled
operator|=
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|forwardedRow
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
specifier|public
name|byte
name|getOldTag
parameter_list|()
block|{
return|return
name|oldTag
return|;
block|}
specifier|public
name|Object
name|process
parameter_list|(
name|Object
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
name|forwardedRow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|thisRow
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|row
decl_stmt|;
name|forwardedRow
operator|.
name|add
argument_list|(
name|thisRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|forwardedRow
operator|.
name|add
argument_list|(
name|thisRow
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|forwardedRow
operator|.
name|add
argument_list|(
name|oldTagByteWritable
argument_list|)
expr_stmt|;
if|if
condition|(
name|isLogInfoEnabled
condition|)
block|{
name|cntr
operator|++
expr_stmt|;
if|if
condition|(
name|cntr
operator|==
name|nextCntr
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
name|id
operator|+
literal|" (newTag, childIndex, oldTag)=("
operator|+
name|newTag
operator|+
literal|", "
operator|+
name|childIndex
operator|+
literal|", "
operator|+
name|oldTag
operator|+
literal|"), forwarding "
operator|+
name|cntr
operator|+
literal|" rows"
argument_list|)
expr_stmt|;
name|nextCntr
operator|=
name|getNextCntr
argument_list|(
name|cntr
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|forwardedRow
return|;
block|}
specifier|public
name|void
name|printCloseOpLog
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
name|id
operator|+
literal|" (newTag, childIndex, oldTag)=("
operator|+
name|newTag
operator|+
literal|", "
operator|+
name|childIndex
operator|+
literal|", "
operator|+
name|oldTag
operator|+
literal|"),  forwarded "
operator|+
name|cntr
operator|+
literal|" rows"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The mapping from a newTag to its corresponding oldTag. Please see comments in
comment|// DemuxOperator.Handler for explanations of newTag and oldTag.
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|newTagToOldTag
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|// The mapping from a newTag to the index of the corresponding child
comment|// of this operator.
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|newTagToChildIndex
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|// The mapping from a newTag to its corresponding handler
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Handler
argument_list|>
name|newTagToDispatchHandler
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Handler
argument_list|>
argument_list|()
decl_stmt|;
comment|// The mapping from the index of a child operator to its corresponding
comment|// inputObjectInspectors
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|ObjectInspector
index|[]
argument_list|>
name|childInputObjInspectors
decl_stmt|;
specifier|private
name|int
name|childrenDone
decl_stmt|;
comment|// Since DemuxOperator may appear multiple times in MuxOperator's parents list.
comment|// We use newChildIndexTag instead of childOperatorsTag.
comment|// Example:
comment|//         JOIN
comment|//           |
comment|//          MUX
comment|//         / | \
comment|//        /  |  \
comment|//       /   |   \
comment|//       |  GBY  |
comment|//       \   |   /
comment|//        \  |  /
comment|//         DEMUX
comment|// In this case, the parent list of MUX is [DEMUX, GBY, DEMUX],
comment|// so we need to have two childOperatorsTags (the index of this DemuxOperator in
comment|// its children's parents lists, also see childOperatorsTag in Operator) at here.
specifier|private
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|newChildOperatorsTag
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|this
operator|.
name|newTagToOldTag
operator|=
name|conf
operator|.
name|getNewTagToOldTag
argument_list|()
expr_stmt|;
name|this
operator|.
name|newTagToChildIndex
operator|=
name|conf
operator|.
name|getNewTagToChildIndex
argument_list|()
expr_stmt|;
name|this
operator|.
name|newTagToDispatchHandler
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Handler
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|childInputObjInspectors
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ObjectInspector
index|[]
argument_list|>
argument_list|()
expr_stmt|;
comment|// For every newTag (every newTag corresponds to a ReduceSinkOperator),
comment|// create a handler. Also, we initialize childInputObjInspectors at here.
for|for
control|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|newTagToOldTag
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|newTag
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|int
name|oldTag
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|childIndex
init|=
name|newTagToChildIndex
operator|.
name|get
argument_list|(
name|newTag
argument_list|)
decl_stmt|;
name|Handler
name|handler
init|=
operator|new
name|Handler
argument_list|(
operator|(
name|byte
operator|)
name|newTag
argument_list|,
operator|(
name|byte
operator|)
name|childIndex
argument_list|,
operator|(
name|byte
operator|)
name|oldTag
argument_list|,
name|LOG
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|newTagToDispatchHandler
operator|.
name|put
argument_list|(
name|newTag
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|int
name|childParentsCount
init|=
name|conf
operator|.
name|getChildIndexToOriginalNumParents
argument_list|()
operator|.
name|get
argument_list|(
name|childIndex
argument_list|)
decl_stmt|;
name|childInputObjInspectors
operator|.
name|put
argument_list|(
name|childIndex
argument_list|,
operator|new
name|ObjectInspector
index|[
name|childParentsCount
index|]
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// We populate inputInspectors for all children of this DemuxOperator.
comment|// Those inputObjectInspectors are stored in childInputObjInspectors.
for|for
control|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|e1
range|:
name|newTagToOldTag
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|newTag
init|=
name|e1
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|int
name|oldTag
init|=
name|e1
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|childIndex
init|=
name|newTagToChildIndex
operator|.
name|get
argument_list|(
name|newTag
argument_list|)
decl_stmt|;
name|TableDesc
name|keyTableDesc
init|=
name|conf
operator|.
name|getKeysSerializeInfos
argument_list|()
operator|.
name|get
argument_list|(
name|newTag
argument_list|)
decl_stmt|;
name|Deserializer
name|inputKeyDeserializer
init|=
operator|(
name|SerDe
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|keyTableDesc
operator|.
name|getDeserializerClass
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|inputKeyDeserializer
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|keyTableDesc
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|TableDesc
name|valueTableDesc
init|=
name|conf
operator|.
name|getValuesSerializeInfos
argument_list|()
operator|.
name|get
argument_list|(
name|newTag
argument_list|)
decl_stmt|;
name|Deserializer
name|inputValueDeserializer
init|=
operator|(
name|SerDe
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|valueTableDesc
operator|.
name|getDeserializerClass
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|inputValueDeserializer
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|valueTableDesc
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|oi
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|oi
operator|.
name|add
argument_list|(
name|inputKeyDeserializer
operator|.
name|getObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
name|oi
operator|.
name|add
argument_list|(
name|inputValueDeserializer
operator|.
name|getObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
name|oi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableByteObjectInspector
argument_list|)
expr_stmt|;
name|ObjectInspector
index|[]
name|ois
init|=
name|childInputObjInspectors
operator|.
name|get
argument_list|(
name|childIndex
argument_list|)
decl_stmt|;
name|ois
index|[
name|oldTag
index|]
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|Utilities
operator|.
name|fieldNameList
argument_list|,
name|oi
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|childrenDone
operator|=
literal|0
expr_stmt|;
name|newChildOperatorsTag
operator|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
range|:
name|childOperators
control|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|childOperatorTags
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|MuxOperator
condition|)
block|{
comment|// This DemuxOperator can appear multiple times in MuxOperator's
comment|// parentOperators
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
range|:
name|child
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
if|if
condition|(
name|this
operator|==
name|parent
condition|)
block|{
name|childOperatorTags
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|index
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
name|childOperatorTags
operator|.
name|add
argument_list|(
name|child
operator|.
name|getParentOperators
argument_list|()
operator|.
name|indexOf
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newChildOperatorsTag
operator|.
name|add
argument_list|(
name|childOperatorTags
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"newChildOperatorsTag "
operator|+
name|newChildOperatorsTag
argument_list|)
expr_stmt|;
name|initializeChildren
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
block|}
comment|// Each child should has its own outputObjInspector
annotation|@
name|Override
specifier|protected
name|void
name|initializeChildren
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|state
operator|=
name|State
operator|.
name|INIT
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Operator "
operator|+
name|id
operator|+
literal|" "
operator|+
name|getName
argument_list|()
operator|+
literal|" initialized"
argument_list|)
expr_stmt|;
if|if
condition|(
name|childOperators
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing children of "
operator|+
name|id
operator|+
literal|" "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childOperatorsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing child "
operator|+
name|i
operator|+
literal|" "
operator|+
name|childOperatorsArray
index|[
name|i
index|]
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|" "
operator|+
name|childOperatorsArray
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|childInputObjInspectors
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// We need to initialize those MuxOperators first because if we first
comment|// initialize other operators, the states of all parents of those MuxOperators
comment|// are INIT (including this DemuxOperator),
comment|// but the inputInspector of those MuxOperators has not been set.
if|if
condition|(
name|childOperatorsArray
index|[
name|i
index|]
operator|instanceof
name|MuxOperator
condition|)
block|{
comment|// If this DemuxOperator directly connects to a MuxOperator,
comment|// that MuxOperator must be the parent of a JoinOperator.
comment|// In this case, that MuxOperator should be initialized
comment|// by multiple parents (of that MuxOperator).
name|ObjectInspector
index|[]
name|ois
init|=
name|childInputObjInspectors
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ois
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|ois
index|[
name|j
index|]
operator|!=
literal|null
condition|)
block|{
name|childOperatorsArray
index|[
name|i
index|]
operator|.
name|initialize
argument_list|(
name|hconf
argument_list|,
name|ois
index|[
name|j
index|]
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
continue|continue;
block|}
if|if
condition|(
name|reporter
operator|!=
literal|null
condition|)
block|{
name|childOperatorsArray
index|[
name|i
index|]
operator|.
name|setReporter
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childOperatorsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing child "
operator|+
name|i
operator|+
literal|" "
operator|+
name|childOperatorsArray
index|[
name|i
index|]
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|" "
operator|+
name|childOperatorsArray
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|childInputObjInspectors
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|childOperatorsArray
index|[
name|i
index|]
operator|instanceof
name|MuxOperator
operator|)
condition|)
block|{
name|childOperatorsArray
index|[
name|i
index|]
operator|.
name|initialize
argument_list|(
name|hconf
argument_list|,
name|childInputObjInspectors
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
if|if
condition|(
name|reporter
operator|!=
literal|null
condition|)
block|{
name|childOperatorsArray
index|[
name|i
index|]
operator|.
name|setReporter
argument_list|(
name|reporter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|processOp
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|newTag
init|=
name|tag
decl_stmt|;
name|forward
argument_list|(
name|row
argument_list|,
name|inputObjInspectors
index|[
name|newTag
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|forward
parameter_list|(
name|Object
name|row
parameter_list|,
name|ObjectInspector
name|rowInspector
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|(
operator|++
name|outputRows
operator|%
literal|1000
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|counterNameToEnum
operator|!=
literal|null
condition|)
block|{
name|incrCounter
argument_list|(
name|numOutputRowsCntr
argument_list|,
name|outputRows
argument_list|)
expr_stmt|;
name|outputRows
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
name|childOperatorsArray
operator|==
literal|null
operator|&&
name|childOperators
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal Hive error during operator initialization."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|childOperatorsArray
operator|==
literal|null
operator|)
operator|||
operator|(
name|getDone
argument_list|()
operator|)
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|thisRow
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|row
decl_stmt|;
assert|assert
name|thisRow
operator|.
name|size
argument_list|()
operator|==
literal|3
assert|;
name|int
name|newTag
init|=
operator|(
operator|(
name|ByteWritable
operator|)
name|thisRow
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Handler
name|handler
init|=
name|newTagToDispatchHandler
operator|.
name|get
argument_list|(
name|newTag
argument_list|)
decl_stmt|;
name|int
name|childIndex
init|=
name|newTagToChildIndex
operator|.
name|get
argument_list|(
name|newTag
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|o
init|=
name|childOperatorsArray
index|[
name|childIndex
index|]
decl_stmt|;
if|if
condition|(
name|o
operator|.
name|getDone
argument_list|()
condition|)
block|{
name|childrenDone
operator|++
expr_stmt|;
block|}
else|else
block|{
name|o
operator|.
name|process
argument_list|(
name|handler
operator|.
name|process
argument_list|(
name|row
argument_list|)
argument_list|,
name|handler
operator|.
name|getOldTag
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// if all children are done, this operator is also done
if|if
condition|(
name|childrenDone
operator|==
name|childOperatorsArray
operator|.
name|length
condition|)
block|{
name|setDone
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|closeOp
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// log the number of rows forwarded from each dispatcherHandler
for|for
control|(
name|Handler
name|handler
range|:
name|newTagToDispatchHandler
operator|.
name|values
argument_list|()
control|)
block|{
name|handler
operator|.
name|printCloseOpLog
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endGroup
parameter_list|()
throws|throws
name|HiveException
block|{
if|if
condition|(
name|childOperators
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|fatalError
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childOperatorsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
init|=
name|childOperatorsArray
index|[
name|i
index|]
decl_stmt|;
name|child
operator|.
name|flush
argument_list|()
expr_stmt|;
name|child
operator|.
name|endGroup
argument_list|()
expr_stmt|;
for|for
control|(
name|Integer
name|childTag
range|:
name|newChildOperatorsTag
operator|.
name|get
argument_list|(
name|i
argument_list|)
control|)
block|{
name|child
operator|.
name|processGroup
argument_list|(
name|childTag
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @return the name of the operator    */
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getOperatorName
argument_list|()
return|;
block|}
specifier|static
specifier|public
name|String
name|getOperatorName
parameter_list|()
block|{
return|return
literal|"DEMUX"
return|;
block|}
annotation|@
name|Override
specifier|public
name|OperatorType
name|getType
parameter_list|()
block|{
return|return
name|OperatorType
operator|.
name|DEMUX
return|;
block|}
block|}
end_class

end_unit

