begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExplainTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|TezTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ExplainConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExplainWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|TimelineClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|ShutdownHookManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * ATSHook sends query + plan info to Yarn App Timeline Server. To enable (hadoop 2.4 and up) set  * hive.exec.pre.hooks/hive.exec.post.hooks/hive.exec.failure.hooks to include this class.  */
end_comment

begin_class
specifier|public
class|class
name|ATSHook
implements|implements
name|ExecuteWithHookContext
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ATSHook
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Object
name|LOCK
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|VERSION
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
name|ExecutorService
name|executor
decl_stmt|;
specifier|private
specifier|static
name|TimelineClient
name|timelineClient
decl_stmt|;
specifier|private
enum|enum
name|EntityTypes
block|{
name|HIVE_QUERY_ID
block|}
empty_stmt|;
specifier|private
enum|enum
name|EventTypes
block|{
name|QUERY_SUBMITTED
block|,
name|QUERY_COMPLETED
block|}
empty_stmt|;
specifier|private
enum|enum
name|OtherInfoTypes
block|{
name|QUERY
block|,
name|STATUS
block|,
name|TEZ
block|,
name|MAPRED
block|,
name|INVOKER_INFO
block|,
name|THREAD_NAME
block|,
name|VERSION
block|,
name|CLIENT_IP_ADDRESS
block|,
name|HIVE_ADDRESS
block|,
name|HIVE_INSTANCE_TYPE
block|,
name|CONF
block|,
name|PERF
block|,   }
empty_stmt|;
specifier|private
enum|enum
name|ExecutionMode
block|{
name|MR
block|,
name|TEZ
block|,
name|LLAP
block|,
name|SPARK
block|,
name|NONE
block|}
empty_stmt|;
specifier|private
enum|enum
name|PrimaryFilterTypes
block|{
name|user
block|,
name|requestuser
block|,
name|operationid
block|,
name|executionmode
block|,
name|tablesread
block|,
name|tableswritten
block|,
name|queue
block|}
empty_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|WAIT_TIME
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|PERF_KEYS
init|=
operator|new
name|String
index|[]
block|{
name|PerfLogger
operator|.
name|PARSE
block|,
name|PerfLogger
operator|.
name|COMPILE
block|,
name|PerfLogger
operator|.
name|ANALYZE
block|,
name|PerfLogger
operator|.
name|OPTIMIZER
block|,
name|PerfLogger
operator|.
name|GET_SPLITS
block|,
name|PerfLogger
operator|.
name|RUN_TASKS
block|,   }
decl_stmt|;
specifier|public
name|ATSHook
parameter_list|()
block|{
synchronized|synchronized
init|(
name|LOCK
init|)
block|{
if|if
condition|(
name|executor
operator|==
literal|null
condition|)
block|{
name|executor
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|(
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"ATS Logger %d"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|yarnConf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|timelineClient
operator|=
name|TimelineClient
operator|.
name|createTimelineClient
argument_list|()
expr_stmt|;
name|timelineClient
operator|.
name|init
argument_list|(
name|yarnConf
argument_list|)
expr_stmt|;
name|timelineClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|ShutdownHookManager
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|executor
operator|.
name|awaitTermination
argument_list|(
name|WAIT_TIME
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|executor
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|/* ignore */
block|}
name|timelineClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Created ATS Hook"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
specifier|final
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|(
name|hookContext
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|QueryState
name|queryState
init|=
name|hookContext
operator|.
name|getQueryState
argument_list|()
decl_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|QueryPlan
name|plan
init|=
name|hookContext
operator|.
name|getQueryPlan
argument_list|()
decl_stmt|;
if|if
condition|(
name|plan
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|queryId
init|=
name|plan
operator|.
name|getQueryId
argument_list|()
decl_stmt|;
name|String
name|opId
init|=
name|hookContext
operator|.
name|getOperationId
argument_list|()
decl_stmt|;
name|long
name|queryStartTime
init|=
name|plan
operator|.
name|getQueryStartTime
argument_list|()
decl_stmt|;
name|String
name|user
init|=
name|hookContext
operator|.
name|getUgi
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|String
name|requestuser
init|=
name|hookContext
operator|.
name|getUserName
argument_list|()
decl_stmt|;
if|if
condition|(
name|hookContext
operator|.
name|getUserName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|requestuser
operator|=
name|hookContext
operator|.
name|getUgi
argument_list|()
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
name|int
name|numMrJobs
init|=
name|Utilities
operator|.
name|getMRTasks
argument_list|(
name|plan
operator|.
name|getRootTasks
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numTezJobs
init|=
name|Utilities
operator|.
name|getTezTasks
argument_list|(
name|plan
operator|.
name|getRootTasks
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numMrJobs
operator|+
name|numTezJobs
operator|<=
literal|0
condition|)
block|{
return|return;
comment|// ignore client only queries
block|}
switch|switch
condition|(
name|hookContext
operator|.
name|getHookType
argument_list|()
condition|)
block|{
case|case
name|PRE_EXEC_HOOK
case|:
name|ExplainConfiguration
name|config
init|=
operator|new
name|ExplainConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setFormatted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ExplainWork
name|work
init|=
operator|new
name|ExplainWork
argument_list|(
literal|null
argument_list|,
comment|// resFile
literal|null
argument_list|,
comment|// pCtx
name|plan
operator|.
name|getRootTasks
argument_list|()
argument_list|,
comment|// RootTasks
name|plan
operator|.
name|getFetchTask
argument_list|()
argument_list|,
comment|// FetchTask
literal|null
argument_list|,
comment|// analyzer
name|config
argument_list|,
comment|//explainConfig
literal|null
comment|// cboInfo
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ExplainTask
name|explain
init|=
operator|(
name|ExplainTask
operator|)
name|TaskFactory
operator|.
name|get
argument_list|(
name|work
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|explain
operator|.
name|initialize
argument_list|(
name|queryState
argument_list|,
name|plan
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|query
init|=
name|plan
operator|.
name|getQueryStr
argument_list|()
decl_stmt|;
name|JSONObject
name|explainPlan
init|=
name|explain
operator|.
name|getJSONPlan
argument_list|(
literal|null
argument_list|,
name|work
argument_list|)
decl_stmt|;
name|String
name|logID
init|=
name|conf
operator|.
name|getLogIdVar
argument_list|(
name|hookContext
operator|.
name|getSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tablesRead
init|=
name|getTablesFromEntitySet
argument_list|(
name|hookContext
operator|.
name|getInputs
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tablesWritten
init|=
name|getTablesFromEntitySet
argument_list|(
name|hookContext
operator|.
name|getOutputs
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|executionMode
init|=
name|getExecutionMode
argument_list|(
name|plan
argument_list|)
operator|.
name|name
argument_list|()
decl_stmt|;
name|String
name|hiveInstanceAddress
init|=
name|hookContext
operator|.
name|getHiveInstanceAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|hiveInstanceAddress
operator|==
literal|null
condition|)
block|{
name|hiveInstanceAddress
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostAddress
argument_list|()
expr_stmt|;
block|}
name|String
name|hiveInstanceType
init|=
name|hookContext
operator|.
name|isHiveServerQuery
argument_list|()
condition|?
literal|"HS2"
else|:
literal|"CLI"
decl_stmt|;
name|fireAndForget
argument_list|(
name|conf
argument_list|,
name|createPreHookEvent
argument_list|(
name|queryId
argument_list|,
name|query
argument_list|,
name|explainPlan
argument_list|,
name|queryStartTime
argument_list|,
name|user
argument_list|,
name|requestuser
argument_list|,
name|numMrJobs
argument_list|,
name|numTezJobs
argument_list|,
name|opId
argument_list|,
name|hookContext
operator|.
name|getIpAddress
argument_list|()
argument_list|,
name|hiveInstanceAddress
argument_list|,
name|hiveInstanceType
argument_list|,
name|logID
argument_list|,
name|hookContext
operator|.
name|getThreadId
argument_list|()
argument_list|,
name|executionMode
argument_list|,
name|tablesRead
argument_list|,
name|tablesWritten
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|POST_EXEC_HOOK
case|:
name|fireAndForget
argument_list|(
name|conf
argument_list|,
name|createPostHookEvent
argument_list|(
name|queryId
argument_list|,
name|currentTime
argument_list|,
name|user
argument_list|,
name|requestuser
argument_list|,
literal|true
argument_list|,
name|opId
argument_list|,
name|hookContext
operator|.
name|getPerfLogger
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|ON_FAILURE_HOOK
case|:
name|fireAndForget
argument_list|(
name|conf
argument_list|,
name|createPostHookEvent
argument_list|(
name|queryId
argument_list|,
name|currentTime
argument_list|,
name|user
argument_list|,
name|requestuser
argument_list|,
literal|false
argument_list|,
name|opId
argument_list|,
name|hookContext
operator|.
name|getPerfLogger
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|//ignore
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to submit plan to ATS: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getTablesFromEntitySet
parameter_list|(
name|Set
argument_list|<
name|?
extends|extends
name|Entity
argument_list|>
name|entities
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entity
name|entity
range|:
name|entities
control|)
block|{
if|if
condition|(
name|entity
operator|.
name|getType
argument_list|()
operator|==
name|Entity
operator|.
name|Type
operator|.
name|TABLE
condition|)
block|{
name|tableNames
operator|.
name|add
argument_list|(
name|entity
operator|.
name|getTable
argument_list|()
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|entity
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tableNames
return|;
block|}
specifier|protected
name|ExecutionMode
name|getExecutionMode
parameter_list|(
name|QueryPlan
name|plan
parameter_list|)
block|{
name|int
name|numMRJobs
init|=
name|Utilities
operator|.
name|getMRTasks
argument_list|(
name|plan
operator|.
name|getRootTasks
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numSparkJobs
init|=
name|Utilities
operator|.
name|getSparkTasks
argument_list|(
name|plan
operator|.
name|getRootTasks
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numTezJobs
init|=
name|Utilities
operator|.
name|getTezTasks
argument_list|(
name|plan
operator|.
name|getRootTasks
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|ExecutionMode
name|mode
init|=
name|ExecutionMode
operator|.
name|MR
decl_stmt|;
if|if
condition|(
literal|0
operator|==
operator|(
name|numMRJobs
operator|+
name|numSparkJobs
operator|+
name|numTezJobs
operator|)
condition|)
block|{
name|mode
operator|=
name|ExecutionMode
operator|.
name|NONE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numSparkJobs
operator|>
literal|0
condition|)
block|{
return|return
name|ExecutionMode
operator|.
name|SPARK
return|;
block|}
elseif|else
if|if
condition|(
name|numTezJobs
operator|>
literal|0
condition|)
block|{
name|mode
operator|=
name|ExecutionMode
operator|.
name|TEZ
expr_stmt|;
comment|// Need to go in and check if any of the tasks is running in LLAP mode.
for|for
control|(
name|TezTask
name|tezTask
range|:
name|Utilities
operator|.
name|getTezTasks
argument_list|(
name|plan
operator|.
name|getRootTasks
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|tezTask
operator|.
name|getWork
argument_list|()
operator|.
name|getLlapMode
argument_list|()
condition|)
block|{
name|mode
operator|=
name|ExecutionMode
operator|.
name|LLAP
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|mode
return|;
block|}
name|TimelineEntity
name|createPreHookEvent
parameter_list|(
name|String
name|queryId
parameter_list|,
name|String
name|query
parameter_list|,
name|JSONObject
name|explainPlan
parameter_list|,
name|long
name|startTime
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|requestuser
parameter_list|,
name|int
name|numMrJobs
parameter_list|,
name|int
name|numTezJobs
parameter_list|,
name|String
name|opId
parameter_list|,
name|String
name|clientIpAddress
parameter_list|,
name|String
name|hiveInstanceAddress
parameter_list|,
name|String
name|hiveInstanceType
parameter_list|,
name|String
name|logID
parameter_list|,
name|String
name|threadId
parameter_list|,
name|String
name|executionMode
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tablesRead
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tablesWritten
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|JSONObject
name|queryObj
init|=
operator|new
name|JSONObject
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|queryObj
operator|.
name|put
argument_list|(
literal|"queryText"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|queryObj
operator|.
name|put
argument_list|(
literal|"queryPlan"
argument_list|,
name|explainPlan
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received pre-hook notification for :"
operator|+
name|queryId
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Otherinfo: "
operator|+
name|queryObj
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Operation id:<"
operator|+
name|opId
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|stripHiddenConfigurations
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|setting
range|:
name|conf
control|)
block|{
name|confMap
operator|.
name|put
argument_list|(
name|setting
operator|.
name|getKey
argument_list|()
argument_list|,
name|setting
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|JSONObject
name|confObj
init|=
operator|new
name|JSONObject
argument_list|(
operator|(
name|Map
operator|)
name|confMap
argument_list|)
decl_stmt|;
name|TimelineEntity
name|atsEntity
init|=
operator|new
name|TimelineEntity
argument_list|()
decl_stmt|;
name|atsEntity
operator|.
name|setEntityId
argument_list|(
name|queryId
argument_list|)
expr_stmt|;
name|atsEntity
operator|.
name|setEntityType
argument_list|(
name|EntityTypes
operator|.
name|HIVE_QUERY_ID
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|atsEntity
operator|.
name|addPrimaryFilter
argument_list|(
name|PrimaryFilterTypes
operator|.
name|user
operator|.
name|name
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|atsEntity
operator|.
name|addPrimaryFilter
argument_list|(
name|PrimaryFilterTypes
operator|.
name|requestuser
operator|.
name|name
argument_list|()
argument_list|,
name|requestuser
argument_list|)
expr_stmt|;
name|atsEntity
operator|.
name|addPrimaryFilter
argument_list|(
name|PrimaryFilterTypes
operator|.
name|executionmode
operator|.
name|name
argument_list|()
argument_list|,
name|executionMode
argument_list|)
expr_stmt|;
name|atsEntity
operator|.
name|addPrimaryFilter
argument_list|(
name|PrimaryFilterTypes
operator|.
name|queue
operator|.
name|name
argument_list|()
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"mapreduce.job.queuename"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|opId
operator|!=
literal|null
condition|)
block|{
name|atsEntity
operator|.
name|addPrimaryFilter
argument_list|(
name|PrimaryFilterTypes
operator|.
name|operationid
operator|.
name|name
argument_list|()
argument_list|,
name|opId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|tabName
range|:
name|tablesRead
control|)
block|{
name|atsEntity
operator|.
name|addPrimaryFilter
argument_list|(
name|PrimaryFilterTypes
operator|.
name|tablesread
operator|.
name|name
argument_list|()
argument_list|,
name|tabName
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|tabName
range|:
name|tablesWritten
control|)
block|{
name|atsEntity
operator|.
name|addPrimaryFilter
argument_list|(
name|PrimaryFilterTypes
operator|.
name|tableswritten
operator|.
name|name
argument_list|()
argument_list|,
name|tabName
argument_list|)
expr_stmt|;
block|}
name|TimelineEvent
name|startEvt
init|=
operator|new
name|TimelineEvent
argument_list|()
decl_stmt|;
name|startEvt
operator|.
name|setEventType
argument_list|(
name|EventTypes
operator|.
name|QUERY_SUBMITTED
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|startEvt
operator|.
name|setTimestamp
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|atsEntity
operator|.
name|addEvent
argument_list|(
name|startEvt
argument_list|)
expr_stmt|;
name|atsEntity
operator|.
name|addOtherInfo
argument_list|(
name|OtherInfoTypes
operator|.
name|QUERY
operator|.
name|name
argument_list|()
argument_list|,
name|queryObj
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|atsEntity
operator|.
name|addOtherInfo
argument_list|(
name|OtherInfoTypes
operator|.
name|TEZ
operator|.
name|name
argument_list|()
argument_list|,
name|numTezJobs
operator|>
literal|0
argument_list|)
expr_stmt|;
name|atsEntity
operator|.
name|addOtherInfo
argument_list|(
name|OtherInfoTypes
operator|.
name|MAPRED
operator|.
name|name
argument_list|()
argument_list|,
name|numMrJobs
operator|>
literal|0
argument_list|)
expr_stmt|;
name|atsEntity
operator|.
name|addOtherInfo
argument_list|(
name|OtherInfoTypes
operator|.
name|INVOKER_INFO
operator|.
name|name
argument_list|()
argument_list|,
name|logID
argument_list|)
expr_stmt|;
name|atsEntity
operator|.
name|addOtherInfo
argument_list|(
name|OtherInfoTypes
operator|.
name|THREAD_NAME
operator|.
name|name
argument_list|()
argument_list|,
name|threadId
argument_list|)
expr_stmt|;
name|atsEntity
operator|.
name|addOtherInfo
argument_list|(
name|OtherInfoTypes
operator|.
name|VERSION
operator|.
name|name
argument_list|()
argument_list|,
name|VERSION
argument_list|)
expr_stmt|;
if|if
condition|(
name|clientIpAddress
operator|!=
literal|null
condition|)
block|{
name|atsEntity
operator|.
name|addOtherInfo
argument_list|(
name|OtherInfoTypes
operator|.
name|CLIENT_IP_ADDRESS
operator|.
name|name
argument_list|()
argument_list|,
name|clientIpAddress
argument_list|)
expr_stmt|;
block|}
name|atsEntity
operator|.
name|addOtherInfo
argument_list|(
name|OtherInfoTypes
operator|.
name|HIVE_ADDRESS
operator|.
name|name
argument_list|()
argument_list|,
name|hiveInstanceAddress
argument_list|)
expr_stmt|;
name|atsEntity
operator|.
name|addOtherInfo
argument_list|(
name|OtherInfoTypes
operator|.
name|HIVE_INSTANCE_TYPE
operator|.
name|name
argument_list|()
argument_list|,
name|hiveInstanceType
argument_list|)
expr_stmt|;
name|atsEntity
operator|.
name|addOtherInfo
argument_list|(
name|OtherInfoTypes
operator|.
name|CONF
operator|.
name|name
argument_list|()
argument_list|,
name|confObj
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|atsEntity
return|;
block|}
name|TimelineEntity
name|createPostHookEvent
parameter_list|(
name|String
name|queryId
parameter_list|,
name|long
name|stopTime
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|requestuser
parameter_list|,
name|boolean
name|success
parameter_list|,
name|String
name|opId
parameter_list|,
name|PerfLogger
name|perfLogger
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Received post-hook notification for :"
operator|+
name|queryId
argument_list|)
expr_stmt|;
name|TimelineEntity
name|atsEntity
init|=
operator|new
name|TimelineEntity
argument_list|()
decl_stmt|;
name|atsEntity
operator|.
name|setEntityId
argument_list|(
name|queryId
argument_list|)
expr_stmt|;
name|atsEntity
operator|.
name|setEntityType
argument_list|(
name|EntityTypes
operator|.
name|HIVE_QUERY_ID
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|atsEntity
operator|.
name|addPrimaryFilter
argument_list|(
name|PrimaryFilterTypes
operator|.
name|user
operator|.
name|name
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|atsEntity
operator|.
name|addPrimaryFilter
argument_list|(
name|PrimaryFilterTypes
operator|.
name|requestuser
operator|.
name|name
argument_list|()
argument_list|,
name|requestuser
argument_list|)
expr_stmt|;
if|if
condition|(
name|opId
operator|!=
literal|null
condition|)
block|{
name|atsEntity
operator|.
name|addPrimaryFilter
argument_list|(
name|PrimaryFilterTypes
operator|.
name|operationid
operator|.
name|name
argument_list|()
argument_list|,
name|opId
argument_list|)
expr_stmt|;
block|}
name|TimelineEvent
name|stopEvt
init|=
operator|new
name|TimelineEvent
argument_list|()
decl_stmt|;
name|stopEvt
operator|.
name|setEventType
argument_list|(
name|EventTypes
operator|.
name|QUERY_COMPLETED
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|stopEvt
operator|.
name|setTimestamp
argument_list|(
name|stopTime
argument_list|)
expr_stmt|;
name|atsEntity
operator|.
name|addEvent
argument_list|(
name|stopEvt
argument_list|)
expr_stmt|;
name|atsEntity
operator|.
name|addOtherInfo
argument_list|(
name|OtherInfoTypes
operator|.
name|STATUS
operator|.
name|name
argument_list|()
argument_list|,
name|success
argument_list|)
expr_stmt|;
comment|// Perf times
name|JSONObject
name|perfObj
init|=
operator|new
name|JSONObject
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|perfLogger
operator|.
name|getEndTimes
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|perfObj
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|perfLogger
operator|.
name|getDuration
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|atsEntity
operator|.
name|addOtherInfo
argument_list|(
name|OtherInfoTypes
operator|.
name|PERF
operator|.
name|name
argument_list|()
argument_list|,
name|perfObj
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|atsEntity
return|;
block|}
specifier|synchronized
name|void
name|fireAndForget
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TimelineEntity
name|entity
parameter_list|)
throws|throws
name|Exception
block|{
name|timelineClient
operator|.
name|putEntities
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

