begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|ptf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|TimestampTZ
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|PTFPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|BoundarySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|BoundaryDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|OrderDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|OrderExpressionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|WindowFrameDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|ValueBoundaryScanner
block|{
name|BoundaryDef
name|start
decl_stmt|,
name|end
decl_stmt|;
specifier|protected
specifier|final
name|boolean
name|nullsLast
decl_stmt|;
specifier|public
name|ValueBoundaryScanner
parameter_list|(
name|BoundaryDef
name|start
parameter_list|,
name|BoundaryDef
name|end
parameter_list|,
name|boolean
name|nullsLast
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
name|this
operator|.
name|nullsLast
operator|=
name|nullsLast
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|int
name|computeStart
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
function_decl|;
specifier|public
specifier|abstract
name|int
name|computeEnd
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
function_decl|;
specifier|public
specifier|static
name|ValueBoundaryScanner
name|getScanner
parameter_list|(
name|WindowFrameDef
name|winFrameDef
parameter_list|,
name|boolean
name|nullsLast
parameter_list|)
throws|throws
name|HiveException
block|{
name|OrderDef
name|orderDef
init|=
name|winFrameDef
operator|.
name|getOrderDef
argument_list|()
decl_stmt|;
name|int
name|numOrders
init|=
name|orderDef
operator|.
name|getExpressions
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numOrders
operator|!=
literal|1
condition|)
block|{
return|return
operator|new
name|MultiValueBoundaryScanner
argument_list|(
name|winFrameDef
operator|.
name|getStart
argument_list|()
argument_list|,
name|winFrameDef
operator|.
name|getEnd
argument_list|()
argument_list|,
name|orderDef
argument_list|,
name|nullsLast
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|SingleValueBoundaryScanner
operator|.
name|getScanner
argument_list|(
name|winFrameDef
operator|.
name|getStart
argument_list|()
argument_list|,
name|winFrameDef
operator|.
name|getEnd
argument_list|()
argument_list|,
name|orderDef
argument_list|,
name|nullsLast
argument_list|)
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|/*  * - starting from the given rowIdx scan in the given direction until a row's expr  * evaluates to an amt that crosses the 'amt' threshold specified in the BoundaryDef.  */
end_comment

begin_class
specifier|abstract
class|class
name|SingleValueBoundaryScanner
extends|extends
name|ValueBoundaryScanner
block|{
name|OrderExpressionDef
name|expressionDef
decl_stmt|;
specifier|public
name|SingleValueBoundaryScanner
parameter_list|(
name|BoundaryDef
name|start
parameter_list|,
name|BoundaryDef
name|end
parameter_list|,
name|OrderExpressionDef
name|expressionDef
parameter_list|,
name|boolean
name|nullsLast
parameter_list|)
block|{
name|super
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|nullsLast
argument_list|)
expr_stmt|;
name|this
operator|.
name|expressionDef
operator|=
name|expressionDef
expr_stmt|;
block|}
comment|/* |  Use | Boundary1.type | Boundary1. amt | Sort Key | Order | Behavior                          | | Case |                |                |          |       |                                   | |------+----------------+----------------+----------+-------+-----------------------------------| |   1. | PRECEDING      | UNB            | ANY      | ANY   | start = 0                         | |   2. | PRECEDING      | unsigned int   | NULL     | ASC   | start = 0                         | |   3. |                |                |          | DESC  | scan backwards to row R2          | |      |                |                |          |       | such that R2.sk is not null       | |      |                |                |          |       | start = R2.idx + 1                | |   4. | PRECEDING      | unsigned int   | not NULL | DESC  | scan backwards until row R2       | |      |                |                |          |       | such that R2.sk - R.sk> amt      | |      |                |                |          |       | start = R2.idx + 1                | |   5. | PRECEDING      | unsigned int   | not NULL | ASC   | scan backward until row R2        | |      |                |                |          |       | such that R.sk - R2.sk> bnd1.amt | |      |                |                |          |       | start = R2.idx + 1                | |   6. | CURRENT ROW    |                | NULL     | ANY   | scan backwards until row R2       | |      |                |                |          |       | such that R2.sk is not null       | |      |                |                |          |       | start = R2.idx + 1                | |   7. | CURRENT ROW    |                | not NULL | ANY   | scan backwards until row R2       | |      |                |                |          |       | such R2.sk != R.sk                | |      |                |                |          |       | start = R2.idx + 1                | |   8. | FOLLOWING      | UNB            | ANY      | ANY   | Error                             | |   9. | FOLLOWING      | unsigned int   | NULL     | DESC  | start = partition.size            | |  10. |                |                |          | ASC   | scan forward until R2             | |      |                |                |          |       | such that R2.sk is not null       | |      |                |                |          |       | start = R2.idx                    | |  11. | FOLLOWING      | unsigned int   | not NULL | DESC  | scan forward until row R2         | |      |                |                |          |       | such that R.sk - R2.sk> amt      | |      |                |                |          |       | start = R2.idx                    | |  12. |                |                |          | ASC   | scan forward until row R2         | |      |                |                |          |       | such that R2.sk - R.sk> amt      | |------+----------------+----------------+----------+-------+-----------------------------------|    */
annotation|@
name|Override
specifier|public
name|int
name|computeStart
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
switch|switch
condition|(
name|start
operator|.
name|getDirection
argument_list|()
condition|)
block|{
case|case
name|PRECEDING
case|:
return|return
name|computeStartPreceding
argument_list|(
name|rowIdx
argument_list|,
name|p
argument_list|)
return|;
case|case
name|CURRENT
case|:
return|return
name|computeStartCurrentRow
argument_list|(
name|rowIdx
argument_list|,
name|p
argument_list|)
return|;
case|case
name|FOLLOWING
case|:
default|default:
return|return
name|computeStartFollowing
argument_list|(
name|rowIdx
argument_list|,
name|p
argument_list|)
return|;
block|}
block|}
specifier|protected
name|int
name|computeStartPreceding
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|amt
init|=
name|start
operator|.
name|getAmt
argument_list|()
decl_stmt|;
comment|// Use Case 1.
if|if
condition|(
name|amt
operator|==
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
condition|)
block|{
return|return
literal|0
return|;
block|}
name|Object
name|sortKey
init|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|rowIdx
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sortKey
operator|==
literal|null
condition|)
block|{
comment|// Use Case 3.
if|if
condition|(
name|nullsLast
operator|||
name|expressionDef
operator|.
name|getOrder
argument_list|()
operator|==
name|Order
operator|.
name|DESC
condition|)
block|{
while|while
condition|(
name|sortKey
operator|==
literal|null
operator|&&
name|rowIdx
operator|>=
literal|0
condition|)
block|{
operator|--
name|rowIdx
expr_stmt|;
if|if
condition|(
name|rowIdx
operator|>=
literal|0
condition|)
block|{
name|sortKey
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|rowIdx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rowIdx
operator|+
literal|1
return|;
block|}
else|else
block|{
comment|// Use Case 2.
if|if
condition|(
name|expressionDef
operator|.
name|getOrder
argument_list|()
operator|==
name|Order
operator|.
name|ASC
condition|)
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
name|Object
name|rowVal
init|=
name|sortKey
decl_stmt|;
name|int
name|r
init|=
name|rowIdx
decl_stmt|;
comment|// Use Case 4.
if|if
condition|(
name|expressionDef
operator|.
name|getOrder
argument_list|()
operator|==
name|Order
operator|.
name|DESC
condition|)
block|{
while|while
condition|(
name|r
operator|>=
literal|0
operator|&&
operator|!
name|isDistanceGreater
argument_list|(
name|rowVal
argument_list|,
name|sortKey
argument_list|,
name|amt
argument_list|)
condition|)
block|{
name|r
operator|--
expr_stmt|;
if|if
condition|(
name|r
operator|>=
literal|0
condition|)
block|{
name|rowVal
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
operator|+
literal|1
return|;
block|}
else|else
block|{
comment|// Use Case 5.
while|while
condition|(
name|r
operator|>=
literal|0
operator|&&
operator|!
name|isDistanceGreater
argument_list|(
name|sortKey
argument_list|,
name|rowVal
argument_list|,
name|amt
argument_list|)
condition|)
block|{
name|r
operator|--
expr_stmt|;
if|if
condition|(
name|r
operator|>=
literal|0
condition|)
block|{
name|rowVal
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
operator|+
literal|1
return|;
block|}
block|}
specifier|protected
name|int
name|computeStartCurrentRow
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|sortKey
init|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|rowIdx
argument_list|)
argument_list|)
decl_stmt|;
comment|// Use Case 6.
if|if
condition|(
name|sortKey
operator|==
literal|null
condition|)
block|{
while|while
condition|(
name|sortKey
operator|==
literal|null
operator|&&
name|rowIdx
operator|>=
literal|0
condition|)
block|{
operator|--
name|rowIdx
expr_stmt|;
if|if
condition|(
name|rowIdx
operator|>=
literal|0
condition|)
block|{
name|sortKey
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|rowIdx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rowIdx
operator|+
literal|1
return|;
block|}
name|Object
name|rowVal
init|=
name|sortKey
decl_stmt|;
name|int
name|r
init|=
name|rowIdx
decl_stmt|;
comment|// Use Case 7.
while|while
condition|(
name|r
operator|>=
literal|0
operator|&&
name|isEqual
argument_list|(
name|rowVal
argument_list|,
name|sortKey
argument_list|)
condition|)
block|{
name|r
operator|--
expr_stmt|;
if|if
condition|(
name|r
operator|>=
literal|0
condition|)
block|{
name|rowVal
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
operator|+
literal|1
return|;
block|}
specifier|protected
name|int
name|computeStartFollowing
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|amt
init|=
name|start
operator|.
name|getAmt
argument_list|()
decl_stmt|;
name|Object
name|sortKey
init|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|rowIdx
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|rowVal
init|=
name|sortKey
decl_stmt|;
name|int
name|r
init|=
name|rowIdx
decl_stmt|;
if|if
condition|(
name|sortKey
operator|==
literal|null
condition|)
block|{
comment|// Use Case 9.
if|if
condition|(
name|nullsLast
operator|||
name|expressionDef
operator|.
name|getOrder
argument_list|()
operator|==
name|Order
operator|.
name|DESC
condition|)
block|{
return|return
name|p
operator|.
name|size
argument_list|()
return|;
block|}
else|else
block|{
comment|// Use Case 10.
while|while
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
operator|&&
name|rowVal
operator|==
literal|null
condition|)
block|{
name|r
operator|++
expr_stmt|;
if|if
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
condition|)
block|{
name|rowVal
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
block|}
comment|// Use Case 11.
if|if
condition|(
name|expressionDef
operator|.
name|getOrder
argument_list|()
operator|==
name|Order
operator|.
name|DESC
condition|)
block|{
while|while
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
operator|&&
operator|!
name|isDistanceGreater
argument_list|(
name|sortKey
argument_list|,
name|rowVal
argument_list|,
name|amt
argument_list|)
condition|)
block|{
name|r
operator|++
expr_stmt|;
if|if
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
condition|)
block|{
name|rowVal
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
else|else
block|{
comment|// Use Case 12.
while|while
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
operator|&&
operator|!
name|isDistanceGreater
argument_list|(
name|rowVal
argument_list|,
name|sortKey
argument_list|,
name|amt
argument_list|)
condition|)
block|{
name|r
operator|++
expr_stmt|;
if|if
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
condition|)
block|{
name|rowVal
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
block|}
comment|/* |  Use | Boundary2.type | Boundary2.amt | Sort Key | Order | Behavior                          | | Case |                |               |          |       |                                   | |------+----------------+---------------+----------+-------+-----------------------------------| |   1. | PRECEDING      | UNB           | ANY      | ANY   | Error                             | |   2. | PRECEDING      | unsigned int  | NULL     | DESC  | end = partition.size()            | |   3. |                |               |          | ASC   | end = 0                           | |   4. | PRECEDING      | unsigned int  | not null | DESC  | scan backward until row R2        | |      |                |               |          |       | such that R2.sk - R.sk> bnd.amt  | |      |                |               |          |       | end = R2.idx + 1                  | |   5. | PRECEDING      | unsigned int  | not null | ASC   | scan backward until row R2        | |      |                |               |          |       | such that R.sk -  R2.sk> bnd.amt | |      |                |               |          |       | end = R2.idx + 1                  | |   6. | CURRENT ROW    |               | NULL     | ANY   | scan forward until row R2         | |      |                |               |          |       | such that R2.sk is not null       | |      |                |               |          |       | end = R2.idx                      | |   7. | CURRENT ROW    |               | not null | ANY   | scan forward until row R2         | |      |                |               |          |       | such that R2.sk != R.sk           | |      |                |               |          |       | end = R2.idx                      | |   8. | FOLLOWING      | UNB           | ANY      | ANY   | end = partition.size()            | |   9. | FOLLOWING      | unsigned int  | NULL     | DESC  | end = partition.size()            | |  10. |                |               |          | ASC   | scan forward until row R2         | |      |                |               |          |       | such that R2.sk is not null       | |      |                |               |          |       | end = R2.idx                      | |  11. | FOLLOWING      | unsigned int  | not NULL | DESC  | scan forward until row R2         | |      |                |               |          |       | such R.sk - R2.sk> bnd.amt       | |      |                |               |          |       | end = R2.idx                      | |  12. |                |               |          | ASC   | scan forward until row R2         | |      |                |               |          |       | such R2.sk - R2.sk> bnd.amt      | |      |                |               |          |       | end = R2.idx                      | |------+----------------+---------------+----------+-------+-----------------------------------|    */
annotation|@
name|Override
specifier|public
name|int
name|computeEnd
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
switch|switch
condition|(
name|end
operator|.
name|getDirection
argument_list|()
condition|)
block|{
case|case
name|PRECEDING
case|:
return|return
name|computeEndPreceding
argument_list|(
name|rowIdx
argument_list|,
name|p
argument_list|)
return|;
case|case
name|CURRENT
case|:
return|return
name|computeEndCurrentRow
argument_list|(
name|rowIdx
argument_list|,
name|p
argument_list|)
return|;
case|case
name|FOLLOWING
case|:
default|default:
return|return
name|computeEndFollowing
argument_list|(
name|rowIdx
argument_list|,
name|p
argument_list|)
return|;
block|}
block|}
specifier|protected
name|int
name|computeEndPreceding
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|amt
init|=
name|end
operator|.
name|getAmt
argument_list|()
decl_stmt|;
comment|// Use Case 1.
comment|// amt == UNBOUNDED, is caught during translation
name|Object
name|sortKey
init|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|rowIdx
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sortKey
operator|==
literal|null
condition|)
block|{
comment|// Use Case 2.
if|if
condition|(
name|nullsLast
operator|||
name|expressionDef
operator|.
name|getOrder
argument_list|()
operator|==
name|Order
operator|.
name|DESC
condition|)
block|{
return|return
name|p
operator|.
name|size
argument_list|()
return|;
block|}
else|else
block|{
comment|// Use Case 3.
return|return
literal|0
return|;
block|}
block|}
name|Object
name|rowVal
init|=
name|sortKey
decl_stmt|;
name|int
name|r
init|=
name|rowIdx
decl_stmt|;
comment|// Use Case 4.
if|if
condition|(
name|expressionDef
operator|.
name|getOrder
argument_list|()
operator|==
name|Order
operator|.
name|DESC
condition|)
block|{
while|while
condition|(
name|r
operator|>=
literal|0
operator|&&
operator|!
name|isDistanceGreater
argument_list|(
name|rowVal
argument_list|,
name|sortKey
argument_list|,
name|amt
argument_list|)
condition|)
block|{
name|r
operator|--
expr_stmt|;
if|if
condition|(
name|r
operator|>=
literal|0
condition|)
block|{
name|rowVal
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
operator|+
literal|1
return|;
block|}
else|else
block|{
comment|// Use Case 5.
while|while
condition|(
name|r
operator|>=
literal|0
operator|&&
operator|!
name|isDistanceGreater
argument_list|(
name|sortKey
argument_list|,
name|rowVal
argument_list|,
name|amt
argument_list|)
condition|)
block|{
name|r
operator|--
expr_stmt|;
if|if
condition|(
name|r
operator|>=
literal|0
condition|)
block|{
name|rowVal
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
operator|+
literal|1
return|;
block|}
block|}
specifier|protected
name|int
name|computeEndCurrentRow
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|sortKey
init|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|rowIdx
argument_list|)
argument_list|)
decl_stmt|;
comment|// Use Case 6.
if|if
condition|(
name|sortKey
operator|==
literal|null
condition|)
block|{
while|while
condition|(
name|sortKey
operator|==
literal|null
operator|&&
name|rowIdx
operator|<
name|p
operator|.
name|size
argument_list|()
condition|)
block|{
operator|++
name|rowIdx
expr_stmt|;
if|if
condition|(
name|rowIdx
operator|<
name|p
operator|.
name|size
argument_list|()
condition|)
block|{
name|sortKey
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|rowIdx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rowIdx
return|;
block|}
name|Object
name|rowVal
init|=
name|sortKey
decl_stmt|;
name|int
name|r
init|=
name|rowIdx
decl_stmt|;
comment|// Use Case 7.
while|while
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
operator|&&
name|isEqual
argument_list|(
name|sortKey
argument_list|,
name|rowVal
argument_list|)
condition|)
block|{
name|r
operator|++
expr_stmt|;
if|if
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
condition|)
block|{
name|rowVal
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
specifier|protected
name|int
name|computeEndFollowing
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|amt
init|=
name|end
operator|.
name|getAmt
argument_list|()
decl_stmt|;
comment|// Use Case 8.
if|if
condition|(
name|amt
operator|==
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
condition|)
block|{
return|return
name|p
operator|.
name|size
argument_list|()
return|;
block|}
name|Object
name|sortKey
init|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|rowIdx
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|rowVal
init|=
name|sortKey
decl_stmt|;
name|int
name|r
init|=
name|rowIdx
decl_stmt|;
if|if
condition|(
name|sortKey
operator|==
literal|null
condition|)
block|{
comment|// Use Case 9.
if|if
condition|(
name|nullsLast
operator|||
name|expressionDef
operator|.
name|getOrder
argument_list|()
operator|==
name|Order
operator|.
name|DESC
condition|)
block|{
return|return
name|p
operator|.
name|size
argument_list|()
return|;
block|}
else|else
block|{
comment|// Use Case 10.
while|while
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
operator|&&
name|rowVal
operator|==
literal|null
condition|)
block|{
name|r
operator|++
expr_stmt|;
if|if
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
condition|)
block|{
name|rowVal
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
block|}
comment|// Use Case 11.
if|if
condition|(
name|expressionDef
operator|.
name|getOrder
argument_list|()
operator|==
name|Order
operator|.
name|DESC
condition|)
block|{
while|while
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
operator|&&
operator|!
name|isDistanceGreater
argument_list|(
name|sortKey
argument_list|,
name|rowVal
argument_list|,
name|amt
argument_list|)
condition|)
block|{
name|r
operator|++
expr_stmt|;
if|if
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
condition|)
block|{
name|rowVal
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
else|else
block|{
comment|// Use Case 12.
while|while
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
operator|&&
operator|!
name|isDistanceGreater
argument_list|(
name|rowVal
argument_list|,
name|sortKey
argument_list|,
name|amt
argument_list|)
condition|)
block|{
name|r
operator|++
expr_stmt|;
if|if
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
condition|)
block|{
name|rowVal
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
block|}
specifier|public
name|Object
name|computeValue
parameter_list|(
name|Object
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|o
init|=
name|expressionDef
operator|.
name|getExprEvaluator
argument_list|()
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
decl_stmt|;
return|return
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|o
argument_list|,
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Checks if the distance of v2 to v1 is greater than the given amt.    * @return True if the value of v1 - v2 is greater than amt or either value is null.    */
specifier|public
specifier|abstract
name|boolean
name|isDistanceGreater
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|,
name|int
name|amt
parameter_list|)
function_decl|;
comment|/**    * Checks if the values of v1 or v2 are the same.    * @return True if both values are the same or both are nulls.    */
specifier|public
specifier|abstract
name|boolean
name|isEqual
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|)
function_decl|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"incomplete-switch"
argument_list|)
specifier|public
specifier|static
name|SingleValueBoundaryScanner
name|getScanner
parameter_list|(
name|BoundaryDef
name|start
parameter_list|,
name|BoundaryDef
name|end
parameter_list|,
name|OrderDef
name|orderDef
parameter_list|,
name|boolean
name|nullsLast
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|orderDef
operator|.
name|getExpressions
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal error: initializing SingleValueBoundaryScanner with"
operator|+
literal|" multiple expression for sorting"
argument_list|)
throw|;
block|}
name|OrderExpressionDef
name|exprDef
init|=
name|orderDef
operator|.
name|getExpressions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PrimitiveObjectInspector
name|pOI
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|exprDef
operator|.
name|getOI
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|pOI
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BYTE
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|SHORT
case|:
return|return
operator|new
name|LongValueBoundaryScanner
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|exprDef
argument_list|,
name|nullsLast
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|TimestampValueBoundaryScanner
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|exprDef
argument_list|,
name|nullsLast
argument_list|)
return|;
case|case
name|TIMESTAMPLOCALTZ
case|:
return|return
operator|new
name|TimestampLocalTZValueBoundaryScanner
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|exprDef
argument_list|,
name|nullsLast
argument_list|)
return|;
case|case
name|DOUBLE
case|:
case|case
name|FLOAT
case|:
return|return
operator|new
name|DoubleValueBoundaryScanner
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|exprDef
argument_list|,
name|nullsLast
argument_list|)
return|;
case|case
name|DECIMAL
case|:
return|return
operator|new
name|HiveDecimalValueBoundaryScanner
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|exprDef
argument_list|,
name|nullsLast
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
operator|new
name|DateValueBoundaryScanner
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|exprDef
argument_list|,
name|nullsLast
argument_list|)
return|;
case|case
name|STRING
case|:
return|return
operator|new
name|StringValueBoundaryScanner
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|exprDef
argument_list|,
name|nullsLast
argument_list|)
return|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Internal Error: attempt to setup a Window for datatype %s"
argument_list|,
name|pOI
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
end_class

begin_class
class|class
name|LongValueBoundaryScanner
extends|extends
name|SingleValueBoundaryScanner
block|{
specifier|public
name|LongValueBoundaryScanner
parameter_list|(
name|BoundaryDef
name|start
parameter_list|,
name|BoundaryDef
name|end
parameter_list|,
name|OrderExpressionDef
name|expressionDef
parameter_list|,
name|boolean
name|nullsLast
parameter_list|)
block|{
name|super
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|expressionDef
argument_list|,
name|nullsLast
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDistanceGreater
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|,
name|int
name|amt
parameter_list|)
block|{
if|if
condition|(
name|v1
operator|!=
literal|null
operator|&&
name|v2
operator|!=
literal|null
condition|)
block|{
name|long
name|l1
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getLong
argument_list|(
name|v1
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|l2
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getLong
argument_list|(
name|v2
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|l1
operator|-
name|l2
operator|)
operator|>
name|amt
return|;
block|}
return|return
name|v1
operator|!=
literal|null
operator|||
name|v2
operator|!=
literal|null
return|;
comment|// True if only one value is null
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEqual
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|)
block|{
if|if
condition|(
name|v1
operator|!=
literal|null
operator|&&
name|v2
operator|!=
literal|null
condition|)
block|{
name|long
name|l1
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getLong
argument_list|(
name|v1
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|l2
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getLong
argument_list|(
name|v2
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|l1
operator|==
name|l2
return|;
block|}
return|return
name|v1
operator|==
literal|null
operator|&&
name|v2
operator|==
literal|null
return|;
comment|// True if both are null
block|}
block|}
end_class

begin_class
class|class
name|DoubleValueBoundaryScanner
extends|extends
name|SingleValueBoundaryScanner
block|{
specifier|public
name|DoubleValueBoundaryScanner
parameter_list|(
name|BoundaryDef
name|start
parameter_list|,
name|BoundaryDef
name|end
parameter_list|,
name|OrderExpressionDef
name|expressionDef
parameter_list|,
name|boolean
name|nullsLast
parameter_list|)
block|{
name|super
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|expressionDef
argument_list|,
name|nullsLast
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDistanceGreater
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|,
name|int
name|amt
parameter_list|)
block|{
if|if
condition|(
name|v1
operator|!=
literal|null
operator|&&
name|v2
operator|!=
literal|null
condition|)
block|{
name|double
name|d1
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getDouble
argument_list|(
name|v1
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|d2
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getDouble
argument_list|(
name|v2
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|d1
operator|-
name|d2
operator|)
operator|>
name|amt
return|;
block|}
return|return
name|v1
operator|!=
literal|null
operator|||
name|v2
operator|!=
literal|null
return|;
comment|// True if only one value is null
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEqual
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|)
block|{
if|if
condition|(
name|v1
operator|!=
literal|null
operator|&&
name|v2
operator|!=
literal|null
condition|)
block|{
name|double
name|d1
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getDouble
argument_list|(
name|v1
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|d2
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getDouble
argument_list|(
name|v2
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|d1
operator|==
name|d2
return|;
block|}
return|return
name|v1
operator|==
literal|null
operator|&&
name|v2
operator|==
literal|null
return|;
comment|// True if both are null
block|}
block|}
end_class

begin_class
class|class
name|HiveDecimalValueBoundaryScanner
extends|extends
name|SingleValueBoundaryScanner
block|{
specifier|public
name|HiveDecimalValueBoundaryScanner
parameter_list|(
name|BoundaryDef
name|start
parameter_list|,
name|BoundaryDef
name|end
parameter_list|,
name|OrderExpressionDef
name|expressionDef
parameter_list|,
name|boolean
name|nullsLast
parameter_list|)
block|{
name|super
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|expressionDef
argument_list|,
name|nullsLast
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDistanceGreater
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|,
name|int
name|amt
parameter_list|)
block|{
name|HiveDecimal
name|d1
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getHiveDecimal
argument_list|(
name|v1
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
name|HiveDecimal
name|d2
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getHiveDecimal
argument_list|(
name|v2
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d1
operator|!=
literal|null
operator|&&
name|d2
operator|!=
literal|null
condition|)
block|{
return|return
name|d1
operator|.
name|subtract
argument_list|(
name|d2
argument_list|)
operator|.
name|intValue
argument_list|()
operator|>
name|amt
return|;
comment|// TODO: lossy conversion!
block|}
return|return
name|d1
operator|!=
literal|null
operator|||
name|d2
operator|!=
literal|null
return|;
comment|// True if only one value is null
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEqual
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|)
block|{
name|HiveDecimal
name|d1
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getHiveDecimal
argument_list|(
name|v1
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
name|HiveDecimal
name|d2
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getHiveDecimal
argument_list|(
name|v2
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d1
operator|!=
literal|null
operator|&&
name|d2
operator|!=
literal|null
condition|)
block|{
return|return
name|d1
operator|.
name|equals
argument_list|(
name|d2
argument_list|)
return|;
block|}
return|return
name|d1
operator|==
literal|null
operator|&&
name|d2
operator|==
literal|null
return|;
comment|// True if both are null
block|}
block|}
end_class

begin_class
class|class
name|DateValueBoundaryScanner
extends|extends
name|SingleValueBoundaryScanner
block|{
specifier|public
name|DateValueBoundaryScanner
parameter_list|(
name|BoundaryDef
name|start
parameter_list|,
name|BoundaryDef
name|end
parameter_list|,
name|OrderExpressionDef
name|expressionDef
parameter_list|,
name|boolean
name|nullsLast
parameter_list|)
block|{
name|super
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|expressionDef
argument_list|,
name|nullsLast
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDistanceGreater
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|,
name|int
name|amt
parameter_list|)
block|{
name|Date
name|l1
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getDate
argument_list|(
name|v1
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
name|Date
name|l2
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getDate
argument_list|(
name|v2
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|l1
operator|!=
literal|null
operator|&&
name|l2
operator|!=
literal|null
condition|)
block|{
return|return
call|(
name|double
call|)
argument_list|(
name|l1
operator|.
name|toEpochMilli
argument_list|()
operator|-
name|l2
operator|.
name|toEpochMilli
argument_list|()
argument_list|)
operator|/
literal|1000
operator|>
operator|(
name|long
operator|)
name|amt
operator|*
literal|24
operator|*
literal|3600
return|;
comment|// Converts amt days to milliseconds
block|}
return|return
name|l1
operator|!=
name|l2
return|;
comment|// True if only one date is null
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEqual
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|)
block|{
name|Date
name|l1
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getDate
argument_list|(
name|v1
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
name|Date
name|l2
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getDate
argument_list|(
name|v2
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|l1
operator|==
literal|null
operator|&&
name|l2
operator|==
literal|null
operator|)
operator|||
operator|(
name|l1
operator|!=
literal|null
operator|&&
name|l1
operator|.
name|equals
argument_list|(
name|l2
argument_list|)
operator|)
return|;
block|}
block|}
end_class

begin_class
class|class
name|TimestampValueBoundaryScanner
extends|extends
name|SingleValueBoundaryScanner
block|{
specifier|public
name|TimestampValueBoundaryScanner
parameter_list|(
name|BoundaryDef
name|start
parameter_list|,
name|BoundaryDef
name|end
parameter_list|,
name|OrderExpressionDef
name|expressionDef
parameter_list|,
name|boolean
name|nullsLast
parameter_list|)
block|{
name|super
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|expressionDef
argument_list|,
name|nullsLast
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDistanceGreater
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|,
name|int
name|amt
parameter_list|)
block|{
if|if
condition|(
name|v1
operator|!=
literal|null
operator|&&
name|v2
operator|!=
literal|null
condition|)
block|{
name|long
name|l1
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getTimestamp
argument_list|(
name|v1
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
operator|.
name|toEpochMilli
argument_list|()
decl_stmt|;
name|long
name|l2
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getTimestamp
argument_list|(
name|v2
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
operator|.
name|toEpochMilli
argument_list|()
decl_stmt|;
return|return
call|(
name|double
call|)
argument_list|(
name|l1
operator|-
name|l2
argument_list|)
operator|/
literal|1000
operator|>
name|amt
return|;
comment|// TODO: lossy conversion, distance is considered in seconds
block|}
return|return
name|v1
operator|!=
literal|null
operator|||
name|v2
operator|!=
literal|null
return|;
comment|// True if only one value is null
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEqual
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|)
block|{
if|if
condition|(
name|v1
operator|!=
literal|null
operator|&&
name|v2
operator|!=
literal|null
condition|)
block|{
name|Timestamp
name|l1
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getTimestamp
argument_list|(
name|v1
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
name|Timestamp
name|l2
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getTimestamp
argument_list|(
name|v2
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|l1
operator|.
name|equals
argument_list|(
name|l2
argument_list|)
return|;
block|}
return|return
name|v1
operator|==
literal|null
operator|&&
name|v2
operator|==
literal|null
return|;
comment|// True if both are null
block|}
block|}
end_class

begin_class
class|class
name|TimestampLocalTZValueBoundaryScanner
extends|extends
name|SingleValueBoundaryScanner
block|{
specifier|public
name|TimestampLocalTZValueBoundaryScanner
parameter_list|(
name|BoundaryDef
name|start
parameter_list|,
name|BoundaryDef
name|end
parameter_list|,
name|OrderExpressionDef
name|expressionDef
parameter_list|,
name|boolean
name|nullsLast
parameter_list|)
block|{
name|super
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|expressionDef
argument_list|,
name|nullsLast
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDistanceGreater
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|,
name|int
name|amt
parameter_list|)
block|{
if|if
condition|(
name|v1
operator|!=
literal|null
operator|&&
name|v2
operator|!=
literal|null
condition|)
block|{
name|long
name|l1
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getTimestampLocalTZ
argument_list|(
name|v1
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|,
literal|null
argument_list|)
operator|.
name|getEpochSecond
argument_list|()
decl_stmt|;
name|long
name|l2
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getTimestampLocalTZ
argument_list|(
name|v2
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|,
literal|null
argument_list|)
operator|.
name|getEpochSecond
argument_list|()
decl_stmt|;
return|return
operator|(
name|l1
operator|-
name|l2
operator|)
operator|>
name|amt
return|;
comment|// TODO: lossy conversion, distance is considered seconds similar to timestamp
block|}
return|return
name|v1
operator|!=
literal|null
operator|||
name|v2
operator|!=
literal|null
return|;
comment|// True if only one value is null
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEqual
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|)
block|{
if|if
condition|(
name|v1
operator|!=
literal|null
operator|&&
name|v2
operator|!=
literal|null
condition|)
block|{
name|TimestampTZ
name|l1
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getTimestampLocalTZ
argument_list|(
name|v1
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TimestampTZ
name|l2
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getTimestampLocalTZ
argument_list|(
name|v2
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|l1
operator|.
name|equals
argument_list|(
name|l2
argument_list|)
return|;
block|}
return|return
name|v1
operator|==
literal|null
operator|&&
name|v2
operator|==
literal|null
return|;
comment|// True if both are null
block|}
block|}
end_class

begin_class
class|class
name|StringValueBoundaryScanner
extends|extends
name|SingleValueBoundaryScanner
block|{
specifier|public
name|StringValueBoundaryScanner
parameter_list|(
name|BoundaryDef
name|start
parameter_list|,
name|BoundaryDef
name|end
parameter_list|,
name|OrderExpressionDef
name|expressionDef
parameter_list|,
name|boolean
name|nullsLast
parameter_list|)
block|{
name|super
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|expressionDef
argument_list|,
name|nullsLast
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDistanceGreater
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|,
name|int
name|amt
parameter_list|)
block|{
name|String
name|s1
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getString
argument_list|(
name|v1
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|s2
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getString
argument_list|(
name|v2
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|s1
operator|!=
literal|null
operator|&&
name|s2
operator|!=
literal|null
operator|&&
name|s1
operator|.
name|compareTo
argument_list|(
name|s2
argument_list|)
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEqual
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|)
block|{
name|String
name|s1
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getString
argument_list|(
name|v1
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|s2
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getString
argument_list|(
name|v2
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|s1
operator|==
literal|null
operator|&&
name|s2
operator|==
literal|null
operator|)
operator|||
operator|(
name|s1
operator|!=
literal|null
operator|&&
name|s1
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
operator|)
return|;
block|}
block|}
end_class

begin_comment
comment|/*  */
end_comment

begin_class
class|class
name|MultiValueBoundaryScanner
extends|extends
name|ValueBoundaryScanner
block|{
name|OrderDef
name|orderDef
decl_stmt|;
specifier|public
name|MultiValueBoundaryScanner
parameter_list|(
name|BoundaryDef
name|start
parameter_list|,
name|BoundaryDef
name|end
parameter_list|,
name|OrderDef
name|orderDef
parameter_list|,
name|boolean
name|nullsLast
parameter_list|)
block|{
name|super
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|nullsLast
argument_list|)
expr_stmt|;
name|this
operator|.
name|orderDef
operator|=
name|orderDef
expr_stmt|;
block|}
comment|/* |------+----------------+----------------+----------+-------+-----------------------------------| | Use  | Boundary1.type | Boundary1. amt | Sort Key | Order | Behavior                          | | Case |                |                |          |       |                                   | |------+----------------+----------------+----------+-------+-----------------------------------| |   1. | PRECEDING      | UNB            | ANY      | ANY   | start = 0                         | |   2. | CURRENT ROW    |                | ANY      | ANY   | scan backwards until row R2       | |      |                |                |          |       | such R2.sk != R.sk                | |      |                |                |          |       | start = R2.idx + 1                | |------+----------------+----------------+----------+-------+-----------------------------------|    */
annotation|@
name|Override
specifier|public
name|int
name|computeStart
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
switch|switch
condition|(
name|start
operator|.
name|getDirection
argument_list|()
condition|)
block|{
case|case
name|PRECEDING
case|:
return|return
name|computeStartPreceding
argument_list|(
name|rowIdx
argument_list|,
name|p
argument_list|)
return|;
case|case
name|CURRENT
case|:
return|return
name|computeStartCurrentRow
argument_list|(
name|rowIdx
argument_list|,
name|p
argument_list|)
return|;
case|case
name|FOLLOWING
case|:
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"FOLLOWING not allowed for starting RANGE with multiple expressions in ORDER BY"
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|int
name|computeStartPreceding
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|amt
init|=
name|start
operator|.
name|getAmt
argument_list|()
decl_stmt|;
if|if
condition|(
name|amt
operator|==
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
condition|)
block|{
return|return
literal|0
return|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"PRECEDING needs UNBOUNDED for RANGE with multiple expressions in ORDER BY"
argument_list|)
throw|;
block|}
specifier|protected
name|int
name|computeStartCurrentRow
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
index|[]
name|sortKey
init|=
name|computeValues
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|rowIdx
argument_list|)
argument_list|)
decl_stmt|;
name|Object
index|[]
name|rowVal
init|=
name|sortKey
decl_stmt|;
name|int
name|r
init|=
name|rowIdx
decl_stmt|;
while|while
condition|(
name|r
operator|>=
literal|0
operator|&&
name|isEqual
argument_list|(
name|rowVal
argument_list|,
name|sortKey
argument_list|)
condition|)
block|{
name|r
operator|--
expr_stmt|;
if|if
condition|(
name|r
operator|>=
literal|0
condition|)
block|{
name|rowVal
operator|=
name|computeValues
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
operator|+
literal|1
return|;
block|}
comment|/* |------+----------------+---------------+----------+-------+-----------------------------------| | Use  | Boundary2.type | Boundary2.amt | Sort Key | Order | Behavior                          | | Case |                |               |          |       |                                   | |------+----------------+---------------+----------+-------+-----------------------------------| |   1. | CURRENT ROW    |               | ANY      | ANY   | scan forward until row R2         | |      |                |               |          |       | such that R2.sk != R.sk           | |      |                |               |          |       | end = R2.idx                      | |   2. | FOLLOWING      | UNB           | ANY      | ANY   | end = partition.size()            | |------+----------------+---------------+----------+-------+-----------------------------------|    */
annotation|@
name|Override
specifier|public
name|int
name|computeEnd
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
switch|switch
condition|(
name|end
operator|.
name|getDirection
argument_list|()
condition|)
block|{
case|case
name|PRECEDING
case|:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"PRECEDING not allowed for finishing RANGE with multiple expressions in ORDER BY"
argument_list|)
throw|;
case|case
name|CURRENT
case|:
return|return
name|computeEndCurrentRow
argument_list|(
name|rowIdx
argument_list|,
name|p
argument_list|)
return|;
case|case
name|FOLLOWING
case|:
default|default:
return|return
name|computeEndFollowing
argument_list|(
name|rowIdx
argument_list|,
name|p
argument_list|)
return|;
block|}
block|}
specifier|protected
name|int
name|computeEndCurrentRow
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
index|[]
name|sortKey
init|=
name|computeValues
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|rowIdx
argument_list|)
argument_list|)
decl_stmt|;
name|Object
index|[]
name|rowVal
init|=
name|sortKey
decl_stmt|;
name|int
name|r
init|=
name|rowIdx
decl_stmt|;
while|while
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
operator|&&
name|isEqual
argument_list|(
name|sortKey
argument_list|,
name|rowVal
argument_list|)
condition|)
block|{
name|r
operator|++
expr_stmt|;
if|if
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
condition|)
block|{
name|rowVal
operator|=
name|computeValues
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
specifier|protected
name|int
name|computeEndFollowing
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|amt
init|=
name|end
operator|.
name|getAmt
argument_list|()
decl_stmt|;
if|if
condition|(
name|amt
operator|==
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
condition|)
block|{
return|return
name|p
operator|.
name|size
argument_list|()
return|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"FOLLOWING needs UNBOUNDED for RANGE with multiple expressions in ORDER BY"
argument_list|)
throw|;
block|}
specifier|public
name|Object
index|[]
name|computeValues
parameter_list|(
name|Object
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
index|[]
name|objs
init|=
operator|new
name|Object
index|[
name|orderDef
operator|.
name|getExpressions
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
name|orderDef
operator|.
name|getExpressions
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getExprEvaluator
argument_list|()
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|objs
index|[
name|i
index|]
operator|=
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|o
argument_list|,
name|orderDef
operator|.
name|getExpressions
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getOI
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|objs
return|;
block|}
specifier|public
name|boolean
name|isEqual
parameter_list|(
name|Object
index|[]
name|v1
parameter_list|,
name|Object
index|[]
name|v2
parameter_list|)
block|{
assert|assert
name|v1
operator|.
name|length
operator|==
name|v2
operator|.
name|length
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|v1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|v1
index|[
name|i
index|]
operator|==
literal|null
operator|&&
name|v2
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|v1
index|[
name|i
index|]
operator|==
literal|null
operator|||
name|v2
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|v1
index|[
name|i
index|]
argument_list|,
name|orderDef
operator|.
name|getExpressions
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getOI
argument_list|()
argument_list|,
name|v2
index|[
name|i
index|]
argument_list|,
name|orderDef
operator|.
name|getExpressions
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getOI
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

