begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_class
specifier|public
class|class
name|SessionState
block|{
comment|/**    * current configuration    */
specifier|protected
name|HiveConf
name|conf
decl_stmt|;
comment|/**    * silent mode    */
specifier|protected
name|boolean
name|isSilent
decl_stmt|;
comment|/**    * cached current connection to Hive MetaStore    */
specifier|protected
name|Hive
name|db
decl_stmt|;
comment|/**    * Streams to read/write from    */
specifier|public
name|PrintStream
name|out
decl_stmt|;
specifier|public
name|InputStream
name|in
decl_stmt|;
specifier|public
name|PrintStream
name|err
decl_stmt|;
specifier|public
name|HiveConf
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
specifier|public
name|void
name|setConf
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
specifier|public
name|boolean
name|getIsSilent
parameter_list|()
block|{
return|return
name|isSilent
return|;
block|}
specifier|public
name|void
name|setIsSilent
parameter_list|(
name|boolean
name|isSilent
parameter_list|)
block|{
name|this
operator|.
name|isSilent
operator|=
name|isSilent
expr_stmt|;
block|}
specifier|public
name|SessionState
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SessionState
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SessionState
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|Hive
name|db
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
for|for
control|(
name|HiveConf
operator|.
name|ConfVars
name|oneVar
range|:
name|metaVars
control|)
block|{
name|dbOptions
operator|.
name|put
argument_list|(
name|oneVar
argument_list|,
name|conf
operator|.
name|getVar
argument_list|(
name|oneVar
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * metastore related options that the db is initialized against    */
specifier|protected
specifier|final
specifier|static
name|HiveConf
operator|.
name|ConfVars
index|[]
name|metaVars
init|=
block|{
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREDIRECTORY
block|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
block|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
block|}
decl_stmt|;
comment|/**    * cached values of such options    */
specifier|private
specifier|final
name|HashMap
argument_list|<
name|HiveConf
operator|.
name|ConfVars
argument_list|,
name|String
argument_list|>
name|dbOptions
init|=
operator|new
name|HashMap
argument_list|<
name|HiveConf
operator|.
name|ConfVars
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|Hive
name|getDb
parameter_list|()
throws|throws
name|HiveException
block|{
name|boolean
name|needsRefresh
init|=
literal|false
decl_stmt|;
for|for
control|(
name|HiveConf
operator|.
name|ConfVars
name|oneVar
range|:
name|metaVars
control|)
block|{
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|StringUtils
operator|.
name|difference
argument_list|(
name|dbOptions
operator|.
name|get
argument_list|(
name|oneVar
argument_list|)
argument_list|,
name|conf
operator|.
name|getVar
argument_list|(
name|oneVar
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|needsRefresh
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|(
name|db
operator|==
literal|null
operator|)
operator|||
name|needsRefresh
condition|)
block|{
name|db
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|db
return|;
block|}
specifier|public
name|void
name|setCmd
parameter_list|(
name|String
name|cmdString
parameter_list|)
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|,
name|cmdString
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getCmd
parameter_list|()
block|{
return|return
operator|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
operator|)
return|;
block|}
specifier|public
name|String
name|getSessionId
parameter_list|()
block|{
return|return
operator|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESESSIONID
argument_list|)
operator|)
return|;
block|}
comment|/**    * Singleton Session object    *    * For multiple sessions - we could store in a hashmap or have a thread local var    **/
specifier|private
specifier|static
name|SessionState
name|ss
decl_stmt|;
comment|/**    * start a new session    */
specifier|public
specifier|static
name|SessionState
name|start
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|ss
operator|=
operator|new
name|SessionState
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ss
operator|.
name|getConf
argument_list|()
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESESSIONID
argument_list|,
name|makeSessionId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|ss
operator|)
return|;
block|}
specifier|public
specifier|static
name|SessionState
name|start
parameter_list|(
name|SessionState
name|startSs
parameter_list|)
block|{
name|ss
operator|=
name|startSs
expr_stmt|;
name|ss
operator|.
name|getConf
argument_list|()
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESESSIONID
argument_list|,
name|makeSessionId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ss
return|;
block|}
comment|/**    * get the current session    */
specifier|public
specifier|static
name|SessionState
name|get
parameter_list|()
block|{
return|return
name|ss
return|;
block|}
specifier|private
specifier|static
name|String
name|makeSessionId
parameter_list|()
block|{
name|GregorianCalendar
name|gc
init|=
operator|new
name|GregorianCalendar
argument_list|()
decl_stmt|;
name|String
name|userid
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
return|return
name|userid
operator|+
literal|"_"
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%1$4d%2$02d%3$02d%4$02d%5$02d"
argument_list|,
name|gc
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|,
name|gc
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
operator|+
literal|1
argument_list|,
name|gc
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|,
name|gc
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|,
name|gc
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|final
name|String
name|HIVE_L4J
init|=
literal|"hive-log4j.properties"
decl_stmt|;
specifier|public
specifier|static
name|void
name|initHiveLog4j
parameter_list|()
block|{
comment|// allow hive log4j to override any normal initialized one
name|URL
name|hive_l4j
init|=
name|SessionState
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|HIVE_L4J
argument_list|)
decl_stmt|;
if|if
condition|(
name|hive_l4j
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|HIVE_L4J
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LogManager
operator|.
name|resetConfiguration
argument_list|()
expr_stmt|;
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
name|hive_l4j
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|LogHelper
block|{
specifier|protected
name|Log
name|LOG
decl_stmt|;
specifier|protected
name|boolean
name|isSilent
decl_stmt|;
specifier|protected
name|SessionState
name|ss
decl_stmt|;
specifier|public
name|LogHelper
parameter_list|(
name|SessionState
name|ss
parameter_list|,
name|boolean
name|isSilent
parameter_list|,
name|Log
name|LOG
parameter_list|)
block|{
name|this
operator|.
name|LOG
operator|=
name|LOG
expr_stmt|;
name|this
operator|.
name|isSilent
operator|=
name|isSilent
expr_stmt|;
name|this
operator|.
name|ss
operator|=
name|ss
expr_stmt|;
block|}
specifier|public
name|LogHelper
parameter_list|(
name|Log
name|LOG
parameter_list|)
block|{
comment|// the session control silent or not
name|this
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
argument_list|,
literal|false
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LogHelper
parameter_list|(
name|Log
name|LOG
parameter_list|,
name|boolean
name|isSilent
parameter_list|)
block|{
comment|// no session info - use isSilent setting passed in
name|this
argument_list|(
literal|null
argument_list|,
name|isSilent
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PrintStream
name|getOutStream
parameter_list|()
block|{
return|return
operator|(
operator|(
name|ss
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|ss
operator|.
name|out
operator|!=
literal|null
operator|)
operator|)
condition|?
name|ss
operator|.
name|out
else|:
name|System
operator|.
name|out
return|;
block|}
specifier|public
name|PrintStream
name|getErrStream
parameter_list|()
block|{
return|return
operator|(
operator|(
name|ss
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|ss
operator|.
name|err
operator|!=
literal|null
operator|)
operator|)
condition|?
name|ss
operator|.
name|err
else|:
name|System
operator|.
name|err
return|;
block|}
specifier|public
name|boolean
name|getIsSilent
parameter_list|()
block|{
comment|// use the session or the one supplied in constructor
return|return
operator|(
name|ss
operator|!=
literal|null
operator|)
condition|?
name|ss
operator|.
name|getIsSilent
argument_list|()
else|:
name|isSilent
return|;
block|}
specifier|public
name|void
name|printInfo
parameter_list|(
name|String
name|info
parameter_list|)
block|{
name|printInfo
argument_list|(
name|info
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printInfo
parameter_list|(
name|String
name|info
parameter_list|,
name|String
name|detail
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getIsSilent
argument_list|()
condition|)
block|{
name|getOutStream
argument_list|()
operator|.
name|println
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|info
operator|+
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|detail
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printError
parameter_list|(
name|String
name|error
parameter_list|)
block|{
name|printError
argument_list|(
name|error
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printError
parameter_list|(
name|String
name|error
parameter_list|,
name|String
name|detail
parameter_list|)
block|{
name|getErrStream
argument_list|()
operator|.
name|println
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|error
operator|+
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|detail
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

