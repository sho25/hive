begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|log
operator|.
name|ProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConfUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|cache
operator|.
name|CachedStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|MapRedStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|session
operator|.
name|SparkSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|session
operator|.
name|SparkSessionManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|TezSessionPoolManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|TezSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|history
operator|.
name|HiveHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|history
operator|.
name|HiveHistoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|history
operator|.
name|HiveHistoryProxyHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveTxnManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|TxnManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|HiveAuthenticationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|HiveAuthorizationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|AuthorizationMetaStoreFilterHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthorizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthorizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzSessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzSessionContext
operator|.
name|CLIENT_TYPE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveMetastoreClientFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|ResourceDownloader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * SessionState encapsulates common data associated with a session.  *  * Also provides support for a thread static session object that can be accessed  * from any point in the code to interact with the user and to retrieve  * configuration information  */
end_comment

begin_class
specifier|public
class|class
name|SessionState
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SessionState
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TMP_PREFIX
init|=
literal|"_tmp_space.db"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LOCAL_SESSION_PATH_KEY
init|=
literal|"_hive.local.session.path"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HDFS_SESSION_PATH_KEY
init|=
literal|"_hive.hdfs.session.path"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TMP_TABLE_SPACE_KEY
init|=
literal|"_hive.tmp_table_space"
decl_stmt|;
specifier|static
specifier|final
name|String
name|LOCK_FILE_NAME
init|=
literal|"inuse.lck"
decl_stmt|;
specifier|static
specifier|final
name|String
name|INFO_FILE_NAME
init|=
literal|"inuse.info"
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
argument_list|>
name|tempTables
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
argument_list|>
name|tempTableColStats
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|ClassLoader
name|parentLoader
decl_stmt|;
comment|// Session-scope compile lock.
specifier|private
specifier|final
name|ReentrantLock
name|compileLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
comment|/**    * current configuration.    */
specifier|private
specifier|final
name|HiveConf
name|sessionConf
decl_stmt|;
comment|/**    * silent mode.    */
specifier|protected
name|boolean
name|isSilent
decl_stmt|;
comment|/**    * verbose mode    */
specifier|protected
name|boolean
name|isVerbose
decl_stmt|;
comment|/**    * The flag to indicate if the session serves the queries from HiveServer2 or not.    */
specifier|private
name|boolean
name|isHiveServerQuery
init|=
literal|false
decl_stmt|;
comment|/**    * The flag to indicate if the session using thrift jdbc binary serde or not.    */
specifier|private
name|boolean
name|isUsingThriftJDBCBinarySerDe
init|=
literal|false
decl_stmt|;
comment|/**    * The flag to indicate if the session already started so we can skip the init    */
specifier|private
name|boolean
name|isStarted
init|=
literal|false
decl_stmt|;
comment|/*    * HiveHistory Object    */
specifier|protected
name|HiveHistory
name|hiveHist
decl_stmt|;
comment|/**    * Streams to read/write from.    */
specifier|public
name|InputStream
name|in
decl_stmt|;
specifier|public
name|PrintStream
name|out
decl_stmt|;
specifier|public
name|PrintStream
name|info
decl_stmt|;
specifier|public
name|PrintStream
name|err
decl_stmt|;
comment|/**    * Standard output from any child process(es).    */
specifier|public
name|PrintStream
name|childOut
decl_stmt|;
comment|/**    * Error output from any child process(es).    */
specifier|public
name|PrintStream
name|childErr
decl_stmt|;
comment|/**    * Temporary file name used to store results of non-Hive commands (e.g., set, dfs)    * and HiveServer.fetch*() function will read results from this file    */
specifier|protected
name|File
name|tmpOutputFile
decl_stmt|;
comment|/**    * Temporary file name used to store error output of executing non-Hive commands (e.g., set, dfs)    */
specifier|protected
name|File
name|tmpErrOutputFile
decl_stmt|;
specifier|private
name|String
name|lastCommand
decl_stmt|;
specifier|private
name|HiveAuthorizationProvider
name|authorizer
decl_stmt|;
specifier|private
name|HiveAuthorizer
name|authorizerV2
decl_stmt|;
specifier|private
specifier|volatile
name|ProgressMonitor
name|progressMonitor
decl_stmt|;
specifier|private
name|String
name|hiveServer2HostName
decl_stmt|;
specifier|private
name|KillQuery
name|killQuery
decl_stmt|;
specifier|public
enum|enum
name|AuthorizationMode
block|{
name|V1
block|,
name|V2
block|}
empty_stmt|;
specifier|private
name|HiveAuthenticationProvider
name|authenticator
decl_stmt|;
specifier|private
name|CreateTableAutomaticGrant
name|createTableGrants
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MapRedStats
argument_list|>
name|mapRedStats
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hiveVariables
decl_stmt|;
comment|// A mapping from a hadoop job ID to the stack traces collected from the map reduce task logs
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|stackTraces
decl_stmt|;
comment|// This mapping collects all the configuration variables which have been set by the user
comment|// explicitly, either via SET in the CLI, the hiveconf option, or a System property.
comment|// It is a mapping from the variable name to its value.  Note that if a user repeatedly
comment|// changes the value of a variable, the corresponding change will be made in this mapping.
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overriddenConfigurations
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|localMapRedErrors
decl_stmt|;
specifier|private
name|TezSessionState
name|tezSessionState
decl_stmt|;
specifier|private
name|String
name|currentDatabase
decl_stmt|;
specifier|private
specifier|final
name|String
name|CONFIG_AUTHZ_SETTINGS_APPLIED_MARKER
init|=
literal|"hive.internal.ss.authz.settings.applied.marker"
decl_stmt|;
specifier|private
name|String
name|userIpAddress
decl_stmt|;
specifier|private
name|SparkSession
name|sparkSession
decl_stmt|;
comment|/**    * Gets information about HDFS encryption    */
specifier|private
name|Map
argument_list|<
name|URI
argument_list|,
name|HadoopShims
operator|.
name|HdfsEncryptionShim
argument_list|>
name|hdfsEncryptionShims
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|userName
decl_stmt|;
comment|/**    *  scratch path to use for all non-local (ie. hdfs) file system tmp folders    *  @return Path for Scratch path for the current session    */
specifier|private
name|Path
name|hdfsSessionPath
decl_stmt|;
specifier|private
name|FSDataOutputStream
name|hdfsSessionPathLockFile
init|=
literal|null
decl_stmt|;
comment|/**    * sub dir of hdfs session path. used to keep tmp tables    * @return Path for temporary tables created by the current session    */
specifier|private
name|Path
name|hdfsTmpTableSpace
decl_stmt|;
comment|/**    *  scratch directory to use for local file system tmp folders    *  @return Path for local scratch directory for current session    */
specifier|private
name|Path
name|localSessionPath
decl_stmt|;
specifier|private
name|String
name|hdfsScratchDirURIString
decl_stmt|;
comment|/**    * Next value to use in naming a temporary table created by an insert...values statement    */
specifier|private
name|int
name|nextValueTempTableSuffix
init|=
literal|1
decl_stmt|;
comment|/**    * Transaction manager to use for this session.  This is instantiated lazily by    * {@link #initTxnMgr(org.apache.hadoop.hive.conf.HiveConf)}    */
specifier|private
name|HiveTxnManager
name|txnMgr
init|=
literal|null
decl_stmt|;
comment|/**    * store the jars loaded last time    */
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|preReloadableAuxJars
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Registry
name|registry
decl_stmt|;
comment|/**    * CURRENT_TIMESTAMP value for query    */
specifier|private
name|Timestamp
name|queryCurrentTimestamp
decl_stmt|;
specifier|private
specifier|final
name|ResourceMaps
name|resourceMaps
decl_stmt|;
specifier|private
specifier|final
name|ResourceDownloader
name|resourceDownloader
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|forwardedAddresses
decl_stmt|;
specifier|private
name|String
name|atsDomainId
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Closeable
argument_list|>
name|cleanupItems
init|=
operator|new
name|LinkedList
argument_list|<
name|Closeable
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|HiveConf
name|getConf
parameter_list|()
block|{
return|return
name|sessionConf
return|;
block|}
specifier|public
name|File
name|getTmpOutputFile
parameter_list|()
block|{
return|return
name|tmpOutputFile
return|;
block|}
specifier|public
name|void
name|setTmpOutputFile
parameter_list|(
name|File
name|f
parameter_list|)
block|{
name|tmpOutputFile
operator|=
name|f
expr_stmt|;
block|}
specifier|public
name|File
name|getTmpErrOutputFile
parameter_list|()
block|{
return|return
name|tmpErrOutputFile
return|;
block|}
specifier|public
name|void
name|setTmpErrOutputFile
parameter_list|(
name|File
name|tmpErrOutputFile
parameter_list|)
block|{
name|this
operator|.
name|tmpErrOutputFile
operator|=
name|tmpErrOutputFile
expr_stmt|;
block|}
specifier|public
name|void
name|deleteTmpOutputFile
parameter_list|()
block|{
name|FileUtils
operator|.
name|deleteTmpFile
argument_list|(
name|tmpOutputFile
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deleteTmpErrOutputFile
parameter_list|()
block|{
name|FileUtils
operator|.
name|deleteTmpFile
argument_list|(
name|tmpErrOutputFile
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|getIsSilent
parameter_list|()
block|{
if|if
condition|(
name|sessionConf
operator|!=
literal|null
condition|)
block|{
return|return
name|sessionConf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESESSIONSILENT
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|isSilent
return|;
block|}
block|}
specifier|public
name|boolean
name|isHiveServerQuery
parameter_list|()
block|{
return|return
name|this
operator|.
name|isHiveServerQuery
return|;
block|}
specifier|public
name|void
name|setIsSilent
parameter_list|(
name|boolean
name|isSilent
parameter_list|)
block|{
if|if
condition|(
name|sessionConf
operator|!=
literal|null
condition|)
block|{
name|sessionConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESESSIONSILENT
argument_list|,
name|isSilent
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|isSilent
operator|=
name|isSilent
expr_stmt|;
block|}
specifier|public
name|ReentrantLock
name|getCompileLock
parameter_list|()
block|{
return|return
name|compileLock
return|;
block|}
specifier|public
name|boolean
name|getIsVerbose
parameter_list|()
block|{
return|return
name|isVerbose
return|;
block|}
specifier|public
name|void
name|setIsVerbose
parameter_list|(
name|boolean
name|isVerbose
parameter_list|)
block|{
name|this
operator|.
name|isVerbose
operator|=
name|isVerbose
expr_stmt|;
block|}
specifier|public
name|void
name|setIsUsingThriftJDBCBinarySerDe
parameter_list|(
name|boolean
name|isUsingThriftJDBCBinarySerDe
parameter_list|)
block|{
name|this
operator|.
name|isUsingThriftJDBCBinarySerDe
operator|=
name|isUsingThriftJDBCBinarySerDe
expr_stmt|;
block|}
specifier|public
name|boolean
name|getIsUsingThriftJDBCBinarySerDe
parameter_list|()
block|{
return|return
name|isUsingThriftJDBCBinarySerDe
return|;
block|}
specifier|public
name|void
name|setIsHiveServerQuery
parameter_list|(
name|boolean
name|isHiveServerQuery
parameter_list|)
block|{
name|this
operator|.
name|isHiveServerQuery
operator|=
name|isHiveServerQuery
expr_stmt|;
block|}
specifier|public
name|SessionState
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SessionState
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|userName
parameter_list|)
block|{
name|this
operator|.
name|sessionConf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
name|this
operator|.
name|registry
operator|=
operator|new
name|Registry
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SessionState user: "
operator|+
name|userName
argument_list|)
expr_stmt|;
block|}
name|isSilent
operator|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESESSIONSILENT
argument_list|)
expr_stmt|;
name|resourceMaps
operator|=
operator|new
name|ResourceMaps
argument_list|()
expr_stmt|;
comment|// Must be deterministic order map for consistent q-test output across Java versions
name|overriddenConfigurations
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|overriddenConfigurations
operator|.
name|putAll
argument_list|(
name|HiveConf
operator|.
name|getConfSystemProperties
argument_list|()
argument_list|)
expr_stmt|;
comment|// if there isn't already a session name, go ahead and create it.
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESESSIONID
argument_list|)
argument_list|)
condition|)
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESESSIONID
argument_list|,
name|makeSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|getConsole
argument_list|()
operator|.
name|printInfo
argument_list|(
literal|"Hive Session ID = "
operator|+
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Using system classloader as the parent. Using thread context
comment|// classloader as parent can pollute the session. See HIVE-11878
name|parentLoader
operator|=
name|SessionState
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
comment|// Make sure that each session has its own UDFClassloader. For details see {@link UDFClassLoader}
specifier|final
name|ClassLoader
name|currentLoader
init|=
name|Utilities
operator|.
name|createUDFClassLoader
argument_list|(
operator|(
name|URLClassLoader
operator|)
name|parentLoader
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|this
operator|.
name|sessionConf
operator|.
name|setClassLoader
argument_list|(
name|currentLoader
argument_list|)
expr_stmt|;
name|resourceDownloader
operator|=
operator|new
name|ResourceDownloader
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|DOWNLOADED_RESOURCES_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|killQuery
operator|=
operator|new
name|NullKillQuery
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHiveVariables
parameter_list|()
block|{
if|if
condition|(
name|hiveVariables
operator|==
literal|null
condition|)
block|{
name|hiveVariables
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|hiveVariables
return|;
block|}
specifier|public
name|void
name|setHiveVariables
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hiveVariables
parameter_list|)
block|{
name|this
operator|.
name|hiveVariables
operator|=
name|hiveVariables
expr_stmt|;
block|}
specifier|public
name|String
name|getSessionId
parameter_list|()
block|{
return|return
operator|(
name|sessionConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESESSIONID
argument_list|)
operator|)
return|;
block|}
specifier|public
name|void
name|updateThreadName
parameter_list|()
block|{
specifier|final
name|String
name|sessionId
init|=
name|getSessionId
argument_list|()
decl_stmt|;
specifier|final
name|String
name|logPrefix
init|=
name|getConf
argument_list|()
operator|.
name|getLogIdVar
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
specifier|final
name|String
name|currThreadName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|currThreadName
operator|.
name|contains
argument_list|(
name|logPrefix
argument_list|)
condition|)
block|{
specifier|final
name|String
name|newThreadName
init|=
name|logPrefix
operator|+
literal|" "
operator|+
name|currThreadName
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating thread name to {}"
argument_list|,
name|newThreadName
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|newThreadName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|resetThreadName
parameter_list|()
block|{
specifier|final
name|String
name|sessionId
init|=
name|getSessionId
argument_list|()
decl_stmt|;
specifier|final
name|String
name|logPrefix
init|=
name|getConf
argument_list|()
operator|.
name|getLogIdVar
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
specifier|final
name|String
name|currThreadName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|currThreadName
operator|.
name|contains
argument_list|(
name|logPrefix
argument_list|)
condition|)
block|{
specifier|final
name|String
index|[]
name|names
init|=
name|currThreadName
operator|.
name|split
argument_list|(
name|logPrefix
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Resetting thread name to {}"
argument_list|,
name|names
index|[
name|names
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|names
index|[
name|names
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Initialize the transaction manager.  This is done lazily to avoid hard wiring one    * transaction manager at the beginning of the session.    * @param conf Hive configuration to initialize transaction manager    * @return transaction manager    * @throws LockException    */
specifier|public
specifier|synchronized
name|HiveTxnManager
name|initTxnMgr
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|LockException
block|{
comment|// Only change txnMgr if the setting has changed
if|if
condition|(
name|txnMgr
operator|!=
literal|null
operator|&&
operator|!
name|txnMgr
operator|.
name|getTxnManagerName
argument_list|()
operator|.
name|equals
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_MANAGER
argument_list|)
argument_list|)
condition|)
block|{
name|txnMgr
operator|.
name|closeTxnManager
argument_list|()
expr_stmt|;
name|txnMgr
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|txnMgr
operator|==
literal|null
condition|)
block|{
name|txnMgr
operator|=
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|txnMgr
return|;
block|}
specifier|public
name|HiveTxnManager
name|getTxnMgr
parameter_list|()
block|{
return|return
name|txnMgr
return|;
block|}
comment|/**    * This only for testing.  It allows to switch the manager before the (test) operation so that    * it's not coupled to the executing thread.  Since tests run against Derby which often wedges    * under concurrent access, tests must use a single thead and simulate concurrent access.    * For example, {@code TestDbTxnManager2}    */
annotation|@
name|VisibleForTesting
specifier|public
name|HiveTxnManager
name|setTxnMgr
parameter_list|(
name|HiveTxnManager
name|mgr
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|sessionConf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|)
operator|||
name|sessionConf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_IN_TEZ_TEST
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Only for testing!"
argument_list|)
throw|;
block|}
name|HiveTxnManager
name|tmp
init|=
name|txnMgr
decl_stmt|;
name|txnMgr
operator|=
name|mgr
expr_stmt|;
return|return
name|tmp
return|;
block|}
specifier|public
name|HadoopShims
operator|.
name|HdfsEncryptionShim
name|getHdfsEncryptionShim
parameter_list|()
throws|throws
name|HiveException
block|{
try|try
block|{
return|return
name|getHdfsEncryptionShim
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|sessionConf
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|hiveException
parameter_list|)
block|{
throw|throw
name|hiveException
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|exception
argument_list|)
throw|;
block|}
block|}
specifier|public
name|HadoopShims
operator|.
name|HdfsEncryptionShim
name|getHdfsEncryptionShim
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|hdfsEncryptionShims
operator|.
name|containsKey
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
if|if
condition|(
literal|"hdfs"
operator|.
name|equals
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
name|hdfsEncryptionShims
operator|.
name|put
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|createHdfsEncryptionShim
argument_list|(
name|fs
argument_list|,
name|sessionConf
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not get hdfsEncryptionShim, it is only applicable to hdfs filesystem."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|hdfsEncryptionShims
operator|.
name|get
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
return|;
block|}
comment|// SessionState is not available in runtime and Hive.get().getConf() is not safe to call
specifier|private
specifier|static
class|class
name|SessionStates
block|{
specifier|private
name|SessionState
name|state
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|void
name|attach
parameter_list|(
name|SessionState
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|attach
argument_list|(
name|state
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|attach
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|ClassLoader
name|classLoader
init|=
name|conf
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|classLoader
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Singleton Session object per thread.    *    **/
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|SessionStates
argument_list|>
name|tss
init|=
operator|new
name|ThreadLocal
argument_list|<
name|SessionStates
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|SessionStates
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|SessionStates
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/**    * start a new session and set it to current session.    */
specifier|public
specifier|static
name|SessionState
name|start
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|SessionState
name|ss
init|=
operator|new
name|SessionState
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|start
argument_list|(
name|ss
argument_list|)
return|;
block|}
comment|/**    * Sets the given session state in the thread local var for sessions.    */
specifier|public
specifier|static
name|void
name|setCurrentSessionState
parameter_list|(
name|SessionState
name|startSs
parameter_list|)
block|{
name|tss
operator|.
name|get
argument_list|()
operator|.
name|attach
argument_list|(
name|startSs
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|detachSession
parameter_list|()
block|{
name|tss
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|/**    * set current session to existing session object if a thread is running    * multiple sessions - it must call this method with the new session object    * when switching from one session to another.    */
specifier|public
specifier|static
name|SessionState
name|start
parameter_list|(
name|SessionState
name|startSs
parameter_list|)
block|{
name|start
argument_list|(
name|startSs
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|startSs
return|;
block|}
specifier|public
specifier|static
name|void
name|beginStart
parameter_list|(
name|SessionState
name|startSs
parameter_list|,
name|LogHelper
name|console
parameter_list|)
block|{
name|start
argument_list|(
name|startSs
argument_list|,
literal|true
argument_list|,
name|console
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|endStart
parameter_list|(
name|SessionState
name|startSs
parameter_list|)
throws|throws
name|CancellationException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|startSs
operator|.
name|tezSessionState
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|startSs
operator|.
name|tezSessionState
operator|.
name|endOpen
argument_list|()
expr_stmt|;
block|}
specifier|synchronized
specifier|private
specifier|static
name|void
name|start
parameter_list|(
name|SessionState
name|startSs
parameter_list|,
name|boolean
name|isAsync
parameter_list|,
name|LogHelper
name|console
parameter_list|)
block|{
name|setCurrentSessionState
argument_list|(
name|startSs
argument_list|)
expr_stmt|;
if|if
condition|(
name|startSs
operator|.
name|isStarted
condition|)
block|{
return|return;
block|}
name|startSs
operator|.
name|isStarted
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|startSs
operator|.
name|hiveHist
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|startSs
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SESSION_HISTORY_ENABLED
argument_list|)
condition|)
block|{
name|startSs
operator|.
name|hiveHist
operator|=
operator|new
name|HiveHistoryImpl
argument_list|(
name|startSs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Hive history is disabled, create a no-op proxy
name|startSs
operator|.
name|hiveHist
operator|=
name|HiveHistoryProxyHandler
operator|.
name|getNoOpHiveHistoryProxy
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Get the following out of the way when you start the session these take a
comment|// while and should be done when we start up.
try|try
block|{
name|UserGroupInformation
name|sessionUGI
init|=
name|Utils
operator|.
name|getUGI
argument_list|()
decl_stmt|;
name|FileSystem
operator|.
name|get
argument_list|(
name|startSs
operator|.
name|sessionConf
argument_list|)
expr_stmt|;
comment|// Create scratch dirs for this session
name|startSs
operator|.
name|createSessionDirs
argument_list|(
name|sessionUGI
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set temp file containing results to be sent to HiveClient
if|if
condition|(
name|startSs
operator|.
name|getTmpOutputFile
argument_list|()
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|startSs
operator|.
name|setTmpOutputFile
argument_list|(
name|createTempFile
argument_list|(
name|startSs
operator|.
name|getConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Set temp file containing error output to be sent to client
if|if
condition|(
name|startSs
operator|.
name|getTmpErrOutputFile
argument_list|()
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|startSs
operator|.
name|setTmpErrOutputFile
argument_list|(
name|createTempFile
argument_list|(
name|startSs
operator|.
name|getConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Catch-all due to some exec time dependencies on session state
comment|// that would cause ClassNoFoundException otherwise
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|String
name|engine
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|startSs
operator|.
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|engine
operator|.
name|equals
argument_list|(
literal|"tez"
argument_list|)
operator|||
name|startSs
operator|.
name|isHiveServerQuery
condition|)
block|{
return|return;
block|}
try|try
block|{
if|if
condition|(
name|startSs
operator|.
name|tezSessionState
operator|==
literal|null
condition|)
block|{
name|startSs
operator|.
name|setTezSession
argument_list|(
operator|new
name|TezSessionState
argument_list|(
name|startSs
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|startSs
operator|.
name|sessionConf
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Only TezTask sets this, and then removes when done, so we don't expect to see it.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Tez session was already present in SessionState before start: "
operator|+
name|startSs
operator|.
name|tezSessionState
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|startSs
operator|.
name|tezSessionState
operator|.
name|isOpen
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|startSs
operator|.
name|tezSessionState
operator|.
name|isOpening
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|isAsync
condition|)
block|{
name|startSs
operator|.
name|tezSessionState
operator|.
name|endOpen
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
comment|// Neither open nor opening.
if|if
condition|(
operator|!
name|isAsync
condition|)
block|{
name|startSs
operator|.
name|tezSessionState
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|startSs
operator|.
name|tezSessionState
operator|.
name|beginOpen
argument_list|(
literal|null
argument_list|,
name|console
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Create dirs& session paths for this session:    * 1. HDFS scratch dir    * 2. Local scratch dir    * 3. Local downloaded resource dir    * 4. HDFS session path    * 5. hold a lock file in HDFS session dir to indicate the it is in use    * 6. Local session path    * 7. HDFS temp table space    * @param userName    * @throws IOException    */
specifier|private
name|void
name|createSessionDirs
parameter_list|(
name|String
name|userName
parameter_list|)
throws|throws
name|IOException
block|{
name|HiveConf
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|Path
name|rootHDFSDirPath
init|=
name|createRootHDFSDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Now create session specific dirs
name|String
name|scratchDirPermission
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SCRATCHDIRPERMISSION
argument_list|)
decl_stmt|;
name|Path
name|path
decl_stmt|;
comment|// 1. HDFS scratch dir
name|path
operator|=
operator|new
name|Path
argument_list|(
name|rootHDFSDirPath
argument_list|,
name|userName
argument_list|)
expr_stmt|;
name|hdfsScratchDirURIString
operator|=
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|createPath
argument_list|(
name|conf
argument_list|,
name|path
argument_list|,
name|scratchDirPermission
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// 2. Local scratch dir
name|path
operator|=
operator|new
name|Path
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LOCALSCRATCHDIR
argument_list|)
argument_list|)
expr_stmt|;
name|createPath
argument_list|(
name|conf
argument_list|,
name|path
argument_list|,
name|scratchDirPermission
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// 3. Download resources dir
name|path
operator|=
operator|new
name|Path
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DOWNLOADED_RESOURCES_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|createPath
argument_list|(
name|conf
argument_list|,
name|path
argument_list|,
name|scratchDirPermission
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Finally, create session paths for this session
comment|// Local& non-local tmp location is configurable. however it is the same across
comment|// all external file systems
name|String
name|sessionId
init|=
name|getSessionId
argument_list|()
decl_stmt|;
comment|// 4. HDFS session path
name|hdfsSessionPath
operator|=
operator|new
name|Path
argument_list|(
name|hdfsScratchDirURIString
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
name|createPath
argument_list|(
name|conf
argument_list|,
name|hdfsSessionPath
argument_list|,
name|scratchDirPermission
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HDFS_SESSION_PATH_KEY
argument_list|,
name|hdfsSessionPath
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// 5. hold a lock file in HDFS session dir to indicate the it is in use
if|if
condition|(
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SCRATCH_DIR_LOCK
argument_list|)
condition|)
block|{
name|FileSystem
name|fs
init|=
name|hdfsSessionPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|hdfsSessionPathInfoFile
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|hdfsSessionPath
argument_list|,
name|INFO_FILE_NAME
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|hdfsSessionPathInfoFile
operator|.
name|writeUTF
argument_list|(
literal|"process: "
operator|+
name|ManagementFactory
operator|.
name|getRuntimeMXBean
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|hdfsSessionPathInfoFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|hdfsSessionPathLockFile
operator|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|hdfsSessionPath
argument_list|,
name|LOCK_FILE_NAME
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// 6. Local session path
name|localSessionPath
operator|=
operator|new
name|Path
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LOCALSCRATCHDIR
argument_list|)
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
name|createPath
argument_list|(
name|conf
argument_list|,
name|localSessionPath
argument_list|,
name|scratchDirPermission
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|LOCAL_SESSION_PATH_KEY
argument_list|,
name|localSessionPath
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// 7. HDFS temp table space
name|hdfsTmpTableSpace
operator|=
operator|new
name|Path
argument_list|(
name|hdfsSessionPath
argument_list|,
name|TMP_PREFIX
argument_list|)
expr_stmt|;
comment|// This is a sub-dir under the hdfsSessionPath. Will be removed along with that dir.
comment|// Don't register with deleteOnExit
name|createPath
argument_list|(
name|conf
argument_list|,
name|hdfsTmpTableSpace
argument_list|,
name|scratchDirPermission
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TMP_TABLE_SPACE_KEY
argument_list|,
name|hdfsTmpTableSpace
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// _hive.tmp_table_space, _hive.hdfs.session.path, and _hive.local.session.path are respectively
comment|// saved in hdfsTmpTableSpace, hdfsSessionPath and localSessionPath.  Saving them as conf
comment|// variables is useful to expose them to end users.  But, end users shouldn't change them.
comment|// Adding them to restricted list.
name|conf
operator|.
name|addToRestrictList
argument_list|(
name|LOCAL_SESSION_PATH_KEY
operator|+
literal|","
operator|+
name|HDFS_SESSION_PATH_KEY
operator|+
literal|","
operator|+
name|TMP_TABLE_SPACE_KEY
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create the root scratch dir on hdfs (if it doesn't already exist) and make it writable    * @param conf    * @return    * @throws IOException    */
specifier|private
name|Path
name|createRootHDFSDir
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|rootHDFSDirPath
init|=
operator|new
name|Path
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SCRATCHDIR
argument_list|)
argument_list|)
decl_stmt|;
name|Utilities
operator|.
name|ensurePathIsWritable
argument_list|(
name|rootHDFSDirPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|rootHDFSDirPath
return|;
block|}
comment|/**    * Create a given path if it doesn't exist.    *    * @param conf    * @param path    * @param permission    * @param isLocal    * @param isCleanUp    * @return    * @throws IOException    */
specifier|private
specifier|static
name|void
name|createPath
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|Path
name|path
parameter_list|,
name|String
name|permission
parameter_list|,
name|boolean
name|isLocal
parameter_list|,
name|boolean
name|isCleanUp
parameter_list|)
throws|throws
name|IOException
block|{
name|FsPermission
name|fsPermission
init|=
operator|new
name|FsPermission
argument_list|(
name|permission
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
decl_stmt|;
if|if
condition|(
name|isLocal
condition|)
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fs
operator|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|,
name|fsPermission
argument_list|)
expr_stmt|;
name|String
name|dirType
init|=
name|isLocal
condition|?
literal|"local"
else|:
literal|"HDFS"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created "
operator|+
name|dirType
operator|+
literal|" directory: "
operator|+
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isCleanUp
condition|)
block|{
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getHdfsScratchDirURIString
parameter_list|()
block|{
return|return
name|hdfsScratchDirURIString
return|;
block|}
specifier|public
specifier|static
name|Path
name|getLocalSessionPath
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
block|{
name|String
name|localPathString
init|=
name|conf
operator|.
name|get
argument_list|(
name|LOCAL_SESSION_PATH_KEY
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|localPathString
argument_list|,
literal|"Conf local session path expected to be non-null"
argument_list|)
expr_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|localPathString
argument_list|)
return|;
block|}
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|ss
operator|.
name|localSessionPath
argument_list|,
literal|"Local session path expected to be non-null"
argument_list|)
expr_stmt|;
return|return
name|ss
operator|.
name|localSessionPath
return|;
block|}
specifier|public
specifier|static
name|Path
name|getHDFSSessionPath
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
block|{
name|String
name|sessionPathString
init|=
name|conf
operator|.
name|get
argument_list|(
name|HDFS_SESSION_PATH_KEY
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|sessionPathString
argument_list|,
literal|"Conf non-local session path expected to be non-null"
argument_list|)
expr_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|sessionPathString
argument_list|)
return|;
block|}
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|ss
operator|.
name|hdfsSessionPath
argument_list|,
literal|"Non-local session path expected to be non-null"
argument_list|)
expr_stmt|;
return|return
name|ss
operator|.
name|hdfsSessionPath
return|;
block|}
specifier|public
specifier|static
name|Path
name|getTempTableSpace
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
block|{
name|String
name|tempTablePathString
init|=
name|conf
operator|.
name|get
argument_list|(
name|TMP_TABLE_SPACE_KEY
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|tempTablePathString
argument_list|,
literal|"Conf temp table path expected to be non-null"
argument_list|)
expr_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|tempTablePathString
argument_list|)
return|;
block|}
return|return
name|ss
operator|.
name|getTempTableSpace
argument_list|()
return|;
block|}
specifier|public
name|Path
name|getTempTableSpace
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|this
operator|.
name|hdfsTmpTableSpace
argument_list|,
literal|"Temp table path expected to be non-null"
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|hdfsTmpTableSpace
return|;
block|}
annotation|@
name|VisibleForTesting
name|void
name|releaseSessionLockFile
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|hdfsSessionPath
operator|!=
literal|null
operator|&&
name|hdfsSessionPathLockFile
operator|!=
literal|null
condition|)
block|{
name|hdfsSessionPathLockFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|dropSessionPaths
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hdfsSessionPath
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|hdfsSessionPathLockFile
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|hdfsSessionPathLockFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed while closing remoteFsSessionLockFile"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|dropPathAndUnregisterDeleteOnExit
argument_list|(
name|hdfsSessionPath
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|localSessionPath
operator|!=
literal|null
condition|)
block|{
name|dropPathAndUnregisterDeleteOnExit
argument_list|(
name|localSessionPath
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|deleteTmpOutputFile
argument_list|()
expr_stmt|;
name|deleteTmpErrOutputFile
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|dropPathAndUnregisterDeleteOnExit
parameter_list|(
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|localFs
parameter_list|)
block|{
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|localFs
condition|)
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fs
operator|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|cancelDeleteOnExit
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted directory: {} on fs with scheme {}"
argument_list|,
name|path
argument_list|,
name|fs
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
decl||
name|UnsupportedOperationException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to delete path at {} on fs with scheme {}"
argument_list|,
name|path
argument_list|,
operator|(
name|fs
operator|==
literal|null
condition|?
literal|"Unknown-null"
else|:
name|fs
operator|.
name|getScheme
argument_list|()
operator|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Setup authentication and authorization plugins for this session.    */
specifier|private
name|void
name|setupAuth
parameter_list|()
block|{
if|if
condition|(
name|authenticator
operator|!=
literal|null
condition|)
block|{
comment|// auth has been initialized
return|return;
block|}
try|try
block|{
name|authenticator
operator|=
name|HiveUtils
operator|.
name|getAuthenticator
argument_list|(
name|sessionConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHENTICATOR_MANAGER
argument_list|)
expr_stmt|;
name|authenticator
operator|.
name|setSessionState
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|String
name|clsStr
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|sessionConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|)
decl_stmt|;
name|authorizer
operator|=
name|HiveUtils
operator|.
name|getAuthorizeProviderManager
argument_list|(
name|sessionConf
argument_list|,
name|clsStr
argument_list|,
name|authenticator
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorizer
operator|==
literal|null
condition|)
block|{
comment|// if it was null, the new (V2) authorization plugin must be specified in
comment|// config
name|HiveAuthorizerFactory
name|authorizerFactory
init|=
name|HiveUtils
operator|.
name|getAuthorizerFactory
argument_list|(
name|sessionConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|)
decl_stmt|;
name|HiveAuthzSessionContext
operator|.
name|Builder
name|authzContextBuilder
init|=
operator|new
name|HiveAuthzSessionContext
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|authzContextBuilder
operator|.
name|setClientType
argument_list|(
name|isHiveServerQuery
argument_list|()
condition|?
name|CLIENT_TYPE
operator|.
name|HIVESERVER2
else|:
name|CLIENT_TYPE
operator|.
name|HIVECLI
argument_list|)
expr_stmt|;
name|authzContextBuilder
operator|.
name|setSessionString
argument_list|(
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|authorizerV2
operator|=
name|authorizerFactory
operator|.
name|createHiveAuthorizer
argument_list|(
operator|new
name|HiveMetastoreClientFactoryImpl
argument_list|()
argument_list|,
name|sessionConf
argument_list|,
name|authenticator
argument_list|,
name|authzContextBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|setAuthorizerV2Config
argument_list|()
expr_stmt|;
block|}
comment|// create the create table grants with new config
name|createTableGrants
operator|=
name|CreateTableAutomaticGrant
operator|.
name|create
argument_list|(
name|sessionConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error setting up authorization: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|Object
name|authorizationClass
init|=
name|getActiveAuthorizer
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Session is using authorization class "
operator|+
name|authorizationClass
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
specifier|private
name|void
name|setAuthorizerV2Config
parameter_list|()
throws|throws
name|HiveException
block|{
comment|// avoid processing the same config multiple times, check marker
if|if
condition|(
name|sessionConf
operator|.
name|get
argument_list|(
name|CONFIG_AUTHZ_SETTINGS_APPLIED_MARKER
argument_list|,
literal|""
argument_list|)
operator|.
name|equals
argument_list|(
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|metastoreHook
init|=
name|sessionConf
operator|.
name|get
argument_list|(
name|ConfVars
operator|.
name|METASTORE_FILTER_HOOK
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ConfVars
operator|.
name|METASTORE_FILTER_HOOK
operator|.
name|getDefaultValue
argument_list|()
operator|.
name|equals
argument_list|(
name|metastoreHook
argument_list|)
operator|&&
operator|!
name|AuthorizationMetaStoreFilterHook
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|metastoreHook
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ConfVars
operator|.
name|METASTORE_FILTER_HOOK
operator|.
name|name
argument_list|()
operator|+
literal|" will be ignored, since hive.security.authorization.manager"
operator|+
literal|" is set to instance of HiveAuthorizerFactory."
argument_list|)
expr_stmt|;
block|}
name|sessionConf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_FILTER_HOOK
argument_list|,
name|AuthorizationMetaStoreFilterHook
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|authorizerV2
operator|.
name|applyAuthorizationConfigPolicy
argument_list|(
name|sessionConf
argument_list|)
expr_stmt|;
comment|// update config in Hive thread local as well and init the metastore client
try|try
block|{
name|Hive
operator|.
name|get
argument_list|(
name|sessionConf
argument_list|)
operator|.
name|getMSC
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// catch-all due to some exec time dependencies on session state
comment|// that would cause ClassNoFoundException otherwise
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// set a marker that this conf has been processed.
name|sessionConf
operator|.
name|set
argument_list|(
name|CONFIG_AUTHZ_SETTINGS_APPLIED_MARKER
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|getActiveAuthorizer
parameter_list|()
block|{
return|return
name|getAuthorizationMode
argument_list|()
operator|==
name|AuthorizationMode
operator|.
name|V1
condition|?
name|getAuthorizer
argument_list|()
else|:
name|getAuthorizerV2
argument_list|()
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getAuthorizerInterface
parameter_list|()
block|{
return|return
name|getAuthorizationMode
argument_list|()
operator|==
name|AuthorizationMode
operator|.
name|V1
condition|?
name|HiveAuthorizationProvider
operator|.
name|class
else|:
name|HiveAuthorizer
operator|.
name|class
return|;
block|}
specifier|public
name|void
name|setActiveAuthorizer
parameter_list|(
name|Object
name|authorizer
parameter_list|)
block|{
if|if
condition|(
name|authorizer
operator|instanceof
name|HiveAuthorizationProvider
condition|)
block|{
name|this
operator|.
name|authorizer
operator|=
operator|(
name|HiveAuthorizationProvider
operator|)
name|authorizer
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|authorizer
operator|instanceof
name|HiveAuthorizer
condition|)
block|{
name|this
operator|.
name|authorizerV2
operator|=
operator|(
name|HiveAuthorizer
operator|)
name|authorizer
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|authorizer
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid authorizer "
operator|+
name|authorizer
argument_list|)
throw|;
block|}
block|}
comment|/**    * @param conf    * @return per-session temp file    * @throws IOException    */
specifier|private
specifier|static
name|File
name|createTempFile
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|lScratchDir
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LOCALSCRATCHDIR
argument_list|)
decl_stmt|;
name|String
name|sessionID
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESESSIONID
argument_list|)
decl_stmt|;
return|return
name|FileUtils
operator|.
name|createTempFile
argument_list|(
name|lScratchDir
argument_list|,
name|sessionID
argument_list|,
literal|".pipeout"
argument_list|)
return|;
block|}
comment|/**    * get the current session.    */
specifier|public
specifier|static
name|SessionState
name|get
parameter_list|()
block|{
return|return
name|tss
operator|.
name|get
argument_list|()
operator|.
name|state
return|;
block|}
specifier|public
specifier|static
name|HiveConf
name|getSessionConf
parameter_list|()
block|{
name|SessionStates
name|state
init|=
name|tss
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|conf
operator|==
literal|null
condition|)
block|{
name|state
operator|.
name|attach
argument_list|(
operator|new
name|HiveConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|state
operator|.
name|conf
return|;
block|}
specifier|public
specifier|static
name|Registry
name|getRegistry
parameter_list|()
block|{
name|SessionState
name|session
init|=
name|get
argument_list|()
decl_stmt|;
return|return
name|session
operator|!=
literal|null
condition|?
name|session
operator|.
name|registry
else|:
literal|null
return|;
block|}
specifier|public
specifier|static
name|Registry
name|getRegistryForWrite
parameter_list|()
block|{
name|Registry
name|registry
init|=
name|getRegistry
argument_list|()
decl_stmt|;
if|if
condition|(
name|registry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Function registery for session is not initialized"
argument_list|)
throw|;
block|}
return|return
name|registry
return|;
block|}
comment|/**    * get hiveHistory object which does structured logging.    *    * @return The hive history object    */
specifier|public
name|HiveHistory
name|getHiveHistory
parameter_list|()
block|{
return|return
name|hiveHist
return|;
block|}
comment|/**    * Update the history if set hive.session.history.enabled    *    * @param historyEnabled    * @param ss    */
specifier|public
name|void
name|updateHistory
parameter_list|(
name|boolean
name|historyEnabled
parameter_list|,
name|SessionState
name|ss
parameter_list|)
block|{
if|if
condition|(
name|historyEnabled
condition|)
block|{
comment|// Uses a no-op proxy
if|if
condition|(
name|ss
operator|.
name|hiveHist
operator|.
name|getHistFileName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|ss
operator|.
name|hiveHist
operator|=
operator|new
name|HiveHistoryImpl
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|ss
operator|.
name|hiveHist
operator|.
name|getHistFileName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|hiveHist
operator|=
name|HiveHistoryProxyHandler
operator|.
name|getNoOpHiveHistoryProxy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Create a session ID. Looks like:    *   $user_$pid@$host_$date    * @return the unique string    */
specifier|private
specifier|static
name|String
name|makeSessionId
parameter_list|()
block|{
return|return
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getLastCommand
parameter_list|()
block|{
return|return
name|lastCommand
return|;
block|}
specifier|public
name|void
name|setLastCommand
parameter_list|(
name|String
name|lastCommand
parameter_list|)
block|{
name|this
operator|.
name|lastCommand
operator|=
name|lastCommand
expr_stmt|;
block|}
comment|/**    * This class provides helper routines to emit informational and error    * messages to the user and log4j files while obeying the current session's    * verbosity levels.    *    * NEVER write directly to the SessionStates standard output other than to    * emit result data DO use printInfo and printError provided by LogHelper to    * emit non result data strings.    *    * It is perfectly acceptable to have global static LogHelper objects (for    * example - once per module) LogHelper always emits info/error to current    * session as required.    */
specifier|public
specifier|static
class|class
name|LogHelper
block|{
specifier|protected
name|Logger
name|LOG
decl_stmt|;
specifier|protected
name|boolean
name|isSilent
decl_stmt|;
specifier|public
name|LogHelper
parameter_list|(
name|Logger
name|LOG
parameter_list|)
block|{
name|this
argument_list|(
name|LOG
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LogHelper
parameter_list|(
name|Logger
name|LOG
parameter_list|,
name|boolean
name|isSilent
parameter_list|)
block|{
name|this
operator|.
name|LOG
operator|=
name|LOG
expr_stmt|;
name|this
operator|.
name|isSilent
operator|=
name|isSilent
expr_stmt|;
block|}
comment|/**      * Get the console output stream for HiveServer2 or HiveCli.      * @return The output stream      */
specifier|public
name|PrintStream
name|getOutStream
parameter_list|()
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|ss
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|ss
operator|.
name|out
operator|!=
literal|null
operator|)
operator|)
condition|?
name|ss
operator|.
name|out
else|:
name|System
operator|.
name|out
return|;
block|}
comment|/**      * Get the console info stream for HiveServer2 or HiveCli.      * @return The info stream      */
specifier|public
specifier|static
name|PrintStream
name|getInfoStream
parameter_list|()
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|ss
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|ss
operator|.
name|info
operator|!=
literal|null
operator|)
operator|)
condition|?
name|ss
operator|.
name|info
else|:
name|getErrStream
argument_list|()
return|;
block|}
comment|/**      * Get the console error stream for HiveServer2 or HiveCli.      * @return The error stream      */
specifier|public
specifier|static
name|PrintStream
name|getErrStream
parameter_list|()
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|ss
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|ss
operator|.
name|err
operator|!=
literal|null
operator|)
operator|)
condition|?
name|ss
operator|.
name|err
else|:
name|System
operator|.
name|err
return|;
block|}
comment|/**      * Get the child process output stream for HiveServer2 or HiveCli.      * @return The child process output stream      */
specifier|public
name|PrintStream
name|getChildOutStream
parameter_list|()
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|ss
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|ss
operator|.
name|childOut
operator|!=
literal|null
operator|)
operator|)
condition|?
name|ss
operator|.
name|childOut
else|:
name|System
operator|.
name|out
return|;
block|}
comment|/**      * Get the child process error stream for HiveServer2 or HiveCli.      * @return The child process error stream      */
specifier|public
name|PrintStream
name|getChildErrStream
parameter_list|()
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|ss
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|ss
operator|.
name|childErr
operator|!=
literal|null
operator|)
operator|)
condition|?
name|ss
operator|.
name|childErr
else|:
name|System
operator|.
name|err
return|;
block|}
comment|/**      * Is the logging to the info stream is enabled, or not.      * @return True if the logging is disabled to the HiveServer2 or HiveCli info stream      */
specifier|public
name|boolean
name|getIsSilent
parameter_list|()
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// use the session or the one supplied in constructor
return|return
operator|(
name|ss
operator|!=
literal|null
operator|)
condition|?
name|ss
operator|.
name|getIsSilent
argument_list|()
else|:
name|isSilent
return|;
block|}
comment|/**      * Logs into the log file.      * BeeLine uses the operation log file to show the logs to the user, so depending on the      * BeeLine settings it could be shown to the user.      * @param info The log message      */
specifier|public
name|void
name|logInfo
parameter_list|(
name|String
name|info
parameter_list|)
block|{
name|logInfo
argument_list|(
name|info
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Logs into the log file. Handles an extra detail which will not be printed if null.      * BeeLine uses the operation log file to show the logs to the user, so depending on the      * BeeLine settings it could be shown to the user.      * @param info The log message      * @param detail Extra detail to log which will be not printed if null      */
specifier|public
name|void
name|logInfo
parameter_list|(
name|String
name|info
parameter_list|,
name|String
name|detail
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|info
operator|+
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|detail
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Logs info into the log file, and if the LogHelper is not silent then into the HiveServer2 or      * HiveCli info stream too.      * BeeLine uses the operation log file to show the logs to the user, so depending on the      * BeeLine settings it could be shown to the user.      * @param info The log message      */
specifier|public
name|void
name|printInfo
parameter_list|(
name|String
name|info
parameter_list|)
block|{
name|printInfo
argument_list|(
name|info
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Logs info into the log file, and if not silent then into the HiveServer2 or HiveCli info      * stream too. The isSilent parameter is used instead of the LogHelper isSilent attribute.      * BeeLine uses the operation log file to show the logs to the user, so depending on the      * BeeLine settings it could be shown to the user.      * @param info The log message      * @param isSilent If true then the message will not be printed to the info stream      */
specifier|public
name|void
name|printInfo
parameter_list|(
name|String
name|info
parameter_list|,
name|boolean
name|isSilent
parameter_list|)
block|{
name|printInfo
argument_list|(
name|info
argument_list|,
literal|null
argument_list|,
name|isSilent
argument_list|)
expr_stmt|;
block|}
comment|/**      * Logs info into the log file, and if the LogHelper is not silent then into the HiveServer2 or      * HiveCli info stream too. Handles an extra detail which will not be printed if null.      * BeeLine uses the operation log file to show the logs to the user, so depending on the      * BeeLine settings it could be shown to the user.      * @param info The log message      * @param detail Extra detail to log which will be not printed if null      */
specifier|public
name|void
name|printInfo
parameter_list|(
name|String
name|info
parameter_list|,
name|String
name|detail
parameter_list|)
block|{
name|printInfo
argument_list|(
name|info
argument_list|,
name|detail
argument_list|,
name|getIsSilent
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Logs info into the log file, and if not silent then into the HiveServer2 or HiveCli info      * stream too. Handles an extra detail which will not be printed if null.      * BeeLine uses the operation log file to show the logs to the user, so depending on the      * BeeLine settings it could be shown to the user.      * @param info The log message      * @param detail Extra detail to log which will be not printed if null      * @param isSilent If true then the message will not be printed to the info stream      */
specifier|public
name|void
name|printInfo
parameter_list|(
name|String
name|info
parameter_list|,
name|String
name|detail
parameter_list|,
name|boolean
name|isSilent
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSilent
condition|)
block|{
name|getInfoStream
argument_list|()
operator|.
name|println
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|info
operator|+
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|detail
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Logs an error into the log file, and into the HiveServer2 or HiveCli error stream too.      * BeeLine uses the operation log file to show the logs to the user, so depending on the      * BeeLine settings it could be shown to the user.      * @param error The log message      */
specifier|public
name|void
name|printError
parameter_list|(
name|String
name|error
parameter_list|)
block|{
name|printError
argument_list|(
name|error
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Logs an error into the log file, and into the HiveServer2 or HiveCli error stream too.      * Handles an extra detail which will not be printed if null.      * BeeLine uses the operation log file to show the logs to the user, so depending on the      * BeeLine settings it could be shown to the user.      * @param error The log message      * @param detail Extra detail to log which will be not printed if null      */
specifier|public
name|void
name|printError
parameter_list|(
name|String
name|error
parameter_list|,
name|String
name|detail
parameter_list|)
block|{
name|getErrStream
argument_list|()
operator|.
name|println
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|error
operator|+
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|detail
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|LogHelper
name|_console
decl_stmt|;
comment|/**    * initialize or retrieve console object for SessionState.    */
specifier|public
specifier|static
name|LogHelper
name|getConsole
parameter_list|()
block|{
if|if
condition|(
name|_console
operator|==
literal|null
condition|)
block|{
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"SessionState"
argument_list|)
decl_stmt|;
name|_console
operator|=
operator|new
name|LogHelper
argument_list|(
name|LOG
argument_list|)
expr_stmt|;
block|}
return|return
name|_console
return|;
block|}
comment|/**    *    * @return username from current SessionState authenticator. username will be    *         null if there is no current SessionState object or authenticator is    *         null.    */
specifier|public
specifier|static
name|String
name|getUserFromAuthenticator
parameter_list|()
block|{
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
operator|&&
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getAuthenticator
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getAuthenticator
argument_list|()
operator|.
name|getUserName
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|static
name|void
name|validateFiles
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|newFiles
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|(
name|ss
operator|==
literal|null
operator|)
condition|?
operator|new
name|Configuration
argument_list|()
else|:
name|ss
operator|.
name|getConf
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|newFile
range|:
name|newFiles
control|)
block|{
try|try
block|{
if|if
condition|(
name|Utilities
operator|.
name|realFile
argument_list|(
name|newFile
argument_list|,
name|conf
argument_list|)
operator|==
literal|null
condition|)
block|{
name|String
name|message
init|=
name|newFile
operator|+
literal|" does not exist"
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Unable to validate "
operator|+
name|newFile
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Load the jars under the path specified in hive.aux.jars.path property. Add    * the jars to the classpath so the local task can refer to them.    * @throws IOException    */
specifier|public
name|void
name|loadAuxJars
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|jarPaths
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|sessionConf
operator|.
name|getAuxJars
argument_list|()
argument_list|,
literal|','
argument_list|)
decl_stmt|;
if|if
condition|(
name|ArrayUtils
operator|.
name|isEmpty
argument_list|(
name|jarPaths
argument_list|)
condition|)
block|{
return|return;
block|}
name|URLClassLoader
name|currentCLoader
init|=
operator|(
name|URLClassLoader
operator|)
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|currentCLoader
operator|=
operator|(
name|URLClassLoader
operator|)
name|Utilities
operator|.
name|addToClassPath
argument_list|(
name|currentCLoader
argument_list|,
name|jarPaths
argument_list|)
expr_stmt|;
name|sessionConf
operator|.
name|setClassLoader
argument_list|(
name|currentCLoader
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|currentCLoader
argument_list|)
expr_stmt|;
block|}
comment|/**    * Reload the jars under the path specified in hive.reloadable.aux.jars.path property.    * @throws IOException    */
specifier|public
name|void
name|loadReloadableAuxJars
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|reloadedAuxJars
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|String
name|renewableJarPath
init|=
name|sessionConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVERELOADABLEJARS
argument_list|)
decl_stmt|;
comment|// do nothing if this property is not specified or empty
if|if
condition|(
name|renewableJarPath
operator|==
literal|null
operator|||
name|renewableJarPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|jarPaths
init|=
name|FileUtils
operator|.
name|getJarFilesByPath
argument_list|(
name|renewableJarPath
argument_list|,
name|sessionConf
argument_list|)
decl_stmt|;
comment|// load jars under the hive.reloadable.aux.jars.path
if|if
condition|(
operator|!
name|jarPaths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|reloadedAuxJars
operator|.
name|addAll
argument_list|(
name|jarPaths
argument_list|)
expr_stmt|;
block|}
comment|// remove the previous renewable jars
if|if
condition|(
name|preReloadableAuxJars
operator|!=
literal|null
operator|&&
operator|!
name|preReloadableAuxJars
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Utilities
operator|.
name|removeFromClassPath
argument_list|(
name|preReloadableAuxJars
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reloadedAuxJars
operator|!=
literal|null
operator|&&
operator|!
name|reloadedAuxJars
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|URLClassLoader
name|currentCLoader
init|=
operator|(
name|URLClassLoader
operator|)
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|currentCLoader
operator|=
operator|(
name|URLClassLoader
operator|)
name|Utilities
operator|.
name|addToClassPath
argument_list|(
name|currentCLoader
argument_list|,
name|reloadedAuxJars
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|sessionConf
operator|.
name|setClassLoader
argument_list|(
name|currentCLoader
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|currentCLoader
argument_list|)
expr_stmt|;
block|}
name|preReloadableAuxJars
operator|.
name|clear
argument_list|()
expr_stmt|;
name|preReloadableAuxJars
operator|.
name|addAll
argument_list|(
name|reloadedAuxJars
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|registerJars
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|newJars
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|LogHelper
name|console
init|=
name|getConsole
argument_list|()
decl_stmt|;
try|try
block|{
name|ClassLoader
name|loader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|ClassLoader
name|newLoader
init|=
name|Utilities
operator|.
name|addToClassPath
argument_list|(
name|loader
argument_list|,
name|newJars
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|newLoader
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
operator|.
name|setClassLoader
argument_list|(
name|newLoader
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"Added "
operator|+
name|newJars
operator|+
literal|" to class path"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Unable to register "
operator|+
name|newJars
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|static
name|boolean
name|unregisterJar
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|jarsToUnregister
parameter_list|)
block|{
name|LogHelper
name|console
init|=
name|getConsole
argument_list|()
decl_stmt|;
try|try
block|{
name|Utilities
operator|.
name|removeFromClassPath
argument_list|(
name|jarsToUnregister
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"Deleted "
operator|+
name|jarsToUnregister
operator|+
literal|" from class path"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Unable to unregister "
operator|+
name|jarsToUnregister
operator|+
literal|"\nException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"\n"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|String
name|getATSDomainId
parameter_list|()
block|{
return|return
name|atsDomainId
return|;
block|}
specifier|public
name|void
name|setATSDomainId
parameter_list|(
name|String
name|domainId
parameter_list|)
block|{
name|this
operator|.
name|atsDomainId
operator|=
name|domainId
expr_stmt|;
block|}
comment|/**    * ResourceType.    *    */
specifier|public
specifier|static
enum|enum
name|ResourceType
block|{
name|FILE
block|,
name|JAR
block|{
annotation|@
name|Override
specifier|public
name|void
name|preHook
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|cur
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|s
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|super
operator|.
name|preHook
argument_list|(
name|cur
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|registerJars
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postHook
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|cur
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|s
parameter_list|)
block|{
name|unregisterJar
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|,
name|ARCHIVE
block|;
specifier|public
name|void
name|preHook
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|cur
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|s
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|validateFiles
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|postHook
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|cur
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|s
parameter_list|)
block|{     }
block|}
empty_stmt|;
specifier|public
specifier|static
name|ResourceType
name|find_resource_type
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|s
operator|=
name|s
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|ResourceType
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
comment|// try singular
if|if
condition|(
name|s
operator|.
name|endsWith
argument_list|(
literal|"S"
argument_list|)
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|ResourceType
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|add_resource
parameter_list|(
name|ResourceType
name|t
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|RuntimeException
block|{
return|return
name|add_resource
argument_list|(
name|t
argument_list|,
name|value
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|String
name|add_resource
parameter_list|(
name|ResourceType
name|t
parameter_list|,
name|String
name|value
parameter_list|,
name|boolean
name|convertToUnix
parameter_list|)
throws|throws
name|RuntimeException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|added
init|=
name|add_resources
argument_list|(
name|t
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|value
argument_list|)
argument_list|,
name|convertToUnix
argument_list|)
decl_stmt|;
if|if
condition|(
name|added
operator|==
literal|null
operator|||
name|added
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|added
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|add_resources
parameter_list|(
name|ResourceType
name|t
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
throws|throws
name|RuntimeException
block|{
comment|// By default don't convert to unix
return|return
name|add_resources
argument_list|(
name|t
argument_list|,
name|values
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|add_resources
parameter_list|(
name|ResourceType
name|t
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|values
parameter_list|,
name|boolean
name|convertToUnix
parameter_list|)
throws|throws
name|RuntimeException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|resourceSet
init|=
name|resourceMaps
operator|.
name|getResourceSet
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|resourcePathMap
init|=
name|resourceMaps
operator|.
name|getResourcePathMap
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|reverseResourcePathMap
init|=
name|resourceMaps
operator|.
name|getReverseResourcePathMap
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|localized
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
name|String
name|key
decl_stmt|;
comment|//get the local path of downloaded jars.
name|List
argument_list|<
name|URI
argument_list|>
name|downloadedURLs
init|=
name|resolveAndDownload
argument_list|(
name|t
argument_list|,
name|value
argument_list|,
name|convertToUnix
argument_list|)
decl_stmt|;
if|if
condition|(
name|ResourceDownloader
operator|.
name|isIvyUri
argument_list|(
name|value
argument_list|)
condition|)
block|{
comment|// get the key to store in map
name|key
operator|=
name|ResourceDownloader
operator|.
name|createURI
argument_list|(
name|value
argument_list|)
operator|.
name|getAuthority
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// for local file and hdfs, key and value are same.
name|key
operator|=
name|downloadedURLs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|downloadedValues
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|URI
name|uri
range|:
name|downloadedURLs
control|)
block|{
name|String
name|resourceValue
init|=
name|uri
operator|.
name|toString
argument_list|()
decl_stmt|;
name|downloadedValues
operator|.
name|add
argument_list|(
name|resourceValue
argument_list|)
expr_stmt|;
name|localized
operator|.
name|add
argument_list|(
name|resourceValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|reverseResourcePathMap
operator|.
name|containsKey
argument_list|(
name|resourceValue
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|reverseResourcePathMap
operator|.
name|get
argument_list|(
name|resourceValue
argument_list|)
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|reverseResourcePathMap
operator|.
name|get
argument_list|(
name|resourceValue
argument_list|)
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|addSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|addSet
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|reverseResourcePathMap
operator|.
name|put
argument_list|(
name|resourceValue
argument_list|,
name|addSet
argument_list|)
expr_stmt|;
block|}
block|}
name|resourcePathMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|downloadedValues
argument_list|)
expr_stmt|;
block|}
name|t
operator|.
name|preHook
argument_list|(
name|resourceSet
argument_list|,
name|localized
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|getConsole
argument_list|()
operator|.
name|printError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"\n"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|getConsole
argument_list|()
operator|.
name|printError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|getConsole
argument_list|()
operator|.
name|printError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|getConsole
argument_list|()
operator|.
name|printInfo
argument_list|(
literal|"Added resources: "
operator|+
name|values
argument_list|)
expr_stmt|;
name|resourceSet
operator|.
name|addAll
argument_list|(
name|localized
argument_list|)
expr_stmt|;
return|return
name|localized
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|protected
name|List
argument_list|<
name|URI
argument_list|>
name|resolveAndDownload
parameter_list|(
name|ResourceType
name|resourceType
parameter_list|,
name|String
name|value
parameter_list|,
name|boolean
name|convertToUnix
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|URI
argument_list|>
name|uris
init|=
name|resourceDownloader
operator|.
name|resolveAndDownload
argument_list|(
name|value
argument_list|,
name|convertToUnix
argument_list|)
decl_stmt|;
if|if
condition|(
name|ResourceDownloader
operator|.
name|isHdfsUri
argument_list|(
name|value
argument_list|)
condition|)
block|{
assert|assert
name|uris
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|:
literal|"There should only be one URI localized-resource."
assert|;
name|resourceMaps
operator|.
name|getLocalHdfsLocationMap
argument_list|(
name|resourceType
argument_list|)
operator|.
name|put
argument_list|(
name|uris
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|uris
return|;
block|}
specifier|public
name|void
name|delete_resources
parameter_list|(
name|ResourceType
name|t
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|resources
init|=
name|resourceMaps
operator|.
name|getResourceSet
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|resources
operator|==
literal|null
operator|||
name|resources
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|resourcePathMap
init|=
name|resourceMaps
operator|.
name|getResourcePathMap
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|reverseResourcePathMap
init|=
name|resourceMaps
operator|.
name|getReverseResourcePathMap
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|deleteList
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
name|String
name|key
init|=
name|value
decl_stmt|;
try|try
block|{
if|if
condition|(
name|ResourceDownloader
operator|.
name|isIvyUri
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|key
operator|=
name|ResourceDownloader
operator|.
name|createURI
argument_list|(
name|value
argument_list|)
operator|.
name|getAuthority
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ResourceDownloader
operator|.
name|isHdfsUri
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|String
name|removedKey
init|=
name|removeHdfsFilesFromMapping
argument_list|(
name|t
argument_list|,
name|value
argument_list|)
decl_stmt|;
comment|// remove local copy of HDFS location from resource map.
if|if
condition|(
name|removedKey
operator|!=
literal|null
condition|)
block|{
name|key
operator|=
name|removedKey
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid uri string "
operator|+
name|value
operator|+
literal|", "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
comment|// get all the dependencies to delete
name|Set
argument_list|<
name|String
argument_list|>
name|resourcePaths
init|=
name|resourcePathMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourcePaths
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|String
name|resourceValue
range|:
name|resourcePaths
control|)
block|{
name|reverseResourcePathMap
operator|.
name|get
argument_list|(
name|resourceValue
argument_list|)
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|// delete a dependency only if no other resource depends on it.
if|if
condition|(
name|reverseResourcePathMap
operator|.
name|get
argument_list|(
name|resourceValue
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|deleteList
operator|.
name|add
argument_list|(
name|resourceValue
argument_list|)
expr_stmt|;
name|reverseResourcePathMap
operator|.
name|remove
argument_list|(
name|resourceValue
argument_list|)
expr_stmt|;
block|}
block|}
name|resourcePathMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|t
operator|.
name|postHook
argument_list|(
name|resources
argument_list|,
name|deleteList
argument_list|)
expr_stmt|;
name|resources
operator|.
name|removeAll
argument_list|(
name|deleteList
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|list_resource
parameter_list|(
name|ResourceType
name|t
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|orig
init|=
name|resourceMaps
operator|.
name|getResourceSet
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|orig
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
return|return
name|orig
return|;
block|}
else|else
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|fnl
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|one
range|:
name|orig
control|)
block|{
if|if
condition|(
name|filter
operator|.
name|contains
argument_list|(
name|one
argument_list|)
condition|)
block|{
name|fnl
operator|.
name|add
argument_list|(
name|one
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fnl
return|;
block|}
block|}
specifier|private
name|String
name|removeHdfsFilesFromMapping
parameter_list|(
name|ResourceType
name|t
parameter_list|,
name|String
name|file
parameter_list|)
block|{
name|String
name|key
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|resourceMaps
operator|.
name|getLocalHdfsLocationMap
argument_list|(
name|t
argument_list|)
operator|.
name|containsValue
argument_list|(
name|file
argument_list|)
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|resourceMaps
operator|.
name|getLocalHdfsLocationMap
argument_list|(
name|t
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|key
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|resourceMaps
operator|.
name|getLocalHdfsLocationMap
argument_list|(
name|t
argument_list|)
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|key
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|list_local_resource
parameter_list|(
name|ResourceType
name|type
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|resources
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|list_resource
argument_list|(
name|type
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|resourceMaps
operator|.
name|getResourceSet
argument_list|(
name|type
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|set
control|)
block|{
if|if
condition|(
name|resourceMaps
operator|.
name|getLocalHdfsLocationMap
argument_list|(
name|ResourceType
operator|.
name|FILE
argument_list|)
operator|.
name|containsKey
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|resources
operator|.
name|remove
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resourceMaps
operator|.
name|getLocalHdfsLocationMap
argument_list|(
name|ResourceType
operator|.
name|JAR
argument_list|)
operator|.
name|containsKey
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|resources
operator|.
name|remove
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|resources
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|list_hdfs_resource
parameter_list|(
name|ResourceType
name|type
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|resourceMaps
operator|.
name|getResourceSet
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|set
control|)
block|{
if|if
condition|(
name|resourceMaps
operator|.
name|getLocalHdfsLocationMap
argument_list|(
name|ResourceType
operator|.
name|FILE
argument_list|)
operator|.
name|containsKey
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|resourceMaps
operator|.
name|getLocalHdfsLocationMap
argument_list|(
name|ResourceType
operator|.
name|FILE
argument_list|)
operator|.
name|get
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resourceMaps
operator|.
name|getLocalHdfsLocationMap
argument_list|(
name|ResourceType
operator|.
name|JAR
argument_list|)
operator|.
name|containsKey
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|resourceMaps
operator|.
name|getLocalHdfsLocationMap
argument_list|(
name|ResourceType
operator|.
name|JAR
argument_list|)
operator|.
name|get
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|delete_resources
parameter_list|(
name|ResourceType
name|t
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|resources
init|=
name|resourceMaps
operator|.
name|getResourceSet
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|resources
operator|!=
literal|null
operator|&&
operator|!
name|resources
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|delete_resources
argument_list|(
name|t
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|resources
argument_list|)
argument_list|)
expr_stmt|;
name|resourceMaps
operator|.
name|getResourceMap
argument_list|()
operator|.
name|remove
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|resourceMaps
operator|.
name|getAllLocalHdfsLocationMap
argument_list|()
operator|.
name|remove
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|HiveAuthorizationProvider
name|getAuthorizer
parameter_list|()
block|{
name|setupAuth
argument_list|()
expr_stmt|;
return|return
name|authorizer
return|;
block|}
specifier|public
name|void
name|setAuthorizer
parameter_list|(
name|HiveAuthorizationProvider
name|authorizer
parameter_list|)
block|{
name|this
operator|.
name|authorizer
operator|=
name|authorizer
expr_stmt|;
block|}
specifier|public
name|HiveAuthorizer
name|getAuthorizerV2
parameter_list|()
block|{
name|setupAuth
argument_list|()
expr_stmt|;
return|return
name|authorizerV2
return|;
block|}
specifier|public
name|HiveAuthenticationProvider
name|getAuthenticator
parameter_list|()
block|{
name|setupAuth
argument_list|()
expr_stmt|;
return|return
name|authenticator
return|;
block|}
specifier|public
name|void
name|setAuthenticator
parameter_list|(
name|HiveAuthenticationProvider
name|authenticator
parameter_list|)
block|{
name|this
operator|.
name|authenticator
operator|=
name|authenticator
expr_stmt|;
block|}
specifier|public
name|CreateTableAutomaticGrant
name|getCreateTableGrants
parameter_list|()
block|{
name|setupAuth
argument_list|()
expr_stmt|;
return|return
name|createTableGrants
return|;
block|}
specifier|public
name|void
name|setCreateTableGrants
parameter_list|(
name|CreateTableAutomaticGrant
name|createTableGrants
parameter_list|)
block|{
name|this
operator|.
name|createTableGrants
operator|=
name|createTableGrants
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|MapRedStats
argument_list|>
name|getMapRedStats
parameter_list|()
block|{
return|return
name|mapRedStats
return|;
block|}
specifier|public
name|void
name|setMapRedStats
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|MapRedStats
argument_list|>
name|mapRedStats
parameter_list|)
block|{
name|this
operator|.
name|mapRedStats
operator|=
name|mapRedStats
expr_stmt|;
block|}
specifier|public
name|void
name|setStackTraces
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|stackTraces
parameter_list|)
block|{
name|this
operator|.
name|stackTraces
operator|=
name|stackTraces
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|getStackTraces
parameter_list|()
block|{
return|return
name|stackTraces
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getOverriddenConfigurations
parameter_list|()
block|{
if|if
condition|(
name|overriddenConfigurations
operator|==
literal|null
condition|)
block|{
comment|// Must be deterministic order map for consistent q-test output across Java versions
name|overriddenConfigurations
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|overriddenConfigurations
return|;
block|}
specifier|public
name|void
name|setOverriddenConfigurations
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overriddenConfigurations
parameter_list|)
block|{
name|this
operator|.
name|overriddenConfigurations
operator|=
name|overriddenConfigurations
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getLocalMapRedErrors
parameter_list|()
block|{
return|return
name|localMapRedErrors
return|;
block|}
specifier|public
name|void
name|addLocalMapRedErrors
parameter_list|(
name|String
name|id
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|localMapRedErrors
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|localMapRedErrors
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|this
operator|.
name|localMapRedErrors
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|localMapRedErrors
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|addAll
argument_list|(
name|localMapRedErrors
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setLocalMapRedErrors
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|localMapRedErrors
parameter_list|)
block|{
name|this
operator|.
name|localMapRedErrors
operator|=
name|localMapRedErrors
expr_stmt|;
block|}
specifier|public
name|String
name|getCurrentDatabase
parameter_list|()
block|{
if|if
condition|(
name|currentDatabase
operator|==
literal|null
condition|)
block|{
name|currentDatabase
operator|=
name|DEFAULT_DATABASE_NAME
expr_stmt|;
block|}
return|return
name|currentDatabase
return|;
block|}
specifier|public
name|void
name|setCurrentDatabase
parameter_list|(
name|String
name|currentDatabase
parameter_list|)
block|{
name|this
operator|.
name|currentDatabase
operator|=
name|currentDatabase
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|Closeable
name|cleanupItem
range|:
name|cleanupItems
control|)
block|{
try|try
block|{
name|cleanupItem
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error processing SessionState cleanup item "
operator|+
name|cleanupItem
operator|.
name|toString
argument_list|()
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
name|registry
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|txnMgr
operator|!=
literal|null
condition|)
block|{
name|txnMgr
operator|.
name|closeTxnManager
argument_list|()
expr_stmt|;
block|}
name|JavaUtils
operator|.
name|closeClassLoadersTo
argument_list|(
name|sessionConf
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|parentLoader
argument_list|)
expr_stmt|;
name|File
name|resourceDir
init|=
operator|new
name|File
argument_list|(
name|getConf
argument_list|()
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DOWNLOADED_RESOURCES_DIR
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing resource dir "
operator|+
name|resourceDir
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|resourceDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|resourceDir
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error removing session resource dir "
operator|+
name|resourceDir
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|detachSession
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|tezSessionState
operator|!=
literal|null
condition|)
block|{
name|TezSessionPoolManager
operator|.
name|closeIfNotDefault
argument_list|(
name|tezSessionState
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error closing tez session"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|setTezSession
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|closeSparkSession
argument_list|()
expr_stmt|;
name|registry
operator|.
name|closeCUDFLoaders
argument_list|()
expr_stmt|;
name|dropSessionPaths
argument_list|(
name|sessionConf
argument_list|)
expr_stmt|;
name|unCacheDataNucleusClassLoaders
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|// removes the threadlocal variables, closes underlying HMS connection
name|Hive
operator|.
name|closeCurrent
argument_list|()
expr_stmt|;
block|}
name|progressMonitor
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|unCacheDataNucleusClassLoaders
parameter_list|()
block|{
try|try
block|{
name|boolean
name|isLocalMetastore
init|=
name|HiveConfUtil
operator|.
name|isEmbeddedMetaStore
argument_list|(
name|sessionConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isLocalMetastore
condition|)
block|{
name|String
name|rawStoreImpl
init|=
name|sessionConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_RAW_STORE_IMPL
argument_list|)
decl_stmt|;
name|String
name|realStoreImpl
decl_stmt|;
if|if
condition|(
name|rawStoreImpl
operator|.
name|equals
argument_list|(
name|CachedStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|realStoreImpl
operator|=
name|sessionConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_CACHED_RAW_STORE_IMPL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|realStoreImpl
operator|=
name|rawStoreImpl
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|realStoreImpl
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectStore
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|ObjectStore
operator|.
name|unCacheDataNucleusClassLoaders
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to remove classloaders from DataNucleus "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|closeSparkSession
parameter_list|()
block|{
if|if
condition|(
name|sparkSession
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|SparkSessionManagerImpl
operator|.
name|getInstance
argument_list|()
operator|.
name|closeSession
argument_list|(
name|sparkSession
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error closing spark session."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|sparkSession
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|AuthorizationMode
name|getAuthorizationMode
parameter_list|()
block|{
name|setupAuth
argument_list|()
expr_stmt|;
if|if
condition|(
name|authorizer
operator|!=
literal|null
condition|)
block|{
return|return
name|AuthorizationMode
operator|.
name|V1
return|;
block|}
elseif|else
if|if
condition|(
name|authorizerV2
operator|!=
literal|null
condition|)
block|{
return|return
name|AuthorizationMode
operator|.
name|V2
return|;
block|}
comment|//should not happen - this should not get called before this.start() is called
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Authorization plugins not initialized!"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isAuthorizationModeV2
parameter_list|()
block|{
return|return
name|getAuthorizationMode
argument_list|()
operator|==
name|AuthorizationMode
operator|.
name|V2
return|;
block|}
comment|/**    * @return  Tries to return an instance of the class whose name is configured in    *          hive.exec.perf.logger, but if it can't it just returns an instance of    *          the base PerfLogger class    *    */
specifier|public
specifier|static
name|PerfLogger
name|getPerfLogger
parameter_list|()
block|{
return|return
name|getPerfLogger
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|/**    * @param resetPerfLogger    * @return  Tries to return an instance of the class whose name is configured in    *          hive.exec.perf.logger, but if it can't it just returns an instance of    *          the base PerfLogger class    *    */
specifier|public
specifier|static
name|PerfLogger
name|getPerfLogger
parameter_list|(
name|boolean
name|resetPerfLogger
parameter_list|)
block|{
name|SessionState
name|ss
init|=
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
block|{
return|return
name|PerfLogger
operator|.
name|getPerfLogger
argument_list|(
literal|null
argument_list|,
name|resetPerfLogger
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|PerfLogger
operator|.
name|getPerfLogger
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
argument_list|,
name|resetPerfLogger
argument_list|)
return|;
block|}
block|}
specifier|public
name|TezSessionState
name|getTezSession
parameter_list|()
block|{
return|return
name|tezSessionState
return|;
block|}
comment|/** Called from TezTask to attach a TezSession to use to the threadlocal. Ugly pattern... */
specifier|public
name|void
name|setTezSession
parameter_list|(
name|TezSessionState
name|session
parameter_list|)
block|{
if|if
condition|(
name|tezSessionState
operator|==
name|session
condition|)
block|{
return|return;
comment|// The same object.
block|}
if|if
condition|(
name|tezSessionState
operator|!=
literal|null
condition|)
block|{
name|tezSessionState
operator|.
name|markFree
argument_list|()
expr_stmt|;
name|tezSessionState
operator|.
name|setKillQuery
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|tezSessionState
operator|=
literal|null
expr_stmt|;
block|}
name|tezSessionState
operator|=
name|session
expr_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|markInUse
argument_list|()
expr_stmt|;
name|tezSessionState
operator|.
name|setKillQuery
argument_list|(
name|getKillQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
comment|/**    * If authorization mode is v2, then pass it through authorizer so that it can apply    * any security configuration changes.    */
specifier|public
name|void
name|applyAuthorizationPolicy
parameter_list|()
throws|throws
name|HiveException
block|{
name|setupAuth
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
argument_list|>
name|getTempTables
parameter_list|()
block|{
return|return
name|tempTables
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
argument_list|>
name|getTempTableColStats
parameter_list|()
block|{
return|return
name|tempTableColStats
return|;
block|}
comment|/**    * @return ip address for user running the query    */
specifier|public
name|String
name|getUserIpAddress
parameter_list|()
block|{
return|return
name|userIpAddress
return|;
block|}
comment|/**    * set the ip address for user running the query    * @param userIpAddress    */
specifier|public
name|void
name|setUserIpAddress
parameter_list|(
name|String
name|userIpAddress
parameter_list|)
block|{
name|this
operator|.
name|userIpAddress
operator|=
name|userIpAddress
expr_stmt|;
block|}
specifier|public
name|SparkSession
name|getSparkSession
parameter_list|()
block|{
return|return
name|sparkSession
return|;
block|}
specifier|public
name|void
name|setSparkSession
parameter_list|(
name|SparkSession
name|sparkSession
parameter_list|)
block|{
name|this
operator|.
name|sparkSession
operator|=
name|sparkSession
expr_stmt|;
block|}
comment|/**    * Get the next suffix to use in naming a temporary table created by insert...values    * @return suffix    */
specifier|public
name|String
name|getNextValuesTempTableSuffix
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|nextValueTempTableSuffix
operator|++
argument_list|)
return|;
block|}
comment|/**    * Initialize current timestamp, other necessary query initialization.    */
specifier|public
name|void
name|setupQueryCurrentTimestamp
parameter_list|()
block|{
name|queryCurrentTimestamp
operator|=
operator|new
name|Timestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
comment|// Provide a facility to set current timestamp during tests
if|if
condition|(
name|sessionConf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|)
condition|)
block|{
name|String
name|overrideTimestampString
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|sessionConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETESTCURRENTTIMESTAMP
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|overrideTimestampString
operator|!=
literal|null
operator|&&
name|overrideTimestampString
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|queryCurrentTimestamp
operator|=
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|overrideTimestampString
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get query current timestamp    * @return    */
specifier|public
name|Timestamp
name|getQueryCurrentTimestamp
parameter_list|()
block|{
return|return
name|queryCurrentTimestamp
return|;
block|}
specifier|public
name|ResourceDownloader
name|getResourceDownloader
parameter_list|()
block|{
return|return
name|resourceDownloader
return|;
block|}
specifier|public
name|void
name|setForwardedAddresses
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|forwardedAddresses
parameter_list|)
block|{
name|this
operator|.
name|forwardedAddresses
operator|=
name|forwardedAddresses
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getForwardedAddresses
parameter_list|()
block|{
return|return
name|forwardedAddresses
return|;
block|}
comment|/**    * Gets the comma-separated reloadable aux jars    * @return the list of reloadable aux jars    */
specifier|public
name|String
name|getReloadableAuxJars
parameter_list|()
block|{
return|return
name|StringUtils
operator|.
name|join
argument_list|(
name|preReloadableAuxJars
argument_list|,
literal|','
argument_list|)
return|;
block|}
specifier|public
name|void
name|updateProgressedPercentage
parameter_list|(
specifier|final
name|double
name|percentage
parameter_list|)
block|{
name|this
operator|.
name|progressMonitor
operator|=
operator|new
name|ProgressMonitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|headers
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|rows
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|footerSummary
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|startTime
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executionStatus
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|progressedPercentage
parameter_list|()
block|{
return|return
name|percentage
return|;
block|}
block|}
expr_stmt|;
block|}
specifier|public
name|void
name|updateProgressMonitor
parameter_list|(
name|ProgressMonitor
name|progressMonitor
parameter_list|)
block|{
name|this
operator|.
name|progressMonitor
operator|=
name|progressMonitor
expr_stmt|;
block|}
specifier|public
name|ProgressMonitor
name|getProgressMonitor
parameter_list|()
block|{
return|return
name|progressMonitor
return|;
block|}
specifier|public
name|void
name|setHiveServer2Host
parameter_list|(
name|String
name|hiveServer2HostName
parameter_list|)
block|{
name|this
operator|.
name|hiveServer2HostName
operator|=
name|hiveServer2HostName
expr_stmt|;
block|}
specifier|public
name|String
name|getHiveServer2Host
parameter_list|()
block|{
return|return
name|hiveServer2HostName
return|;
block|}
specifier|public
name|void
name|setKillQuery
parameter_list|(
name|KillQuery
name|killQuery
parameter_list|)
block|{
name|this
operator|.
name|killQuery
operator|=
name|killQuery
expr_stmt|;
block|}
specifier|public
name|KillQuery
name|getKillQuery
parameter_list|()
block|{
return|return
name|killQuery
return|;
block|}
specifier|public
name|void
name|addCleanupItem
parameter_list|(
name|Closeable
name|item
parameter_list|)
block|{
name|cleanupItems
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
class|class
name|ResourceMaps
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|SessionState
operator|.
name|ResourceType
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|resource_map
decl_stmt|;
comment|//Given jar to add is stored as key  and all its transitive dependencies as value. Used for deleting transitive dependencies.
specifier|private
specifier|final
name|Map
argument_list|<
name|SessionState
operator|.
name|ResourceType
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|resource_path_map
decl_stmt|;
comment|// stores all the downloaded resources as key and the jars which depend on these resources as values in form of a list. Used for deleting transitive dependencies.
specifier|private
specifier|final
name|Map
argument_list|<
name|SessionState
operator|.
name|ResourceType
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|reverse_resource_path_map
decl_stmt|;
comment|// stores mappings from local to hdfs location for all resource types.
specifier|private
specifier|final
name|Map
argument_list|<
name|SessionState
operator|.
name|ResourceType
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|local_hdfs_resource_map
decl_stmt|;
specifier|public
name|ResourceMaps
parameter_list|()
block|{
name|resource_map
operator|=
operator|new
name|HashMap
argument_list|<
name|SessionState
operator|.
name|ResourceType
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|resource_path_map
operator|=
operator|new
name|HashMap
argument_list|<
name|SessionState
operator|.
name|ResourceType
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|reverse_resource_path_map
operator|=
operator|new
name|HashMap
argument_list|<
name|SessionState
operator|.
name|ResourceType
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|local_hdfs_resource_map
operator|=
operator|new
name|HashMap
argument_list|<
name|SessionState
operator|.
name|ResourceType
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|SessionState
operator|.
name|ResourceType
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|getResourceMap
parameter_list|()
block|{
return|return
name|resource_map
return|;
block|}
specifier|public
name|Map
argument_list|<
name|SessionState
operator|.
name|ResourceType
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getAllLocalHdfsLocationMap
parameter_list|()
block|{
return|return
name|local_hdfs_resource_map
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getResourceSet
parameter_list|(
name|SessionState
operator|.
name|ResourceType
name|t
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
name|resource_map
operator|.
name|get
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|resource_map
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|getResourcePathMap
parameter_list|(
name|SessionState
operator|.
name|ResourceType
name|t
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|result
init|=
name|resource_path_map
operator|.
name|get
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|resource_path_map
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|getReverseResourcePathMap
parameter_list|(
name|SessionState
operator|.
name|ResourceType
name|t
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|result
init|=
name|reverse_resource_path_map
operator|.
name|get
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|reverse_resource_path_map
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getLocalHdfsLocationMap
parameter_list|(
name|SessionState
operator|.
name|ResourceType
name|type
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
init|=
name|local_hdfs_resource_map
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|local_hdfs_resource_map
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

