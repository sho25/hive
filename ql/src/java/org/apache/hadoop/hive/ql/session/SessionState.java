begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|MapRedStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|TezSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|history
operator|.
name|HiveHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|history
operator|.
name|HiveHistoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|history
operator|.
name|HiveHistoryProxyHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|HiveAuthenticationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|SessionStateUserAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|HiveAuthorizationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|DisallowTransformHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthorizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthorizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveMetastoreClientFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|DosToUnix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * SessionState encapsulates common data associated with a session.  *  * Also provides support for a thread static session object that can be accessed  * from any point in the code to interact with the user and to retrieve  * configuration information  */
end_comment

begin_class
specifier|public
class|class
name|SessionState
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SessionState
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * current configuration.    */
specifier|protected
name|HiveConf
name|conf
decl_stmt|;
comment|/**    * silent mode.    */
specifier|protected
name|boolean
name|isSilent
decl_stmt|;
comment|/**    * verbose mode    */
specifier|protected
name|boolean
name|isVerbose
decl_stmt|;
comment|/*    * HiveHistory Object    */
specifier|protected
name|HiveHistory
name|hiveHist
decl_stmt|;
comment|/**    * Streams to read/write from.    */
specifier|public
name|InputStream
name|in
decl_stmt|;
specifier|public
name|PrintStream
name|out
decl_stmt|;
specifier|public
name|PrintStream
name|info
decl_stmt|;
specifier|public
name|PrintStream
name|err
decl_stmt|;
comment|/**    * Standard output from any child process(es).    */
specifier|public
name|PrintStream
name|childOut
decl_stmt|;
comment|/**    * Error output from any child process(es).    */
specifier|public
name|PrintStream
name|childErr
decl_stmt|;
comment|/**    * Temporary file name used to store results of non-Hive commands (e.g., set, dfs)    * and HiveServer.fetch*() function will read results from this file    */
specifier|protected
name|File
name|tmpOutputFile
decl_stmt|;
comment|/**    * type of the command.    */
specifier|private
name|HiveOperation
name|commandType
decl_stmt|;
specifier|private
name|String
name|lastCommand
decl_stmt|;
specifier|private
name|HiveAuthorizationProvider
name|authorizer
decl_stmt|;
specifier|private
name|HiveAuthorizer
name|authorizerV2
decl_stmt|;
specifier|public
enum|enum
name|AuthorizationMode
block|{
name|V1
block|,
name|V2
block|}
empty_stmt|;
specifier|private
name|HiveAuthenticationProvider
name|authenticator
decl_stmt|;
specifier|private
name|CreateTableAutomaticGrant
name|createTableGrants
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MapRedStats
argument_list|>
name|lastMapRedStatsList
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hiveVariables
decl_stmt|;
comment|// A mapping from a hadoop job ID to the stack traces collected from the map reduce task logs
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|stackTraces
decl_stmt|;
comment|// This mapping collects all the configuration variables which have been set by the user
comment|// explicitely, either via SET in the CLI, the hiveconf option, or a System property.
comment|// It is a mapping from the variable name to its value.  Note that if a user repeatedly
comment|// changes the value of a variable, the corresponding change will be made in this mapping.
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overriddenConfigurations
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|localMapRedErrors
decl_stmt|;
specifier|private
name|TezSessionState
name|tezSessionState
decl_stmt|;
specifier|private
name|String
name|currentDatabase
decl_stmt|;
comment|/**    * Lineage state.    */
name|LineageState
name|ls
decl_stmt|;
specifier|private
name|PerfLogger
name|perfLogger
decl_stmt|;
specifier|private
specifier|final
name|String
name|userName
decl_stmt|;
comment|/**    * Get the lineage state stored in this session.    *    * @return LineageState    */
specifier|public
name|LineageState
name|getLineageState
parameter_list|()
block|{
return|return
name|ls
return|;
block|}
specifier|public
name|HiveConf
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
specifier|public
name|void
name|setConf
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
specifier|public
name|File
name|getTmpOutputFile
parameter_list|()
block|{
return|return
name|tmpOutputFile
return|;
block|}
specifier|public
name|void
name|setTmpOutputFile
parameter_list|(
name|File
name|f
parameter_list|)
block|{
name|tmpOutputFile
operator|=
name|f
expr_stmt|;
block|}
specifier|public
name|boolean
name|getIsSilent
parameter_list|()
block|{
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
return|return
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESESSIONSILENT
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|isSilent
return|;
block|}
block|}
specifier|public
name|void
name|setIsSilent
parameter_list|(
name|boolean
name|isSilent
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESESSIONSILENT
argument_list|,
name|isSilent
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|isSilent
operator|=
name|isSilent
expr_stmt|;
block|}
specifier|public
name|boolean
name|getIsVerbose
parameter_list|()
block|{
return|return
name|isVerbose
return|;
block|}
specifier|public
name|void
name|setIsVerbose
parameter_list|(
name|boolean
name|isVerbose
parameter_list|)
block|{
name|this
operator|.
name|isVerbose
operator|=
name|isVerbose
expr_stmt|;
block|}
specifier|public
name|SessionState
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SessionState
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|userName
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
name|isSilent
operator|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESESSIONSILENT
argument_list|)
expr_stmt|;
name|ls
operator|=
operator|new
name|LineageState
argument_list|()
expr_stmt|;
name|overriddenConfigurations
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|overriddenConfigurations
operator|.
name|putAll
argument_list|(
name|HiveConf
operator|.
name|getConfSystemProperties
argument_list|()
argument_list|)
expr_stmt|;
comment|// if there isn't already a session name, go ahead and create it.
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESESSIONID
argument_list|)
argument_list|)
condition|)
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESESSIONID
argument_list|,
name|makeSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|SimpleDateFormat
name|DATE_FORMAT
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMddHHmm"
argument_list|)
decl_stmt|;
specifier|public
name|void
name|setCmd
parameter_list|(
name|String
name|cmdString
parameter_list|)
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYSTRING
argument_list|,
name|cmdString
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getCmd
parameter_list|()
block|{
return|return
operator|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYSTRING
argument_list|)
operator|)
return|;
block|}
specifier|public
name|String
name|getQueryId
parameter_list|()
block|{
return|return
operator|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
operator|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHiveVariables
parameter_list|()
block|{
if|if
condition|(
name|hiveVariables
operator|==
literal|null
condition|)
block|{
name|hiveVariables
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|hiveVariables
return|;
block|}
specifier|public
name|void
name|setHiveVariables
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hiveVariables
parameter_list|)
block|{
name|this
operator|.
name|hiveVariables
operator|=
name|hiveVariables
expr_stmt|;
block|}
specifier|public
name|String
name|getSessionId
parameter_list|()
block|{
return|return
operator|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESESSIONID
argument_list|)
operator|)
return|;
block|}
comment|/**    * Singleton Session object per thread.    *    **/
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|SessionState
argument_list|>
name|tss
init|=
operator|new
name|ThreadLocal
argument_list|<
name|SessionState
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * start a new session and set it to current session.    */
specifier|public
specifier|static
name|SessionState
name|start
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|SessionState
name|ss
init|=
operator|new
name|SessionState
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|start
argument_list|(
name|ss
argument_list|)
return|;
block|}
comment|/**    * Sets the given session state in the thread local var for sessions.    */
specifier|public
specifier|static
name|void
name|setCurrentSessionState
parameter_list|(
name|SessionState
name|session
parameter_list|)
block|{
name|tss
operator|.
name|set
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
comment|/**    * set current session to existing session object if a thread is running    * multiple sessions - it must call this method with the new session object    * when switching from one session to another.    * @throws HiveException    */
specifier|public
specifier|static
name|SessionState
name|start
parameter_list|(
name|SessionState
name|startSs
parameter_list|)
block|{
name|setCurrentSessionState
argument_list|(
name|startSs
argument_list|)
expr_stmt|;
if|if
condition|(
name|startSs
operator|.
name|hiveHist
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|startSs
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SESSION_HISTORY_ENABLED
argument_list|)
condition|)
block|{
name|startSs
operator|.
name|hiveHist
operator|=
operator|new
name|HiveHistoryImpl
argument_list|(
name|startSs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Hive history is disabled, create a no-op proxy
name|startSs
operator|.
name|hiveHist
operator|=
name|HiveHistoryProxyHandler
operator|.
name|getNoOpHiveHistoryProxy
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|startSs
operator|.
name|getTmpOutputFile
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// set temp file containing results to be sent to HiveClient
try|try
block|{
name|startSs
operator|.
name|setTmpOutputFile
argument_list|(
name|createTempFile
argument_list|(
name|startSs
operator|.
name|getConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Get the following out of the way when you start the session these take a
comment|// while and should be done when we start up.
try|try
block|{
comment|//Hive object instance should be created with a copy of the conf object. If the conf is
comment|// shared with SessionState, other parts of the code might update the config, but
comment|// Hive.get(HiveConf) would not recognize the case when it needs refreshing
name|Hive
operator|.
name|get
argument_list|(
operator|new
name|HiveConf
argument_list|(
name|startSs
operator|.
name|conf
argument_list|)
argument_list|)
operator|.
name|getMSC
argument_list|()
expr_stmt|;
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getUGIForConf
argument_list|(
name|startSs
operator|.
name|conf
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|get
argument_list|(
name|startSs
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// catch-all due to some exec time dependencies on session state
comment|// that would cause ClassNoFoundException otherwise
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|startSs
operator|.
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
argument_list|)
operator|.
name|equals
argument_list|(
literal|"tez"
argument_list|)
condition|)
block|{
try|try
block|{
if|if
condition|(
name|startSs
operator|.
name|tezSessionState
operator|==
literal|null
condition|)
block|{
name|startSs
operator|.
name|tezSessionState
operator|=
operator|new
name|TezSessionState
argument_list|()
expr_stmt|;
block|}
name|startSs
operator|.
name|tezSessionState
operator|.
name|open
argument_list|(
name|startSs
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|startSs
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No Tez session required at this point. hive.execution.engine=mr."
argument_list|)
expr_stmt|;
block|}
return|return
name|startSs
return|;
block|}
comment|/**    * Setup authentication and authorization plugins for this session.    * @param startSs    */
specifier|private
name|void
name|setupAuth
parameter_list|()
block|{
if|if
condition|(
name|authenticator
operator|!=
literal|null
condition|)
block|{
comment|// auth has been initialized
return|return;
block|}
try|try
block|{
name|authenticator
operator|=
name|HiveUtils
operator|.
name|getAuthenticator
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHENTICATOR_MANAGER
argument_list|)
expr_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
comment|// if username is set through the session, use an authenticator that
comment|// just returns the sessionstate user
name|authenticator
operator|=
operator|new
name|SessionStateUserAuthenticator
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|authenticator
operator|.
name|setSessionState
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|authorizer
operator|=
name|HiveUtils
operator|.
name|getAuthorizeProviderManager
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
name|authenticator
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorizer
operator|==
literal|null
condition|)
block|{
comment|// if it was null, the new authorization plugin must be specified in
comment|// config
name|HiveAuthorizerFactory
name|authorizerFactory
init|=
name|HiveUtils
operator|.
name|getAuthorizerFactory
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|)
decl_stmt|;
name|authorizerV2
operator|=
name|authorizerFactory
operator|.
name|createHiveAuthorizer
argument_list|(
operator|new
name|HiveMetastoreClientFactoryImpl
argument_list|()
argument_list|,
name|getConf
argument_list|()
argument_list|,
name|authenticator
argument_list|)
expr_stmt|;
comment|// grant all privileges for table to its owner
name|getConf
argument_list|()
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_TABLE_OWNER_GRANTS
argument_list|,
literal|"insert,select,update,delete"
argument_list|)
expr_stmt|;
name|String
name|hooks
init|=
name|getConf
argument_list|()
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|PREEXECHOOKS
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|hooks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hooks
operator|=
name|DisallowTransformHook
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|hooks
operator|=
name|hooks
operator|+
literal|","
operator|+
name|DisallowTransformHook
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Configuring hooks : "
operator|+
name|hooks
argument_list|)
expr_stmt|;
name|getConf
argument_list|()
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|PREEXECHOOKS
argument_list|,
name|hooks
argument_list|)
expr_stmt|;
block|}
name|createTableGrants
operator|=
name|CreateTableAutomaticGrant
operator|.
name|create
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|Object
name|authorizationClass
init|=
name|getAuthorizationMode
argument_list|()
operator|==
name|AuthorizationMode
operator|.
name|V1
condition|?
name|getAuthorizer
argument_list|()
else|:
name|getAuthorizerV2
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Session is using authorization class "
operator|+
name|authorizationClass
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|/**    * @param conf    * @return per-session temp file    * @throws IOException    */
specifier|private
specifier|static
name|File
name|createTempFile
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|lScratchDir
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LOCALSCRATCHDIR
argument_list|)
decl_stmt|;
name|File
name|tmpDir
init|=
operator|new
name|File
argument_list|(
name|lScratchDir
argument_list|)
decl_stmt|;
name|String
name|sessionID
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESESSIONID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tmpDir
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|tmpDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
comment|//Do another exists to check to handle possible race condition
comment|// Another thread might have created the dir, if that is why
comment|// mkdirs returned false, that is fine
if|if
condition|(
operator|!
name|tmpDir
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to create log directory "
operator|+
name|lScratchDir
argument_list|)
throw|;
block|}
block|}
block|}
name|File
name|tmpFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|sessionID
argument_list|,
literal|".pipeout"
argument_list|,
name|tmpDir
argument_list|)
decl_stmt|;
name|tmpFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
return|return
name|tmpFile
return|;
block|}
comment|/**    * get the current session.    */
specifier|public
specifier|static
name|SessionState
name|get
parameter_list|()
block|{
return|return
name|tss
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * get hiveHitsory object which does structured logging.    *    * @return The hive history object    */
specifier|public
name|HiveHistory
name|getHiveHistory
parameter_list|()
block|{
return|return
name|hiveHist
return|;
block|}
comment|/**    * Create a session ID. Looks like:    *   $user_$pid@$host_$date    * @return the unique string    */
specifier|private
specifier|static
name|String
name|makeSessionId
parameter_list|()
block|{
return|return
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getLastCommand
parameter_list|()
block|{
return|return
name|lastCommand
return|;
block|}
specifier|public
name|void
name|setLastCommand
parameter_list|(
name|String
name|lastCommand
parameter_list|)
block|{
name|this
operator|.
name|lastCommand
operator|=
name|lastCommand
expr_stmt|;
block|}
comment|/**    * This class provides helper routines to emit informational and error    * messages to the user and log4j files while obeying the current session's    * verbosity levels.    *    * NEVER write directly to the SessionStates standard output other than to    * emit result data DO use printInfo and printError provided by LogHelper to    * emit non result data strings.    *    * It is perfectly acceptable to have global static LogHelper objects (for    * example - once per module) LogHelper always emits info/error to current    * session as required.    */
specifier|public
specifier|static
class|class
name|LogHelper
block|{
specifier|protected
name|Log
name|LOG
decl_stmt|;
specifier|protected
name|boolean
name|isSilent
decl_stmt|;
specifier|public
name|LogHelper
parameter_list|(
name|Log
name|LOG
parameter_list|)
block|{
name|this
argument_list|(
name|LOG
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LogHelper
parameter_list|(
name|Log
name|LOG
parameter_list|,
name|boolean
name|isSilent
parameter_list|)
block|{
name|this
operator|.
name|LOG
operator|=
name|LOG
expr_stmt|;
name|this
operator|.
name|isSilent
operator|=
name|isSilent
expr_stmt|;
block|}
specifier|public
name|PrintStream
name|getOutStream
parameter_list|()
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|ss
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|ss
operator|.
name|out
operator|!=
literal|null
operator|)
operator|)
condition|?
name|ss
operator|.
name|out
else|:
name|System
operator|.
name|out
return|;
block|}
specifier|public
name|PrintStream
name|getInfoStream
parameter_list|()
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|ss
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|ss
operator|.
name|info
operator|!=
literal|null
operator|)
operator|)
condition|?
name|ss
operator|.
name|info
else|:
name|getErrStream
argument_list|()
return|;
block|}
specifier|public
name|PrintStream
name|getErrStream
parameter_list|()
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|ss
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|ss
operator|.
name|err
operator|!=
literal|null
operator|)
operator|)
condition|?
name|ss
operator|.
name|err
else|:
name|System
operator|.
name|err
return|;
block|}
specifier|public
name|PrintStream
name|getChildOutStream
parameter_list|()
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|ss
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|ss
operator|.
name|childOut
operator|!=
literal|null
operator|)
operator|)
condition|?
name|ss
operator|.
name|childOut
else|:
name|System
operator|.
name|out
return|;
block|}
specifier|public
name|PrintStream
name|getChildErrStream
parameter_list|()
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|ss
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|ss
operator|.
name|childErr
operator|!=
literal|null
operator|)
operator|)
condition|?
name|ss
operator|.
name|childErr
else|:
name|System
operator|.
name|err
return|;
block|}
specifier|public
name|boolean
name|getIsSilent
parameter_list|()
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// use the session or the one supplied in constructor
return|return
operator|(
name|ss
operator|!=
literal|null
operator|)
condition|?
name|ss
operator|.
name|getIsSilent
argument_list|()
else|:
name|isSilent
return|;
block|}
specifier|public
name|void
name|printInfo
parameter_list|(
name|String
name|info
parameter_list|)
block|{
name|printInfo
argument_list|(
name|info
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printInfo
parameter_list|(
name|String
name|info
parameter_list|,
name|String
name|detail
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getIsSilent
argument_list|()
condition|)
block|{
name|getInfoStream
argument_list|()
operator|.
name|println
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|info
operator|+
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|detail
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printError
parameter_list|(
name|String
name|error
parameter_list|)
block|{
name|printError
argument_list|(
name|error
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printError
parameter_list|(
name|String
name|error
parameter_list|,
name|String
name|detail
parameter_list|)
block|{
name|getErrStream
argument_list|()
operator|.
name|println
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|error
operator|+
name|StringUtils
operator|.
name|defaultString
argument_list|(
name|detail
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|LogHelper
name|_console
decl_stmt|;
comment|/**    * initialize or retrieve console object for SessionState.    */
specifier|public
specifier|static
name|LogHelper
name|getConsole
parameter_list|()
block|{
if|if
condition|(
name|_console
operator|==
literal|null
condition|)
block|{
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"SessionState"
argument_list|)
decl_stmt|;
name|_console
operator|=
operator|new
name|LogHelper
argument_list|(
name|LOG
argument_list|)
expr_stmt|;
block|}
return|return
name|_console
return|;
block|}
specifier|public
specifier|static
name|String
name|validateFile
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|curFiles
parameter_list|,
name|String
name|newFile
parameter_list|)
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|LogHelper
name|console
init|=
name|getConsole
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|(
name|ss
operator|==
literal|null
operator|)
condition|?
operator|new
name|Configuration
argument_list|()
else|:
name|ss
operator|.
name|getConf
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|Utilities
operator|.
name|realFile
argument_list|(
name|newFile
argument_list|,
name|conf
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|newFile
return|;
block|}
else|else
block|{
name|console
operator|.
name|printError
argument_list|(
name|newFile
operator|+
literal|" does not exist"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Unable to validate "
operator|+
name|newFile
operator|+
literal|"\nException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"\n"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    *    * @return username from current SessionState authenticator. username will be    *         null if there is no current SessionState object or authenticator is    *         null.    */
specifier|public
specifier|static
name|String
name|getUserFromAuthenticator
parameter_list|()
block|{
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
operator|&&
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getAuthenticator
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getAuthenticator
argument_list|()
operator|.
name|getUserName
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|boolean
name|registerJar
parameter_list|(
name|String
name|newJar
parameter_list|)
block|{
name|LogHelper
name|console
init|=
name|getConsole
argument_list|()
decl_stmt|;
try|try
block|{
name|ClassLoader
name|loader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|ClassLoader
name|newLoader
init|=
name|Utilities
operator|.
name|addToClassPath
argument_list|(
name|loader
argument_list|,
name|StringUtils
operator|.
name|split
argument_list|(
name|newJar
argument_list|,
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|newLoader
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
operator|.
name|setClassLoader
argument_list|(
name|newLoader
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"Added "
operator|+
name|newJar
operator|+
literal|" to class path"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Unable to register "
operator|+
name|newJar
operator|+
literal|"\nException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"\n"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|unregisterJar
parameter_list|(
name|String
name|jarsToUnregister
parameter_list|)
block|{
name|LogHelper
name|console
init|=
name|getConsole
argument_list|()
decl_stmt|;
try|try
block|{
name|Utilities
operator|.
name|removeFromClassPath
argument_list|(
name|StringUtils
operator|.
name|split
argument_list|(
name|jarsToUnregister
argument_list|,
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"Deleted "
operator|+
name|jarsToUnregister
operator|+
literal|" from class path"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Unable to unregister "
operator|+
name|jarsToUnregister
operator|+
literal|"\nException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"\n"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * ResourceHook.    *    */
specifier|public
specifier|static
interface|interface
name|ResourceHook
block|{
name|String
name|preHook
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|cur
parameter_list|,
name|String
name|s
parameter_list|)
function_decl|;
name|boolean
name|postHook
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|cur
parameter_list|,
name|String
name|s
parameter_list|)
function_decl|;
block|}
comment|/**    * ResourceType.    *    */
specifier|public
specifier|static
enum|enum
name|ResourceType
block|{
name|FILE
argument_list|(
operator|new
name|ResourceHook
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|preHook
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|cur
parameter_list|,
name|String
name|s
parameter_list|)
block|{
return|return
name|validateFile
argument_list|(
name|cur
argument_list|,
name|s
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|postHook
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|cur
parameter_list|,
name|String
name|s
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
block|,
name|JAR
argument_list|(
operator|new
name|ResourceHook
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|preHook
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|cur
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|String
name|newJar
init|=
name|validateFile
argument_list|(
name|cur
argument_list|,
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|newJar
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|registerJar
argument_list|(
name|newJar
argument_list|)
condition|?
name|newJar
else|:
literal|null
operator|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|postHook
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|cur
parameter_list|,
name|String
name|s
parameter_list|)
block|{
return|return
name|unregisterJar
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
argument_list|)
block|,
name|ARCHIVE
argument_list|(
operator|new
name|ResourceHook
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|preHook
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|cur
parameter_list|,
name|String
name|s
parameter_list|)
block|{
return|return
name|validateFile
argument_list|(
name|cur
argument_list|,
name|s
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|postHook
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|cur
parameter_list|,
name|String
name|s
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
block|;
specifier|public
name|ResourceHook
name|hook
decl_stmt|;
name|ResourceType
parameter_list|(
name|ResourceHook
name|hook
parameter_list|)
block|{
name|this
operator|.
name|hook
operator|=
name|hook
expr_stmt|;
block|}
block|}
empty_stmt|;
specifier|public
specifier|static
name|ResourceType
name|find_resource_type
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|s
operator|=
name|s
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|ResourceType
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
comment|// try singular
if|if
condition|(
name|s
operator|.
name|endsWith
argument_list|(
literal|"S"
argument_list|)
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|ResourceType
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
return|return
literal|null
return|;
block|}
specifier|private
specifier|final
name|HashMap
argument_list|<
name|ResourceType
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|resource_map
init|=
operator|new
name|HashMap
argument_list|<
name|ResourceType
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|String
name|add_resource
parameter_list|(
name|ResourceType
name|t
parameter_list|,
name|String
name|value
parameter_list|)
block|{
comment|// By default don't convert to unix
return|return
name|add_resource
argument_list|(
name|t
argument_list|,
name|value
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|String
name|add_resource
parameter_list|(
name|ResourceType
name|t
parameter_list|,
name|String
name|value
parameter_list|,
name|boolean
name|convertToUnix
parameter_list|)
block|{
try|try
block|{
name|value
operator|=
name|downloadResource
argument_list|(
name|value
argument_list|,
name|convertToUnix
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|getConsole
argument_list|()
operator|.
name|printError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|resourceMap
init|=
name|getResourceMap
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|String
name|fnlVal
init|=
name|value
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|hook
operator|!=
literal|null
condition|)
block|{
name|fnlVal
operator|=
name|t
operator|.
name|hook
operator|.
name|preHook
argument_list|(
name|resourceMap
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|fnlVal
operator|==
literal|null
condition|)
block|{
return|return
name|fnlVal
return|;
block|}
block|}
name|getConsole
argument_list|()
operator|.
name|printInfo
argument_list|(
literal|"Added resource: "
operator|+
name|fnlVal
argument_list|)
expr_stmt|;
name|resourceMap
operator|.
name|add
argument_list|(
name|fnlVal
argument_list|)
expr_stmt|;
return|return
name|fnlVal
return|;
block|}
specifier|public
name|void
name|add_builtin_resource
parameter_list|(
name|ResourceType
name|t
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|getResourceMap
argument_list|(
name|t
argument_list|)
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getResourceMap
parameter_list|(
name|ResourceType
name|t
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
name|resource_map
operator|.
name|get
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|resource_map
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Returns  true if it is from any external File Systems except local    */
specifier|public
specifier|static
name|boolean
name|canDownloadResource
parameter_list|(
name|String
name|value
parameter_list|)
block|{
comment|// Allow to download resources from any external FileSystem.
comment|// And no need to download if it already exists on local file system.
name|String
name|scheme
init|=
operator|new
name|Path
argument_list|(
name|value
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
decl_stmt|;
return|return
operator|(
name|scheme
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|scheme
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"file"
argument_list|)
return|;
block|}
specifier|private
name|String
name|downloadResource
parameter_list|(
name|String
name|value
parameter_list|,
name|boolean
name|convertToUnix
parameter_list|)
block|{
if|if
condition|(
name|canDownloadResource
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|getConsole
argument_list|()
operator|.
name|printInfo
argument_list|(
literal|"converting to local "
operator|+
name|value
argument_list|)
expr_stmt|;
name|File
name|resourceDir
init|=
operator|new
name|File
argument_list|(
name|getConf
argument_list|()
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DOWNLOADED_RESOURCES_DIR
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|destinationName
init|=
operator|new
name|Path
argument_list|(
name|value
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|File
name|destinationFile
init|=
operator|new
name|File
argument_list|(
name|resourceDir
argument_list|,
name|destinationName
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|resourceDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The resource directory is not a directory, resourceDir is set to"
operator|+
name|resourceDir
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|resourceDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|resourceDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't create directory "
operator|+
name|resourceDir
argument_list|)
throw|;
block|}
try|try
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
name|value
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|copyToLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|value
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|destinationFile
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|value
operator|=
name|destinationFile
operator|.
name|getCanonicalPath
argument_list|()
expr_stmt|;
if|if
condition|(
name|convertToUnix
operator|&&
name|DosToUnix
operator|.
name|isWindowsScript
argument_list|(
name|destinationFile
argument_list|)
condition|)
block|{
try|try
block|{
name|DosToUnix
operator|.
name|convertWindowsScriptToUnix
argument_list|(
name|destinationFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Caught exception while converting file "
operator|+
name|destinationFile
operator|+
literal|" to unix line endings"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to read external resource "
operator|+
name|value
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|value
return|;
block|}
specifier|public
name|boolean
name|delete_resource
parameter_list|(
name|ResourceType
name|t
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|resource_map
operator|.
name|get
argument_list|(
name|t
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|t
operator|.
name|hook
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|t
operator|.
name|hook
operator|.
name|postHook
argument_list|(
name|resource_map
operator|.
name|get
argument_list|(
name|t
argument_list|)
argument_list|,
name|value
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
operator|(
name|resource_map
operator|.
name|get
argument_list|(
name|t
argument_list|)
operator|.
name|remove
argument_list|(
name|value
argument_list|)
operator|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|list_resource
parameter_list|(
name|ResourceType
name|t
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
block|{
if|if
condition|(
name|resource_map
operator|.
name|get
argument_list|(
name|t
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|orig
init|=
name|resource_map
operator|.
name|get
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
return|return
name|orig
return|;
block|}
else|else
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|fnl
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|one
range|:
name|orig
control|)
block|{
if|if
condition|(
name|filter
operator|.
name|contains
argument_list|(
name|one
argument_list|)
condition|)
block|{
name|fnl
operator|.
name|add
argument_list|(
name|one
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fnl
return|;
block|}
block|}
specifier|public
name|void
name|delete_resource
parameter_list|(
name|ResourceType
name|t
parameter_list|)
block|{
if|if
condition|(
name|resource_map
operator|.
name|get
argument_list|(
name|t
argument_list|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|value
range|:
name|resource_map
operator|.
name|get
argument_list|(
name|t
argument_list|)
control|)
block|{
name|delete_resource
argument_list|(
name|t
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|resource_map
operator|.
name|remove
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getCommandType
parameter_list|()
block|{
if|if
condition|(
name|commandType
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|commandType
operator|.
name|getOperationName
argument_list|()
return|;
block|}
specifier|public
name|HiveOperation
name|getHiveOperation
parameter_list|()
block|{
return|return
name|commandType
return|;
block|}
specifier|public
name|void
name|setCommandType
parameter_list|(
name|HiveOperation
name|commandType
parameter_list|)
block|{
name|this
operator|.
name|commandType
operator|=
name|commandType
expr_stmt|;
block|}
specifier|public
name|HiveAuthorizationProvider
name|getAuthorizer
parameter_list|()
block|{
name|setupAuth
argument_list|()
expr_stmt|;
return|return
name|authorizer
return|;
block|}
specifier|public
name|void
name|setAuthorizer
parameter_list|(
name|HiveAuthorizationProvider
name|authorizer
parameter_list|)
block|{
name|this
operator|.
name|authorizer
operator|=
name|authorizer
expr_stmt|;
block|}
specifier|public
name|HiveAuthorizer
name|getAuthorizerV2
parameter_list|()
block|{
name|setupAuth
argument_list|()
expr_stmt|;
return|return
name|authorizerV2
return|;
block|}
specifier|public
name|HiveAuthenticationProvider
name|getAuthenticator
parameter_list|()
block|{
name|setupAuth
argument_list|()
expr_stmt|;
return|return
name|authenticator
return|;
block|}
specifier|public
name|void
name|setAuthenticator
parameter_list|(
name|HiveAuthenticationProvider
name|authenticator
parameter_list|)
block|{
name|this
operator|.
name|authenticator
operator|=
name|authenticator
expr_stmt|;
block|}
specifier|public
name|CreateTableAutomaticGrant
name|getCreateTableGrants
parameter_list|()
block|{
name|setupAuth
argument_list|()
expr_stmt|;
return|return
name|createTableGrants
return|;
block|}
specifier|public
name|void
name|setCreateTableGrants
parameter_list|(
name|CreateTableAutomaticGrant
name|createTableGrants
parameter_list|)
block|{
name|this
operator|.
name|createTableGrants
operator|=
name|createTableGrants
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|MapRedStats
argument_list|>
name|getLastMapRedStatsList
parameter_list|()
block|{
return|return
name|lastMapRedStatsList
return|;
block|}
specifier|public
name|void
name|setLastMapRedStatsList
parameter_list|(
name|List
argument_list|<
name|MapRedStats
argument_list|>
name|lastMapRedStatsList
parameter_list|)
block|{
name|this
operator|.
name|lastMapRedStatsList
operator|=
name|lastMapRedStatsList
expr_stmt|;
block|}
specifier|public
name|void
name|setStackTraces
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|stackTraces
parameter_list|)
block|{
name|this
operator|.
name|stackTraces
operator|=
name|stackTraces
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|getStackTraces
parameter_list|()
block|{
return|return
name|stackTraces
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getOverriddenConfigurations
parameter_list|()
block|{
if|if
condition|(
name|overriddenConfigurations
operator|==
literal|null
condition|)
block|{
name|overriddenConfigurations
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|overriddenConfigurations
return|;
block|}
specifier|public
name|void
name|setOverriddenConfigurations
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overriddenConfigurations
parameter_list|)
block|{
name|this
operator|.
name|overriddenConfigurations
operator|=
name|overriddenConfigurations
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getLocalMapRedErrors
parameter_list|()
block|{
return|return
name|localMapRedErrors
return|;
block|}
specifier|public
name|void
name|addLocalMapRedErrors
parameter_list|(
name|String
name|id
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|localMapRedErrors
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|localMapRedErrors
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|this
operator|.
name|localMapRedErrors
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|localMapRedErrors
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|addAll
argument_list|(
name|localMapRedErrors
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setLocalMapRedErrors
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|localMapRedErrors
parameter_list|)
block|{
name|this
operator|.
name|localMapRedErrors
operator|=
name|localMapRedErrors
expr_stmt|;
block|}
specifier|public
name|String
name|getCurrentDatabase
parameter_list|()
block|{
if|if
condition|(
name|currentDatabase
operator|==
literal|null
condition|)
block|{
name|currentDatabase
operator|=
name|DEFAULT_DATABASE_NAME
expr_stmt|;
block|}
return|return
name|currentDatabase
return|;
block|}
specifier|public
name|void
name|setCurrentDatabase
parameter_list|(
name|String
name|currentDatabase
parameter_list|)
block|{
name|this
operator|.
name|currentDatabase
operator|=
name|currentDatabase
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|resourceDir
init|=
operator|new
name|File
argument_list|(
name|getConf
argument_list|()
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DOWNLOADED_RESOURCES_DIR
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing resource dir "
operator|+
name|resourceDir
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|resourceDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|resourceDir
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error removing session resource dir "
operator|+
name|resourceDir
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|tezSessionState
operator|!=
literal|null
condition|)
block|{
name|tezSessionState
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error closing tez session"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tezSessionState
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|AuthorizationMode
name|getAuthorizationMode
parameter_list|()
block|{
name|setupAuth
argument_list|()
expr_stmt|;
if|if
condition|(
name|authorizer
operator|!=
literal|null
condition|)
block|{
return|return
name|AuthorizationMode
operator|.
name|V1
return|;
block|}
elseif|else
if|if
condition|(
name|authorizerV2
operator|!=
literal|null
condition|)
block|{
return|return
name|AuthorizationMode
operator|.
name|V2
return|;
block|}
comment|//should not happen - this should not get called before this.start() is called
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Authorization plugins not initialized!"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isAuthorizationModeV2
parameter_list|()
block|{
return|return
name|getAuthorizationMode
argument_list|()
operator|==
name|AuthorizationMode
operator|.
name|V2
return|;
block|}
comment|/**    * @param resetPerfLogger    * @return  Tries to return an instance of the class whose name is configured in    *          hive.exec.perf.logger, but if it can't it just returns an instance of    *          the base PerfLogger class     */
specifier|public
name|PerfLogger
name|getPerfLogger
parameter_list|(
name|boolean
name|resetPerfLogger
parameter_list|)
block|{
if|if
condition|(
operator|(
name|perfLogger
operator|==
literal|null
operator|)
operator|||
name|resetPerfLogger
condition|)
block|{
try|try
block|{
name|perfLogger
operator|=
operator|(
name|PerfLogger
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClassByName
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_PERF_LOGGER
argument_list|)
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Performance Logger Class not found:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|perfLogger
operator|=
operator|new
name|PerfLogger
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|perfLogger
return|;
block|}
specifier|public
name|TezSessionState
name|getTezSession
parameter_list|()
block|{
return|return
name|tezSessionState
return|;
block|}
specifier|public
name|void
name|setTezSession
parameter_list|(
name|TezSessionState
name|session
parameter_list|)
block|{
name|this
operator|.
name|tezSessionState
operator|=
name|session
expr_stmt|;
block|}
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
block|}
end_class

end_unit

