begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|SoftReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|IntBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/*  * contains all the classes to support persisting a PTF partition,  */
end_comment

begin_class
specifier|public
class|class
name|PTFPersistence
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|ByteBasedList
name|createList
parameter_list|(
name|String
name|clsName
parameter_list|,
name|int
name|capacity
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|ByteBasedList
argument_list|>
name|cls
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|ByteBasedList
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clsName
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
extends|extends
name|ByteBasedList
argument_list|>
name|cons
init|=
name|cls
operator|.
name|getConstructor
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|)
decl_stmt|;
return|return
name|cons
operator|.
name|newInstance
argument_list|(
name|capacity
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ByteBasedList
block|{
name|int
name|startOffset
decl_stmt|;
comment|/*      * (offset,size) of Writables.      * entry i at position i<< 1      * this array is resizable.      */
name|int
index|[]
name|offsetsArray
decl_stmt|;
comment|/*      * contains actual bytes of Writables.      * not resizable      */
name|byte
index|[]
name|bytes
decl_stmt|;
name|int
name|bytesUsed
decl_stmt|;
name|int
name|currentSize
decl_stmt|;
name|ReentrantReadWriteLock
name|lock
decl_stmt|;
specifier|volatile
name|long
name|lastModified
decl_stmt|;
specifier|public
name|ByteBasedList
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|capacity
parameter_list|)
block|{
name|this
operator|.
name|startOffset
operator|=
name|startOffset
expr_stmt|;
name|bytes
operator|=
operator|new
name|byte
index|[
name|capacity
index|]
expr_stmt|;
name|offsetsArray
operator|=
operator|new
name|int
index|[
name|INCREMENT_SIZE
index|]
expr_stmt|;
name|bytesUsed
operator|=
literal|0
expr_stmt|;
name|currentSize
operator|=
literal|0
expr_stmt|;
name|lock
operator|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
expr_stmt|;
name|lastModified
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ByteBasedList
parameter_list|()
block|{
name|this
argument_list|(
literal|0
argument_list|,
name|MEDIUM_SIZE
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|reset
parameter_list|(
name|int
name|startOffset
parameter_list|)
throws|throws
name|HiveException
block|{
name|PTFPersistence
operator|.
name|lock
argument_list|(
name|lock
operator|.
name|writeLock
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|startOffset
operator|=
name|startOffset
expr_stmt|;
name|bytesUsed
operator|=
literal|0
expr_stmt|;
name|currentSize
operator|=
literal|0
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|offsetsArray
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|lastModified
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|ByteBasedList
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|this
argument_list|(
literal|0
argument_list|,
name|capacity
argument_list|)
expr_stmt|;
block|}
comment|/*      * internal api; used by {@link PersistentByteBasedList} to setup BBList from a file.      */
specifier|protected
name|ByteBasedList
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|lock
operator|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|ensureCapacity
parameter_list|(
name|int
name|wlen
parameter_list|)
throws|throws
name|ListFullException
block|{
if|if
condition|(
name|bytesUsed
operator|+
name|wlen
operator|>
name|bytes
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|ListFullException
argument_list|()
throw|;
block|}
if|if
condition|(
operator|(
literal|2
operator|*
name|currentSize
operator|+
literal|1
operator|)
operator|>
name|offsetsArray
operator|.
name|length
condition|)
block|{
name|int
index|[]
name|na
init|=
operator|new
name|int
index|[
name|offsetsArray
operator|.
name|length
operator|+
name|INCREMENT_SIZE
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|offsetsArray
argument_list|,
literal|0
argument_list|,
name|na
argument_list|,
literal|0
argument_list|,
name|offsetsArray
operator|.
name|length
argument_list|)
expr_stmt|;
name|offsetsArray
operator|=
name|na
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|index
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|j
init|=
name|i
operator|-
name|startOffset
decl_stmt|;
name|j
operator|=
name|j
operator|<<
literal|1
expr_stmt|;
if|if
condition|(
name|j
operator|>
literal|2
operator|*
name|currentSize
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"index invalid %d"
argument_list|,
name|i
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|j
return|;
block|}
specifier|private
name|void
name|write
parameter_list|(
name|Writable
name|w
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
block|{
name|DataOStream
name|dos
init|=
name|PTFPersistence
operator|.
name|dos
operator|.
name|get
argument_list|()
decl_stmt|;
name|ByteArrayOS
name|bos
init|=
name|dos
operator|.
name|getUnderlyingStream
argument_list|()
decl_stmt|;
name|bos
operator|.
name|reset
argument_list|()
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
name|dos
argument_list|)
expr_stmt|;
name|ensureCapacity
argument_list|(
name|bos
operator|.
name|len
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|currentSize
operator|*
literal|2
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bos
operator|.
name|bytearray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|,
name|bytesUsed
argument_list|,
name|bos
operator|.
name|len
argument_list|()
argument_list|)
expr_stmt|;
name|offsetsArray
index|[
name|i
index|]
operator|=
name|bytesUsed
expr_stmt|;
name|offsetsArray
index|[
name|i
operator|+
literal|1
index|]
operator|=
name|bos
operator|.
name|len
argument_list|()
expr_stmt|;
name|currentSize
operator|+=
literal|1
expr_stmt|;
name|bytesUsed
operator|+=
name|bos
operator|.
name|len
argument_list|()
expr_stmt|;
name|lastModified
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|size
parameter_list|()
throws|throws
name|HiveException
block|{
name|PTFPersistence
operator|.
name|lock
argument_list|(
name|lock
operator|.
name|readLock
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|currentSize
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|get
parameter_list|(
name|int
name|i
parameter_list|,
name|Writable
name|wObj
parameter_list|)
throws|throws
name|HiveException
block|{
name|PTFPersistence
operator|.
name|lock
argument_list|(
name|lock
operator|.
name|readLock
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|i
operator|=
name|index
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|DataIStream
name|dis
init|=
name|PTFPersistence
operator|.
name|dis
operator|.
name|get
argument_list|()
decl_stmt|;
name|ByteArrayIS
name|bis
init|=
name|dis
operator|.
name|getUnderlyingStream
argument_list|()
decl_stmt|;
name|bis
operator|.
name|setBuffer
argument_list|(
name|bytes
argument_list|,
name|offsetsArray
index|[
name|i
index|]
argument_list|,
name|offsetsArray
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|wObj
operator|.
name|readFields
argument_list|(
name|dis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|append
parameter_list|(
name|Writable
name|obj
parameter_list|)
throws|throws
name|HiveException
block|{
name|PTFPersistence
operator|.
name|lock
argument_list|(
name|lock
operator|.
name|writeLock
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|write
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Object
name|get
parameter_list|(
name|int
name|i
parameter_list|,
name|Deserializer
name|deserializer
parameter_list|,
name|Writable
name|wObj
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|get
argument_list|(
name|i
argument_list|,
name|wObj
argument_list|)
expr_stmt|;
return|return
name|deserializer
operator|.
name|deserialize
argument_list|(
name|wObj
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|append
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|OI
parameter_list|,
name|Serializer
name|serializer
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|append
argument_list|(
name|serializer
operator|.
name|serialize
argument_list|(
name|obj
argument_list|,
name|OI
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Iterator
argument_list|<
name|Writable
argument_list|>
name|iterator
parameter_list|(
name|Writable
name|wObj
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|WIterator
argument_list|(
name|wObj
argument_list|,
name|startOffset
argument_list|)
return|;
block|}
specifier|public
name|Iterator
argument_list|<
name|Object
argument_list|>
name|iterator
parameter_list|(
name|Deserializer
name|deserializer
parameter_list|,
name|Writable
name|wObj
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|OIterator
argument_list|(
name|deserializer
argument_list|,
name|wObj
argument_list|)
return|;
block|}
specifier|public
name|void
name|dump
parameter_list|(
name|StringBuilder
name|bldr
parameter_list|,
name|Writable
name|wObj
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveException
block|{
name|bldr
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Writable
argument_list|>
name|wi
init|=
name|iterator
argument_list|(
name|wObj
argument_list|)
decl_stmt|;
while|while
condition|(
name|wi
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|wObj
operator|=
name|wi
operator|.
name|next
argument_list|()
expr_stmt|;
name|bldr
operator|.
name|append
argument_list|(
name|wObj
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|bldr
operator|.
name|append
argument_list|(
literal|"]\n"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dump
parameter_list|(
name|StringBuilder
name|bldr
parameter_list|,
name|Deserializer
name|deserializer
parameter_list|,
name|Writable
name|wObj
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveException
block|{
name|bldr
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Object
argument_list|>
name|oi
init|=
name|iterator
argument_list|(
name|deserializer
argument_list|,
name|wObj
argument_list|)
decl_stmt|;
while|while
condition|(
name|oi
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|bldr
operator|.
name|append
argument_list|(
name|oi
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|bldr
operator|.
name|append
argument_list|(
literal|"]\n"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|bytes
operator|=
literal|null
expr_stmt|;
name|offsetsArray
operator|=
literal|null
expr_stmt|;
block|}
class|class
name|WIterator
implements|implements
name|Iterator
argument_list|<
name|Writable
argument_list|>
block|{
name|Writable
name|wObj
decl_stmt|;
name|long
name|checkTime
decl_stmt|;
name|int
name|i
decl_stmt|;
name|WIterator
parameter_list|(
name|Writable
name|wObj
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|this
operator|.
name|wObj
operator|=
name|wObj
expr_stmt|;
name|checkTime
operator|=
name|lastModified
expr_stmt|;
name|i
operator|=
name|offset
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|i
operator|<
name|currentSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|Writable
name|next
parameter_list|()
block|{
if|if
condition|(
name|checkTime
operator|!=
name|lastModified
condition|)
block|{
throw|throw
operator|new
name|ConcurrentModificationException
argument_list|()
throw|;
block|}
try|try
block|{
name|get
argument_list|(
name|i
operator|++
argument_list|,
name|wObj
argument_list|)
expr_stmt|;
return|return
name|wObj
return|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|be
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|be
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
class|class
name|OIterator
implements|implements
name|Iterator
argument_list|<
name|Object
argument_list|>
block|{
name|Deserializer
name|deserializer
decl_stmt|;
name|Iterator
argument_list|<
name|Writable
argument_list|>
name|wi
decl_stmt|;
name|OIterator
parameter_list|(
name|Deserializer
name|deserializer
parameter_list|,
name|Writable
name|wObj
parameter_list|)
throws|throws
name|HiveException
block|{
name|wi
operator|=
name|iterator
argument_list|(
name|wObj
argument_list|)
expr_stmt|;
name|this
operator|.
name|deserializer
operator|=
name|deserializer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|wi
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|next
parameter_list|()
block|{
name|Writable
name|wObj
init|=
name|wi
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|deserializer
operator|.
name|deserialize
argument_list|(
name|wObj
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ListFullException
extends|extends
name|HiveException
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|4745303310812778989L
decl_stmt|;
specifier|public
name|ListFullException
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ListFullException
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ListFullException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ListFullException
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|int
name|INCREMENT_SIZE
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
literal|16
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|SMALL_SIZE
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
literal|6
operator|+
literal|10
argument_list|)
decl_stmt|;
comment|// 64KB
specifier|public
specifier|static
specifier|final
name|int
name|MEDIUM_SIZE
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
operator|(
literal|10
operator|+
literal|10
operator|+
literal|3
operator|)
argument_list|)
decl_stmt|;
comment|// 8 MB
specifier|public
specifier|static
specifier|final
name|int
name|LARGE_SIZE
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
operator|(
literal|6
operator|+
literal|10
operator|+
literal|10
operator|)
argument_list|)
decl_stmt|;
comment|// 64 MB
block|}
specifier|public
specifier|static
class|class
name|PartitionedByteBasedList
extends|extends
name|ByteBasedList
block|{
specifier|private
specifier|static
specifier|final
name|ShutdownHook
name|hook
init|=
operator|new
name|ShutdownHook
argument_list|()
decl_stmt|;
static|static
block|{
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
name|hook
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|ByteBasedList
argument_list|>
name|partitions
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|partitionOffsets
decl_stmt|;
name|ArrayList
argument_list|<
name|File
argument_list|>
name|reusableFiles
decl_stmt|;
name|File
name|dir
decl_stmt|;
name|int
name|batchSize
decl_stmt|;
specifier|public
name|PartitionedByteBasedList
parameter_list|(
name|int
name|batchSize
parameter_list|)
throws|throws
name|HiveException
block|{
name|this
operator|.
name|batchSize
operator|=
name|batchSize
expr_stmt|;
name|currentSize
operator|=
literal|0
expr_stmt|;
name|hook
operator|.
name|register
argument_list|(
name|dir
operator|=
name|PartitionedByteBasedList
operator|.
name|createTempDir
argument_list|()
argument_list|)
expr_stmt|;
name|partitions
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBasedList
argument_list|>
argument_list|()
expr_stmt|;
name|partitionOffsets
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|reusableFiles
operator|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
expr_stmt|;
name|addPartition
argument_list|()
expr_stmt|;
block|}
specifier|public
name|PartitionedByteBasedList
parameter_list|()
throws|throws
name|HiveException
block|{
name|this
argument_list|(
name|ByteBasedList
operator|.
name|LARGE_SIZE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|reset
parameter_list|(
name|int
name|startOffset
parameter_list|)
throws|throws
name|HiveException
block|{
name|PTFPersistence
operator|.
name|lock
argument_list|(
name|lock
operator|.
name|writeLock
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|currentSize
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partitions
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|PersistentByteBasedList
name|p
init|=
operator|(
name|PersistentByteBasedList
operator|)
name|partitions
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|reusableFiles
operator|.
name|add
argument_list|(
name|p
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
name|partitionOffsets
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reset
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|partitionOffsets
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|currentSize
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|reusableFiles
operator|.
name|clear
argument_list|()
expr_stmt|;
name|partitionOffsets
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|ByteBasedList
name|partition
range|:
name|partitions
control|)
block|{
name|partition
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|partitions
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|PartitionedByteBasedList
operator|.
name|deleteRecursively
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{       }
name|hook
operator|.
name|unregister
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addPartition
parameter_list|()
throws|throws
name|HiveException
block|{
try|try
block|{
if|if
condition|(
name|partitions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|idx
init|=
name|partitions
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|ByteBasedList
name|bl
init|=
name|partitions
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|File
name|f
decl_stmt|;
if|if
condition|(
name|reusableFiles
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|f
operator|=
name|reusableFiles
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|f
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"wdw"
argument_list|,
literal|null
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
name|PersistentByteBasedList
operator|.
name|store
argument_list|(
name|bl
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|set
argument_list|(
name|idx
argument_list|,
operator|new
name|PersistentByteBasedList
argument_list|(
name|f
argument_list|,
name|bl
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ByteBasedList
name|bl
init|=
operator|new
name|ByteBasedList
argument_list|(
name|currentSize
argument_list|,
name|batchSize
argument_list|)
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|bl
argument_list|)
expr_stmt|;
name|partitionOffsets
operator|.
name|add
argument_list|(
name|currentSize
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
specifier|private
name|ByteBasedList
name|getPartition
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|HiveException
block|{
name|PTFPersistence
operator|.
name|lock
argument_list|(
name|lock
operator|.
name|readLock
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|numSplits
init|=
name|partitions
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numSplits
operator|==
literal|0
condition|)
block|{
return|return
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|int
name|start
init|=
literal|0
decl_stmt|;
name|int
name|end
init|=
name|numSplits
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|start
operator|<
name|end
condition|)
block|{
name|int
name|mid
init|=
operator|(
name|start
operator|+
name|end
operator|+
literal|1
operator|)
operator|>>>
literal|1
decl_stmt|;
name|int
name|val
init|=
name|partitionOffsets
operator|.
name|get
argument_list|(
name|mid
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
name|i
condition|)
block|{
return|return
name|partitions
operator|.
name|get
argument_list|(
name|mid
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|<
name|i
condition|)
block|{
if|if
condition|(
name|end
operator|==
name|mid
condition|)
block|{
return|return
name|partitions
operator|.
name|get
argument_list|(
name|end
argument_list|)
return|;
block|}
name|start
operator|=
name|mid
expr_stmt|;
block|}
else|else
block|{
name|end
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
block|}
return|return
name|partitions
operator|.
name|get
argument_list|(
name|start
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|get
parameter_list|(
name|int
name|i
parameter_list|,
name|Writable
name|wObj
parameter_list|)
throws|throws
name|HiveException
block|{
name|ByteBasedList
name|bl
init|=
name|getPartition
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|bl
operator|.
name|get
argument_list|(
name|i
argument_list|,
name|wObj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|append
parameter_list|(
name|Writable
name|obj
parameter_list|)
throws|throws
name|HiveException
block|{
name|PTFPersistence
operator|.
name|lock
argument_list|(
name|lock
operator|.
name|writeLock
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|partitions
operator|.
name|get
argument_list|(
name|partitions
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|currentSize
operator|+=
literal|1
expr_stmt|;
name|lastModified
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ListFullException
name|le
parameter_list|)
block|{
name|addPartition
argument_list|()
expr_stmt|;
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|get
parameter_list|(
name|int
name|i
parameter_list|,
name|Deserializer
name|deserializer
parameter_list|,
name|Writable
name|wObj
parameter_list|)
throws|throws
name|HiveException
block|{
name|ByteBasedList
name|bl
init|=
name|getPartition
argument_list|(
name|i
argument_list|)
decl_stmt|;
return|return
name|bl
operator|.
name|get
argument_list|(
name|i
argument_list|,
name|deserializer
argument_list|,
name|wObj
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|append
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|OI
parameter_list|,
name|Serializer
name|serializer
parameter_list|)
throws|throws
name|HiveException
block|{
name|PTFPersistence
operator|.
name|lock
argument_list|(
name|lock
operator|.
name|writeLock
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|partitions
operator|.
name|get
argument_list|(
name|partitions
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|append
argument_list|(
name|obj
argument_list|,
name|OI
argument_list|,
name|serializer
argument_list|)
expr_stmt|;
name|currentSize
operator|+=
literal|1
expr_stmt|;
name|lastModified
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ListFullException
name|le
parameter_list|)
block|{
name|addPartition
argument_list|()
expr_stmt|;
name|append
argument_list|(
name|obj
argument_list|,
name|OI
argument_list|,
name|serializer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Writable
argument_list|>
name|iterator
parameter_list|(
name|Writable
name|wObj
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|WIterator
argument_list|(
name|wObj
argument_list|)
return|;
block|}
class|class
name|WIterator
implements|implements
name|Iterator
argument_list|<
name|Writable
argument_list|>
block|{
name|Writable
name|wObj
decl_stmt|;
name|long
name|checkTime
decl_stmt|;
name|int
name|i
decl_stmt|;
name|Iterator
argument_list|<
name|Writable
argument_list|>
name|pIter
decl_stmt|;
name|WIterator
parameter_list|(
name|Writable
name|wObj
parameter_list|)
throws|throws
name|HiveException
block|{
name|this
operator|.
name|wObj
operator|=
name|wObj
expr_stmt|;
name|checkTime
operator|=
name|lastModified
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
name|pIter
operator|=
name|partitions
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|iterator
argument_list|(
name|wObj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|pIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|checkTime
operator|!=
name|lastModified
condition|)
block|{
throw|throw
operator|new
name|ConcurrentModificationException
argument_list|()
throw|;
block|}
try|try
block|{
if|if
condition|(
name|i
operator|<
name|partitions
operator|.
name|size
argument_list|()
condition|)
block|{
name|pIter
operator|=
name|partitions
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
operator|.
name|iterator
argument_list|(
name|wObj
argument_list|)
expr_stmt|;
return|return
name|hasNext
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Writable
name|next
parameter_list|()
block|{
if|if
condition|(
name|checkTime
operator|!=
name|lastModified
condition|)
block|{
throw|throw
operator|new
name|ConcurrentModificationException
argument_list|()
throw|;
block|}
return|return
name|pIter
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
specifier|static
class|class
name|ShutdownHook
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|File
argument_list|>
name|dirs
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|register
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|dirs
operator|.
name|add
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unregister
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|dirs
operator|.
name|remove
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|File
name|dir
range|:
name|dirs
control|)
block|{
name|PartitionedByteBasedList
operator|.
name|deleteRecursively
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ie
parameter_list|)
block|{         }
block|}
block|}
comment|// copied completely from guavar09 source
comment|/**      * Deletes a file or directory and all contents recursively.      *      *<p>      * If the file argument is a symbolic link the link will be deleted but not      * the target of the link. If the argument is a directory, symbolic links      * within the directory will not be followed.      *      * @param file      *            the file to delete      * @throws IOException      *             if an I/O error occurs      * @see #deleteDirectoryContents      */
specifier|public
specifier|static
name|void
name|deleteRecursively
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|deleteDirectoryContents
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete "
operator|+
name|file
argument_list|)
throw|;
block|}
block|}
comment|// copied completely from guavar09 source
comment|/**      * Deletes all the files within a directory. Does not delete the directory      * itself.      *      *<p>      * If the file argument is a symbolic link or there is a symbolic link in      * the path leading to the directory, this method will do nothing. Symbolic      * links within the directory are not followed.      *      * @param directory      *            the directory to delete the contents of      * @throws IllegalArgumentException      *             if the argument is not a directory      * @throws IOException      *             if an I/O error occurs      * @see #deleteRecursively      */
specifier|public
specifier|static
name|void
name|deleteDirectoryContents
parameter_list|(
name|File
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
comment|/*Preconditions.checkArgument(directory.isDirectory(),           "Not a directory: %s", directory);       */
if|if
condition|(
operator|!
name|directory
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Not a directory: %s"
argument_list|,
name|directory
argument_list|)
argument_list|)
throw|;
block|}
comment|// Symbolic links will have different canonical and absolute paths
if|if
condition|(
operator|!
name|directory
operator|.
name|getCanonicalPath
argument_list|()
operator|.
name|equals
argument_list|(
name|directory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|File
index|[]
name|files
init|=
name|directory
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error listing files for "
operator|+
name|directory
argument_list|)
throw|;
block|}
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|deleteRecursively
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
comment|// copied completely from guava to remove dependency on guava
comment|/** Maximum loop count when creating temp directories. */
specifier|private
specifier|static
specifier|final
name|int
name|TEMP_DIR_ATTEMPTS
init|=
literal|10000
decl_stmt|;
specifier|public
specifier|static
name|File
name|createTempDir
parameter_list|()
block|{
name|File
name|baseDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|baseName
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|"-"
decl_stmt|;
for|for
control|(
name|int
name|counter
init|=
literal|0
init|;
name|counter
operator|<
name|TEMP_DIR_ATTEMPTS
condition|;
name|counter
operator|++
control|)
block|{
name|File
name|tempDir
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|baseName
operator|+
name|counter
argument_list|)
decl_stmt|;
if|if
condition|(
name|tempDir
operator|.
name|mkdir
argument_list|()
condition|)
block|{
return|return
name|tempDir
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Failed to create directory within "
operator|+
name|TEMP_DIR_ATTEMPTS
operator|+
literal|" attempts (tried "
operator|+
name|baseName
operator|+
literal|"0 to "
operator|+
name|baseName
operator|+
operator|(
name|TEMP_DIR_ATTEMPTS
operator|-
literal|1
operator|)
operator|+
literal|')'
argument_list|)
throw|;
block|}
block|}
specifier|static
class|class
name|PersistentByteBasedList
extends|extends
name|ByteBasedList
block|{
specifier|private
specifier|static
name|int
name|headerSize
parameter_list|()
block|{
return|return
operator|(
name|Integer
operator|.
name|SIZE
operator|+
name|Integer
operator|.
name|SIZE
operator|+
name|Integer
operator|.
name|SIZE
operator|+
name|Long
operator|.
name|SIZE
operator|)
operator|/
name|Byte
operator|.
name|SIZE
return|;
block|}
specifier|protected
specifier|static
name|void
name|store
parameter_list|(
name|ByteBasedList
name|l
parameter_list|,
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
comment|/*        * write startOffset:bytesUsed:currentSize:lastModified        */
name|int
name|hdrSize
init|=
name|headerSize
argument_list|()
decl_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|hdrSize
argument_list|)
decl_stmt|;
name|buf
operator|.
name|putInt
argument_list|(
name|l
operator|.
name|startOffset
argument_list|)
expr_stmt|;
name|buf
operator|.
name|putInt
argument_list|(
name|l
operator|.
name|bytesUsed
argument_list|)
expr_stmt|;
name|buf
operator|.
name|putInt
argument_list|(
name|l
operator|.
name|currentSize
argument_list|)
expr_stmt|;
name|buf
operator|.
name|putLong
argument_list|(
name|l
operator|.
name|lastModified
argument_list|)
expr_stmt|;
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
comment|/*        * note: could save this space by using Memory-Mapped I/O and directly writing to the MM buffer.        */
name|ByteBuffer
name|offsetB
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
operator|(
name|Integer
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
operator|)
operator|*
literal|2
operator|*
name|l
operator|.
name|currentSize
argument_list|)
decl_stmt|;
name|IntBuffer
name|iB
init|=
name|offsetB
operator|.
name|asIntBuffer
argument_list|()
decl_stmt|;
name|iB
operator|.
name|put
argument_list|(
name|l
operator|.
name|offsetsArray
argument_list|,
literal|0
argument_list|,
name|l
operator|.
name|currentSize
operator|*
literal|2
argument_list|)
expr_stmt|;
name|ByteBuffer
name|bytesB
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|l
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|l
operator|.
name|bytesUsed
argument_list|)
decl_stmt|;
name|ByteBuffer
index|[]
name|bufs
init|=
operator|new
name|ByteBuffer
index|[]
block|{
name|buf
block|,
name|offsetB
block|,
name|bytesB
block|}
decl_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
try|try
block|{
name|FileChannel
name|fc
init|=
name|fos
operator|.
name|getChannel
argument_list|()
decl_stmt|;
while|while
condition|(
name|fc
operator|.
name|write
argument_list|(
name|bufs
argument_list|,
literal|0
argument_list|,
name|bufs
operator|.
name|length
argument_list|)
operator|>
literal|0
condition|)
block|{
empty_stmt|;
block|}
block|}
finally|finally
block|{
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|void
name|load
parameter_list|(
name|ByteBasedList
name|l
parameter_list|,
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|hdr
init|=
name|headerSize
argument_list|()
decl_stmt|;
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
try|try
block|{
name|FileChannel
name|fc
init|=
name|fis
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|ByteBuffer
name|buf0
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|hdr
argument_list|)
decl_stmt|;
while|while
condition|(
name|buf0
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|fc
operator|.
name|read
argument_list|(
name|buf0
argument_list|)
expr_stmt|;
block|}
name|buf0
operator|.
name|flip
argument_list|()
expr_stmt|;
name|l
operator|.
name|startOffset
operator|=
name|buf0
operator|.
name|getInt
argument_list|()
expr_stmt|;
name|l
operator|.
name|bytesUsed
operator|=
name|buf0
operator|.
name|getInt
argument_list|()
expr_stmt|;
name|l
operator|.
name|currentSize
operator|=
name|buf0
operator|.
name|getInt
argument_list|()
expr_stmt|;
name|l
operator|.
name|lastModified
operator|=
name|buf0
operator|.
name|getLong
argument_list|()
expr_stmt|;
comment|/*          * note: could save this space by using Memory-Mapped I/O and directly writing to the MM buffer.          */
name|ByteBuffer
name|offsetB
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
operator|(
name|Integer
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
operator|)
operator|*
literal|2
operator|*
name|l
operator|.
name|currentSize
argument_list|)
decl_stmt|;
name|ByteBuffer
name|bytesB
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|l
operator|.
name|bytesUsed
argument_list|)
decl_stmt|;
name|ByteBuffer
index|[]
name|bufs
init|=
operator|new
name|ByteBuffer
index|[]
block|{
name|offsetB
block|,
name|bytesB
block|}
decl_stmt|;
while|while
condition|(
name|fc
operator|.
name|read
argument_list|(
name|bufs
argument_list|)
operator|>
literal|0
condition|)
block|{
empty_stmt|;
block|}
name|l
operator|.
name|offsetsArray
operator|=
operator|new
name|int
index|[
name|l
operator|.
name|currentSize
operator|*
literal|2
index|]
expr_stmt|;
name|offsetB
operator|.
name|flip
argument_list|()
expr_stmt|;
name|IntBuffer
name|iB
init|=
name|offsetB
operator|.
name|asIntBuffer
argument_list|()
decl_stmt|;
name|iB
operator|.
name|get
argument_list|(
name|l
operator|.
name|offsetsArray
argument_list|)
expr_stmt|;
name|l
operator|.
name|bytes
operator|=
name|bytesB
operator|.
name|array
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|File
name|file
decl_stmt|;
name|SoftReference
argument_list|<
name|ByteBasedList
argument_list|>
name|memList
decl_stmt|;
specifier|protected
name|PersistentByteBasedList
parameter_list|(
name|File
name|file
parameter_list|,
name|ByteBasedList
name|l
parameter_list|)
block|{
name|super
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|memList
operator|=
operator|new
name|SoftReference
argument_list|<
name|ByteBasedList
argument_list|>
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|PersistentByteBasedList
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|this
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|reset
parameter_list|(
name|int
name|startOffset
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Reset on PersistentByteBasedList not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|ByteBasedList
name|list
init|=
name|memList
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|memList
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|PartitionedByteBasedList
operator|.
name|deleteRecursively
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
specifier|private
name|ByteBasedList
name|getList
parameter_list|()
throws|throws
name|HiveException
block|{
name|PTFPersistence
operator|.
name|lock
argument_list|(
name|lock
operator|.
name|readLock
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|ByteBasedList
name|list
init|=
name|memList
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|list
operator|=
operator|new
name|ByteBasedList
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|load
argument_list|(
name|list
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|memList
operator|=
operator|new
name|SoftReference
argument_list|<
name|ByteBasedList
argument_list|>
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
return|return
name|list
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
name|File
name|getFile
parameter_list|()
block|{
return|return
name|file
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
throws|throws
name|HiveException
block|{
return|return
name|getList
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|get
parameter_list|(
name|int
name|i
parameter_list|,
name|Writable
name|wObj
parameter_list|)
throws|throws
name|HiveException
block|{
name|getList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|,
name|wObj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|append
parameter_list|(
name|Writable
name|obj
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot append to a Persisted List"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|get
parameter_list|(
name|int
name|i
parameter_list|,
name|Deserializer
name|deserializer
parameter_list|,
name|Writable
name|wObj
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
name|getList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|,
name|deserializer
argument_list|,
name|wObj
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|append
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|OI
parameter_list|,
name|Serializer
name|serializer
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot append to a Persisted List"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Writable
argument_list|>
name|iterator
parameter_list|(
name|Writable
name|wObj
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
name|getList
argument_list|()
operator|.
name|iterator
argument_list|(
name|wObj
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Object
argument_list|>
name|iterator
parameter_list|(
name|Deserializer
name|deserializer
parameter_list|,
name|Writable
name|wObj
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
name|getList
argument_list|()
operator|.
name|iterator
argument_list|(
name|deserializer
argument_list|,
name|wObj
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dump
parameter_list|(
name|StringBuilder
name|bldr
parameter_list|,
name|Writable
name|wObj
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveException
block|{
name|getList
argument_list|()
operator|.
name|dump
argument_list|(
name|bldr
argument_list|,
name|wObj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dump
parameter_list|(
name|StringBuilder
name|bldr
parameter_list|,
name|Deserializer
name|deserializer
parameter_list|,
name|Writable
name|wObj
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveException
block|{
name|getList
argument_list|()
operator|.
name|dump
argument_list|(
name|bldr
argument_list|,
name|deserializer
argument_list|,
name|wObj
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ByteBufferInputStream
extends|extends
name|InputStream
block|{
name|ByteBuffer
name|buffer
decl_stmt|;
name|int
name|mark
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|void
name|intialize
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
block|}
specifier|public
name|void
name|intialize
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|buffer
operator|=
name|buffer
operator|.
name|duplicate
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|position
argument_list|(
name|off
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|limit
argument_list|(
name|off
operator|+
name|len
argument_list|)
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
name|buffer
operator|.
name|slice
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|buffer
operator|.
name|hasRemaining
argument_list|()
condition|?
operator|(
name|buffer
operator|.
name|get
argument_list|()
operator|&
literal|0xff
operator|)
else|:
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|remaining
init|=
name|buffer
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|len
operator|=
name|len
operator|<=
name|remaining
condition|?
name|len
else|:
name|remaining
expr_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|len
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|mark
parameter_list|(
name|int
name|readAheadLimit
parameter_list|)
block|{
name|mark
operator|=
name|buffer
operator|.
name|position
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
if|if
condition|(
name|mark
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
name|buffer
operator|.
name|position
argument_list|(
name|mark
argument_list|)
expr_stmt|;
name|mark
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ByteBufferOutputStream
extends|extends
name|OutputStream
block|{
name|ByteBuffer
name|buffer
decl_stmt|;
specifier|public
name|void
name|intialize
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
block|}
specifier|public
name|void
name|intialize
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|buffer
operator|=
name|buffer
operator|.
name|duplicate
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|position
argument_list|(
name|off
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|limit
argument_list|(
name|off
operator|+
name|len
argument_list|)
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
name|buffer
operator|.
name|slice
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|buffer
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|int
name|remaining
init|=
name|buffer
operator|.
name|remaining
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|>
name|remaining
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
name|buffer
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|ThreadLocal
argument_list|<
name|ByteArrayIS
argument_list|>
name|bis
init|=
operator|new
name|ThreadLocal
argument_list|<
name|ByteArrayIS
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ByteArrayIS
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|ByteArrayIS
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
name|ThreadLocal
argument_list|<
name|DataIStream
argument_list|>
name|dis
init|=
operator|new
name|ThreadLocal
argument_list|<
name|DataIStream
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|DataIStream
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|DataIStream
argument_list|(
name|bis
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
name|ThreadLocal
argument_list|<
name|ByteArrayOS
argument_list|>
name|bos
init|=
operator|new
name|ThreadLocal
argument_list|<
name|ByteArrayOS
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ByteArrayOS
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|ByteArrayOS
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
name|ThreadLocal
argument_list|<
name|DataOStream
argument_list|>
name|dos
init|=
operator|new
name|ThreadLocal
argument_list|<
name|DataOStream
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|DataOStream
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|DataOStream
argument_list|(
name|bos
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
class|class
name|DataIStream
extends|extends
name|DataInputStream
block|{
specifier|public
name|DataIStream
parameter_list|(
name|ByteArrayIS
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ByteArrayIS
name|getUnderlyingStream
parameter_list|()
block|{
return|return
operator|(
name|ByteArrayIS
operator|)
name|in
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DataOStream
extends|extends
name|DataOutputStream
block|{
specifier|public
name|DataOStream
parameter_list|(
name|ByteArrayOS
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ByteArrayOS
name|getUnderlyingStream
parameter_list|()
block|{
return|return
operator|(
name|ByteArrayOS
operator|)
name|out
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ByteArrayOS
extends|extends
name|ByteArrayOutputStream
block|{
specifier|public
name|ByteArrayOS
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ByteArrayOS
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|byte
index|[]
name|bytearray
parameter_list|()
block|{
return|return
name|buf
return|;
block|}
specifier|public
specifier|final
name|int
name|len
parameter_list|()
block|{
return|return
name|count
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ByteArrayIS
extends|extends
name|ByteArrayInputStream
block|{
specifier|public
name|ByteArrayIS
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|byte
index|[]
name|bytearray
parameter_list|()
block|{
return|return
name|buf
return|;
block|}
specifier|public
specifier|final
name|void
name|setBuffer
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|this
operator|.
name|buf
operator|=
name|buf
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|Math
operator|.
name|min
argument_list|(
name|offset
operator|+
name|len
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|mark
operator|=
name|offset
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|lock
parameter_list|(
name|Lock
name|lock
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|lock
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Operation interrupted"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

