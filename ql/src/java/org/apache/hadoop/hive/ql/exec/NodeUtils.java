begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Simple node iterating utils  */
end_comment

begin_class
specifier|public
class|class
name|NodeUtils
block|{
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|iterateTask
parameter_list|(
name|Collection
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|tasks
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|Function
argument_list|<
name|T
argument_list|>
name|function
parameter_list|)
block|{
name|Set
argument_list|<
name|Task
argument_list|>
name|visited
init|=
operator|new
name|HashSet
argument_list|<
name|Task
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
argument_list|>
name|task
range|:
name|tasks
control|)
block|{
name|iterateTask
argument_list|(
name|task
argument_list|,
name|clazz
argument_list|,
name|function
argument_list|,
name|visited
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|iterateTask
parameter_list|(
name|Task
argument_list|<
name|?
argument_list|>
name|task
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|Function
argument_list|<
name|T
argument_list|>
name|function
parameter_list|,
name|Set
argument_list|<
name|Task
argument_list|>
name|visited
parameter_list|)
block|{
if|if
condition|(
operator|!
name|visited
operator|.
name|add
argument_list|(
name|task
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|task
argument_list|)
condition|)
block|{
name|function
operator|.
name|apply
argument_list|(
name|clazz
operator|.
name|cast
argument_list|(
name|task
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// this is for ConditionalTask
if|if
condition|(
name|task
operator|.
name|getDependentTasks
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
argument_list|>
name|dependent
range|:
name|task
operator|.
name|getDependentTasks
argument_list|()
control|)
block|{
name|iterateTask
argument_list|(
name|dependent
argument_list|,
name|clazz
argument_list|,
name|function
argument_list|,
name|visited
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|iterate
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Node
argument_list|>
name|nodes
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|Function
argument_list|<
name|T
argument_list|>
name|function
parameter_list|)
block|{
name|Set
argument_list|<
name|Node
argument_list|>
name|visited
init|=
operator|new
name|HashSet
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|task
range|:
name|nodes
control|)
block|{
name|iterate
argument_list|(
name|task
argument_list|,
name|clazz
argument_list|,
name|function
argument_list|,
name|visited
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|iterate
parameter_list|(
name|Node
name|node
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|Function
argument_list|<
name|T
argument_list|>
name|function
parameter_list|,
name|Set
argument_list|<
name|Node
argument_list|>
name|visited
parameter_list|)
block|{
if|if
condition|(
operator|!
name|visited
operator|.
name|add
argument_list|(
name|node
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|function
operator|.
name|apply
argument_list|(
name|clazz
operator|.
name|cast
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|getChildren
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Node
name|child
range|:
name|node
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|iterate
argument_list|(
name|child
argument_list|,
name|clazz
argument_list|,
name|function
argument_list|,
name|visited
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
interface|interface
name|Function
parameter_list|<
name|T
parameter_list|>
block|{
name|void
name|apply
parameter_list|(
name|T
name|argument
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

