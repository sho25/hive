begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPredicateList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
operator|.
name|FilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexVisitorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveRelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveSemiJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|AnnotationUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * Planner rule that infers predicates from on a  * {@link org.apache.calcite.rel.core.Join} and creates  * {@link org.apache.calcite.rel.core.Filter}s if those predicates can be pushed  * to its inputs.  *  *<p>Uses {@link org.apache.calcite.rel.metadata.RelMdPredicates} to infer  * the predicates,  * returns them in a {@link org.apache.calcite.plan.RelOptPredicateList}  * and applies them appropriately.  */
end_comment

begin_class
specifier|public
class|class
name|HiveJoinPushTransitivePredicatesRule
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|HiveJoinPushTransitivePredicatesRule
name|INSTANCE_JOIN
init|=
operator|new
name|HiveJoinPushTransitivePredicatesRule
argument_list|(
name|HiveJoin
operator|.
name|class
argument_list|,
name|HiveRelFactories
operator|.
name|HIVE_FILTER_FACTORY
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|HiveJoinPushTransitivePredicatesRule
name|INSTANCE_SEMIJOIN
init|=
operator|new
name|HiveJoinPushTransitivePredicatesRule
argument_list|(
name|HiveSemiJoin
operator|.
name|class
argument_list|,
name|HiveRelFactories
operator|.
name|HIVE_FILTER_FACTORY
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|FilterFactory
name|filterFactory
decl_stmt|;
specifier|public
name|HiveJoinPushTransitivePredicatesRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Join
argument_list|>
name|clazz
parameter_list|,
name|FilterFactory
name|filterFactory
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|clazz
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|filterFactory
operator|=
name|filterFactory
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RelOptPredicateList
name|preds
init|=
name|call
operator|.
name|getMetadataQuery
argument_list|()
operator|.
name|getPulledUpPredicates
argument_list|(
name|join
argument_list|)
decl_stmt|;
name|HiveRulesRegistry
name|registry
init|=
name|call
operator|.
name|getPlanner
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|unwrap
argument_list|(
name|HiveRulesRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
assert|assert
name|registry
operator|!=
literal|null
assert|;
name|RexBuilder
name|rB
init|=
name|join
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|RelNode
name|lChild
init|=
name|join
operator|.
name|getLeft
argument_list|()
decl_stmt|;
name|RelNode
name|rChild
init|=
name|join
operator|.
name|getRight
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|leftPushedPredicates
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|registry
operator|.
name|getPushedPredicates
argument_list|(
name|join
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|leftPreds
init|=
name|getValidPreds
argument_list|(
name|join
operator|.
name|getCluster
argument_list|()
argument_list|,
name|lChild
argument_list|,
name|leftPushedPredicates
argument_list|,
name|preds
operator|.
name|leftInferredPredicates
argument_list|,
name|lChild
operator|.
name|getRowType
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|rightPushedPredicates
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|registry
operator|.
name|getPushedPredicates
argument_list|(
name|join
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|rightPreds
init|=
name|getValidPreds
argument_list|(
name|join
operator|.
name|getCluster
argument_list|()
argument_list|,
name|rChild
argument_list|,
name|rightPushedPredicates
argument_list|,
name|preds
operator|.
name|rightInferredPredicates
argument_list|,
name|rChild
operator|.
name|getRowType
argument_list|()
argument_list|)
decl_stmt|;
name|RexNode
name|newLeftPredicate
init|=
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rB
argument_list|,
name|leftPreds
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RexNode
name|newRightPredicate
init|=
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rB
argument_list|,
name|rightPreds
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|newLeftPredicate
operator|.
name|isAlwaysTrue
argument_list|()
operator|&&
name|newRightPredicate
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|newLeftPredicate
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
name|RelNode
name|curr
init|=
name|lChild
decl_stmt|;
name|lChild
operator|=
name|filterFactory
operator|.
name|createFilter
argument_list|(
name|lChild
argument_list|,
name|newLeftPredicate
operator|.
name|accept
argument_list|(
operator|new
name|RexReplacer
argument_list|(
name|lChild
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|call
operator|.
name|getPlanner
argument_list|()
operator|.
name|onCopy
argument_list|(
name|curr
argument_list|,
name|lChild
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|newRightPredicate
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
name|RelNode
name|curr
init|=
name|rChild
decl_stmt|;
name|rChild
operator|=
name|filterFactory
operator|.
name|createFilter
argument_list|(
name|rChild
argument_list|,
name|newRightPredicate
operator|.
name|accept
argument_list|(
operator|new
name|RexReplacer
argument_list|(
name|rChild
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|call
operator|.
name|getPlanner
argument_list|()
operator|.
name|onCopy
argument_list|(
name|curr
argument_list|,
name|rChild
argument_list|)
expr_stmt|;
block|}
name|RelNode
name|newRel
init|=
name|join
operator|.
name|copy
argument_list|(
name|join
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|,
name|lChild
argument_list|,
name|rChild
argument_list|,
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|,
name|join
operator|.
name|isSemiJoinDone
argument_list|()
argument_list|)
decl_stmt|;
name|call
operator|.
name|getPlanner
argument_list|()
operator|.
name|onCopy
argument_list|(
name|join
argument_list|,
name|newRel
argument_list|)
expr_stmt|;
comment|// Register information about pushed predicates
name|registry
operator|.
name|getPushedPredicates
argument_list|(
name|newRel
argument_list|,
literal|0
argument_list|)
operator|.
name|addAll
argument_list|(
name|leftPushedPredicates
argument_list|)
expr_stmt|;
name|registry
operator|.
name|getPushedPredicates
argument_list|(
name|newRel
argument_list|,
literal|1
argument_list|)
operator|.
name|addAll
argument_list|(
name|rightPushedPredicates
argument_list|)
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newRel
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|getValidPreds
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|predicatesToExclude
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|rexs
parameter_list|,
name|RelDataType
name|rType
parameter_list|)
block|{
name|InputRefValidator
name|validator
init|=
operator|new
name|InputRefValidator
argument_list|(
name|rType
operator|.
name|getFieldList
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|valids
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|(
name|rexs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RexNode
name|rex
range|:
name|rexs
control|)
block|{
try|try
block|{
name|rex
operator|.
name|accept
argument_list|(
name|validator
argument_list|)
expr_stmt|;
name|valids
operator|.
name|add
argument_list|(
name|rex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Util
operator|.
name|FoundOne
name|e
parameter_list|)
block|{
name|Util
operator|.
name|swallow
argument_list|(
name|e
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|// We need to filter i) those that have been pushed already as stored in the join,
comment|// and ii) those that were already in the subtree rooted at child
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|toPush
init|=
name|HiveCalciteUtil
operator|.
name|getPredsNotPushedAlready
argument_list|(
name|predicatesToExclude
argument_list|,
name|child
argument_list|,
name|valids
argument_list|)
decl_stmt|;
return|return
name|toPush
return|;
block|}
specifier|private
name|RexNode
name|getTypeSafePred
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RexNode
name|rex
parameter_list|,
name|RelDataType
name|rType
parameter_list|)
block|{
name|RexNode
name|typeSafeRex
init|=
name|rex
decl_stmt|;
if|if
condition|(
operator|(
name|typeSafeRex
operator|instanceof
name|RexCall
operator|)
operator|&&
name|HiveCalciteUtil
operator|.
name|isComparisonOp
argument_list|(
operator|(
name|RexCall
operator|)
name|typeSafeRex
argument_list|)
condition|)
block|{
name|RexBuilder
name|rb
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|fixedPredElems
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
name|RelDataType
name|commonType
init|=
name|cluster
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|leastRestrictive
argument_list|(
name|RexUtil
operator|.
name|types
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|rex
operator|)
operator|.
name|getOperands
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|RexNode
name|rn
range|:
operator|(
operator|(
name|RexCall
operator|)
name|rex
operator|)
operator|.
name|getOperands
argument_list|()
control|)
block|{
name|fixedPredElems
operator|.
name|add
argument_list|(
name|rb
operator|.
name|ensureType
argument_list|(
name|commonType
argument_list|,
name|rn
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|typeSafeRex
operator|=
name|rb
operator|.
name|makeCall
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|typeSafeRex
operator|)
operator|.
name|getOperator
argument_list|()
argument_list|,
name|fixedPredElems
argument_list|)
expr_stmt|;
block|}
return|return
name|typeSafeRex
return|;
block|}
specifier|private
specifier|static
class|class
name|InputRefValidator
extends|extends
name|RexVisitorImpl
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|types
decl_stmt|;
specifier|protected
name|InputRefValidator
parameter_list|(
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|types
parameter_list|)
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|types
operator|=
name|types
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
if|if
condition|(
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|GenericUDFOPNotNull
operator|.
name|class
argument_list|,
name|Description
operator|.
name|class
argument_list|)
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|RexInputRef
operator|&&
operator|!
name|types
operator|.
name|get
argument_list|(
operator|(
operator|(
name|RexInputRef
operator|)
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|)
block|{
comment|// No need to add not null filter for a constant.
throw|throw
operator|new
name|Util
operator|.
name|FoundOne
argument_list|(
name|call
argument_list|)
throw|;
block|}
block|}
return|return
name|super
operator|.
name|visitCall
argument_list|(
name|call
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitInputRef
parameter_list|(
name|RexInputRef
name|inputRef
parameter_list|)
block|{
if|if
condition|(
operator|!
name|areTypesCompatible
argument_list|(
name|inputRef
operator|.
name|getType
argument_list|()
argument_list|,
name|types
operator|.
name|get
argument_list|(
name|inputRef
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Util
operator|.
name|FoundOne
argument_list|(
name|inputRef
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|visitInputRef
argument_list|(
name|inputRef
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|areTypesCompatible
parameter_list|(
name|RelDataType
name|type1
parameter_list|,
name|RelDataType
name|type2
parameter_list|)
block|{
if|if
condition|(
name|type1
operator|.
name|equals
argument_list|(
name|type2
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|SqlTypeName
name|sqlType1
init|=
name|type1
operator|.
name|getSqlTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|sqlType1
operator|!=
literal|null
condition|)
block|{
return|return
name|sqlType1
operator|.
name|equals
argument_list|(
name|type2
operator|.
name|getSqlTypeName
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
comment|/* Changes the type of the input references to adjust nullability */
specifier|private
specifier|static
class|class
name|RexReplacer
extends|extends
name|RexShuttle
block|{
specifier|private
specifier|final
name|RelNode
name|input
decl_stmt|;
name|RexReplacer
parameter_list|(
name|RelNode
name|input
parameter_list|)
block|{
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitInputRef
parameter_list|(
name|RexInputRef
name|inputRef
parameter_list|)
block|{
return|return
name|RexInputRef
operator|.
name|of
argument_list|(
name|inputRef
operator|.
name|getIndex
argument_list|()
argument_list|,
name|input
operator|.
name|getRowType
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

