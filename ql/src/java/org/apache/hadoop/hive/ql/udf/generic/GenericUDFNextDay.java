begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFNextDay
operator|.
name|DayOfWeek
operator|.
name|FRI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFNextDay
operator|.
name|DayOfWeek
operator|.
name|MON
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFNextDay
operator|.
name|DayOfWeek
operator|.
name|SAT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFNextDay
operator|.
name|DayOfWeek
operator|.
name|SUN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFNextDay
operator|.
name|DayOfWeek
operator|.
name|THU
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFNextDay
operator|.
name|DayOfWeek
operator|.
name|TUE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFNextDay
operator|.
name|DayOfWeek
operator|.
name|WED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
operator|.
name|DATE_GROUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
operator|.
name|STRING_GROUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
operator|.
name|VOID_GROUP
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ConstantObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_comment
comment|/**  * GenericUDFNextDay.  *  * Returns the first date which is later than start_date and named as indicated  *  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"next_day"
argument_list|,
name|value
operator|=
literal|"_FUNC_(start_date, day_of_week) - Returns the first date"
operator|+
literal|" which is later than start_date and named as indicated."
argument_list|,
name|extended
operator|=
literal|"start_date is a string in the format 'yyyy-MM-dd HH:mm:ss' or"
operator|+
literal|" 'yyyy-MM-dd'. day_of_week is day of the week (e.g. Mo, tue, FRIDAY)."
operator|+
literal|"Example:\n "
operator|+
literal|"> SELECT _FUNC_('2015-01-14', 'TU') FROM src LIMIT 1;\n"
operator|+
literal|" '2015-01-20'"
argument_list|)
specifier|public
class|class
name|GenericUDFNextDay
extends|extends
name|GenericUDF
block|{
specifier|private
specifier|transient
name|Converter
index|[]
name|converters
init|=
operator|new
name|Converter
index|[
literal|2
index|]
decl_stmt|;
specifier|private
specifier|transient
name|PrimitiveCategory
index|[]
name|inputTypes
init|=
operator|new
name|PrimitiveCategory
index|[
literal|2
index|]
decl_stmt|;
specifier|private
specifier|final
name|Calendar
name|calendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Text
name|output
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
specifier|private
specifier|transient
name|int
name|dayOfWeekIntConst
decl_stmt|;
specifier|private
specifier|transient
name|boolean
name|isDayOfWeekConst
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|checkArgsSize
argument_list|(
name|arguments
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkArgPrimitive
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkArgPrimitive
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkArgGroups
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|,
name|inputTypes
argument_list|,
name|STRING_GROUP
argument_list|,
name|DATE_GROUP
argument_list|,
name|VOID_GROUP
argument_list|)
expr_stmt|;
name|checkArgGroups
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|,
name|inputTypes
argument_list|,
name|STRING_GROUP
argument_list|,
name|VOID_GROUP
argument_list|)
expr_stmt|;
name|obtainDateConverter
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|,
name|inputTypes
argument_list|,
name|converters
argument_list|)
expr_stmt|;
name|obtainStringConverter
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|,
name|inputTypes
argument_list|,
name|converters
argument_list|)
expr_stmt|;
if|if
condition|(
name|arguments
index|[
literal|1
index|]
operator|instanceof
name|ConstantObjectInspector
condition|)
block|{
name|String
name|dayOfWeek
init|=
name|getConstantStringValue
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|isDayOfWeekConst
operator|=
literal|true
expr_stmt|;
name|dayOfWeekIntConst
operator|=
name|getIntDayOfWeek
argument_list|(
name|dayOfWeek
argument_list|)
expr_stmt|;
block|}
name|ObjectInspector
name|outputOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
return|return
name|outputOI
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|dayOfWeekInt
decl_stmt|;
if|if
condition|(
name|isDayOfWeekConst
condition|)
block|{
name|dayOfWeekInt
operator|=
name|dayOfWeekIntConst
expr_stmt|;
block|}
else|else
block|{
name|String
name|dayOfWeek
init|=
name|getStringValue
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|,
name|converters
argument_list|)
decl_stmt|;
name|dayOfWeekInt
operator|=
name|getIntDayOfWeek
argument_list|(
name|dayOfWeek
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dayOfWeekInt
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Date
name|date
init|=
name|getDateValue
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|,
name|inputTypes
argument_list|,
name|converters
argument_list|)
decl_stmt|;
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|nextDay
argument_list|(
name|date
argument_list|,
name|dayOfWeekInt
argument_list|)
expr_stmt|;
name|Date
name|newDate
init|=
name|calendar
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|output
operator|.
name|set
argument_list|(
name|DateUtils
operator|.
name|getDateFormat
argument_list|()
operator|.
name|format
argument_list|(
name|newDate
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
return|return
name|getStandardDisplayString
argument_list|(
name|getFuncName
argument_list|()
argument_list|,
name|children
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getFuncName
parameter_list|()
block|{
return|return
literal|"next_day"
return|;
block|}
specifier|protected
name|Calendar
name|nextDay
parameter_list|(
name|Date
name|date
parameter_list|,
name|int
name|dayOfWeek
parameter_list|)
block|{
name|calendar
operator|.
name|setTime
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|int
name|currDayOfWeek
init|=
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
name|int
name|daysToAdd
decl_stmt|;
if|if
condition|(
name|currDayOfWeek
operator|<
name|dayOfWeek
condition|)
block|{
name|daysToAdd
operator|=
name|dayOfWeek
operator|-
name|currDayOfWeek
expr_stmt|;
block|}
else|else
block|{
name|daysToAdd
operator|=
literal|7
operator|-
name|currDayOfWeek
operator|+
name|dayOfWeek
expr_stmt|;
block|}
name|calendar
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DATE
argument_list|,
name|daysToAdd
argument_list|)
expr_stmt|;
return|return
name|calendar
return|;
block|}
specifier|protected
name|int
name|getIntDayOfWeek
parameter_list|(
name|String
name|dayOfWeek
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
if|if
condition|(
name|dayOfWeek
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|MON
operator|.
name|matches
argument_list|(
name|dayOfWeek
argument_list|)
condition|)
block|{
return|return
name|Calendar
operator|.
name|MONDAY
return|;
block|}
if|if
condition|(
name|TUE
operator|.
name|matches
argument_list|(
name|dayOfWeek
argument_list|)
condition|)
block|{
return|return
name|Calendar
operator|.
name|TUESDAY
return|;
block|}
if|if
condition|(
name|WED
operator|.
name|matches
argument_list|(
name|dayOfWeek
argument_list|)
condition|)
block|{
return|return
name|Calendar
operator|.
name|WEDNESDAY
return|;
block|}
if|if
condition|(
name|THU
operator|.
name|matches
argument_list|(
name|dayOfWeek
argument_list|)
condition|)
block|{
return|return
name|Calendar
operator|.
name|THURSDAY
return|;
block|}
if|if
condition|(
name|FRI
operator|.
name|matches
argument_list|(
name|dayOfWeek
argument_list|)
condition|)
block|{
return|return
name|Calendar
operator|.
name|FRIDAY
return|;
block|}
if|if
condition|(
name|SAT
operator|.
name|matches
argument_list|(
name|dayOfWeek
argument_list|)
condition|)
block|{
return|return
name|Calendar
operator|.
name|SATURDAY
return|;
block|}
if|if
condition|(
name|SUN
operator|.
name|matches
argument_list|(
name|dayOfWeek
argument_list|)
condition|)
block|{
return|return
name|Calendar
operator|.
name|SUNDAY
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|public
specifier|static
enum|enum
name|DayOfWeek
block|{
name|MON
argument_list|(
literal|"MO"
argument_list|,
literal|"MON"
argument_list|,
literal|"MONDAY"
argument_list|)
block|,
name|TUE
argument_list|(
literal|"TU"
argument_list|,
literal|"TUE"
argument_list|,
literal|"TUESDAY"
argument_list|)
block|,
name|WED
argument_list|(
literal|"WE"
argument_list|,
literal|"WED"
argument_list|,
literal|"WEDNESDAY"
argument_list|)
block|,
name|THU
argument_list|(
literal|"TH"
argument_list|,
literal|"THU"
argument_list|,
literal|"THURSDAY"
argument_list|)
block|,
name|FRI
argument_list|(
literal|"FR"
argument_list|,
literal|"FRI"
argument_list|,
literal|"FRIDAY"
argument_list|)
block|,
name|SAT
argument_list|(
literal|"SA"
argument_list|,
literal|"SAT"
argument_list|,
literal|"SATURDAY"
argument_list|)
block|,
name|SUN
argument_list|(
literal|"SU"
argument_list|,
literal|"SUN"
argument_list|,
literal|"SUNDAY"
argument_list|)
block|;
specifier|private
specifier|final
name|String
name|name2
decl_stmt|;
specifier|private
specifier|final
name|String
name|name3
decl_stmt|;
specifier|private
specifier|final
name|String
name|fullName
decl_stmt|;
specifier|private
name|DayOfWeek
parameter_list|(
name|String
name|name2
parameter_list|,
name|String
name|name3
parameter_list|,
name|String
name|fullName
parameter_list|)
block|{
name|this
operator|.
name|name2
operator|=
name|name2
expr_stmt|;
name|this
operator|.
name|name3
operator|=
name|name3
expr_stmt|;
name|this
operator|.
name|fullName
operator|=
name|fullName
expr_stmt|;
block|}
specifier|public
name|String
name|getName2
parameter_list|()
block|{
return|return
name|name2
return|;
block|}
specifier|public
name|String
name|getName3
parameter_list|()
block|{
return|return
name|name3
return|;
block|}
specifier|public
name|String
name|getFullName
parameter_list|()
block|{
return|return
name|fullName
return|;
block|}
specifier|public
name|boolean
name|matches
parameter_list|(
name|String
name|dayOfWeek
parameter_list|)
block|{
if|if
condition|(
name|dayOfWeek
operator|.
name|length
argument_list|()
operator|==
literal|2
condition|)
block|{
return|return
name|name2
operator|.
name|equalsIgnoreCase
argument_list|(
name|dayOfWeek
argument_list|)
return|;
block|}
if|if
condition|(
name|dayOfWeek
operator|.
name|length
argument_list|()
operator|==
literal|3
condition|)
block|{
return|return
name|name3
operator|.
name|equalsIgnoreCase
argument_list|(
name|dayOfWeek
argument_list|)
return|;
block|}
return|return
name|fullName
operator|.
name|equalsIgnoreCase
argument_list|(
name|dayOfWeek
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

