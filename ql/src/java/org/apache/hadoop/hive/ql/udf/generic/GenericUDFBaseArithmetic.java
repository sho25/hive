begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|HiveCompat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|HiveCompat
operator|.
name|CompatLevel
import|;
end_import

begin_comment
comment|/**  * Wrapper UDF that will instantiate the proper arithmetic UDF (numeric, date, etc)  * depending on the argument types  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|GenericUDFBaseArithmetic
extends|extends
name|GenericUDFBaseBinary
block|{
name|GenericUDF
name|arithmeticOperation
decl_stmt|;
comment|// Values needed for numeric arithmetic UDFs
specifier|protected
name|boolean
name|confLookupNeeded
init|=
literal|true
decl_stmt|;
specifier|protected
name|boolean
name|ansiSqlArithmetic
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
if|if
condition|(
name|arguments
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" requires two arguments."
argument_list|)
throw|;
block|}
comment|// Lookup values needed for numeric arithmetic UDFs
if|if
condition|(
name|confLookupNeeded
condition|)
block|{
name|CompatLevel
name|compatLevel
init|=
name|HiveCompat
operator|.
name|getCompatLevel
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|ansiSqlArithmetic
operator|=
name|compatLevel
operator|.
name|ordinal
argument_list|()
operator|>
name|CompatLevel
operator|.
name|HIVE_0_12
operator|.
name|ordinal
argument_list|()
expr_stmt|;
name|confLookupNeeded
operator|=
literal|false
expr_stmt|;
block|}
comment|// Determine if we are dealing with a numeric or date arithmetic operation
name|boolean
name|isDateTimeOp
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|2
condition|;
operator|++
name|idx
control|)
block|{
switch|switch
condition|(
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
name|idx
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|DATE
case|:
case|case
name|TIMESTAMP
case|:
case|case
name|INTERVAL_YEAR_MONTH
case|:
case|case
name|INTERVAL_DAY_TIME
case|:
name|isDateTimeOp
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|isDateTimeOp
condition|)
block|{
name|arithmeticOperation
operator|=
name|instantiateDTIUDF
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|GenericUDFBaseNumeric
name|numericUDF
init|=
name|instantiateNumericUDF
argument_list|()
decl_stmt|;
comment|// Set values needed for numeric arithmetic UDFs
name|numericUDF
operator|.
name|setAnsiSqlArithmetic
argument_list|(
name|ansiSqlArithmetic
argument_list|)
expr_stmt|;
name|numericUDF
operator|.
name|setConfLookupNeeded
argument_list|(
name|confLookupNeeded
argument_list|)
expr_stmt|;
name|arithmeticOperation
operator|=
name|numericUDF
expr_stmt|;
block|}
return|return
name|arithmeticOperation
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
name|arithmeticOperation
operator|.
name|evaluate
argument_list|(
name|arguments
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|copyToNewInstance
parameter_list|(
name|Object
name|newInstance
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|super
operator|.
name|copyToNewInstance
argument_list|(
name|newInstance
argument_list|)
expr_stmt|;
name|GenericUDFBaseArithmetic
name|other
init|=
operator|(
name|GenericUDFBaseArithmetic
operator|)
name|newInstance
decl_stmt|;
name|other
operator|.
name|confLookupNeeded
operator|=
name|this
operator|.
name|confLookupNeeded
expr_stmt|;
name|other
operator|.
name|ansiSqlArithmetic
operator|=
name|this
operator|.
name|ansiSqlArithmetic
expr_stmt|;
block|}
comment|/**    * Instantiate numeric version of the arithmetic UDF    * @return arithmetic UDF for numeric types    */
specifier|protected
specifier|abstract
name|GenericUDFBaseNumeric
name|instantiateNumericUDF
parameter_list|()
function_decl|;
comment|/**    * Instantiate date-time/interval version of the arithmetic UDF    * @return arithmetic UDF for date-time/interval types    */
specifier|protected
specifier|abstract
name|GenericUDF
name|instantiateDTIUDF
parameter_list|()
function_decl|;
block|}
end_class

end_unit

