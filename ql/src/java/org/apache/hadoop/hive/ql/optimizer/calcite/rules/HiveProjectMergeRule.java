begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
operator|.
name|ProjectMergeRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexOver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveRelFactories
import|;
end_import

begin_comment
comment|/**  * ProjectMergeRule merges a {@link org.apache.calcite.rel.core.Project} into  * another {@link org.apache.calcite.rel.core.Project},  * provided the projects aren't projecting identical sets of input references.  */
end_comment

begin_class
specifier|public
class|class
name|HiveProjectMergeRule
extends|extends
name|ProjectMergeRule
block|{
specifier|public
specifier|static
specifier|final
name|HiveProjectMergeRule
name|INSTANCE
init|=
operator|new
name|HiveProjectMergeRule
argument_list|(
literal|true
argument_list|,
name|HiveRelFactories
operator|.
name|HIVE_BUILDER
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|HiveProjectMergeRule
name|INSTANCE_NO_FORCE
init|=
operator|new
name|HiveProjectMergeRule
argument_list|(
literal|false
argument_list|,
name|HiveRelFactories
operator|.
name|HIVE_BUILDER
argument_list|)
decl_stmt|;
specifier|private
name|HiveProjectMergeRule
parameter_list|(
name|boolean
name|force
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|super
argument_list|(
name|force
argument_list|,
name|relBuilderFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
comment|// Currently we do not support merging windowing functions with other
comment|// windowing functions i.e. embedding windowing functions within each
comment|// other
specifier|final
name|Project
name|topProject
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Project
name|bottomProject
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|RexNode
name|expr
range|:
name|topProject
operator|.
name|getChildExps
argument_list|()
control|)
block|{
if|if
condition|(
name|expr
operator|instanceof
name|RexOver
condition|)
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|positions
init|=
name|HiveCalciteUtil
operator|.
name|getInputRefs
argument_list|(
name|expr
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|pos
range|:
name|positions
control|)
block|{
if|if
condition|(
name|bottomProject
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|instanceof
name|RexOver
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
name|super
operator|.
name|matches
argument_list|(
name|call
argument_list|)
return|;
block|}
block|}
end_class

end_unit

