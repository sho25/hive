begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExprNodeEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExprNodeEvaluatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFLeadLag
operator|.
name|GenericUDFLag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFLeadLag
operator|.
name|GenericUDFLead
import|;
end_import

begin_comment
comment|/*  * When constructing the Evaluator Tree from an ExprNode Tree  * - look for any descendant LeadLag Function Expressions  * - if they are found:  *   - add them to the LLInfo.leadLagExprs and  *   - add a mapping from the Expr Tree root to the LLFunc Expr in LLInfo.mapTopExprToLLFunExprs  */
end_comment

begin_class
specifier|public
class|class
name|WindowingExprNodeEvaluatorFactory
block|{
specifier|public
specifier|static
name|ExprNodeEvaluator
name|get
parameter_list|(
name|LeadLagInfo
name|llInfo
parameter_list|,
name|ExprNodeDesc
name|desc
parameter_list|)
throws|throws
name|HiveException
block|{
name|FindLeadLagFuncExprs
name|visitor
init|=
operator|new
name|FindLeadLagFuncExprs
argument_list|(
name|llInfo
argument_list|,
name|desc
argument_list|)
decl_stmt|;
operator|new
name|ExprNodeWalker
argument_list|(
name|visitor
argument_list|)
operator|.
name|walk
argument_list|(
name|desc
argument_list|)
expr_stmt|;
return|return
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|desc
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|FindLeadLagFuncExprs
block|{
name|ExprNodeDesc
name|topExpr
decl_stmt|;
name|LeadLagInfo
name|llInfo
decl_stmt|;
name|FindLeadLagFuncExprs
parameter_list|(
name|LeadLagInfo
name|llInfo
parameter_list|,
name|ExprNodeDesc
name|topExpr
parameter_list|)
block|{
name|this
operator|.
name|llInfo
operator|=
name|llInfo
expr_stmt|;
name|this
operator|.
name|topExpr
operator|=
name|topExpr
expr_stmt|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|ExprNodeGenericFuncDesc
name|fnExpr
parameter_list|)
throws|throws
name|HiveException
block|{
name|GenericUDF
name|fn
init|=
name|fnExpr
operator|.
name|getGenericUDF
argument_list|()
decl_stmt|;
if|if
condition|(
name|fn
operator|instanceof
name|GenericUDFLead
operator|||
name|fn
operator|instanceof
name|GenericUDFLag
condition|)
block|{
name|llInfo
operator|.
name|addLLFuncExprForTopExpr
argument_list|(
name|topExpr
argument_list|,
name|fnExpr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
class|class
name|ExprNodeWalker
block|{
name|FindLeadLagFuncExprs
name|visitor
decl_stmt|;
specifier|public
name|ExprNodeWalker
parameter_list|(
name|FindLeadLagFuncExprs
name|visitor
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|visitor
operator|=
name|visitor
expr_stmt|;
block|}
specifier|public
name|void
name|walk
parameter_list|(
name|ExprNodeDesc
name|e
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|e
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExprNodeDesc
name|child
range|:
name|children
control|)
block|{
name|walk
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|e
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
name|visitor
operator|.
name|visit
argument_list|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

