begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UnionOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_comment
comment|/**  * This class implements the processor context for Constant Propagate.  *   * ConstantPropagateProcCtx keeps track of propagated constants in a column->const map for each  * operator, enabling constants to be revolved across operators.  */
end_comment

begin_class
specifier|public
class|class
name|ConstantPropagateProcCtx
implements|implements
name|NodeProcessorCtx
block|{
specifier|public
enum|enum
name|ConstantPropagateOption
block|{
name|FULL
block|,
comment|// Do full constant propagation
name|SHORTCUT
block|,
comment|// Only perform expression short-cutting - remove unnecessary AND/OR operators
comment|// if one of the child conditions is true/false.
block|}
empty_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ConstantPropagateProcCtx
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|,
name|Map
argument_list|<
name|ColumnInfo
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|>
name|opToConstantExprs
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|opToDelete
decl_stmt|;
specifier|private
name|ConstantPropagateOption
name|constantPropagateOption
init|=
name|ConstantPropagateOption
operator|.
name|FULL
decl_stmt|;
specifier|public
name|ConstantPropagateProcCtx
parameter_list|()
block|{
name|this
argument_list|(
name|ConstantPropagateOption
operator|.
name|FULL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ConstantPropagateProcCtx
parameter_list|(
name|ConstantPropagateOption
name|option
parameter_list|)
block|{
name|opToConstantExprs
operator|=
operator|new
name|HashMap
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|,
name|Map
argument_list|<
name|ColumnInfo
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|opToDelete
operator|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|constantPropagateOption
operator|=
name|option
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|,
name|Map
argument_list|<
name|ColumnInfo
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|>
name|getOpToConstantExprs
parameter_list|()
block|{
return|return
name|opToConstantExprs
return|;
block|}
comment|/**    * Resolve a ColumnInfo based on given RowResolver.    *     * @param ci    * @param rr    * @param parentRR     * @return    * @throws SemanticException    */
specifier|private
name|ColumnInfo
name|resolve
parameter_list|(
name|ColumnInfo
name|ci
parameter_list|,
name|RowSchema
name|rs
parameter_list|,
name|RowSchema
name|parentRS
parameter_list|)
block|{
comment|// Resolve new ColumnInfo from<tableAlias, alias>
name|String
name|alias
init|=
name|ci
operator|.
name|getAlias
argument_list|()
decl_stmt|;
if|if
condition|(
name|alias
operator|==
literal|null
condition|)
block|{
name|alias
operator|=
name|ci
operator|.
name|getInternalName
argument_list|()
expr_stmt|;
block|}
name|String
name|tblAlias
init|=
name|ci
operator|.
name|getTabAlias
argument_list|()
decl_stmt|;
name|ColumnInfo
name|rci
init|=
name|rs
operator|.
name|getColumnInfo
argument_list|(
name|tblAlias
argument_list|,
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|rci
operator|==
literal|null
operator|&&
name|rs
operator|.
name|getTableNames
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|parentRS
operator|.
name|getTableNames
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|rci
operator|=
name|rs
operator|.
name|getColumnInfo
argument_list|(
name|rs
operator|.
name|getTableNames
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|alias
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rci
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resolved "
operator|+
name|ci
operator|.
name|getTabAlias
argument_list|()
operator|+
literal|"."
operator|+
name|ci
operator|.
name|getAlias
argument_list|()
operator|+
literal|" as "
operator|+
name|rci
operator|.
name|getTabAlias
argument_list|()
operator|+
literal|"."
operator|+
name|rci
operator|.
name|getAlias
argument_list|()
operator|+
literal|" with rs: "
operator|+
name|rs
argument_list|)
expr_stmt|;
return|return
name|rci
return|;
block|}
comment|/**    * Get propagated constant map from parents.    *     * Traverse all parents of current operator, if there is propagated constant (determined by    * assignment expression like column=constant value), resolve the column using RowResolver and add    * it to current constant map.    *     * @param op    *        operator getting the propagated constants.    * @return map of ColumnInfo to ExprNodeDesc. The values of that map must be either    *         ExprNodeConstantDesc or ExprNodeNullDesc.    */
specifier|public
name|Map
argument_list|<
name|ColumnInfo
argument_list|,
name|ExprNodeDesc
argument_list|>
name|getPropagatedConstants
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|op
parameter_list|)
block|{
name|Map
argument_list|<
name|ColumnInfo
argument_list|,
name|ExprNodeDesc
argument_list|>
name|constants
init|=
operator|new
name|HashMap
argument_list|<
name|ColumnInfo
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|getSchema
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|constants
return|;
block|}
name|RowSchema
name|rs
init|=
name|op
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting constants of op:"
operator|+
name|op
operator|+
literal|" with rs:"
operator|+
name|rs
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|getParentOperators
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|constants
return|;
block|}
if|if
condition|(
name|op
operator|instanceof
name|UnionOperator
condition|)
block|{
name|String
name|alias
init|=
name|rs
operator|.
name|getSignature
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTabAlias
argument_list|()
decl_stmt|;
comment|// find intersection
name|Map
argument_list|<
name|ColumnInfo
argument_list|,
name|ExprNodeDesc
argument_list|>
name|intersection
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|parent
range|:
name|op
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|ColumnInfo
argument_list|,
name|ExprNodeDesc
argument_list|>
name|unionConst
init|=
name|opToConstantExprs
operator|.
name|get
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Constant of op "
operator|+
name|parent
operator|.
name|getOperatorId
argument_list|()
operator|+
literal|" "
operator|+
name|unionConst
argument_list|)
expr_stmt|;
if|if
condition|(
name|intersection
operator|==
literal|null
condition|)
block|{
name|intersection
operator|=
operator|new
name|HashMap
argument_list|<
name|ColumnInfo
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ColumnInfo
argument_list|,
name|ExprNodeDesc
argument_list|>
name|e
range|:
name|unionConst
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ColumnInfo
name|ci
init|=
operator|new
name|ColumnInfo
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|ci
operator|.
name|setTabAlias
argument_list|(
name|alias
argument_list|)
expr_stmt|;
name|intersection
operator|.
name|put
argument_list|(
name|ci
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|ColumnInfo
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|>
name|itr
init|=
name|intersection
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|ColumnInfo
argument_list|,
name|ExprNodeDesc
argument_list|>
name|e
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ColumnInfo
argument_list|,
name|ExprNodeDesc
argument_list|>
name|f
range|:
name|opToConstantExprs
operator|.
name|get
argument_list|(
name|parent
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getInternalName
argument_list|()
operator|.
name|equals
argument_list|(
name|f
operator|.
name|getKey
argument_list|()
operator|.
name|getInternalName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|isSame
argument_list|(
name|f
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|itr
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|intersection
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|intersection
return|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Propagated union constants:"
operator|+
name|intersection
argument_list|)
expr_stmt|;
return|return
name|intersection
return|;
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|parent
range|:
name|op
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|ColumnInfo
argument_list|,
name|ExprNodeDesc
argument_list|>
name|c
init|=
name|opToConstantExprs
operator|.
name|get
argument_list|(
name|parent
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ColumnInfo
argument_list|,
name|ExprNodeDesc
argument_list|>
name|e
range|:
name|c
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ColumnInfo
name|ci
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ColumnInfo
name|rci
init|=
literal|null
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|rci
operator|=
name|resolve
argument_list|(
name|ci
argument_list|,
name|rs
argument_list|,
name|parent
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rci
operator|!=
literal|null
condition|)
block|{
name|constants
operator|.
name|put
argument_list|(
name|rci
argument_list|,
name|constant
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Can't resolve "
operator|+
name|ci
operator|.
name|getTabAlias
argument_list|()
operator|+
literal|"."
operator|+
name|ci
operator|.
name|getAlias
argument_list|()
operator|+
literal|"("
operator|+
name|ci
operator|.
name|getInternalName
argument_list|()
operator|+
literal|") from rs:"
operator|+
name|rs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Offerring constants "
operator|+
name|constants
operator|.
name|keySet
argument_list|()
operator|+
literal|" to operator "
operator|+
name|op
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|constants
return|;
block|}
specifier|public
name|void
name|addOpToDelete
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|op
parameter_list|)
block|{
name|opToDelete
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|getOpToDelete
parameter_list|()
block|{
return|return
name|opToDelete
return|;
block|}
specifier|public
name|ConstantPropagateOption
name|getConstantPropagateOption
parameter_list|()
block|{
return|return
name|constantPropagateOption
return|;
block|}
specifier|public
name|void
name|setConstantPropagateOption
parameter_list|(
name|ConstantPropagateOption
name|constantPropagateOption
parameter_list|)
block|{
name|this
operator|.
name|constantPropagateOption
operator|=
name|constantPropagateOption
expr_stmt|;
block|}
block|}
end_class

end_unit

