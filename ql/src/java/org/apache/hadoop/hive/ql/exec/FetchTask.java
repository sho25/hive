begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|fetchWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|MetadataTypedColumnsetSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * FetchTask implementation  **/
end_comment

begin_class
specifier|public
class|class
name|FetchTask
extends|extends
name|Task
argument_list|<
name|fetchWork
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|int
name|MAX_ROWS
init|=
literal|100
decl_stmt|;
specifier|public
name|void
name|initialize
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|super
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|splitNum
operator|=
literal|0
expr_stmt|;
name|currRecReader
operator|=
literal|null
expr_stmt|;
try|try
block|{
comment|// Create a file system handle
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|serde
operator|=
name|work
operator|.
name|getDeserializerClass
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|work
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|,
name|ExecDriver
operator|.
name|class
argument_list|)
expr_stmt|;
name|Path
name|inputP
init|=
name|work
operator|.
name|getSrcDir
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|inputP
argument_list|)
condition|)
block|{
name|empty
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|empty
operator|=
literal|true
expr_stmt|;
name|FileStatus
index|[]
name|fStats
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|inputP
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|fStat
range|:
name|fStats
control|)
block|{
if|if
condition|(
name|fStat
operator|.
name|getLen
argument_list|()
operator|>
literal|0
condition|)
block|{
name|empty
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|empty
condition|)
return|return;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|inputP
argument_list|)
expr_stmt|;
name|inputFormat
operator|=
name|getInputFormatFromCache
argument_list|(
name|work
operator|.
name|getInputFormatClass
argument_list|()
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|inputSplits
operator|=
name|inputFormat
operator|.
name|getSplits
argument_list|(
name|job
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mSerde
operator|=
operator|new
name|MetadataTypedColumnsetSerDe
argument_list|()
expr_stmt|;
name|Properties
name|mSerdeProp
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|mSerdeProp
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|""
operator|+
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|mSerdeProp
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_NULL_FORMAT
argument_list|,
literal|"NULL"
argument_list|)
expr_stmt|;
name|mSerde
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|mSerdeProp
argument_list|)
expr_stmt|;
name|totalRows
operator|=
literal|0
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Bail out ungracefully - we should never hit
comment|// this here - but would have hit it in SemanticAnalyzer
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|execute
parameter_list|()
block|{
assert|assert
literal|false
assert|;
return|return
literal|0
return|;
block|}
comment|/**    * A cache of InputFormat instances.    */
specifier|private
specifier|static
name|Map
argument_list|<
name|Class
argument_list|,
name|InputFormat
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
argument_list|>
name|inputFormats
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|,
name|InputFormat
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|static
name|InputFormat
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|getInputFormatFromCache
parameter_list|(
name|Class
name|inputFormatClass
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|inputFormats
operator|.
name|containsKey
argument_list|(
name|inputFormatClass
argument_list|)
condition|)
block|{
try|try
block|{
name|InputFormat
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|newInstance
init|=
operator|(
name|InputFormat
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|inputFormatClass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|inputFormats
operator|.
name|put
argument_list|(
name|inputFormatClass
argument_list|,
name|newInstance
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create an instance of InputFormat class "
operator|+
name|inputFormatClass
operator|.
name|getName
argument_list|()
operator|+
literal|" as specified in mapredWork!"
argument_list|)
throw|;
block|}
block|}
return|return
name|inputFormats
operator|.
name|get
argument_list|(
name|inputFormatClass
argument_list|)
return|;
block|}
specifier|private
name|int
name|splitNum
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|RecordReader
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|currRecReader
decl_stmt|;
specifier|private
name|InputSplit
index|[]
name|inputSplits
decl_stmt|;
specifier|private
name|InputFormat
name|inputFormat
decl_stmt|;
specifier|private
name|JobConf
name|job
decl_stmt|;
specifier|private
name|WritableComparable
name|key
decl_stmt|;
specifier|private
name|Writable
name|value
decl_stmt|;
specifier|private
name|Deserializer
name|serde
decl_stmt|;
specifier|private
name|MetadataTypedColumnsetSerDe
name|mSerde
decl_stmt|;
specifier|private
name|int
name|totalRows
decl_stmt|;
specifier|private
name|boolean
name|empty
decl_stmt|;
specifier|private
name|RecordReader
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|getRecordReader
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|splitNum
operator|>=
name|inputSplits
operator|.
name|length
condition|)
return|return
literal|null
return|;
name|currRecReader
operator|=
name|inputFormat
operator|.
name|getRecordReader
argument_list|(
name|inputSplits
index|[
name|splitNum
operator|++
index|]
argument_list|,
name|job
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
expr_stmt|;
name|key
operator|=
name|currRecReader
operator|.
name|createKey
argument_list|()
expr_stmt|;
name|value
operator|=
name|currRecReader
operator|.
name|createValue
argument_list|()
expr_stmt|;
return|return
name|currRecReader
return|;
block|}
specifier|public
name|boolean
name|fetch
parameter_list|(
name|Vector
argument_list|<
name|String
argument_list|>
name|res
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|empty
condition|)
return|return
literal|false
return|;
name|int
name|numRows
init|=
literal|0
decl_stmt|;
name|int
name|rowsRet
init|=
name|MAX_ROWS
decl_stmt|;
if|if
condition|(
operator|(
name|work
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|)
operator|&&
operator|(
operator|(
name|work
operator|.
name|getLimit
argument_list|()
operator|-
name|totalRows
operator|)
operator|<
name|rowsRet
operator|)
condition|)
name|rowsRet
operator|=
name|work
operator|.
name|getLimit
argument_list|()
operator|-
name|totalRows
expr_stmt|;
if|if
condition|(
name|rowsRet
operator|<=
literal|0
condition|)
block|{
if|if
condition|(
name|currRecReader
operator|!=
literal|null
condition|)
name|currRecReader
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
while|while
condition|(
name|numRows
operator|<
name|rowsRet
condition|)
block|{
if|if
condition|(
name|currRecReader
operator|==
literal|null
condition|)
block|{
name|currRecReader
operator|=
name|getRecordReader
argument_list|()
expr_stmt|;
if|if
condition|(
name|currRecReader
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|numRows
operator|==
literal|0
condition|)
return|return
literal|false
return|;
name|totalRows
operator|+=
name|numRows
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
name|boolean
name|ret
init|=
name|currRecReader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
condition|)
block|{
name|Object
name|obj
init|=
name|serde
operator|.
name|deserialize
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|res
operator|.
name|add
argument_list|(
operator|(
operator|(
name|Text
operator|)
name|mSerde
operator|.
name|serialize
argument_list|(
name|obj
argument_list|,
name|serde
operator|.
name|getObjectInspector
argument_list|()
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|numRows
operator|++
expr_stmt|;
block|}
else|else
block|{
name|currRecReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|currRecReader
operator|=
name|getRecordReader
argument_list|()
expr_stmt|;
if|if
condition|(
name|currRecReader
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|numRows
operator|==
literal|0
condition|)
return|return
literal|false
return|;
name|totalRows
operator|+=
name|numRows
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|key
operator|=
name|currRecReader
operator|.
name|createKey
argument_list|()
expr_stmt|;
name|value
operator|=
name|currRecReader
operator|.
name|createValue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|totalRows
operator|+=
name|numRows
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Failed with exception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"\n"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

