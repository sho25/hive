begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FetchWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|StageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|DelimitedJSONSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|InspectableObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * FetchTask implementation.  **/
end_comment

begin_class
specifier|public
class|class
name|FetchTask
extends|extends
name|Task
argument_list|<
name|FetchWork
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|int
name|maxRows
init|=
literal|100
decl_stmt|;
specifier|private
name|FetchOperator
name|ftOp
decl_stmt|;
specifier|private
name|SerDe
name|mSerde
decl_stmt|;
specifier|private
name|int
name|totalRows
decl_stmt|;
specifier|public
name|FetchTask
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|QueryPlan
name|queryPlan
parameter_list|,
name|DriverContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|queryPlan
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Create a file system handle
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|,
name|ExecDriver
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|serdeName
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEFETCHOUTPUTSERDE
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|SerDe
argument_list|>
name|serdeClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|serdeName
argument_list|,
literal|true
argument_list|,
name|JavaUtils
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|SerDe
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// cast only needed for Hadoop 0.17 compatibility
name|mSerde
operator|=
operator|(
name|SerDe
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|serdeClass
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Properties
name|serdeProp
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// this is the default serialization format
if|if
condition|(
name|mSerde
operator|instanceof
name|DelimitedJSONSerDe
condition|)
block|{
name|serdeProp
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|""
operator|+
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|serdeProp
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_NULL_FORMAT
argument_list|,
name|work
operator|.
name|getSerializationNullFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mSerde
operator|.
name|initialize
argument_list|(
name|job
argument_list|,
name|serdeProp
argument_list|)
expr_stmt|;
name|ftOp
operator|=
operator|new
name|FetchOperator
argument_list|(
name|work
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Bail out ungracefully - we should never hit
comment|// this here - but would have hit it in SemanticAnalyzer
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|(
name|DriverContext
name|driverContext
parameter_list|)
block|{
assert|assert
literal|false
assert|;
return|return
literal|0
return|;
block|}
comment|/**    * Return the tableDesc of the fetchWork.    */
specifier|public
name|TableDesc
name|getTblDesc
parameter_list|()
block|{
return|return
name|work
operator|.
name|getTblDesc
argument_list|()
return|;
block|}
comment|/**    * Return the maximum number of rows returned by fetch.    */
specifier|public
name|int
name|getMaxRows
parameter_list|()
block|{
return|return
name|maxRows
return|;
block|}
comment|/**    * Set the maximum number of rows returned by fetch.    */
specifier|public
name|void
name|setMaxRows
parameter_list|(
name|int
name|maxRows
parameter_list|)
block|{
name|this
operator|.
name|maxRows
operator|=
name|maxRows
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|fetch
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|int
name|numRows
init|=
literal|0
decl_stmt|;
name|int
name|rowsRet
init|=
name|maxRows
decl_stmt|;
if|if
condition|(
operator|(
name|work
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|)
operator|&&
operator|(
operator|(
name|work
operator|.
name|getLimit
argument_list|()
operator|-
name|totalRows
operator|)
operator|<
name|rowsRet
operator|)
condition|)
block|{
name|rowsRet
operator|=
name|work
operator|.
name|getLimit
argument_list|()
operator|-
name|totalRows
expr_stmt|;
block|}
if|if
condition|(
name|rowsRet
operator|<=
literal|0
condition|)
block|{
name|ftOp
operator|.
name|clearFetchContext
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
while|while
condition|(
name|numRows
operator|<
name|rowsRet
condition|)
block|{
name|InspectableObject
name|io
init|=
name|ftOp
operator|.
name|getNextRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|io
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|numRows
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|totalRows
operator|+=
name|numRows
expr_stmt|;
return|return
literal|true
return|;
block|}
name|res
operator|.
name|add
argument_list|(
operator|(
operator|(
name|Text
operator|)
name|mSerde
operator|.
name|serialize
argument_list|(
name|io
operator|.
name|o
argument_list|,
name|io
operator|.
name|oi
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|numRows
operator|++
expr_stmt|;
block|}
name|totalRows
operator|+=
name|numRows
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|StageType
name|getType
parameter_list|()
block|{
return|return
name|StageType
operator|.
name|FETCH
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"FETCH"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|localizeMRTmpFilesImpl
parameter_list|(
name|Context
name|ctx
parameter_list|)
block|{
name|String
name|s
init|=
name|work
operator|.
name|getTblDir
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|s
operator|!=
literal|null
operator|)
operator|&&
name|ctx
operator|.
name|isMRTmpFileURI
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|work
operator|.
name|setTblDir
argument_list|(
name|ctx
operator|.
name|localizeMRTmpFileURI
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|ls
init|=
name|work
operator|.
name|getPartDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|ls
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|localizePaths
argument_list|(
name|ls
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Clear the Fetch Operator.    *    * @throws HiveException    */
specifier|public
name|void
name|clearFetch
parameter_list|()
throws|throws
name|HiveException
block|{
if|if
condition|(
literal|null
operator|!=
name|ftOp
condition|)
block|{
name|ftOp
operator|.
name|clearFetchContext
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

