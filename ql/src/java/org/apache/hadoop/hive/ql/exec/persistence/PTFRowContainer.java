begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|FSRecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveSequenceFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PTFDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinarySerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileRecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_comment
comment|/**  * Extends the RowContainer functionality to provide random access<code>getAt(i)</code>.  * It extends RowContainer behavior in the following ways:  *<ol>  *<li> You must continue to call<b>first</b> to signal the transition from writing to the  * Container to reading from it.  *<li> As rows are being added, positions at which a<i>spill</i> occurs is captured as a  * BlockInfo object. At this point it captures the offset in the File at which the current  * Block will be written.  *<li> When first is called: we associate with each BlockInfo the File Split that it  * occurs in.  *<li> So in order to read a random row from the Container we do the following:  *<ul>  *<li> Convert the row index into a block number. This is easy because all blocks are  * the same size, given by the<code>blockSize</code>  *<li> The corresponding BlockInfo tells us the Split that this block starts in. Also  * by looking at the next Block in the BlockInfos list, we know which Split this block ends in.  *<li> So we arrange to read all the Splits that contain rows for this block. For the first  * Split we seek to the startOffset that we captured in BlockInfo.  *<li> So after reading the Splits, all rows in this block are in the 'currentReadBlock'  *</ul>  *<li> We track the span of the currentReadBlock, using  *<code>currentReadBlockStartRow,blockSize</code>. So if a row is requested in this span,  * we don't need to read rows from disk.  *<li> If the requested row is in the 'last' block; we point the currentReadBlock to  * the currentWriteBlock; the same as what RowContainer does.  *<li> the<code>getAt</code> leaves the Container in the same state as a  *<code>next</code> call; so a getAt and next calls can be interspersed.  *</ol>  */
end_comment

begin_class
specifier|public
class|class
name|PTFRowContainer
parameter_list|<
name|Row
extends|extends
name|List
parameter_list|<
name|Object
parameter_list|>
parameter_list|>
extends|extends
name|RowContainer
argument_list|<
name|Row
argument_list|>
block|{
name|ArrayList
argument_list|<
name|BlockInfo
argument_list|>
name|blockInfos
decl_stmt|;
name|int
name|currentReadBlockStartRow
decl_stmt|;
specifier|public
name|PTFRowContainer
parameter_list|(
name|int
name|bs
parameter_list|,
name|Configuration
name|jc
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
argument_list|(
name|bs
argument_list|,
name|jc
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
name|blockInfos
operator|=
operator|new
name|ArrayList
argument_list|<
name|PTFRowContainer
operator|.
name|BlockInfo
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|Row
name|t
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|willSpill
argument_list|()
condition|)
block|{
name|setupWriter
argument_list|()
expr_stmt|;
name|PTFRecordWriter
name|rw
init|=
operator|(
name|PTFRecordWriter
operator|)
name|getRecordWriter
argument_list|()
decl_stmt|;
name|BlockInfo
name|blkInfo
init|=
operator|new
name|BlockInfo
argument_list|()
decl_stmt|;
try|try
block|{
name|blkInfo
operator|.
name|startOffset
operator|=
name|rw
operator|.
name|outStream
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|blockInfos
operator|.
name|add
argument_list|(
name|blkInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|clear
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|super
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Row
name|first
parameter_list|()
throws|throws
name|HiveException
block|{
name|Row
name|r
init|=
name|super
operator|.
name|first
argument_list|()
decl_stmt|;
if|if
condition|(
name|blockInfos
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|InputSplit
index|[]
name|inputSplits
init|=
name|getInputSplits
argument_list|()
decl_stmt|;
name|FileSplit
name|fS
init|=
literal|null
decl_stmt|;
name|BlockInfo
name|bI
init|=
name|blockInfos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|bI
operator|.
name|startingSplit
operator|=
literal|0
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
name|bI
operator|=
name|i
operator|<
name|blockInfos
operator|.
name|size
argument_list|()
condition|?
name|blockInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
else|:
literal|null
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|inputSplits
operator|.
name|length
operator|&&
name|bI
operator|!=
literal|null
condition|;
name|j
operator|++
control|)
block|{
name|fS
operator|=
operator|(
name|FileSplit
operator|)
name|inputSplits
index|[
name|j
index|]
expr_stmt|;
while|while
condition|(
name|bI
operator|!=
literal|null
operator|&&
name|bI
operator|.
name|startOffset
operator|<
name|fS
operator|.
name|getStart
argument_list|()
condition|)
block|{
name|bI
operator|.
name|startingSplit
operator|=
name|j
operator|-
literal|1
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|bI
operator|=
name|i
operator|<
name|blockInfos
operator|.
name|size
argument_list|()
condition|?
name|blockInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
block|}
while|while
condition|(
name|i
operator|<
name|blockInfos
operator|.
name|size
argument_list|()
condition|)
block|{
name|bI
operator|=
name|blockInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|bI
operator|.
name|startingSplit
operator|=
name|inputSplits
operator|.
name|length
operator|-
literal|1
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
name|currentReadBlockStartRow
operator|=
literal|0
expr_stmt|;
return|return
name|r
return|;
block|}
annotation|@
name|Override
specifier|public
name|Row
name|next
parameter_list|()
throws|throws
name|HiveException
block|{
name|boolean
name|endOfCurrBlock
init|=
name|endOfCurrentReadBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|endOfCurrBlock
condition|)
block|{
name|currentReadBlockStartRow
operator|+=
name|getCurrentReadBlockSize
argument_list|()
expr_stmt|;
block|}
return|return
name|super
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
throws|throws
name|HiveException
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resetReadBlocks
argument_list|()
expr_stmt|;
name|blockInfos
operator|=
operator|new
name|ArrayList
argument_list|<
name|PTFRowContainer
operator|.
name|BlockInfo
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|HiveException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|blockInfos
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|Row
name|getAt
parameter_list|(
name|int
name|rowIdx
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|blockSize
init|=
name|getBlockSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|rowIdx
operator|<
name|currentReadBlockStartRow
operator|||
name|rowIdx
operator|>=
name|currentReadBlockStartRow
operator|+
name|blockSize
condition|)
block|{
name|readBlock
argument_list|(
name|getBlockNum
argument_list|(
name|rowIdx
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|getReadBlockRow
argument_list|(
name|rowIdx
operator|-
name|currentReadBlockStartRow
argument_list|)
return|;
block|}
specifier|private
name|int
name|numBlocks
parameter_list|()
block|{
return|return
name|blockInfos
operator|.
name|size
argument_list|()
operator|+
literal|1
return|;
block|}
specifier|private
name|int
name|getBlockNum
parameter_list|(
name|int
name|rowIdx
parameter_list|)
block|{
name|int
name|blockSize
init|=
name|getBlockSize
argument_list|()
decl_stmt|;
return|return
name|rowIdx
operator|/
name|blockSize
return|;
block|}
specifier|private
name|void
name|readBlock
parameter_list|(
name|int
name|blockNum
parameter_list|)
throws|throws
name|HiveException
block|{
name|currentReadBlockStartRow
operator|=
name|getBlockSize
argument_list|()
operator|*
name|blockNum
expr_stmt|;
if|if
condition|(
name|blockNum
operator|==
name|numBlocks
argument_list|()
operator|-
literal|1
condition|)
block|{
name|setWriteBlockAsReadBlock
argument_list|()
expr_stmt|;
return|return;
block|}
name|resetCurrentReadBlockToFirstReadBlock
argument_list|()
expr_stmt|;
name|BlockInfo
name|bI
init|=
name|blockInfos
operator|.
name|get
argument_list|(
name|blockNum
argument_list|)
decl_stmt|;
name|int
name|startSplit
init|=
name|bI
operator|.
name|startingSplit
decl_stmt|;
name|int
name|endSplit
init|=
name|startSplit
decl_stmt|;
if|if
condition|(
name|blockNum
operator|!=
name|blockInfos
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|endSplit
operator|=
name|blockInfos
operator|.
name|get
argument_list|(
name|blockNum
operator|+
literal|1
argument_list|)
operator|.
name|startingSplit
expr_stmt|;
block|}
try|try
block|{
name|int
name|readIntoOffset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startSplit
init|;
name|i
operator|<=
name|endSplit
condition|;
name|i
operator|++
control|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
name|rr
init|=
name|setReaderAtSplit
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|startSplit
condition|)
block|{
operator|(
operator|(
name|PTFSequenceFileRecordReader
operator|)
name|rr
operator|)
operator|.
name|seek
argument_list|(
name|bI
operator|.
name|startOffset
argument_list|)
expr_stmt|;
block|}
name|nextBlock
argument_list|(
name|readIntoOffset
argument_list|)
expr_stmt|;
name|readIntoOffset
operator|=
name|getCurrentReadBlockSize
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|clear
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|HiveException
condition|)
block|{
throw|throw
operator|(
name|HiveException
operator|)
name|e
throw|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|BlockInfo
block|{
comment|// position in file where the first row in this block starts
name|long
name|startOffset
decl_stmt|;
comment|// inputSplitNum that contains the first row in this block.
name|int
name|startingSplit
decl_stmt|;
block|}
specifier|public
specifier|static
name|TableDesc
name|createTableDesc
parameter_list|(
name|StructObjectInspector
name|oI
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|PTFDeserializer
operator|.
name|addOIPropertiestoSerDePropsMap
argument_list|(
name|oI
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|String
name|colNames
init|=
name|props
operator|.
name|get
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|)
decl_stmt|;
name|String
name|colTypes
init|=
name|props
operator|.
name|get
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|)
decl_stmt|;
name|TableDesc
name|tblDesc
init|=
operator|new
name|TableDesc
argument_list|(
name|PTFSequenceFileInputFormat
operator|.
name|class
argument_list|,
name|PTFHiveSequenceFileOutputFormat
operator|.
name|class
argument_list|,
name|Utilities
operator|.
name|makeProperties
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|""
operator|+
name|Utilities
operator|.
name|ctrlaCode
argument_list|,
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|colNames
operator|.
name|toString
argument_list|()
argument_list|,
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|colTypes
operator|.
name|toString
argument_list|()
argument_list|,
name|serdeConstants
operator|.
name|SERIALIZATION_LIB
argument_list|,
name|LazyBinarySerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|tblDesc
return|;
block|}
specifier|private
specifier|static
class|class
name|PTFRecordWriter
implements|implements
name|FSRecordWriter
block|{
name|BytesWritable
name|EMPTY_KEY
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
name|SequenceFile
operator|.
name|Writer
name|outStream
decl_stmt|;
specifier|public
name|PTFRecordWriter
parameter_list|(
name|SequenceFile
operator|.
name|Writer
name|outStream
parameter_list|)
block|{
name|this
operator|.
name|outStream
operator|=
name|outStream
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|Writable
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|outStream
operator|.
name|append
argument_list|(
name|EMPTY_KEY
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|IOException
block|{
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PTFHiveSequenceFileOutputFormat
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|HiveSequenceFileOutputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|FSRecordWriter
name|getHiveRecordWriter
parameter_list|(
name|JobConf
name|jc
parameter_list|,
name|Path
name|finalOutPath
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|valueClass
parameter_list|,
name|boolean
name|isCompressed
parameter_list|,
name|Properties
name|tableProperties
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|finalOutPath
operator|.
name|getFileSystem
argument_list|(
name|jc
argument_list|)
decl_stmt|;
specifier|final
name|SequenceFile
operator|.
name|Writer
name|outStream
init|=
name|Utilities
operator|.
name|createSequenceWriter
argument_list|(
name|jc
argument_list|,
name|fs
argument_list|,
name|finalOutPath
argument_list|,
name|BytesWritable
operator|.
name|class
argument_list|,
name|valueClass
argument_list|,
name|isCompressed
argument_list|)
decl_stmt|;
return|return
operator|new
name|PTFRecordWriter
argument_list|(
name|outStream
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PTFSequenceFileInputFormat
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|SequenceFileInputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|public
name|PTFSequenceFileInputFormat
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|reporter
operator|.
name|setStatus
argument_list|(
name|split
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|PTFSequenceFileRecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|job
argument_list|,
operator|(
name|FileSplit
operator|)
name|split
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PTFSequenceFileRecordReader
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|SequenceFileRecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|public
name|PTFSequenceFileRecordReader
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSplit
name|split
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|split
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

