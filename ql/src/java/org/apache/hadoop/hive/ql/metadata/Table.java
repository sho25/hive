begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SkewedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveFileFormatUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveSequenceFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
operator|.
name|TableSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|MetadataTypedColumnsetSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A Hive Table: is a fundamental unit of data in Hive that shares a common schema/DDL.  *  * Please note that the ql code should always go through methods of this class to access the  * metadata, instead of directly accessing org.apache.hadoop.hive.metastore.api.Table.  This  * helps to isolate the metastore code and the ql code.  */
end_comment

begin_class
specifier|public
class|class
name|Table
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"hive.ql.metadata.Table"
argument_list|)
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|tTable
decl_stmt|;
comment|/**    * These fields are all cached fields.  The information comes from tTable.    */
specifier|private
name|Deserializer
name|deserializer
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|>
name|outputFormatClass
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
decl_stmt|;
specifier|private
name|Path
name|path
decl_stmt|;
specifier|private
specifier|transient
name|HiveStorageHandler
name|storageHandler
decl_stmt|;
specifier|private
specifier|transient
name|TableSpec
name|tableSpec
decl_stmt|;
specifier|private
specifier|transient
name|boolean
name|materializedTable
decl_stmt|;
comment|/**    * Used only for serialization.    */
specifier|public
name|Table
parameter_list|()
block|{   }
specifier|public
name|Table
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|table
parameter_list|)
block|{
name|initialize
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
comment|// Do initialization here, so as to keep the ctor minimal.
specifier|protected
name|void
name|initialize
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|table
parameter_list|)
block|{
name|tTable
operator|=
name|table
expr_stmt|;
comment|// Note that we do not set up fields like inputFormatClass, outputFormatClass
comment|// and deserializer because the Partition needs to be accessed from across
comment|// the metastore side as well, which will result in attempting to load
comment|// the class associated with them, which might not be available, and
comment|// the main reason to instantiate them would be to pre-cache them for
comment|// performance. Since those fields are null/cache-check by their accessors
comment|// anyway, that's not a concern.
block|}
specifier|public
name|Table
parameter_list|(
name|String
name|databaseName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|this
argument_list|(
name|getEmptyTable
argument_list|(
name|databaseName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDummyTable
parameter_list|()
block|{
return|return
name|tTable
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|SemanticAnalyzer
operator|.
name|DUMMY_TABLE
argument_list|)
return|;
block|}
comment|/**    * This function should only be used in serialization.    * We should never call this function to modify the fields, because    * the cached fields will become outdated.    */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|getTTable
parameter_list|()
block|{
return|return
name|tTable
return|;
block|}
comment|/**    * This function should only be called by Java serialization.    */
specifier|public
name|void
name|setTTable
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|tTable
parameter_list|)
block|{
name|this
operator|.
name|tTable
operator|=
name|tTable
expr_stmt|;
block|}
comment|/**    * Initialize an empty table.    */
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|getEmptyTable
parameter_list|(
name|String
name|databaseName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
block|{
name|sd
operator|.
name|setSerdeInfo
argument_list|(
operator|new
name|SerDeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setNumBuckets
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setBucketCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSortCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// We have to use MetadataTypedColumnsetSerDe because LazySimpleSerDe does
comment|// not support a table with no columns.
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setSerializationLib
argument_list|(
name|MetadataTypedColumnsetSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setInputFormat
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setOutputFormat
argument_list|(
name|HiveSequenceFileOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|SkewedInfo
name|skewInfo
init|=
operator|new
name|SkewedInfo
argument_list|()
decl_stmt|;
name|skewInfo
operator|.
name|setSkewedColNames
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|skewInfo
operator|.
name|setSkewedColValues
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|skewInfo
operator|.
name|setSkewedColValueLocationMaps
argument_list|(
operator|new
name|HashMap
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSkewedInfo
argument_list|(
name|skewInfo
argument_list|)
expr_stmt|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|t
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
argument_list|()
decl_stmt|;
block|{
name|t
operator|.
name|setSd
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|t
operator|.
name|setPartitionKeys
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTableType
argument_list|(
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setDbName
argument_list|(
name|databaseName
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|t
operator|.
name|setOwner
argument_list|(
name|SessionState
operator|.
name|getUserFromAuthenticator
argument_list|()
argument_list|)
expr_stmt|;
comment|// set create time
name|t
operator|.
name|setCreateTime
argument_list|(
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
specifier|public
name|void
name|checkValidity
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// check for validity
name|String
name|name
init|=
name|tTable
operator|.
name|getTableName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|name
operator|||
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
operator|!
name|MetaStoreUtils
operator|.
name|validateName
argument_list|(
name|name
argument_list|,
name|conf
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"["
operator|+
name|name
operator|+
literal|"]: is not a valid table name"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|0
operator|==
name|getCols
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"at least one column must be specified for the table"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isView
argument_list|()
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|getDeserializerFromMetaStore
argument_list|(
literal|false
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"must specify a non-null serDe"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|==
name|getInputFormatClass
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"must specify an InputFormat class"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|==
name|getOutputFormatClass
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"must specify an OutputFormat class"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|isView
argument_list|()
condition|)
block|{
assert|assert
operator|(
name|getViewOriginalText
argument_list|()
operator|!=
literal|null
operator|)
assert|;
assert|assert
operator|(
name|getViewExpandedText
argument_list|()
operator|!=
literal|null
operator|)
assert|;
block|}
elseif|else
if|if
condition|(
name|isMaterializedView
argument_list|()
condition|)
block|{
assert|assert
operator|(
name|getViewOriginalText
argument_list|()
operator|!=
literal|null
operator|)
assert|;
assert|assert
operator|(
name|getViewExpandedText
argument_list|()
operator|==
literal|null
operator|)
assert|;
block|}
else|else
block|{
assert|assert
operator|(
name|getViewOriginalText
argument_list|()
operator|==
literal|null
operator|)
assert|;
assert|assert
operator|(
name|getViewExpandedText
argument_list|()
operator|==
literal|null
operator|)
assert|;
block|}
name|validateColumns
argument_list|(
name|getCols
argument_list|()
argument_list|,
name|getPartCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StorageDescriptor
name|getSd
parameter_list|()
block|{
return|return
name|tTable
operator|.
name|getSd
argument_list|()
return|;
block|}
specifier|public
name|void
name|setInputFormatClass
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
parameter_list|)
block|{
name|this
operator|.
name|inputFormatClass
operator|=
name|inputFormatClass
expr_stmt|;
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|setInputFormat
argument_list|(
name|inputFormatClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setOutputFormatClass
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|>
name|outputFormatClass
parameter_list|)
block|{
name|this
operator|.
name|outputFormatClass
operator|=
name|outputFormatClass
expr_stmt|;
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|setOutputFormat
argument_list|(
name|outputFormatClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
specifier|public
name|Properties
name|getMetadata
parameter_list|()
block|{
return|return
name|MetaStoreUtils
operator|.
name|getTableMetadata
argument_list|(
name|tTable
argument_list|)
return|;
block|}
specifier|final
specifier|public
name|Path
name|getPath
parameter_list|()
block|{
name|String
name|location
init|=
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|location
argument_list|)
return|;
block|}
specifier|final
specifier|public
name|String
name|getTableName
parameter_list|()
block|{
return|return
name|tTable
operator|.
name|getTableName
argument_list|()
return|;
block|}
specifier|final
specifier|public
name|Path
name|getDataLocation
parameter_list|()
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
name|getPath
argument_list|()
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
specifier|final
specifier|public
name|Deserializer
name|getDeserializer
parameter_list|()
block|{
if|if
condition|(
name|deserializer
operator|==
literal|null
condition|)
block|{
name|deserializer
operator|=
name|getDeserializerFromMetaStore
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|deserializer
return|;
block|}
specifier|final
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Deserializer
argument_list|>
name|getDeserializerClass
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|MetaStoreUtils
operator|.
name|getDeserializerClass
argument_list|(
name|SessionState
operator|.
name|getSessionConf
argument_list|()
argument_list|,
name|tTable
argument_list|)
return|;
block|}
specifier|final
specifier|public
name|Deserializer
name|getDeserializer
parameter_list|(
name|boolean
name|skipConfError
parameter_list|)
block|{
if|if
condition|(
name|deserializer
operator|==
literal|null
condition|)
block|{
name|deserializer
operator|=
name|getDeserializerFromMetaStore
argument_list|(
name|skipConfError
argument_list|)
expr_stmt|;
block|}
return|return
name|deserializer
return|;
block|}
specifier|final
specifier|public
name|Deserializer
name|getDeserializerFromMetaStore
parameter_list|(
name|boolean
name|skipConfError
parameter_list|)
block|{
try|try
block|{
return|return
name|MetaStoreUtils
operator|.
name|getDeserializer
argument_list|(
name|SessionState
operator|.
name|getSessionConf
argument_list|()
argument_list|,
name|tTable
argument_list|,
name|skipConfError
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|HiveStorageHandler
name|getStorageHandler
parameter_list|()
block|{
if|if
condition|(
name|storageHandler
operator|!=
literal|null
operator|||
operator|!
name|isNonNative
argument_list|()
condition|)
block|{
return|return
name|storageHandler
return|;
block|}
try|try
block|{
name|storageHandler
operator|=
name|HiveUtils
operator|.
name|getStorageHandler
argument_list|(
name|SessionState
operator|.
name|getSessionConf
argument_list|()
argument_list|,
name|getProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|META_TABLE_STORAGE
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|storageHandler
return|;
block|}
specifier|final
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|getInputFormatClass
parameter_list|()
block|{
if|if
condition|(
name|inputFormatClass
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|String
name|className
init|=
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|getInputFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|getStorageHandler
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|inputFormatClass
operator|=
name|getStorageHandler
argument_list|()
operator|.
name|getInputFormatClass
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|inputFormatClass
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|,
literal|true
argument_list|,
name|Utilities
operator|.
name|getSessionSpecifiedClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|inputFormatClass
return|;
block|}
specifier|final
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|>
name|getOutputFormatClass
parameter_list|()
block|{
if|if
condition|(
name|outputFormatClass
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|String
name|className
init|=
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|getOutputFormat
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|c
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|getStorageHandler
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|c
operator|=
name|getStorageHandler
argument_list|()
operator|.
name|getOutputFormatClass
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|c
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|,
literal|true
argument_list|,
name|Utilities
operator|.
name|getSessionSpecifiedClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Replace FileOutputFormat for backward compatibility
name|outputFormatClass
operator|=
name|HiveFileFormatUtils
operator|.
name|getOutputFormatSubstitute
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|outputFormatClass
return|;
block|}
specifier|public
name|boolean
name|isMaterializedTable
parameter_list|()
block|{
return|return
name|materializedTable
return|;
block|}
specifier|public
name|void
name|setMaterializedTable
parameter_list|(
name|boolean
name|materializedTable
parameter_list|)
block|{
name|this
operator|.
name|materializedTable
operator|=
name|materializedTable
expr_stmt|;
block|}
comment|/**    * Marker SemanticException, so that processing that allows for table validation failures    * and appropriately handles them can recover from these types of SemanticExceptions    */
specifier|public
class|class
name|ValidationFailureSemanticException
extends|extends
name|SemanticException
block|{
specifier|public
name|ValidationFailureSemanticException
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
specifier|final
specifier|public
name|void
name|validatePartColumnNames
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|spec
parameter_list|,
name|boolean
name|shouldBeFull
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
name|tTable
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|partCols
operator|==
literal|null
operator|||
operator|(
name|partCols
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
if|if
condition|(
name|spec
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ValidationFailureSemanticException
argument_list|(
literal|"table is not partitioned but partition spec exists: "
operator|+
name|spec
argument_list|)
throw|;
block|}
return|return;
block|}
elseif|else
if|if
condition|(
name|spec
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|shouldBeFull
condition|)
block|{
throw|throw
operator|new
name|ValidationFailureSemanticException
argument_list|(
literal|"table is partitioned but partition spec is not specified"
argument_list|)
throw|;
block|}
return|return;
block|}
name|int
name|columnsFound
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|partCols
control|)
block|{
if|if
condition|(
name|spec
operator|.
name|containsKey
argument_list|(
name|fs
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
operator|++
name|columnsFound
expr_stmt|;
block|}
if|if
condition|(
name|columnsFound
operator|==
name|spec
operator|.
name|size
argument_list|()
condition|)
break|break;
block|}
if|if
condition|(
name|columnsFound
operator|<
name|spec
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ValidationFailureSemanticException
argument_list|(
literal|"Partition spec "
operator|+
name|spec
operator|+
literal|" contains non-partition columns"
argument_list|)
throw|;
block|}
if|if
condition|(
name|shouldBeFull
operator|&&
operator|(
name|spec
operator|.
name|size
argument_list|()
operator|!=
name|partCols
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|ValidationFailureSemanticException
argument_list|(
literal|"partition spec "
operator|+
name|spec
operator|+
literal|" doesn't contain all ("
operator|+
name|partCols
operator|.
name|size
argument_list|()
operator|+
literal|") partition columns"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|tTable
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
name|tTable
operator|.
name|setParameters
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|tTable
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isImmutable
parameter_list|()
block|{
return|return
operator|(
name|tTable
operator|.
name|getParameters
argument_list|()
operator|.
name|containsKey
argument_list|(
name|hive_metastoreConstants
operator|.
name|IS_IMMUTABLE
argument_list|)
operator|&&
name|tTable
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|hive_metastoreConstants
operator|.
name|IS_IMMUTABLE
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
operator|)
return|;
block|}
specifier|public
name|void
name|setTableType
parameter_list|(
name|TableType
name|tableType
parameter_list|)
block|{
name|tTable
operator|.
name|setTableType
argument_list|(
name|tableType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TableType
name|getTableType
parameter_list|()
block|{
return|return
name|Enum
operator|.
name|valueOf
argument_list|(
name|TableType
operator|.
name|class
argument_list|,
name|tTable
operator|.
name|getTableType
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|StructField
argument_list|>
name|getFields
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|StructField
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|StructField
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|Deserializer
name|decoder
init|=
name|getDeserializer
argument_list|()
decl_stmt|;
comment|// Expand out all the columns of the table
name|StructObjectInspector
name|structObjectInspector
init|=
operator|(
name|StructObjectInspector
operator|)
name|decoder
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fld_lst
init|=
name|structObjectInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|StructField
name|field
range|:
name|fld_lst
control|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|fields
return|;
block|}
specifier|public
name|StructField
name|getField
parameter_list|(
name|String
name|fld
parameter_list|)
block|{
try|try
block|{
name|StructObjectInspector
name|structObjectInspector
init|=
operator|(
name|StructObjectInspector
operator|)
name|getDeserializer
argument_list|()
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
return|return
name|structObjectInspector
operator|.
name|getStructFieldRef
argument_list|(
name|fld
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|tTable
operator|.
name|getTableName
argument_list|()
return|;
block|}
comment|/* (non-Javadoc)     * @see java.lang.Object#hashCode()     */
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|tTable
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|tTable
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/* (non-Javadoc)     * @see java.lang.Object#equals(java.lang.Object)     */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Table
name|other
init|=
operator|(
name|Table
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|tTable
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|tTable
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|tTable
operator|.
name|equals
argument_list|(
name|other
operator|.
name|tTable
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getPartCols
parameter_list|()
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partKeys
init|=
name|tTable
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|partKeys
operator|==
literal|null
condition|)
block|{
name|partKeys
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
expr_stmt|;
name|tTable
operator|.
name|setPartitionKeys
argument_list|(
name|partKeys
argument_list|)
expr_stmt|;
block|}
return|return
name|partKeys
return|;
block|}
specifier|public
name|FieldSchema
name|getPartColByName
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
for|for
control|(
name|FieldSchema
name|key
range|:
name|getPartCols
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|colName
argument_list|)
condition|)
block|{
return|return
name|key
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPartColNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partColNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|key
range|:
name|getPartCols
argument_list|()
control|)
block|{
name|partColNames
operator|.
name|add
argument_list|(
name|key
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|partColNames
return|;
block|}
specifier|public
name|boolean
name|isPartitionKey
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
return|return
name|getPartColByName
argument_list|(
name|colName
argument_list|)
operator|==
literal|null
condition|?
literal|false
else|:
literal|true
return|;
block|}
comment|// TODO merge this with getBucketCols function
specifier|public
name|String
name|getBucketingDimensionId
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|bcols
init|=
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|getBucketCols
argument_list|()
decl_stmt|;
if|if
condition|(
name|bcols
operator|==
literal|null
operator|||
name|bcols
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|bcols
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|this
operator|+
literal|" table has more than one dimensions which aren't supported yet"
argument_list|)
expr_stmt|;
block|}
return|return
name|bcols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
name|void
name|setDataLocation
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDataLocation
parameter_list|()
block|{
name|this
operator|.
name|path
operator|=
literal|null
expr_stmt|;
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|unsetLocation
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setBucketCols
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|bucketCols
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|String
name|col
range|:
name|bucketCols
control|)
block|{
if|if
condition|(
operator|!
name|isField
argument_list|(
name|col
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Bucket columns "
operator|+
name|col
operator|+
literal|" is not part of the table columns ("
operator|+
name|getCols
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|setBucketCols
argument_list|(
name|bucketCols
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setSortCols
parameter_list|(
name|List
argument_list|<
name|Order
argument_list|>
name|sortOrder
parameter_list|)
throws|throws
name|HiveException
block|{
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|setSortCols
argument_list|(
name|sortOrder
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setSkewedValueLocationMap
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|valList
parameter_list|,
name|String
name|dirName
parameter_list|)
throws|throws
name|HiveException
block|{
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|mappings
init|=
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|mappings
condition|)
block|{
name|mappings
operator|=
operator|new
name|HashMap
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|setSkewedColValueLocationMaps
argument_list|(
name|mappings
argument_list|)
expr_stmt|;
block|}
comment|// Add or update new mapping
name|mappings
operator|.
name|put
argument_list|(
name|valList
argument_list|,
name|dirName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|getSkewedColValueLocationMaps
parameter_list|()
block|{
return|return
operator|(
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
else|:
operator|new
name|HashMap
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
return|;
block|}
specifier|public
name|void
name|setSkewedColValues
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|skewedValues
parameter_list|)
throws|throws
name|HiveException
block|{
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|setSkewedColValues
argument_list|(
name|skewedValues
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getSkewedColValues
parameter_list|()
block|{
return|return
operator|(
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColValues
argument_list|()
else|:
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
return|;
block|}
specifier|public
name|void
name|setSkewedColNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|skewedColNames
parameter_list|)
throws|throws
name|HiveException
block|{
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|setSkewedColNames
argument_list|(
name|skewedColNames
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSkewedColNames
parameter_list|()
block|{
return|return
operator|(
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColNames
argument_list|()
else|:
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
return|;
block|}
specifier|public
name|SkewedInfo
name|getSkewedInfo
parameter_list|()
block|{
return|return
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
return|;
block|}
specifier|public
name|void
name|setSkewedInfo
parameter_list|(
name|SkewedInfo
name|skewedInfo
parameter_list|)
throws|throws
name|HiveException
block|{
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|setSkewedInfo
argument_list|(
name|skewedInfo
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isStoredAsSubDirectories
parameter_list|()
block|{
return|return
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|isStoredAsSubDirectories
argument_list|()
return|;
block|}
specifier|public
name|void
name|setStoredAsSubDirectories
parameter_list|(
name|boolean
name|storedAsSubDirectories
parameter_list|)
throws|throws
name|HiveException
block|{
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|setStoredAsSubDirectories
argument_list|(
name|storedAsSubDirectories
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isField
parameter_list|(
name|String
name|col
parameter_list|)
block|{
for|for
control|(
name|FieldSchema
name|field
range|:
name|getCols
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|col
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getCols
parameter_list|()
block|{
return|return
name|getColsInternal
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getColsForMetastore
parameter_list|()
block|{
return|return
name|getColsInternal
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getColsInternal
parameter_list|(
name|boolean
name|forMs
parameter_list|)
block|{
name|String
name|serializationLib
init|=
name|getSerializationLib
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Do the lightweight check for general case.
if|if
condition|(
name|hasMetastoreBasedSchema
argument_list|(
name|SessionState
operator|.
name|getSessionConf
argument_list|()
argument_list|,
name|serializationLib
argument_list|)
condition|)
block|{
return|return
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|forMs
operator|&&
operator|!
name|shouldStoreFieldsInMetastore
argument_list|(
name|SessionState
operator|.
name|getSessionConf
argument_list|()
argument_list|,
name|serializationLib
argument_list|,
name|tTable
operator|.
name|getParameters
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Hive
operator|.
name|getFieldsFromDeserializerForMsStorage
argument_list|(
name|this
argument_list|,
name|getDeserializer
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|MetaStoreUtils
operator|.
name|getFieldsFromDeserializer
argument_list|(
name|getTableName
argument_list|()
argument_list|,
name|getDeserializer
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get field from serde: "
operator|+
name|serializationLib
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
return|;
block|}
comment|/**    * Returns a list of all the columns of the table (data columns + partition    * columns in that order.    *    * @return List<FieldSchema>    */
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getAllCols
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
name|f_list
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|f_list
operator|.
name|addAll
argument_list|(
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
name|f_list
operator|.
name|addAll
argument_list|(
name|getPartCols
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|f_list
return|;
block|}
specifier|public
name|void
name|setPartCols
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
parameter_list|)
block|{
name|tTable
operator|.
name|setPartitionKeys
argument_list|(
name|partCols
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getDbName
parameter_list|()
block|{
return|return
name|tTable
operator|.
name|getDbName
argument_list|()
return|;
block|}
specifier|public
name|int
name|getNumBuckets
parameter_list|()
block|{
return|return
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
return|;
block|}
specifier|public
name|void
name|setInputFormatClass
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|inputFormatClass
operator|=
literal|null
expr_stmt|;
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|setInputFormat
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|setInputFormatClass
argument_list|(
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|Utilities
operator|.
name|getSessionSpecifiedClassLoader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Class not found: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setOutputFormatClass
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|outputFormatClass
operator|=
literal|null
expr_stmt|;
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|setOutputFormat
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|origin
init|=
name|Class
operator|.
name|forName
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|Utilities
operator|.
name|getSessionSpecifiedClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|setOutputFormatClass
argument_list|(
name|HiveFileFormatUtils
operator|.
name|getOutputFormatSubstitute
argument_list|(
name|origin
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Class not found: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|isPartitioned
parameter_list|()
block|{
if|if
condition|(
name|getPartCols
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|(
name|getPartCols
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|0
operator|)
return|;
block|}
specifier|public
name|void
name|setFields
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
parameter_list|)
block|{
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|setCols
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setNumBuckets
parameter_list|(
name|int
name|nb
parameter_list|)
block|{
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|setNumBuckets
argument_list|(
name|nb
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return The owner of the table.    * @see org.apache.hadoop.hive.metastore.api.Table#getOwner()    */
specifier|public
name|String
name|getOwner
parameter_list|()
block|{
return|return
name|tTable
operator|.
name|getOwner
argument_list|()
return|;
block|}
comment|/**    * @return The table parameters.    * @see org.apache.hadoop.hive.metastore.api.Table#getParameters()    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|tTable
operator|.
name|getParameters
argument_list|()
return|;
block|}
comment|/**    * @return The retention on the table.    * @see org.apache.hadoop.hive.metastore.api.Table#getRetention()    */
specifier|public
name|int
name|getRetention
parameter_list|()
block|{
return|return
name|tTable
operator|.
name|getRetention
argument_list|()
return|;
block|}
comment|/**    * @param owner    * @see org.apache.hadoop.hive.metastore.api.Table#setOwner(java.lang.String)    */
specifier|public
name|void
name|setOwner
parameter_list|(
name|String
name|owner
parameter_list|)
block|{
name|tTable
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param retention    * @see org.apache.hadoop.hive.metastore.api.Table#setRetention(int)    */
specifier|public
name|void
name|setRetention
parameter_list|(
name|int
name|retention
parameter_list|)
block|{
name|tTable
operator|.
name|setRetention
argument_list|(
name|retention
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SerDeInfo
name|getSerdeInfo
parameter_list|()
block|{
return|return
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
return|;
block|}
specifier|public
name|void
name|setSerializationLib
parameter_list|(
name|String
name|lib
parameter_list|)
block|{
name|getSerdeInfo
argument_list|()
operator|.
name|setSerializationLib
argument_list|(
name|lib
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getSerializationLib
parameter_list|()
block|{
return|return
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
return|;
block|}
specifier|public
name|String
name|getSerdeParam
parameter_list|(
name|String
name|param
parameter_list|)
block|{
return|return
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|param
argument_list|)
return|;
block|}
specifier|public
name|String
name|setSerdeParam
parameter_list|(
name|String
name|param
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|param
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBucketCols
parameter_list|()
block|{
return|return
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|getBucketCols
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|Order
argument_list|>
name|getSortCols
parameter_list|()
block|{
return|return
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|getSortCols
argument_list|()
return|;
block|}
specifier|public
name|void
name|setTableName
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|tTable
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDbName
parameter_list|(
name|String
name|databaseName
parameter_list|)
block|{
name|tTable
operator|.
name|setDbName
argument_list|(
name|databaseName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getPartitionKeys
parameter_list|()
block|{
return|return
name|tTable
operator|.
name|getPartitionKeys
argument_list|()
return|;
block|}
comment|/**    * @return the original view text, or null if this table is not a view    */
specifier|public
name|String
name|getViewOriginalText
parameter_list|()
block|{
return|return
name|tTable
operator|.
name|getViewOriginalText
argument_list|()
return|;
block|}
comment|/**    * @param viewOriginalText    *          the original view text to set    */
specifier|public
name|void
name|setViewOriginalText
parameter_list|(
name|String
name|viewOriginalText
parameter_list|)
block|{
name|tTable
operator|.
name|setViewOriginalText
argument_list|(
name|viewOriginalText
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the expanded view text, or null if this table is not a view    */
specifier|public
name|String
name|getViewExpandedText
parameter_list|()
block|{
return|return
name|tTable
operator|.
name|getViewExpandedText
argument_list|()
return|;
block|}
comment|/**    * @param viewExpandedText    *          the expanded view text to set    */
specifier|public
name|void
name|setViewExpandedText
parameter_list|(
name|String
name|viewExpandedText
parameter_list|)
block|{
name|tTable
operator|.
name|setViewExpandedText
argument_list|(
name|viewExpandedText
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return whether this view can be used for rewriting queries    */
specifier|public
name|boolean
name|isRewriteEnabled
parameter_list|()
block|{
return|return
name|tTable
operator|.
name|isRewriteEnabled
argument_list|()
return|;
block|}
comment|/**    * @param rewriteEnabled    *          whether this view can be used for rewriting queries    */
specifier|public
name|void
name|setRewriteEnabled
parameter_list|(
name|boolean
name|rewriteEnabled
parameter_list|)
block|{
name|tTable
operator|.
name|setRewriteEnabled
argument_list|(
name|rewriteEnabled
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clearSerDeInfo
parameter_list|()
block|{
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return whether this table is actually a view    */
specifier|public
name|boolean
name|isView
parameter_list|()
block|{
return|return
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|.
name|equals
argument_list|(
name|getTableType
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isMaterializedView
parameter_list|()
block|{
return|return
name|TableType
operator|.
name|MATERIALIZED_VIEW
operator|.
name|equals
argument_list|(
name|getTableType
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @return whether this table is actually an index table    */
specifier|public
name|boolean
name|isIndexTable
parameter_list|()
block|{
return|return
name|TableType
operator|.
name|INDEX_TABLE
operator|.
name|equals
argument_list|(
name|getTableType
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates a partition name -> value spec map object    *    * @param tp    *          Use the information from this partition.    * @return Partition name to value mapping.    */
specifier|public
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|createSpec
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
name|tp
parameter_list|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fsl
init|=
name|getPartCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tpl
init|=
name|tp
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|spec
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|fsl
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fsl
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FieldSchema
name|fs
init|=
name|fsl
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|tpl
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|spec
operator|.
name|put
argument_list|(
name|fs
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|spec
return|;
block|}
specifier|public
name|Table
name|copy
parameter_list|()
throws|throws
name|HiveException
block|{
return|return
operator|new
name|Table
argument_list|(
name|tTable
operator|.
name|deepCopy
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|getCreateTime
parameter_list|()
block|{
return|return
name|tTable
operator|.
name|getCreateTime
argument_list|()
return|;
block|}
specifier|public
name|void
name|setCreateTime
parameter_list|(
name|int
name|createTime
parameter_list|)
block|{
name|tTable
operator|.
name|setCreateTime
argument_list|(
name|createTime
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getLastAccessTime
parameter_list|()
block|{
return|return
name|tTable
operator|.
name|getLastAccessTime
argument_list|()
return|;
block|}
specifier|public
name|void
name|setLastAccessTime
parameter_list|(
name|int
name|lastAccessTime
parameter_list|)
block|{
name|tTable
operator|.
name|setLastAccessTime
argument_list|(
name|lastAccessTime
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isNonNative
parameter_list|()
block|{
return|return
name|getProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|META_TABLE_STORAGE
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**    * @return include the db name    */
specifier|public
name|String
name|getCompleteName
parameter_list|()
block|{
return|return
name|getCompleteName
argument_list|(
name|getDbName
argument_list|()
argument_list|,
name|getTableName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getCompleteName
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tabName
parameter_list|)
block|{
return|return
name|dbName
operator|+
literal|"@"
operator|+
name|tabName
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|public
name|FileStatus
index|[]
name|getSortedPaths
parameter_list|()
block|{
try|try
block|{
comment|// Previously, this got the filesystem of the Table, which could be
comment|// different from the filesystem of the partition.
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
argument_list|,
name|SessionState
operator|.
name|getSessionConf
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|pathPattern
init|=
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|getNumBuckets
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pathPattern
operator|=
name|pathPattern
operator|+
literal|"/*"
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Path pattern = "
operator|+
name|pathPattern
argument_list|)
expr_stmt|;
name|FileStatus
name|srcs
index|[]
init|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|pathPattern
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|HIDDEN_FILES_PATH_FILTER
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|srcs
argument_list|)
expr_stmt|;
for|for
control|(
name|FileStatus
name|src
range|:
name|srcs
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got file: "
operator|+
name|src
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|srcs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|srcs
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot get path "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
throws|throws
name|HiveException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
argument_list|,
name|SessionState
operator|.
name|getSessionConf
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|getPath
argument_list|()
argument_list|)
operator|||
name|fs
operator|.
name|listStatus
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|FileUtils
operator|.
name|HIDDEN_FILES_PATH_FILTER
argument_list|)
operator|.
name|length
operator|==
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|isTemporary
parameter_list|()
block|{
return|return
name|tTable
operator|.
name|isTemporary
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|hasMetastoreBasedSchema
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|serdeLib
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|serdeLib
argument_list|)
operator|||
name|conf
operator|.
name|getStringCollection
argument_list|(
name|ConfVars
operator|.
name|SERDESUSINGMETASTOREFORSCHEMA
operator|.
name|varname
argument_list|)
operator|.
name|contains
argument_list|(
name|serdeLib
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|shouldStoreFieldsInMetastore
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|serdeLib
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableParams
parameter_list|)
block|{
if|if
condition|(
name|hasMetastoreBasedSchema
argument_list|(
name|conf
argument_list|,
name|serdeLib
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// Table may or may not be using metastore. Only the SerDe can tell us.
name|AbstractSerDe
name|deserializer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|conf
operator|.
name|getClassByName
argument_list|(
name|serdeLib
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|AbstractSerDe
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// The default.
name|deserializer
operator|=
name|ReflectionUtil
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClassByName
argument_list|(
name|serdeLib
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|AbstractSerDe
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot initialize SerDe: "
operator|+
name|serdeLib
operator|+
literal|", ignoring"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
name|deserializer
operator|.
name|shouldStoreFieldsInMetastore
argument_list|(
name|tableParams
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|validateColumns
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|columns
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
parameter_list|)
throws|throws
name|HiveException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|colNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|partCol
range|:
name|columns
control|)
block|{
name|String
name|colName
init|=
name|normalize
argument_list|(
name|partCol
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|colNames
operator|.
name|contains
argument_list|(
name|colName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Duplicate column name "
operator|+
name|colName
operator|+
literal|" in the table definition."
argument_list|)
throw|;
block|}
name|colNames
operator|.
name|add
argument_list|(
name|colName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|partCols
operator|!=
literal|null
condition|)
block|{
comment|// there is no overlap between columns and partitioning columns
for|for
control|(
name|FieldSchema
name|partCol
range|:
name|partCols
control|)
block|{
name|String
name|colName
init|=
name|normalize
argument_list|(
name|partCol
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|colNames
operator|.
name|contains
argument_list|(
name|colName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Partition column name "
operator|+
name|colName
operator|+
literal|" conflicts with table columns."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|normalize
parameter_list|(
name|String
name|colName
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|MetaStoreUtils
operator|.
name|validateColumnName
argument_list|(
name|colName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Invalid column name '"
operator|+
name|colName
operator|+
literal|"' in the table definition"
argument_list|)
throw|;
block|}
return|return
name|colName
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
specifier|public
name|TableSpec
name|getTableSpec
parameter_list|()
block|{
return|return
name|tableSpec
return|;
block|}
specifier|public
name|void
name|setTableSpec
parameter_list|(
name|TableSpec
name|tableSpec
parameter_list|)
block|{
name|this
operator|.
name|tableSpec
operator|=
name|tableSpec
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasDeserializer
parameter_list|()
block|{
return|return
name|deserializer
operator|!=
literal|null
return|;
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

end_unit

