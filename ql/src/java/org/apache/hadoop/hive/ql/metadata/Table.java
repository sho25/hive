begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveFileFormatUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|MetadataTypedColumnsetSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_comment
comment|/**  * A Hive Table: is a fundamental unit of data in Hive that shares a common  * schema/DDL  */
end_comment

begin_class
specifier|public
class|class
name|Table
block|{
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"hive.ql.metadata.Table"
argument_list|)
decl_stmt|;
specifier|private
name|Properties
name|schema
decl_stmt|;
specifier|private
name|Deserializer
name|deserializer
decl_stmt|;
specifier|private
name|URI
name|uri
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|HiveOutputFormat
argument_list|>
name|outputFormatClass
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|tTable
decl_stmt|;
comment|/**    * Table (only used internally)    *     * @throws HiveException    *     */
specifier|protected
name|Table
parameter_list|()
throws|throws
name|HiveException
block|{   }
comment|/**    * Table    *     * Create a TableMetaInfo object presumably with the intent of saving it to    * the metastore    *     * @param name    *          the name of this table in the metadb    * @param schema    *          an object that represents the schema that this SerDe must know    * @param deserializer    *          a Class to be used for deserializing the data    * @param dataLocation    *          where is the table ? (e.g.,    *          dfs://hadoop001.sf2p.facebook.com:9000/    *          user/facebook/warehouse/example) NOTE: should not be hardcoding    *          this, but ok for now    *     * @exception HiveException    *              on internal error. Note not possible now, but in the future    *              reserve the right to throw an exception    */
specifier|public
name|Table
parameter_list|(
name|String
name|name
parameter_list|,
name|Properties
name|schema
parameter_list|,
name|Deserializer
name|deserializer
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|inputFormatClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputFormatClass
parameter_list|,
name|URI
name|dataLocation
parameter_list|,
name|Hive
name|hive
parameter_list|)
throws|throws
name|HiveException
block|{
name|initEmpty
argument_list|()
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|deserializer
operator|=
name|deserializer
expr_stmt|;
comment|// TODO: convert to SerDeInfo format
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setSerializationLib
argument_list|(
name|deserializer
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|getTTable
argument_list|()
operator|.
name|setTableName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|getSerdeInfo
argument_list|()
operator|.
name|setSerializationLib
argument_list|(
name|deserializer
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setInputFormatClass
argument_list|(
name|inputFormatClass
argument_list|)
expr_stmt|;
name|setOutputFormatClass
argument_list|(
name|HiveFileFormatUtils
operator|.
name|getOutputFormatSubstitute
argument_list|(
name|outputFormatClass
argument_list|)
argument_list|)
expr_stmt|;
name|setDataLocation
argument_list|(
name|dataLocation
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Table
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// fill in defaults
name|initEmpty
argument_list|()
expr_stmt|;
name|getTTable
argument_list|()
operator|.
name|setTableName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|getTTable
argument_list|()
operator|.
name|setDbName
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|)
expr_stmt|;
comment|// We have to use MetadataTypedColumnsetSerDe because LazySimpleSerDe does
comment|// not
comment|// support a table with no columns.
name|getSerdeInfo
argument_list|()
operator|.
name|setSerializationLib
argument_list|(
name|MetadataTypedColumnsetSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
name|void
name|initEmpty
parameter_list|()
block|{
name|setTTable
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
argument_list|()
argument_list|)
expr_stmt|;
name|getTTable
argument_list|()
operator|.
name|setSd
argument_list|(
operator|new
name|StorageDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|getTTable
argument_list|()
operator|.
name|setPartitionKeys
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|getTTable
argument_list|()
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|sd
operator|.
name|setSerdeInfo
argument_list|(
operator|new
name|SerDeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setNumBuckets
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setBucketCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSortCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|setTableType
argument_list|(
name|TableType
operator|.
name|MANAGED_TABLE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reinitSerDe
parameter_list|()
throws|throws
name|HiveException
block|{
try|try
block|{
name|deserializer
operator|=
name|MetaStoreUtils
operator|.
name|getDeserializer
argument_list|(
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|,
name|getTTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|initSerDe
parameter_list|()
throws|throws
name|HiveException
block|{
if|if
condition|(
name|deserializer
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|deserializer
operator|=
name|MetaStoreUtils
operator|.
name|getDeserializer
argument_list|(
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|,
name|getTTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|checkValidity
parameter_list|()
throws|throws
name|HiveException
block|{
comment|// check for validity
name|String
name|name
init|=
name|getTTable
argument_list|()
operator|.
name|getTableName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|name
operator|||
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
operator|!
name|MetaStoreUtils
operator|.
name|validateName
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"["
operator|+
name|name
operator|+
literal|"]: is not a valid table name"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|0
operator|==
name|getCols
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"at least one column must be specified for the table"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isView
argument_list|()
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|getDeserializer
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"must specify a non-null serDe"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|==
name|getInputFormatClass
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"must specify an InputFormat class"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|==
name|getOutputFormatClass
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"must specify an OutputFormat class"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|isView
argument_list|()
condition|)
block|{
assert|assert
operator|(
name|getViewOriginalText
argument_list|()
operator|!=
literal|null
operator|)
assert|;
assert|assert
operator|(
name|getViewExpandedText
argument_list|()
operator|!=
literal|null
operator|)
assert|;
block|}
else|else
block|{
assert|assert
operator|(
name|getViewOriginalText
argument_list|()
operator|==
literal|null
operator|)
assert|;
assert|assert
operator|(
name|getViewExpandedText
argument_list|()
operator|==
literal|null
operator|)
assert|;
block|}
name|Iterator
argument_list|<
name|FieldSchema
argument_list|>
name|iterCols
init|=
name|getCols
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterCols
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|colName
init|=
name|iterCols
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|colNames
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|oldColName
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|colName
operator|.
name|equalsIgnoreCase
argument_list|(
name|oldColName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Duplicate column name "
operator|+
name|colName
operator|+
literal|" in the table definition."
argument_list|)
throw|;
block|}
block|}
name|colNames
operator|.
name|add
argument_list|(
name|colName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getPartCols
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// there is no overlap between columns and partitioning columns
name|Iterator
argument_list|<
name|FieldSchema
argument_list|>
name|partColsIter
init|=
name|getPartCols
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|partColsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|partCol
init|=
name|partColsIter
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|colNames
operator|.
name|contains
argument_list|(
name|partCol
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Partition column name "
operator|+
name|partCol
operator|+
literal|" conflicts with table columns."
argument_list|)
throw|;
block|}
block|}
block|}
return|return;
block|}
comment|/**    * @param inputFormatClass    */
specifier|public
name|void
name|setInputFormatClass
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
parameter_list|)
block|{
name|this
operator|.
name|inputFormatClass
operator|=
name|inputFormatClass
expr_stmt|;
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|setInputFormat
argument_list|(
name|inputFormatClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param class1    */
specifier|public
name|void
name|setOutputFormatClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|class1
parameter_list|)
block|{
name|outputFormatClass
operator|=
name|HiveFileFormatUtils
operator|.
name|getOutputFormatSubstitute
argument_list|(
name|class1
argument_list|)
expr_stmt|;
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|setOutputFormat
argument_list|(
name|class1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
specifier|public
name|Properties
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
specifier|final
specifier|public
name|Path
name|getPath
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
return|;
block|}
specifier|final
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getTTable
argument_list|()
operator|.
name|getTableName
argument_list|()
return|;
block|}
specifier|final
specifier|public
name|URI
name|getDataLocation
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
specifier|final
specifier|public
name|Deserializer
name|getDeserializer
parameter_list|()
block|{
if|if
condition|(
name|deserializer
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|initSerDe
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in initializing serde."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|deserializer
return|;
block|}
specifier|final
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|getInputFormatClass
parameter_list|()
block|{
return|return
name|inputFormatClass
return|;
block|}
specifier|final
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|HiveOutputFormat
argument_list|>
name|getOutputFormatClass
parameter_list|()
block|{
return|return
name|outputFormatClass
return|;
block|}
specifier|final
specifier|public
name|boolean
name|isValidSpec
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|spec
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// TODO - types need to be checked.
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
name|getTTable
argument_list|()
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|partCols
operator|==
literal|null
operator|||
operator|(
name|partCols
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
if|if
condition|(
name|spec
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"table is not partitioned but partition spec exists: "
operator|+
name|spec
argument_list|)
throw|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
operator|(
name|spec
operator|==
literal|null
operator|)
operator|||
operator|(
name|spec
operator|.
name|size
argument_list|()
operator|!=
name|partCols
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"table is partitioned but partition spec is not specified or tab: "
operator|+
name|spec
argument_list|)
throw|;
block|}
for|for
control|(
name|FieldSchema
name|field
range|:
name|partCols
control|)
block|{
if|if
condition|(
name|spec
operator|.
name|get
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|" not found in table's partition spec: "
operator|+
name|spec
argument_list|)
throw|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|getTTable
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * getProperty    *     */
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getTTable
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTableType
parameter_list|(
name|TableType
name|tableType
parameter_list|)
block|{
name|getTTable
argument_list|()
operator|.
name|setTableType
argument_list|(
name|tableType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TableType
name|getTableType
parameter_list|()
block|{
return|return
name|Enum
operator|.
name|valueOf
argument_list|(
name|TableType
operator|.
name|class
argument_list|,
name|getTTable
argument_list|()
operator|.
name|getTableType
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|StructField
argument_list|>
name|getFields
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|StructField
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|StructField
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|Deserializer
name|decoder
init|=
name|getDeserializer
argument_list|()
decl_stmt|;
comment|// Expand out all the columns of the table
name|StructObjectInspector
name|structObjectInspector
init|=
operator|(
name|StructObjectInspector
operator|)
name|decoder
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fld_lst
init|=
name|structObjectInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|StructField
name|field
range|:
name|fld_lst
control|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|fields
return|;
block|}
specifier|public
name|StructField
name|getField
parameter_list|(
name|String
name|fld
parameter_list|)
block|{
try|try
block|{
name|StructObjectInspector
name|structObjectInspector
init|=
operator|(
name|StructObjectInspector
operator|)
name|getDeserializer
argument_list|()
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
return|return
name|structObjectInspector
operator|.
name|getStructFieldRef
argument_list|(
name|fld
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * @param schema    *          the schema to set    */
specifier|public
name|void
name|setSchema
parameter_list|(
name|Properties
name|schema
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
block|}
comment|/**    * @param deserializer    *          the deserializer to set    */
specifier|public
name|void
name|setDeserializer
parameter_list|(
name|Deserializer
name|deserializer
parameter_list|)
block|{
name|this
operator|.
name|deserializer
operator|=
name|deserializer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getTTable
argument_list|()
operator|.
name|getTableName
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getPartCols
parameter_list|()
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partKeys
init|=
name|getTTable
argument_list|()
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|partKeys
operator|==
literal|null
condition|)
block|{
name|partKeys
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
expr_stmt|;
name|getTTable
argument_list|()
operator|.
name|setPartitionKeys
argument_list|(
name|partKeys
argument_list|)
expr_stmt|;
block|}
return|return
name|partKeys
return|;
block|}
specifier|public
name|boolean
name|isPartitionKey
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
for|for
control|(
name|FieldSchema
name|key
range|:
name|getPartCols
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|colName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|// TODO merge this with getBucketCols function
specifier|public
name|String
name|getBucketingDimensionId
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|bcols
init|=
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getBucketCols
argument_list|()
decl_stmt|;
if|if
condition|(
name|bcols
operator|==
literal|null
operator|||
name|bcols
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|bcols
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|this
operator|+
literal|" table has more than one dimensions which aren't supported yet"
argument_list|)
expr_stmt|;
block|}
return|return
name|bcols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * @return the tTable    */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|getTTable
parameter_list|()
block|{
return|return
name|tTable
return|;
block|}
comment|/**    * @param table    *          the tTable to set    */
specifier|protected
name|void
name|setTTable
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|table
parameter_list|)
block|{
name|tTable
operator|=
name|table
expr_stmt|;
block|}
specifier|public
name|void
name|setDataLocation
parameter_list|(
name|URI
name|uri2
parameter_list|)
block|{
name|uri
operator|=
name|uri2
expr_stmt|;
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|uri2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setBucketCols
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|bucketCols
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|String
name|col
range|:
name|bucketCols
control|)
block|{
if|if
condition|(
operator|!
name|isField
argument_list|(
name|col
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Bucket columns "
operator|+
name|col
operator|+
literal|" is not part of the table columns"
argument_list|)
throw|;
block|}
block|}
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|setBucketCols
argument_list|(
name|bucketCols
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setSortCols
parameter_list|(
name|List
argument_list|<
name|Order
argument_list|>
name|sortOrder
parameter_list|)
throws|throws
name|HiveException
block|{
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|setSortCols
argument_list|(
name|sortOrder
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isField
parameter_list|(
name|String
name|col
parameter_list|)
block|{
for|for
control|(
name|FieldSchema
name|field
range|:
name|getCols
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|col
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getCols
parameter_list|()
block|{
name|boolean
name|getColsFromSerDe
init|=
name|SerDeUtils
operator|.
name|shouldGetColsFromSerDe
argument_list|(
name|getSerializationLib
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|getColsFromSerDe
condition|)
block|{
return|return
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
return|;
block|}
else|else
block|{
try|try
block|{
return|return
name|Hive
operator|.
name|getFieldsFromDeserializer
argument_list|(
name|getName
argument_list|()
argument_list|,
name|getDeserializer
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get field from serde: "
operator|+
name|getSerializationLib
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
return|;
block|}
block|}
comment|/**    * Returns a list of all the columns of the table (data columns + partition    * columns in that order.    *     * @return List<FieldSchema>    */
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getAllCols
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
name|f_list
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|f_list
operator|.
name|addAll
argument_list|(
name|getPartCols
argument_list|()
argument_list|)
expr_stmt|;
name|f_list
operator|.
name|addAll
argument_list|(
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|f_list
return|;
block|}
specifier|public
name|void
name|setPartCols
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
parameter_list|)
block|{
name|getTTable
argument_list|()
operator|.
name|setPartitionKeys
argument_list|(
name|partCols
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getDbName
parameter_list|()
block|{
return|return
name|getTTable
argument_list|()
operator|.
name|getDbName
argument_list|()
return|;
block|}
specifier|public
name|int
name|getNumBuckets
parameter_list|()
block|{
return|return
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
return|;
block|}
comment|/**    * Replaces files in the partition with new data set specified by srcf. Works    * by moving files    *     * @param srcf    *          Files to be replaced. Leaf directories or globbed file paths    * @param tmpd    *          Temporary directory    */
specifier|protected
name|void
name|replaceFiles
parameter_list|(
name|Path
name|srcf
parameter_list|,
name|Path
name|tmpd
parameter_list|)
throws|throws
name|HiveException
block|{
name|FileSystem
name|fs
decl_stmt|;
try|try
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getDataLocation
argument_list|()
argument_list|,
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|Hive
operator|.
name|replaceFiles
argument_list|(
name|srcf
argument_list|,
operator|new
name|Path
argument_list|(
name|getDataLocation
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|fs
argument_list|,
name|tmpd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"addFiles: filesystem error in check phase"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Inserts files specified into the partition. Works by moving files    *     * @param srcf    *          Files to be moved. Leaf directories or globbed file paths    */
specifier|protected
name|void
name|copyFiles
parameter_list|(
name|Path
name|srcf
parameter_list|)
throws|throws
name|HiveException
block|{
name|FileSystem
name|fs
decl_stmt|;
try|try
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getDataLocation
argument_list|()
argument_list|,
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|Hive
operator|.
name|copyFiles
argument_list|(
name|srcf
argument_list|,
operator|new
name|Path
argument_list|(
name|getDataLocation
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"addFiles: filesystem error in check phase"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setInputFormatClass
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|setInputFormatClass
argument_list|(
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|JavaUtils
operator|.
name|getClassLoader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Class not found: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setOutputFormatClass
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|origin
init|=
name|Class
operator|.
name|forName
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|JavaUtils
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|setOutputFormatClass
argument_list|(
name|HiveFileFormatUtils
operator|.
name|getOutputFormatSubstitute
argument_list|(
name|origin
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Class not found: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|isPartitioned
parameter_list|()
block|{
if|if
condition|(
name|getPartCols
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|(
name|getPartCols
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|0
operator|)
return|;
block|}
specifier|public
name|void
name|setFields
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
parameter_list|)
block|{
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|setCols
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setNumBuckets
parameter_list|(
name|int
name|nb
parameter_list|)
block|{
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|setNumBuckets
argument_list|(
name|nb
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return The owner of the table.    * @see org.apache.hadoop.hive.metastore.api.Table#getOwner()    */
specifier|public
name|String
name|getOwner
parameter_list|()
block|{
return|return
name|tTable
operator|.
name|getOwner
argument_list|()
return|;
block|}
comment|/**    * @return The table parameters.    * @see org.apache.hadoop.hive.metastore.api.Table#getParameters()    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|tTable
operator|.
name|getParameters
argument_list|()
return|;
block|}
comment|/**    * @return The retention on the table.    * @see org.apache.hadoop.hive.metastore.api.Table#getRetention()    */
specifier|public
name|int
name|getRetention
parameter_list|()
block|{
return|return
name|tTable
operator|.
name|getRetention
argument_list|()
return|;
block|}
comment|/**    * @param owner    * @see org.apache.hadoop.hive.metastore.api.Table#setOwner(java.lang.String)    */
specifier|public
name|void
name|setOwner
parameter_list|(
name|String
name|owner
parameter_list|)
block|{
name|tTable
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param retention    * @see org.apache.hadoop.hive.metastore.api.Table#setRetention(int)    */
specifier|public
name|void
name|setRetention
parameter_list|(
name|int
name|retention
parameter_list|)
block|{
name|tTable
operator|.
name|setRetention
argument_list|(
name|retention
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SerDeInfo
name|getSerdeInfo
parameter_list|()
block|{
return|return
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
return|;
block|}
specifier|public
name|void
name|setSerializationLib
parameter_list|(
name|String
name|lib
parameter_list|)
block|{
name|getSerdeInfo
argument_list|()
operator|.
name|setSerializationLib
argument_list|(
name|lib
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getSerializationLib
parameter_list|()
block|{
return|return
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
return|;
block|}
specifier|public
name|String
name|getSerdeParam
parameter_list|(
name|String
name|param
parameter_list|)
block|{
return|return
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|param
argument_list|)
return|;
block|}
specifier|public
name|String
name|setSerdeParam
parameter_list|(
name|String
name|param
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|param
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBucketCols
parameter_list|()
block|{
return|return
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getBucketCols
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|Order
argument_list|>
name|getSortCols
parameter_list|()
block|{
return|return
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getSortCols
argument_list|()
return|;
block|}
comment|/**    * @return the original view text, or null if this table is not a view    */
specifier|public
name|String
name|getViewOriginalText
parameter_list|()
block|{
return|return
name|getTTable
argument_list|()
operator|.
name|getViewOriginalText
argument_list|()
return|;
block|}
comment|/**    * @param viewOriginalText    *          the original view text to set    */
specifier|public
name|void
name|setViewOriginalText
parameter_list|(
name|String
name|viewOriginalText
parameter_list|)
block|{
name|getTTable
argument_list|()
operator|.
name|setViewOriginalText
argument_list|(
name|viewOriginalText
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the expanded view text, or null if this table is not a view    */
specifier|public
name|String
name|getViewExpandedText
parameter_list|()
block|{
return|return
name|getTTable
argument_list|()
operator|.
name|getViewExpandedText
argument_list|()
return|;
block|}
comment|/**    * @param viewExpandedText    *          the expanded view text to set    */
specifier|public
name|void
name|setViewExpandedText
parameter_list|(
name|String
name|viewExpandedText
parameter_list|)
block|{
name|getTTable
argument_list|()
operator|.
name|setViewExpandedText
argument_list|(
name|viewExpandedText
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return whether this table is actually a view    */
specifier|public
name|boolean
name|isView
parameter_list|()
block|{
return|return
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|.
name|equals
argument_list|(
name|getTableType
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates a partition name -> value spec map object    *     * @param tp    *          Use the information from this partition.    * @return Partition name to value mapping.    */
specifier|public
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|createSpec
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
name|tp
parameter_list|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fsl
init|=
name|getPartCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tpl
init|=
name|tp
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|spec
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fsl
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FieldSchema
name|fs
init|=
name|fsl
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|tpl
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|spec
operator|.
name|put
argument_list|(
name|fs
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|spec
return|;
block|}
specifier|public
name|Table
name|copy
parameter_list|()
throws|throws
name|HiveException
block|{
name|Table
name|newTbl
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|newTbl
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|newTbl
operator|.
name|deserializer
operator|=
name|deserializer
expr_stmt|;
comment|// TODO: convert to SerDeInfo format
name|newTbl
operator|.
name|setTTable
argument_list|(
name|getTTable
argument_list|()
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
name|newTbl
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|newTbl
operator|.
name|inputFormatClass
operator|=
name|inputFormatClass
expr_stmt|;
name|newTbl
operator|.
name|outputFormatClass
operator|=
name|outputFormatClass
expr_stmt|;
return|return
name|newTbl
return|;
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

end_unit

