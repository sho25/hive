begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  * JDBM LICENSE v1.00  *  * Redistribution and use of this software and associated documentation  * ("Software"), with or without modification, are permitted provided  * that the following conditions are met:  *  * 1. Redistributions of source code must retain copyright  *    statements and notices.  Redistributions must also contain a  *    copy of this document.  *  * 2. Redistributions in binary form must reproduce the  *    above copyright notice, this list of conditions and the  *    following disclaimer in the documentation and/or other  *    materials provided with the distribution.  *  * 3. The name "JDBM" must not be used to endorse or promote  *    products derived from this Software without prior written  *    permission of Cees de Groot.  For written permission,  *    please contact cg@cdegroot.com.  *  * 4. Products derived from this Software may not be called "JDBM"  *    nor may "JDBM" appear in their names without prior written  *    permission of Cees de Groot.   *  * 5. Due credit should be given to the JDBM Project  *    (http://jdbm.sourceforge.net/).  *  * THIS SOFTWARE IS PROVIDED BY THE JDBM PROJECT AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT  * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND  * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL  * CEES DE GROOT OR ANY CONTRIBUTORS BE LIABLE FOR ANY DIRECT,  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  *  * Copyright 2000 (C) Cees de Groot. All Rights Reserved.  * Contributions are Copyright (C) 2000 by their associated contributors.  *  * $Id: FreePhysicalRowIdPage.java,v 1.1 2000/05/06 00:00:31 boisvert Exp $  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|recman
package|;
end_package

begin_comment
comment|/**  * Class describing a page that holds physical rowids that were freed.  */
end_comment

begin_class
specifier|final
class|class
name|FreePhysicalRowIdPage
extends|extends
name|PageHeader
block|{
comment|// offsets
specifier|private
specifier|static
specifier|final
name|short
name|O_COUNT
init|=
name|PageHeader
operator|.
name|SIZE
decl_stmt|;
comment|// short count
specifier|static
specifier|final
name|short
name|O_FREE
init|=
name|O_COUNT
operator|+
name|Magic
operator|.
name|SZ_SHORT
decl_stmt|;
specifier|static
specifier|final
name|short
name|ELEMS_PER_PAGE
init|=
operator|(
name|RecordFile
operator|.
name|BLOCK_SIZE
operator|-
name|O_FREE
operator|)
operator|/
name|FreePhysicalRowId
operator|.
name|SIZE
decl_stmt|;
comment|// slots we returned.
name|FreePhysicalRowId
index|[]
name|slots
init|=
operator|new
name|FreePhysicalRowId
index|[
name|ELEMS_PER_PAGE
index|]
decl_stmt|;
comment|/**    * Constructs a data page view from the indicated block.    */
name|FreePhysicalRowIdPage
parameter_list|(
name|BlockIo
name|block
parameter_list|)
block|{
name|super
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
comment|/**    * Factory method to create or return a data page for the indicated block.    */
specifier|static
name|FreePhysicalRowIdPage
name|getFreePhysicalRowIdPageView
parameter_list|(
name|BlockIo
name|block
parameter_list|)
block|{
name|BlockView
name|view
init|=
name|block
operator|.
name|getView
argument_list|()
decl_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
operator|&&
name|view
operator|instanceof
name|FreePhysicalRowIdPage
condition|)
block|{
return|return
operator|(
name|FreePhysicalRowIdPage
operator|)
name|view
return|;
block|}
else|else
block|{
return|return
operator|new
name|FreePhysicalRowIdPage
argument_list|(
name|block
argument_list|)
return|;
block|}
block|}
comment|/** Returns the number of free rowids */
name|short
name|getCount
parameter_list|()
block|{
return|return
name|block
operator|.
name|readShort
argument_list|(
name|O_COUNT
argument_list|)
return|;
block|}
comment|/** Sets the number of free rowids */
specifier|private
name|void
name|setCount
parameter_list|(
name|short
name|i
parameter_list|)
block|{
name|block
operator|.
name|writeShort
argument_list|(
name|O_COUNT
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
comment|/** Frees a slot */
name|void
name|free
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
name|get
argument_list|(
name|slot
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setCount
argument_list|(
call|(
name|short
call|)
argument_list|(
name|getCount
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Allocates a slot */
name|FreePhysicalRowId
name|alloc
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
name|setCount
argument_list|(
call|(
name|short
call|)
argument_list|(
name|getCount
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|get
argument_list|(
name|slot
argument_list|)
return|;
block|}
comment|/** Returns true if a slot is allocated */
name|boolean
name|isAllocated
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|slot
argument_list|)
operator|.
name|getSize
argument_list|()
operator|!=
literal|0
return|;
block|}
comment|/** Returns true if a slot is free */
name|boolean
name|isFree
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
operator|!
name|isAllocated
argument_list|(
name|slot
argument_list|)
return|;
block|}
comment|/** Returns the value of the indicated slot */
name|FreePhysicalRowId
name|get
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
if|if
condition|(
name|slots
index|[
name|slot
index|]
operator|==
literal|null
condition|)
block|{
name|slots
index|[
name|slot
index|]
operator|=
operator|new
name|FreePhysicalRowId
argument_list|(
name|block
argument_list|,
name|slotToOffset
argument_list|(
name|slot
argument_list|)
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
return|return
name|slots
index|[
name|slot
index|]
return|;
block|}
comment|/** Converts slot to offset */
name|short
name|slotToOffset
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
call|(
name|short
call|)
argument_list|(
name|O_FREE
operator|+
operator|(
name|slot
operator|*
name|FreePhysicalRowId
operator|.
name|SIZE
operator|)
argument_list|)
return|;
block|}
comment|/**    * Returns first free slot, -1 if no slots are available    */
name|int
name|getFirstFree
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ELEMS_PER_PAGE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isFree
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Returns first slot with available size>= indicated size, or -1 if no slots    * are available.    **/
name|int
name|getFirstLargerThan
parameter_list|(
name|int
name|size
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ELEMS_PER_PAGE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isAllocated
argument_list|(
name|i
argument_list|)
operator|&&
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getSize
argument_list|()
operator|>=
name|size
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

