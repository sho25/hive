begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|AppMasterEventOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FetchTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|HashTableDummyOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UnionOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|GenMapRedUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|BaseWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DynamicPruningEventDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FileSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TezEdgeProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TezEdgeProperty
operator|.
name|EdgeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TezWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|UnionWork
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BiMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashBiMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceSinkDesc
operator|.
name|ReducerTraits
operator|.
name|AUTOPARALLEL
import|;
end_import

begin_comment
comment|/**  * GenTezUtils is a collection of shared helper methods to produce  * TezWork  */
end_comment

begin_class
specifier|public
class|class
name|GenTezUtils
block|{
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GenTezUtils
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// sequence number is used to name vertices (e.g.: Map 1, Reduce 14, ...)
specifier|private
name|int
name|sequenceNumber
init|=
literal|0
decl_stmt|;
comment|// singleton
specifier|private
specifier|static
name|GenTezUtils
name|utils
decl_stmt|;
specifier|public
specifier|static
name|GenTezUtils
name|getUtils
parameter_list|()
block|{
if|if
condition|(
name|utils
operator|==
literal|null
condition|)
block|{
name|utils
operator|=
operator|new
name|GenTezUtils
argument_list|()
expr_stmt|;
block|}
return|return
name|utils
return|;
block|}
specifier|protected
name|GenTezUtils
parameter_list|()
block|{   }
specifier|public
name|void
name|resetSequenceNumber
parameter_list|()
block|{
name|sequenceNumber
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|UnionWork
name|createUnionWork
parameter_list|(
name|GenTezProcContext
name|context
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|root
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|leaf
parameter_list|,
name|TezWork
name|tezWork
parameter_list|)
block|{
name|UnionWork
name|unionWork
init|=
operator|new
name|UnionWork
argument_list|(
literal|"Union "
operator|+
operator|(
operator|++
name|sequenceNumber
operator|)
argument_list|)
decl_stmt|;
name|context
operator|.
name|rootUnionWorkMap
operator|.
name|put
argument_list|(
name|root
argument_list|,
name|unionWork
argument_list|)
expr_stmt|;
name|context
operator|.
name|unionWorkMap
operator|.
name|put
argument_list|(
name|leaf
argument_list|,
name|unionWork
argument_list|)
expr_stmt|;
name|tezWork
operator|.
name|add
argument_list|(
name|unionWork
argument_list|)
expr_stmt|;
return|return
name|unionWork
return|;
block|}
specifier|public
name|ReduceWork
name|createReduceWork
parameter_list|(
name|GenTezProcContext
name|context
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|root
parameter_list|,
name|TezWork
name|tezWork
parameter_list|)
block|{
assert|assert
operator|!
name|root
operator|.
name|getParentOperators
argument_list|()
operator|.
name|isEmpty
argument_list|()
assert|;
name|boolean
name|isAutoReduceParallelism
init|=
name|context
operator|.
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|TEZ_AUTO_REDUCER_PARALLELISM
argument_list|)
decl_stmt|;
name|float
name|maxPartitionFactor
init|=
name|context
operator|.
name|conf
operator|.
name|getFloatVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|TEZ_MAX_PARTITION_FACTOR
argument_list|)
decl_stmt|;
name|float
name|minPartitionFactor
init|=
name|context
operator|.
name|conf
operator|.
name|getFloatVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|TEZ_MIN_PARTITION_FACTOR
argument_list|)
decl_stmt|;
name|long
name|bytesPerReducer
init|=
name|context
operator|.
name|conf
operator|.
name|getLongVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|BYTESPERREDUCER
argument_list|)
decl_stmt|;
name|ReduceWork
name|reduceWork
init|=
operator|new
name|ReduceWork
argument_list|(
name|Utilities
operator|.
name|REDUCENAME
operator|+
operator|(
operator|++
name|sequenceNumber
operator|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding reduce work ("
operator|+
name|reduceWork
operator|.
name|getName
argument_list|()
operator|+
literal|") for "
operator|+
name|root
argument_list|)
expr_stmt|;
name|reduceWork
operator|.
name|setReducer
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|reduceWork
operator|.
name|setNeedsTagging
argument_list|(
name|GenMapRedUtils
operator|.
name|needsTagging
argument_list|(
name|reduceWork
argument_list|)
argument_list|)
expr_stmt|;
comment|// All parents should be reduce sinks. We pick the one we just walked
comment|// to choose the number of reducers. In the join/union case they will
comment|// all be -1. In sort/order case where it matters there will be only
comment|// one parent.
assert|assert
name|context
operator|.
name|parentOfRoot
operator|instanceof
name|ReduceSinkOperator
assert|;
name|ReduceSinkOperator
name|reduceSink
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|context
operator|.
name|parentOfRoot
decl_stmt|;
name|reduceWork
operator|.
name|setNumReduceTasks
argument_list|(
name|reduceSink
operator|.
name|getConf
argument_list|()
operator|.
name|getNumReducers
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAutoReduceParallelism
operator|&&
name|reduceSink
operator|.
name|getConf
argument_list|()
operator|.
name|getReducerTraits
argument_list|()
operator|.
name|contains
argument_list|(
name|AUTOPARALLEL
argument_list|)
condition|)
block|{
name|reduceWork
operator|.
name|setAutoReduceParallelism
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// configured limit for reducers
name|int
name|maxReducers
init|=
name|context
operator|.
name|conf
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAXREDUCERS
argument_list|)
decl_stmt|;
comment|// min we allow tez to pick
name|int
name|minPartition
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
call|(
name|int
call|)
argument_list|(
name|reduceSink
operator|.
name|getConf
argument_list|()
operator|.
name|getNumReducers
argument_list|()
operator|*
name|minPartitionFactor
argument_list|)
argument_list|)
decl_stmt|;
name|minPartition
operator|=
operator|(
name|minPartition
operator|>
name|maxReducers
operator|)
condition|?
name|maxReducers
else|:
name|minPartition
expr_stmt|;
comment|// max we allow tez to pick
name|int
name|maxPartition
init|=
call|(
name|int
call|)
argument_list|(
name|reduceSink
operator|.
name|getConf
argument_list|()
operator|.
name|getNumReducers
argument_list|()
operator|*
name|maxPartitionFactor
argument_list|)
decl_stmt|;
name|maxPartition
operator|=
operator|(
name|maxPartition
operator|>
name|maxReducers
operator|)
condition|?
name|maxReducers
else|:
name|maxPartition
expr_stmt|;
name|reduceWork
operator|.
name|setMinReduceTasks
argument_list|(
name|minPartition
argument_list|)
expr_stmt|;
name|reduceWork
operator|.
name|setMaxReduceTasks
argument_list|(
name|maxPartition
argument_list|)
expr_stmt|;
block|}
name|setupReduceSink
argument_list|(
name|context
argument_list|,
name|reduceWork
argument_list|,
name|reduceSink
argument_list|)
expr_stmt|;
name|tezWork
operator|.
name|add
argument_list|(
name|reduceWork
argument_list|)
expr_stmt|;
name|TezEdgeProperty
name|edgeProp
decl_stmt|;
if|if
condition|(
name|reduceWork
operator|.
name|isAutoReduceParallelism
argument_list|()
condition|)
block|{
name|edgeProp
operator|=
operator|new
name|TezEdgeProperty
argument_list|(
name|context
operator|.
name|conf
argument_list|,
name|EdgeType
operator|.
name|SIMPLE_EDGE
argument_list|,
literal|true
argument_list|,
name|reduceWork
operator|.
name|getMinReduceTasks
argument_list|()
argument_list|,
name|reduceWork
operator|.
name|getMaxReduceTasks
argument_list|()
argument_list|,
name|bytesPerReducer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|edgeProp
operator|=
operator|new
name|TezEdgeProperty
argument_list|(
name|EdgeType
operator|.
name|SIMPLE_EDGE
argument_list|)
expr_stmt|;
block|}
name|tezWork
operator|.
name|connect
argument_list|(
name|context
operator|.
name|preceedingWork
argument_list|,
name|reduceWork
argument_list|,
name|edgeProp
argument_list|)
expr_stmt|;
name|context
operator|.
name|connectedReduceSinks
operator|.
name|add
argument_list|(
name|reduceSink
argument_list|)
expr_stmt|;
return|return
name|reduceWork
return|;
block|}
specifier|protected
name|void
name|setupReduceSink
parameter_list|(
name|GenTezProcContext
name|context
parameter_list|,
name|ReduceWork
name|reduceWork
parameter_list|,
name|ReduceSinkOperator
name|reduceSink
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting up reduce sink: "
operator|+
name|reduceSink
operator|+
literal|" with following reduce work: "
operator|+
name|reduceWork
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// need to fill in information about the key and value in the reducer
name|GenMapRedUtils
operator|.
name|setKeyAndValueDesc
argument_list|(
name|reduceWork
argument_list|,
name|reduceSink
argument_list|)
expr_stmt|;
comment|// remember which parent belongs to which tag
name|int
name|tag
init|=
name|reduceSink
operator|.
name|getConf
argument_list|()
operator|.
name|getTag
argument_list|()
decl_stmt|;
name|reduceWork
operator|.
name|getTagToInput
argument_list|()
operator|.
name|put
argument_list|(
name|tag
operator|==
operator|-
literal|1
condition|?
literal|0
else|:
name|tag
argument_list|,
name|context
operator|.
name|preceedingWork
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// remember the output name of the reduce sink
name|reduceSink
operator|.
name|getConf
argument_list|()
operator|.
name|setOutputName
argument_list|(
name|reduceWork
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MapWork
name|createMapWork
parameter_list|(
name|GenTezProcContext
name|context
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|root
parameter_list|,
name|TezWork
name|tezWork
parameter_list|,
name|PrunedPartitionList
name|partitions
parameter_list|)
throws|throws
name|SemanticException
block|{
assert|assert
name|root
operator|.
name|getParentOperators
argument_list|()
operator|.
name|isEmpty
argument_list|()
assert|;
name|MapWork
name|mapWork
init|=
operator|new
name|MapWork
argument_list|(
name|Utilities
operator|.
name|MAPNAME
operator|+
operator|(
operator|++
name|sequenceNumber
operator|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding map work ("
operator|+
name|mapWork
operator|.
name|getName
argument_list|()
operator|+
literal|") for "
operator|+
name|root
argument_list|)
expr_stmt|;
comment|// map work starts with table scan operators
assert|assert
name|root
operator|instanceof
name|TableScanOperator
assert|;
name|TableScanOperator
name|ts
init|=
operator|(
name|TableScanOperator
operator|)
name|root
decl_stmt|;
name|String
name|alias
init|=
name|ts
operator|.
name|getConf
argument_list|()
operator|.
name|getAlias
argument_list|()
decl_stmt|;
name|setupMapWork
argument_list|(
name|mapWork
argument_list|,
name|context
argument_list|,
name|partitions
argument_list|,
name|root
argument_list|,
name|alias
argument_list|)
expr_stmt|;
if|if
condition|(
name|ts
operator|.
name|getConf
argument_list|()
operator|.
name|getTableMetadata
argument_list|()
operator|!=
literal|null
operator|&&
name|ts
operator|.
name|getConf
argument_list|()
operator|.
name|getTableMetadata
argument_list|()
operator|.
name|isDummyTable
argument_list|()
condition|)
block|{
name|mapWork
operator|.
name|setDummyTableScan
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// add new item to the tez work
name|tezWork
operator|.
name|add
argument_list|(
name|mapWork
argument_list|)
expr_stmt|;
return|return
name|mapWork
return|;
block|}
comment|// this method's main use is to help unit testing this class
specifier|protected
name|void
name|setupMapWork
parameter_list|(
name|MapWork
name|mapWork
parameter_list|,
name|GenTezProcContext
name|context
parameter_list|,
name|PrunedPartitionList
name|partitions
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|root
parameter_list|,
name|String
name|alias
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// All the setup is done in GenMapRedUtils
name|GenMapRedUtils
operator|.
name|setMapWork
argument_list|(
name|mapWork
argument_list|,
name|context
operator|.
name|parseContext
argument_list|,
name|context
operator|.
name|inputs
argument_list|,
name|partitions
argument_list|,
name|root
argument_list|,
name|alias
argument_list|,
name|context
operator|.
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// removes any union operator and clones the plan
specifier|public
name|void
name|removeUnionOperators
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|GenTezProcContext
name|context
parameter_list|,
name|BaseWork
name|work
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|roots
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|roots
operator|.
name|addAll
argument_list|(
name|work
operator|.
name|getAllRootOperators
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|work
operator|.
name|getDummyOps
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|roots
operator|.
name|addAll
argument_list|(
name|work
operator|.
name|getDummyOps
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|roots
operator|.
name|addAll
argument_list|(
name|context
operator|.
name|eventOperatorSet
argument_list|)
expr_stmt|;
comment|// need to clone the plan.
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|newRoots
init|=
name|Utilities
operator|.
name|cloneOperatorTree
argument_list|(
name|conf
argument_list|,
name|roots
argument_list|)
decl_stmt|;
comment|// we're cloning the operator plan but we're retaining the original work. That means
comment|// that root operators have to be replaced with the cloned ops. The replacement map
comment|// tells you what that mapping is.
name|BiMap
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|,
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|replacementMap
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// there's some special handling for dummyOps required. Mapjoins won't be properly
comment|// initialized if their dummy parents aren't initialized. Since we cloned the plan
comment|// we need to replace the dummy operators in the work with the cloned ones.
name|List
argument_list|<
name|HashTableDummyOperator
argument_list|>
name|dummyOps
init|=
operator|new
name|LinkedList
argument_list|<
name|HashTableDummyOperator
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|it
init|=
name|newRoots
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|orig
range|:
name|roots
control|)
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|newRoot
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|replacementMap
operator|.
name|put
argument_list|(
name|orig
argument_list|,
name|newRoot
argument_list|)
expr_stmt|;
if|if
condition|(
name|newRoot
operator|instanceof
name|HashTableDummyOperator
condition|)
block|{
comment|// dummy ops need to be updated to the cloned ones.
name|dummyOps
operator|.
name|add
argument_list|(
operator|(
name|HashTableDummyOperator
operator|)
name|newRoot
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newRoot
operator|instanceof
name|AppMasterEventOperator
condition|)
block|{
comment|// event operators point to table scan operators. When cloning these we
comment|// need to restore the original scan.
if|if
condition|(
name|newRoot
operator|.
name|getConf
argument_list|()
operator|instanceof
name|DynamicPruningEventDesc
condition|)
block|{
name|TableScanOperator
name|ts
init|=
operator|(
operator|(
name|DynamicPruningEventDesc
operator|)
name|orig
operator|.
name|getConf
argument_list|()
operator|)
operator|.
name|getTableScan
argument_list|()
decl_stmt|;
if|if
condition|(
name|ts
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"No table scan associated with dynamic event pruning. "
operator|+
name|orig
argument_list|)
throw|;
block|}
operator|(
operator|(
name|DynamicPruningEventDesc
operator|)
name|newRoot
operator|.
name|getConf
argument_list|()
operator|)
operator|.
name|setTableScan
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|newRoot
operator|instanceof
name|TableScanOperator
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|tsToEventMap
operator|.
name|containsKey
argument_list|(
name|orig
argument_list|)
condition|)
block|{
comment|// we need to update event operators with the cloned table scan
for|for
control|(
name|AppMasterEventOperator
name|event
range|:
name|context
operator|.
name|tsToEventMap
operator|.
name|get
argument_list|(
name|orig
argument_list|)
control|)
block|{
operator|(
operator|(
name|DynamicPruningEventDesc
operator|)
name|event
operator|.
name|getConf
argument_list|()
operator|)
operator|.
name|setTableScan
argument_list|(
operator|(
name|TableScanOperator
operator|)
name|newRoot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|context
operator|.
name|rootToWorkMap
operator|.
name|remove
argument_list|(
name|orig
argument_list|)
expr_stmt|;
name|context
operator|.
name|rootToWorkMap
operator|.
name|put
argument_list|(
name|newRoot
argument_list|,
name|work
argument_list|)
expr_stmt|;
block|}
block|}
comment|// now we remove all the unions. we throw away any branch that's not reachable from
comment|// the current set of roots. The reason is that those branches will be handled in
comment|// different tasks.
name|Deque
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|operators
init|=
operator|new
name|LinkedList
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|operators
operator|.
name|addAll
argument_list|(
name|newRoots
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|seen
init|=
operator|new
name|HashSet
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|operators
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|current
init|=
name|operators
operator|.
name|pop
argument_list|()
decl_stmt|;
name|seen
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|instanceof
name|FileSinkOperator
condition|)
block|{
name|FileSinkOperator
name|fileSink
init|=
operator|(
name|FileSinkOperator
operator|)
name|current
decl_stmt|;
comment|// remember it for additional processing later
name|context
operator|.
name|fileSinkSet
operator|.
name|add
argument_list|(
name|fileSink
argument_list|)
expr_stmt|;
name|FileSinkDesc
name|desc
init|=
name|fileSink
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|desc
operator|.
name|getDirName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FileSinkDesc
argument_list|>
name|linked
decl_stmt|;
if|if
condition|(
operator|!
name|context
operator|.
name|linkedFileSinks
operator|.
name|containsKey
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|linked
operator|=
operator|new
name|ArrayList
argument_list|<
name|FileSinkDesc
argument_list|>
argument_list|()
expr_stmt|;
name|context
operator|.
name|linkedFileSinks
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|linked
argument_list|)
expr_stmt|;
block|}
name|linked
operator|=
name|context
operator|.
name|linkedFileSinks
operator|.
name|get
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|linked
operator|.
name|add
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setDirName
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|""
operator|+
name|linked
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setLinkedFileSinkDesc
argument_list|(
name|linked
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|current
operator|instanceof
name|AppMasterEventOperator
condition|)
block|{
comment|// remember for additional processing later
name|context
operator|.
name|eventOperatorSet
operator|.
name|add
argument_list|(
operator|(
name|AppMasterEventOperator
operator|)
name|current
argument_list|)
expr_stmt|;
comment|// mark the original as abandoned. Don't need it anymore.
name|context
operator|.
name|abandonedEventOperatorSet
operator|.
name|add
argument_list|(
operator|(
name|AppMasterEventOperator
operator|)
name|replacementMap
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|current
operator|instanceof
name|UnionOperator
condition|)
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|parent
init|=
literal|null
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|op
range|:
name|current
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
if|if
condition|(
name|seen
operator|.
name|contains
argument_list|(
name|op
argument_list|)
condition|)
block|{
operator|++
name|count
expr_stmt|;
name|parent
operator|=
name|op
expr_stmt|;
block|}
block|}
comment|// we should have been able to reach the union from only one side.
assert|assert
name|count
operator|<=
literal|1
assert|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
comment|// root operator is union (can happen in reducers)
name|replacementMap
operator|.
name|put
argument_list|(
name|current
argument_list|,
name|current
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|removeChildAndAdoptItsChildren
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|current
operator|instanceof
name|FileSinkOperator
operator|||
name|current
operator|instanceof
name|ReduceSinkOperator
condition|)
block|{
name|current
operator|.
name|setChildOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|operators
operator|.
name|addAll
argument_list|(
name|current
operator|.
name|getChildOperators
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|work
operator|.
name|setDummyOps
argument_list|(
name|dummyOps
argument_list|)
expr_stmt|;
name|work
operator|.
name|replaceRoots
argument_list|(
name|replacementMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|processFileSink
parameter_list|(
name|GenTezProcContext
name|context
parameter_list|,
name|FileSinkOperator
name|fileSink
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ParseContext
name|parseContext
init|=
name|context
operator|.
name|parseContext
decl_stmt|;
name|boolean
name|isInsertTable
init|=
comment|// is INSERT OVERWRITE TABLE
name|GenMapRedUtils
operator|.
name|isInsertInto
argument_list|(
name|parseContext
argument_list|,
name|fileSink
argument_list|)
decl_stmt|;
name|HiveConf
name|hconf
init|=
name|parseContext
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|boolean
name|chDir
init|=
name|GenMapRedUtils
operator|.
name|isMergeRequired
argument_list|(
name|context
operator|.
name|moveTask
argument_list|,
name|hconf
argument_list|,
name|fileSink
argument_list|,
name|context
operator|.
name|currentTask
argument_list|,
name|isInsertTable
argument_list|)
decl_stmt|;
name|Path
name|finalName
init|=
name|GenMapRedUtils
operator|.
name|createMoveTask
argument_list|(
name|context
operator|.
name|currentTask
argument_list|,
name|chDir
argument_list|,
name|fileSink
argument_list|,
name|parseContext
argument_list|,
name|context
operator|.
name|moveTask
argument_list|,
name|hconf
argument_list|,
name|context
operator|.
name|dependencyTask
argument_list|)
decl_stmt|;
if|if
condition|(
name|chDir
condition|)
block|{
comment|// Merge the files in the destination table/partitions by creating Map-only merge job
comment|// If underlying data is RCFile or OrcFile, RCFileBlockMerge task or
comment|// OrcFileStripeMerge task would be created.
name|LOG
operator|.
name|info
argument_list|(
literal|"using CombineHiveInputformat for the merge job"
argument_list|)
expr_stmt|;
name|GenMapRedUtils
operator|.
name|createMRWorkForMergingFiles
argument_list|(
name|fileSink
argument_list|,
name|finalName
argument_list|,
name|context
operator|.
name|dependencyTask
argument_list|,
name|context
operator|.
name|moveTask
argument_list|,
name|hconf
argument_list|,
name|context
operator|.
name|currentTask
argument_list|)
expr_stmt|;
block|}
name|FetchTask
name|fetchTask
init|=
name|parseContext
operator|.
name|getFetchTask
argument_list|()
decl_stmt|;
if|if
condition|(
name|fetchTask
operator|!=
literal|null
operator|&&
name|context
operator|.
name|currentTask
operator|.
name|getNumChild
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|fetchTask
operator|.
name|isFetchFrom
argument_list|(
name|fileSink
operator|.
name|getConf
argument_list|()
argument_list|)
condition|)
block|{
name|context
operator|.
name|currentTask
operator|.
name|setFetchSource
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * processAppMasterEvent sets up the event descriptor and the MapWork.    *    * @param procCtx    * @param event    */
specifier|public
name|void
name|processAppMasterEvent
parameter_list|(
name|GenTezProcContext
name|procCtx
parameter_list|,
name|AppMasterEventOperator
name|event
parameter_list|)
block|{
if|if
condition|(
name|procCtx
operator|.
name|abandonedEventOperatorSet
operator|.
name|contains
argument_list|(
name|event
argument_list|)
condition|)
block|{
comment|// don't need this anymore
return|return;
block|}
name|DynamicPruningEventDesc
name|eventDesc
init|=
operator|(
name|DynamicPruningEventDesc
operator|)
name|event
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|TableScanOperator
name|ts
init|=
name|eventDesc
operator|.
name|getTableScan
argument_list|()
decl_stmt|;
name|MapWork
name|work
init|=
operator|(
name|MapWork
operator|)
name|procCtx
operator|.
name|rootToWorkMap
operator|.
name|get
argument_list|(
name|ts
argument_list|)
decl_stmt|;
if|if
condition|(
name|work
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"No work found for tablescan "
operator|+
name|ts
argument_list|)
throw|;
block|}
name|BaseWork
name|enclosingWork
init|=
name|getEnclosingWork
argument_list|(
name|event
argument_list|,
name|procCtx
argument_list|)
decl_stmt|;
if|if
condition|(
name|enclosingWork
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Cannot find work for operator"
operator|+
name|event
argument_list|)
throw|;
block|}
name|String
name|sourceName
init|=
name|enclosingWork
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// store the vertex name in the operator pipeline
name|eventDesc
operator|.
name|setVertexName
argument_list|(
name|work
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|eventDesc
operator|.
name|setInputName
argument_list|(
name|work
operator|.
name|getAliases
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// store table descriptor in map-work
if|if
condition|(
operator|!
name|work
operator|.
name|getEventSourceTableDescMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|sourceName
argument_list|)
condition|)
block|{
name|work
operator|.
name|getEventSourceTableDescMap
argument_list|()
operator|.
name|put
argument_list|(
name|sourceName
argument_list|,
operator|new
name|LinkedList
argument_list|<
name|TableDesc
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|TableDesc
argument_list|>
name|tables
init|=
name|work
operator|.
name|getEventSourceTableDescMap
argument_list|()
operator|.
name|get
argument_list|(
name|sourceName
argument_list|)
decl_stmt|;
name|tables
operator|.
name|add
argument_list|(
name|event
operator|.
name|getConf
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
comment|// store column name in map-work
if|if
condition|(
operator|!
name|work
operator|.
name|getEventSourceColumnNameMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|sourceName
argument_list|)
condition|)
block|{
name|work
operator|.
name|getEventSourceColumnNameMap
argument_list|()
operator|.
name|put
argument_list|(
name|sourceName
argument_list|,
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
name|work
operator|.
name|getEventSourceColumnNameMap
argument_list|()
operator|.
name|get
argument_list|(
name|sourceName
argument_list|)
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|eventDesc
operator|.
name|getTargetColumnName
argument_list|()
argument_list|)
expr_stmt|;
comment|// store partition key expr in map-work
if|if
condition|(
operator|!
name|work
operator|.
name|getEventSourcePartKeyExprMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|sourceName
argument_list|)
condition|)
block|{
name|work
operator|.
name|getEventSourcePartKeyExprMap
argument_list|()
operator|.
name|put
argument_list|(
name|sourceName
argument_list|,
operator|new
name|LinkedList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keys
init|=
name|work
operator|.
name|getEventSourcePartKeyExprMap
argument_list|()
operator|.
name|get
argument_list|(
name|sourceName
argument_list|)
decl_stmt|;
name|keys
operator|.
name|add
argument_list|(
name|eventDesc
operator|.
name|getPartKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * getEncosingWork finds the BaseWork any given operator belongs to.    */
specifier|public
name|BaseWork
name|getEnclosingWork
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|op
parameter_list|,
name|GenTezProcContext
name|procCtx
parameter_list|)
block|{
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|findRoots
argument_list|(
name|op
argument_list|,
name|ops
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|r
range|:
name|ops
control|)
block|{
name|BaseWork
name|work
init|=
name|procCtx
operator|.
name|rootToWorkMap
operator|.
name|get
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|work
operator|!=
literal|null
condition|)
block|{
return|return
name|work
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/*    * findRoots returns all root operators (in ops) that result in operator op    */
specifier|private
name|void
name|findRoots
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|op
parameter_list|,
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|ops
parameter_list|)
block|{
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|parents
init|=
name|op
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
if|if
condition|(
name|parents
operator|==
literal|null
operator|||
name|parents
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ops
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|p
range|:
name|parents
control|)
block|{
name|findRoots
argument_list|(
name|p
argument_list|,
name|ops
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

