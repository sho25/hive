begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|timestamp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneOffset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|LogicalTypeAnnotation
operator|.
name|TimeUnit
import|;
end_import

begin_class
specifier|public
class|class
name|ParquetTimestampUtils
block|{
specifier|private
specifier|static
specifier|final
name|long
name|MILLI
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|MICRO
init|=
literal|1_000_000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|NANO
init|=
literal|1_000_000_000
decl_stmt|;
specifier|public
specifier|static
name|Timestamp
name|getTimestamp
parameter_list|(
name|long
name|value
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|,
name|boolean
name|isAdjustedToUTC
parameter_list|)
block|{
name|ZoneId
name|zone
init|=
name|ZoneOffset
operator|.
name|UTC
decl_stmt|;
if|if
condition|(
name|isAdjustedToUTC
condition|)
block|{
name|zone
operator|=
name|ZoneId
operator|.
name|systemDefault
argument_list|()
expr_stmt|;
block|}
name|long
name|seconds
init|=
literal|0L
decl_stmt|;
name|long
name|nanoseconds
init|=
literal|0L
decl_stmt|;
switch|switch
condition|(
name|timeUnit
condition|)
block|{
case|case
name|MILLIS
case|:
name|seconds
operator|=
name|value
operator|/
name|MILLI
expr_stmt|;
name|nanoseconds
operator|=
operator|(
name|value
operator|%
name|MILLI
operator|)
operator|*
name|MICRO
expr_stmt|;
break|break;
case|case
name|MICROS
case|:
name|seconds
operator|=
name|value
operator|/
name|MICRO
expr_stmt|;
name|nanoseconds
operator|=
operator|(
name|value
operator|%
name|MICRO
operator|)
operator|*
name|MILLI
expr_stmt|;
break|break;
case|case
name|NANOS
case|:
name|seconds
operator|=
name|value
operator|/
name|NANO
expr_stmt|;
name|nanoseconds
operator|=
operator|(
name|value
operator|%
name|NANO
operator|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|Timestamp
operator|.
name|ofEpochSecond
argument_list|(
name|seconds
argument_list|,
name|nanoseconds
argument_list|,
name|zone
argument_list|)
return|;
block|}
block|}
end_class

end_unit

