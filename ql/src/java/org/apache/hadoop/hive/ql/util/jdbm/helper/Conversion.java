begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  * JDBM LICENSE v1.00  *  * Redistribution and use of this software and associated documentation  * ("Software"), with or without modification, are permitted provided  * that the following conditions are met:  *  * 1. Redistributions of source code must retain copyright  *    statements and notices.  Redistributions must also contain a  *    copy of this document.  *  * 2. Redistributions in binary form must reproduce the  *    above copyright notice, this list of conditions and the  *    following disclaimer in the documentation and/or other  *    materials provided with the distribution.  *  * 3. The name "JDBM" must not be used to endorse or promote  *    products derived from this Software without prior written  *    permission of Cees de Groot.  For written permission,  *    please contact cg@cdegroot.com.  *  * 4. Products derived from this Software may not be called "JDBM"  *    nor may "JDBM" appear in their names without prior written  *    permission of Cees de Groot.  *  * 5. Due credit should be given to the JDBM Project  *    (http://jdbm.sourceforge.net/).  *  * THIS SOFTWARE IS PROVIDED BY THE JDBM PROJECT AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT  * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND  * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL  * CEES DE GROOT OR ANY CONTRIBUTORS BE LIABLE FOR ANY DIRECT,  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  *  * Copyright 2001 (C) Alex Boisvert. All Rights Reserved.  * Contributions are Copyright (C) 2001 by their associated contributors.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|helper
package|;
end_package

begin_comment
comment|/**  * Miscelaneous conversion utility methods.  *   * @author<a href="mailto:boisvert@intalio.com">Alex Boisvert</a>  * @version $Id: Conversion.java,v 1.3 2002/05/31 06:33:20 boisvert Exp $  */
end_comment

begin_class
specifier|public
class|class
name|Conversion
block|{
comment|/**    * Convert a string into a byte array.    */
specifier|public
specifier|static
name|byte
index|[]
name|convertToByteArray
parameter_list|(
name|String
name|s
parameter_list|)
block|{
try|try
block|{
comment|// see the following page for character encoding
comment|// http://java.sun.com/products/jdk/1.1/docs/guide/intl/encoding.doc.html
return|return
name|s
operator|.
name|getBytes
argument_list|(
literal|"UTF8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
name|uee
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|(
literal|"Platform doesn't support UTF8 encoding"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert a byte into a byte array.    */
specifier|public
specifier|static
name|byte
index|[]
name|convertToByteArray
parameter_list|(
name|byte
name|n
parameter_list|)
block|{
name|n
operator|=
call|(
name|byte
call|)
argument_list|(
name|n
operator|^
operator|(
operator|(
name|byte
operator|)
literal|0x80
operator|)
argument_list|)
expr_stmt|;
comment|// flip MSB because "byte" is signed
return|return
operator|new
name|byte
index|[]
block|{
name|n
block|}
return|;
block|}
comment|/**    * Convert a short into a byte array.    */
specifier|public
specifier|static
name|byte
index|[]
name|convertToByteArray
parameter_list|(
name|short
name|n
parameter_list|)
block|{
name|n
operator|=
call|(
name|short
call|)
argument_list|(
name|n
operator|^
operator|(
operator|(
name|short
operator|)
literal|0x8000
operator|)
argument_list|)
expr_stmt|;
comment|// flip MSB because "short" is signed
name|byte
index|[]
name|key
init|=
operator|new
name|byte
index|[
literal|2
index|]
decl_stmt|;
name|pack2
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
return|return
name|key
return|;
block|}
comment|/**    * Convert an int into a byte array.    */
specifier|public
specifier|static
name|byte
index|[]
name|convertToByteArray
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|n
operator|=
operator|(
name|n
operator|^
literal|0x80000000
operator|)
expr_stmt|;
comment|// flip MSB because "int" is signed
name|byte
index|[]
name|key
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|pack4
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
return|return
name|key
return|;
block|}
comment|/**    * Convert a long into a byte array.    */
specifier|public
specifier|static
name|byte
index|[]
name|convertToByteArray
parameter_list|(
name|long
name|n
parameter_list|)
block|{
name|n
operator|=
operator|(
name|n
operator|^
literal|0x8000000000000000L
operator|)
expr_stmt|;
comment|// flip MSB because "long" is signed
name|byte
index|[]
name|key
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
name|pack8
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
return|return
name|key
return|;
block|}
comment|/**    * Convert a byte array (encoded as UTF-8) into a String    */
specifier|public
specifier|static
name|String
name|convertToString
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|)
block|{
try|try
block|{
comment|// see the following page for character encoding
comment|// http://java.sun.com/products/jdk/1.1/docs/guide/intl/encoding.doc.html
return|return
operator|new
name|String
argument_list|(
name|buf
argument_list|,
literal|"UTF8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
name|uee
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|(
literal|"Platform doesn't support UTF8 encoding"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert a byte array into an integer (signed 32-bit) value.    */
specifier|public
specifier|static
name|int
name|convertToInt
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|)
block|{
name|int
name|value
init|=
name|unpack4
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|value
operator|=
operator|(
name|value
operator|^
literal|0x80000000
operator|)
expr_stmt|;
comment|// flip MSB because "int" is signed
return|return
name|value
return|;
block|}
comment|/**    * Convert a byte array into a long (signed 64-bit) value.    */
specifier|public
specifier|static
name|long
name|convertToLong
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|)
block|{
name|long
name|value
init|=
operator|(
operator|(
name|long
operator|)
name|unpack4
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|)
operator|<<
literal|32
operator|)
operator|+
operator|(
name|unpack4
argument_list|(
name|buf
argument_list|,
literal|4
argument_list|)
operator|&
literal|0xFFFFFFFFL
operator|)
decl_stmt|;
name|value
operator|=
operator|(
name|value
operator|^
literal|0x8000000000000000L
operator|)
expr_stmt|;
comment|// flip MSB because "long" is signed
return|return
name|value
return|;
block|}
specifier|static
name|int
name|unpack4
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|int
name|value
init|=
operator|(
name|buf
index|[
name|offset
index|]
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|buf
index|[
name|offset
operator|+
literal|1
index|]
operator|<<
literal|16
operator|)
operator|&
literal|0x00FF0000
operator|)
operator||
operator|(
operator|(
name|buf
index|[
name|offset
operator|+
literal|2
index|]
operator|<<
literal|8
operator|)
operator|&
literal|0x0000FF00
operator|)
operator||
operator|(
operator|(
name|buf
index|[
name|offset
operator|+
literal|3
index|]
operator|<<
literal|0
operator|)
operator|&
literal|0x000000FF
operator|)
decl_stmt|;
return|return
name|value
return|;
block|}
specifier|static
specifier|final
name|void
name|pack2
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offs
parameter_list|,
name|int
name|val
parameter_list|)
block|{
name|data
index|[
name|offs
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|data
index|[
name|offs
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|val
expr_stmt|;
block|}
specifier|static
specifier|final
name|void
name|pack4
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offs
parameter_list|,
name|int
name|val
parameter_list|)
block|{
name|data
index|[
name|offs
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>
literal|24
argument_list|)
expr_stmt|;
name|data
index|[
name|offs
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|data
index|[
name|offs
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|data
index|[
name|offs
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|val
expr_stmt|;
block|}
specifier|static
specifier|final
name|void
name|pack8
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offs
parameter_list|,
name|long
name|val
parameter_list|)
block|{
name|pack4
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
call|(
name|int
call|)
argument_list|(
name|val
operator|>>
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|pack4
argument_list|(
name|data
argument_list|,
literal|4
argument_list|,
operator|(
name|int
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test static methods    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|byte
index|[]
name|buf
decl_stmt|;
name|buf
operator|=
name|convertToByteArray
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"int value of 5 is: "
operator|+
name|convertToInt
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|=
name|convertToByteArray
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"int value of -1 is: "
operator|+
name|convertToInt
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|=
name|convertToByteArray
argument_list|(
literal|22111000
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"int value of 22111000 is: "
operator|+
name|convertToInt
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|=
name|convertToByteArray
argument_list|(
literal|5L
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"long value of 5 is: "
operator|+
name|convertToLong
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|=
name|convertToByteArray
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"long value of -1 is: "
operator|+
name|convertToLong
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|=
name|convertToByteArray
argument_list|(
literal|1112223334445556667L
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"long value of 1112223334445556667 is: "
operator|+
name|convertToLong
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

