begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|JavaDataModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Record which hash table slot entries had key matches for FULL OUTER MapJoin.  * Supports partitioned match trackers for HybridHashTableContainer.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|MatchTracker
block|{
comment|/*    * Regular case:    *    isPartitioned = false    *    The longMatchFlags array: one bit per hash table slot entry.    *    If this tracker is underneath a partitioned tracker, then partitionParent is set.    *    * Partitioned case:    *    isPartitioned = true    *    The partitions array: a tracker for the currently active partitions.    */
specifier|private
specifier|final
name|boolean
name|isPartitioned
decl_stmt|;
specifier|private
specifier|final
name|MatchTracker
name|partitionParent
decl_stmt|;
specifier|private
specifier|final
name|long
index|[]
name|longMatchFlags
decl_stmt|;
specifier|private
specifier|final
name|MatchTracker
index|[]
name|partitions
decl_stmt|;
specifier|private
name|MatchTracker
parameter_list|(
name|boolean
name|isPartitioned
parameter_list|,
name|MatchTracker
name|partitionParent
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|this
operator|.
name|isPartitioned
operator|=
name|isPartitioned
expr_stmt|;
name|this
operator|.
name|partitionParent
operator|=
name|partitionParent
expr_stmt|;
if|if
condition|(
operator|!
name|isPartitioned
condition|)
block|{
specifier|final
name|int
name|longMatchFlagsSize
init|=
operator|(
name|count
operator|+
name|Long
operator|.
name|SIZE
operator|-
literal|1
operator|)
operator|/
name|Long
operator|.
name|SIZE
decl_stmt|;
name|longMatchFlags
operator|=
operator|new
name|long
index|[
name|longMatchFlagsSize
index|]
expr_stmt|;
name|partitions
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|longMatchFlags
operator|=
literal|null
expr_stmt|;
name|partitions
operator|=
operator|new
name|MatchTracker
index|[
name|count
index|]
expr_stmt|;
block|}
block|}
comment|/*    * Create a regular tracker.    */
specifier|public
specifier|static
name|MatchTracker
name|create
parameter_list|(
name|int
name|logicalHashBucketCount
parameter_list|)
block|{
return|return
operator|new
name|MatchTracker
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|,
name|logicalHashBucketCount
argument_list|)
return|;
block|}
comment|/*    * Create a partitioned tracker.  Use addPartition and clearPartition to maintain the currently    * active partition trackers.    */
specifier|public
specifier|static
name|MatchTracker
name|createPartitioned
parameter_list|(
name|int
name|partitionCount
parameter_list|)
block|{
return|return
operator|new
name|MatchTracker
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|,
name|partitionCount
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|getIsPartitioned
parameter_list|()
block|{
return|return
name|isPartitioned
return|;
block|}
specifier|public
name|void
name|addPartition
parameter_list|(
name|int
name|partitionId
parameter_list|,
name|int
name|logicalHashBucketCount
parameter_list|)
block|{
name|partitions
index|[
name|partitionId
index|]
operator|=
operator|new
name|MatchTracker
argument_list|(
literal|false
argument_list|,
name|this
argument_list|,
name|logicalHashBucketCount
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clearPartition
parameter_list|(
name|int
name|partitionId
parameter_list|)
block|{
name|partitions
index|[
name|partitionId
index|]
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|MatchTracker
name|getPartition
parameter_list|(
name|int
name|partitionId
parameter_list|)
block|{
return|return
name|partitions
index|[
name|partitionId
index|]
return|;
block|}
specifier|private
name|boolean
name|isFirstMatch
decl_stmt|;
specifier|public
name|boolean
name|getIsFirstMatch
parameter_list|()
block|{
return|return
name|isFirstMatch
return|;
block|}
comment|/*    * Track a regular hash table slot match.    * If this tracker is underneath a partitioned tracker, the partitioned tracker's first-match    * flag will be updated.    */
specifier|public
name|void
name|trackMatch
parameter_list|(
name|int
name|logicalSlotNum
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|isPartitioned
argument_list|)
expr_stmt|;
specifier|final
name|int
name|longWordIndex
init|=
name|logicalSlotNum
operator|/
name|Long
operator|.
name|SIZE
decl_stmt|;
specifier|final
name|long
name|longBitMask
init|=
literal|1L
operator|<<
operator|(
name|logicalSlotNum
operator|%
name|Long
operator|.
name|SIZE
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|longMatchFlags
index|[
name|longWordIndex
index|]
operator|&
name|longBitMask
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// Flag is already on.
name|isFirstMatch
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|longMatchFlags
index|[
name|longWordIndex
index|]
operator||=
name|longBitMask
expr_stmt|;
name|isFirstMatch
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|partitionParent
operator|!=
literal|null
condition|)
block|{
comment|// Push match flag up.
name|partitionParent
operator|.
name|isFirstMatch
operator|=
name|isFirstMatch
expr_stmt|;
block|}
block|}
comment|/*    * Track a partitioned hash table slot match.    */
specifier|public
name|void
name|trackPartitionMatch
parameter_list|(
name|int
name|partitionId
parameter_list|,
name|int
name|logicalSlotNum
parameter_list|)
block|{
name|partitions
index|[
name|partitionId
index|]
operator|.
name|trackMatch
argument_list|(
name|logicalSlotNum
argument_list|)
expr_stmt|;
block|}
comment|/*    * Was a regular hash table slot matched?    */
specifier|public
name|boolean
name|wasMatched
parameter_list|(
name|int
name|logicalSlotNum
parameter_list|)
block|{
specifier|final
name|int
name|longWordIndex
init|=
name|logicalSlotNum
operator|/
name|Long
operator|.
name|SIZE
decl_stmt|;
specifier|final
name|long
name|longBitMask
init|=
literal|1L
operator|<<
operator|(
name|logicalSlotNum
operator|%
name|Long
operator|.
name|SIZE
operator|)
decl_stmt|;
return|return
operator|(
name|longMatchFlags
index|[
name|longWordIndex
index|]
operator|&
name|longBitMask
operator|)
operator|!=
literal|0
return|;
block|}
comment|/*    * Was a partitioned hash table slot matched?    */
specifier|public
name|boolean
name|wasPartitionMatched
parameter_list|(
name|int
name|partitionId
parameter_list|,
name|int
name|logicalSlotNum
parameter_list|)
block|{
return|return
name|partitions
index|[
name|partitionId
index|]
operator|.
name|wasMatched
argument_list|(
name|logicalSlotNum
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|calculateEstimatedMemorySize
parameter_list|(
name|int
name|count
parameter_list|)
block|{
comment|// FUTURE: Partitioning not included yet.
specifier|final
name|int
name|longMatchFlagsSize
init|=
operator|(
name|count
operator|+
name|Long
operator|.
name|SIZE
operator|-
literal|1
operator|)
operator|/
name|Long
operator|.
name|SIZE
decl_stmt|;
name|int
name|size
init|=
literal|0
decl_stmt|;
name|JavaDataModel
name|jdm
init|=
name|JavaDataModel
operator|.
name|get
argument_list|()
decl_stmt|;
name|size
operator|+=
name|jdm
operator|.
name|lengthForLongArrayOfSize
argument_list|(
name|longMatchFlagsSize
argument_list|)
expr_stmt|;
name|size
operator|+=
name|jdm
operator|.
name|primitive1
argument_list|()
expr_stmt|;
name|size
operator|+=
operator|(
literal|2
operator|*
name|jdm
operator|.
name|object
argument_list|()
operator|)
expr_stmt|;
return|return
name|size
return|;
block|}
block|}
end_class

end_unit

