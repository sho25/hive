begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|DummyPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_comment
comment|/**  * This class encapsulates an object that is being written to by the query. This  * object may be a table, partition, dfs directory or a local directory.  */
end_comment

begin_class
specifier|public
class|class
name|WriteEntity
extends|extends
name|Entity
implements|implements
name|Serializable
block|{
comment|/**    * Only used by serialization.    */
specifier|public
name|WriteEntity
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|WriteEntity
parameter_list|(
name|Database
name|database
parameter_list|)
block|{
name|super
argument_list|(
name|database
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor for a table.    *    * @param t    *          Table that is written to.    */
specifier|public
name|WriteEntity
parameter_list|(
name|Table
name|t
parameter_list|)
block|{
name|super
argument_list|(
name|t
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WriteEntity
parameter_list|(
name|Table
name|t
parameter_list|,
name|boolean
name|complete
parameter_list|)
block|{
name|super
argument_list|(
name|t
argument_list|,
name|complete
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor for a partition.    *    * @param p    *          Partition that is written to.    */
specifier|public
name|WriteEntity
parameter_list|(
name|Partition
name|p
parameter_list|)
block|{
name|super
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WriteEntity
parameter_list|(
name|DummyPartition
name|p
parameter_list|,
name|boolean
name|complete
parameter_list|)
block|{
name|super
argument_list|(
name|p
argument_list|,
name|complete
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor for a file.    *    * @param d    *          The name of the directory that is being written to.    * @param islocal    *          Flag to decide whether this directory is local or in dfs.    */
specifier|public
name|WriteEntity
parameter_list|(
name|Path
name|d
parameter_list|,
name|boolean
name|islocal
parameter_list|)
block|{
name|super
argument_list|(
name|d
operator|.
name|toString
argument_list|()
argument_list|,
name|islocal
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Equals function.    */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|WriteEntity
condition|)
block|{
name|WriteEntity
name|ore
init|=
operator|(
name|WriteEntity
operator|)
name|o
decl_stmt|;
return|return
operator|(
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|ore
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

