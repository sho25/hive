begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|mr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FetchOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapredLocalWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_class
specifier|public
class|class
name|ExecMapperContext
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|l4j
init|=
name|ExecMapper
operator|.
name|l4j
decl_stmt|;
comment|// lastInputPath should be changed by the root of the operator tree ExecMapper.map()
comment|// but kept unchanged throughout the operator tree for one row
specifier|private
name|Path
name|lastInputPath
init|=
literal|null
decl_stmt|;
comment|// currentInputFile will be updated only by inputFileChanged(). If inputFileChanged()
comment|// is not called throughout the operator tree, currentInputPath won't be used anyways
comment|// so it won't be updated.
specifier|private
name|Path
name|currentInputPath
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|inputFileChecked
init|=
literal|false
decl_stmt|;
comment|// for SMB join, replaced with number part of task-id , making output file name
comment|// if big alias is not partitioned table, it's bucket number
comment|// if big alias is partitioned table, it's partition spec + bucket number
specifier|private
name|String
name|fileId
init|=
literal|null
decl_stmt|;
specifier|private
name|MapredLocalWork
name|localWork
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|FetchOperator
argument_list|>
name|fetchOperators
decl_stmt|;
specifier|private
name|JobConf
name|jc
decl_stmt|;
specifier|private
name|IOContext
name|ioCxt
decl_stmt|;
specifier|private
name|String
name|currentBigBucketFile
init|=
literal|null
decl_stmt|;
specifier|public
name|String
name|getCurrentBigBucketFile
parameter_list|()
block|{
return|return
name|currentBigBucketFile
return|;
block|}
specifier|public
name|void
name|setCurrentBigBucketFile
parameter_list|(
name|String
name|currentBigBucketFile
parameter_list|)
block|{
name|this
operator|.
name|currentBigBucketFile
operator|=
name|currentBigBucketFile
expr_stmt|;
block|}
specifier|public
name|ExecMapperContext
parameter_list|()
block|{
name|ioCxt
operator|=
name|IOContext
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|IOContext
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ioCxt
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * For CompbineFileInputFormat, the mapper's input file will be changed on the    * fly, and the input file name is passed to jobConf by shims/initNextRecordReader.    * If the map local work has any mapping depending on the current    * mapper's input file, the work need to clear context and re-initialization    * after the input file changed. This is first introduced to process bucket    * map join.    *    * @return is the input file changed?    */
specifier|public
name|boolean
name|inputFileChanged
parameter_list|()
block|{
if|if
condition|(
operator|!
name|inputFileChecked
condition|)
block|{
name|currentInputPath
operator|=
name|this
operator|.
name|ioCxt
operator|.
name|getInputPath
argument_list|()
expr_stmt|;
name|inputFileChecked
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|lastInputPath
operator|==
literal|null
operator|||
operator|!
name|lastInputPath
operator|.
name|equals
argument_list|(
name|currentInputPath
argument_list|)
return|;
block|}
comment|/**    * Reset the execution context for each new row. This function should be called only    * once at the root of the operator tree -- ExecMapper.map().    * Note: this function should be kept minimum since it is called for each input row.    */
specifier|public
name|void
name|resetRow
parameter_list|()
block|{
comment|// Update the lastInputFile with the currentInputFile.
name|lastInputPath
operator|=
name|currentInputPath
expr_stmt|;
name|inputFileChecked
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|Path
name|getLastInputPath
parameter_list|()
block|{
return|return
name|lastInputPath
return|;
block|}
specifier|public
name|void
name|setLastInputPath
parameter_list|(
name|Path
name|lastInputPath
parameter_list|)
block|{
name|this
operator|.
name|lastInputPath
operator|=
name|lastInputPath
expr_stmt|;
block|}
specifier|public
name|Path
name|getCurrentInputPath
parameter_list|()
block|{
name|currentInputPath
operator|=
name|this
operator|.
name|ioCxt
operator|.
name|getInputPath
argument_list|()
expr_stmt|;
return|return
name|currentInputPath
return|;
block|}
specifier|public
name|void
name|setCurrentInputPath
parameter_list|(
name|Path
name|currentInputPath
parameter_list|)
block|{
name|this
operator|.
name|currentInputPath
operator|=
name|currentInputPath
expr_stmt|;
block|}
specifier|public
name|JobConf
name|getJc
parameter_list|()
block|{
return|return
name|jc
return|;
block|}
specifier|public
name|void
name|setJc
parameter_list|(
name|JobConf
name|jc
parameter_list|)
block|{
name|this
operator|.
name|jc
operator|=
name|jc
expr_stmt|;
block|}
specifier|public
name|MapredLocalWork
name|getLocalWork
parameter_list|()
block|{
return|return
name|localWork
return|;
block|}
specifier|public
name|void
name|setLocalWork
parameter_list|(
name|MapredLocalWork
name|localWork
parameter_list|)
block|{
name|this
operator|.
name|localWork
operator|=
name|localWork
expr_stmt|;
block|}
specifier|public
name|String
name|getFileId
parameter_list|()
block|{
return|return
name|fileId
return|;
block|}
specifier|public
name|void
name|setFileId
parameter_list|(
name|String
name|fileId
parameter_list|)
block|{
name|this
operator|.
name|fileId
operator|=
name|fileId
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|FetchOperator
argument_list|>
name|getFetchOperators
parameter_list|()
block|{
return|return
name|fetchOperators
return|;
block|}
specifier|public
name|void
name|setFetchOperators
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|FetchOperator
argument_list|>
name|fetchOperators
parameter_list|)
block|{
name|this
operator|.
name|fetchOperators
operator|=
name|fetchOperators
expr_stmt|;
block|}
specifier|public
name|IOContext
name|getIoCxt
parameter_list|()
block|{
return|return
name|ioCxt
return|;
block|}
specifier|public
name|void
name|setIoCxt
parameter_list|(
name|IOContext
name|ioCxt
parameter_list|)
block|{
name|this
operator|.
name|ioCxt
operator|=
name|ioCxt
expr_stmt|;
block|}
block|}
end_class

end_unit

