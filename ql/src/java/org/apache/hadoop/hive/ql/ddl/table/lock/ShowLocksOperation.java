begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|DbLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveLockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveLockObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveTxnManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveLockObject
operator|.
name|HiveLockObjectData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksResponseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_comment
comment|/**  * Operation process showing the locks.  */
end_comment

begin_class
specifier|public
class|class
name|ShowLocksOperation
extends|extends
name|DDLOperation
argument_list|<
name|ShowLocksDesc
argument_list|>
block|{
specifier|public
name|ShowLocksOperation
parameter_list|(
name|DDLOperationContext
name|context
parameter_list|,
name|ShowLocksDesc
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|()
throws|throws
name|HiveException
block|{
name|Context
name|ctx
init|=
name|context
operator|.
name|getDriverContext
argument_list|()
operator|.
name|getCtx
argument_list|()
decl_stmt|;
name|HiveTxnManager
name|txnManager
init|=
name|ctx
operator|.
name|getHiveTxnManager
argument_list|()
decl_stmt|;
name|HiveLockManager
name|lockMgr
init|=
name|txnManager
operator|.
name|getLockManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|desc
operator|.
name|isNewFormat
argument_list|()
condition|)
block|{
return|return
name|showLocksNewFormat
argument_list|(
name|lockMgr
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|showLocksOldFormat
argument_list|(
name|lockMgr
argument_list|)
return|;
block|}
block|}
specifier|private
name|int
name|showLocksOldFormat
parameter_list|(
name|HiveLockManager
name|lockMgr
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|lockMgr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"show Locks LockManager not specified"
argument_list|)
throw|;
block|}
comment|// write the results in the file
try|try
init|(
name|DataOutputStream
name|os
init|=
name|DDLUtils
operator|.
name|getOutputStream
argument_list|(
operator|new
name|Path
argument_list|(
name|desc
operator|.
name|getResFile
argument_list|()
argument_list|)
argument_list|,
name|context
argument_list|)
init|)
block|{
name|List
argument_list|<
name|HiveLock
argument_list|>
name|locks
init|=
name|getLocksForOldFormat
argument_list|(
name|lockMgr
argument_list|)
decl_stmt|;
name|writeLocksInOldFormat
argument_list|(
name|os
argument_list|,
name|locks
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"show function: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|List
argument_list|<
name|HiveLock
argument_list|>
name|getLocksForOldFormat
parameter_list|(
name|HiveLockManager
name|lockMgr
parameter_list|)
throws|throws
name|LockException
throws|,
name|HiveException
block|{
name|List
argument_list|<
name|HiveLock
argument_list|>
name|locks
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|desc
operator|.
name|getTableName
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// TODO should be doing security check here. Users should not be able to see each other's locks.
name|locks
operator|=
name|lockMgr
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
name|desc
operator|.
name|isExt
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|HiveLockObject
name|lockObject
init|=
name|HiveLockObject
operator|.
name|createFrom
argument_list|(
name|context
operator|.
name|getDb
argument_list|()
argument_list|,
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|desc
operator|.
name|getPartSpec
argument_list|()
argument_list|)
decl_stmt|;
name|locks
operator|=
name|lockMgr
operator|.
name|getLocks
argument_list|(
name|lockObject
argument_list|,
literal|true
argument_list|,
name|desc
operator|.
name|isExt
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|locks
argument_list|,
operator|new
name|Comparator
argument_list|<
name|HiveLock
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|HiveLock
name|o1
parameter_list|,
name|HiveLock
name|o2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|o1
operator|.
name|getHiveLockObject
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getHiveLockObject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
block|{
return|return
name|cmp
return|;
block|}
if|if
condition|(
name|o1
operator|.
name|getHiveLockMode
argument_list|()
operator|==
name|o2
operator|.
name|getHiveLockMode
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// EXCLUSIVE locks occur before SHARED locks
return|return
operator|(
name|o1
operator|.
name|getHiveLockMode
argument_list|()
operator|==
name|HiveLockMode
operator|.
name|EXCLUSIVE
operator|)
condition|?
operator|-
literal|1
else|:
operator|+
literal|1
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|locks
return|;
block|}
specifier|private
name|void
name|writeLocksInOldFormat
parameter_list|(
name|DataOutputStream
name|os
parameter_list|,
name|List
argument_list|<
name|HiveLock
argument_list|>
name|locks
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|HiveLock
name|lock
range|:
name|locks
control|)
block|{
name|os
operator|.
name|writeBytes
argument_list|(
name|lock
operator|.
name|getHiveLockObject
argument_list|()
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|lock
operator|.
name|getHiveLockMode
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|desc
operator|.
name|isExt
argument_list|()
condition|)
block|{
name|HiveLockObjectData
name|lockData
init|=
name|lock
operator|.
name|getHiveLockObject
argument_list|()
operator|.
name|getData
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockData
operator|!=
literal|null
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|newLineCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"LOCK_QUERYID:"
operator|+
name|lockData
operator|.
name|getQueryId
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|newLineCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"LOCK_TIME:"
operator|+
name|lockData
operator|.
name|getLockTime
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|newLineCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"LOCK_MODE:"
operator|+
name|lockData
operator|.
name|getLockMode
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|newLineCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"LOCK_QUERYSTRING:"
operator|+
name|lockData
operator|.
name|getQueryStr
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|newLineCode
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|showLocksNewFormat
parameter_list|(
name|HiveLockManager
name|lockMgr
parameter_list|)
throws|throws
name|HiveException
block|{
name|ShowLocksResponse
name|response
init|=
name|getLocksForNewFormat
argument_list|(
name|lockMgr
argument_list|)
decl_stmt|;
comment|// write the results in the file
try|try
init|(
name|DataOutputStream
name|os
init|=
name|DDLUtils
operator|.
name|getOutputStream
argument_list|(
operator|new
name|Path
argument_list|(
name|desc
operator|.
name|getResFile
argument_list|()
argument_list|)
argument_list|,
name|context
argument_list|)
init|)
block|{
name|dumpLockInfo
argument_list|(
name|os
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"show function: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|ShowLocksResponse
name|getLocksForNewFormat
parameter_list|(
name|HiveLockManager
name|lockMgr
parameter_list|)
throws|throws
name|HiveException
throws|,
name|LockException
block|{
if|if
condition|(
operator|!
operator|(
name|lockMgr
operator|instanceof
name|DbLockManager
operator|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"New lock format only supported with db lock manager."
argument_list|)
throw|;
block|}
name|ShowLocksRequest
name|request
init|=
operator|new
name|ShowLocksRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|desc
operator|.
name|getDbName
argument_list|()
operator|==
literal|null
operator|&&
name|desc
operator|.
name|getTableName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setDbname
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentDatabase
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|request
operator|.
name|setDbname
argument_list|(
name|desc
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setTablename
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|desc
operator|.
name|getPartSpec
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|keyList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|valList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|partKey
range|:
name|desc
operator|.
name|getPartSpec
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|partVal
init|=
name|desc
operator|.
name|getPartSpec
argument_list|()
operator|.
name|get
argument_list|(
name|partKey
argument_list|)
decl_stmt|;
name|keyList
operator|.
name|add
argument_list|(
name|partKey
argument_list|)
expr_stmt|;
name|valList
operator|.
name|add
argument_list|(
name|partVal
argument_list|)
expr_stmt|;
block|}
name|String
name|partName
init|=
name|FileUtils
operator|.
name|makePartName
argument_list|(
name|keyList
argument_list|,
name|valList
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPartname
argument_list|(
name|partName
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|DbLockManager
operator|)
name|lockMgr
operator|)
operator|.
name|getLocks
argument_list|(
name|request
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|dumpLockInfo
parameter_list|(
name|DataOutputStream
name|os
parameter_list|,
name|ShowLocksResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|SessionState
name|sessionState
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Write a header for CliDriver
if|if
condition|(
operator|!
name|sessionState
operator|.
name|isHiveServerQuery
argument_list|()
condition|)
block|{
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Lock ID"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Database"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Table"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Partition"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"State"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Blocked By"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Type"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Transaction ID"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Last Heartbeat"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Acquired At"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"User"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Hostname"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Agent Info"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|newLineCode
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|response
operator|.
name|getLocks
argument_list|()
decl_stmt|;
if|if
condition|(
name|locks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ShowLocksResponseElement
name|lock
range|:
name|locks
control|)
block|{
if|if
condition|(
name|lock
operator|.
name|isSetLockIdInternal
argument_list|()
condition|)
block|{
name|os
operator|.
name|writeBytes
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|lock
operator|.
name|getLockid
argument_list|()
argument_list|)
operator|+
literal|"."
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|lock
operator|.
name|getLockIdInternal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|os
operator|.
name|writeBytes
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|lock
operator|.
name|getLockid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|lock
operator|.
name|getDbname
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
operator|(
name|lock
operator|.
name|getTablename
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|"NULL"
else|:
name|lock
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
operator|(
name|lock
operator|.
name|getPartname
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|"NULL"
else|:
name|lock
operator|.
name|getPartname
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|lock
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
if|if
condition|(
name|lock
operator|.
name|isSetBlockedByExtId
argument_list|()
condition|)
block|{
comment|//both "blockedby" are either there or not
name|os
operator|.
name|writeBytes
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|lock
operator|.
name|getBlockedByExtId
argument_list|()
argument_list|)
operator|+
literal|"."
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|lock
operator|.
name|getBlockedByIntId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|os
operator|.
name|writeBytes
argument_list|(
literal|"            "
argument_list|)
expr_stmt|;
comment|//12 chars - try to keep cols aligned
block|}
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|lock
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
operator|(
name|lock
operator|.
name|getTxnid
argument_list|()
operator|==
literal|0
operator|)
condition|?
literal|"NULL"
else|:
name|Long
operator|.
name|toString
argument_list|(
name|lock
operator|.
name|getTxnid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|lock
operator|.
name|getLastheartbeat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
operator|(
name|lock
operator|.
name|getAcquiredat
argument_list|()
operator|==
literal|0
operator|)
condition|?
literal|"NULL"
else|:
name|Long
operator|.
name|toString
argument_list|(
name|lock
operator|.
name|getAcquiredat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|lock
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|lock
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|lock
operator|.
name|getAgentInfo
argument_list|()
operator|==
literal|null
condition|?
literal|"NULL"
else|:
name|lock
operator|.
name|getAgentInfo
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|newLineCode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

