begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|SparkTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|GenMapRedUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|RowResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FileSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SparkWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_class
specifier|public
class|class
name|SparkMultiInsertionProcessor
implements|implements
name|NodeProcessor
block|{
specifier|private
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|processed
init|=
operator|new
name|HashSet
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|op
init|=
operator|(
name|Operator
argument_list|<
name|?
argument_list|>
operator|)
name|nd
decl_stmt|;
name|GenSparkProcContext
name|context
init|=
operator|(
name|GenSparkProcContext
operator|)
name|procCtx
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|opToParentMap
operator|.
name|containsKey
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|splitPlan
argument_list|(
name|op
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|opToParentMap
operator|.
name|remove
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Split two tasks by creating a temporary file between them.    *    * @param op the select operator encountered    * @param context processing context    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|private
name|void
name|splitPlan
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|op
parameter_list|,
name|GenSparkProcContext
name|context
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|op
operator|.
name|getNumParent
argument_list|()
operator|==
literal|1
argument_list|,
literal|"AssertionError: expecting operator "
operator|+
name|op
operator|+
literal|" to have only one parent,"
operator|+
literal|" but found multiple parents : "
operator|+
name|op
operator|.
name|getParentOperators
argument_list|()
argument_list|)
expr_stmt|;
comment|// nested multi-insertion shouldn't happen.
name|SparkTask
name|parentTask
init|=
name|context
operator|.
name|defaultTask
decl_stmt|;
name|SparkTask
name|childTask
init|=
operator|(
name|SparkTask
operator|)
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|SparkWork
argument_list|(
name|context
operator|.
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
argument_list|)
argument_list|,
name|context
operator|.
name|conf
argument_list|)
decl_stmt|;
name|GenSparkUtils
name|utils
init|=
name|GenSparkUtils
operator|.
name|getUtils
argument_list|()
decl_stmt|;
name|ParseContext
name|parseCtx
init|=
name|context
operator|.
name|parseContext
decl_stmt|;
name|parentTask
operator|.
name|addDependentTask
argument_list|(
name|childTask
argument_list|)
expr_stmt|;
comment|// Generate the temporary file name
name|Operator
argument_list|<
name|?
argument_list|>
name|parent
init|=
name|context
operator|.
name|opToParentMap
operator|.
name|get
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|Path
name|taskTmpDir
decl_stmt|;
name|TableDesc
name|tt_desc
decl_stmt|;
if|if
condition|(
name|processed
operator|.
name|add
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|taskTmpDir
operator|=
name|parseCtx
operator|.
name|getContext
argument_list|()
operator|.
name|getMRTmpPath
argument_list|()
expr_stmt|;
name|tt_desc
operator|=
name|PlanUtils
operator|.
name|getIntermediateFileTableDesc
argument_list|(
name|PlanUtils
operator|.
name|getFieldSchemasFromRowSchema
argument_list|(
name|parent
operator|.
name|getSchema
argument_list|()
argument_list|,
literal|"temporarycol"
argument_list|)
argument_list|)
expr_stmt|;
name|createTempFS
argument_list|(
name|parent
argument_list|,
name|taskTmpDir
argument_list|,
name|tt_desc
argument_list|,
name|parseCtx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FileSinkOperator
name|fs
init|=
operator|(
name|FileSinkOperator
operator|)
name|parent
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|tt_desc
operator|=
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|getTableInfo
argument_list|()
expr_stmt|;
name|taskTmpDir
operator|=
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|getDirName
argument_list|()
expr_stmt|;
block|}
name|TableScanOperator
name|tableScan
init|=
name|createTempTS
argument_list|(
name|parent
argument_list|,
name|op
argument_list|,
name|parseCtx
argument_list|)
decl_stmt|;
name|String
name|streamDesc
init|=
name|taskTmpDir
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|context
operator|.
name|opToTaskMap
operator|.
name|put
argument_list|(
name|tableScan
argument_list|,
name|childTask
argument_list|)
expr_stmt|;
name|context
operator|.
name|tempTS
operator|.
name|add
argument_list|(
name|tableScan
argument_list|)
expr_stmt|;
name|MapWork
name|mapWork
init|=
name|utils
operator|.
name|createMapWork
argument_list|(
name|tableScan
argument_list|,
name|childTask
operator|.
name|getWork
argument_list|()
argument_list|,
name|streamDesc
argument_list|,
name|tt_desc
argument_list|)
decl_stmt|;
name|context
operator|.
name|rootToWorkMap
operator|.
name|put
argument_list|(
name|tableScan
argument_list|,
name|mapWork
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createTempFS
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
parameter_list|,
name|Path
name|taskTmpDir
parameter_list|,
name|TableDesc
name|tt_desc
parameter_list|,
name|ParseContext
name|parseCtx
parameter_list|)
block|{
name|boolean
name|compressIntermediate
init|=
name|parseCtx
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|COMPRESSINTERMEDIATE
argument_list|)
decl_stmt|;
name|FileSinkDesc
name|desc
init|=
operator|new
name|FileSinkDesc
argument_list|(
name|taskTmpDir
argument_list|,
name|tt_desc
argument_list|,
name|compressIntermediate
argument_list|)
decl_stmt|;
if|if
condition|(
name|compressIntermediate
condition|)
block|{
name|desc
operator|.
name|setCompressCodec
argument_list|(
name|parseCtx
operator|.
name|getConf
argument_list|()
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|COMPRESSINTERMEDIATECODEC
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setCompressType
argument_list|(
name|parseCtx
operator|.
name|getConf
argument_list|()
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|COMPRESSINTERMEDIATETYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|fileSinkOp
init|=
name|GenMapRedUtils
operator|.
name|putOpInsertMap
argument_list|(
name|OperatorFactory
operator|.
name|get
argument_list|(
name|desc
argument_list|,
name|parent
operator|.
name|getSchema
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|parseCtx
argument_list|)
decl_stmt|;
comment|// Connect parent to fileSinkOp
name|parent
operator|.
name|setChildOperators
argument_list|(
name|Utilities
operator|.
name|makeList
argument_list|(
name|fileSinkOp
argument_list|)
argument_list|)
expr_stmt|;
name|fileSinkOp
operator|.
name|setParentOperators
argument_list|(
name|Utilities
operator|.
name|makeList
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|TableScanOperator
name|createTempTS
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
parameter_list|,
name|ParseContext
name|parseCtx
parameter_list|)
block|{
comment|// Create a dummy TableScanOperator for the file generated through fileSinkOp
name|RowResolver
name|parentRowResolver
init|=
name|parseCtx
operator|.
name|getOpParseCtx
argument_list|()
operator|.
name|get
argument_list|(
name|parent
argument_list|)
operator|.
name|getRowResolver
argument_list|()
decl_stmt|;
name|TableScanOperator
name|tableScanOp
init|=
operator|(
name|TableScanOperator
operator|)
name|GenMapRedUtils
operator|.
name|putOpInsertMap
argument_list|(
name|GenMapRedUtils
operator|.
name|createTemporaryTableScanOperator
argument_list|(
name|parent
operator|.
name|getSchema
argument_list|()
argument_list|)
argument_list|,
name|parentRowResolver
argument_list|,
name|parseCtx
argument_list|)
decl_stmt|;
name|tableScanOp
operator|.
name|setChildOperators
argument_list|(
name|Utilities
operator|.
name|makeList
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|child
operator|.
name|setParentOperators
argument_list|(
name|Utilities
operator|.
name|makeList
argument_list|(
name|tableScanOp
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableScanOp
return|;
block|}
block|}
end_class

end_unit

