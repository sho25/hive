begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|wrapper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorColumnSetInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HashCodeUtil
import|;
end_import

begin_class
specifier|public
class|class
name|VectorHashKeyWrapperTwoLong
extends|extends
name|VectorHashKeyWrapperTwoBase
block|{
specifier|private
name|long
name|longValue0
decl_stmt|;
specifier|private
name|long
name|longValue1
decl_stmt|;
specifier|protected
name|VectorHashKeyWrapperTwoLong
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|longValue0
operator|=
literal|0
expr_stmt|;
name|longValue1
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setHashKey
parameter_list|()
block|{
if|if
condition|(
name|isNull0
operator|||
name|isNull1
condition|)
block|{
name|hashcode
operator|=
operator|(
name|isNull0
operator|&&
name|isNull1
condition|?
name|twoNullHashcode
else|:
operator|(
name|isNull0
condition|?
name|null0Hashcode
operator|^
name|HashCodeUtil
operator|.
name|calculateLongHashCode
argument_list|(
name|longValue1
argument_list|)
else|:
name|HashCodeUtil
operator|.
name|calculateLongHashCode
argument_list|(
name|longValue0
argument_list|)
operator|^
name|null1Hashcode
operator|)
operator|)
expr_stmt|;
block|}
else|else
block|{
name|hashcode
operator|=
name|HashCodeUtil
operator|.
name|calculateTwoLongHashCode
argument_list|(
name|longValue0
argument_list|,
name|longValue1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|instanceof
name|VectorHashKeyWrapperTwoLong
condition|)
block|{
name|VectorHashKeyWrapperTwoLong
name|keyThat
init|=
operator|(
name|VectorHashKeyWrapperTwoLong
operator|)
name|that
decl_stmt|;
return|return
name|isNull0
operator|==
name|keyThat
operator|.
name|isNull0
operator|&&
name|longValue0
operator|==
name|keyThat
operator|.
name|longValue0
operator|&&
name|isNull1
operator|==
name|keyThat
operator|.
name|isNull1
operator|&&
name|longValue1
operator|==
name|keyThat
operator|.
name|longValue1
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Object
name|clone
parameter_list|()
block|{
name|VectorHashKeyWrapperTwoLong
name|clone
init|=
operator|new
name|VectorHashKeyWrapperTwoLong
argument_list|()
decl_stmt|;
name|clone
operator|.
name|isNull0
operator|=
name|isNull0
expr_stmt|;
name|clone
operator|.
name|longValue0
operator|=
name|longValue0
expr_stmt|;
name|clone
operator|.
name|isNull1
operator|=
name|isNull1
expr_stmt|;
name|clone
operator|.
name|longValue1
operator|=
name|longValue1
expr_stmt|;
name|clone
operator|.
name|hashcode
operator|=
name|hashcode
expr_stmt|;
return|return
name|clone
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|assignLong
parameter_list|(
name|int
name|keyIndex
parameter_list|,
name|int
name|index
parameter_list|,
name|long
name|v
parameter_list|)
block|{
if|if
condition|(
name|keyIndex
operator|==
literal|0
operator|&&
name|index
operator|==
literal|0
condition|)
block|{
name|isNull0
operator|=
literal|false
expr_stmt|;
name|longValue0
operator|=
name|v
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keyIndex
operator|==
literal|1
operator|&&
name|index
operator|==
literal|1
condition|)
block|{
name|isNull1
operator|=
literal|false
expr_stmt|;
name|longValue1
operator|=
name|v
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|()
throw|;
block|}
block|}
comment|// FIXME: isNull is not updated; which might cause problems
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|assignLong
parameter_list|(
name|int
name|index
parameter_list|,
name|long
name|v
parameter_list|)
block|{
if|if
condition|(
name|index
operator|==
literal|0
condition|)
block|{
name|longValue0
operator|=
name|v
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
literal|1
condition|)
block|{
name|longValue1
operator|=
name|v
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|assignNullLong
parameter_list|(
name|int
name|keyIndex
parameter_list|,
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|keyIndex
operator|==
literal|0
operator|&&
name|index
operator|==
literal|0
condition|)
block|{
name|isNull0
operator|=
literal|true
expr_stmt|;
name|longValue0
operator|=
literal|0
expr_stmt|;
comment|// Assign 0 to make equals simple.
block|}
elseif|else
if|if
condition|(
name|keyIndex
operator|==
literal|1
operator|&&
name|index
operator|==
literal|1
condition|)
block|{
name|isNull1
operator|=
literal|true
expr_stmt|;
name|longValue1
operator|=
literal|0
expr_stmt|;
comment|// Assign 0 to make equals simple.
block|}
else|else
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|()
throw|;
block|}
block|}
comment|/*    * This method is mainly intended for debug display purposes.    */
annotation|@
name|Override
specifier|public
name|String
name|stringifyKeys
parameter_list|(
name|VectorColumnSetInfo
name|columnSetInfo
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"longs ["
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isNull0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|longValue0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isNull1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|longValue1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"longs ["
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|longValue0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|longValue1
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"], nulls ["
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|isNull0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|isNull1
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLongValue
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
return|return
name|longValue0
return|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
return|return
name|longValue1
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getVariableSize
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

