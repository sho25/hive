begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_comment
comment|/**  * ExprNodeDesc.  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ExprNodeDesc
implements|implements
name|Serializable
implements|,
name|Node
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
name|TypeInfo
name|typeInfo
decl_stmt|;
specifier|public
name|ExprNodeDesc
parameter_list|()
block|{   }
specifier|public
name|ExprNodeDesc
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
name|this
operator|.
name|typeInfo
operator|=
name|typeInfo
expr_stmt|;
if|if
condition|(
name|typeInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"typeInfo cannot be null!"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|abstract
name|ExprNodeDesc
name|clone
parameter_list|()
function_decl|;
comment|// Cant use equals because the walker depends on them being object equal
comment|// The default graph walker processes a node after its kids have been
comment|// processed. That comparison needs
comment|// object equality - isSame means that the objects are semantically equal.
specifier|public
specifier|abstract
name|boolean
name|isSame
parameter_list|(
name|Object
name|o
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|typeInfo
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
comment|// prevent equals from being overridden in sub-classes
comment|// always use ExprNodeDescEqualityWrapper
comment|// if you need any other equality than Object.equals()
return|return
operator|(
name|o
operator|==
name|this
operator|)
return|;
block|}
specifier|public
name|TypeInfo
name|getTypeInfo
parameter_list|()
block|{
return|return
name|typeInfo
return|;
block|}
specifier|public
name|void
name|setTypeInfo
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
name|this
operator|.
name|typeInfo
operator|=
name|typeInfo
expr_stmt|;
block|}
specifier|public
name|String
name|getExprString
parameter_list|()
block|{
assert|assert
operator|(
literal|false
operator|)
assert|;
return|return
literal|null
return|;
block|}
specifier|public
name|ObjectInspector
name|getWritableObjectInspector
parameter_list|()
block|{
return|return
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|typeInfo
argument_list|)
return|;
block|}
specifier|public
name|String
name|getTypeString
parameter_list|()
block|{
return|return
name|typeInfo
operator|.
name|getTypeName
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCols
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
comment|// This wraps an instance of an ExprNodeDesc, and makes equals work like isSame, see comment on
comment|// isSame
specifier|public
specifier|final
specifier|static
class|class
name|ExprNodeDescEqualityWrapper
block|{
specifier|private
specifier|final
name|ExprNodeDesc
name|exprNodeDesc
decl_stmt|;
comment|// beware of any implementation whose hashcode is mutable by reference
comment|// inserting into a Map and then changing the hashcode can make it
comment|// disappear out of the Map during lookups
specifier|private
specifier|final
name|int
name|hashcode
decl_stmt|;
specifier|public
name|ExprNodeDescEqualityWrapper
parameter_list|(
name|ExprNodeDesc
name|exprNodeDesc
parameter_list|)
block|{
name|this
operator|.
name|exprNodeDesc
operator|=
name|exprNodeDesc
expr_stmt|;
name|this
operator|.
name|hashcode
operator|=
name|exprNodeDesc
operator|==
literal|null
condition|?
literal|0
else|:
name|exprNodeDesc
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ExprNodeDesc
name|getExprNodeDesc
parameter_list|()
block|{
return|return
name|exprNodeDesc
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
operator|||
operator|!
operator|(
name|other
operator|instanceof
name|ExprNodeDescEqualityWrapper
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|this
operator|.
name|exprNodeDesc
operator|.
name|isSame
argument_list|(
operator|(
operator|(
name|ExprNodeDescEqualityWrapper
operator|)
name|other
operator|)
operator|.
name|getExprNodeDesc
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|hashcode
return|;
block|}
comment|/* helper function to allow Set()/Collection() operations with ExprNodeDesc */
specifier|public
specifier|static
name|Collection
argument_list|<
name|ExprNodeDescEqualityWrapper
argument_list|>
name|transform
parameter_list|(
name|Collection
argument_list|<
name|ExprNodeDesc
argument_list|>
name|descs
parameter_list|)
block|{
if|if
condition|(
name|descs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Collection
argument_list|<
name|ExprNodeDescEqualityWrapper
argument_list|>
name|wrapped
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
operator|.
name|ExprNodeDescEqualityWrapper
argument_list|>
argument_list|(
name|descs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|desc
range|:
name|descs
control|)
block|{
name|wrapped
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeDescEqualityWrapper
argument_list|(
name|desc
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|wrapped
return|;
block|}
block|}
block|}
end_class

end_unit

