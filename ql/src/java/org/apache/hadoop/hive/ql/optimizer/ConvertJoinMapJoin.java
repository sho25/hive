begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|AppMasterEventOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|CommonJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|CommonMergeJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|DummyStoreOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MuxOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TezDummyStoreOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|GenTezUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|OptimizeTezProcContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|CommonMergeJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DynamicPruningEventDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinCondDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OpTraits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Statistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * ConvertJoinMapJoin is an optimization that replaces a common join  * (aka shuffle join) with a map join (aka broadcast or fragment replicate  * join when possible. Map joins have restrictions on which joins can be  * converted (e.g.: full outer joins cannot be handled as map joins) as well  * as memory restrictions (one side of the join has to fit into memory).  */
end_comment

begin_class
specifier|public
class|class
name|ConvertJoinMapJoin
implements|implements
name|NodeProcessor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConvertJoinMapJoin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
comment|/*    * (non-Javadoc) we should ideally not modify the tree we traverse. However,    * since we need to walk the tree at any time when we modify the operator, we    * might as well do it here.    */
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|OptimizeTezProcContext
name|context
init|=
operator|(
name|OptimizeTezProcContext
operator|)
name|procCtx
decl_stmt|;
name|JoinOperator
name|joinOp
init|=
operator|(
name|JoinOperator
operator|)
name|nd
decl_stmt|;
name|long
name|maxSize
init|=
name|context
operator|.
name|conf
operator|.
name|getLongVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVECONVERTJOINNOCONDITIONALTASKTHRESHOLD
argument_list|)
decl_stmt|;
name|TezBucketJoinProcCtx
name|tezBucketJoinProcCtx
init|=
operator|new
name|TezBucketJoinProcCtx
argument_list|(
name|context
operator|.
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|context
operator|.
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVECONVERTJOIN
argument_list|)
condition|)
block|{
comment|// we are just converting to a common merge join operator. The shuffle
comment|// join in map-reduce case.
name|Object
name|retval
init|=
name|checkAndConvertSMBJoin
argument_list|(
name|context
argument_list|,
name|joinOp
argument_list|,
name|tezBucketJoinProcCtx
argument_list|)
decl_stmt|;
if|if
condition|(
name|retval
operator|==
literal|null
condition|)
block|{
return|return
name|retval
return|;
block|}
else|else
block|{
name|fallbackToReduceSideJoin
argument_list|(
name|joinOp
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|// if we have traits, and table info is present in the traits, we know the
comment|// exact number of buckets. Else choose the largest number of estimated
comment|// reducers from the parent operators.
name|int
name|numBuckets
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_CONVERT_JOIN_BUCKET_MAPJOIN_TEZ
argument_list|)
condition|)
block|{
name|numBuckets
operator|=
name|estimateNumBuckets
argument_list|(
name|joinOp
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|numBuckets
operator|=
literal|1
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Estimated number of buckets "
operator|+
name|numBuckets
argument_list|)
expr_stmt|;
name|int
name|mapJoinConversionPos
init|=
name|getMapJoinConversionPos
argument_list|(
name|joinOp
argument_list|,
name|context
argument_list|,
name|numBuckets
argument_list|,
literal|false
argument_list|,
name|maxSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapJoinConversionPos
operator|<
literal|0
condition|)
block|{
name|Object
name|retval
init|=
name|checkAndConvertSMBJoin
argument_list|(
name|context
argument_list|,
name|joinOp
argument_list|,
name|tezBucketJoinProcCtx
argument_list|)
decl_stmt|;
if|if
condition|(
name|retval
operator|==
literal|null
condition|)
block|{
return|return
name|retval
return|;
block|}
else|else
block|{
comment|// only case is full outer join with SMB enabled which is not possible. Convert to regular
comment|// join.
name|fallbackToReduceSideJoin
argument_list|(
name|joinOp
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
if|if
condition|(
name|numBuckets
operator|>
literal|1
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_CONVERT_JOIN_BUCKET_MAPJOIN_TEZ
argument_list|)
condition|)
block|{
if|if
condition|(
name|convertJoinBucketMapJoin
argument_list|(
name|joinOp
argument_list|,
name|context
argument_list|,
name|mapJoinConversionPos
argument_list|,
name|tezBucketJoinProcCtx
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
comment|// check if we can convert to map join no bucket scaling.
name|LOG
operator|.
name|info
argument_list|(
literal|"Convert to non-bucketed map join"
argument_list|)
expr_stmt|;
if|if
condition|(
name|numBuckets
operator|!=
literal|1
condition|)
block|{
name|mapJoinConversionPos
operator|=
name|getMapJoinConversionPos
argument_list|(
name|joinOp
argument_list|,
name|context
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|maxSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mapJoinConversionPos
operator|<
literal|0
condition|)
block|{
comment|// we are just converting to a common merge join operator. The shuffle
comment|// join in map-reduce case.
name|fallbackToReduceSideJoin
argument_list|(
name|joinOp
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|MapJoinOperator
name|mapJoinOp
init|=
name|convertJoinMapJoin
argument_list|(
name|joinOp
argument_list|,
name|context
argument_list|,
name|mapJoinConversionPos
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// map join operator by default has no bucket cols and num of reduce sinks
comment|// reduced by 1
name|mapJoinOp
operator|.
name|setOpTraits
argument_list|(
operator|new
name|OpTraits
argument_list|(
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|joinOp
operator|.
name|getOpTraits
argument_list|()
operator|.
name|getNumReduceSinks
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mapJoinOp
operator|.
name|setStatistics
argument_list|(
name|joinOp
operator|.
name|getStatistics
argument_list|()
argument_list|)
expr_stmt|;
comment|// propagate this change till the next RS
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|childOp
range|:
name|mapJoinOp
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
name|setAllChildrenTraits
argument_list|(
name|childOp
argument_list|,
name|mapJoinOp
operator|.
name|getOpTraits
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Object
name|checkAndConvertSMBJoin
parameter_list|(
name|OptimizeTezProcContext
name|context
parameter_list|,
name|JoinOperator
name|joinOp
parameter_list|,
name|TezBucketJoinProcCtx
name|tezBucketJoinProcCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// we cannot convert to bucket map join, we cannot convert to
comment|// map join either based on the size. Check if we can convert to SMB join.
if|if
condition|(
operator|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|context
operator|.
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_AUTO_SORTMERGE_JOIN
argument_list|)
operator|==
literal|false
operator|)
operator|||
operator|(
operator|(
operator|!
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|context
operator|.
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_AUTO_SORTMERGE_JOIN_REDUCE
argument_list|)
operator|)
operator|&&
name|joinOp
operator|.
name|getOpTraits
argument_list|()
operator|.
name|getNumReduceSinks
argument_list|()
operator|>=
literal|2
operator|)
condition|)
block|{
name|fallbackToReduceSideJoin
argument_list|(
name|joinOp
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Class
argument_list|<
name|?
extends|extends
name|BigTableSelectorForAutoSMJ
argument_list|>
name|bigTableMatcherClass
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|selector
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|context
operator|.
name|parseContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTO_SORTMERGE_JOIN_BIGTABLE_SELECTOR
argument_list|)
decl_stmt|;
name|bigTableMatcherClass
operator|=
name|JavaUtils
operator|.
name|loadClass
argument_list|(
name|selector
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|BigTableSelectorForAutoSMJ
name|bigTableMatcher
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|bigTableMatcherClass
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|JoinDesc
name|joinDesc
init|=
name|joinOp
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|JoinCondDesc
index|[]
name|joinCondns
init|=
name|joinDesc
operator|.
name|getConds
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|joinCandidates
init|=
name|MapJoinProcessor
operator|.
name|getBigTableCandidates
argument_list|(
name|joinCondns
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinCandidates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// This is a full outer join. This can never be a map-join
comment|// of any type. So return false.
return|return
literal|false
return|;
block|}
name|int
name|mapJoinConversionPos
init|=
name|bigTableMatcher
operator|.
name|getBigTablePosition
argument_list|(
name|context
operator|.
name|parseContext
argument_list|,
name|joinOp
argument_list|,
name|joinCandidates
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapJoinConversionPos
operator|<
literal|0
condition|)
block|{
comment|// contains aliases from sub-query
comment|// we are just converting to a common merge join operator. The shuffle
comment|// join in map-reduce case.
name|fallbackToReduceSideJoin
argument_list|(
name|joinOp
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|checkConvertJoinSMBJoin
argument_list|(
name|joinOp
argument_list|,
name|context
argument_list|,
name|mapJoinConversionPos
argument_list|,
name|tezBucketJoinProcCtx
argument_list|)
condition|)
block|{
name|convertJoinSMBJoin
argument_list|(
name|joinOp
argument_list|,
name|context
argument_list|,
name|mapJoinConversionPos
argument_list|,
name|tezBucketJoinProcCtx
operator|.
name|getNumBuckets
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we are just converting to a common merge join operator. The shuffle
comment|// join in map-reduce case.
name|fallbackToReduceSideJoin
argument_list|(
name|joinOp
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|// replaces the join operator with a new CommonJoinOperator, removes the
comment|// parent reduce sinks
specifier|private
name|void
name|convertJoinSMBJoin
parameter_list|(
name|JoinOperator
name|joinOp
parameter_list|,
name|OptimizeTezProcContext
name|context
parameter_list|,
name|int
name|mapJoinConversionPos
parameter_list|,
name|int
name|numBuckets
parameter_list|,
name|boolean
name|adjustParentsChildren
parameter_list|)
throws|throws
name|SemanticException
block|{
name|MapJoinDesc
name|mapJoinDesc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|adjustParentsChildren
condition|)
block|{
name|mapJoinDesc
operator|=
name|MapJoinProcessor
operator|.
name|getMapJoinDesc
argument_list|(
name|context
operator|.
name|conf
argument_list|,
name|joinOp
argument_list|,
name|joinOp
operator|.
name|getConf
argument_list|()
operator|.
name|isLeftInputJoin
argument_list|()
argument_list|,
name|joinOp
operator|.
name|getConf
argument_list|()
operator|.
name|getBaseSrc
argument_list|()
argument_list|,
name|joinOp
operator|.
name|getConf
argument_list|()
operator|.
name|getMapAliases
argument_list|()
argument_list|,
name|mapJoinConversionPos
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|JoinDesc
name|joinDesc
init|=
name|joinOp
operator|.
name|getConf
argument_list|()
decl_stmt|;
comment|// retain the original join desc in the map join.
name|mapJoinDesc
operator|=
operator|new
name|MapJoinDesc
argument_list|(
name|MapJoinProcessor
operator|.
name|getKeys
argument_list|(
name|joinOp
operator|.
name|getConf
argument_list|()
operator|.
name|isLeftInputJoin
argument_list|()
argument_list|,
name|joinOp
operator|.
name|getConf
argument_list|()
operator|.
name|getBaseSrc
argument_list|()
argument_list|,
name|joinOp
argument_list|)
operator|.
name|getSecond
argument_list|()
argument_list|,
literal|null
argument_list|,
name|joinDesc
operator|.
name|getExprs
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|joinDesc
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|,
name|mapJoinConversionPos
argument_list|,
name|joinDesc
operator|.
name|getConds
argument_list|()
argument_list|,
name|joinDesc
operator|.
name|getFilters
argument_list|()
argument_list|,
name|joinDesc
operator|.
name|getNoOuterJoin
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mapJoinDesc
operator|.
name|setNullSafes
argument_list|(
name|joinDesc
operator|.
name|getNullSafes
argument_list|()
argument_list|)
expr_stmt|;
name|mapJoinDesc
operator|.
name|setFilterMap
argument_list|(
name|joinDesc
operator|.
name|getFilterMap
argument_list|()
argument_list|)
expr_stmt|;
name|mapJoinDesc
operator|.
name|setResidualFilterExprs
argument_list|(
name|joinDesc
operator|.
name|getResidualFilterExprs
argument_list|()
argument_list|)
expr_stmt|;
name|mapJoinDesc
operator|.
name|resetOrder
argument_list|()
expr_stmt|;
block|}
name|CommonMergeJoinOperator
name|mergeJoinOp
init|=
operator|(
name|CommonMergeJoinOperator
operator|)
name|OperatorFactory
operator|.
name|get
argument_list|(
name|joinOp
operator|.
name|getCompilationOpContext
argument_list|()
argument_list|,
operator|new
name|CommonMergeJoinDesc
argument_list|(
name|numBuckets
argument_list|,
name|mapJoinConversionPos
argument_list|,
name|mapJoinDesc
argument_list|)
argument_list|,
name|joinOp
operator|.
name|getSchema
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numReduceSinks
init|=
name|joinOp
operator|.
name|getOpTraits
argument_list|()
operator|.
name|getNumReduceSinks
argument_list|()
decl_stmt|;
name|OpTraits
name|opTraits
init|=
operator|new
name|OpTraits
argument_list|(
name|joinOp
operator|.
name|getOpTraits
argument_list|()
operator|.
name|getBucketColNames
argument_list|()
argument_list|,
name|numBuckets
argument_list|,
name|joinOp
operator|.
name|getOpTraits
argument_list|()
operator|.
name|getSortCols
argument_list|()
argument_list|,
name|numReduceSinks
argument_list|)
decl_stmt|;
name|mergeJoinOp
operator|.
name|setOpTraits
argument_list|(
name|opTraits
argument_list|)
expr_stmt|;
name|mergeJoinOp
operator|.
name|setStatistics
argument_list|(
name|joinOp
operator|.
name|getStatistics
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOp
range|:
name|joinOp
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
name|int
name|pos
init|=
name|parentOp
operator|.
name|getChildOperators
argument_list|()
operator|.
name|indexOf
argument_list|(
name|joinOp
argument_list|)
decl_stmt|;
name|parentOp
operator|.
name|getChildOperators
argument_list|()
operator|.
name|remove
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|parentOp
operator|.
name|getChildOperators
argument_list|()
operator|.
name|add
argument_list|(
name|pos
argument_list|,
name|mergeJoinOp
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|childOp
range|:
name|joinOp
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
name|int
name|pos
init|=
name|childOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|indexOf
argument_list|(
name|joinOp
argument_list|)
decl_stmt|;
name|childOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|remove
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|childOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|add
argument_list|(
name|pos
argument_list|,
name|mergeJoinOp
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|childOperators
init|=
name|mergeJoinOp
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|parentOperators
init|=
name|mergeJoinOp
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
name|childOperators
operator|.
name|clear
argument_list|()
expr_stmt|;
name|parentOperators
operator|.
name|clear
argument_list|()
expr_stmt|;
name|childOperators
operator|.
name|addAll
argument_list|(
name|joinOp
operator|.
name|getChildOperators
argument_list|()
argument_list|)
expr_stmt|;
name|parentOperators
operator|.
name|addAll
argument_list|(
name|joinOp
operator|.
name|getParentOperators
argument_list|()
argument_list|)
expr_stmt|;
name|mergeJoinOp
operator|.
name|getConf
argument_list|()
operator|.
name|setGenJoinKeys
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|adjustParentsChildren
condition|)
block|{
name|mergeJoinOp
operator|.
name|getConf
argument_list|()
operator|.
name|setGenJoinKeys
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|newParentOpList
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOp
range|:
name|mergeJoinOp
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|grandParentOp
range|:
name|parentOp
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
name|grandParentOp
operator|.
name|getChildOperators
argument_list|()
operator|.
name|remove
argument_list|(
name|parentOp
argument_list|)
expr_stmt|;
name|grandParentOp
operator|.
name|getChildOperators
argument_list|()
operator|.
name|add
argument_list|(
name|mergeJoinOp
argument_list|)
expr_stmt|;
name|newParentOpList
operator|.
name|add
argument_list|(
name|grandParentOp
argument_list|)
expr_stmt|;
block|}
block|}
name|mergeJoinOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mergeJoinOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|addAll
argument_list|(
name|newParentOpList
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|parentOps
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|(
name|mergeJoinOp
operator|.
name|getParentOperators
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOp
range|:
name|parentOps
control|)
block|{
name|int
name|parentIndex
init|=
name|mergeJoinOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|indexOf
argument_list|(
name|parentOp
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentIndex
operator|==
name|mapJoinConversionPos
condition|)
block|{
continue|continue;
block|}
comment|// insert the dummy store operator here
name|DummyStoreOperator
name|dummyStoreOp
init|=
operator|new
name|TezDummyStoreOperator
argument_list|(
name|mergeJoinOp
operator|.
name|getCompilationOpContext
argument_list|()
argument_list|)
decl_stmt|;
name|dummyStoreOp
operator|.
name|setParentOperators
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|dummyStoreOp
operator|.
name|setChildOperators
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|dummyStoreOp
operator|.
name|getChildOperators
argument_list|()
operator|.
name|add
argument_list|(
name|mergeJoinOp
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|parentOp
operator|.
name|getChildOperators
argument_list|()
operator|.
name|indexOf
argument_list|(
name|mergeJoinOp
argument_list|)
decl_stmt|;
name|parentOp
operator|.
name|getChildOperators
argument_list|()
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|parentOp
operator|.
name|getChildOperators
argument_list|()
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|dummyStoreOp
argument_list|)
expr_stmt|;
name|dummyStoreOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|add
argument_list|(
name|parentOp
argument_list|)
expr_stmt|;
name|mergeJoinOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|remove
argument_list|(
name|parentIndex
argument_list|)
expr_stmt|;
name|mergeJoinOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|add
argument_list|(
name|parentIndex
argument_list|,
name|dummyStoreOp
argument_list|)
expr_stmt|;
block|}
block|}
name|mergeJoinOp
operator|.
name|cloneOriginalParentsList
argument_list|(
name|mergeJoinOp
operator|.
name|getParentOperators
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setAllChildrenTraits
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|currentOp
parameter_list|,
name|OpTraits
name|opTraits
parameter_list|)
block|{
if|if
condition|(
name|currentOp
operator|instanceof
name|ReduceSinkOperator
condition|)
block|{
return|return;
block|}
name|currentOp
operator|.
name|setOpTraits
argument_list|(
operator|new
name|OpTraits
argument_list|(
name|opTraits
operator|.
name|getBucketColNames
argument_list|()
argument_list|,
name|opTraits
operator|.
name|getNumBuckets
argument_list|()
argument_list|,
name|opTraits
operator|.
name|getSortCols
argument_list|()
argument_list|,
name|opTraits
operator|.
name|getNumReduceSinks
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|childOp
range|:
name|currentOp
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|childOp
operator|instanceof
name|ReduceSinkOperator
operator|)
operator|||
operator|(
name|childOp
operator|instanceof
name|GroupByOperator
operator|)
condition|)
block|{
break|break;
block|}
name|setAllChildrenTraits
argument_list|(
name|childOp
argument_list|,
name|opTraits
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|convertJoinBucketMapJoin
parameter_list|(
name|JoinOperator
name|joinOp
parameter_list|,
name|OptimizeTezProcContext
name|context
parameter_list|,
name|int
name|bigTablePosition
parameter_list|,
name|TezBucketJoinProcCtx
name|tezBucketJoinProcCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
operator|!
name|checkConvertJoinBucketMapJoin
argument_list|(
name|joinOp
argument_list|,
name|context
argument_list|,
name|bigTablePosition
argument_list|,
name|tezBucketJoinProcCtx
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Check conversion to bucket map join failed."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|MapJoinOperator
name|mapJoinOp
init|=
name|convertJoinMapJoin
argument_list|(
name|joinOp
argument_list|,
name|context
argument_list|,
name|bigTablePosition
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapJoinOp
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Conversion to bucket map join failed."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|MapJoinDesc
name|joinDesc
init|=
name|mapJoinOp
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|joinDesc
operator|.
name|setBucketMapJoin
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// we can set the traits for this join operator
name|OpTraits
name|opTraits
init|=
operator|new
name|OpTraits
argument_list|(
name|joinOp
operator|.
name|getOpTraits
argument_list|()
operator|.
name|getBucketColNames
argument_list|()
argument_list|,
name|tezBucketJoinProcCtx
operator|.
name|getNumBuckets
argument_list|()
argument_list|,
literal|null
argument_list|,
name|joinOp
operator|.
name|getOpTraits
argument_list|()
operator|.
name|getNumReduceSinks
argument_list|()
argument_list|)
decl_stmt|;
name|mapJoinOp
operator|.
name|setOpTraits
argument_list|(
name|opTraits
argument_list|)
expr_stmt|;
name|mapJoinOp
operator|.
name|setStatistics
argument_list|(
name|joinOp
operator|.
name|getStatistics
argument_list|()
argument_list|)
expr_stmt|;
name|setNumberOfBucketsOnChildren
argument_list|(
name|mapJoinOp
argument_list|)
expr_stmt|;
comment|// Once the conversion is done, we can set the partitioner to bucket cols on the small table
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|bigTableBucketNumMapping
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|bigTableBucketNumMapping
operator|.
name|put
argument_list|(
name|joinDesc
operator|.
name|getBigTableAlias
argument_list|()
argument_list|,
name|tezBucketJoinProcCtx
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
name|joinDesc
operator|.
name|setBigTableBucketNumMapping
argument_list|(
name|bigTableBucketNumMapping
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/*    * This method tries to convert a join to an SMB. This is done based on    * traits. If the sorted by columns are the same as the join columns then, we    * can convert the join to an SMB. Otherwise retain the bucket map join as it    * is still more efficient than a regular join.    */
specifier|private
name|boolean
name|checkConvertJoinSMBJoin
parameter_list|(
name|JoinOperator
name|joinOp
parameter_list|,
name|OptimizeTezProcContext
name|context
parameter_list|,
name|int
name|bigTablePosition
parameter_list|,
name|TezBucketJoinProcCtx
name|tezBucketJoinProcCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ReduceSinkOperator
name|bigTableRS
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|joinOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
name|bigTablePosition
argument_list|)
decl_stmt|;
name|int
name|numBuckets
init|=
name|bigTableRS
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOpTraits
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
decl_stmt|;
name|int
name|size
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|parentOp
range|:
name|joinOp
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
comment|// each side better have 0 or more RS. if either side is unbalanced, cannot convert.
comment|// This is a workaround for now. Right fix would be to refactor code in the
comment|// MapRecordProcessor and ReduceRecordProcessor with respect to the sources.
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
name|Set
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|set
init|=
name|OperatorUtils
operator|.
name|findOperatorsUpstream
argument_list|(
name|parentOp
operator|.
name|getParentOperators
argument_list|()
argument_list|,
name|ReduceSinkOperator
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|<
literal|0
condition|)
block|{
name|size
operator|=
name|set
operator|.
name|size
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|(
operator|(
name|size
operator|>
literal|0
operator|)
operator|&&
operator|(
name|set
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
operator|)
operator|||
operator|(
operator|(
name|size
operator|==
literal|0
operator|)
operator|&&
operator|(
name|set
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
operator|)
condition|)
block|{
continue|continue;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// the sort and bucket cols have to match on both sides for this
comment|// transformation of the join operation
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOp
range|:
name|joinOp
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|parentOp
operator|instanceof
name|ReduceSinkOperator
operator|)
condition|)
block|{
comment|// could be mux/demux operators. Currently not supported
name|LOG
operator|.
name|info
argument_list|(
literal|"Found correlation optimizer operators. Cannot convert to SMB at this time."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|ReduceSinkOperator
name|rsOp
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|parentOp
decl_stmt|;
if|if
condition|(
name|checkColEquality
argument_list|(
name|rsOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOpTraits
argument_list|()
operator|.
name|getSortCols
argument_list|()
argument_list|,
name|rsOp
operator|.
name|getOpTraits
argument_list|()
operator|.
name|getSortCols
argument_list|()
argument_list|,
name|rsOp
operator|.
name|getColumnExprMap
argument_list|()
argument_list|,
name|tezBucketJoinProcCtx
argument_list|,
literal|false
argument_list|)
operator|==
literal|false
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"We cannot convert to SMB because the sort column names do not match."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|checkColEquality
argument_list|(
name|rsOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOpTraits
argument_list|()
operator|.
name|getBucketColNames
argument_list|()
argument_list|,
name|rsOp
operator|.
name|getOpTraits
argument_list|()
operator|.
name|getBucketColNames
argument_list|()
argument_list|,
name|rsOp
operator|.
name|getColumnExprMap
argument_list|()
argument_list|,
name|tezBucketJoinProcCtx
argument_list|,
literal|true
argument_list|)
operator|==
literal|false
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"We cannot convert to SMB because bucket column names do not match."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|numBuckets
operator|<
literal|0
condition|)
block|{
name|numBuckets
operator|=
name|bigTableRS
operator|.
name|getConf
argument_list|()
operator|.
name|getNumReducers
argument_list|()
expr_stmt|;
block|}
name|tezBucketJoinProcCtx
operator|.
name|setNumBuckets
argument_list|(
name|numBuckets
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"We can convert the join to an SMB join."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|setNumberOfBucketsOnChildren
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|currentOp
parameter_list|)
block|{
name|int
name|numBuckets
init|=
name|currentOp
operator|.
name|getOpTraits
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
range|:
name|currentOp
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|op
operator|instanceof
name|ReduceSinkOperator
operator|)
operator|&&
operator|!
operator|(
name|op
operator|instanceof
name|GroupByOperator
operator|)
condition|)
block|{
name|op
operator|.
name|getOpTraits
argument_list|()
operator|.
name|setNumBuckets
argument_list|(
name|numBuckets
argument_list|)
expr_stmt|;
name|setNumberOfBucketsOnChildren
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * If the parent reduce sink of the big table side has the same emit key cols as its parent, we    * can create a bucket map join eliminating the reduce sink.    */
specifier|private
name|boolean
name|checkConvertJoinBucketMapJoin
parameter_list|(
name|JoinOperator
name|joinOp
parameter_list|,
name|OptimizeTezProcContext
name|context
parameter_list|,
name|int
name|bigTablePosition
parameter_list|,
name|TezBucketJoinProcCtx
name|tezBucketJoinProcCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// bail on mux-operator because mux operator masks the emit keys of the
comment|// constituent reduce sinks
if|if
condition|(
operator|!
operator|(
name|joinOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ReduceSinkOperator
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Operator is "
operator|+
name|joinOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|". Cannot convert to bucket map join"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|ReduceSinkOperator
name|rs
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|joinOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
name|bigTablePosition
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|parentColNames
init|=
name|rs
operator|.
name|getOpTraits
argument_list|()
operator|.
name|getBucketColNames
argument_list|()
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOfParent
init|=
name|rs
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|grandParentColNames
init|=
name|parentOfParent
operator|.
name|getOpTraits
argument_list|()
operator|.
name|getBucketColNames
argument_list|()
decl_stmt|;
name|int
name|numBuckets
init|=
name|parentOfParent
operator|.
name|getOpTraits
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
decl_stmt|;
comment|// all keys matched.
if|if
condition|(
name|checkColEquality
argument_list|(
name|grandParentColNames
argument_list|,
name|parentColNames
argument_list|,
name|rs
operator|.
name|getColumnExprMap
argument_list|()
argument_list|,
name|tezBucketJoinProcCtx
argument_list|,
literal|true
argument_list|)
operator|==
literal|false
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No info available to check for bucket map join. Cannot convert"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/*      * this is the case when the big table is a sub-query and is probably already bucketed by the      * join column in say a group by operation      */
if|if
condition|(
name|numBuckets
operator|<
literal|0
condition|)
block|{
name|numBuckets
operator|=
name|rs
operator|.
name|getConf
argument_list|()
operator|.
name|getNumReducers
argument_list|()
expr_stmt|;
block|}
name|tezBucketJoinProcCtx
operator|.
name|setNumBuckets
argument_list|(
name|numBuckets
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|checkColEquality
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|grandParentColNames
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|parentColNames
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|colExprMap
parameter_list|,
name|TezBucketJoinProcCtx
name|tezBucketJoinProcCtx
parameter_list|,
name|boolean
name|strict
parameter_list|)
block|{
if|if
condition|(
operator|(
name|grandParentColNames
operator|==
literal|null
operator|)
operator|||
operator|(
name|parentColNames
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
name|parentColNames
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|parentColNames
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
operator|)
condition|)
block|{
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|listBucketCols
range|:
name|grandParentColNames
control|)
block|{
comment|// can happen if this operator does not carry forward the previous bucketing columns
comment|// for e.g. another join operator which does not carry one of the sides' key columns
if|if
condition|(
name|listBucketCols
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|int
name|colCount
init|=
literal|0
decl_stmt|;
comment|// parent op is guaranteed to have a single list because it is a reduce sink
for|for
control|(
name|String
name|colName
range|:
name|parentColNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
control|)
block|{
if|if
condition|(
name|listBucketCols
operator|.
name|size
argument_list|()
operator|<=
name|colCount
condition|)
block|{
comment|// can happen with virtual columns. RS would add the column to its output columns
comment|// but it would not exist in the grandparent output columns or exprMap.
return|return
literal|false
return|;
block|}
comment|// all columns need to be at least a subset of the parentOfParent's bucket cols
name|ExprNodeDesc
name|exprNodeDesc
init|=
name|colExprMap
operator|.
name|get
argument_list|(
name|colName
argument_list|)
decl_stmt|;
if|if
condition|(
name|exprNodeDesc
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|exprNodeDesc
operator|)
operator|.
name|getColumn
argument_list|()
operator|.
name|equals
argument_list|(
name|listBucketCols
operator|.
name|get
argument_list|(
name|colCount
argument_list|)
argument_list|)
condition|)
block|{
name|colCount
operator|++
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|colCount
operator|==
name|parentColNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|strict
condition|)
block|{
if|if
condition|(
name|colCount
operator|==
name|listBucketCols
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|getMapJoinConversionPos
parameter_list|(
name|JoinOperator
name|joinOp
parameter_list|,
name|OptimizeTezProcContext
name|context
parameter_list|,
name|int
name|buckets
parameter_list|,
name|boolean
name|skipJoinTypeChecks
parameter_list|,
name|long
name|maxSize
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
operator|!
name|skipJoinTypeChecks
condition|)
block|{
comment|/*        * HIVE-9038: Join tests fail in tez when we have more than 1 join on the same key and there is        * an outer join down the join tree that requires filterTag. We disable this conversion to map        * join here now. We need to emulate the behavior of HashTableSinkOperator as in MR or create a        * new operation to be able to support this. This seems like a corner case enough to special        * case this for now.        */
if|if
condition|(
name|joinOp
operator|.
name|getConf
argument_list|()
operator|.
name|getConds
argument_list|()
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|boolean
name|hasOuter
init|=
literal|false
decl_stmt|;
for|for
control|(
name|JoinCondDesc
name|joinCondDesc
range|:
name|joinOp
operator|.
name|getConf
argument_list|()
operator|.
name|getConds
argument_list|()
control|)
block|{
switch|switch
condition|(
name|joinCondDesc
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|JoinDesc
operator|.
name|INNER_JOIN
case|:
case|case
name|JoinDesc
operator|.
name|LEFT_SEMI_JOIN
case|:
case|case
name|JoinDesc
operator|.
name|UNIQUE_JOIN
case|:
name|hasOuter
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|JoinDesc
operator|.
name|FULL_OUTER_JOIN
case|:
case|case
name|JoinDesc
operator|.
name|LEFT_OUTER_JOIN
case|:
case|case
name|JoinDesc
operator|.
name|RIGHT_OUTER_JOIN
case|:
name|hasOuter
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Unknown join type "
operator|+
name|joinCondDesc
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|hasOuter
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
name|Set
argument_list|<
name|Integer
argument_list|>
name|bigTableCandidateSet
init|=
name|MapJoinProcessor
operator|.
name|getBigTableCandidates
argument_list|(
name|joinOp
operator|.
name|getConf
argument_list|()
operator|.
name|getConds
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|bigTablePosition
init|=
operator|-
literal|1
decl_stmt|;
comment|// big input cumulative row count
name|long
name|bigInputCumulativeCardinality
init|=
operator|-
literal|1L
decl_stmt|;
comment|// stats of the big input
name|Statistics
name|bigInputStat
init|=
literal|null
decl_stmt|;
comment|// bigTableFound means we've encountered a table that's bigger than the
comment|// max. This table is either the the big table or we cannot convert.
name|boolean
name|foundInputNotFittingInMemory
init|=
literal|false
decl_stmt|;
comment|// total size of the inputs
name|long
name|totalSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|joinOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOp
init|=
name|joinOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|Statistics
name|currInputStat
init|=
name|parentOp
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
if|if
condition|(
name|currInputStat
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't get statistics from: "
operator|+
name|parentOp
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|long
name|inputSize
init|=
name|currInputStat
operator|.
name|getDataSize
argument_list|()
decl_stmt|;
name|boolean
name|currentInputNotFittingInMemory
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
name|bigInputStat
operator|==
literal|null
operator|)
operator|||
operator|(
operator|(
name|bigInputStat
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|inputSize
operator|>
name|bigInputStat
operator|.
name|getDataSize
argument_list|()
operator|)
operator|)
condition|)
block|{
if|if
condition|(
name|foundInputNotFittingInMemory
condition|)
block|{
comment|// cannot convert to map join; we've already chosen a big table
comment|// on size and there's another one that's bigger.
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|inputSize
operator|/
name|buckets
operator|>
name|maxSize
condition|)
block|{
if|if
condition|(
operator|!
name|bigTableCandidateSet
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
condition|)
block|{
comment|// can't use the current table as the big table, but it's too
comment|// big for the map side.
return|return
operator|-
literal|1
return|;
block|}
name|currentInputNotFittingInMemory
operator|=
literal|true
expr_stmt|;
name|foundInputNotFittingInMemory
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|long
name|currentInputCumulativeCardinality
decl_stmt|;
if|if
condition|(
name|foundInputNotFittingInMemory
condition|)
block|{
name|currentInputCumulativeCardinality
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
else|else
block|{
name|Long
name|cardinality
init|=
name|computeCumulativeCardinality
argument_list|(
name|parentOp
argument_list|)
decl_stmt|;
if|if
condition|(
name|cardinality
operator|==
literal|null
condition|)
block|{
comment|// We could not get stats, we cannot convert
return|return
operator|-
literal|1
return|;
block|}
name|currentInputCumulativeCardinality
operator|=
name|cardinality
expr_stmt|;
block|}
comment|// This input is the big table if it is contained in the big candidates set, and either:
comment|// 1) we have not chosen a big table yet, or
comment|// 2) it has been chosen as the big table above, or
comment|// 3) the cumulative cardinality for this input is higher, or
comment|// 4) the cumulative cardinality is equal, but the size is bigger,
name|boolean
name|selectedBigTable
init|=
name|bigTableCandidateSet
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
operator|&&
operator|(
name|bigInputStat
operator|==
literal|null
operator|||
name|currentInputNotFittingInMemory
operator|||
operator|(
operator|!
name|foundInputNotFittingInMemory
operator|&&
operator|(
name|currentInputCumulativeCardinality
operator|>
name|bigInputCumulativeCardinality
operator|||
operator|(
name|currentInputCumulativeCardinality
operator|==
name|bigInputCumulativeCardinality
operator|&&
name|inputSize
operator|>
name|bigInputStat
operator|.
name|getDataSize
argument_list|()
operator|)
operator|)
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|bigInputStat
operator|!=
literal|null
operator|&&
name|selectedBigTable
condition|)
block|{
comment|// We are replacing the current big table with a new one, thus
comment|// we need to count the current one as a map table then.
name|totalSize
operator|+=
name|bigInputStat
operator|.
name|getDataSize
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|selectedBigTable
condition|)
block|{
comment|// This is not the first table and we are not using it as big table,
comment|// in fact, we're adding this table as a map table
name|totalSize
operator|+=
name|inputSize
expr_stmt|;
block|}
if|if
condition|(
name|totalSize
operator|/
name|buckets
operator|>
name|maxSize
condition|)
block|{
comment|// sum of small tables size in this join exceeds configured limit
comment|// hence cannot convert.
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|selectedBigTable
condition|)
block|{
name|bigTablePosition
operator|=
name|pos
expr_stmt|;
name|bigInputCumulativeCardinality
operator|=
name|currentInputCumulativeCardinality
expr_stmt|;
name|bigInputStat
operator|=
name|currInputStat
expr_stmt|;
block|}
block|}
return|return
name|bigTablePosition
return|;
block|}
comment|// This is akin to CBO cumulative cardinality model
specifier|private
specifier|static
name|Long
name|computeCumulativeCardinality
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|)
block|{
name|long
name|cumulativeCardinality
init|=
literal|0L
decl_stmt|;
if|if
condition|(
name|op
operator|instanceof
name|CommonJoinOperator
condition|)
block|{
comment|// Choose max
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|inputOp
range|:
name|op
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
name|Long
name|inputCardinality
init|=
name|computeCumulativeCardinality
argument_list|(
name|inputOp
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputCardinality
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|inputCardinality
operator|>
name|cumulativeCardinality
condition|)
block|{
name|cumulativeCardinality
operator|=
name|inputCardinality
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Choose cumulative
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|inputOp
range|:
name|op
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
name|Long
name|inputCardinality
init|=
name|computeCumulativeCardinality
argument_list|(
name|inputOp
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputCardinality
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|cumulativeCardinality
operator|+=
name|inputCardinality
expr_stmt|;
block|}
block|}
name|Statistics
name|currInputStat
init|=
name|op
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
if|if
condition|(
name|currInputStat
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't get statistics from: "
operator|+
name|op
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|cumulativeCardinality
operator|+=
name|currInputStat
operator|.
name|getNumRows
argument_list|()
expr_stmt|;
return|return
name|cumulativeCardinality
return|;
block|}
comment|/*    * Once we have decided on the map join, the tree would transform from    *    *        |                   |    *       Join               MapJoin    *       / \                /   \    *     RS   RS   --->     RS    TS (big table)    *    /      \           /    *   TS       TS        TS (small table)    *    * for tez.    */
specifier|public
name|MapJoinOperator
name|convertJoinMapJoin
parameter_list|(
name|JoinOperator
name|joinOp
parameter_list|,
name|OptimizeTezProcContext
name|context
parameter_list|,
name|int
name|bigTablePosition
parameter_list|,
name|boolean
name|removeReduceSink
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// bail on mux operator because currently the mux operator masks the emit keys
comment|// of the constituent reduce sinks.
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOp
range|:
name|joinOp
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
if|if
condition|(
name|parentOp
operator|instanceof
name|MuxOperator
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// can safely convert the join to a map join.
name|MapJoinOperator
name|mapJoinOp
init|=
name|MapJoinProcessor
operator|.
name|convertJoinOpMapJoinOp
argument_list|(
name|context
operator|.
name|conf
argument_list|,
name|joinOp
argument_list|,
name|joinOp
operator|.
name|getConf
argument_list|()
operator|.
name|isLeftInputJoin
argument_list|()
argument_list|,
name|joinOp
operator|.
name|getConf
argument_list|()
operator|.
name|getBaseSrc
argument_list|()
argument_list|,
name|joinOp
operator|.
name|getConf
argument_list|()
operator|.
name|getMapAliases
argument_list|()
argument_list|,
name|bigTablePosition
argument_list|,
literal|true
argument_list|,
name|removeReduceSink
argument_list|)
decl_stmt|;
name|mapJoinOp
operator|.
name|getConf
argument_list|()
operator|.
name|setHybridHashJoin
argument_list|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|context
operator|.
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEUSEHYBRIDGRACEHASHJOIN
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|joinExprs
init|=
name|mapJoinOp
operator|.
name|getConf
argument_list|()
operator|.
name|getKeys
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|joinExprs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// In case of cross join, we disable hybrid grace hash join
name|mapJoinOp
operator|.
name|getConf
argument_list|()
operator|.
name|setHybridHashJoin
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentBigTableOp
init|=
name|mapJoinOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
name|bigTablePosition
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentBigTableOp
operator|instanceof
name|ReduceSinkOperator
condition|)
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|parentSelectOpOfBigTableOp
init|=
name|parentBigTableOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|removeReduceSink
condition|)
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|p
range|:
name|parentBigTableOp
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
comment|// we might have generated a dynamic partition operator chain. Since
comment|// we're removing the reduce sink we need do remove that too.
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|dynamicPartitionOperators
init|=
operator|new
name|HashSet
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|,
name|AppMasterEventOperator
argument_list|>
name|opEventPairs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|c
range|:
name|p
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
name|AppMasterEventOperator
name|event
init|=
name|findDynamicPartitionBroadcast
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
block|{
name|dynamicPartitionOperators
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|opEventPairs
operator|.
name|put
argument_list|(
name|c
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|c
range|:
name|dynamicPartitionOperators
control|)
block|{
if|if
condition|(
name|context
operator|.
name|pruningOpsRemovedByPriorOpt
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|context
operator|.
name|pruningOpsRemovedByPriorOpt
operator|.
name|contains
argument_list|(
name|opEventPairs
operator|.
name|get
argument_list|(
name|c
argument_list|)
argument_list|)
condition|)
block|{
name|p
operator|.
name|removeChild
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|// at this point we've found the fork in the op pipeline that has the pruning as a child plan.
name|LOG
operator|.
name|info
argument_list|(
literal|"Disabling dynamic pruning for: "
operator|+
operator|(
operator|(
name|DynamicPruningEventDesc
operator|)
name|opEventPairs
operator|.
name|get
argument_list|(
name|c
argument_list|)
operator|.
name|getConf
argument_list|()
operator|)
operator|.
name|getTableScan
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|". Need to be removed together with reduce sink"
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|op
range|:
name|dynamicPartitionOperators
control|)
block|{
name|context
operator|.
name|pruningOpsRemovedByPriorOpt
operator|.
name|add
argument_list|(
name|opEventPairs
operator|.
name|get
argument_list|(
name|op
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|mapJoinOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|remove
argument_list|(
name|bigTablePosition
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|mapJoinOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|contains
argument_list|(
name|parentBigTableOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|mapJoinOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|add
argument_list|(
name|bigTablePosition
argument_list|,
name|parentBigTableOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|parentBigTableOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|removeChild
argument_list|(
name|parentBigTableOp
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
range|:
name|mapJoinOp
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|contains
argument_list|(
name|mapJoinOp
argument_list|)
operator|)
condition|)
block|{
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|add
argument_list|(
name|mapJoinOp
argument_list|)
expr_stmt|;
block|}
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|remove
argument_list|(
name|joinOp
argument_list|)
expr_stmt|;
block|}
comment|// Remove semijoin Op if there is any.
if|if
condition|(
name|context
operator|.
name|parseContext
operator|.
name|getRsOpToTsOpMap
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|removeCycleCreatingSemiJoinOps
argument_list|(
name|mapJoinOp
argument_list|,
name|parentSelectOpOfBigTableOp
argument_list|,
name|context
operator|.
name|parseContext
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mapJoinOp
return|;
block|}
comment|// Remove any semijoin branch associated with mapjoin's parent's operator
comment|// pipeline which can cause a cycle after mapjoin optimization.
specifier|private
name|void
name|removeCycleCreatingSemiJoinOps
parameter_list|(
name|MapJoinOperator
name|mapjoinOp
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|parentSelectOpOfBigTable
parameter_list|,
name|ParseContext
name|parseContext
parameter_list|)
throws|throws
name|SemanticException
block|{
name|boolean
name|semiJoinCycle
init|=
literal|false
decl_stmt|;
name|ReduceSinkOperator
name|rs
init|=
literal|null
decl_stmt|;
name|TableScanOperator
name|ts
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|op
range|:
name|parentSelectOpOfBigTable
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|op
operator|instanceof
name|SelectOperator
operator|)
condition|)
block|{
continue|continue;
block|}
while|while
condition|(
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|op
operator|=
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|op
operator|instanceof
name|ReduceSinkOperator
operator|)
condition|)
block|{
continue|continue;
block|}
name|rs
operator|=
operator|(
name|ReduceSinkOperator
operator|)
name|op
expr_stmt|;
name|ts
operator|=
name|parseContext
operator|.
name|getRsOpToTsOpMap
argument_list|()
operator|.
name|get
argument_list|(
name|rs
argument_list|)
expr_stmt|;
if|if
condition|(
name|ts
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|parent
range|:
name|mapjoinOp
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|parent
operator|instanceof
name|ReduceSinkOperator
operator|)
condition|)
block|{
continue|continue;
block|}
name|Set
argument_list|<
name|TableScanOperator
argument_list|>
name|tsOps
init|=
name|OperatorUtils
operator|.
name|findOperatorsUpstream
argument_list|(
name|parent
argument_list|,
name|TableScanOperator
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|TableScanOperator
name|parentTS
range|:
name|tsOps
control|)
block|{
comment|// If the parent is same as the ts, then we have a cycle.
if|if
condition|(
name|ts
operator|==
name|parentTS
condition|)
block|{
name|semiJoinCycle
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
comment|// By design there can be atmost 1 such cycle.
if|if
condition|(
name|semiJoinCycle
condition|)
block|{
name|GenTezUtils
operator|.
name|removeBranch
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|GenTezUtils
operator|.
name|removeSemiJoinOperator
argument_list|(
name|parseContext
argument_list|,
name|rs
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|AppMasterEventOperator
name|findDynamicPartitionBroadcast
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|parent
parameter_list|)
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|op
range|:
name|parent
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
while|while
condition|(
name|op
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|op
operator|instanceof
name|AppMasterEventOperator
operator|&&
name|op
operator|.
name|getConf
argument_list|()
operator|instanceof
name|DynamicPruningEventDesc
condition|)
block|{
comment|// found dynamic partition pruning operator
return|return
operator|(
name|AppMasterEventOperator
operator|)
name|op
return|;
block|}
if|if
condition|(
name|op
operator|instanceof
name|ReduceSinkOperator
operator|||
name|op
operator|instanceof
name|FileSinkOperator
condition|)
block|{
comment|// crossing reduce sink or file sink means the pruning isn't for this parent.
break|break;
block|}
if|if
condition|(
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
comment|// dynamic partition pruning pipeline doesn't have multiple children
break|break;
block|}
name|op
operator|=
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Estimate the number of buckets in the join, using the parent operators' OpTraits and/or    * parent operators' number of reducers    * @param joinOp    * @param useOpTraits  Whether OpTraits should be used for the estimate.    * @return    */
specifier|private
specifier|static
name|int
name|estimateNumBuckets
parameter_list|(
name|JoinOperator
name|joinOp
parameter_list|,
name|boolean
name|useOpTraits
parameter_list|)
block|{
name|int
name|numBuckets
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|estimatedBuckets
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOp
range|:
name|joinOp
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
if|if
condition|(
name|parentOp
operator|.
name|getOpTraits
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
operator|>
literal|0
condition|)
block|{
name|numBuckets
operator|=
operator|(
name|numBuckets
operator|<
name|parentOp
operator|.
name|getOpTraits
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
operator|)
condition|?
name|parentOp
operator|.
name|getOpTraits
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
else|:
name|numBuckets
expr_stmt|;
block|}
if|if
condition|(
name|parentOp
operator|instanceof
name|ReduceSinkOperator
condition|)
block|{
name|ReduceSinkOperator
name|rs
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|parentOp
decl_stmt|;
name|estimatedBuckets
operator|=
operator|(
name|estimatedBuckets
operator|<
name|rs
operator|.
name|getConf
argument_list|()
operator|.
name|getNumReducers
argument_list|()
operator|)
condition|?
name|rs
operator|.
name|getConf
argument_list|()
operator|.
name|getNumReducers
argument_list|()
else|:
name|estimatedBuckets
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|useOpTraits
condition|)
block|{
comment|// Ignore the value we got from OpTraits.
comment|// The logic below will fall back to the estimate from numReducers
name|numBuckets
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|numBuckets
operator|<=
literal|0
condition|)
block|{
name|numBuckets
operator|=
name|estimatedBuckets
expr_stmt|;
if|if
condition|(
name|numBuckets
operator|<=
literal|0
condition|)
block|{
name|numBuckets
operator|=
literal|1
expr_stmt|;
block|}
block|}
return|return
name|numBuckets
return|;
block|}
specifier|private
name|boolean
name|convertJoinDynamicPartitionedHashJoin
parameter_list|(
name|JoinOperator
name|joinOp
parameter_list|,
name|OptimizeTezProcContext
name|context
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// Attempt dynamic partitioned hash join
comment|// Since we don't have big table index yet, must start with estimate of numReducers
name|int
name|numReducers
init|=
name|estimateNumBuckets
argument_list|(
name|joinOp
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Try dynamic partitioned hash join with estimated "
operator|+
name|numReducers
operator|+
literal|" reducers"
argument_list|)
expr_stmt|;
name|int
name|bigTablePos
init|=
name|getMapJoinConversionPos
argument_list|(
name|joinOp
argument_list|,
name|context
argument_list|,
name|numReducers
argument_list|,
literal|false
argument_list|,
name|context
operator|.
name|conf
operator|.
name|getLongVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVECONVERTJOINNOCONDITIONALTASKTHRESHOLD
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|bigTablePos
operator|>=
literal|0
condition|)
block|{
comment|// Now that we have the big table index, get real numReducers value based on big table RS
name|ReduceSinkOperator
name|bigTableParentRS
init|=
call|(
name|ReduceSinkOperator
call|)
argument_list|(
name|joinOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
name|bigTablePos
argument_list|)
argument_list|)
decl_stmt|;
name|numReducers
operator|=
name|bigTableParentRS
operator|.
name|getConf
argument_list|()
operator|.
name|getNumReducers
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Real big table reducers = "
operator|+
name|numReducers
argument_list|)
expr_stmt|;
name|MapJoinOperator
name|mapJoinOp
init|=
name|convertJoinMapJoin
argument_list|(
name|joinOp
argument_list|,
name|context
argument_list|,
name|bigTablePos
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapJoinOp
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Selected dynamic partitioned hash join"
argument_list|)
expr_stmt|;
name|mapJoinOp
operator|.
name|getConf
argument_list|()
operator|.
name|setDynamicPartitionHashJoin
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Set OpTraits for dynamically partitioned hash join:
comment|// bucketColNames: Re-use previous joinOp's bucketColNames. Parent operators should be
comment|//   reduce sink, which should have bucket columns based on the join keys.
comment|// numBuckets: set to number of reducers
comment|// sortCols: This is an unsorted join - no sort cols
name|OpTraits
name|opTraits
init|=
operator|new
name|OpTraits
argument_list|(
name|joinOp
operator|.
name|getOpTraits
argument_list|()
operator|.
name|getBucketColNames
argument_list|()
argument_list|,
name|numReducers
argument_list|,
literal|null
argument_list|,
name|joinOp
operator|.
name|getOpTraits
argument_list|()
operator|.
name|getNumReduceSinks
argument_list|()
argument_list|)
decl_stmt|;
name|mapJoinOp
operator|.
name|setOpTraits
argument_list|(
name|opTraits
argument_list|)
expr_stmt|;
name|mapJoinOp
operator|.
name|setStatistics
argument_list|(
name|joinOp
operator|.
name|getStatistics
argument_list|()
argument_list|)
expr_stmt|;
comment|// propagate this change till the next RS
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|childOp
range|:
name|mapJoinOp
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
name|setAllChildrenTraits
argument_list|(
name|childOp
argument_list|,
name|mapJoinOp
operator|.
name|getOpTraits
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|fallbackToReduceSideJoin
parameter_list|(
name|JoinOperator
name|joinOp
parameter_list|,
name|OptimizeTezProcContext
name|context
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|context
operator|.
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVECONVERTJOIN
argument_list|)
operator|&&
name|context
operator|.
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEDYNAMICPARTITIONHASHJOIN
argument_list|)
condition|)
block|{
if|if
condition|(
name|convertJoinDynamicPartitionedHashJoin
argument_list|(
name|joinOp
argument_list|,
name|context
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|int
name|pos
init|=
name|getMapJoinConversionPos
argument_list|(
name|joinOp
argument_list|,
name|context
argument_list|,
name|estimateNumBuckets
argument_list|(
name|joinOp
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|true
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not get a valid join position. Defaulting to position 0"
argument_list|)
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
block|}
comment|// we are just converting to a common merge join operator. The shuffle
comment|// join in map-reduce case.
name|LOG
operator|.
name|info
argument_list|(
literal|"Fallback to common merge join operator"
argument_list|)
expr_stmt|;
name|convertJoinSMBJoin
argument_list|(
name|joinOp
argument_list|,
name|context
argument_list|,
name|pos
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

