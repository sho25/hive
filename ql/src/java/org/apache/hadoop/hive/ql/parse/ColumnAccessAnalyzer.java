begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_class
specifier|public
class|class
name|ColumnAccessAnalyzer
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ColumnAccessAnalyzer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ParseContext
name|pGraphContext
decl_stmt|;
specifier|public
name|ColumnAccessAnalyzer
parameter_list|()
block|{
name|pGraphContext
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|ColumnAccessAnalyzer
parameter_list|(
name|ParseContext
name|pactx
parameter_list|)
block|{
name|pGraphContext
operator|=
name|pactx
expr_stmt|;
block|}
specifier|public
name|ColumnAccessInfo
name|analyzeColumnAccess
parameter_list|()
throws|throws
name|SemanticException
block|{
name|ColumnAccessInfo
name|columnAccessInfo
init|=
operator|new
name|ColumnAccessInfo
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|TableScanOperator
argument_list|,
name|Table
argument_list|>
name|topOps
init|=
name|pGraphContext
operator|.
name|getTopToTable
argument_list|()
decl_stmt|;
for|for
control|(
name|TableScanOperator
name|op
range|:
name|topOps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Table
name|table
init|=
name|topOps
operator|.
name|get
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
name|table
operator|.
name|getCompleteName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|referenced
init|=
name|op
operator|.
name|getReferencedColumns
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|column
range|:
name|referenced
control|)
block|{
name|columnAccessInfo
operator|.
name|add
argument_list|(
name|tableName
argument_list|,
name|column
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|table
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|PrunedPartitionList
name|parts
decl_stmt|;
try|try
block|{
name|parts
operator|=
name|pGraphContext
operator|.
name|getPrunedPartitions
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|parts
operator|.
name|getReferredPartCols
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|partKey
range|:
name|parts
operator|.
name|getReferredPartCols
argument_list|()
control|)
block|{
name|columnAccessInfo
operator|.
name|add
argument_list|(
name|tableName
argument_list|,
name|partKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|columnAccessInfo
return|;
block|}
block|}
end_class

end_unit

