begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|partition
operator|.
name|add
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLSemanticAnalyzerFactory
operator|.
name|DDLType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_comment
comment|/**  * Analyzer for add partition commands for views.  */
end_comment

begin_class
annotation|@
name|DDLType
argument_list|(
name|types
operator|=
name|HiveParser
operator|.
name|TOK_ALTERVIEW_ADDPARTS
argument_list|)
specifier|public
class|class
name|AlterViewAddPartitionAnalyzer
extends|extends
name|AbstractAddPartitionAnalyzer
block|{
specifier|public
name|AlterViewAddPartitionAnalyzer
parameter_list|(
name|QueryState
name|queryState
parameter_list|)
throws|throws
name|SemanticException
block|{
name|super
argument_list|(
name|queryState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|expectView
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|allowLocation
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|VIEW_VALIDATE_QUERY
init|=
literal|"SELECT *%n"
operator|+
literal|"  FROM %s%n"
operator|+
literal|" WHERE %s"
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|postProcess
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Table
name|table
parameter_list|,
name|AlterTableAddPartitionDesc
name|desc
parameter_list|,
name|Task
argument_list|<
name|DDLWork
argument_list|>
name|ddlTask
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// Compile internal query to capture underlying table partition dependencies
name|String
name|dbTable
init|=
name|HiveUtils
operator|.
name|unparseIdentifier
argument_list|(
name|tableName
operator|.
name|getDb
argument_list|()
argument_list|)
operator|+
literal|"."
operator|+
name|HiveUtils
operator|.
name|unparseIdentifier
argument_list|(
name|tableName
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuilder
name|where
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|firstOr
init|=
literal|true
decl_stmt|;
for|for
control|(
name|AlterTableAddPartitionDesc
operator|.
name|PartitionDesc
name|partitionDesc
range|:
name|desc
operator|.
name|getPartitions
argument_list|()
control|)
block|{
if|if
condition|(
name|firstOr
condition|)
block|{
name|firstOr
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|where
operator|.
name|append
argument_list|(
literal|" OR "
argument_list|)
expr_stmt|;
block|}
name|boolean
name|firstAnd
init|=
literal|true
decl_stmt|;
name|where
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|partitionDesc
operator|.
name|getPartSpec
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|firstAnd
condition|)
block|{
name|firstAnd
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|where
operator|.
name|append
argument_list|(
literal|" AND "
argument_list|)
expr_stmt|;
block|}
name|where
operator|.
name|append
argument_list|(
name|HiveUtils
operator|.
name|unparseIdentifier
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|where
operator|.
name|append
argument_list|(
literal|" = '"
argument_list|)
expr_stmt|;
name|where
operator|.
name|append
argument_list|(
name|HiveUtils
operator|.
name|escapeString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|where
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|where
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|String
name|query
init|=
name|String
operator|.
name|format
argument_list|(
name|VIEW_VALIDATE_QUERY
argument_list|,
name|dbTable
argument_list|,
name|where
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// FIXME: is it ok to have a completely new querystate?
try|try
init|(
name|Driver
name|driver
init|=
operator|new
name|Driver
argument_list|(
name|QueryState
operator|.
name|getNewQueryState
argument_list|(
name|conf
argument_list|,
name|queryState
operator|.
name|getLineageState
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|int
name|rc
init|=
name|driver
operator|.
name|compile
argument_list|(
name|query
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|NO_VALID_PARTN
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
name|inputs
operator|.
name|addAll
argument_list|(
name|driver
operator|.
name|getPlan
argument_list|()
operator|.
name|getInputs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

