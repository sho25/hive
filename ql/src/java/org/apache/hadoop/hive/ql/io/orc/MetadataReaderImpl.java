begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DiskRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|RecordReaderImpl
operator|.
name|BufferChunk
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|MetadataReaderImpl
implements|implements
name|MetadataReader
block|{
specifier|private
specifier|final
name|FSDataInputStream
name|file
decl_stmt|;
specifier|private
specifier|final
name|CompressionCodec
name|codec
decl_stmt|;
specifier|private
specifier|final
name|int
name|bufferSize
decl_stmt|;
specifier|private
specifier|final
name|int
name|typeCount
decl_stmt|;
specifier|public
name|MetadataReaderImpl
parameter_list|(
name|FileSystem
name|fileSystem
parameter_list|,
name|Path
name|path
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|int
name|typeCount
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|fileSystem
operator|.
name|open
argument_list|(
name|path
argument_list|)
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|,
name|typeCount
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MetadataReaderImpl
parameter_list|(
name|FSDataInputStream
name|file
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|int
name|typeCount
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|codec
operator|=
name|codec
expr_stmt|;
name|this
operator|.
name|bufferSize
operator|=
name|bufferSize
expr_stmt|;
name|this
operator|.
name|typeCount
operator|=
name|typeCount
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReaderImpl
operator|.
name|Index
name|readRowIndex
parameter_list|(
name|StripeInformation
name|stripe
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|footer
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|OrcProto
operator|.
name|RowIndex
index|[]
name|indexes
parameter_list|,
name|boolean
index|[]
name|sargColumns
parameter_list|,
name|OrcProto
operator|.
name|BloomFilterIndex
index|[]
name|bloomFilterIndices
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|footer
operator|==
literal|null
condition|)
block|{
name|footer
operator|=
name|readStripeFooter
argument_list|(
name|stripe
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indexes
operator|==
literal|null
condition|)
block|{
name|indexes
operator|=
operator|new
name|OrcProto
operator|.
name|RowIndex
index|[
name|typeCount
index|]
expr_stmt|;
block|}
if|if
condition|(
name|bloomFilterIndices
operator|==
literal|null
condition|)
block|{
name|bloomFilterIndices
operator|=
operator|new
name|OrcProto
operator|.
name|BloomFilterIndex
index|[
name|typeCount
index|]
expr_stmt|;
block|}
name|long
name|offset
init|=
name|stripe
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OrcProto
operator|.
name|Stream
argument_list|>
name|streams
init|=
name|footer
operator|.
name|getStreamsList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|streams
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|OrcProto
operator|.
name|Stream
name|stream
init|=
name|streams
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|OrcProto
operator|.
name|Stream
name|nextStream
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|streams
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|nextStream
operator|=
name|streams
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|int
name|col
init|=
name|stream
operator|.
name|getColumn
argument_list|()
decl_stmt|;
name|int
name|len
init|=
operator|(
name|int
operator|)
name|stream
operator|.
name|getLength
argument_list|()
decl_stmt|;
comment|// row index stream and bloom filter are interlaced, check if the sarg column contains bloom
comment|// filter and combine the io to read row index and bloom filters for that column together
if|if
condition|(
name|stream
operator|.
name|hasKind
argument_list|()
operator|&&
operator|(
name|stream
operator|.
name|getKind
argument_list|()
operator|==
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|ROW_INDEX
operator|)
condition|)
block|{
name|boolean
name|readBloomFilter
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|sargColumns
operator|!=
literal|null
operator|&&
name|sargColumns
index|[
name|col
index|]
operator|&&
name|nextStream
operator|.
name|getKind
argument_list|()
operator|==
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|BLOOM_FILTER
condition|)
block|{
name|len
operator|+=
name|nextStream
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|i
operator|+=
literal|1
expr_stmt|;
name|readBloomFilter
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|included
operator|==
literal|null
operator|||
name|included
index|[
name|col
index|]
operator|)
operator|&&
name|indexes
index|[
name|col
index|]
operator|==
literal|null
condition|)
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|file
operator|.
name|readFully
argument_list|(
name|offset
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|indexes
index|[
name|col
index|]
operator|=
name|OrcProto
operator|.
name|RowIndex
operator|.
name|parseFrom
argument_list|(
name|InStream
operator|.
name|create
argument_list|(
literal|null
argument_list|,
literal|"index"
argument_list|,
name|Lists
operator|.
expr|<
name|DiskRange
operator|>
name|newArrayList
argument_list|(
operator|new
name|BufferChunk
argument_list|(
name|bb
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|stream
operator|.
name|getLength
argument_list|()
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|readBloomFilter
condition|)
block|{
name|bb
operator|.
name|position
argument_list|(
operator|(
name|int
operator|)
name|stream
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|bloomFilterIndices
index|[
name|col
index|]
operator|=
name|OrcProto
operator|.
name|BloomFilterIndex
operator|.
name|parseFrom
argument_list|(
name|InStream
operator|.
name|create
argument_list|(
literal|null
argument_list|,
literal|"bloom_filter"
argument_list|,
name|Lists
operator|.
expr|<
name|DiskRange
operator|>
name|newArrayList
argument_list|(
operator|new
name|BufferChunk
argument_list|(
name|bb
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|nextStream
operator|.
name|getLength
argument_list|()
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|offset
operator|+=
name|len
expr_stmt|;
block|}
name|RecordReaderImpl
operator|.
name|Index
name|index
init|=
operator|new
name|RecordReaderImpl
operator|.
name|Index
argument_list|(
name|indexes
argument_list|,
name|bloomFilterIndices
argument_list|)
decl_stmt|;
return|return
name|index
return|;
block|}
annotation|@
name|Override
specifier|public
name|OrcProto
operator|.
name|StripeFooter
name|readStripeFooter
parameter_list|(
name|StripeInformation
name|stripe
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|offset
init|=
name|stripe
operator|.
name|getOffset
argument_list|()
operator|+
name|stripe
operator|.
name|getIndexLength
argument_list|()
operator|+
name|stripe
operator|.
name|getDataLength
argument_list|()
decl_stmt|;
name|int
name|tailLength
init|=
operator|(
name|int
operator|)
name|stripe
operator|.
name|getFooterLength
argument_list|()
decl_stmt|;
comment|// read the footer
name|ByteBuffer
name|tailBuf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|tailLength
argument_list|)
decl_stmt|;
name|file
operator|.
name|readFully
argument_list|(
name|offset
argument_list|,
name|tailBuf
operator|.
name|array
argument_list|()
argument_list|,
name|tailBuf
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|tailLength
argument_list|)
expr_stmt|;
return|return
name|OrcProto
operator|.
name|StripeFooter
operator|.
name|parseFrom
argument_list|(
name|InStream
operator|.
name|createCodedInputStream
argument_list|(
literal|null
argument_list|,
literal|"footer"
argument_list|,
name|Lists
operator|.
expr|<
name|DiskRange
operator|>
name|newArrayList
argument_list|(
operator|new
name|BufferChunk
argument_list|(
name|tailBuf
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|tailLength
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

