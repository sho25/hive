begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidTxnList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidTxnWriteIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|FieldDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapInputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|NotTezEventHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|SubmitWorkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|coordinator
operator|.
name|LlapCoordinator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|QueryIdentifierProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SignableVertexSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|security
operator|.
name|LlapSigner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|security
operator|.
name|LlapSigner
operator|.
name|Signable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|security
operator|.
name|LlapSigner
operator|.
name|SignedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|security
operator|.
name|LlapTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|security
operator|.
name|LlapTokenLocalClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tez
operator|.
name|Converters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentLengthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|DagUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|HiveSplitGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|TezTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveTxnManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|TxnManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TezWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|IntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|StringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SplitLocationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|security
operator|.
name|JobTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|security
operator|.
name|JobTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|DAG
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|InputDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|InputInitializerDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|RootInputLeafOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TaskLocationHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TaskSpecBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|Vertex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|mapreduce
operator|.
name|grouper
operator|.
name|TezSplitGrouper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|events
operator|.
name|InputConfigureVertexTasksEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|events
operator|.
name|InputDataInformationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|impl
operator|.
name|TaskSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * GenericUDTFGetSplits.  *  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"get_splits"
argument_list|,
name|value
operator|=
literal|"_FUNC_(string,int) - "
operator|+
literal|"Returns an array of length int serialized splits for the referenced tables string."
argument_list|)
annotation|@
name|UDFType
argument_list|(
name|deterministic
operator|=
literal|false
argument_list|)
specifier|public
class|class
name|GenericUDTFGetSplits
extends|extends
name|GenericUDTF
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GenericUDTFGetSplits
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|transient
name|StringObjectInspector
name|stringOI
decl_stmt|;
specifier|protected
specifier|transient
name|IntObjectInspector
name|intOI
decl_stmt|;
specifier|protected
specifier|transient
name|JobConf
name|jc
decl_stmt|;
specifier|private
name|boolean
name|orderByQuery
decl_stmt|;
specifier|private
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
specifier|private
name|DataOutput
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|StructObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"initializing GenericUDFGetSplits"
argument_list|)
expr_stmt|;
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|==
literal|null
operator|||
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot run get splits outside HS2"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initialized conf, jc and metastore connection"
argument_list|)
expr_stmt|;
if|if
condition|(
name|arguments
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentLengthException
argument_list|(
literal|"The function GET_SPLITS accepts 2 arguments."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|arguments
index|[
literal|0
index|]
operator|instanceof
name|StringObjectInspector
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got "
operator|+
name|arguments
index|[
literal|0
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" instead of string."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"\""
operator|+
literal|"string\" is expected at function GET_SPLITS, "
operator|+
literal|"but \""
operator|+
name|arguments
index|[
literal|0
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|"\" is found"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|arguments
index|[
literal|1
index|]
operator|instanceof
name|IntObjectInspector
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got "
operator|+
name|arguments
index|[
literal|1
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" instead of int."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|1
argument_list|,
literal|"\""
operator|+
literal|"int\" is expected at function GET_SPLITS, "
operator|+
literal|"but \""
operator|+
name|arguments
index|[
literal|1
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|"\" is found"
argument_list|)
throw|;
block|}
name|stringOI
operator|=
operator|(
name|StringObjectInspector
operator|)
name|arguments
index|[
literal|0
index|]
expr_stmt|;
name|intOI
operator|=
operator|(
name|IntObjectInspector
operator|)
name|arguments
index|[
literal|1
index|]
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"split"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldOIs
init|=
name|Arrays
operator|.
expr|<
name|ObjectInspector
operator|>
name|asList
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaByteArrayObjectInspector
argument_list|)
decl_stmt|;
name|StructObjectInspector
name|outputOI
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|names
argument_list|,
name|fieldOIs
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"done initializing GenericUDFGetSplits"
argument_list|)
expr_stmt|;
return|return
name|outputOI
return|;
block|}
specifier|public
specifier|static
class|class
name|PlanFragment
block|{
specifier|public
name|JobConf
name|jc
decl_stmt|;
specifier|public
name|TezWork
name|work
decl_stmt|;
specifier|public
name|Schema
name|schema
decl_stmt|;
specifier|public
name|PlanFragment
parameter_list|(
name|TezWork
name|work
parameter_list|,
name|Schema
name|schema
parameter_list|,
name|JobConf
name|jc
parameter_list|)
block|{
name|this
operator|.
name|work
operator|=
name|work
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|jc
operator|=
name|jc
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Object
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
name|query
init|=
name|stringOI
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|arguments
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|num
init|=
name|intOI
operator|.
name|get
argument_list|(
name|arguments
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
comment|// Generate applicationId for the LLAP splits
name|LlapCoordinator
name|coordinator
init|=
name|LlapCoordinator
operator|.
name|getInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|coordinator
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"LLAP coordinator is not initialized; must be running in HS2 with "
operator|+
name|ConfVars
operator|.
name|LLAP_HS2_ENABLE_COORDINATOR
operator|.
name|varname
operator|+
literal|" enabled"
argument_list|)
throw|;
block|}
name|ApplicationId
name|applicationId
init|=
name|coordinator
operator|.
name|createExtClientAppId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Generated appID {} for LLAP splits"
argument_list|,
name|applicationId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|PlanFragment
name|fragment
init|=
name|createPlanFragment
argument_list|(
name|query
argument_list|,
name|num
argument_list|,
name|applicationId
argument_list|)
decl_stmt|;
name|TezWork
name|tezWork
init|=
name|fragment
operator|.
name|work
decl_stmt|;
name|Schema
name|schema
init|=
name|fragment
operator|.
name|schema
decl_stmt|;
if|if
condition|(
name|orderByQuery
condition|)
block|{
name|jc
operator|.
name|setBoolean
argument_list|(
name|TezSplitGrouper
operator|.
name|TEZ_GROUPING_SPLIT_BY_LENGTH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|jc
operator|.
name|setBoolean
argument_list|(
name|TezSplitGrouper
operator|.
name|TEZ_GROUPING_SPLIT_BY_COUNT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jc
operator|.
name|setInt
argument_list|(
name|TezSplitGrouper
operator|.
name|TEZ_GROUPING_SPLIT_COUNT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|InputSplit
index|[]
name|splits
init|=
name|getSplits
argument_list|(
name|jc
argument_list|,
name|num
argument_list|,
name|tezWork
argument_list|,
name|schema
argument_list|,
name|applicationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|orderByQuery
operator|&&
name|splits
operator|.
name|length
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Got more than one split (Got: "
operator|+
name|splits
operator|.
name|length
operator|+
literal|") for order by query: "
operator|+
name|query
argument_list|)
throw|;
block|}
for|for
control|(
name|InputSplit
name|s
range|:
name|splits
control|)
block|{
name|Object
index|[]
name|os
init|=
operator|new
name|Object
index|[
literal|1
index|]
decl_stmt|;
name|bos
operator|.
name|reset
argument_list|()
expr_stmt|;
name|s
operator|.
name|write
argument_list|(
name|dos
argument_list|)
expr_stmt|;
name|byte
index|[]
name|frozen
init|=
name|bos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|os
index|[
literal|0
index|]
operator|=
name|frozen
expr_stmt|;
name|forward
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|PlanFragment
name|createPlanFragment
parameter_list|(
name|String
name|query
parameter_list|,
name|int
name|num
parameter_list|,
name|ApplicationId
name|splitsAppId
parameter_list|)
throws|throws
name|HiveException
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVEFETCHTASKCONVERSION
argument_list|,
literal|"none"
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVEQUERYRESULTFILEFORMAT
argument_list|,
name|PlanUtils
operator|.
name|LLAP_OUTPUT_FORMAT_KEY
argument_list|)
expr_stmt|;
name|String
name|originalMode
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_EXECUTION_MODE
argument_list|)
decl_stmt|;
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_EXECUTION_MODE
argument_list|,
literal|"llap"
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_TEZ_GENERATE_CONSISTENT_SPLITS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_CLIENT_CONSISTENT_SPLITS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|TezSplitGrouper
operator|.
name|TEZ_GROUPING_NODE_LOCAL_ONLY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Tez/LLAP requires RPC query plan
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_RPC_QUERY_PLAN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_QUERY_RESULTS_CACHE_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|jc
operator|=
name|DagUtils
operator|.
name|getInstance
argument_list|()
operator|.
name|createConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// Instantiate Driver to compile the query passed in.
comment|// This UDF is running as part of an existing query, which may already be using the
comment|// SessionState TxnManager. If this new Driver also tries to use the same TxnManager
comment|// then this may mess up the existing state of the TxnManager.
comment|// So initialize the new Driver with a new TxnManager so that it does not use the
comment|// Session TxnManager that is already in use.
name|HiveTxnManager
name|txnManager
init|=
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Driver
name|driver
init|=
operator|new
name|Driver
argument_list|(
operator|new
name|QueryState
operator|.
name|Builder
argument_list|()
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|nonIsolated
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|txnManager
argument_list|)
decl_stmt|;
name|DriverCleanup
name|driverCleanup
init|=
operator|new
name|DriverCleanup
argument_list|(
name|driver
argument_list|,
name|txnManager
argument_list|,
name|splitsAppId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|needsCleanup
init|=
literal|true
decl_stmt|;
try|try
block|{
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
name|query
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|cpr
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Failed to compile query: "
operator|+
name|cpr
operator|.
name|getException
argument_list|()
argument_list|)
throw|;
block|}
name|QueryPlan
name|plan
init|=
name|driver
operator|.
name|getPlan
argument_list|()
decl_stmt|;
if|if
condition|(
name|plan
operator|.
name|getQueryProperties
argument_list|()
operator|.
name|hasOuterOrderBy
argument_list|()
condition|)
block|{
name|orderByQuery
operator|=
literal|true
expr_stmt|;
block|}
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|roots
init|=
name|plan
operator|.
name|getRootTasks
argument_list|()
decl_stmt|;
name|Schema
name|schema
init|=
name|convertSchema
argument_list|(
name|plan
operator|.
name|getResultSchema
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|fetchTask
init|=
name|plan
operator|.
name|getFetchTask
argument_list|()
operator|!=
literal|null
decl_stmt|;
name|TezWork
name|tezWork
decl_stmt|;
if|if
condition|(
name|roots
operator|==
literal|null
operator|||
name|roots
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
operator|!
operator|(
name|roots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|TezTask
operator|)
condition|)
block|{
comment|// fetch task query
if|if
condition|(
name|fetchTask
condition|)
block|{
name|tezWork
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Was expecting a single TezTask or FetchTask."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|tezWork
operator|=
operator|(
operator|(
name|TezTask
operator|)
name|roots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getWork
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tezWork
operator|==
literal|null
operator|||
name|tezWork
operator|.
name|getAllWork
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|String
name|tableName
init|=
literal|"table_"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"[^A-Za-z0-9 ]"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|String
name|storageFormatString
init|=
name|getTempTableStorageFormatString
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|ctas
init|=
literal|"create temporary table "
operator|+
name|tableName
operator|+
literal|" "
operator|+
name|storageFormatString
operator|+
literal|" as "
operator|+
name|query
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Materializing the query for LLAPIF; CTAS: "
operator|+
name|ctas
argument_list|)
expr_stmt|;
name|driver
operator|.
name|releaseResources
argument_list|()
expr_stmt|;
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_EXECUTION_MODE
argument_list|,
name|originalMode
argument_list|)
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|run
argument_list|(
name|ctas
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|cpr
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Failed to create temp table: "
operator|+
name|cpr
operator|.
name|getException
argument_list|()
argument_list|)
throw|;
block|}
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_EXECUTION_MODE
argument_list|,
literal|"llap"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"select * from "
operator|+
name|tableName
expr_stmt|;
name|cpr
operator|=
name|driver
operator|.
name|compileAndRespond
argument_list|(
name|query
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|cpr
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Failed to create temp table: "
operator|+
name|cpr
operator|.
name|getException
argument_list|()
argument_list|)
throw|;
block|}
name|plan
operator|=
name|driver
operator|.
name|getPlan
argument_list|()
expr_stmt|;
name|roots
operator|=
name|plan
operator|.
name|getRootTasks
argument_list|()
expr_stmt|;
name|schema
operator|=
name|convertSchema
argument_list|(
name|plan
operator|.
name|getResultSchema
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|roots
operator|==
literal|null
operator|||
name|roots
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
operator|!
operator|(
name|roots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|TezTask
operator|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Was expecting a single TezTask."
argument_list|)
throw|;
block|}
name|tezWork
operator|=
operator|(
operator|(
name|TezTask
operator|)
name|roots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getWork
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Table will be queried directly by LLAP
comment|// Acquire locks if necessary - they will be released during session cleanup.
comment|// The read will have READ_COMMITTED level semantics.
try|try
block|{
name|driver
operator|.
name|lockAndRespond
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandProcessorResponse
name|cpr1
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Failed to acquire locks"
argument_list|,
name|cpr1
argument_list|)
throw|;
block|}
comment|// Attach the resources to the session cleanup.
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|addCleanupItem
argument_list|(
name|driverCleanup
argument_list|)
expr_stmt|;
name|needsCleanup
operator|=
literal|false
expr_stmt|;
block|}
comment|// Pass the ValidTxnList and ValidTxnWriteIdList snapshot configurations corresponding to the input query
name|HiveConf
name|driverConf
init|=
name|driver
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|String
name|validTxnString
init|=
name|driverConf
operator|.
name|get
argument_list|(
name|ValidTxnList
operator|.
name|VALID_TXNS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|validTxnString
operator|!=
literal|null
condition|)
block|{
name|jc
operator|.
name|set
argument_list|(
name|ValidTxnList
operator|.
name|VALID_TXNS_KEY
argument_list|,
name|validTxnString
argument_list|)
expr_stmt|;
block|}
name|String
name|validWriteIdString
init|=
name|driverConf
operator|.
name|get
argument_list|(
name|ValidTxnWriteIdList
operator|.
name|VALID_TABLES_WRITEIDS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|validWriteIdString
operator|!=
literal|null
condition|)
block|{
assert|assert
name|validTxnString
operator|!=
literal|null
assert|;
name|jc
operator|.
name|set
argument_list|(
name|ValidTxnWriteIdList
operator|.
name|VALID_TABLES_WRITEIDS_KEY
argument_list|,
name|validWriteIdString
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PlanFragment
argument_list|(
name|tezWork
argument_list|,
name|schema
argument_list|,
name|jc
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|needsCleanup
condition|)
block|{
if|if
condition|(
name|driverCleanup
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|driverCleanup
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|err
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|driver
operator|!=
literal|null
condition|)
block|{
name|driver
operator|.
name|close
argument_list|()
expr_stmt|;
name|driver
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|InputSplit
index|[]
name|getSplits
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|int
name|numSplits
parameter_list|,
name|TezWork
name|work
parameter_list|,
name|Schema
name|schema
parameter_list|,
name|ApplicationId
name|applicationId
parameter_list|)
throws|throws
name|IOException
block|{
name|DAG
name|dag
init|=
name|DAG
operator|.
name|create
argument_list|(
name|work
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|dag
operator|.
name|setCredentials
argument_list|(
name|job
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|DagUtils
name|utils
init|=
name|DagUtils
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Context
name|ctx
init|=
operator|new
name|Context
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|MapWork
name|mapWork
init|=
operator|(
name|MapWork
operator|)
name|work
operator|.
name|getAllWork
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// bunch of things get setup in the context based on conf but we need only the MR tmp directory
comment|// for the following method.
name|JobConf
name|wxConf
init|=
name|utils
operator|.
name|initializeVertexConf
argument_list|(
name|job
argument_list|,
name|ctx
argument_list|,
name|mapWork
argument_list|)
decl_stmt|;
comment|// TODO: should we also whitelist input formats here? from mapred.input.format.class
name|Path
name|scratchDir
init|=
name|utils
operator|.
name|createTezDir
argument_list|(
name|ctx
operator|.
name|getMRScratchDir
argument_list|()
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|scratchDir
operator|.
name|getFileSystem
argument_list|(
name|job
argument_list|)
decl_stmt|;
try|try
block|{
name|LocalResource
name|appJarLr
init|=
name|createJarLocalResource
argument_list|(
name|utils
operator|.
name|getExecJarPathLocal
argument_list|(
name|ctx
operator|.
name|getConf
argument_list|()
argument_list|)
argument_list|,
name|utils
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|LlapCoordinator
name|coordinator
init|=
name|LlapCoordinator
operator|.
name|getInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|coordinator
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"LLAP coordinator is not initialized; must be running in HS2 with "
operator|+
name|ConfVars
operator|.
name|LLAP_HS2_ENABLE_COORDINATOR
operator|.
name|varname
operator|+
literal|" enabled"
argument_list|)
throw|;
block|}
comment|// Update the queryId to use the generated applicationId. See comment below about
comment|// why this is done.
name|HiveConf
operator|.
name|setVar
argument_list|(
name|wxConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|,
name|applicationId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Vertex
name|wx
init|=
name|utils
operator|.
name|createVertex
argument_list|(
name|wxConf
argument_list|,
name|mapWork
argument_list|,
name|scratchDir
argument_list|,
name|fs
argument_list|,
name|ctx
argument_list|,
literal|false
argument_list|,
name|work
argument_list|,
name|work
operator|.
name|getVertexType
argument_list|(
name|mapWork
argument_list|)
argument_list|,
name|DagUtils
operator|.
name|createTezLrMap
argument_list|(
name|appJarLr
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|vertexName
init|=
name|wx
operator|.
name|getName
argument_list|()
decl_stmt|;
name|dag
operator|.
name|addVertex
argument_list|(
name|wx
argument_list|)
expr_stmt|;
name|utils
operator|.
name|addCredentials
argument_list|(
name|mapWork
argument_list|,
name|dag
argument_list|)
expr_stmt|;
comment|// we have the dag now proceed to get the splits:
name|Preconditions
operator|.
name|checkState
argument_list|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|wxConf
argument_list|,
name|ConfVars
operator|.
name|HIVE_TEZ_GENERATE_CONSISTENT_SPLITS
argument_list|)
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|wxConf
argument_list|,
name|ConfVars
operator|.
name|LLAP_CLIENT_CONSISTENT_SPLITS
argument_list|)
argument_list|)
expr_stmt|;
name|HiveSplitGenerator
name|splitGenerator
init|=
operator|new
name|HiveSplitGenerator
argument_list|(
name|wxConf
argument_list|,
name|mapWork
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|eventList
init|=
name|splitGenerator
operator|.
name|initialize
argument_list|()
decl_stmt|;
name|InputSplit
index|[]
name|result
init|=
operator|new
name|InputSplit
index|[
name|eventList
operator|.
name|size
argument_list|()
operator|-
literal|1
index|]
decl_stmt|;
name|InputConfigureVertexTasksEvent
name|configureEvent
init|=
operator|(
name|InputConfigureVertexTasksEvent
operator|)
name|eventList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TaskLocationHint
argument_list|>
name|hints
init|=
name|configureEvent
operator|.
name|getLocationHint
argument_list|()
operator|.
name|getTaskLocationHints
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|hints
operator|.
name|size
argument_list|()
operator|==
name|eventList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NumEvents="
operator|+
name|eventList
operator|.
name|size
argument_list|()
operator|+
literal|", NumSplits="
operator|+
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// This assumes LLAP cluster owner is always the HS2 user.
name|String
name|llapUser
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|String
name|queryUser
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|tokenBytes
init|=
literal|null
decl_stmt|;
name|LlapSigner
name|signer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|signer
operator|=
name|coordinator
operator|.
name|getLlapSigner
argument_list|(
name|job
argument_list|)
expr_stmt|;
comment|// 1. Generate the token for query user (applies to all splits).
name|queryUser
operator|=
name|SessionState
operator|.
name|getUserFromAuthenticator
argument_list|()
expr_stmt|;
if|if
condition|(
name|queryUser
operator|==
literal|null
condition|)
block|{
name|queryUser
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot determine the session user; using "
operator|+
name|queryUser
operator|+
literal|" instead"
argument_list|)
expr_stmt|;
block|}
name|LlapTokenLocalClient
name|tokenClient
init|=
name|coordinator
operator|.
name|getLocalTokenClient
argument_list|(
name|job
argument_list|,
name|llapUser
argument_list|)
decl_stmt|;
comment|// We put the query user, not LLAP user, into the message and token.
name|Token
argument_list|<
name|LlapTokenIdentifier
argument_list|>
name|token
init|=
name|tokenClient
operator|.
name|createToken
argument_list|(
name|applicationId
operator|.
name|toString
argument_list|()
argument_list|,
name|queryUser
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created the token for remote user: {}"
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|bos
operator|.
name|reset
argument_list|()
expr_stmt|;
name|token
operator|.
name|write
argument_list|(
name|dos
argument_list|)
expr_stmt|;
name|tokenBytes
operator|=
name|bos
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|queryUser
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
comment|// Generate umbilical token (applies to all splits)
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|umbilicalToken
init|=
name|JobTokenCreator
operator|.
name|createJobToken
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of splits: "
operator|+
operator|(
name|eventList
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|SignedMessage
name|signedSvs
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|eventList
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|TaskSpec
name|taskSpec
init|=
operator|new
name|TaskSpecBuilder
argument_list|()
operator|.
name|constructTaskSpec
argument_list|(
name|dag
argument_list|,
name|vertexName
argument_list|,
name|eventList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|applicationId
argument_list|,
name|i
argument_list|)
decl_stmt|;
comment|// 2. Generate the vertex/submit information for all events.
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|// The queryId could either be picked up from the current request being processed, or
comment|// generated. The current request isn't exactly correct since the query is 'done' once we
comment|// return the results. Generating a new one has the added benefit of working once this
comment|// is moved out of a UDTF into a proper API.
comment|// Setting this to the generated AppId which is unique.
comment|// Despite the differences in TaskSpec, the vertex spec should be the same.
name|signedSvs
operator|=
name|createSignedVertexSpec
argument_list|(
name|signer
argument_list|,
name|taskSpec
argument_list|,
name|applicationId
argument_list|,
name|queryUser
argument_list|,
name|applicationId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SubmitWorkInfo
name|submitWorkInfo
init|=
operator|new
name|SubmitWorkInfo
argument_list|(
name|applicationId
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|taskSpec
operator|.
name|getVertexParallelism
argument_list|()
argument_list|,
name|signedSvs
operator|.
name|message
argument_list|,
name|signedSvs
operator|.
name|signature
argument_list|,
name|umbilicalToken
argument_list|)
decl_stmt|;
name|byte
index|[]
name|submitWorkBytes
init|=
name|SubmitWorkInfo
operator|.
name|toBytes
argument_list|(
name|submitWorkInfo
argument_list|)
decl_stmt|;
comment|// 3. Generate input event.
name|SignedMessage
name|eventBytes
init|=
name|makeEventBytes
argument_list|(
name|wx
argument_list|,
name|vertexName
argument_list|,
name|eventList
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
name|signer
argument_list|)
decl_stmt|;
comment|// 4. Make location hints.
name|SplitLocationInfo
index|[]
name|locations
init|=
name|makeLocationHints
argument_list|(
name|hints
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|result
index|[
name|i
index|]
operator|=
operator|new
name|LlapInputSplit
argument_list|(
name|i
argument_list|,
name|submitWorkBytes
argument_list|,
name|eventBytes
operator|.
name|message
argument_list|,
name|eventBytes
operator|.
name|signature
argument_list|,
name|locations
argument_list|,
name|schema
argument_list|,
name|llapUser
argument_list|,
name|tokenBytes
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|DriverCleanup
implements|implements
name|Closeable
block|{
specifier|private
specifier|final
name|Driver
name|driver
decl_stmt|;
specifier|private
specifier|final
name|HiveTxnManager
name|txnManager
decl_stmt|;
specifier|private
specifier|final
name|String
name|applicationId
decl_stmt|;
specifier|public
name|DriverCleanup
parameter_list|(
name|Driver
name|driver
parameter_list|,
name|HiveTxnManager
name|txnManager
parameter_list|,
name|String
name|applicationId
parameter_list|)
block|{
name|this
operator|.
name|driver
operator|=
name|driver
expr_stmt|;
name|this
operator|.
name|txnManager
operator|=
name|txnManager
expr_stmt|;
name|this
operator|.
name|applicationId
operator|=
name|applicationId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"DriverCleanup for LLAP splits: {}"
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
name|driver
operator|.
name|releaseLocksAndCommitOrRollback
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|driver
operator|.
name|close
argument_list|()
expr_stmt|;
name|driver
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|txnManager
operator|.
name|closeTxnManager
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error closing driver resources"
argument_list|,
name|err
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|err
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DriverCleanup for LLAP splits: "
operator|+
name|applicationId
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|JobTokenCreator
block|{
specifier|private
specifier|static
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|createJobToken
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|)
block|{
name|String
name|tokenIdentifier
init|=
name|applicationId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|JobTokenIdentifier
name|identifier
init|=
operator|new
name|JobTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
name|tokenIdentifier
argument_list|)
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|sessionToken
init|=
operator|new
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
argument_list|(
name|identifier
argument_list|,
operator|new
name|JobTokenSecretManager
argument_list|()
argument_list|)
decl_stmt|;
name|sessionToken
operator|.
name|setService
argument_list|(
name|identifier
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sessionToken
return|;
block|}
block|}
specifier|private
name|SplitLocationInfo
index|[]
name|makeLocationHints
parameter_list|(
name|TaskLocationHint
name|hint
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|hosts
init|=
name|hint
operator|.
name|getHosts
argument_list|()
decl_stmt|;
if|if
condition|(
name|hosts
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No hosts"
argument_list|)
expr_stmt|;
return|return
operator|new
name|SplitLocationInfo
index|[
literal|0
index|]
return|;
block|}
if|if
condition|(
name|hosts
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Bad # of locations: "
operator|+
name|hosts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SplitLocationInfo
index|[]
name|locations
init|=
operator|new
name|SplitLocationInfo
index|[
name|hosts
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|host
range|:
name|hosts
control|)
block|{
name|locations
index|[
name|j
operator|++
index|]
operator|=
operator|new
name|SplitLocationInfo
argument_list|(
name|host
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|locations
return|;
block|}
specifier|private
name|SignedMessage
name|makeEventBytes
parameter_list|(
name|Vertex
name|wx
parameter_list|,
name|String
name|vertexName
parameter_list|,
name|Event
name|event
parameter_list|,
name|LlapSigner
name|signer
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|event
operator|instanceof
name|InputDataInformationEvent
assert|;
name|List
argument_list|<
name|RootInputLeafOutput
argument_list|<
name|InputDescriptor
argument_list|,
name|InputInitializerDescriptor
argument_list|>
argument_list|>
name|inputs
init|=
name|TaskSpecBuilder
operator|.
name|getVertexInputs
argument_list|(
name|wx
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|inputs
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Signable
name|signableNte
init|=
name|NotTezEventHelper
operator|.
name|createSignableNotTezEvent
argument_list|(
operator|(
name|InputDataInformationEvent
operator|)
name|event
argument_list|,
name|vertexName
argument_list|,
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|signer
operator|!=
literal|null
condition|)
block|{
return|return
name|signer
operator|.
name|serializeAndSign
argument_list|(
name|signableNte
argument_list|)
return|;
block|}
else|else
block|{
name|SignedMessage
name|sm
init|=
operator|new
name|SignedMessage
argument_list|()
decl_stmt|;
name|sm
operator|.
name|message
operator|=
name|signableNte
operator|.
name|serialize
argument_list|()
expr_stmt|;
return|return
name|sm
return|;
block|}
block|}
specifier|private
name|SignedMessage
name|createSignedVertexSpec
parameter_list|(
name|LlapSigner
name|signer
parameter_list|,
name|TaskSpec
name|taskSpec
parameter_list|,
name|ApplicationId
name|applicationId
parameter_list|,
name|String
name|queryUser
parameter_list|,
name|String
name|queryIdString
parameter_list|)
throws|throws
name|IOException
block|{
name|QueryIdentifierProto
name|queryIdentifierProto
init|=
name|QueryIdentifierProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setApplicationIdString
argument_list|(
name|applicationId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setDagIndex
argument_list|(
name|taskSpec
operator|.
name|getDagIdentifier
argument_list|()
argument_list|)
operator|.
name|setAppAttemptNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|SignableVertexSpec
operator|.
name|Builder
name|svsb
init|=
name|Converters
operator|.
name|constructSignableVertexSpec
argument_list|(
name|taskSpec
argument_list|,
name|queryIdentifierProto
argument_list|,
name|applicationId
operator|.
name|toString
argument_list|()
argument_list|,
name|queryUser
argument_list|,
name|queryIdString
argument_list|)
decl_stmt|;
name|svsb
operator|.
name|setIsExternalSubmission
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|signer
operator|==
literal|null
condition|)
block|{
name|SignedMessage
name|result
init|=
operator|new
name|SignedMessage
argument_list|()
decl_stmt|;
name|result
operator|.
name|message
operator|=
name|serializeVertexSpec
argument_list|(
name|svsb
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
return|return
name|signer
operator|.
name|serializeAndSign
argument_list|(
operator|new
name|Signable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setSignInfo
parameter_list|(
name|int
name|masterKeyId
parameter_list|)
block|{
name|svsb
operator|.
name|setSignatureKeyId
argument_list|(
name|masterKeyId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|serialize
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|serializeVertexSpec
argument_list|(
name|svsb
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|serializeVertexSpec
parameter_list|(
name|SignableVertexSpec
operator|.
name|Builder
name|svsb
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|svsb
operator|.
name|build
argument_list|()
operator|.
name|writeTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
return|return
name|os
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**    * Returns a local resource representing a jar. This resource will be used to    * execute the plan on the cluster.    *    * @param localJarPath    *          Local path to the jar to be localized.    * @return LocalResource corresponding to the localized hive exec resource.    * @throws IOException    *           when any file system related call fails.    * @throws LoginException    *           when we are unable to determine the user.    * @throws URISyntaxException    *           when current jar location cannot be determined.    */
specifier|private
name|LocalResource
name|createJarLocalResource
parameter_list|(
name|String
name|localJarPath
parameter_list|,
name|DagUtils
name|utils
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|LoginException
throws|,
name|IllegalArgumentException
throws|,
name|FileNotFoundException
block|{
name|FileStatus
name|destDirStatus
init|=
name|utils
operator|.
name|getHiveJarDirectory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
assert|assert
name|destDirStatus
operator|!=
literal|null
assert|;
name|Path
name|destDirPath
init|=
name|destDirStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Path
name|localFile
init|=
operator|new
name|Path
argument_list|(
name|localJarPath
argument_list|)
decl_stmt|;
name|String
name|sha
init|=
name|getSha
argument_list|(
name|localFile
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
name|destFileName
init|=
name|localFile
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// Now, try to find the file based on SHA and name. Currently we require
comment|// exact name match.
comment|// We could also allow cutting off versions and other stuff provided that
comment|// SHA matches...
name|destFileName
operator|=
name|FilenameUtils
operator|.
name|removeExtension
argument_list|(
name|destFileName
argument_list|)
operator|+
literal|"-"
operator|+
name|sha
operator|+
name|FilenameUtils
operator|.
name|EXTENSION_SEPARATOR
operator|+
name|FilenameUtils
operator|.
name|getExtension
argument_list|(
name|destFileName
argument_list|)
expr_stmt|;
comment|// TODO: if this method is ever called on more than one jar, getting the dir
comment|// and the
comment|// list need to be refactored out to be done only once.
name|Path
name|destFile
init|=
operator|new
name|Path
argument_list|(
name|destDirPath
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|destFileName
argument_list|)
decl_stmt|;
return|return
name|utils
operator|.
name|localizeResource
argument_list|(
name|localFile
argument_list|,
name|destFile
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|conf
argument_list|)
return|;
block|}
specifier|private
name|String
name|getSha
parameter_list|(
name|Path
name|localFile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|IllegalArgumentException
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|is
operator|=
name|localFs
operator|.
name|open
argument_list|(
name|localFile
argument_list|)
expr_stmt|;
return|return
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|is
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Schema
name|convertSchema
parameter_list|(
name|Object
name|obj
parameter_list|)
throws|throws
name|HiveException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Schema
name|schema
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Schema
operator|)
name|obj
decl_stmt|;
name|List
argument_list|<
name|FieldDesc
argument_list|>
name|colDescs
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|schema
operator|.
name|getFieldSchemas
argument_list|()
control|)
block|{
name|String
name|colName
init|=
name|fs
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|typeString
init|=
name|fs
operator|.
name|getType
argument_list|()
decl_stmt|;
name|colDescs
operator|.
name|add
argument_list|(
operator|new
name|FieldDesc
argument_list|(
name|colName
argument_list|,
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|typeString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Schema
name|Schema
init|=
operator|new
name|Schema
argument_list|(
name|colDescs
argument_list|)
decl_stmt|;
return|return
name|Schema
return|;
block|}
specifier|private
name|String
name|getTempTableStorageFormatString
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|String
name|formatString
init|=
literal|""
decl_stmt|;
name|String
name|storageFormatOption
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_EXTERNAL_SPLITS_TEMP_TABLE_STORAGE_FORMAT
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|storageFormatOption
operator|.
name|equals
argument_list|(
literal|"text"
argument_list|)
condition|)
block|{
name|formatString
operator|=
literal|"stored as textfile"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|storageFormatOption
operator|.
name|equals
argument_list|(
literal|"orc"
argument_list|)
condition|)
block|{
name|formatString
operator|=
literal|"stored as orc"
expr_stmt|;
block|}
return|return
name|formatString
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|HiveException
block|{   }
block|}
end_class

end_unit

