begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|ppr
operator|.
name|PartitionPruner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ImportSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PrunedPartitionList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|HiveAuthorizationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_comment
comment|/**  * Command authorization, old type.  */
end_comment

begin_class
specifier|final
class|class
name|CommandAuthorizerV1
block|{
specifier|private
name|CommandAuthorizerV1
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"CommandAuthorizerV1 should not be instantiated"
argument_list|)
throw|;
block|}
specifier|static
name|void
name|doAuthorization
parameter_list|(
name|HiveOperation
name|op
parameter_list|,
name|BaseSemanticAnalyzer
name|sem
parameter_list|,
name|SessionState
name|ss
parameter_list|,
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Operation should not be null"
argument_list|)
throw|;
block|}
name|Hive
name|db
init|=
name|sem
operator|.
name|getDb
argument_list|()
decl_stmt|;
name|HiveAuthorizationProvider
name|authorizer
init|=
name|ss
operator|.
name|getAuthorizer
argument_list|()
decl_stmt|;
name|authorizeOperation
argument_list|(
name|op
argument_list|,
name|sem
argument_list|,
name|db
argument_list|,
name|authorizer
argument_list|)
expr_stmt|;
name|authorizeOutputs
argument_list|(
name|op
argument_list|,
name|outputs
argument_list|,
name|db
argument_list|,
name|authorizer
argument_list|)
expr_stmt|;
name|authorizeInputs
argument_list|(
name|op
argument_list|,
name|sem
argument_list|,
name|inputs
argument_list|,
name|authorizer
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|authorizeOperation
parameter_list|(
name|HiveOperation
name|op
parameter_list|,
name|BaseSemanticAnalyzer
name|sem
parameter_list|,
name|Hive
name|db
parameter_list|,
name|HiveAuthorizationProvider
name|authorizer
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|CREATEDATABASE
argument_list|)
condition|)
block|{
name|authorizer
operator|.
name|authorize
argument_list|(
name|op
operator|.
name|getInputRequiredPrivileges
argument_list|()
argument_list|,
name|op
operator|.
name|getOutputRequiredPrivileges
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|CREATETABLE_AS_SELECT
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|CREATETABLE
argument_list|)
condition|)
block|{
name|authorizer
operator|.
name|authorize
argument_list|(
name|db
operator|.
name|getDatabase
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentDatabase
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|HiveOperation
operator|.
name|CREATETABLE_AS_SELECT
operator|.
name|getOutputRequiredPrivileges
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|IMPORT
argument_list|)
condition|)
block|{
name|ImportSemanticAnalyzer
name|isa
init|=
operator|(
name|ImportSemanticAnalyzer
operator|)
name|sem
decl_stmt|;
if|if
condition|(
operator|!
name|isa
operator|.
name|existsTable
argument_list|()
condition|)
block|{
name|authorizer
operator|.
name|authorize
argument_list|(
name|db
operator|.
name|getDatabase
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentDatabase
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|HiveOperation
operator|.
name|CREATETABLE_AS_SELECT
operator|.
name|getOutputRequiredPrivileges
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|authorizeOutputs
parameter_list|(
name|HiveOperation
name|op
parameter_list|,
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|,
name|Hive
name|db
parameter_list|,
name|HiveAuthorizationProvider
name|authorizer
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|outputs
argument_list|)
condition|)
block|{
return|return;
block|}
for|for
control|(
name|WriteEntity
name|write
range|:
name|outputs
control|)
block|{
if|if
condition|(
name|write
operator|.
name|isDummy
argument_list|()
operator|||
name|write
operator|.
name|isPathType
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|write
operator|.
name|getType
argument_list|()
operator|==
name|Entity
operator|.
name|Type
operator|.
name|DATABASE
condition|)
block|{
if|if
condition|(
operator|!
name|op
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|IMPORT
argument_list|)
condition|)
block|{
name|authorizer
operator|.
name|authorize
argument_list|(
name|write
operator|.
name|getDatabase
argument_list|()
argument_list|,
literal|null
argument_list|,
name|op
operator|.
name|getOutputRequiredPrivileges
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// We skip DB check for import here because we already handle it above as a CTAS check.
continue|continue;
block|}
if|if
condition|(
name|write
operator|.
name|getType
argument_list|()
operator|==
name|WriteEntity
operator|.
name|Type
operator|.
name|PARTITION
condition|)
block|{
name|Partition
name|part
init|=
name|db
operator|.
name|getPartition
argument_list|(
name|write
operator|.
name|getTable
argument_list|()
argument_list|,
name|write
operator|.
name|getPartition
argument_list|()
operator|.
name|getSpec
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|authorizer
operator|.
name|authorize
argument_list|(
name|write
operator|.
name|getPartition
argument_list|()
argument_list|,
literal|null
argument_list|,
name|op
operator|.
name|getOutputRequiredPrivileges
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
name|write
operator|.
name|getTable
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|authorizer
operator|.
name|authorize
argument_list|(
name|write
operator|.
name|getTable
argument_list|()
argument_list|,
literal|null
argument_list|,
name|op
operator|.
name|getOutputRequiredPrivileges
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|authorizeInputs
parameter_list|(
name|HiveOperation
name|op
parameter_list|,
name|BaseSemanticAnalyzer
name|sem
parameter_list|,
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|HiveAuthorizationProvider
name|authorizer
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|inputs
argument_list|)
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tableUsePartLevelAuth
init|=
name|getTableUsePartLevelAuth
argument_list|(
name|inputs
argument_list|)
decl_stmt|;
comment|// column authorization is checked through table scan operators.
name|Map
argument_list|<
name|Table
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tab2Cols
init|=
operator|new
name|HashMap
argument_list|<
name|Table
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Partition
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|part2Cols
init|=
operator|new
name|HashMap
argument_list|<
name|Partition
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|getTablePartitionUsedColumns
argument_list|(
name|op
argument_list|,
name|sem
argument_list|,
name|tab2Cols
argument_list|,
name|part2Cols
argument_list|,
name|tableUsePartLevelAuth
argument_list|)
expr_stmt|;
comment|// cache the results for table authorization
name|Set
argument_list|<
name|String
argument_list|>
name|tableAuthChecked
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ReadEntity
name|read
range|:
name|inputs
control|)
block|{
comment|// if read is not direct, we do not need to check its autho.
if|if
condition|(
name|read
operator|.
name|isDummy
argument_list|()
operator|||
name|read
operator|.
name|isPathType
argument_list|()
operator|||
operator|!
name|read
operator|.
name|isDirect
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|read
operator|.
name|getType
argument_list|()
operator|==
name|Entity
operator|.
name|Type
operator|.
name|DATABASE
condition|)
block|{
name|authorizer
operator|.
name|authorize
argument_list|(
name|read
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|op
operator|.
name|getInputRequiredPrivileges
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Table
name|tbl
init|=
name|read
operator|.
name|getTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|tbl
operator|.
name|isView
argument_list|()
operator|&&
name|sem
operator|instanceof
name|SemanticAnalyzer
condition|)
block|{
name|tab2Cols
operator|.
name|put
argument_list|(
name|tbl
argument_list|,
name|sem
operator|.
name|getColumnAccessInfo
argument_list|()
operator|.
name|getTableToColumnAccessMap
argument_list|()
operator|.
name|get
argument_list|(
name|tbl
operator|.
name|getCompleteName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|read
operator|.
name|getPartition
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Partition
name|partition
init|=
name|read
operator|.
name|getPartition
argument_list|()
decl_stmt|;
name|tbl
operator|=
name|partition
operator|.
name|getTable
argument_list|()
expr_stmt|;
comment|// use partition level authorization
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|tableUsePartLevelAuth
operator|.
name|get
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|cols
init|=
name|part2Cols
operator|.
name|get
argument_list|(
name|partition
argument_list|)
decl_stmt|;
if|if
condition|(
name|cols
operator|!=
literal|null
operator|&&
name|cols
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|authorizer
operator|.
name|authorize
argument_list|(
name|partition
operator|.
name|getTable
argument_list|()
argument_list|,
name|partition
argument_list|,
name|cols
argument_list|,
name|op
operator|.
name|getInputRequiredPrivileges
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authorizer
operator|.
name|authorize
argument_list|(
name|partition
argument_list|,
name|op
operator|.
name|getInputRequiredPrivileges
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
block|}
name|authorizeTable
argument_list|(
name|op
argument_list|,
name|authorizer
argument_list|,
name|tableUsePartLevelAuth
argument_list|,
name|tab2Cols
argument_list|,
name|tableAuthChecked
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|getTableUsePartLevelAuth
parameter_list|(
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|)
block|{
comment|// determine if partition level privileges should be checked for input tables
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tableUsePartLevelAuth
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ReadEntity
name|read
range|:
name|inputs
control|)
block|{
if|if
condition|(
name|read
operator|.
name|isDummy
argument_list|()
operator|||
name|read
operator|.
name|isPathType
argument_list|()
operator|||
name|read
operator|.
name|getType
argument_list|()
operator|==
name|Entity
operator|.
name|Type
operator|.
name|DATABASE
condition|)
block|{
continue|continue;
block|}
name|Table
name|tbl
init|=
name|read
operator|.
name|getTable
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|read
operator|.
name|getPartition
argument_list|()
operator|!=
literal|null
operator|)
operator|||
operator|(
name|tbl
operator|!=
literal|null
operator|&&
name|tbl
operator|.
name|isPartitioned
argument_list|()
operator|)
condition|)
block|{
name|String
name|tblName
init|=
name|tbl
operator|.
name|getTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableUsePartLevelAuth
operator|.
name|get
argument_list|(
name|tblName
argument_list|)
operator|==
literal|null
condition|)
block|{
name|boolean
name|usePartLevelPriv
init|=
operator|(
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"PARTITION_LEVEL_PRIVILEGE"
argument_list|)
operator|!=
literal|null
operator|&&
operator|(
literal|"TRUE"
operator|.
name|equalsIgnoreCase
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"PARTITION_LEVEL_PRIVILEGE"
argument_list|)
argument_list|)
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|usePartLevelPriv
condition|)
block|{
name|tableUsePartLevelAuth
operator|.
name|put
argument_list|(
name|tblName
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tableUsePartLevelAuth
operator|.
name|put
argument_list|(
name|tblName
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|tableUsePartLevelAuth
return|;
block|}
specifier|private
specifier|static
name|void
name|getTablePartitionUsedColumns
parameter_list|(
name|HiveOperation
name|op
parameter_list|,
name|BaseSemanticAnalyzer
name|sem
parameter_list|,
name|Map
argument_list|<
name|Table
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tab2Cols
parameter_list|,
name|Map
argument_list|<
name|Partition
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|part2Cols
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tableUsePartLevelAuth
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// for a select or create-as-select query, populate the partition to column (par2Cols) or
comment|// table to columns mapping (tab2Cols)
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|CREATETABLE_AS_SELECT
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|QUERY
argument_list|)
condition|)
block|{
name|SemanticAnalyzer
name|querySem
init|=
operator|(
name|SemanticAnalyzer
operator|)
name|sem
decl_stmt|;
name|ParseContext
name|parseCtx
init|=
name|querySem
operator|.
name|getParseContext
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|TableScanOperator
argument_list|>
name|topOpMap
range|:
name|querySem
operator|.
name|getParseContext
argument_list|()
operator|.
name|getTopOps
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TableScanOperator
name|tableScanOp
init|=
name|topOpMap
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tableScanOp
operator|.
name|isInsideView
argument_list|()
condition|)
block|{
name|Table
name|tbl
init|=
name|tableScanOp
operator|.
name|getConf
argument_list|()
operator|.
name|getTableMetadata
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|id
range|:
name|tableScanOp
operator|.
name|getNeededColumnIDs
argument_list|()
control|)
block|{
name|cols
operator|.
name|add
argument_list|(
name|tbl
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// map may not contain all sources, since input list may have been optimized out
comment|// or non-existent tho such sources may still be referenced by the TableScanOperator
comment|// if it's null then the partition probably doesn't exist so let's use table permission
if|if
condition|(
name|tbl
operator|.
name|isPartitioned
argument_list|()
operator|&&
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|tableUsePartLevelAuth
operator|.
name|get
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|aliasId
init|=
name|topOpMap
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|PrunedPartitionList
name|partsList
init|=
name|PartitionPruner
operator|.
name|prune
argument_list|(
name|tableScanOp
argument_list|,
name|parseCtx
argument_list|,
name|aliasId
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|partsList
operator|.
name|getPartitions
argument_list|()
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|existingCols
init|=
name|part2Cols
operator|.
name|get
argument_list|(
name|part
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingCols
operator|==
literal|null
condition|)
block|{
name|existingCols
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|existingCols
operator|.
name|addAll
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|part2Cols
operator|.
name|put
argument_list|(
name|part
argument_list|,
name|existingCols
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|existingCols
init|=
name|tab2Cols
operator|.
name|get
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingCols
operator|==
literal|null
condition|)
block|{
name|existingCols
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|existingCols
operator|.
name|addAll
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|tab2Cols
operator|.
name|put
argument_list|(
name|tbl
argument_list|,
name|existingCols
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|authorizeTable
parameter_list|(
name|HiveOperation
name|op
parameter_list|,
name|HiveAuthorizationProvider
name|authorizer
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tableUsePartLevelAuth
parameter_list|,
name|Map
argument_list|<
name|Table
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tab2Cols
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|tableAuthChecked
parameter_list|,
name|Table
name|tbl
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// if we reach here, it means it needs to do a table authorization check, and the table authorization may
comment|// have already happened because of other partitions
if|if
condition|(
name|tbl
operator|!=
literal|null
operator|&&
operator|!
name|tableAuthChecked
operator|.
name|contains
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|&&
operator|!
operator|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|tableUsePartLevelAuth
operator|.
name|get
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|cols
init|=
name|tab2Cols
operator|.
name|get
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
if|if
condition|(
name|cols
operator|!=
literal|null
operator|&&
name|cols
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|authorizer
operator|.
name|authorize
argument_list|(
name|tbl
argument_list|,
literal|null
argument_list|,
name|cols
argument_list|,
name|op
operator|.
name|getInputRequiredPrivileges
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authorizer
operator|.
name|authorize
argument_list|(
name|tbl
argument_list|,
name|op
operator|.
name|getInputRequiredPrivileges
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|tableAuthChecked
operator|.
name|add
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

