begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Decimal128
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_comment
comment|/**  * Utility functions for vector operations on decimal values.  */
end_comment

begin_class
specifier|public
class|class
name|DecimalUtil
block|{
comment|// Addition with overflow check. Overflow produces NULL output.
specifier|public
specifier|static
name|void
name|addChecked
parameter_list|(
name|int
name|i
parameter_list|,
name|Decimal128
name|left
parameter_list|,
name|Decimal128
name|right
parameter_list|,
name|DecimalColumnVector
name|outputColVector
parameter_list|)
block|{
try|try
block|{
name|Decimal128
operator|.
name|add
argument_list|(
name|left
argument_list|,
name|right
argument_list|,
name|outputColVector
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|outputColVector
operator|.
name|scale
argument_list|)
expr_stmt|;
name|outputColVector
operator|.
name|vector
index|[
name|i
index|]
operator|.
name|checkPrecisionOverflow
argument_list|(
name|outputColVector
operator|.
name|precision
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
comment|// catch on overflow
name|outputColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|outputColVector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// Subtraction with overflow check. Overflow produces NULL output.
specifier|public
specifier|static
name|void
name|subtractChecked
parameter_list|(
name|int
name|i
parameter_list|,
name|Decimal128
name|left
parameter_list|,
name|Decimal128
name|right
parameter_list|,
name|DecimalColumnVector
name|outputColVector
parameter_list|)
block|{
try|try
block|{
name|Decimal128
operator|.
name|subtract
argument_list|(
name|left
argument_list|,
name|right
argument_list|,
name|outputColVector
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|outputColVector
operator|.
name|scale
argument_list|)
expr_stmt|;
name|outputColVector
operator|.
name|vector
index|[
name|i
index|]
operator|.
name|checkPrecisionOverflow
argument_list|(
name|outputColVector
operator|.
name|precision
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
comment|// catch on overflow
name|outputColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|outputColVector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// Multiplication with overflow check. Overflow produces NULL output.
specifier|public
specifier|static
name|void
name|multiplyChecked
parameter_list|(
name|int
name|i
parameter_list|,
name|Decimal128
name|left
parameter_list|,
name|Decimal128
name|right
parameter_list|,
name|DecimalColumnVector
name|outputColVector
parameter_list|)
block|{
try|try
block|{
name|Decimal128
operator|.
name|multiply
argument_list|(
name|left
argument_list|,
name|right
argument_list|,
name|outputColVector
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|outputColVector
operator|.
name|scale
argument_list|)
expr_stmt|;
name|outputColVector
operator|.
name|vector
index|[
name|i
index|]
operator|.
name|checkPrecisionOverflow
argument_list|(
name|outputColVector
operator|.
name|precision
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
comment|// catch on overflow
name|outputColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|outputColVector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// Division with overflow/zero-divide check. Error produces NULL output.
comment|// Remainder argument is necessary to match up with the Decimal128.divide() interface.
comment|// It will be discarded so just pass in a dummy argument.
specifier|public
specifier|static
name|void
name|divideChecked
parameter_list|(
name|int
name|i
parameter_list|,
name|Decimal128
name|left
parameter_list|,
name|Decimal128
name|right
parameter_list|,
name|DecimalColumnVector
name|outputColVector
parameter_list|,
name|Decimal128
name|remainder
parameter_list|)
block|{
try|try
block|{
name|Decimal128
operator|.
name|divide
argument_list|(
name|left
argument_list|,
name|right
argument_list|,
name|outputColVector
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|remainder
argument_list|,
name|outputColVector
operator|.
name|scale
argument_list|)
expr_stmt|;
name|outputColVector
operator|.
name|vector
index|[
name|i
index|]
operator|.
name|checkPrecisionOverflow
argument_list|(
name|outputColVector
operator|.
name|precision
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
comment|// catch on error
name|outputColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|outputColVector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// Modulo operator with overflow/zero-divide check.
comment|// Quotient argument is necessary to match up with Decimal128.divide() interface.
comment|// It will be discarded so just pass in a dummy argument.
specifier|public
specifier|static
name|void
name|moduloChecked
parameter_list|(
name|int
name|i
parameter_list|,
name|Decimal128
name|left
parameter_list|,
name|Decimal128
name|right
parameter_list|,
name|DecimalColumnVector
name|outputColVector
parameter_list|,
name|Decimal128
name|quotient
parameter_list|)
block|{
try|try
block|{
name|Decimal128
operator|.
name|divide
argument_list|(
name|left
argument_list|,
name|right
argument_list|,
name|quotient
argument_list|,
name|outputColVector
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|outputColVector
operator|.
name|scale
argument_list|)
expr_stmt|;
name|outputColVector
operator|.
name|vector
index|[
name|i
index|]
operator|.
name|checkPrecisionOverflow
argument_list|(
name|outputColVector
operator|.
name|precision
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
comment|// catch on error
name|outputColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|outputColVector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

