begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultGraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|RuleRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticAnalyzer
operator|.
name|GenericUDAFInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AggregationDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|GroupByDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableScanDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
operator|.
name|Mode
import|;
end_import

begin_comment
comment|/**  * Queries of form : select max(c), count(distinct c) from T; generates a plan  * of form TS-&gt;mGBy-&gt;RS-&gt;rGBy-&gt;FS This plan suffers from a problem that vertex  * containing rGBy-&gt;FS necessarily need to have 1 task. This limitation results  * in slow execution because that task gets all the data. This optimization if  * successful will rewrite above plan to mGby1-rs1-mGby2-mGby3-rs2-rGby1 This  * introduces extra vertex of mGby2-mGby3-rs2. Note this vertex can have  * multiple tasks and since we are doing aggregation, output of this must  * necessarily be smaller than its input, which results in much less data going  * in to original rGby-&gt;FS vertex, which continues to have single task. Also  * note on calcite tree we have HiveExpandDistinctAggregatesRule rule which does  * similar plan transformation but has different conditions which needs to be  * satisfied. Additionally, we don't do any costing here but this is possibly  * that this transformation may slow down query a bit since if data is small  * enough to fit in a single task of last reducer, injecting additional vertex  * in pipeline may make query slower. If this happens, users can use the  * configuration hive.optimize.countdistinct to turn it off.  */
end_comment

begin_class
specifier|public
class|class
name|CountDistinctRewriteProc
extends|extends
name|Transform
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CountDistinctRewriteProc
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|CountDistinctRewriteProc
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|ParseContext
name|transform
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
comment|// process group-by pattern
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R1"
argument_list|,
name|GroupByOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
operator|+
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
operator|+
name|GroupByOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
name|getCountDistinctProc
argument_list|(
name|pctx
argument_list|)
argument_list|)
expr_stmt|;
comment|// The dispatcher fires the processor corresponding to the closest matching
comment|// rule and passes the context along
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|getDefaultProc
argument_list|()
argument_list|,
name|opRules
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
comment|// Create a list of topop nodes
name|List
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|addAll
argument_list|(
name|pctx
operator|.
name|getTopOps
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|pctx
return|;
block|}
specifier|private
name|NodeProcessor
name|getDefaultProc
parameter_list|()
block|{
return|return
operator|new
name|NodeProcessor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
specifier|private
name|NodeProcessor
name|getCountDistinctProc
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
block|{
return|return
operator|new
name|CountDistinctProcessor
argument_list|(
name|pctx
argument_list|)
return|;
block|}
comment|/**    * CountDistinctProcessor.    *    */
specifier|public
class|class
name|CountDistinctProcessor
implements|implements
name|NodeProcessor
block|{
specifier|protected
name|ParseContext
name|pGraphContext
decl_stmt|;
specifier|public
name|CountDistinctProcessor
parameter_list|(
name|ParseContext
name|pGraphContext
parameter_list|)
block|{
name|this
operator|.
name|pGraphContext
operator|=
name|pGraphContext
expr_stmt|;
block|}
comment|// Check if we can process it or not by the index of distinct
specifier|protected
name|int
name|checkCountDistinct
parameter_list|(
name|GroupByOperator
name|mGby
parameter_list|,
name|ReduceSinkOperator
name|rs
parameter_list|,
name|GroupByOperator
name|rGby
parameter_list|)
block|{
comment|// Position of distinct column in aggregator list of map Gby before rewrite.
name|int
name|indexOfDist
init|=
operator|-
literal|1
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keys
init|=
name|mGby
operator|.
name|getConf
argument_list|()
operator|.
name|getKeys
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|mGby
operator|.
name|getConf
argument_list|()
operator|.
name|getMode
argument_list|()
operator|==
name|GroupByDesc
operator|.
name|Mode
operator|.
name|HASH
operator|&&
operator|!
name|mGby
operator|.
name|getConf
argument_list|()
operator|.
name|isGroupingSetsPresent
argument_list|()
operator|&&
name|rs
operator|.
name|getConf
argument_list|()
operator|.
name|getKeyCols
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|rs
operator|.
name|getConf
argument_list|()
operator|.
name|getPartitionCols
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|rs
operator|.
name|getConf
argument_list|()
operator|.
name|getDistinctColumnIndices
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|rGby
operator|.
name|getConf
argument_list|()
operator|.
name|getMode
argument_list|()
operator|==
name|GroupByDesc
operator|.
name|Mode
operator|.
name|MERGEPARTIAL
operator|&&
name|keys
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|rGby
operator|.
name|getConf
argument_list|()
operator|.
name|getKeys
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|mGby
operator|.
name|getConf
argument_list|()
operator|.
name|getOutputColumnNames
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|mGby
operator|.
name|getConf
argument_list|()
operator|.
name|getAggregators
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|mGby
operator|.
name|getConf
argument_list|()
operator|.
name|getAggregators
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|AggregationDesc
name|aggr
init|=
name|mGby
operator|.
name|getConf
argument_list|()
operator|.
name|getAggregators
argument_list|()
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|aggr
operator|.
name|getDistinct
argument_list|()
condition|)
block|{
if|if
condition|(
name|indexOfDist
operator|!=
operator|-
literal|1
operator|||
operator|!
name|aggr
operator|.
name|getGenericUDAFName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"count"
argument_list|)
condition|)
block|{
comment|// there are 2 or more distincts, or distinct is not on count
comment|// TODO: may be the same count(distinct key), count(distinct key)
comment|// TODO: deal with duplicate count distinct key
return|return
operator|-
literal|1
return|;
block|}
name|indexOfDist
operator|=
name|pos
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|aggr
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|aggr
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ExprNodeColumnDesc
operator|&&
name|mGby
operator|.
name|getConf
argument_list|()
operator|.
name|getKeys
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ExprNodeColumnDesc
operator|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
name|ExprNodeColumnDesc
name|agg
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|aggr
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|key
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|mGby
operator|.
name|getConf
argument_list|()
operator|.
name|getKeys
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|agg
operator|.
name|isSame
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|indexOfDist
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|// check if it is potential to trigger nullscan
if|if
condition|(
name|pGraphContext
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMETADATAONLYQUERIES
argument_list|)
condition|)
block|{
for|for
control|(
name|TableScanOperator
name|tsOp
range|:
name|pGraphContext
operator|.
name|getTopOps
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|colIDs
init|=
name|tsOp
operator|.
name|getNeededColumnIDs
argument_list|()
decl_stmt|;
name|TableScanDesc
name|desc
init|=
name|tsOp
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|boolean
name|noColNeeded
init|=
operator|(
name|colIDs
operator|==
literal|null
operator|)
operator|||
operator|(
name|colIDs
operator|.
name|isEmpty
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|noVCneeded
init|=
operator|(
name|desc
operator|==
literal|null
operator|)
operator|||
operator|(
name|desc
operator|.
name|getVirtualCols
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|desc
operator|.
name|getVirtualCols
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|isSkipHF
init|=
name|desc
operator|.
name|isNeedSkipHeaderFooters
argument_list|()
decl_stmt|;
if|if
condition|(
name|noColNeeded
operator|&&
name|noVCneeded
operator|&&
operator|!
name|isSkipHF
condition|)
block|{
comment|// it is possible that nullscan can fire, we skip this rule.
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
return|return
name|indexOfDist
return|;
block|}
comment|/*      * We will transform GB-RS-GBY to mGby1-rs1-mGby2-mGby3-rs2-rGby1      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|processGroupBy
parameter_list|(
name|GroupByOperator
name|mGby
parameter_list|,
name|ReduceSinkOperator
name|rs
parameter_list|,
name|GroupByOperator
name|rGby
parameter_list|,
name|int
name|indexOfDist
parameter_list|)
throws|throws
name|SemanticException
throws|,
name|CloneNotSupportedException
block|{
comment|// remove count(distinct) in map-side gby
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|parents
init|=
name|mGby
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|children
init|=
name|rGby
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
name|mGby
operator|.
name|removeParents
argument_list|()
expr_stmt|;
name|rs
operator|.
name|removeParents
argument_list|()
expr_stmt|;
name|rGby
operator|.
name|removeParents
argument_list|()
expr_stmt|;
name|GroupByOperator
name|mGby1
init|=
name|genMapGroupby1
argument_list|(
name|mGby
argument_list|,
name|indexOfDist
argument_list|)
decl_stmt|;
name|ReduceSinkOperator
name|rs1
init|=
name|genReducesink1
argument_list|(
name|mGby1
argument_list|,
name|rs
argument_list|,
name|indexOfDist
argument_list|)
decl_stmt|;
name|GroupByOperator
name|mGby2
init|=
name|genMapGroupby2
argument_list|(
name|rs1
argument_list|,
name|mGby
argument_list|,
name|indexOfDist
argument_list|)
decl_stmt|;
name|GroupByOperator
name|mGby3
init|=
name|genMapGroupby3
argument_list|(
name|mGby2
argument_list|,
name|mGby
argument_list|,
name|indexOfDist
argument_list|)
decl_stmt|;
name|ReduceSinkOperator
name|rs2
init|=
name|genReducesink2
argument_list|(
name|mGby3
argument_list|,
name|rs
argument_list|)
decl_stmt|;
name|GroupByOperator
name|rGby1
init|=
name|genReduceGroupby
argument_list|(
name|rs2
argument_list|,
name|rGby
argument_list|,
name|indexOfDist
argument_list|)
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
range|:
name|parents
control|)
block|{
name|OperatorFactory
operator|.
name|makeChild
argument_list|(
name|parent
argument_list|,
name|mGby1
argument_list|)
expr_stmt|;
block|}
name|OperatorFactory
operator|.
name|makeChild
argument_list|(
name|mGby1
argument_list|,
name|rs1
argument_list|)
expr_stmt|;
name|OperatorFactory
operator|.
name|makeChild
argument_list|(
name|rs1
argument_list|,
name|mGby2
argument_list|)
expr_stmt|;
name|OperatorFactory
operator|.
name|makeChild
argument_list|(
name|mGby2
argument_list|,
name|mGby3
argument_list|)
expr_stmt|;
name|OperatorFactory
operator|.
name|makeChild
argument_list|(
name|mGby3
argument_list|,
name|rs2
argument_list|)
expr_stmt|;
name|OperatorFactory
operator|.
name|makeChild
argument_list|(
name|rs2
argument_list|,
name|rGby1
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
range|:
name|children
control|)
block|{
name|child
operator|.
name|removeParents
argument_list|()
expr_stmt|;
name|OperatorFactory
operator|.
name|makeChild
argument_list|(
name|rGby1
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
comment|// mGby1 ---already contains group by key, we need to remove distinct column
specifier|private
name|GroupByOperator
name|genMapGroupby1
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|mGby
parameter_list|,
name|int
name|indexOfDist
parameter_list|)
throws|throws
name|CloneNotSupportedException
block|{
name|GroupByOperator
name|mGby1
init|=
operator|(
name|GroupByOperator
operator|)
name|mGby
operator|.
name|clone
argument_list|()
decl_stmt|;
comment|// distinct is at lost position.
name|String
name|fieldString
init|=
name|mGby1
operator|.
name|getConf
argument_list|()
operator|.
name|getOutputColumnNames
argument_list|()
operator|.
name|get
argument_list|(
name|indexOfDist
operator|+
literal|1
argument_list|)
decl_stmt|;
name|mGby1
operator|.
name|getColumnExprMap
argument_list|()
operator|.
name|remove
argument_list|(
name|fieldString
argument_list|)
expr_stmt|;
name|mGby1
operator|.
name|getConf
argument_list|()
operator|.
name|getOutputColumnNames
argument_list|()
operator|.
name|remove
argument_list|(
name|indexOfDist
operator|+
literal|1
argument_list|)
expr_stmt|;
name|mGby1
operator|.
name|getConf
argument_list|()
operator|.
name|getAggregators
argument_list|()
operator|.
name|remove
argument_list|(
name|indexOfDist
argument_list|)
expr_stmt|;
name|mGby1
operator|.
name|getConf
argument_list|()
operator|.
name|setDistinct
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mGby1
operator|.
name|getSchema
argument_list|()
operator|.
name|getColumnNames
argument_list|()
operator|.
name|remove
argument_list|(
name|indexOfDist
operator|+
literal|1
argument_list|)
expr_stmt|;
name|mGby1
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|.
name|remove
argument_list|(
name|indexOfDist
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|mGby1
return|;
block|}
comment|// rs1 --- remove distinctColIndices, set #reducer as -1, reset keys,
comment|// values, colexpmap and rowschema
specifier|private
name|ReduceSinkOperator
name|genReducesink1
parameter_list|(
name|GroupByOperator
name|mGby1
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|rs
parameter_list|,
name|int
name|indexOfDist
parameter_list|)
throws|throws
name|CloneNotSupportedException
throws|,
name|SemanticException
block|{
name|ReduceSinkOperator
name|rs1
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|rs
operator|.
name|clone
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|colExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputKeyColumnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputValueColumnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|reduceKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|reduceValues
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|rowSchema
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|internalNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|mGby1
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|ColumnInfo
name|paraExprInfo
init|=
name|mGby1
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|String
name|paraExpression
init|=
name|paraExprInfo
operator|.
name|getInternalName
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|paraExpression
operator|!=
literal|null
operator|)
assert|;
name|ExprNodeColumnDesc
name|exprDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|paraExprInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|paraExpression
argument_list|,
name|paraExprInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|paraExprInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|)
decl_stmt|;
comment|// index==0 means this is key
if|if
condition|(
name|index
operator|==
literal|0
condition|)
block|{
name|reduceKeys
operator|.
name|add
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|String
name|outputColName
init|=
name|SemanticAnalyzer
operator|.
name|getColumnInternalName
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|outputKeyColumnNames
operator|.
name|add
argument_list|(
name|outputColName
argument_list|)
expr_stmt|;
name|String
name|internalName
init|=
name|Utilities
operator|.
name|ReduceField
operator|.
name|KEY
operator|.
name|toString
argument_list|()
operator|+
literal|"."
operator|+
name|outputColName
decl_stmt|;
name|colExprMap
operator|.
name|put
argument_list|(
name|internalName
argument_list|,
name|exprDesc
argument_list|)
expr_stmt|;
name|internalNames
operator|.
name|add
argument_list|(
name|internalName
argument_list|)
expr_stmt|;
name|rowSchema
operator|.
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
name|internalName
argument_list|,
name|mGby1
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reduceValues
operator|.
name|add
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|String
name|outputColName
init|=
name|SemanticAnalyzer
operator|.
name|getColumnInternalName
argument_list|(
name|index
operator|-
literal|1
argument_list|)
decl_stmt|;
name|outputValueColumnNames
operator|.
name|add
argument_list|(
name|outputColName
argument_list|)
expr_stmt|;
name|String
name|internalName
init|=
name|Utilities
operator|.
name|ReduceField
operator|.
name|VALUE
operator|.
name|toString
argument_list|()
operator|+
literal|"."
operator|+
name|outputColName
decl_stmt|;
name|colExprMap
operator|.
name|put
argument_list|(
name|internalName
argument_list|,
name|exprDesc
argument_list|)
expr_stmt|;
name|internalNames
operator|.
name|add
argument_list|(
name|internalName
argument_list|)
expr_stmt|;
name|rowSchema
operator|.
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
name|internalName
argument_list|,
name|mGby1
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|distinctColIndices
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|rs1
operator|.
name|setConf
argument_list|(
name|PlanUtils
operator|.
name|getReduceSinkDesc
argument_list|(
name|reduceKeys
argument_list|,
literal|1
argument_list|,
name|reduceValues
argument_list|,
name|distinctColIndices
argument_list|,
name|outputKeyColumnNames
argument_list|,
name|outputValueColumnNames
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|AcidUtils
operator|.
name|Operation
operator|.
name|NOT_ACID
argument_list|)
argument_list|)
expr_stmt|;
name|rs1
operator|.
name|setColumnExprMap
argument_list|(
name|colExprMap
argument_list|)
expr_stmt|;
name|rs1
operator|.
name|setSchema
argument_list|(
operator|new
name|RowSchema
argument_list|(
name|rowSchema
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|rs1
return|;
block|}
comment|// mGby2 ---already contains key, remove distinct and change all the others
specifier|private
name|GroupByOperator
name|genMapGroupby2
parameter_list|(
name|ReduceSinkOperator
name|rs1
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|mGby
parameter_list|,
name|int
name|indexOfDist
parameter_list|)
throws|throws
name|CloneNotSupportedException
throws|,
name|SemanticException
block|{
name|GroupByOperator
name|mGby2
init|=
operator|(
name|GroupByOperator
operator|)
name|mGby
operator|.
name|clone
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|rowSchema
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|groupByKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputColumnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|colExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ColumnInfo
name|exprInfo
init|=
name|rs1
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|key
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|exprInfo
argument_list|)
decl_stmt|;
name|groupByKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|String
name|field
init|=
name|SemanticAnalyzer
operator|.
name|getColumnInternalName
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|outputColumnNames
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|ColumnInfo
name|oColInfo
init|=
operator|new
name|ColumnInfo
argument_list|(
name|field
argument_list|,
name|exprInfo
operator|.
name|getType
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|colExprMap
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|rowSchema
operator|.
name|add
argument_list|(
name|oColInfo
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|AggregationDesc
argument_list|>
name|aggregations
init|=
operator|new
name|ArrayList
argument_list|<
name|AggregationDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|mGby2
operator|.
name|getConf
argument_list|()
operator|.
name|getAggregators
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|aggParameters
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|!=
name|indexOfDist
condition|)
block|{
name|AggregationDesc
name|desc
init|=
name|mGby2
operator|.
name|getConf
argument_list|()
operator|.
name|getAggregators
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|ColumnInfo
name|paraExprInfo
init|=
literal|null
decl_stmt|;
comment|// for example, original it is max 0, dist 1, min 2
comment|// rs1's schema is key 0, max 1, min 2
if|if
condition|(
name|index
operator|<
name|indexOfDist
condition|)
block|{
name|paraExprInfo
operator|=
name|rs1
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|.
name|get
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|paraExprInfo
operator|=
name|rs1
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|String
name|paraExpression
init|=
name|paraExprInfo
operator|.
name|getInternalName
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|paraExpression
operator|!=
literal|null
operator|)
assert|;
name|aggParameters
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|paraExprInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|paraExpression
argument_list|,
name|paraExprInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|paraExprInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// for all the other aggregations, we set the mode to PARTIAL2
name|Mode
name|amode
init|=
name|SemanticAnalyzer
operator|.
name|groupByDescModeToUDAFMode
argument_list|(
name|GroupByDesc
operator|.
name|Mode
operator|.
name|PARTIAL2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|GenericUDAFEvaluator
name|genericUDAFEvaluator
init|=
name|desc
operator|.
name|getGenericUDAFEvaluator
argument_list|()
decl_stmt|;
name|GenericUDAFInfo
name|udaf
init|=
name|SemanticAnalyzer
operator|.
name|getGenericUDAFInfo
argument_list|(
name|genericUDAFEvaluator
argument_list|,
name|amode
argument_list|,
name|aggParameters
argument_list|)
decl_stmt|;
name|aggregations
operator|.
name|add
argument_list|(
operator|new
name|AggregationDesc
argument_list|(
name|desc
operator|.
name|getGenericUDAFName
argument_list|()
argument_list|,
name|udaf
operator|.
name|genericUDAFEvaluator
argument_list|,
name|udaf
operator|.
name|convertedParameters
argument_list|,
literal|false
argument_list|,
name|amode
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|SemanticAnalyzer
operator|.
name|getColumnInternalName
argument_list|(
name|aggregations
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|outputColumnNames
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|rowSchema
operator|.
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
name|f
argument_list|,
name|udaf
operator|.
name|returnType
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|mGby2
operator|.
name|getConf
argument_list|()
operator|.
name|setMode
argument_list|(
name|GroupByDesc
operator|.
name|Mode
operator|.
name|PARTIAL2
argument_list|)
expr_stmt|;
name|mGby2
operator|.
name|getConf
argument_list|()
operator|.
name|setOutputColumnNames
argument_list|(
name|outputColumnNames
argument_list|)
expr_stmt|;
name|mGby2
operator|.
name|getConf
argument_list|()
operator|.
name|getKeys
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mGby2
operator|.
name|getConf
argument_list|()
operator|.
name|getKeys
argument_list|()
operator|.
name|addAll
argument_list|(
name|groupByKeys
argument_list|)
expr_stmt|;
name|mGby2
operator|.
name|getConf
argument_list|()
operator|.
name|getAggregators
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mGby2
operator|.
name|getConf
argument_list|()
operator|.
name|getAggregators
argument_list|()
operator|.
name|addAll
argument_list|(
name|aggregations
argument_list|)
expr_stmt|;
name|mGby2
operator|.
name|getConf
argument_list|()
operator|.
name|setDistinct
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mGby2
operator|.
name|setSchema
argument_list|(
operator|new
name|RowSchema
argument_list|(
name|rowSchema
argument_list|)
argument_list|)
expr_stmt|;
name|mGby2
operator|.
name|setColumnExprMap
argument_list|(
name|colExprMap
argument_list|)
expr_stmt|;
return|return
name|mGby2
return|;
block|}
comment|// mGby3 is a follow up of mGby2. Here we start to count(key).
specifier|private
name|GroupByOperator
name|genMapGroupby3
parameter_list|(
name|GroupByOperator
name|mGby2
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|mGby
parameter_list|,
name|int
name|indexOfDist
parameter_list|)
throws|throws
name|CloneNotSupportedException
throws|,
name|SemanticException
block|{
name|GroupByOperator
name|mGby3
init|=
operator|(
name|GroupByOperator
operator|)
name|mGby
operator|.
name|clone
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|rowSchema
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputColumnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|colExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
comment|// exprInfo is the key
name|ArrayList
argument_list|<
name|AggregationDesc
argument_list|>
name|aggregations
init|=
operator|new
name|ArrayList
argument_list|<
name|AggregationDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<=
name|mGby2
operator|.
name|getConf
argument_list|()
operator|.
name|getAggregators
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
name|index
operator|==
name|indexOfDist
condition|)
block|{
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|aggParameters
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
comment|// add count(KEY._col0) to replace distinct
name|ColumnInfo
name|paraExprInfo
init|=
name|mGby2
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|paraExpression
init|=
name|paraExprInfo
operator|.
name|getInternalName
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|paraExpression
operator|!=
literal|null
operator|)
assert|;
name|aggParameters
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|paraExprInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|paraExpression
argument_list|,
name|paraExprInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|paraExprInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Mode
name|amode
init|=
name|SemanticAnalyzer
operator|.
name|groupByDescModeToUDAFMode
argument_list|(
name|GroupByDesc
operator|.
name|Mode
operator|.
name|HASH
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|GenericUDAFEvaluator
name|genericUDAFEvaluator
init|=
name|SemanticAnalyzer
operator|.
name|getGenericUDAFEvaluator
argument_list|(
literal|"count"
argument_list|,
name|aggParameters
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|genericUDAFEvaluator
operator|!=
literal|null
operator|)
assert|;
name|GenericUDAFInfo
name|udaf
init|=
name|SemanticAnalyzer
operator|.
name|getGenericUDAFInfo
argument_list|(
name|genericUDAFEvaluator
argument_list|,
name|amode
argument_list|,
name|aggParameters
argument_list|)
decl_stmt|;
name|AggregationDesc
name|newDesc
init|=
operator|new
name|AggregationDesc
argument_list|(
literal|"count"
argument_list|,
name|udaf
operator|.
name|genericUDAFEvaluator
argument_list|,
name|udaf
operator|.
name|convertedParameters
argument_list|,
literal|false
argument_list|,
name|amode
argument_list|)
decl_stmt|;
name|String
name|f
init|=
name|SemanticAnalyzer
operator|.
name|getColumnInternalName
argument_list|(
name|aggregations
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|aggregations
operator|.
name|add
argument_list|(
name|newDesc
argument_list|)
expr_stmt|;
name|outputColumnNames
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|rowSchema
operator|.
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
name|f
argument_list|,
name|udaf
operator|.
name|returnType
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|==
name|mGby2
operator|.
name|getConf
argument_list|()
operator|.
name|getAggregators
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
break|break;
block|}
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|aggParameters
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|AggregationDesc
name|desc
init|=
name|mGby2
operator|.
name|getConf
argument_list|()
operator|.
name|getAggregators
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|ColumnInfo
name|paraExprInfo
init|=
literal|null
decl_stmt|;
comment|// for example, original it is max 0, dist 1, min 2
comment|// rs1's schema is key 0, max 1, min 2
name|paraExprInfo
operator|=
name|mGby2
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|.
name|get
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
name|String
name|paraExpression
init|=
name|paraExprInfo
operator|.
name|getInternalName
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|paraExpression
operator|!=
literal|null
operator|)
assert|;
name|aggParameters
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|paraExprInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|paraExpression
argument_list|,
name|paraExprInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|paraExprInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// for all the other aggregations, we set the mode to PARTIAL2
name|Mode
name|amode
init|=
name|SemanticAnalyzer
operator|.
name|groupByDescModeToUDAFMode
argument_list|(
name|GroupByDesc
operator|.
name|Mode
operator|.
name|PARTIAL2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|GenericUDAFEvaluator
name|genericUDAFEvaluator
init|=
name|desc
operator|.
name|getGenericUDAFEvaluator
argument_list|()
decl_stmt|;
name|GenericUDAFInfo
name|udaf
init|=
name|SemanticAnalyzer
operator|.
name|getGenericUDAFInfo
argument_list|(
name|genericUDAFEvaluator
argument_list|,
name|amode
argument_list|,
name|aggParameters
argument_list|)
decl_stmt|;
name|String
name|f
init|=
name|SemanticAnalyzer
operator|.
name|getColumnInternalName
argument_list|(
name|aggregations
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|aggregations
operator|.
name|add
argument_list|(
operator|new
name|AggregationDesc
argument_list|(
name|desc
operator|.
name|getGenericUDAFName
argument_list|()
argument_list|,
name|udaf
operator|.
name|genericUDAFEvaluator
argument_list|,
name|udaf
operator|.
name|convertedParameters
argument_list|,
literal|false
argument_list|,
name|amode
argument_list|)
argument_list|)
expr_stmt|;
name|outputColumnNames
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|rowSchema
operator|.
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
name|f
argument_list|,
name|udaf
operator|.
name|returnType
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mGby3
operator|.
name|getConf
argument_list|()
operator|.
name|setMode
argument_list|(
name|GroupByDesc
operator|.
name|Mode
operator|.
name|PARTIAL2
argument_list|)
expr_stmt|;
name|mGby3
operator|.
name|getConf
argument_list|()
operator|.
name|setOutputColumnNames
argument_list|(
name|outputColumnNames
argument_list|)
expr_stmt|;
name|mGby3
operator|.
name|getConf
argument_list|()
operator|.
name|getKeys
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mGby3
operator|.
name|getConf
argument_list|()
operator|.
name|getAggregators
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mGby3
operator|.
name|getConf
argument_list|()
operator|.
name|getAggregators
argument_list|()
operator|.
name|addAll
argument_list|(
name|aggregations
argument_list|)
expr_stmt|;
name|mGby3
operator|.
name|getConf
argument_list|()
operator|.
name|setDistinct
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mGby3
operator|.
name|setSchema
argument_list|(
operator|new
name|RowSchema
argument_list|(
name|rowSchema
argument_list|)
argument_list|)
expr_stmt|;
name|mGby3
operator|.
name|setColumnExprMap
argument_list|(
name|colExprMap
argument_list|)
expr_stmt|;
return|return
name|mGby3
return|;
block|}
comment|// #reducer is already 1
specifier|private
name|ReduceSinkOperator
name|genReducesink2
parameter_list|(
name|GroupByOperator
name|mGby2
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|rs
parameter_list|)
throws|throws
name|SemanticException
throws|,
name|CloneNotSupportedException
block|{
name|ReduceSinkOperator
name|rs2
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|rs
operator|.
name|clone
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|colExprMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputKeyColumnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputValueColumnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|reduceValues
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|rowSchema
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|mGby2
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|ColumnInfo
name|paraExprInfo
init|=
name|mGby2
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|String
name|paraExpression
init|=
name|paraExprInfo
operator|.
name|getInternalName
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|paraExpression
operator|!=
literal|null
operator|)
assert|;
name|ExprNodeColumnDesc
name|exprDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|paraExprInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|paraExpression
argument_list|,
name|paraExprInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|paraExprInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|)
decl_stmt|;
name|reduceValues
operator|.
name|add
argument_list|(
name|exprDesc
argument_list|)
expr_stmt|;
name|String
name|outputColName
init|=
name|SemanticAnalyzer
operator|.
name|getColumnInternalName
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|outputValueColumnNames
operator|.
name|add
argument_list|(
name|outputColName
argument_list|)
expr_stmt|;
name|String
name|internalName
init|=
name|Utilities
operator|.
name|ReduceField
operator|.
name|VALUE
operator|.
name|toString
argument_list|()
operator|+
literal|"."
operator|+
name|outputColName
decl_stmt|;
name|colExprMap
operator|.
name|put
argument_list|(
name|internalName
argument_list|,
name|exprDesc
argument_list|)
expr_stmt|;
name|rowSchema
operator|.
name|add
argument_list|(
operator|new
name|ColumnInfo
argument_list|(
name|internalName
argument_list|,
name|paraExprInfo
operator|.
name|getType
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|distinctColIndices
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|reduceKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|rs2
operator|.
name|setConf
argument_list|(
name|PlanUtils
operator|.
name|getReduceSinkDesc
argument_list|(
name|reduceKeys
argument_list|,
literal|0
argument_list|,
name|reduceValues
argument_list|,
name|distinctColIndices
argument_list|,
name|outputKeyColumnNames
argument_list|,
name|outputValueColumnNames
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|AcidUtils
operator|.
name|Operation
operator|.
name|NOT_ACID
argument_list|)
argument_list|)
expr_stmt|;
name|rs2
operator|.
name|setColumnExprMap
argument_list|(
name|colExprMap
argument_list|)
expr_stmt|;
name|rs2
operator|.
name|setSchema
argument_list|(
operator|new
name|RowSchema
argument_list|(
name|rowSchema
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|rs2
return|;
block|}
comment|// replace the distinct with the count aggregation
specifier|private
name|GroupByOperator
name|genReduceGroupby
parameter_list|(
name|ReduceSinkOperator
name|rs2
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|rGby
parameter_list|,
name|int
name|indexOfDist
parameter_list|)
throws|throws
name|SemanticException
throws|,
name|CloneNotSupportedException
block|{
name|GroupByOperator
name|rGby1
init|=
operator|(
name|GroupByOperator
operator|)
name|rGby
operator|.
name|clone
argument_list|()
decl_stmt|;
name|ColumnInfo
name|paraExprInfo
init|=
name|rs2
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
operator|.
name|get
argument_list|(
name|indexOfDist
argument_list|)
decl_stmt|;
name|String
name|paraExpression
init|=
name|paraExprInfo
operator|.
name|getInternalName
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|paraExpression
operator|!=
literal|null
operator|)
assert|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|aggParameters
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|aggParameters
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|paraExprInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|paraExpression
argument_list|,
name|paraExprInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|paraExprInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|GenericUDAFEvaluator
name|genericUDAFEvaluator
init|=
name|SemanticAnalyzer
operator|.
name|getGenericUDAFEvaluator
argument_list|(
literal|"count"
argument_list|,
name|aggParameters
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|genericUDAFEvaluator
operator|!=
literal|null
operator|)
assert|;
name|Mode
name|amode
init|=
name|SemanticAnalyzer
operator|.
name|groupByDescModeToUDAFMode
argument_list|(
name|GroupByDesc
operator|.
name|Mode
operator|.
name|MERGEPARTIAL
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|GenericUDAFInfo
name|udaf
init|=
name|SemanticAnalyzer
operator|.
name|getGenericUDAFInfo
argument_list|(
name|genericUDAFEvaluator
argument_list|,
name|amode
argument_list|,
name|aggParameters
argument_list|)
decl_stmt|;
name|AggregationDesc
name|newDesc
init|=
operator|new
name|AggregationDesc
argument_list|(
literal|"count"
argument_list|,
name|udaf
operator|.
name|genericUDAFEvaluator
argument_list|,
name|udaf
operator|.
name|convertedParameters
argument_list|,
literal|false
argument_list|,
name|amode
argument_list|)
decl_stmt|;
name|rGby1
operator|.
name|getConf
argument_list|()
operator|.
name|getAggregators
argument_list|()
operator|.
name|set
argument_list|(
name|indexOfDist
argument_list|,
name|newDesc
argument_list|)
expr_stmt|;
name|rGby1
operator|.
name|getConf
argument_list|()
operator|.
name|setDistinct
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|rGby1
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|GroupByOperator
name|mGby
init|=
operator|(
name|GroupByOperator
operator|)
name|stack
operator|.
name|get
argument_list|(
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|3
argument_list|)
decl_stmt|;
name|ReduceSinkOperator
name|rs
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|stack
operator|.
name|get
argument_list|(
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|)
decl_stmt|;
name|GroupByOperator
name|rGby
init|=
operator|(
name|GroupByOperator
operator|)
name|stack
operator|.
name|get
argument_list|(
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|applicableDistPos
init|=
name|checkCountDistinct
argument_list|(
name|mGby
argument_list|,
name|rs
argument_list|,
name|rGby
argument_list|)
decl_stmt|;
if|if
condition|(
name|applicableDistPos
operator|!=
operator|-
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"trigger count distinct rewrite"
argument_list|)
expr_stmt|;
try|try
block|{
name|processGroupBy
argument_list|(
name|mGby
argument_list|,
name|rs
argument_list|,
name|rGby
argument_list|,
name|applicableDistPos
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

