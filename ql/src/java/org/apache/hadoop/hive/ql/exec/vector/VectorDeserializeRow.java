begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|DataTypePhysicalVariation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|StringExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorPartitionConversion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|fast
operator|.
name|DeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalDayTimeWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalYearMonthWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|SettableListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|SettableMapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|SettableStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|SettableUnionObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardUnionObjectInspector
operator|.
name|StandardUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|CharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|UnionTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * This class deserializes a serialization format into a row of a VectorizedRowBatch.  *  * The caller provides the hive type names and output column numbers in the order desired to  * deserialize.  *  * This class uses an provided DeserializeRead object to directly deserialize by reading  * field-by-field from a serialization format into the primitive values of the VectorizedRowBatch.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|VectorDeserializeRow
parameter_list|<
name|T
extends|extends
name|DeserializeRead
parameter_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VectorDeserializeRow
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|T
name|deserializeRead
decl_stmt|;
specifier|private
name|TypeInfo
index|[]
name|sourceTypeInfos
decl_stmt|;
specifier|protected
name|DataTypePhysicalVariation
index|[]
name|dataTypePhysicalVariations
decl_stmt|;
specifier|private
name|byte
index|[]
name|inputBytes
decl_stmt|;
comment|/**    * @param deserializeRead   Set useExternalBuffer to true to avoid buffer copying and to get    *     more efficient reading.    */
specifier|public
name|VectorDeserializeRow
parameter_list|(
name|T
name|deserializeRead
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|deserializeRead
operator|=
name|deserializeRead
expr_stmt|;
name|sourceTypeInfos
operator|=
name|deserializeRead
operator|.
name|typeInfos
argument_list|()
expr_stmt|;
name|dataTypePhysicalVariations
operator|=
name|deserializeRead
operator|.
name|getDataTypePhysicalVariations
argument_list|()
expr_stmt|;
block|}
comment|// Not public since we must have the deserialize read object.
specifier|private
name|VectorDeserializeRow
parameter_list|()
block|{   }
specifier|private
specifier|static
class|class
name|Field
block|{
specifier|private
name|boolean
name|isPrimitive
decl_stmt|;
specifier|private
name|Category
name|category
decl_stmt|;
specifier|private
name|PrimitiveCategory
name|primitiveCategory
decl_stmt|;
comment|//The data type primitive category of the column being deserialized.
specifier|private
name|DataTypePhysicalVariation
name|dataTypePhysicalVariation
decl_stmt|;
specifier|private
name|int
name|maxLength
decl_stmt|;
comment|// For the CHAR and VARCHAR data types, the maximum character length of
comment|// the column.  Otherwise, 0.
specifier|private
name|boolean
name|isConvert
decl_stmt|;
comment|/*      * This member has information for data type conversion.      * Not defined if there is no conversion.      */
specifier|private
name|Object
name|conversionWritable
decl_stmt|;
comment|// Conversion requires source be placed in writable so we can call upon
comment|// VectorAssignRow to convert and assign the row column.
specifier|private
name|ComplexTypeHelper
name|complexTypeHelper
decl_stmt|;
comment|// For a complex type, a helper object that describes elements, key/value pairs,
comment|// or fields.
specifier|private
name|ObjectInspector
name|objectInspector
decl_stmt|;
specifier|public
name|Field
parameter_list|(
name|PrimitiveCategory
name|primitiveCategory
parameter_list|,
name|DataTypePhysicalVariation
name|dataTypePhysicalVariation
parameter_list|,
name|int
name|maxLength
parameter_list|)
block|{
name|isPrimitive
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|category
operator|=
name|Category
operator|.
name|PRIMITIVE
expr_stmt|;
name|this
operator|.
name|primitiveCategory
operator|=
name|primitiveCategory
expr_stmt|;
name|this
operator|.
name|dataTypePhysicalVariation
operator|=
name|dataTypePhysicalVariation
expr_stmt|;
name|this
operator|.
name|maxLength
operator|=
name|maxLength
expr_stmt|;
name|this
operator|.
name|isConvert
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|conversionWritable
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|complexTypeHelper
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|objectInspector
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|primitiveCategory
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Field
parameter_list|(
name|Category
name|category
parameter_list|,
name|ComplexTypeHelper
name|complexTypeHelper
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
name|isPrimitive
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|category
operator|=
name|category
expr_stmt|;
name|this
operator|.
name|objectInspector
operator|=
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|typeInfo
argument_list|)
expr_stmt|;
name|this
operator|.
name|primitiveCategory
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|dataTypePhysicalVariation
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|maxLength
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|isConvert
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|conversionWritable
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|complexTypeHelper
operator|=
name|complexTypeHelper
expr_stmt|;
block|}
specifier|public
name|boolean
name|getIsPrimitive
parameter_list|()
block|{
return|return
name|isPrimitive
return|;
block|}
specifier|public
name|Category
name|getCategory
parameter_list|()
block|{
return|return
name|category
return|;
block|}
specifier|public
name|PrimitiveCategory
name|getPrimitiveCategory
parameter_list|()
block|{
return|return
name|primitiveCategory
return|;
block|}
specifier|public
name|DataTypePhysicalVariation
name|getDataTypePhysicalVariation
parameter_list|()
block|{
return|return
name|dataTypePhysicalVariation
return|;
block|}
specifier|public
name|int
name|getMaxLength
parameter_list|()
block|{
return|return
name|maxLength
return|;
block|}
specifier|public
name|void
name|setIsConvert
parameter_list|(
name|boolean
name|isConvert
parameter_list|)
block|{
name|this
operator|.
name|isConvert
operator|=
name|isConvert
expr_stmt|;
block|}
specifier|public
name|boolean
name|getIsConvert
parameter_list|()
block|{
return|return
name|isConvert
return|;
block|}
specifier|public
name|void
name|setConversionWritable
parameter_list|(
name|Object
name|conversionWritable
parameter_list|)
block|{
name|this
operator|.
name|conversionWritable
operator|=
name|conversionWritable
expr_stmt|;
block|}
specifier|public
name|Object
name|getConversionWritable
parameter_list|()
block|{
return|return
name|conversionWritable
return|;
block|}
specifier|public
name|ComplexTypeHelper
name|getComplexHelper
parameter_list|()
block|{
return|return
name|complexTypeHelper
return|;
block|}
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
block|{
return|return
name|objectInspector
return|;
block|}
block|}
comment|/*    * These members have information for deserializing a row into the VectorizedRowBatch    * columns.    *    * We say "source" because when there is conversion we are converting th deserialized source into    * a target data type.    */
specifier|private
name|boolean
name|useReadField
decl_stmt|;
comment|// True when the (random access) readField method of DeserializeRead are being used.
specifier|private
name|int
index|[]
name|readFieldLogicalIndices
decl_stmt|;
comment|// The logical indices for reading with readField.
specifier|private
name|int
index|[]
name|projectionColumnNums
decl_stmt|;
comment|// Assigning can be a subset of columns, so this is the projection --
comment|// the batch column numbers.
specifier|private
name|Field
name|topLevelFields
index|[]
decl_stmt|;
specifier|private
name|VectorAssignRow
name|convertVectorAssignRow
decl_stmt|;
comment|// Use its conversion ability.
comment|/*    * Allocate the source deserialization related arrays.    */
specifier|private
name|void
name|allocateArrays
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|projectionColumnNums
operator|=
operator|new
name|int
index|[
name|count
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|projectionColumnNums
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|topLevelFields
operator|=
operator|new
name|Field
index|[
name|count
index|]
expr_stmt|;
block|}
specifier|private
name|Field
name|allocatePrimitiveField
parameter_list|(
name|TypeInfo
name|sourceTypeInfo
parameter_list|,
name|DataTypePhysicalVariation
name|dataTypePhysicalVariation
parameter_list|)
block|{
specifier|final
name|PrimitiveTypeInfo
name|sourcePrimitiveTypeInfo
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|sourceTypeInfo
decl_stmt|;
specifier|final
name|PrimitiveCategory
name|sourcePrimitiveCategory
init|=
name|sourcePrimitiveTypeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
specifier|final
name|int
name|maxLength
decl_stmt|;
switch|switch
condition|(
name|sourcePrimitiveCategory
condition|)
block|{
case|case
name|CHAR
case|:
name|maxLength
operator|=
operator|(
operator|(
name|CharTypeInfo
operator|)
name|sourcePrimitiveTypeInfo
operator|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
break|break;
case|case
name|VARCHAR
case|:
name|maxLength
operator|=
operator|(
operator|(
name|VarcharTypeInfo
operator|)
name|sourcePrimitiveTypeInfo
operator|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
break|break;
default|default:
comment|// No additional data type specific setting.
name|maxLength
operator|=
literal|0
expr_stmt|;
break|break;
block|}
return|return
operator|new
name|Field
argument_list|(
name|sourcePrimitiveCategory
argument_list|,
name|dataTypePhysicalVariation
argument_list|,
name|maxLength
argument_list|)
return|;
block|}
specifier|private
name|Field
name|allocateComplexField
parameter_list|(
name|TypeInfo
name|sourceTypeInfo
parameter_list|)
block|{
specifier|final
name|Category
name|category
init|=
name|sourceTypeInfo
operator|.
name|getCategory
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|category
condition|)
block|{
case|case
name|LIST
case|:
block|{
specifier|final
name|ListTypeInfo
name|listTypeInfo
init|=
operator|(
name|ListTypeInfo
operator|)
name|sourceTypeInfo
decl_stmt|;
specifier|final
name|ListComplexTypeHelper
name|listHelper
init|=
operator|new
name|ListComplexTypeHelper
argument_list|(
name|allocateField
argument_list|(
name|listTypeInfo
operator|.
name|getListElementTypeInfo
argument_list|()
argument_list|,
name|DataTypePhysicalVariation
operator|.
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Field
argument_list|(
name|category
argument_list|,
name|listHelper
argument_list|,
name|sourceTypeInfo
argument_list|)
return|;
block|}
case|case
name|MAP
case|:
block|{
specifier|final
name|MapTypeInfo
name|mapTypeInfo
init|=
operator|(
name|MapTypeInfo
operator|)
name|sourceTypeInfo
decl_stmt|;
specifier|final
name|MapComplexTypeHelper
name|mapHelper
init|=
operator|new
name|MapComplexTypeHelper
argument_list|(
name|allocateField
argument_list|(
name|mapTypeInfo
operator|.
name|getMapKeyTypeInfo
argument_list|()
argument_list|,
name|DataTypePhysicalVariation
operator|.
name|NONE
argument_list|)
argument_list|,
name|allocateField
argument_list|(
name|mapTypeInfo
operator|.
name|getMapValueTypeInfo
argument_list|()
argument_list|,
name|DataTypePhysicalVariation
operator|.
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Field
argument_list|(
name|category
argument_list|,
name|mapHelper
argument_list|,
name|sourceTypeInfo
argument_list|)
return|;
block|}
case|case
name|STRUCT
case|:
block|{
specifier|final
name|StructTypeInfo
name|structTypeInfo
init|=
operator|(
name|StructTypeInfo
operator|)
name|sourceTypeInfo
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfoList
init|=
name|structTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|int
name|count
init|=
name|fieldTypeInfoList
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|Field
index|[]
name|fields
init|=
operator|new
name|Field
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|fields
index|[
name|i
index|]
operator|=
name|allocateField
argument_list|(
name|fieldTypeInfoList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|DataTypePhysicalVariation
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
specifier|final
name|StructComplexTypeHelper
name|structHelper
init|=
operator|new
name|StructComplexTypeHelper
argument_list|(
name|fields
argument_list|)
decl_stmt|;
return|return
operator|new
name|Field
argument_list|(
name|category
argument_list|,
name|structHelper
argument_list|,
name|sourceTypeInfo
argument_list|)
return|;
block|}
case|case
name|UNION
case|:
block|{
specifier|final
name|UnionTypeInfo
name|unionTypeInfo
init|=
operator|(
name|UnionTypeInfo
operator|)
name|sourceTypeInfo
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfoList
init|=
name|unionTypeInfo
operator|.
name|getAllUnionObjectTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|int
name|count
init|=
name|fieldTypeInfoList
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|Field
index|[]
name|fields
init|=
operator|new
name|Field
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|fields
index|[
name|i
index|]
operator|=
name|allocateField
argument_list|(
name|fieldTypeInfoList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|DataTypePhysicalVariation
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
specifier|final
name|UnionComplexTypeHelper
name|unionHelper
init|=
operator|new
name|UnionComplexTypeHelper
argument_list|(
name|fields
argument_list|)
decl_stmt|;
return|return
operator|new
name|Field
argument_list|(
name|category
argument_list|,
name|unionHelper
argument_list|,
name|sourceTypeInfo
argument_list|)
return|;
block|}
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Category "
operator|+
name|category
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Field
name|allocateField
parameter_list|(
name|TypeInfo
name|sourceTypeInfo
parameter_list|,
name|DataTypePhysicalVariation
name|dataTypePhysicalVariation
parameter_list|)
block|{
switch|switch
condition|(
name|sourceTypeInfo
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
return|return
name|allocatePrimitiveField
argument_list|(
name|sourceTypeInfo
argument_list|,
name|dataTypePhysicalVariation
argument_list|)
return|;
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|STRUCT
case|:
case|case
name|UNION
case|:
return|return
name|allocateComplexField
argument_list|(
name|sourceTypeInfo
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Category "
operator|+
name|sourceTypeInfo
operator|.
name|getCategory
argument_list|()
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
block|}
comment|/*    * Initialize one column's source deserializtion information.    */
specifier|private
name|void
name|initTopLevelField
parameter_list|(
name|int
name|logicalColumnIndex
parameter_list|,
name|int
name|projectionColumnNum
parameter_list|,
name|TypeInfo
name|sourceTypeInfo
parameter_list|,
name|DataTypePhysicalVariation
name|dataTypePhysicalVariation
parameter_list|)
block|{
name|projectionColumnNums
index|[
name|logicalColumnIndex
index|]
operator|=
name|projectionColumnNum
expr_stmt|;
name|topLevelFields
index|[
name|logicalColumnIndex
index|]
operator|=
name|allocateField
argument_list|(
name|sourceTypeInfo
argument_list|,
name|dataTypePhysicalVariation
argument_list|)
expr_stmt|;
block|}
comment|/*    * Initialize the conversion related arrays.  Assumes initTopLevelField has already been called.    */
specifier|private
name|void
name|addTopLevelConversion
parameter_list|(
name|int
name|logicalColumnIndex
parameter_list|)
block|{
specifier|final
name|Field
name|field
init|=
name|topLevelFields
index|[
name|logicalColumnIndex
index|]
decl_stmt|;
name|field
operator|.
name|setIsConvert
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|getIsPrimitive
argument_list|()
condition|)
block|{
name|field
operator|.
name|setConversionWritable
argument_list|(
name|VectorizedBatchUtil
operator|.
name|getPrimitiveWritable
argument_list|(
name|field
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Specify the columns to deserialize into as an array.    */
specifier|public
name|void
name|init
parameter_list|(
name|int
index|[]
name|outputColumns
parameter_list|)
throws|throws
name|HiveException
block|{
specifier|final
name|int
name|count
init|=
name|sourceTypeInfos
operator|.
name|length
decl_stmt|;
name|allocateArrays
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|int
name|outputColumn
init|=
name|outputColumns
index|[
name|i
index|]
decl_stmt|;
name|initTopLevelField
argument_list|(
name|i
argument_list|,
name|outputColumn
argument_list|,
name|sourceTypeInfos
index|[
name|i
index|]
argument_list|,
name|dataTypePhysicalVariations
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Specify the columns to deserialize into as a list.    */
specifier|public
name|void
name|init
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|outputColumns
parameter_list|)
throws|throws
name|HiveException
block|{
specifier|final
name|int
name|count
init|=
name|sourceTypeInfos
operator|.
name|length
decl_stmt|;
name|allocateArrays
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|int
name|outputColumn
init|=
name|outputColumns
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|initTopLevelField
argument_list|(
name|i
argument_list|,
name|outputColumn
argument_list|,
name|sourceTypeInfos
index|[
name|i
index|]
argument_list|,
name|dataTypePhysicalVariations
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Specify the columns to deserialize into a range starting at a column number.    */
specifier|public
name|void
name|init
parameter_list|(
name|int
name|startColumn
parameter_list|)
throws|throws
name|HiveException
block|{
specifier|final
name|int
name|count
init|=
name|sourceTypeInfos
operator|.
name|length
decl_stmt|;
name|allocateArrays
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|int
name|outputColumn
init|=
name|startColumn
operator|+
name|i
decl_stmt|;
name|initTopLevelField
argument_list|(
name|i
argument_list|,
name|outputColumn
argument_list|,
name|sourceTypeInfos
index|[
name|i
index|]
argument_list|,
name|dataTypePhysicalVariations
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|init
parameter_list|(
name|boolean
index|[]
name|columnsToIncludeTruncated
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// When truncated included is used, its length must be at least the number of source type infos.
comment|// When longer, we assume the caller will default with nulls, etc.
name|Preconditions
operator|.
name|checkState
argument_list|(
name|columnsToIncludeTruncated
operator|==
literal|null
operator|||
name|columnsToIncludeTruncated
operator|.
name|length
operator|==
name|sourceTypeInfos
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|int
name|columnCount
init|=
name|sourceTypeInfos
operator|.
name|length
decl_stmt|;
name|allocateArrays
argument_list|(
name|columnCount
argument_list|)
expr_stmt|;
name|int
name|includedCount
init|=
literal|0
decl_stmt|;
specifier|final
name|int
index|[]
name|includedIndices
init|=
operator|new
name|int
index|[
name|columnCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|columnsToIncludeTruncated
operator|!=
literal|null
operator|&&
operator|!
name|columnsToIncludeTruncated
index|[
name|i
index|]
condition|)
block|{
comment|// Field not included in query.
block|}
else|else
block|{
name|initTopLevelField
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|sourceTypeInfos
index|[
name|i
index|]
argument_list|,
name|dataTypePhysicalVariations
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|includedIndices
index|[
name|includedCount
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
comment|// Optimizing for readField?
if|if
condition|(
name|includedCount
operator|<
name|columnCount
operator|&&
name|deserializeRead
operator|.
name|isReadFieldSupported
argument_list|()
condition|)
block|{
name|useReadField
operator|=
literal|true
expr_stmt|;
name|readFieldLogicalIndices
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|includedIndices
argument_list|,
name|includedCount
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Initialize for converting the source data type that are going to be read with the    * DeserializedRead interface passed to the constructor to the target data types desired in    * the VectorizedRowBatch.    *    * No projection -- using the column range 0 .. columnCount-1    *    * @param targetTypeInfos    * @param columnsToIncludeTruncated    * @throws HiveException    */
specifier|public
name|void
name|initConversion
parameter_list|(
name|TypeInfo
index|[]
name|targetTypeInfos
parameter_list|,
name|boolean
index|[]
name|columnsToIncludeTruncated
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// We assume the caller will handle extra columns default with nulls, etc.
name|Preconditions
operator|.
name|checkState
argument_list|(
name|targetTypeInfos
operator|.
name|length
operator|>=
name|sourceTypeInfos
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// When truncated included is used, its length must be at least the number of source type infos.
comment|// When longer, we assume the caller will default with nulls, etc.
name|Preconditions
operator|.
name|checkState
argument_list|(
name|columnsToIncludeTruncated
operator|==
literal|null
operator|||
name|columnsToIncludeTruncated
operator|.
name|length
operator|>=
name|sourceTypeInfos
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|int
name|columnCount
init|=
name|sourceTypeInfos
operator|.
name|length
decl_stmt|;
name|allocateArrays
argument_list|(
name|columnCount
argument_list|)
expr_stmt|;
name|int
name|includedCount
init|=
literal|0
decl_stmt|;
name|int
index|[]
name|includedIndices
init|=
operator|new
name|int
index|[
name|columnCount
index|]
decl_stmt|;
name|boolean
name|atLeastOneConvert
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|columnsToIncludeTruncated
operator|!=
literal|null
operator|&&
operator|!
name|columnsToIncludeTruncated
index|[
name|i
index|]
condition|)
block|{
comment|// Field not included in query.
block|}
else|else
block|{
name|TypeInfo
name|sourceTypeInfo
init|=
name|sourceTypeInfos
index|[
name|i
index|]
decl_stmt|;
name|TypeInfo
name|targetTypeInfo
init|=
name|targetTypeInfos
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|sourceTypeInfo
operator|.
name|equals
argument_list|(
name|targetTypeInfo
argument_list|)
condition|)
block|{
if|if
condition|(
name|VectorPartitionConversion
operator|.
name|isImplicitVectorColumnConversion
argument_list|(
name|sourceTypeInfo
argument_list|,
name|targetTypeInfo
argument_list|)
condition|)
block|{
comment|// Do implicit conversion from source type to target type.
name|initTopLevelField
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|sourceTypeInfo
argument_list|,
name|dataTypePhysicalVariations
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Do formal conversion...
name|initTopLevelField
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|sourceTypeInfo
argument_list|,
name|dataTypePhysicalVariations
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// UNDONE: No for List and Map; Yes for Struct and Union when field count different...
name|addTopLevelConversion
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|atLeastOneConvert
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// No conversion.
name|initTopLevelField
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|sourceTypeInfo
argument_list|,
name|dataTypePhysicalVariations
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|includedIndices
index|[
name|includedCount
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
comment|// Optimizing for readField?
if|if
condition|(
name|includedCount
operator|<
name|columnCount
operator|&&
name|deserializeRead
operator|.
name|isReadFieldSupported
argument_list|()
condition|)
block|{
name|useReadField
operator|=
literal|true
expr_stmt|;
name|readFieldLogicalIndices
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|includedIndices
argument_list|,
name|includedCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|atLeastOneConvert
condition|)
block|{
comment|// Let the VectorAssignRow class do the conversion.
name|convertVectorAssignRow
operator|=
operator|new
name|VectorAssignRow
argument_list|()
expr_stmt|;
name|convertVectorAssignRow
operator|.
name|initConversion
argument_list|(
name|sourceTypeInfos
argument_list|,
name|targetTypeInfos
argument_list|,
name|columnsToIncludeTruncated
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|HiveException
block|{
name|init
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|storePrimitiveRowColumn
parameter_list|(
name|ColumnVector
name|colVector
parameter_list|,
name|Field
name|field
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|boolean
name|canRetainByteRef
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|field
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VOID
case|:
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
return|return;
case|case
name|BOOLEAN
case|:
operator|(
operator|(
name|LongColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
name|deserializeRead
operator|.
name|currentBoolean
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
operator|(
operator|(
name|LongColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|deserializeRead
operator|.
name|currentByte
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
operator|(
operator|(
name|LongColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|deserializeRead
operator|.
name|currentShort
expr_stmt|;
break|break;
case|case
name|INT
case|:
operator|(
operator|(
name|LongColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|deserializeRead
operator|.
name|currentInt
expr_stmt|;
break|break;
case|case
name|LONG
case|:
operator|(
operator|(
name|LongColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|deserializeRead
operator|.
name|currentLong
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
operator|(
operator|(
name|TimestampColumnVector
operator|)
name|colVector
operator|)
operator|.
name|set
argument_list|(
name|batchIndex
argument_list|,
name|deserializeRead
operator|.
name|currentTimestampWritable
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
operator|(
operator|(
name|LongColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|deserializeRead
operator|.
name|currentDateWritable
operator|.
name|getDays
argument_list|()
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|deserializeRead
operator|.
name|currentFloat
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|deserializeRead
operator|.
name|currentDouble
expr_stmt|;
break|break;
case|case
name|BINARY
case|:
case|case
name|STRING
case|:
block|{
specifier|final
name|BytesColumnVector
name|bytesColVec
init|=
operator|(
operator|(
name|BytesColumnVector
operator|)
name|colVector
operator|)
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|currentExternalBufferNeeded
condition|)
block|{
name|bytesColVec
operator|.
name|ensureValPreallocated
argument_list|(
name|deserializeRead
operator|.
name|currentExternalBufferNeededLen
argument_list|)
expr_stmt|;
name|deserializeRead
operator|.
name|copyToExternalBuffer
argument_list|(
name|bytesColVec
operator|.
name|getValPreallocatedBytes
argument_list|()
argument_list|,
name|bytesColVec
operator|.
name|getValPreallocatedStart
argument_list|()
argument_list|)
expr_stmt|;
name|bytesColVec
operator|.
name|setValPreallocated
argument_list|(
name|batchIndex
argument_list|,
name|deserializeRead
operator|.
name|currentExternalBufferNeededLen
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|canRetainByteRef
operator|&&
name|inputBytes
operator|==
name|deserializeRead
operator|.
name|currentBytes
condition|)
block|{
name|bytesColVec
operator|.
name|setRef
argument_list|(
name|batchIndex
argument_list|,
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|deserializeRead
operator|.
name|currentBytesLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bytesColVec
operator|.
name|setVal
argument_list|(
name|batchIndex
argument_list|,
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|deserializeRead
operator|.
name|currentBytesLength
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|VARCHAR
case|:
block|{
comment|// Use the basic STRING bytes read to get access, then use our optimal truncate/trim method
comment|// that does not use Java String objects.
specifier|final
name|BytesColumnVector
name|bytesColVec
init|=
operator|(
operator|(
name|BytesColumnVector
operator|)
name|colVector
operator|)
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|currentExternalBufferNeeded
condition|)
block|{
comment|// Write directly into our BytesColumnVector value buffer.
name|bytesColVec
operator|.
name|ensureValPreallocated
argument_list|(
name|deserializeRead
operator|.
name|currentExternalBufferNeededLen
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|convertBuffer
init|=
name|bytesColVec
operator|.
name|getValPreallocatedBytes
argument_list|()
decl_stmt|;
specifier|final
name|int
name|convertBufferStart
init|=
name|bytesColVec
operator|.
name|getValPreallocatedStart
argument_list|()
decl_stmt|;
name|deserializeRead
operator|.
name|copyToExternalBuffer
argument_list|(
name|convertBuffer
argument_list|,
name|convertBufferStart
argument_list|)
expr_stmt|;
name|bytesColVec
operator|.
name|setValPreallocated
argument_list|(
name|batchIndex
argument_list|,
name|StringExpr
operator|.
name|truncate
argument_list|(
name|convertBuffer
argument_list|,
name|convertBufferStart
argument_list|,
name|deserializeRead
operator|.
name|currentExternalBufferNeededLen
argument_list|,
name|field
operator|.
name|getMaxLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|canRetainByteRef
operator|&&
name|inputBytes
operator|==
name|deserializeRead
operator|.
name|currentBytes
condition|)
block|{
name|bytesColVec
operator|.
name|setRef
argument_list|(
name|batchIndex
argument_list|,
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|StringExpr
operator|.
name|truncate
argument_list|(
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|deserializeRead
operator|.
name|currentBytesLength
argument_list|,
name|field
operator|.
name|getMaxLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bytesColVec
operator|.
name|setVal
argument_list|(
name|batchIndex
argument_list|,
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|StringExpr
operator|.
name|truncate
argument_list|(
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|deserializeRead
operator|.
name|currentBytesLength
argument_list|,
name|field
operator|.
name|getMaxLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|CHAR
case|:
block|{
comment|// Use the basic STRING bytes read to get access, then use our optimal truncate/trim method
comment|// that does not use Java String objects.
specifier|final
name|BytesColumnVector
name|bytesColVec
init|=
operator|(
operator|(
name|BytesColumnVector
operator|)
name|colVector
operator|)
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|currentExternalBufferNeeded
condition|)
block|{
comment|// Write directly into our BytesColumnVector value buffer.
name|bytesColVec
operator|.
name|ensureValPreallocated
argument_list|(
name|deserializeRead
operator|.
name|currentExternalBufferNeededLen
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|convertBuffer
init|=
name|bytesColVec
operator|.
name|getValPreallocatedBytes
argument_list|()
decl_stmt|;
specifier|final
name|int
name|convertBufferStart
init|=
name|bytesColVec
operator|.
name|getValPreallocatedStart
argument_list|()
decl_stmt|;
name|deserializeRead
operator|.
name|copyToExternalBuffer
argument_list|(
name|convertBuffer
argument_list|,
name|convertBufferStart
argument_list|)
expr_stmt|;
name|bytesColVec
operator|.
name|setValPreallocated
argument_list|(
name|batchIndex
argument_list|,
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|convertBuffer
argument_list|,
name|convertBufferStart
argument_list|,
name|deserializeRead
operator|.
name|currentExternalBufferNeededLen
argument_list|,
name|field
operator|.
name|getMaxLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|canRetainByteRef
operator|&&
name|inputBytes
operator|==
name|deserializeRead
operator|.
name|currentBytes
condition|)
block|{
name|bytesColVec
operator|.
name|setRef
argument_list|(
name|batchIndex
argument_list|,
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|deserializeRead
operator|.
name|currentBytesLength
argument_list|,
name|field
operator|.
name|getMaxLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bytesColVec
operator|.
name|setVal
argument_list|(
name|batchIndex
argument_list|,
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|deserializeRead
operator|.
name|currentBytesLength
argument_list|,
name|field
operator|.
name|getMaxLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DECIMAL
case|:
if|if
condition|(
name|field
operator|.
name|getDataTypePhysicalVariation
argument_list|()
operator|==
name|DataTypePhysicalVariation
operator|.
name|DECIMAL_64
condition|)
block|{
operator|(
operator|(
name|Decimal64ColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|deserializeRead
operator|.
name|currentDecimal64
expr_stmt|;
block|}
else|else
block|{
comment|// The DecimalColumnVector set method will quickly copy the deserialized decimal writable fields.
operator|(
operator|(
name|DecimalColumnVector
operator|)
name|colVector
operator|)
operator|.
name|set
argument_list|(
name|batchIndex
argument_list|,
name|deserializeRead
operator|.
name|currentHiveDecimalWritable
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
operator|(
operator|(
name|LongColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|deserializeRead
operator|.
name|currentHiveIntervalYearMonthWritable
operator|.
name|getHiveIntervalYearMonth
argument_list|()
operator|.
name|getTotalMonths
argument_list|()
expr_stmt|;
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
operator|(
operator|(
name|IntervalDayTimeColumnVector
operator|)
name|colVector
operator|)
operator|.
name|set
argument_list|(
name|batchIndex
argument_list|,
name|deserializeRead
operator|.
name|currentHiveIntervalDayTimeWritable
operator|.
name|getHiveIntervalDayTime
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Primitive category "
operator|+
name|field
operator|.
name|getPrimitiveCategory
argument_list|()
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ComplexTypeHelper
block|{   }
specifier|private
specifier|static
class|class
name|ListComplexTypeHelper
extends|extends
name|ComplexTypeHelper
block|{
specifier|private
name|Field
name|elementField
decl_stmt|;
specifier|public
name|ListComplexTypeHelper
parameter_list|(
name|Field
name|elementField
parameter_list|)
block|{
name|this
operator|.
name|elementField
operator|=
name|elementField
expr_stmt|;
block|}
specifier|public
name|Field
name|getElementField
parameter_list|()
block|{
return|return
name|elementField
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MapComplexTypeHelper
extends|extends
name|ComplexTypeHelper
block|{
specifier|private
name|Field
name|keyField
decl_stmt|;
specifier|private
name|Field
name|valueField
decl_stmt|;
specifier|public
name|MapComplexTypeHelper
parameter_list|(
name|Field
name|keyField
parameter_list|,
name|Field
name|valueField
parameter_list|)
block|{
name|this
operator|.
name|keyField
operator|=
name|keyField
expr_stmt|;
name|this
operator|.
name|valueField
operator|=
name|valueField
expr_stmt|;
block|}
specifier|public
name|Field
name|getKeyField
parameter_list|()
block|{
return|return
name|keyField
return|;
block|}
specifier|public
name|Field
name|getValueField
parameter_list|()
block|{
return|return
name|valueField
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|FieldsComplexTypeHelper
extends|extends
name|ComplexTypeHelper
block|{
specifier|private
name|Field
index|[]
name|fields
decl_stmt|;
specifier|public
name|FieldsComplexTypeHelper
parameter_list|(
name|Field
index|[]
name|fields
parameter_list|)
block|{
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
block|}
specifier|public
name|Field
index|[]
name|getFields
parameter_list|()
block|{
return|return
name|fields
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|StructComplexTypeHelper
extends|extends
name|FieldsComplexTypeHelper
block|{
specifier|public
name|StructComplexTypeHelper
parameter_list|(
name|Field
index|[]
name|fields
parameter_list|)
block|{
name|super
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|UnionComplexTypeHelper
extends|extends
name|FieldsComplexTypeHelper
block|{
specifier|public
name|UnionComplexTypeHelper
parameter_list|(
name|Field
index|[]
name|fields
parameter_list|)
block|{
name|super
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
block|}
comment|// UNDONE: Presumption of *append*
specifier|private
name|void
name|storeComplexFieldRowColumn
parameter_list|(
name|ColumnVector
name|fieldColVector
parameter_list|,
name|Field
name|field
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|boolean
name|canRetainByteRef
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|deserializeRead
operator|.
name|readComplexField
argument_list|()
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|fieldColVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|field
operator|.
name|getIsPrimitive
argument_list|()
condition|)
block|{
name|storePrimitiveRowColumn
argument_list|(
name|fieldColVector
argument_list|,
name|field
argument_list|,
name|batchIndex
argument_list|,
name|canRetainByteRef
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|field
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|LIST
case|:
name|storeListRowColumn
argument_list|(
name|fieldColVector
argument_list|,
name|field
argument_list|,
name|batchIndex
argument_list|,
name|canRetainByteRef
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAP
case|:
name|storeMapRowColumn
argument_list|(
name|fieldColVector
argument_list|,
name|field
argument_list|,
name|batchIndex
argument_list|,
name|canRetainByteRef
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRUCT
case|:
name|storeStructRowColumn
argument_list|(
name|fieldColVector
argument_list|,
name|field
argument_list|,
name|batchIndex
argument_list|,
name|canRetainByteRef
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNION
case|:
name|storeUnionRowColumn
argument_list|(
name|fieldColVector
argument_list|,
name|field
argument_list|,
name|batchIndex
argument_list|,
name|canRetainByteRef
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Category "
operator|+
name|field
operator|.
name|getCategory
argument_list|()
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
block|}
name|fieldColVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
specifier|private
name|void
name|storeListRowColumn
parameter_list|(
name|ColumnVector
name|colVector
parameter_list|,
name|Field
name|field
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|boolean
name|canRetainByteRef
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ListColumnVector
name|listColVector
init|=
operator|(
name|ListColumnVector
operator|)
name|colVector
decl_stmt|;
specifier|final
name|ColumnVector
name|elementColVector
init|=
name|listColVector
operator|.
name|child
decl_stmt|;
name|int
name|offset
init|=
name|listColVector
operator|.
name|childCount
decl_stmt|;
name|listColVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
name|listColVector
operator|.
name|offsets
index|[
name|batchIndex
index|]
operator|=
name|offset
expr_stmt|;
specifier|final
name|ListComplexTypeHelper
name|listHelper
init|=
operator|(
name|ListComplexTypeHelper
operator|)
name|field
operator|.
name|getComplexHelper
argument_list|()
decl_stmt|;
name|int
name|listLength
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|deserializeRead
operator|.
name|isNextComplexMultiValue
argument_list|()
condition|)
block|{
comment|// Ensure child size.
specifier|final
name|int
name|childCapacity
init|=
name|listColVector
operator|.
name|child
operator|.
name|isNull
operator|.
name|length
decl_stmt|;
specifier|final
name|int
name|childCount
init|=
name|listColVector
operator|.
name|childCount
decl_stmt|;
if|if
condition|(
name|childCapacity
operator|<
name|childCount
operator|/
literal|0.75
condition|)
block|{
name|listColVector
operator|.
name|child
operator|.
name|ensureSize
argument_list|(
name|childCapacity
operator|*
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|storeComplexFieldRowColumn
argument_list|(
name|elementColVector
argument_list|,
name|listHelper
operator|.
name|getElementField
argument_list|()
argument_list|,
name|offset
argument_list|,
name|canRetainByteRef
argument_list|)
expr_stmt|;
name|offset
operator|++
expr_stmt|;
name|listLength
operator|++
expr_stmt|;
block|}
name|listColVector
operator|.
name|childCount
operator|+=
name|listLength
expr_stmt|;
name|listColVector
operator|.
name|lengths
index|[
name|batchIndex
index|]
operator|=
name|listLength
expr_stmt|;
block|}
specifier|private
name|void
name|storeMapRowColumn
parameter_list|(
name|ColumnVector
name|colVector
parameter_list|,
name|Field
name|field
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|boolean
name|canRetainByteRef
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MapColumnVector
name|mapColVector
init|=
operator|(
name|MapColumnVector
operator|)
name|colVector
decl_stmt|;
specifier|final
name|MapComplexTypeHelper
name|mapHelper
init|=
operator|(
name|MapComplexTypeHelper
operator|)
name|field
operator|.
name|getComplexHelper
argument_list|()
decl_stmt|;
specifier|final
name|ColumnVector
name|keysColVector
init|=
name|mapColVector
operator|.
name|keys
decl_stmt|;
specifier|final
name|ColumnVector
name|valuesColVector
init|=
name|mapColVector
operator|.
name|values
decl_stmt|;
name|int
name|offset
init|=
name|mapColVector
operator|.
name|childCount
decl_stmt|;
name|mapColVector
operator|.
name|offsets
index|[
name|batchIndex
index|]
operator|=
name|offset
expr_stmt|;
name|mapColVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
name|int
name|keyValueCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|deserializeRead
operator|.
name|isNextComplexMultiValue
argument_list|()
condition|)
block|{
comment|// Ensure child size.
specifier|final
name|int
name|childCapacity
init|=
name|mapColVector
operator|.
name|keys
operator|.
name|isNull
operator|.
name|length
decl_stmt|;
specifier|final
name|int
name|childCount
init|=
name|mapColVector
operator|.
name|childCount
decl_stmt|;
if|if
condition|(
name|childCapacity
operator|<
name|childCount
operator|/
literal|0.75
condition|)
block|{
name|mapColVector
operator|.
name|keys
operator|.
name|ensureSize
argument_list|(
name|childCapacity
operator|*
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mapColVector
operator|.
name|values
operator|.
name|ensureSize
argument_list|(
name|childCapacity
operator|*
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Key.
name|storeComplexFieldRowColumn
argument_list|(
name|keysColVector
argument_list|,
name|mapHelper
operator|.
name|getKeyField
argument_list|()
argument_list|,
name|offset
argument_list|,
name|canRetainByteRef
argument_list|)
expr_stmt|;
comment|// Value.
name|storeComplexFieldRowColumn
argument_list|(
name|valuesColVector
argument_list|,
name|mapHelper
operator|.
name|getValueField
argument_list|()
argument_list|,
name|offset
argument_list|,
name|canRetainByteRef
argument_list|)
expr_stmt|;
name|offset
operator|++
expr_stmt|;
name|keyValueCount
operator|++
expr_stmt|;
block|}
name|mapColVector
operator|.
name|childCount
operator|+=
name|keyValueCount
expr_stmt|;
name|mapColVector
operator|.
name|lengths
index|[
name|batchIndex
index|]
operator|=
name|keyValueCount
expr_stmt|;
block|}
specifier|private
name|void
name|storeStructRowColumn
parameter_list|(
name|ColumnVector
name|colVector
parameter_list|,
name|Field
name|field
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|boolean
name|canRetainByteRef
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|StructColumnVector
name|structColVector
init|=
operator|(
name|StructColumnVector
operator|)
name|colVector
decl_stmt|;
specifier|final
name|ColumnVector
index|[]
name|colVectorFields
init|=
name|structColVector
operator|.
name|fields
decl_stmt|;
specifier|final
name|StructComplexTypeHelper
name|structHelper
init|=
operator|(
name|StructComplexTypeHelper
operator|)
name|field
operator|.
name|getComplexHelper
argument_list|()
decl_stmt|;
specifier|final
name|Field
index|[]
name|fields
init|=
name|structHelper
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|structColVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ColumnVector
name|colVectorField
range|:
name|colVectorFields
control|)
block|{
name|storeComplexFieldRowColumn
argument_list|(
name|colVectorField
argument_list|,
name|fields
index|[
name|i
index|]
argument_list|,
name|batchIndex
argument_list|,
name|canRetainByteRef
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|deserializeRead
operator|.
name|finishComplexVariableFieldsType
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|storeUnionRowColumn
parameter_list|(
name|ColumnVector
name|colVector
parameter_list|,
name|Field
name|field
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|boolean
name|canRetainByteRef
parameter_list|)
throws|throws
name|IOException
block|{
name|deserializeRead
operator|.
name|readComplexField
argument_list|()
expr_stmt|;
comment|// The read field of the Union gives us its tag.
specifier|final
name|int
name|tag
init|=
name|deserializeRead
operator|.
name|currentInt
decl_stmt|;
specifier|final
name|UnionColumnVector
name|unionColVector
init|=
operator|(
name|UnionColumnVector
operator|)
name|colVector
decl_stmt|;
specifier|final
name|ColumnVector
index|[]
name|colVectorFields
init|=
name|unionColVector
operator|.
name|fields
decl_stmt|;
specifier|final
name|UnionComplexTypeHelper
name|unionHelper
init|=
operator|(
name|UnionComplexTypeHelper
operator|)
name|field
operator|.
name|getComplexHelper
argument_list|()
decl_stmt|;
name|unionColVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
name|unionColVector
operator|.
name|tags
index|[
name|batchIndex
index|]
operator|=
name|tag
expr_stmt|;
name|storeComplexFieldRowColumn
argument_list|(
name|colVectorFields
index|[
name|tag
index|]
argument_list|,
name|unionHelper
operator|.
name|getFields
argument_list|()
index|[
name|tag
index|]
argument_list|,
name|batchIndex
argument_list|,
name|canRetainByteRef
argument_list|)
expr_stmt|;
name|deserializeRead
operator|.
name|finishComplexVariableFieldsType
argument_list|()
expr_stmt|;
block|}
comment|/**    * Store one row column value that is the current value in deserializeRead.    *    * @param batch    * @param batchIndex    * @param logicalColumnIndex    * @param canRetainByteRef    Specify true when it is safe to retain references to the bytes    *                            source for DeserializeRead.  I.e. the STRING, CHAR/VARCHAR data    *                            can be set in BytesColumnVector with setRef instead of with setVal    *                            which copies data.  An example of a safe usage is referring to bytes    *                            in a hash table entry that is immutable.    * @throws IOException    */
specifier|private
name|void
name|storeRowColumn
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|Field
name|field
parameter_list|,
name|int
name|logicalColumnIndex
parameter_list|,
name|boolean
name|canRetainByteRef
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|projectionColumnNum
init|=
name|projectionColumnNums
index|[
name|logicalColumnIndex
index|]
decl_stmt|;
specifier|final
name|ColumnVector
name|colVector
init|=
name|batch
operator|.
name|cols
index|[
name|projectionColumnNum
index|]
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|getIsPrimitive
argument_list|()
condition|)
block|{
name|storePrimitiveRowColumn
argument_list|(
name|colVector
argument_list|,
name|field
argument_list|,
name|batchIndex
argument_list|,
name|canRetainByteRef
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|field
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|LIST
case|:
name|storeListRowColumn
argument_list|(
name|colVector
argument_list|,
name|field
argument_list|,
name|batchIndex
argument_list|,
name|canRetainByteRef
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAP
case|:
name|storeMapRowColumn
argument_list|(
name|colVector
argument_list|,
name|field
argument_list|,
name|batchIndex
argument_list|,
name|canRetainByteRef
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRUCT
case|:
name|storeStructRowColumn
argument_list|(
name|colVector
argument_list|,
name|field
argument_list|,
name|batchIndex
argument_list|,
name|canRetainByteRef
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNION
case|:
name|storeUnionRowColumn
argument_list|(
name|colVector
argument_list|,
name|field
argument_list|,
name|batchIndex
argument_list|,
name|canRetainByteRef
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Category "
operator|+
name|field
operator|.
name|getCategory
argument_list|()
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
block|}
comment|// We always set the null flag to false when there is a value.
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Convert one row column value that is the current value in deserializeRead.    *    * We deserialize into a writable and then pass that writable to an instance of VectorAssignRow    * to convert the writable to the target data type and assign it into the VectorizedRowBatch.    *    * @param batch    * @param batchIndex    * @param logicalColumnIndex    * @throws IOException    */
specifier|private
name|void
name|convertRowColumn
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|Field
name|field
parameter_list|,
name|int
name|logicalColumnIndex
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|projectionColumnIndex
init|=
name|projectionColumnNums
index|[
name|logicalColumnIndex
index|]
decl_stmt|;
specifier|final
name|ColumnVector
name|colVector
init|=
name|batch
operator|.
name|cols
index|[
name|projectionColumnIndex
index|]
decl_stmt|;
specifier|final
name|Object
name|convertSourceWritable
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|getIsPrimitive
argument_list|()
condition|)
block|{
name|convertSourceWritable
operator|=
name|convertPrimitiveRowColumn
argument_list|(
name|batchIndex
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|field
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|LIST
case|:
name|convertSourceWritable
operator|=
name|convertListRowColumn
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|,
name|field
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAP
case|:
name|convertSourceWritable
operator|=
name|convertMapRowColumn
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|,
name|field
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRUCT
case|:
name|convertSourceWritable
operator|=
name|convertStructRowColumn
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|,
name|field
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNION
case|:
name|convertSourceWritable
operator|=
name|convertUnionRowColumn
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|,
name|field
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
comment|/*      * Convert our source object we just read into the target object and store that in the      * VectorizedRowBatch.      */
name|convertVectorAssignRow
operator|.
name|assignConvertRowColumn
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|,
name|logicalColumnIndex
argument_list|,
name|convertSourceWritable
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Object
name|convertComplexFieldRowColumn
parameter_list|(
name|ColumnVector
name|colVector
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|Field
name|field
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|deserializeRead
operator|.
name|readComplexField
argument_list|()
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|getIsPrimitive
argument_list|()
condition|)
block|{
return|return
name|convertPrimitiveRowColumn
argument_list|(
name|batchIndex
argument_list|,
name|field
argument_list|)
return|;
block|}
switch|switch
condition|(
name|field
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|LIST
case|:
return|return
name|convertListRowColumn
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|,
name|field
argument_list|)
return|;
case|case
name|MAP
case|:
return|return
name|convertMapRowColumn
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|,
name|field
argument_list|)
return|;
case|case
name|STRUCT
case|:
return|return
name|convertStructRowColumn
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|,
name|field
argument_list|)
return|;
case|case
name|UNION
case|:
return|return
name|convertUnionRowColumn
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|,
name|field
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
specifier|private
name|Object
name|convertPrimitiveRowColumn
parameter_list|(
name|int
name|batchIndex
parameter_list|,
name|Field
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
name|writable
init|=
name|field
operator|.
name|getConversionWritable
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|field
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VOID
case|:
name|writable
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|BOOLEAN
case|:
block|{
if|if
condition|(
name|writable
operator|==
literal|null
condition|)
block|{
name|writable
operator|=
operator|new
name|BooleanWritable
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|BooleanWritable
operator|)
name|writable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentBoolean
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BYTE
case|:
block|{
if|if
condition|(
name|writable
operator|==
literal|null
condition|)
block|{
name|writable
operator|=
operator|new
name|ByteWritable
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|ByteWritable
operator|)
name|writable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentByte
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SHORT
case|:
block|{
if|if
condition|(
name|writable
operator|==
literal|null
condition|)
block|{
name|writable
operator|=
operator|new
name|ShortWritable
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|ShortWritable
operator|)
name|writable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentShort
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INT
case|:
block|{
if|if
condition|(
name|writable
operator|==
literal|null
condition|)
block|{
name|writable
operator|=
operator|new
name|IntWritable
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|IntWritable
operator|)
name|writable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentInt
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LONG
case|:
block|{
if|if
condition|(
name|writable
operator|==
literal|null
condition|)
block|{
name|writable
operator|=
operator|new
name|LongWritable
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|LongWritable
operator|)
name|writable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentLong
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
block|{
if|if
condition|(
name|writable
operator|==
literal|null
condition|)
block|{
name|writable
operator|=
operator|new
name|TimestampWritable
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|TimestampWritable
operator|)
name|writable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentTimestampWritable
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DATE
case|:
block|{
if|if
condition|(
name|writable
operator|==
literal|null
condition|)
block|{
name|writable
operator|=
operator|new
name|DateWritable
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|DateWritable
operator|)
name|writable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentDateWritable
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FLOAT
case|:
block|{
if|if
condition|(
name|writable
operator|==
literal|null
condition|)
block|{
name|writable
operator|=
operator|new
name|FloatWritable
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|FloatWritable
operator|)
name|writable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentFloat
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DOUBLE
case|:
block|{
if|if
condition|(
name|writable
operator|==
literal|null
condition|)
block|{
name|writable
operator|=
operator|new
name|DoubleWritable
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|DoubleWritable
operator|)
name|writable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentDouble
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BINARY
case|:
block|{
if|if
condition|(
name|writable
operator|==
literal|null
condition|)
block|{
name|writable
operator|=
operator|new
name|BytesWritable
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|deserializeRead
operator|.
name|currentBytes
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"null binary entry: batchIndex "
operator|+
name|batchIndex
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|BytesWritable
operator|)
name|writable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|deserializeRead
operator|.
name|currentBytesLength
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|STRING
case|:
block|{
if|if
condition|(
name|writable
operator|==
literal|null
condition|)
block|{
name|writable
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|deserializeRead
operator|.
name|currentBytes
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"null string entry: batchIndex "
operator|+
name|batchIndex
argument_list|)
throw|;
block|}
comment|// Use org.apache.hadoop.io.Text as our helper to go from byte[] to String.
operator|(
operator|(
name|Text
operator|)
name|writable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|deserializeRead
operator|.
name|currentBytesLength
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|VARCHAR
case|:
block|{
if|if
condition|(
name|writable
operator|==
literal|null
condition|)
block|{
name|writable
operator|=
operator|new
name|HiveVarcharWritable
argument_list|()
expr_stmt|;
block|}
comment|// Use the basic STRING bytes read to get access, then use our optimal truncate/trim method
comment|// that does not use Java String objects.
if|if
condition|(
name|deserializeRead
operator|.
name|currentBytes
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"null varchar entry: batchIndex "
operator|+
name|batchIndex
argument_list|)
throw|;
block|}
name|int
name|adjustedLength
init|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|deserializeRead
operator|.
name|currentBytesLength
argument_list|,
name|field
operator|.
name|getMaxLength
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|HiveVarcharWritable
operator|)
name|writable
operator|)
operator|.
name|set
argument_list|(
operator|new
name|String
argument_list|(
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|adjustedLength
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CHAR
case|:
block|{
if|if
condition|(
name|writable
operator|==
literal|null
condition|)
block|{
name|writable
operator|=
operator|new
name|HiveCharWritable
argument_list|()
expr_stmt|;
block|}
comment|// Use the basic STRING bytes read to get access, then use our optimal truncate/trim method
comment|// that does not use Java String objects.
if|if
condition|(
name|deserializeRead
operator|.
name|currentBytes
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"null char entry: batchIndex "
operator|+
name|batchIndex
argument_list|)
throw|;
block|}
name|int
name|adjustedLength
init|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|deserializeRead
operator|.
name|currentBytesLength
argument_list|,
name|field
operator|.
name|getMaxLength
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|HiveCharWritable
operator|)
name|writable
operator|)
operator|.
name|set
argument_list|(
operator|new
name|String
argument_list|(
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|adjustedLength
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DECIMAL
case|:
block|{
if|if
condition|(
name|writable
operator|==
literal|null
condition|)
block|{
name|writable
operator|=
operator|new
name|HiveDecimalWritable
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|HiveDecimalWritable
operator|)
name|writable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentHiveDecimalWritable
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
block|{
if|if
condition|(
name|writable
operator|==
literal|null
condition|)
block|{
name|writable
operator|=
operator|new
name|HiveIntervalYearMonthWritable
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|HiveIntervalYearMonthWritable
operator|)
name|writable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentHiveIntervalYearMonthWritable
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
block|{
if|if
condition|(
name|writable
operator|==
literal|null
condition|)
block|{
name|writable
operator|=
operator|new
name|HiveIntervalDayTimeWritable
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|HiveIntervalDayTimeWritable
operator|)
name|writable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentHiveIntervalDayTimeWritable
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Primitive category "
operator|+
name|field
operator|.
name|getPrimitiveCategory
argument_list|()
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
return|return
name|writable
return|;
block|}
specifier|private
name|Object
name|convertListRowColumn
parameter_list|(
name|ColumnVector
name|colVector
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|Field
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SettableListObjectInspector
name|listOI
init|=
operator|(
name|SettableListObjectInspector
operator|)
name|field
operator|.
name|objectInspector
decl_stmt|;
specifier|final
name|ListComplexTypeHelper
name|listHelper
init|=
operator|(
name|ListComplexTypeHelper
operator|)
name|field
operator|.
name|getComplexHelper
argument_list|()
decl_stmt|;
specifier|final
name|Field
name|elementField
init|=
name|listHelper
operator|.
name|getElementField
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|tempList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ListColumnVector
name|listColumnVector
init|=
operator|(
name|ListColumnVector
operator|)
name|colVector
decl_stmt|;
while|while
condition|(
name|deserializeRead
operator|.
name|isNextComplexMultiValue
argument_list|()
condition|)
block|{
name|tempList
operator|.
name|add
argument_list|(
name|convertComplexFieldRowColumn
argument_list|(
name|listColumnVector
operator|.
name|child
argument_list|,
name|batchIndex
argument_list|,
name|elementField
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|size
init|=
name|tempList
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|list
init|=
name|listOI
operator|.
name|create
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|listOI
operator|.
name|set
argument_list|(
name|list
argument_list|,
name|i
argument_list|,
name|tempList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|private
name|Object
name|convertMapRowColumn
parameter_list|(
name|ColumnVector
name|colVector
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|Field
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SettableMapObjectInspector
name|mapOI
init|=
operator|(
name|SettableMapObjectInspector
operator|)
name|field
operator|.
name|objectInspector
decl_stmt|;
specifier|final
name|MapComplexTypeHelper
name|mapHelper
init|=
operator|(
name|MapComplexTypeHelper
operator|)
name|field
operator|.
name|getComplexHelper
argument_list|()
decl_stmt|;
specifier|final
name|Field
name|keyField
init|=
name|mapHelper
operator|.
name|getKeyField
argument_list|()
decl_stmt|;
specifier|final
name|Field
name|valueField
init|=
name|mapHelper
operator|.
name|getValueField
argument_list|()
decl_stmt|;
specifier|final
name|MapColumnVector
name|mapColumnVector
init|=
operator|(
name|MapColumnVector
operator|)
name|colVector
decl_stmt|;
specifier|final
name|Object
name|map
init|=
name|mapOI
operator|.
name|create
argument_list|()
decl_stmt|;
while|while
condition|(
name|deserializeRead
operator|.
name|isNextComplexMultiValue
argument_list|()
condition|)
block|{
specifier|final
name|Object
name|key
init|=
name|convertComplexFieldRowColumn
argument_list|(
name|mapColumnVector
operator|.
name|keys
argument_list|,
name|batchIndex
argument_list|,
name|keyField
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|value
init|=
name|convertComplexFieldRowColumn
argument_list|(
name|mapColumnVector
operator|.
name|values
argument_list|,
name|batchIndex
argument_list|,
name|valueField
argument_list|)
decl_stmt|;
name|mapOI
operator|.
name|put
argument_list|(
name|map
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
specifier|private
name|Object
name|convertStructRowColumn
parameter_list|(
name|ColumnVector
name|colVector
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|Field
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SettableStructObjectInspector
name|structOI
init|=
operator|(
name|SettableStructObjectInspector
operator|)
name|field
operator|.
name|objectInspector
decl_stmt|;
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|structFields
init|=
name|structOI
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
specifier|final
name|StructComplexTypeHelper
name|structHelper
init|=
operator|(
name|StructComplexTypeHelper
operator|)
name|field
operator|.
name|getComplexHelper
argument_list|()
decl_stmt|;
specifier|final
name|Field
index|[]
name|fields
init|=
name|structHelper
operator|.
name|getFields
argument_list|()
decl_stmt|;
specifier|final
name|StructColumnVector
name|structColumnVector
init|=
operator|(
name|StructColumnVector
operator|)
name|colVector
decl_stmt|;
specifier|final
name|Object
name|struct
init|=
name|structOI
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Object
name|fieldObject
init|=
name|convertComplexFieldRowColumn
argument_list|(
name|structColumnVector
operator|.
name|fields
index|[
name|i
index|]
argument_list|,
name|batchIndex
argument_list|,
name|fields
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|structOI
operator|.
name|setStructFieldData
argument_list|(
name|struct
argument_list|,
name|structFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|fieldObject
argument_list|)
expr_stmt|;
block|}
name|deserializeRead
operator|.
name|finishComplexVariableFieldsType
argument_list|()
expr_stmt|;
return|return
name|struct
return|;
block|}
specifier|private
name|Object
name|convertUnionRowColumn
parameter_list|(
name|ColumnVector
name|colVector
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|Field
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SettableUnionObjectInspector
name|unionOI
init|=
operator|(
name|SettableUnionObjectInspector
operator|)
name|field
operator|.
name|objectInspector
decl_stmt|;
specifier|final
name|UnionComplexTypeHelper
name|unionHelper
init|=
operator|(
name|UnionComplexTypeHelper
operator|)
name|field
operator|.
name|getComplexHelper
argument_list|()
decl_stmt|;
specifier|final
name|Field
index|[]
name|fields
init|=
name|unionHelper
operator|.
name|getFields
argument_list|()
decl_stmt|;
specifier|final
name|UnionColumnVector
name|unionColumnVector
init|=
operator|(
name|UnionColumnVector
operator|)
name|colVector
decl_stmt|;
specifier|final
name|Object
name|union
init|=
name|unionOI
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|final
name|int
name|tag
init|=
name|deserializeRead
operator|.
name|currentInt
decl_stmt|;
name|unionOI
operator|.
name|setFieldAndTag
argument_list|(
name|union
argument_list|,
operator|new
name|StandardUnion
argument_list|(
operator|(
name|byte
operator|)
name|tag
argument_list|,
name|convertComplexFieldRowColumn
argument_list|(
name|unionColumnVector
operator|.
name|fields
index|[
name|tag
index|]
argument_list|,
name|batchIndex
argument_list|,
name|fields
index|[
name|tag
index|]
argument_list|)
argument_list|)
argument_list|,
operator|(
name|byte
operator|)
name|tag
argument_list|)
expr_stmt|;
name|deserializeRead
operator|.
name|finishComplexVariableFieldsType
argument_list|()
expr_stmt|;
return|return
name|union
return|;
block|}
comment|/**    * Specify the range of bytes to deserialize in the next call to the deserialize method.    *    * @param bytes    * @param offset    * @param length    */
specifier|public
name|void
name|setBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|inputBytes
operator|=
name|bytes
expr_stmt|;
name|deserializeRead
operator|.
name|set
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deserialize a row from the range of bytes specified by setBytes.    *    * Use getDetailedReadPositionString to get detailed read position information to help    * diagnose exceptions that are thrown...    *    * This version of deserialize does not keep byte references to string/char/varchar/binary data    * type field.  The bytes are copied into the BytesColumnVector buffer with setVal.    * (See deserializeByRef below if keep references is safe).    *    * @param batch    * @param batchIndex    * @throws IOException    */
specifier|public
name|void
name|deserialize
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Pass false for canRetainByteRef since we will NOT be keeping byte references to the input
comment|// bytes with the BytesColumnVector.setRef method.
specifier|final
name|int
name|count
init|=
name|topLevelFields
operator|.
name|length
decl_stmt|;
name|Field
name|field
decl_stmt|;
if|if
condition|(
operator|!
name|useReadField
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|projectionColumnNum
init|=
name|projectionColumnNums
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|projectionColumnNum
operator|==
operator|-
literal|1
condition|)
block|{
comment|// We must read through fields we do not want.
name|deserializeRead
operator|.
name|skipNextField
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|deserializeRead
operator|.
name|readNextField
argument_list|()
condition|)
block|{
name|ColumnVector
name|colVector
init|=
name|batch
operator|.
name|cols
index|[
name|projectionColumnNum
index|]
decl_stmt|;
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|true
expr_stmt|;
name|colVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
continue|continue;
block|}
comment|// The current* members of deserializeRead have the field value.
name|field
operator|=
name|topLevelFields
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|getIsConvert
argument_list|()
condition|)
block|{
name|convertRowColumn
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|,
name|field
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|storeRowColumn
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|,
name|field
argument_list|,
name|i
argument_list|,
comment|/* canRetainByteRef */
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
specifier|final
name|int
name|readFieldCount
init|=
name|readFieldLogicalIndices
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|readFieldCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|logicalIndex
init|=
name|readFieldLogicalIndices
index|[
name|i
index|]
decl_stmt|;
comment|// Jump to the field we want and read it.
if|if
condition|(
operator|!
name|deserializeRead
operator|.
name|readField
argument_list|(
name|logicalIndex
argument_list|)
condition|)
block|{
name|ColumnVector
name|colVector
init|=
name|batch
operator|.
name|cols
index|[
name|projectionColumnNums
index|[
name|logicalIndex
index|]
index|]
decl_stmt|;
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|true
expr_stmt|;
name|colVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
continue|continue;
block|}
comment|// The current* members of deserializeRead have the field value.
name|field
operator|=
name|topLevelFields
index|[
name|logicalIndex
index|]
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|getIsConvert
argument_list|()
condition|)
block|{
name|convertRowColumn
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|,
name|field
argument_list|,
name|logicalIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|storeRowColumn
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|,
name|field
argument_list|,
name|logicalIndex
argument_list|,
comment|/* canRetainByteRef */
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Deserialize a row from the range of bytes specified by setBytes.    *    * Use this method instead of deserialize when it is safe to retain references to the bytes source    * for DeserializeRead.  I.e. the STRING, CHAR/VARCHAR data can be set in BytesColumnVector with    * setRef instead of with setVal which copies data.    *    * An example of a safe usage:    *   Referring to bytes in a hash table entry that is immutable.    *    * An example of a unsafe usage:    *   Referring to bytes in a reduce receive buffer that will be overwritten with new data.    *    * Use getDetailedReadPositionString to get detailed read position information to help    * diagnose exceptions that are thrown...    *    * @param batch    * @param batchIndex    * @throws IOException    */
specifier|public
name|void
name|deserializeByRef
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|count
init|=
name|topLevelFields
operator|.
name|length
decl_stmt|;
name|Field
name|field
decl_stmt|;
if|if
condition|(
operator|!
name|useReadField
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|projectionColumnNum
init|=
name|projectionColumnNums
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|projectionColumnNum
operator|==
operator|-
literal|1
condition|)
block|{
comment|// We must read through fields we do not want.
name|deserializeRead
operator|.
name|skipNextField
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|deserializeRead
operator|.
name|readNextField
argument_list|()
condition|)
block|{
name|ColumnVector
name|colVector
init|=
name|batch
operator|.
name|cols
index|[
name|projectionColumnNum
index|]
decl_stmt|;
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|true
expr_stmt|;
name|colVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
continue|continue;
block|}
comment|// The current* members of deserializeRead have the field value.
name|field
operator|=
name|topLevelFields
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|getIsConvert
argument_list|()
condition|)
block|{
name|convertRowColumn
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|,
name|field
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|storeRowColumn
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|,
name|field
argument_list|,
name|i
argument_list|,
comment|/* canRetainByteRef */
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
specifier|final
name|int
name|readFieldCount
init|=
name|readFieldLogicalIndices
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|readFieldCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|logicalIndex
init|=
name|readFieldLogicalIndices
index|[
name|i
index|]
decl_stmt|;
comment|// Jump to the field we want and read it.
if|if
condition|(
operator|!
name|deserializeRead
operator|.
name|readField
argument_list|(
name|logicalIndex
argument_list|)
condition|)
block|{
name|ColumnVector
name|colVector
init|=
name|batch
operator|.
name|cols
index|[
name|projectionColumnNums
index|[
name|logicalIndex
index|]
index|]
decl_stmt|;
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|true
expr_stmt|;
name|colVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
continue|continue;
block|}
comment|// The current* members of deserializeRead have the field value.
name|field
operator|=
name|topLevelFields
index|[
name|logicalIndex
index|]
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|getIsConvert
argument_list|()
condition|)
block|{
name|convertRowColumn
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|,
name|field
argument_list|,
name|logicalIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|storeRowColumn
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|,
name|field
argument_list|,
name|logicalIndex
argument_list|,
comment|/* canRetainByteRef */
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|String
name|getDetailedReadPositionString
parameter_list|()
block|{
return|return
name|deserializeRead
operator|.
name|getDetailedReadPositionString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

