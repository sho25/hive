begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|StringExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorPartitionConversion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|fast
operator|.
name|DeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalDayTimeWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalYearMonthWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|CharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * This class deserializes a serialization format into a row of a VectorizedRowBatch.  *  * The caller provides the hive type names and output column numbers in the order desired to  * deserialize.  *  * This class uses an provided DeserializeRead object to directly deserialize by reading  * field-by-field from a serialization format into the primitive values of the VectorizedRowBatch.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|VectorDeserializeRow
parameter_list|<
name|T
extends|extends
name|DeserializeRead
parameter_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VectorDeserializeRow
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|T
name|deserializeRead
decl_stmt|;
specifier|private
name|TypeInfo
index|[]
name|sourceTypeInfos
decl_stmt|;
specifier|public
name|VectorDeserializeRow
parameter_list|(
name|T
name|deserializeRead
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|deserializeRead
operator|=
name|deserializeRead
expr_stmt|;
name|sourceTypeInfos
operator|=
name|deserializeRead
operator|.
name|typeInfos
argument_list|()
expr_stmt|;
block|}
comment|// Not public since we must have the deserialize read object.
specifier|private
name|VectorDeserializeRow
parameter_list|()
block|{   }
comment|/*    * These members have information for deserializing a row into the VectorizedRowBatch    * columns.    *    * We say "source" because when there is conversion we are converting th deserialized source into    * a target data type.    */
name|boolean
index|[]
name|isConvert
decl_stmt|;
comment|// For each column, are we converting the row column?
name|int
index|[]
name|projectionColumnNums
decl_stmt|;
comment|// Assigning can be a subset of columns, so this is the projection --
comment|// the batch column numbers.
name|Category
index|[]
name|sourceCategories
decl_stmt|;
comment|// The data type category of each column being deserialized.
name|PrimitiveCategory
index|[]
name|sourcePrimitiveCategories
decl_stmt|;
comment|//The data type primitive category of each column being deserialized.
name|int
index|[]
name|maxLengths
decl_stmt|;
comment|// For the CHAR and VARCHAR data types, the maximum character length of
comment|// the columns.  Otherwise, 0.
comment|/*    * These members have information for data type conversion.    * Not defined if there is no conversion.    */
name|Writable
index|[]
name|convertSourceWritables
decl_stmt|;
comment|// Conversion requires source be placed in writable so we can call upon
comment|// VectorAssignRow to convert and assign the row column.
name|VectorAssignRow
name|convertVectorAssignRow
decl_stmt|;
comment|// Use its conversion ability.
comment|/*    * Allocate the source deserialization related arrays.    */
specifier|private
name|void
name|allocateArrays
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|isConvert
operator|=
operator|new
name|boolean
index|[
name|count
index|]
expr_stmt|;
name|projectionColumnNums
operator|=
operator|new
name|int
index|[
name|count
index|]
expr_stmt|;
name|sourceCategories
operator|=
operator|new
name|Category
index|[
name|count
index|]
expr_stmt|;
name|sourcePrimitiveCategories
operator|=
operator|new
name|PrimitiveCategory
index|[
name|count
index|]
expr_stmt|;
name|maxLengths
operator|=
operator|new
name|int
index|[
name|count
index|]
expr_stmt|;
block|}
comment|/*    * Allocate the conversion related arrays (optional).    */
specifier|private
name|void
name|allocateConvertArrays
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|convertSourceWritables
operator|=
operator|new
name|Writable
index|[
name|count
index|]
expr_stmt|;
block|}
comment|/*    * Initialize one column's source deserializtion related arrays.    */
specifier|private
name|void
name|initSourceEntry
parameter_list|(
name|int
name|logicalColumnIndex
parameter_list|,
name|int
name|projectionColumnNum
parameter_list|,
name|TypeInfo
name|sourceTypeInfo
parameter_list|)
block|{
name|isConvert
index|[
name|logicalColumnIndex
index|]
operator|=
literal|false
expr_stmt|;
name|projectionColumnNums
index|[
name|logicalColumnIndex
index|]
operator|=
name|projectionColumnNum
expr_stmt|;
name|Category
name|sourceCategory
init|=
name|sourceTypeInfo
operator|.
name|getCategory
argument_list|()
decl_stmt|;
name|sourceCategories
index|[
name|logicalColumnIndex
index|]
operator|=
name|sourceCategory
expr_stmt|;
if|if
condition|(
name|sourceCategory
operator|==
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
name|PrimitiveTypeInfo
name|sourcePrimitiveTypeInfo
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|sourceTypeInfo
decl_stmt|;
name|PrimitiveCategory
name|sourcePrimitiveCategory
init|=
name|sourcePrimitiveTypeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
name|sourcePrimitiveCategories
index|[
name|logicalColumnIndex
index|]
operator|=
name|sourcePrimitiveCategory
expr_stmt|;
switch|switch
condition|(
name|sourcePrimitiveCategory
condition|)
block|{
case|case
name|CHAR
case|:
name|maxLengths
index|[
name|logicalColumnIndex
index|]
operator|=
operator|(
operator|(
name|CharTypeInfo
operator|)
name|sourcePrimitiveTypeInfo
operator|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
break|break;
case|case
name|VARCHAR
case|:
name|maxLengths
index|[
name|logicalColumnIndex
index|]
operator|=
operator|(
operator|(
name|VarcharTypeInfo
operator|)
name|sourcePrimitiveTypeInfo
operator|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
break|break;
default|default:
comment|// No additional data type specific setting.
break|break;
block|}
block|}
else|else
block|{
comment|// We don't currently support complex types.
name|Preconditions
operator|.
name|checkState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Initialize the conversion related arrays.  Assumes initSourceEntry has already been called.    */
specifier|private
name|void
name|initConvertTargetEntry
parameter_list|(
name|int
name|logicalColumnIndex
parameter_list|)
block|{
name|isConvert
index|[
name|logicalColumnIndex
index|]
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|sourceCategories
index|[
name|logicalColumnIndex
index|]
operator|==
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
name|convertSourceWritables
index|[
name|logicalColumnIndex
index|]
operator|=
name|VectorizedBatchUtil
operator|.
name|getPrimitiveWritable
argument_list|(
name|sourcePrimitiveCategories
index|[
name|logicalColumnIndex
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We don't currently support complex types.
name|Preconditions
operator|.
name|checkState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Specify the columns to deserialize into as an array.    */
specifier|public
name|void
name|init
parameter_list|(
name|int
index|[]
name|outputColumns
parameter_list|)
throws|throws
name|HiveException
block|{
specifier|final
name|int
name|count
init|=
name|sourceTypeInfos
operator|.
name|length
decl_stmt|;
name|allocateArrays
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|int
name|outputColumn
init|=
name|outputColumns
index|[
name|i
index|]
decl_stmt|;
name|initSourceEntry
argument_list|(
name|i
argument_list|,
name|outputColumn
argument_list|,
name|sourceTypeInfos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Specify the columns to deserialize into as a list.    */
specifier|public
name|void
name|init
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|outputColumns
parameter_list|)
throws|throws
name|HiveException
block|{
specifier|final
name|int
name|count
init|=
name|sourceTypeInfos
operator|.
name|length
decl_stmt|;
name|allocateArrays
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|int
name|outputColumn
init|=
name|outputColumns
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|initSourceEntry
argument_list|(
name|i
argument_list|,
name|outputColumn
argument_list|,
name|sourceTypeInfos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Specify the columns to deserialize into a range starting at a column number.    */
specifier|public
name|void
name|init
parameter_list|(
name|int
name|startColumn
parameter_list|)
throws|throws
name|HiveException
block|{
specifier|final
name|int
name|count
init|=
name|sourceTypeInfos
operator|.
name|length
decl_stmt|;
name|allocateArrays
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|int
name|outputColumn
init|=
name|startColumn
operator|+
name|i
decl_stmt|;
name|initSourceEntry
argument_list|(
name|i
argument_list|,
name|outputColumn
argument_list|,
name|sourceTypeInfos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|init
parameter_list|(
name|boolean
index|[]
name|columnsToIncludeTruncated
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|columnsToIncludeTruncated
operator|!=
literal|null
condition|)
block|{
name|deserializeRead
operator|.
name|setColumnsToInclude
argument_list|(
name|columnsToIncludeTruncated
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|columnCount
init|=
operator|(
name|columnsToIncludeTruncated
operator|==
literal|null
condition|?
name|sourceTypeInfos
operator|.
name|length
else|:
name|columnsToIncludeTruncated
operator|.
name|length
operator|)
decl_stmt|;
name|allocateArrays
argument_list|(
name|columnCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|columnsToIncludeTruncated
operator|!=
literal|null
operator|&&
operator|!
name|columnsToIncludeTruncated
index|[
name|i
index|]
condition|)
block|{
comment|// Field not included in query.
block|}
else|else
block|{
name|initSourceEntry
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|sourceTypeInfos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Initialize for converting the source data type that are going to be read with the    * DeserializedRead interface passed to the constructor to the target data types desired in    * the VectorizedRowBatch.    *    * No projection -- the column range 0 .. count-1    *    *    where count is the minimum of the target data type array size, included array size,    *       and source data type array size.    *    * @param targetTypeInfos    * @param columnsToIncludeTruncated    * @return the minimum count described above is returned.  That is, the number of columns    *         that will be processed by deserialize.    * @throws HiveException    */
specifier|public
name|int
name|initConversion
parameter_list|(
name|TypeInfo
index|[]
name|targetTypeInfos
parameter_list|,
name|boolean
index|[]
name|columnsToIncludeTruncated
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|columnsToIncludeTruncated
operator|!=
literal|null
condition|)
block|{
name|deserializeRead
operator|.
name|setColumnsToInclude
argument_list|(
name|columnsToIncludeTruncated
argument_list|)
expr_stmt|;
block|}
name|int
name|targetColumnCount
decl_stmt|;
if|if
condition|(
name|columnsToIncludeTruncated
operator|==
literal|null
condition|)
block|{
name|targetColumnCount
operator|=
name|targetTypeInfos
operator|.
name|length
expr_stmt|;
block|}
else|else
block|{
name|targetColumnCount
operator|=
name|Math
operator|.
name|min
argument_list|(
name|targetTypeInfos
operator|.
name|length
argument_list|,
name|columnsToIncludeTruncated
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|int
name|sourceColumnCount
init|=
name|Math
operator|.
name|min
argument_list|(
name|sourceTypeInfos
operator|.
name|length
argument_list|,
name|targetColumnCount
argument_list|)
decl_stmt|;
name|allocateArrays
argument_list|(
name|sourceColumnCount
argument_list|)
expr_stmt|;
name|allocateConvertArrays
argument_list|(
name|sourceColumnCount
argument_list|)
expr_stmt|;
name|boolean
name|atLeastOneConvert
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceColumnCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|columnsToIncludeTruncated
operator|!=
literal|null
operator|&&
operator|!
name|columnsToIncludeTruncated
index|[
name|i
index|]
condition|)
block|{
comment|// Field not included in query.
block|}
else|else
block|{
name|TypeInfo
name|sourceTypeInfo
init|=
name|sourceTypeInfos
index|[
name|i
index|]
decl_stmt|;
name|TypeInfo
name|targetTypeInfo
init|=
name|targetTypeInfos
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|sourceTypeInfo
operator|.
name|equals
argument_list|(
name|targetTypeInfo
argument_list|)
condition|)
block|{
if|if
condition|(
name|VectorPartitionConversion
operator|.
name|isImplicitVectorColumnConversion
argument_list|(
name|sourceTypeInfo
argument_list|,
name|targetTypeInfo
argument_list|)
condition|)
block|{
comment|// Do implicit conversion from source type to target type.
name|initSourceEntry
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|sourceTypeInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Do formal conversion...
name|initSourceEntry
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|sourceTypeInfo
argument_list|)
expr_stmt|;
name|initConvertTargetEntry
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|atLeastOneConvert
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// No conversion.
name|initSourceEntry
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|sourceTypeInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|atLeastOneConvert
condition|)
block|{
comment|// Let the VectorAssignRow class do the conversion.
name|convertVectorAssignRow
operator|=
operator|new
name|VectorAssignRow
argument_list|()
expr_stmt|;
name|convertVectorAssignRow
operator|.
name|initConversion
argument_list|(
name|sourceTypeInfos
argument_list|,
name|targetTypeInfos
argument_list|,
name|columnsToIncludeTruncated
argument_list|)
expr_stmt|;
block|}
return|return
name|sourceColumnCount
return|;
block|}
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|HiveException
block|{
name|init
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deserialize one row column value.    *    * @param batch    * @param batchIndex    * @param logicalColumnIndex    * @throws IOException    */
specifier|private
name|void
name|deserializeRowColumn
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|int
name|logicalColumnIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|Category
name|sourceCategory
init|=
name|sourceCategories
index|[
name|logicalColumnIndex
index|]
decl_stmt|;
if|if
condition|(
name|sourceCategory
operator|==
literal|null
condition|)
block|{
comment|/*        * This is a column that we don't want (i.e. not included).        * The deserializeRead.readCheckNull() will read the field.        */
name|boolean
name|isNull
init|=
name|deserializeRead
operator|.
name|readCheckNull
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|isNull
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|int
name|projectionColumnNum
init|=
name|projectionColumnNums
index|[
name|logicalColumnIndex
index|]
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|readCheckNull
argument_list|()
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|batch
operator|.
name|cols
index|[
name|projectionColumnNum
index|]
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// We have a value for the row column.
switch|switch
condition|(
name|sourceCategory
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
name|PrimitiveCategory
name|sourcePrimitiveCategory
init|=
name|sourcePrimitiveCategories
index|[
name|logicalColumnIndex
index|]
decl_stmt|;
switch|switch
condition|(
name|sourcePrimitiveCategory
condition|)
block|{
case|case
name|VOID
case|:
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|batch
operator|.
name|cols
index|[
name|projectionColumnNum
index|]
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
return|return;
case|case
name|BOOLEAN
case|:
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|projectionColumnNum
index|]
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
name|deserializeRead
operator|.
name|currentBoolean
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|projectionColumnNum
index|]
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|deserializeRead
operator|.
name|currentByte
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|projectionColumnNum
index|]
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|deserializeRead
operator|.
name|currentShort
expr_stmt|;
break|break;
case|case
name|INT
case|:
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|projectionColumnNum
index|]
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|deserializeRead
operator|.
name|currentInt
expr_stmt|;
break|break;
case|case
name|LONG
case|:
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|projectionColumnNum
index|]
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|deserializeRead
operator|.
name|currentLong
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
operator|(
operator|(
name|TimestampColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|projectionColumnNum
index|]
operator|)
operator|.
name|set
argument_list|(
name|batchIndex
argument_list|,
name|deserializeRead
operator|.
name|currentTimestampWritable
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|projectionColumnNum
index|]
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|deserializeRead
operator|.
name|currentDateWritable
operator|.
name|getDays
argument_list|()
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|projectionColumnNum
index|]
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|deserializeRead
operator|.
name|currentFloat
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|projectionColumnNum
index|]
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|deserializeRead
operator|.
name|currentDouble
expr_stmt|;
break|break;
case|case
name|BINARY
case|:
case|case
name|STRING
case|:
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|projectionColumnNum
index|]
operator|)
operator|.
name|setVal
argument_list|(
name|batchIndex
argument_list|,
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|deserializeRead
operator|.
name|currentBytesLength
argument_list|)
expr_stmt|;
break|break;
case|case
name|VARCHAR
case|:
block|{
comment|// Use the basic STRING bytes read to get access, then use our optimal truncate/trim method
comment|// that does not use Java String objects.
name|int
name|adjustedLength
init|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|deserializeRead
operator|.
name|currentBytesLength
argument_list|,
name|maxLengths
index|[
name|logicalColumnIndex
index|]
argument_list|)
decl_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|projectionColumnNum
index|]
operator|)
operator|.
name|setVal
argument_list|(
name|batchIndex
argument_list|,
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|adjustedLength
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CHAR
case|:
block|{
comment|// Use the basic STRING bytes read to get access, then use our optimal truncate/trim method
comment|// that does not use Java String objects.
name|int
name|adjustedLength
init|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|deserializeRead
operator|.
name|currentBytesLength
argument_list|,
name|maxLengths
index|[
name|logicalColumnIndex
index|]
argument_list|)
decl_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|projectionColumnNum
index|]
operator|)
operator|.
name|setVal
argument_list|(
name|batchIndex
argument_list|,
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|adjustedLength
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DECIMAL
case|:
operator|(
operator|(
name|DecimalColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|projectionColumnNum
index|]
operator|)
operator|.
name|set
argument_list|(
name|batchIndex
argument_list|,
name|deserializeRead
operator|.
name|currentHiveDecimalWritable
operator|.
name|getHiveDecimal
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|projectionColumnNum
index|]
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|deserializeRead
operator|.
name|currentHiveIntervalYearMonthWritable
operator|.
name|getHiveIntervalYearMonth
argument_list|()
operator|.
name|getTotalMonths
argument_list|()
expr_stmt|;
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
operator|(
operator|(
name|IntervalDayTimeColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|projectionColumnNum
index|]
operator|)
operator|.
name|set
argument_list|(
name|batchIndex
argument_list|,
name|deserializeRead
operator|.
name|currentHiveIntervalDayTimeWritable
operator|.
name|getHiveIntervalDayTime
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Primitive category "
operator|+
name|sourcePrimitiveCategory
operator|.
name|name
argument_list|()
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Category "
operator|+
name|sourceCategory
operator|.
name|name
argument_list|()
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
comment|// We always set the null flag to false when there is a value.
name|batch
operator|.
name|cols
index|[
name|projectionColumnNum
index|]
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Deserialize and convert one row column value.    *    * We deserialize into a writable and then pass that writable to an instance of VectorAssignRow    * to convert the writable to the target data type and assign it into the VectorizedRowBatch.    *    * @param batch    * @param batchIndex    * @param logicalColumnIndex    * @throws IOException    */
specifier|private
name|void
name|deserializeConvertRowColumn
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|int
name|logicalColumnIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|Category
name|sourceCategory
init|=
name|sourceCategories
index|[
name|logicalColumnIndex
index|]
decl_stmt|;
if|if
condition|(
name|sourceCategory
operator|==
literal|null
condition|)
block|{
comment|/*        * This is a column that we don't want (i.e. not included).        * The deserializeRead.readCheckNull() will read the field.        */
name|boolean
name|isNull
init|=
name|deserializeRead
operator|.
name|readCheckNull
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|isNull
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|int
name|projectionColumnNum
init|=
name|projectionColumnNums
index|[
name|logicalColumnIndex
index|]
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|readCheckNull
argument_list|()
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|batch
operator|.
name|cols
index|[
name|projectionColumnNum
index|]
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// We have a value for the row column.
name|Writable
name|convertSourceWritable
init|=
name|convertSourceWritables
index|[
name|logicalColumnIndex
index|]
decl_stmt|;
switch|switch
condition|(
name|sourceCategory
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
name|PrimitiveCategory
name|sourcePrimitiveCategory
init|=
name|sourcePrimitiveCategories
index|[
name|logicalColumnIndex
index|]
decl_stmt|;
switch|switch
condition|(
name|sourcePrimitiveCategory
condition|)
block|{
case|case
name|VOID
case|:
name|convertSourceWritable
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|BOOLEAN
case|:
operator|(
operator|(
name|BooleanWritable
operator|)
name|convertSourceWritable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentBoolean
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
operator|(
operator|(
name|ByteWritable
operator|)
name|convertSourceWritable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentByte
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
operator|(
operator|(
name|ShortWritable
operator|)
name|convertSourceWritable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentShort
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
operator|(
operator|(
name|IntWritable
operator|)
name|convertSourceWritable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentInt
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
operator|(
operator|(
name|LongWritable
operator|)
name|convertSourceWritable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentLong
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
operator|(
operator|(
name|TimestampWritable
operator|)
name|convertSourceWritable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentTimestampWritable
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
operator|(
operator|(
name|DateWritable
operator|)
name|convertSourceWritable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentDateWritable
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
operator|(
operator|(
name|FloatWritable
operator|)
name|convertSourceWritable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentFloat
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
operator|(
operator|(
name|DoubleWritable
operator|)
name|convertSourceWritable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentDouble
argument_list|)
expr_stmt|;
break|break;
case|case
name|BINARY
case|:
if|if
condition|(
name|deserializeRead
operator|.
name|currentBytes
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"null binary entry: batchIndex "
operator|+
name|batchIndex
operator|+
literal|" projection column num "
operator|+
name|projectionColumnNum
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|BytesWritable
operator|)
name|convertSourceWritable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|deserializeRead
operator|.
name|currentBytesLength
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
if|if
condition|(
name|deserializeRead
operator|.
name|currentBytes
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"null string entry: batchIndex "
operator|+
name|batchIndex
operator|+
literal|" projection column num "
operator|+
name|projectionColumnNum
argument_list|)
throw|;
block|}
comment|// Use org.apache.hadoop.io.Text as our helper to go from byte[] to String.
operator|(
operator|(
name|Text
operator|)
name|convertSourceWritable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|deserializeRead
operator|.
name|currentBytesLength
argument_list|)
expr_stmt|;
break|break;
case|case
name|VARCHAR
case|:
block|{
comment|// Use the basic STRING bytes read to get access, then use our optimal truncate/trim method
comment|// that does not use Java String objects.
if|if
condition|(
name|deserializeRead
operator|.
name|currentBytes
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"null varchar entry: batchIndex "
operator|+
name|batchIndex
operator|+
literal|" projection column num "
operator|+
name|projectionColumnNum
argument_list|)
throw|;
block|}
name|int
name|adjustedLength
init|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|deserializeRead
operator|.
name|currentBytesLength
argument_list|,
name|maxLengths
index|[
name|logicalColumnIndex
index|]
argument_list|)
decl_stmt|;
operator|(
operator|(
name|HiveVarcharWritable
operator|)
name|convertSourceWritable
operator|)
operator|.
name|set
argument_list|(
operator|new
name|String
argument_list|(
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|adjustedLength
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CHAR
case|:
block|{
comment|// Use the basic STRING bytes read to get access, then use our optimal truncate/trim method
comment|// that does not use Java String objects.
if|if
condition|(
name|deserializeRead
operator|.
name|currentBytes
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"null char entry: batchIndex "
operator|+
name|batchIndex
operator|+
literal|" projection column num "
operator|+
name|projectionColumnNum
argument_list|)
throw|;
block|}
name|int
name|adjustedLength
init|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|deserializeRead
operator|.
name|currentBytesLength
argument_list|,
name|maxLengths
index|[
name|logicalColumnIndex
index|]
argument_list|)
decl_stmt|;
operator|(
operator|(
name|HiveCharWritable
operator|)
name|convertSourceWritable
operator|)
operator|.
name|set
argument_list|(
operator|new
name|String
argument_list|(
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|adjustedLength
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DECIMAL
case|:
operator|(
operator|(
name|HiveDecimalWritable
operator|)
name|convertSourceWritable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentHiveDecimalWritable
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
operator|(
operator|(
name|HiveIntervalYearMonthWritable
operator|)
name|convertSourceWritable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentHiveIntervalYearMonthWritable
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
operator|(
operator|(
name|HiveIntervalDayTimeWritable
operator|)
name|convertSourceWritable
operator|)
operator|.
name|set
argument_list|(
name|deserializeRead
operator|.
name|currentHiveIntervalDayTimeWritable
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Primitive category "
operator|+
name|sourcePrimitiveCategory
operator|.
name|name
argument_list|()
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Category "
operator|+
name|sourceCategory
operator|.
name|name
argument_list|()
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
comment|/*      * Convert our source object we just read into the target object and store that in the      * VectorizedRowBatch.      */
name|convertVectorAssignRow
operator|.
name|assignConvertRowColumn
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|,
name|logicalColumnIndex
argument_list|,
name|convertSourceWritable
argument_list|)
expr_stmt|;
block|}
comment|/**    * Specify the range of bytes to deserialize in the next call to the deserialize method.    *    * @param bytes    * @param offset    * @param length    */
specifier|public
name|void
name|setBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|deserializeRead
operator|.
name|set
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deserialize a row from the range of bytes specified by setBytes.    *    * @param batch    * @param batchIndex    * @throws IOException    */
specifier|public
name|void
name|deserialize
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|count
init|=
name|isConvert
operator|.
name|length
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|i
operator|<
name|count
condition|)
block|{
if|if
condition|(
name|isConvert
index|[
name|i
index|]
condition|)
block|{
name|deserializeConvertRowColumn
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deserializeRowColumn
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
comment|// Increment after the apply which could throw an exception.
block|}
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
name|throwMoreDetailedException
argument_list|(
name|e
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|deserializeRead
operator|.
name|extraFieldsCheck
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|throwMoreDetailedException
parameter_list|(
name|IOException
name|e
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|EOFException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Detail: \""
operator|+
name|e
operator|.
name|toString
argument_list|()
operator|+
literal|"\" occured for field "
operator|+
name|index
operator|+
literal|" of "
operator|+
name|sourceTypeInfos
operator|.
name|length
operator|+
literal|" fields ("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceTypeInfos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|sourceTypeInfos
index|[
name|i
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EOFException
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

