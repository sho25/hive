begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|StringExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|fast
operator|.
name|DeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|CharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_comment
comment|/**  * This class deserializes a serialization format into a row of a VectorizedRowBatch.  *   * The caller provides the hive type names and output column numbers in the order desired to  * deserialize.  *  * This class uses an provided DeserializeRead object to directly deserialize by reading  * field-by-field from a serialization format into the primitive values of the VectorizedRowBatch.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|VectorDeserializeRow
parameter_list|<
name|T
extends|extends
name|DeserializeRead
parameter_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VectorDeserializeRow
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|T
name|deserializeRead
decl_stmt|;
specifier|private
name|Reader
argument_list|<
name|T
argument_list|>
index|[]
name|readersByValue
decl_stmt|;
specifier|private
name|Reader
argument_list|<
name|T
argument_list|>
index|[]
name|readersByReference
decl_stmt|;
specifier|private
name|TypeInfo
index|[]
name|typeInfos
decl_stmt|;
specifier|public
name|VectorDeserializeRow
parameter_list|(
name|T
name|deserializeRead
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|deserializeRead
operator|=
name|deserializeRead
expr_stmt|;
name|typeInfos
operator|=
name|deserializeRead
operator|.
name|typeInfos
argument_list|()
expr_stmt|;
block|}
comment|// Not public since we must have the deserialize read object.
specifier|private
name|VectorDeserializeRow
parameter_list|()
block|{   }
specifier|private
specifier|abstract
class|class
name|Reader
parameter_list|<
name|R
extends|extends
name|DeserializeRead
parameter_list|>
block|{
specifier|protected
name|int
name|columnIndex
decl_stmt|;
name|Reader
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|this
operator|.
name|columnIndex
operator|=
name|columnIndex
expr_stmt|;
block|}
specifier|abstract
name|void
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|private
specifier|abstract
class|class
name|AbstractLongReader
extends|extends
name|Reader
argument_list|<
name|T
argument_list|>
block|{
name|AbstractLongReader
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|BooleanReader
extends|extends
name|AbstractLongReader
block|{
name|BooleanReader
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|colVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|readCheckNull
argument_list|()
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|value
init|=
name|deserializeRead
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
name|value
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|ByteReader
extends|extends
name|AbstractLongReader
block|{
name|ByteReader
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|colVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|readCheckNull
argument_list|()
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
name|value
init|=
name|deserializeRead
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
name|long
operator|)
name|value
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|ShortReader
extends|extends
name|AbstractLongReader
block|{
name|ShortReader
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|colVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|readCheckNull
argument_list|()
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|short
name|value
init|=
name|deserializeRead
operator|.
name|readShort
argument_list|()
decl_stmt|;
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
name|long
operator|)
name|value
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|IntReader
extends|extends
name|AbstractLongReader
block|{
name|IntReader
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|colVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|readCheckNull
argument_list|()
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|value
init|=
name|deserializeRead
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
name|long
operator|)
name|value
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|LongReader
extends|extends
name|AbstractLongReader
block|{
name|LongReader
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|colVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|readCheckNull
argument_list|()
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|value
init|=
name|deserializeRead
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|value
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|DateReader
extends|extends
name|AbstractLongReader
block|{
name|DeserializeRead
operator|.
name|ReadDateResults
name|readDateResults
decl_stmt|;
name|DateReader
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|readDateResults
operator|=
name|deserializeRead
operator|.
name|createReadDateResults
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|colVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|readCheckNull
argument_list|()
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deserializeRead
operator|.
name|readDate
argument_list|(
name|readDateResults
argument_list|)
expr_stmt|;
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
name|long
operator|)
name|readDateResults
operator|.
name|getDays
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|TimestampReader
extends|extends
name|AbstractLongReader
block|{
name|DeserializeRead
operator|.
name|ReadTimestampResults
name|readTimestampResults
decl_stmt|;
name|TimestampReader
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|readTimestampResults
operator|=
name|deserializeRead
operator|.
name|createReadTimestampResults
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|colVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|readCheckNull
argument_list|()
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deserializeRead
operator|.
name|readTimestamp
argument_list|(
name|readTimestampResults
argument_list|)
expr_stmt|;
name|Timestamp
name|t
init|=
name|readTimestampResults
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|TimestampUtils
operator|.
name|getTimeNanoSec
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|IntervalYearMonthReader
extends|extends
name|AbstractLongReader
block|{
name|DeserializeRead
operator|.
name|ReadIntervalYearMonthResults
name|readIntervalYearMonthResults
decl_stmt|;
name|IntervalYearMonthReader
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|readIntervalYearMonthResults
operator|=
name|deserializeRead
operator|.
name|createReadIntervalYearMonthResults
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|colVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|readCheckNull
argument_list|()
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deserializeRead
operator|.
name|readIntervalYearMonth
argument_list|(
name|readIntervalYearMonthResults
argument_list|)
expr_stmt|;
name|HiveIntervalYearMonth
name|hiym
init|=
name|readIntervalYearMonthResults
operator|.
name|getHiveIntervalYearMonth
argument_list|()
decl_stmt|;
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|hiym
operator|.
name|getTotalMonths
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|IntervalDayTimeReader
extends|extends
name|AbstractLongReader
block|{
name|DeserializeRead
operator|.
name|ReadIntervalDayTimeResults
name|readIntervalDayTimeResults
decl_stmt|;
name|IntervalDayTimeReader
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|readIntervalDayTimeResults
operator|=
name|deserializeRead
operator|.
name|createReadIntervalDayTimeResults
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|colVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|readCheckNull
argument_list|()
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deserializeRead
operator|.
name|readIntervalDayTime
argument_list|(
name|readIntervalDayTimeResults
argument_list|)
expr_stmt|;
name|HiveIntervalDayTime
name|hidt
init|=
name|readIntervalDayTimeResults
operator|.
name|getHiveIntervalDayTime
argument_list|()
decl_stmt|;
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|DateUtils
operator|.
name|getIntervalDayTimeTotalNanos
argument_list|(
name|hidt
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|abstract
class|class
name|AbstractDoubleReader
extends|extends
name|Reader
argument_list|<
name|T
argument_list|>
block|{
name|AbstractDoubleReader
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|FloatReader
extends|extends
name|AbstractDoubleReader
block|{
name|FloatReader
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|DoubleColumnVector
name|colVector
init|=
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|readCheckNull
argument_list|()
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|float
name|value
init|=
name|deserializeRead
operator|.
name|readFloat
argument_list|()
decl_stmt|;
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
name|double
operator|)
name|value
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|DoubleReader
extends|extends
name|AbstractDoubleReader
block|{
name|DoubleReader
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|DoubleColumnVector
name|colVector
init|=
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|readCheckNull
argument_list|()
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|double
name|value
init|=
name|deserializeRead
operator|.
name|readDouble
argument_list|()
decl_stmt|;
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|value
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|abstract
class|class
name|AbstractBytesReader
extends|extends
name|Reader
argument_list|<
name|T
argument_list|>
block|{
name|AbstractBytesReader
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|StringReaderByValue
extends|extends
name|AbstractBytesReader
block|{
specifier|private
name|DeserializeRead
operator|.
name|ReadStringResults
name|readStringResults
decl_stmt|;
name|StringReaderByValue
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|readStringResults
operator|=
name|deserializeRead
operator|.
name|createReadStringResults
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesColumnVector
name|colVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|readCheckNull
argument_list|()
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deserializeRead
operator|.
name|readString
argument_list|(
name|readStringResults
argument_list|)
expr_stmt|;
name|colVector
operator|.
name|setVal
argument_list|(
name|batchIndex
argument_list|,
name|readStringResults
operator|.
name|bytes
argument_list|,
name|readStringResults
operator|.
name|start
argument_list|,
name|readStringResults
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|StringReaderByReference
extends|extends
name|AbstractBytesReader
block|{
specifier|private
name|DeserializeRead
operator|.
name|ReadStringResults
name|readStringResults
decl_stmt|;
name|StringReaderByReference
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|readStringResults
operator|=
name|deserializeRead
operator|.
name|createReadStringResults
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesColumnVector
name|colVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|readCheckNull
argument_list|()
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deserializeRead
operator|.
name|readString
argument_list|(
name|readStringResults
argument_list|)
expr_stmt|;
name|colVector
operator|.
name|setRef
argument_list|(
name|batchIndex
argument_list|,
name|readStringResults
operator|.
name|bytes
argument_list|,
name|readStringResults
operator|.
name|start
argument_list|,
name|readStringResults
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|CharReaderByValue
extends|extends
name|AbstractBytesReader
block|{
specifier|private
name|DeserializeRead
operator|.
name|ReadStringResults
name|readStringResults
decl_stmt|;
specifier|private
name|CharTypeInfo
name|charTypeInfo
decl_stmt|;
name|CharReaderByValue
parameter_list|(
name|CharTypeInfo
name|charTypeInfo
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|readStringResults
operator|=
name|deserializeRead
operator|.
name|createReadStringResults
argument_list|()
expr_stmt|;
name|this
operator|.
name|charTypeInfo
operator|=
name|charTypeInfo
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesColumnVector
name|colVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|readCheckNull
argument_list|()
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Use the basic STRING bytes read to get access, then use our optimal truncate/trim method
comment|// that does not use Java String objects.
name|deserializeRead
operator|.
name|readString
argument_list|(
name|readStringResults
argument_list|)
expr_stmt|;
name|int
name|adjustedLength
init|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|readStringResults
operator|.
name|bytes
argument_list|,
name|readStringResults
operator|.
name|start
argument_list|,
name|readStringResults
operator|.
name|length
argument_list|,
name|charTypeInfo
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|colVector
operator|.
name|setVal
argument_list|(
name|batchIndex
argument_list|,
name|readStringResults
operator|.
name|bytes
argument_list|,
name|readStringResults
operator|.
name|start
argument_list|,
name|adjustedLength
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|CharReaderByReference
extends|extends
name|AbstractBytesReader
block|{
specifier|private
name|DeserializeRead
operator|.
name|ReadStringResults
name|readStringResults
decl_stmt|;
specifier|private
name|CharTypeInfo
name|charTypeInfo
decl_stmt|;
name|CharReaderByReference
parameter_list|(
name|CharTypeInfo
name|charTypeInfo
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|readStringResults
operator|=
name|deserializeRead
operator|.
name|createReadStringResults
argument_list|()
expr_stmt|;
name|this
operator|.
name|charTypeInfo
operator|=
name|charTypeInfo
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesColumnVector
name|colVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|readCheckNull
argument_list|()
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Use the basic STRING bytes read to get access, then use our optimal truncate/trim method
comment|// that does not use Java String objects.
name|deserializeRead
operator|.
name|readString
argument_list|(
name|readStringResults
argument_list|)
expr_stmt|;
name|int
name|adjustedLength
init|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|readStringResults
operator|.
name|bytes
argument_list|,
name|readStringResults
operator|.
name|start
argument_list|,
name|readStringResults
operator|.
name|length
argument_list|,
name|charTypeInfo
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|colVector
operator|.
name|setRef
argument_list|(
name|batchIndex
argument_list|,
name|readStringResults
operator|.
name|bytes
argument_list|,
name|readStringResults
operator|.
name|start
argument_list|,
name|adjustedLength
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|VarcharReaderByValue
extends|extends
name|AbstractBytesReader
block|{
specifier|private
name|DeserializeRead
operator|.
name|ReadStringResults
name|readStringResults
decl_stmt|;
specifier|private
name|VarcharTypeInfo
name|varcharTypeInfo
decl_stmt|;
name|VarcharReaderByValue
parameter_list|(
name|VarcharTypeInfo
name|varcharTypeInfo
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|readStringResults
operator|=
name|deserializeRead
operator|.
name|createReadStringResults
argument_list|()
expr_stmt|;
name|this
operator|.
name|varcharTypeInfo
operator|=
name|varcharTypeInfo
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesColumnVector
name|colVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|readCheckNull
argument_list|()
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Use the basic STRING bytes read to get access, then use our optimal truncate/trim method
comment|// that does not use Java String objects.
name|deserializeRead
operator|.
name|readString
argument_list|(
name|readStringResults
argument_list|)
expr_stmt|;
name|int
name|adjustedLength
init|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|readStringResults
operator|.
name|bytes
argument_list|,
name|readStringResults
operator|.
name|start
argument_list|,
name|readStringResults
operator|.
name|length
argument_list|,
name|varcharTypeInfo
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|colVector
operator|.
name|setVal
argument_list|(
name|batchIndex
argument_list|,
name|readStringResults
operator|.
name|bytes
argument_list|,
name|readStringResults
operator|.
name|start
argument_list|,
name|adjustedLength
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|VarcharReaderByReference
extends|extends
name|AbstractBytesReader
block|{
specifier|private
name|DeserializeRead
operator|.
name|ReadStringResults
name|readStringResults
decl_stmt|;
specifier|private
name|VarcharTypeInfo
name|varcharTypeInfo
decl_stmt|;
name|VarcharReaderByReference
parameter_list|(
name|VarcharTypeInfo
name|varcharTypeInfo
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|readStringResults
operator|=
name|deserializeRead
operator|.
name|createReadStringResults
argument_list|()
expr_stmt|;
name|this
operator|.
name|varcharTypeInfo
operator|=
name|varcharTypeInfo
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesColumnVector
name|colVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|readCheckNull
argument_list|()
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Use the basic STRING bytes read to get access, then use our optimal truncate/trim method
comment|// that does not use Java String objects.
name|deserializeRead
operator|.
name|readString
argument_list|(
name|readStringResults
argument_list|)
expr_stmt|;
name|int
name|adjustedLength
init|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|readStringResults
operator|.
name|bytes
argument_list|,
name|readStringResults
operator|.
name|start
argument_list|,
name|readStringResults
operator|.
name|length
argument_list|,
name|varcharTypeInfo
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|colVector
operator|.
name|setRef
argument_list|(
name|batchIndex
argument_list|,
name|readStringResults
operator|.
name|bytes
argument_list|,
name|readStringResults
operator|.
name|start
argument_list|,
name|adjustedLength
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|BinaryReaderByValue
extends|extends
name|AbstractBytesReader
block|{
specifier|private
name|DeserializeRead
operator|.
name|ReadBinaryResults
name|readBinaryResults
decl_stmt|;
name|BinaryReaderByValue
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|readBinaryResults
operator|=
name|deserializeRead
operator|.
name|createReadBinaryResults
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesColumnVector
name|colVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|readCheckNull
argument_list|()
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deserializeRead
operator|.
name|readBinary
argument_list|(
name|readBinaryResults
argument_list|)
expr_stmt|;
name|colVector
operator|.
name|setVal
argument_list|(
name|batchIndex
argument_list|,
name|readBinaryResults
operator|.
name|bytes
argument_list|,
name|readBinaryResults
operator|.
name|start
argument_list|,
name|readBinaryResults
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|BinaryReaderByReference
extends|extends
name|AbstractBytesReader
block|{
specifier|private
name|DeserializeRead
operator|.
name|ReadBinaryResults
name|readBinaryResults
decl_stmt|;
name|BinaryReaderByReference
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|readBinaryResults
operator|=
name|deserializeRead
operator|.
name|createReadBinaryResults
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesColumnVector
name|colVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|readCheckNull
argument_list|()
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deserializeRead
operator|.
name|readBinary
argument_list|(
name|readBinaryResults
argument_list|)
expr_stmt|;
name|colVector
operator|.
name|setRef
argument_list|(
name|batchIndex
argument_list|,
name|readBinaryResults
operator|.
name|bytes
argument_list|,
name|readBinaryResults
operator|.
name|start
argument_list|,
name|readBinaryResults
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|HiveDecimalReader
extends|extends
name|Reader
argument_list|<
name|T
argument_list|>
block|{
specifier|private
name|DeserializeRead
operator|.
name|ReadDecimalResults
name|readDecimalResults
decl_stmt|;
name|HiveDecimalReader
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|readDecimalResults
operator|=
name|deserializeRead
operator|.
name|createReadDecimalResults
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|apply
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|DecimalColumnVector
name|colVector
init|=
operator|(
name|DecimalColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|deserializeRead
operator|.
name|readCheckNull
argument_list|()
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deserializeRead
operator|.
name|readHiveDecimal
argument_list|(
name|readDecimalResults
argument_list|)
expr_stmt|;
name|HiveDecimal
name|hiveDecimal
init|=
name|readDecimalResults
operator|.
name|getHiveDecimal
argument_list|()
decl_stmt|;
name|colVector
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|.
name|set
argument_list|(
name|hiveDecimal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addReader
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|outputColumn
parameter_list|)
throws|throws
name|HiveException
block|{
name|Reader
argument_list|<
name|T
argument_list|>
name|readerByValue
init|=
literal|null
decl_stmt|;
name|Reader
argument_list|<
name|T
argument_list|>
name|readerByReference
init|=
literal|null
decl_stmt|;
name|PrimitiveTypeInfo
name|primitiveTypeInfo
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfos
index|[
name|index
index|]
decl_stmt|;
name|PrimitiveCategory
name|primitiveCategory
init|=
name|primitiveTypeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|primitiveCategory
condition|)
block|{
comment|// case VOID:
comment|//   UNDONE:
comment|// break;
case|case
name|BOOLEAN
case|:
name|readerByValue
operator|=
operator|new
name|BooleanReader
argument_list|(
name|outputColumn
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|readerByValue
operator|=
operator|new
name|ByteReader
argument_list|(
name|outputColumn
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|readerByValue
operator|=
operator|new
name|ShortReader
argument_list|(
name|outputColumn
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|readerByValue
operator|=
operator|new
name|IntReader
argument_list|(
name|outputColumn
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|readerByValue
operator|=
operator|new
name|LongReader
argument_list|(
name|outputColumn
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|readerByValue
operator|=
operator|new
name|DateReader
argument_list|(
name|outputColumn
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|readerByValue
operator|=
operator|new
name|TimestampReader
argument_list|(
name|outputColumn
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|readerByValue
operator|=
operator|new
name|FloatReader
argument_list|(
name|outputColumn
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|readerByValue
operator|=
operator|new
name|DoubleReader
argument_list|(
name|outputColumn
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|readerByValue
operator|=
operator|new
name|StringReaderByValue
argument_list|(
name|outputColumn
argument_list|)
expr_stmt|;
name|readerByReference
operator|=
operator|new
name|StringReaderByReference
argument_list|(
name|outputColumn
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHAR
case|:
block|{
name|CharTypeInfo
name|charTypeInfo
init|=
operator|(
name|CharTypeInfo
operator|)
name|primitiveTypeInfo
decl_stmt|;
name|readerByValue
operator|=
operator|new
name|CharReaderByValue
argument_list|(
name|charTypeInfo
argument_list|,
name|outputColumn
argument_list|)
expr_stmt|;
name|readerByReference
operator|=
operator|new
name|CharReaderByReference
argument_list|(
name|charTypeInfo
argument_list|,
name|outputColumn
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|VARCHAR
case|:
block|{
name|VarcharTypeInfo
name|varcharTypeInfo
init|=
operator|(
name|VarcharTypeInfo
operator|)
name|primitiveTypeInfo
decl_stmt|;
name|readerByValue
operator|=
operator|new
name|VarcharReaderByValue
argument_list|(
name|varcharTypeInfo
argument_list|,
name|outputColumn
argument_list|)
expr_stmt|;
name|readerByReference
operator|=
operator|new
name|VarcharReaderByReference
argument_list|(
name|varcharTypeInfo
argument_list|,
name|outputColumn
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BINARY
case|:
name|readerByValue
operator|=
operator|new
name|BinaryReaderByValue
argument_list|(
name|outputColumn
argument_list|)
expr_stmt|;
name|readerByReference
operator|=
operator|new
name|BinaryReaderByReference
argument_list|(
name|outputColumn
argument_list|)
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
name|readerByValue
operator|=
operator|new
name|HiveDecimalReader
argument_list|(
name|outputColumn
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
name|readerByValue
operator|=
operator|new
name|IntervalYearMonthReader
argument_list|(
name|outputColumn
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
name|readerByValue
operator|=
operator|new
name|IntervalDayTimeReader
argument_list|(
name|outputColumn
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unexpected primitive type category "
operator|+
name|primitiveCategory
argument_list|)
throw|;
block|}
name|readersByValue
index|[
name|index
index|]
operator|=
name|readerByValue
expr_stmt|;
if|if
condition|(
name|readerByReference
operator|==
literal|null
condition|)
block|{
name|readersByReference
index|[
name|index
index|]
operator|=
name|readerByValue
expr_stmt|;
block|}
else|else
block|{
name|readersByReference
index|[
name|index
index|]
operator|=
name|readerByReference
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|init
parameter_list|(
name|int
index|[]
name|outputColumns
parameter_list|)
throws|throws
name|HiveException
block|{
name|readersByValue
operator|=
operator|new
name|Reader
index|[
name|typeInfos
operator|.
name|length
index|]
expr_stmt|;
name|readersByReference
operator|=
operator|new
name|Reader
index|[
name|typeInfos
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typeInfos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|outputColumn
init|=
name|outputColumns
index|[
name|i
index|]
decl_stmt|;
name|addReader
argument_list|(
name|i
argument_list|,
name|outputColumn
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|init
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|outputColumns
parameter_list|)
throws|throws
name|HiveException
block|{
name|readersByValue
operator|=
operator|new
name|Reader
index|[
name|typeInfos
operator|.
name|length
index|]
expr_stmt|;
name|readersByReference
operator|=
operator|new
name|Reader
index|[
name|typeInfos
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typeInfos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|outputColumn
init|=
name|outputColumns
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|addReader
argument_list|(
name|i
argument_list|,
name|outputColumn
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|init
parameter_list|(
name|int
name|startColumn
parameter_list|)
throws|throws
name|HiveException
block|{
name|readersByValue
operator|=
operator|new
name|Reader
index|[
name|typeInfos
operator|.
name|length
index|]
expr_stmt|;
name|readersByReference
operator|=
operator|new
name|Reader
index|[
name|typeInfos
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typeInfos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|outputColumn
init|=
name|startColumn
operator|+
name|i
decl_stmt|;
name|addReader
argument_list|(
name|i
argument_list|,
name|outputColumn
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|HiveException
block|{
name|init
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|deserializeRead
operator|.
name|set
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deserializeByValue
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|i
operator|<
name|readersByValue
operator|.
name|length
condition|)
block|{
name|readersByValue
index|[
name|i
index|]
operator|.
name|apply
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Increment after the apply which could throw an exception.
block|}
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
name|throwMoreDetailedException
argument_list|(
name|e
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|deserializeRead
operator|.
name|extraFieldsCheck
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|deserializeByReference
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|i
operator|<
name|readersByReference
operator|.
name|length
condition|)
block|{
name|readersByReference
index|[
name|i
index|]
operator|.
name|apply
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// Increment after the apply which could throw an exception.
block|}
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
name|throwMoreDetailedException
argument_list|(
name|e
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|deserializeRead
operator|.
name|extraFieldsCheck
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|throwMoreDetailedException
parameter_list|(
name|IOException
name|e
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|EOFException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Detail: \""
operator|+
name|e
operator|.
name|toString
argument_list|()
operator|+
literal|"\" occured for field "
operator|+
name|index
operator|+
literal|" of "
operator|+
name|typeInfos
operator|.
name|length
operator|+
literal|" fields ("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typeInfos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfos
index|[
name|i
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EOFException
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

