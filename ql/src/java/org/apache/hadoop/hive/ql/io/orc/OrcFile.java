begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Contains factory methods to read or write ORC files.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|OrcFile
block|{
specifier|public
specifier|static
specifier|final
name|String
name|MAGIC
init|=
literal|"ORC"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COMPRESSION
init|=
literal|"orc.compress"
decl_stmt|;
specifier|static
specifier|final
name|String
name|DEFAULT_COMPRESSION
init|=
literal|"ZLIB"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COMPRESSION_BLOCK_SIZE
init|=
literal|"orc.compress.size"
decl_stmt|;
specifier|static
specifier|final
name|String
name|DEFAULT_COMPRESSION_BLOCK_SIZE
init|=
literal|"262144"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STRIPE_SIZE
init|=
literal|"orc.stripe.size"
decl_stmt|;
specifier|static
specifier|final
name|String
name|DEFAULT_STRIPE_SIZE
init|=
literal|"268435456"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ROW_INDEX_STRIDE
init|=
literal|"orc.row.index.stride"
decl_stmt|;
specifier|static
specifier|final
name|String
name|DEFAULT_ROW_INDEX_STRIDE
init|=
literal|"10000"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ENABLE_INDEXES
init|=
literal|"orc.create.index"
decl_stmt|;
comment|// unused
specifier|private
name|OrcFile
parameter_list|()
block|{}
comment|/**    * Create an ORC file reader.    * @param fs file system    * @param path file name to read from    * @return a new ORC file reader.    * @throws IOException    */
specifier|public
specifier|static
name|Reader
name|createReader
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ReaderImpl
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
return|;
block|}
comment|/**    * Create an ORC file streamFactory.    * @param fs file system    * @param path filename to write to    * @param inspector the ObjectInspector that inspects the rows    * @param stripeSize the number of bytes in a stripe    * @param compress how to compress the file    * @param bufferSize the number of bytes to compress at once    * @param rowIndexStride the number of rows between row index entries or    *                       0 to suppress all indexes    * @return a new ORC file streamFactory    * @throws IOException    */
specifier|public
specifier|static
name|Writer
name|createWriter
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|ObjectInspector
name|inspector
parameter_list|,
name|long
name|stripeSize
parameter_list|,
name|CompressionKind
name|compress
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|int
name|rowIndexStride
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|WriterImpl
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|inspector
argument_list|,
name|stripeSize
argument_list|,
name|compress
argument_list|,
name|bufferSize
argument_list|,
name|rowIndexStride
argument_list|,
name|getMemoryManager
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|MemoryManager
name|memoryManager
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|synchronized
name|MemoryManager
name|getMemoryManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|memoryManager
operator|==
literal|null
condition|)
block|{
name|memoryManager
operator|=
operator|new
name|MemoryManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|memoryManager
return|;
block|}
block|}
end_class

end_unit

