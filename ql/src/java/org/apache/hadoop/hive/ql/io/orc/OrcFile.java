begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|FileMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|MemoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|TypeDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|OrcTail
import|;
end_import

begin_comment
comment|/**  * Contains factory methods to read or write ORC files.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|OrcFile
extends|extends
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcFile
block|{
comment|// unused
specifier|protected
name|OrcFile
parameter_list|()
block|{}
comment|/**    * Create an ORC file reader.    * @param fs file system    * @param path file name to read from    * @return a new ORC file reader.    * @throws IOException    */
specifier|public
specifier|static
name|Reader
name|createReader
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|ReaderOptions
name|opts
init|=
operator|new
name|ReaderOptions
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|opts
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
expr_stmt|;
return|return
operator|new
name|ReaderImpl
argument_list|(
name|path
argument_list|,
name|opts
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|ReaderOptions
extends|extends
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcFile
operator|.
name|ReaderOptions
block|{
specifier|public
name|ReaderOptions
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ReaderOptions
name|filesystem
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
name|super
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ReaderOptions
name|maxLength
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|super
operator|.
name|maxLength
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ReaderOptions
name|fileMetadata
parameter_list|(
name|FileMetadata
name|metadata
parameter_list|)
block|{
name|super
operator|.
name|fileMetadata
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ReaderOptions
name|orcTail
parameter_list|(
name|OrcTail
name|orcTail
parameter_list|)
block|{
name|super
operator|.
name|orcTail
argument_list|(
name|orcTail
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
specifier|public
specifier|static
name|ReaderOptions
name|readerOptions
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|ReaderOptions
argument_list|(
name|conf
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Reader
name|createReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|ReaderOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ReaderImpl
argument_list|(
name|path
argument_list|,
name|options
argument_list|)
return|;
block|}
comment|/**    * Options for creating ORC file writers.    */
specifier|public
specifier|static
class|class
name|WriterOptions
extends|extends
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcFile
operator|.
name|WriterOptions
block|{
specifier|private
name|boolean
name|explicitSchema
init|=
literal|false
decl_stmt|;
specifier|private
name|ObjectInspector
name|inspector
init|=
literal|null
decl_stmt|;
comment|// Setting the default batch size to 1000 makes the memory check at 5000
comment|// rows work the same as the row by row writer. (If it was the default 1024,
comment|// the smallest stripe size would be 5120 rows, which changes the output
comment|// of some of the tests.)
specifier|private
name|int
name|batchSize
init|=
literal|1000
decl_stmt|;
name|WriterOptions
parameter_list|(
name|Properties
name|tableProperties
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|tableProperties
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**      * A required option that sets the object inspector for the rows. If      * setSchema is not called, it also defines the schema.      */
specifier|public
name|WriterOptions
name|inspector
parameter_list|(
name|ObjectInspector
name|value
parameter_list|)
block|{
name|this
operator|.
name|inspector
operator|=
name|value
expr_stmt|;
if|if
condition|(
operator|!
name|explicitSchema
condition|)
block|{
name|super
operator|.
name|setSchema
argument_list|(
name|OrcInputFormat
operator|.
name|convertTypeInfo
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Set the schema for the file. This is a required parameter.      * @param schema the schema for the file.      * @return this      */
specifier|public
name|WriterOptions
name|setSchema
parameter_list|(
name|TypeDescription
name|schema
parameter_list|)
block|{
name|this
operator|.
name|explicitSchema
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Provide the filesystem for the path, if the client has it available.      * If it is not provided, it will be found from the path.      */
specifier|public
name|WriterOptions
name|fileSystem
parameter_list|(
name|FileSystem
name|value
parameter_list|)
block|{
name|super
operator|.
name|fileSystem
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the stripe size for the file. The writer stores the contents of the      * stripe in memory until this memory limit is reached and the stripe      * is flushed to the HDFS file and the next stripe started.      */
specifier|public
name|WriterOptions
name|stripeSize
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|super
operator|.
name|stripeSize
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the file system block size for the file. For optimal performance,      * set the block size to be multiple factors of stripe size.      */
specifier|public
name|WriterOptions
name|blockSize
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|super
operator|.
name|blockSize
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the distance between entries in the row index. The minimum value is      * 1000 to prevent the index from overwhelming the data. If the stride is      * set to 0, no indexes will be included in the file.      */
specifier|public
name|WriterOptions
name|rowIndexStride
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|super
operator|.
name|rowIndexStride
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The size of the memory buffers used for compressing and storing the      * stripe in memory.      */
specifier|public
name|WriterOptions
name|bufferSize
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|super
operator|.
name|bufferSize
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets whether the HDFS blocks are padded to prevent stripes from      * straddling blocks. Padding improves locality and thus the speed of      * reading, but costs space.      */
specifier|public
name|WriterOptions
name|blockPadding
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|super
operator|.
name|blockPadding
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the encoding strategy that is used to encode the data.      */
specifier|public
name|WriterOptions
name|encodingStrategy
parameter_list|(
name|EncodingStrategy
name|strategy
parameter_list|)
block|{
name|super
operator|.
name|encodingStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the tolerance for block padding as a percentage of stripe size.      */
specifier|public
name|WriterOptions
name|paddingTolerance
parameter_list|(
name|double
name|value
parameter_list|)
block|{
name|super
operator|.
name|paddingTolerance
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Comma separated values of column names for which bloom filter is to be created.      */
specifier|public
name|WriterOptions
name|bloomFilterColumns
parameter_list|(
name|String
name|columns
parameter_list|)
block|{
name|super
operator|.
name|bloomFilterColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Specify the false positive probability for bloom filter.      * @param fpp - false positive probability      * @return this      */
specifier|public
name|WriterOptions
name|bloomFilterFpp
parameter_list|(
name|double
name|fpp
parameter_list|)
block|{
name|super
operator|.
name|bloomFilterFpp
argument_list|(
name|fpp
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the generic compression that is used to compress the data.      */
specifier|public
name|WriterOptions
name|compress
parameter_list|(
name|CompressionKind
name|value
parameter_list|)
block|{
name|super
operator|.
name|compress
argument_list|(
name|value
operator|.
name|getUnderlying
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the generic compression that is used to compress the data.      */
specifier|public
name|WriterOptions
name|compress
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|CompressionKind
name|value
parameter_list|)
block|{
name|super
operator|.
name|compress
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the version of the file that will be written.      */
specifier|public
name|WriterOptions
name|version
parameter_list|(
name|Version
name|value
parameter_list|)
block|{
name|super
operator|.
name|version
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add a listener for when the stripe and file are about to be closed.      * @param callback the object to be called when the stripe is closed      * @return this      */
specifier|public
name|WriterOptions
name|callback
parameter_list|(
name|WriterCallback
name|callback
parameter_list|)
block|{
name|super
operator|.
name|callback
argument_list|(
name|callback
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * A package local option to set the memory manager.      */
specifier|protected
name|WriterOptions
name|memory
parameter_list|(
name|MemoryManager
name|value
parameter_list|)
block|{
name|super
operator|.
name|memory
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|protected
name|WriterOptions
name|batchSize
parameter_list|(
name|int
name|maxSize
parameter_list|)
block|{
name|batchSize
operator|=
name|maxSize
expr_stmt|;
return|return
name|this
return|;
block|}
name|ObjectInspector
name|getInspector
parameter_list|()
block|{
return|return
name|inspector
return|;
block|}
name|int
name|getBatchSize
parameter_list|()
block|{
return|return
name|batchSize
return|;
block|}
block|}
comment|/**    * Create a set of writer options based on a configuration.    * @param conf the configuration to use for values    * @return A WriterOptions object that can be modified    */
specifier|public
specifier|static
name|WriterOptions
name|writerOptions
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|WriterOptions
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Create a set of write options based on a set of table properties and    * configuration.    * @param tableProperties the properties of the table    * @param conf the configuration of the query    * @return a WriterOptions object that can be modified    */
specifier|public
specifier|static
name|WriterOptions
name|writerOptions
parameter_list|(
name|Properties
name|tableProperties
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|WriterOptions
argument_list|(
name|tableProperties
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Create an ORC file writer. This is the public interface for creating    * writers going forward and new options will only be added to this method.    * @param path filename to write to    * @param opts the options    * @return a new ORC file writer    * @throws IOException    */
specifier|public
specifier|static
name|Writer
name|createWriter
parameter_list|(
name|Path
name|path
parameter_list|,
name|WriterOptions
name|opts
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|opts
operator|.
name|getFileSystem
argument_list|()
operator|==
literal|null
condition|?
name|path
operator|.
name|getFileSystem
argument_list|(
name|opts
operator|.
name|getConfiguration
argument_list|()
argument_list|)
else|:
name|opts
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
return|return
operator|new
name|WriterImpl
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|opts
argument_list|)
return|;
block|}
comment|/**    * Create an ORC file writer. This method is provided for API backward    * compatability with Hive 0.11.    * @param fs file system    * @param path filename to write to    * @param inspector the ObjectInspector that inspects the rows    * @param stripeSize the number of bytes in a stripe    * @param compress how to compress the file    * @param bufferSize the number of bytes to compress at once    * @param rowIndexStride the number of rows between row index entries or    *                       0 to suppress all indexes    * @return a new ORC file writer    * @throws IOException    */
specifier|public
specifier|static
name|Writer
name|createWriter
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|ObjectInspector
name|inspector
parameter_list|,
name|long
name|stripeSize
parameter_list|,
name|CompressionKind
name|compress
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|int
name|rowIndexStride
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createWriter
argument_list|(
name|path
argument_list|,
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
operator|.
name|fileSystem
argument_list|(
name|fs
argument_list|)
operator|.
name|stripeSize
argument_list|(
name|stripeSize
argument_list|)
operator|.
name|compress
argument_list|(
name|compress
argument_list|)
operator|.
name|bufferSize
argument_list|(
name|bufferSize
argument_list|)
operator|.
name|rowIndexStride
argument_list|(
name|rowIndexStride
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

