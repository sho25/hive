begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ObjectPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExtractOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FilterOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultGraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|RuleRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PrunedPartitionList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SelectDesc
import|;
end_import

begin_comment
comment|/**  * This transformation does optimization for enforcing bucketing and sorting.  * For a query of the form:  * insert overwrite table T1 select * from T2;  * where T1 and T2 are bucketized/sorted on the same keys, we don't need a reducer to  * enforce bucketing and sorting.  */
end_comment

begin_class
specifier|public
class|class
name|BucketingSortingReduceSinkOptimizer
implements|implements
name|Transform
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BucketingSortingReduceSinkOptimizer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|BucketingSortingReduceSinkOptimizer
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|ParseContext
name|transform
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
name|HiveConf
name|conf
init|=
name|pctx
operator|.
name|getConf
argument_list|()
decl_stmt|;
comment|// process reduce sink added by hive.enforce.bucketing or hive.enforce.sorting
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R1"
argument_list|,
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
operator|+
name|ExtractOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
operator|+
name|FileSinkOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
name|getBucketSortReduceSinkProc
argument_list|(
name|pctx
argument_list|)
argument_list|)
expr_stmt|;
comment|// The dispatcher fires the processor corresponding to the closest matching rule
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|getDefaultProc
argument_list|()
argument_list|,
name|opRules
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
comment|// Create a list of topop nodes
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|addAll
argument_list|(
name|pctx
operator|.
name|getTopOps
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|pctx
return|;
block|}
specifier|private
name|NodeProcessor
name|getDefaultProc
parameter_list|()
block|{
return|return
operator|new
name|NodeProcessor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
specifier|private
name|NodeProcessor
name|getBucketSortReduceSinkProc
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
block|{
return|return
operator|new
name|BucketSortReduceSinkProcessor
argument_list|(
name|pctx
argument_list|)
return|;
block|}
comment|/**    * BucketSortReduceSinkProcessor.    *    */
specifier|public
class|class
name|BucketSortReduceSinkProcessor
implements|implements
name|NodeProcessor
block|{
specifier|protected
name|ParseContext
name|pGraphContext
decl_stmt|;
specifier|public
name|BucketSortReduceSinkProcessor
parameter_list|(
name|ParseContext
name|pGraphContext
parameter_list|)
block|{
name|this
operator|.
name|pGraphContext
operator|=
name|pGraphContext
expr_stmt|;
block|}
comment|// Get the bucket positions for the table
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|getBucketPositions
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|tabBucketCols
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|tabCols
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|posns
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|bucketCol
range|:
name|tabBucketCols
control|)
block|{
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FieldSchema
name|tabCol
range|:
name|tabCols
control|)
block|{
if|if
condition|(
name|bucketCol
operator|.
name|equals
argument_list|(
name|tabCol
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|posns
operator|.
name|add
argument_list|(
name|pos
argument_list|)
expr_stmt|;
break|break;
block|}
name|pos
operator|++
expr_stmt|;
block|}
block|}
return|return
name|posns
return|;
block|}
comment|// Get the sort positions and sort order for the table
specifier|private
name|List
argument_list|<
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|getSortPositions
parameter_list|(
name|List
argument_list|<
name|Order
argument_list|>
name|tabSortCols
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|tabCols
parameter_list|)
block|{
name|List
argument_list|<
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|posns
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Order
name|sortCol
range|:
name|tabSortCols
control|)
block|{
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FieldSchema
name|tabCol
range|:
name|tabCols
control|)
block|{
if|if
condition|(
name|sortCol
operator|.
name|getCol
argument_list|()
operator|.
name|equals
argument_list|(
name|tabCol
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|posns
operator|.
name|add
argument_list|(
operator|new
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|pos
argument_list|,
name|sortCol
operator|.
name|getOrder
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|pos
operator|++
expr_stmt|;
block|}
block|}
return|return
name|posns
return|;
block|}
comment|// Return true if the parition is bucketed/sorted by the specified positions
comment|// The number of buckets, the sort order should also match along with the
comment|// columns which are bucketed/sorted
specifier|private
name|boolean
name|checkPartition
parameter_list|(
name|Partition
name|partition
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|bucketPositionsDest
parameter_list|,
name|List
argument_list|<
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|sortPositionsDest
parameter_list|,
name|int
name|numBucketsDest
parameter_list|)
block|{
comment|// The bucketing and sorting positions should exactly match
name|int
name|numBuckets
init|=
name|partition
operator|.
name|getBucketCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|numBucketsDest
operator|!=
name|numBuckets
condition|)
block|{
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|partnBucketPositions
init|=
name|getBucketPositions
argument_list|(
name|partition
operator|.
name|getBucketCols
argument_list|()
argument_list|,
name|partition
operator|.
name|getTable
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|partnSortPositions
init|=
name|getSortPositions
argument_list|(
name|partition
operator|.
name|getSortCols
argument_list|()
argument_list|,
name|partition
operator|.
name|getTable
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|bucketPositionsDest
operator|.
name|equals
argument_list|(
name|partnBucketPositions
argument_list|)
operator|&&
name|sortPositionsDest
operator|.
name|equals
argument_list|(
name|partnSortPositions
argument_list|)
return|;
block|}
comment|// Return true if the table is bucketed/sorted by the specified positions
comment|// The number of buckets, the sort order should also match along with the
comment|// columns which are bucketed/sorted
specifier|private
name|boolean
name|checkTable
parameter_list|(
name|Table
name|table
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|bucketPositionsDest
parameter_list|,
name|List
argument_list|<
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|sortPositionsDest
parameter_list|,
name|int
name|numBucketsDest
parameter_list|)
block|{
comment|// The bucketing and sorting positions should exactly match
name|int
name|numBuckets
init|=
name|table
operator|.
name|getNumBuckets
argument_list|()
decl_stmt|;
if|if
condition|(
name|numBucketsDest
operator|!=
name|numBuckets
condition|)
block|{
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|tableBucketPositions
init|=
name|getBucketPositions
argument_list|(
name|table
operator|.
name|getBucketCols
argument_list|()
argument_list|,
name|table
operator|.
name|getCols
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|tableSortPositions
init|=
name|getSortPositions
argument_list|(
name|table
operator|.
name|getSortCols
argument_list|()
argument_list|,
name|table
operator|.
name|getCols
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|bucketPositionsDest
operator|.
name|equals
argument_list|(
name|tableBucketPositions
argument_list|)
operator|&&
name|sortPositionsDest
operator|.
name|equals
argument_list|(
name|tableSortPositions
argument_list|)
return|;
block|}
specifier|private
name|void
name|storeBucketPathMapping
parameter_list|(
name|TableScanOperator
name|tsOp
parameter_list|,
name|FileStatus
index|[]
name|srcs
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|bucketFileNameMapping
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|srcs
operator|.
name|length
condition|;
name|pos
operator|++
control|)
block|{
name|bucketFileNameMapping
operator|.
name|put
argument_list|(
name|srcs
index|[
name|pos
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
name|tsOp
operator|.
name|getConf
argument_list|()
operator|.
name|setBucketFileNameMapping
argument_list|(
name|bucketFileNameMapping
argument_list|)
expr_stmt|;
block|}
comment|// Remove the reduceSinkOperator.
comment|// The optimizer will automatically convert it to a map-only job.
specifier|private
name|void
name|removeReduceSink
parameter_list|(
name|ReduceSinkOperator
name|rsOp
parameter_list|,
name|TableScanOperator
name|tsOp
parameter_list|,
name|FileSinkOperator
name|fsOp
parameter_list|,
name|FileStatus
index|[]
name|srcs
parameter_list|)
block|{
if|if
condition|(
name|srcs
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|removeReduceSink
argument_list|(
name|rsOp
argument_list|,
name|tsOp
argument_list|,
name|fsOp
argument_list|)
expr_stmt|;
comment|// Store the mapping -> path, bucket number
comment|// This is needed since for the map-only job, any mapper can process any file.
comment|// For eg: if mapper 1 is processing the file corresponding to bucket 2, it should
comment|// also output the file correspodning to bucket 2 of the output.
name|storeBucketPathMapping
argument_list|(
name|tsOp
argument_list|,
name|srcs
argument_list|)
expr_stmt|;
block|}
comment|// Remove the reduce sink operator
comment|// Use bucketized hive input format so that one mapper processes exactly one file
specifier|private
name|void
name|removeReduceSink
parameter_list|(
name|ReduceSinkOperator
name|rsOp
parameter_list|,
name|TableScanOperator
name|tsOp
parameter_list|,
name|FileSinkOperator
name|fsOp
parameter_list|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parRSOp
init|=
name|rsOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|parRSOp
operator|.
name|getChildOperators
argument_list|()
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|fsOp
argument_list|)
expr_stmt|;
name|fsOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|parRSOp
argument_list|)
expr_stmt|;
name|fsOp
operator|.
name|getConf
argument_list|()
operator|.
name|setMultiFileSpray
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fsOp
operator|.
name|getConf
argument_list|()
operator|.
name|setTotalFiles
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fsOp
operator|.
name|getConf
argument_list|()
operator|.
name|setNumFiles
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|tsOp
operator|.
name|setUseBucketizedHiveInputFormat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|findColumnPosition
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|,
name|String
name|colName
parameter_list|)
block|{
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FieldSchema
name|col
range|:
name|cols
control|)
block|{
if|if
condition|(
name|colName
operator|.
name|equals
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|pos
return|;
block|}
name|pos
operator|++
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// If the reduce sink has not been introduced due to bucketing/sorting, ignore it
name|FileSinkOperator
name|fsOp
init|=
operator|(
name|FileSinkOperator
operator|)
name|nd
decl_stmt|;
name|ExtractOperator
name|exOp
init|=
operator|(
name|ExtractOperator
operator|)
name|fsOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ReduceSinkOperator
name|rsOp
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|exOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|rsOps
init|=
name|pGraphContext
operator|.
name|getReduceSinkOperatorsAddedByEnforceBucketingSorting
argument_list|()
decl_stmt|;
comment|// nothing to do
if|if
condition|(
operator|(
name|rsOps
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|rsOps
operator|.
name|contains
argument_list|(
name|rsOp
argument_list|)
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Support for dynamic partitions can be added later
if|if
condition|(
name|fsOp
operator|.
name|getConf
argument_list|()
operator|.
name|getDynPartCtx
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// No conversion is possible for the reduce keys
for|for
control|(
name|ExprNodeDesc
name|keyCol
range|:
name|rsOp
operator|.
name|getConf
argument_list|()
operator|.
name|getKeyCols
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|keyCol
operator|instanceof
name|ExprNodeColumnDesc
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
name|Table
name|destTable
init|=
name|pGraphContext
operator|.
name|getFsopToTable
argument_list|()
operator|.
name|get
argument_list|(
name|fsOp
argument_list|)
decl_stmt|;
if|if
condition|(
name|destTable
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Get the positions for sorted and bucketed columns
comment|// For sorted columns, also get the order (ascending/descending) - that should
comment|// also match for this to be converted to a map-only job.
name|List
argument_list|<
name|Integer
argument_list|>
name|bucketPositions
init|=
name|getBucketPositions
argument_list|(
name|destTable
operator|.
name|getBucketCols
argument_list|()
argument_list|,
name|destTable
operator|.
name|getCols
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|sortPositions
init|=
name|getSortPositions
argument_list|(
name|destTable
operator|.
name|getSortCols
argument_list|()
argument_list|,
name|destTable
operator|.
name|getCols
argument_list|()
argument_list|)
decl_stmt|;
comment|// Only selects and filters are allowed
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
init|=
name|rsOp
decl_stmt|;
comment|// TableScan will also be followed by a Select Operator. Find the expressions for the
comment|// bucketed/sorted columns for the destination table
name|List
argument_list|<
name|ExprNodeColumnDesc
argument_list|>
name|sourceTableBucketCols
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeColumnDesc
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeColumnDesc
argument_list|>
name|sourceTableSortCols
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeColumnDesc
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|op
operator|.
name|getParentOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|op
operator|=
name|op
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|op
operator|instanceof
name|TableScanOperator
operator|)
operator|&&
operator|!
operator|(
name|op
operator|instanceof
name|FilterOperator
operator|)
operator|&&
operator|!
operator|(
name|op
operator|instanceof
name|SelectOperator
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// nothing to be done for filters - the output schema does not change.
if|if
condition|(
name|op
operator|instanceof
name|TableScanOperator
condition|)
block|{
name|Table
name|srcTable
init|=
name|pGraphContext
operator|.
name|getTopToTable
argument_list|()
operator|.
name|get
argument_list|(
name|op
argument_list|)
decl_stmt|;
comment|// Find the positions of the bucketed columns in the table corresponding
comment|// to the select list.
comment|// Consider the following scenario:
comment|// T1(key, value1, value2) bucketed/sorted by key into 2 buckets
comment|// T2(dummy, key, value1, value2) bucketed/sorted by key into 2 buckets
comment|// A query like: insert overwrite table T2 select 1, key, value1, value2 from T1
comment|// should be optimized.
comment|// Start with the destination: T2, bucketed/sorted position is [1]
comment|// At the source T1, the column corresponding to that position is [key], which
comment|// maps to column [0] of T1, which is also bucketed/sorted into the same
comment|// number of buckets
name|List
argument_list|<
name|Integer
argument_list|>
name|newBucketPositions
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|bucketPositions
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|ExprNodeColumnDesc
name|col
init|=
name|sourceTableBucketCols
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|String
name|colName
init|=
name|col
operator|.
name|getColumn
argument_list|()
decl_stmt|;
name|int
name|bucketPos
init|=
name|findColumnPosition
argument_list|(
name|srcTable
operator|.
name|getCols
argument_list|()
argument_list|,
name|colName
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucketPos
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|newBucketPositions
operator|.
name|add
argument_list|(
name|bucketPos
argument_list|)
expr_stmt|;
block|}
comment|// Find the positions/order of the sorted columns in the table corresponding
comment|// to the select list.
name|List
argument_list|<
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|newSortPositions
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|sortPositions
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|ExprNodeColumnDesc
name|col
init|=
name|sourceTableSortCols
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|String
name|colName
init|=
name|col
operator|.
name|getColumn
argument_list|()
decl_stmt|;
name|int
name|sortPos
init|=
name|findColumnPosition
argument_list|(
name|srcTable
operator|.
name|getCols
argument_list|()
argument_list|,
name|colName
argument_list|)
decl_stmt|;
if|if
condition|(
name|sortPos
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|newSortPositions
operator|.
name|add
argument_list|(
operator|new
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|sortPos
argument_list|,
name|sortPositions
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|.
name|getSecond
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|srcTable
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|PrunedPartitionList
name|prunedParts
init|=
name|pGraphContext
operator|.
name|getOpToPartList
argument_list|()
operator|.
name|get
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|prunedParts
operator|.
name|getNotDeniedPartns
argument_list|()
decl_stmt|;
comment|// Support for dynamic partitions can be added later
comment|// The following is not optimized:
comment|// insert overwrite table T1(ds='1', hr) select key, value, hr from T2 where ds = '1';
comment|// where T1 and T2 are bucketed by the same keys and partitioned by ds. hr
if|if
condition|(
operator|(
name|partitions
operator|==
literal|null
operator|)
operator|||
operator|(
name|partitions
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|partitions
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
if|if
condition|(
operator|!
name|checkPartition
argument_list|(
name|partition
argument_list|,
name|newBucketPositions
argument_list|,
name|newSortPositions
argument_list|,
name|pGraphContext
operator|.
name|getFsopToTable
argument_list|()
operator|.
name|get
argument_list|(
name|fsOp
argument_list|)
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
name|removeReduceSink
argument_list|(
name|rsOp
argument_list|,
operator|(
name|TableScanOperator
operator|)
name|op
argument_list|,
name|fsOp
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSortedPaths
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|checkTable
argument_list|(
name|srcTable
argument_list|,
name|newBucketPositions
argument_list|,
name|newSortPositions
argument_list|,
name|pGraphContext
operator|.
name|getFsopToTable
argument_list|()
operator|.
name|get
argument_list|(
name|fsOp
argument_list|)
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|removeReduceSink
argument_list|(
name|rsOp
argument_list|,
operator|(
name|TableScanOperator
operator|)
name|op
argument_list|,
name|fsOp
argument_list|,
name|srcTable
operator|.
name|getSortedPaths
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|// None of the operators is changing the positions
elseif|else
if|if
condition|(
name|op
operator|instanceof
name|SelectOperator
condition|)
block|{
name|SelectOperator
name|selectOp
init|=
operator|(
name|SelectOperator
operator|)
name|op
decl_stmt|;
name|SelectDesc
name|selectDesc
init|=
name|selectOp
operator|.
name|getConf
argument_list|()
decl_stmt|;
comment|// There may be multiple selects - chose the one closest to the table
name|sourceTableBucketCols
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sourceTableSortCols
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Only columns can be selected for both sorted and bucketed positions
for|for
control|(
name|int
name|pos
range|:
name|bucketPositions
control|)
block|{
name|ExprNodeDesc
name|selectColList
init|=
name|selectDesc
operator|.
name|getColList
argument_list|()
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|selectColList
operator|instanceof
name|ExprNodeColumnDesc
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|sourceTableBucketCols
operator|.
name|add
argument_list|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|selectColList
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|pos
range|:
name|sortPositions
control|)
block|{
name|ExprNodeDesc
name|selectColList
init|=
name|selectDesc
operator|.
name|getColList
argument_list|()
operator|.
name|get
argument_list|(
name|pos
operator|.
name|getFirst
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|selectColList
operator|instanceof
name|ExprNodeColumnDesc
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|sourceTableSortCols
operator|.
name|add
argument_list|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|selectColList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

