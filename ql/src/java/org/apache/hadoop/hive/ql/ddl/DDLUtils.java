begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ReplicationSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HiveStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utilities used by some DDLOperations.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|DDLUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"hive.ql.exec.DDLTask"
argument_list|)
decl_stmt|;
specifier|private
name|DDLUtils
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"DDLUtils should not be instantiated"
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|DataOutputStream
name|getOutputStream
parameter_list|(
name|Path
name|outputFile
parameter_list|,
name|DDLOperationContext
name|context
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|FileSystem
name|fs
init|=
name|outputFile
operator|.
name|getFileSystem
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|create
argument_list|(
name|outputFile
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * There are many places where "duplicate" Read/WriteEnity objects are added.  The way this was    * initially implemented, the duplicate just replaced the previous object.    * (work.getOutputs() is a Set and WriteEntity#equals() relies on name)    * This may be benign for ReadEntity and perhaps was benign for WriteEntity before WriteType was    * added. Now that WriteEntity has a WriteType it replaces it with one with possibly different    * {@link org.apache.hadoop.hive.ql.hooks.WriteEntity.WriteType}. It's hard to imagine    * how this is desirable.    *    * As of HIVE-14993, WriteEntity with different WriteType must be considered different.    * So WriteEntity created in DDLTask cause extra output in golden files, but only because    * DDLTask sets a different WriteType for the same Entity.    *    * In the spirit of bug-for-bug compatibility, this method ensures we only add new    * WriteEntity if it's really new.    *    * @return {@code true} if item was added    */
specifier|public
specifier|static
name|boolean
name|addIfAbsentByName
parameter_list|(
name|WriteEntity
name|newWriteEntity
parameter_list|,
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|)
block|{
for|for
control|(
name|WriteEntity
name|writeEntity
range|:
name|outputs
control|)
block|{
if|if
condition|(
name|writeEntity
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|newWriteEntity
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring request to add {} because {} is present"
argument_list|,
name|newWriteEntity
operator|.
name|toStringDetail
argument_list|()
argument_list|,
name|writeEntity
operator|.
name|toStringDetail
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|outputs
operator|.
name|add
argument_list|(
name|newWriteEntity
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|boolean
name|addIfAbsentByName
parameter_list|(
name|WriteEntity
name|newWriteEntity
parameter_list|,
name|DDLOperationContext
name|context
parameter_list|)
block|{
return|return
name|addIfAbsentByName
argument_list|(
name|newWriteEntity
argument_list|,
name|context
operator|.
name|getWork
argument_list|()
operator|.
name|getOutputs
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Check if the given serde is valid.    */
specifier|public
specifier|static
name|void
name|validateSerDe
parameter_list|(
name|String
name|serdeName
parameter_list|,
name|DDLOperationContext
name|context
parameter_list|)
throws|throws
name|HiveException
block|{
name|validateSerDe
argument_list|(
name|serdeName
argument_list|,
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|validateSerDe
parameter_list|(
name|String
name|serdeName
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|Deserializer
name|d
init|=
name|ReflectionUtil
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClassByName
argument_list|(
name|serdeName
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|Deserializer
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found class for {}"
argument_list|,
name|serdeName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Cannot validate serde: "
operator|+
name|serdeName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Validate if the given table/partition is eligible for update.    *    * @param db Database.    * @param tableName Table name of format db.table    * @param partSpec Partition spec for the partition    * @param replicationSpec Replications specification    *    * @return boolean true if allow the operation    * @throws HiveException    */
specifier|public
specifier|static
name|boolean
name|allowOperationInReplicationScope
parameter_list|(
name|Hive
name|db
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|,
name|ReplicationSpec
name|replicationSpec
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|(
literal|null
operator|==
name|replicationSpec
operator|)
operator|||
operator|(
operator|!
name|replicationSpec
operator|.
name|isInReplicationScope
argument_list|()
operator|)
condition|)
block|{
comment|// Always allow the operation if it is not in replication scope.
return|return
literal|true
return|;
block|}
comment|// If the table/partition exist and is older than the event, then just apply the event else noop.
name|Table
name|existingTable
init|=
name|db
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|existingTable
operator|!=
literal|null
operator|)
operator|&&
name|replicationSpec
operator|.
name|allowEventReplacementInto
argument_list|(
name|existingTable
operator|.
name|getParameters
argument_list|()
argument_list|)
condition|)
block|{
comment|// Table exists and is older than the update. Now, need to ensure if update allowed on the partition.
if|if
condition|(
name|partSpec
operator|!=
literal|null
condition|)
block|{
name|Partition
name|existingPtn
init|=
name|db
operator|.
name|getPartition
argument_list|(
name|existingTable
argument_list|,
name|partSpec
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|existingPtn
operator|!=
literal|null
operator|)
operator|&&
name|replicationSpec
operator|.
name|allowEventReplacementInto
argument_list|(
name|existingPtn
operator|.
name|getParameters
argument_list|()
argument_list|)
operator|)
return|;
block|}
comment|// Replacement is allowed as the existing table is older than event
return|return
literal|true
return|;
block|}
comment|// The table is missing either due to drop/rename which follows the operation.
comment|// Or the existing table is newer than our update. So, don't allow the update.
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|String
name|propertiesToString
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|exclude
parameter_list|)
block|{
if|if
condition|(
name|props
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sortedProperties
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|realProps
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|sortedProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|exclude
operator|==
literal|null
operator|||
operator|!
name|exclude
operator|.
name|contains
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|realProps
operator|.
name|add
argument_list|(
literal|"  '"
operator|+
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|"'='"
operator|+
name|HiveStringUtils
operator|.
name|escapeHiveCommand
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|StringUtils
operator|.
name|join
argument_list|(
name|realProps
argument_list|,
literal|", \n"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|writeToFile
parameter_list|(
name|String
name|data
parameter_list|,
name|String
name|file
parameter_list|,
name|DDLOperationContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|data
argument_list|)
condition|)
block|{
return|return;
block|}
name|Path
name|resFile
init|=
operator|new
name|Path
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|resFile
operator|.
name|getFileSystem
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|resFile
argument_list|)
init|;
name|OutputStreamWriter
name|writer
operator|=
operator|new
name|OutputStreamWriter
argument_list|(
name|out
argument_list|,
literal|"UTF-8"
argument_list|)
init|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
operator|(
name|char
operator|)
name|Utilities
operator|.
name|newLineCode
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|appendNonNull
parameter_list|(
name|StringBuilder
name|builder
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|appendNonNull
parameter_list|(
name|StringBuilder
name|builder
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|firstColumn
parameter_list|)
block|{
if|if
condition|(
operator|!
name|firstColumn
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|builder
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|Utilities
operator|.
name|newLineCode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

