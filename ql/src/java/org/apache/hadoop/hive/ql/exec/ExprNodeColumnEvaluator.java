begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|exprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|InspectableObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_comment
comment|/**  * This class support multi-level fields like "a.b.c" for historical reasons.  */
end_comment

begin_class
specifier|public
class|class
name|ExprNodeColumnEvaluator
extends|extends
name|ExprNodeEvaluator
block|{
specifier|protected
name|exprNodeColumnDesc
name|expr
decl_stmt|;
specifier|transient
name|StructObjectInspector
name|cachedRowInspector
decl_stmt|;
specifier|transient
name|String
index|[]
name|fieldNames
decl_stmt|;
specifier|transient
name|StructField
index|[]
name|fields
decl_stmt|;
specifier|transient
name|ObjectInspector
index|[]
name|fieldsObjectInspector
decl_stmt|;
specifier|public
name|ExprNodeColumnEvaluator
parameter_list|(
name|exprNodeColumnDesc
name|expr
parameter_list|)
block|{
name|this
operator|.
name|expr
operator|=
name|expr
expr_stmt|;
block|}
specifier|public
name|void
name|evaluate
parameter_list|(
name|Object
name|row
parameter_list|,
name|ObjectInspector
name|rowInspector
parameter_list|,
name|InspectableObject
name|result
parameter_list|)
throws|throws
name|HiveException
block|{
assert|assert
operator|(
name|result
operator|!=
literal|null
operator|)
assert|;
comment|// If this is the first row, or the dynamic structure of this row
comment|// is different from the previous row
if|if
condition|(
name|fields
operator|==
literal|null
operator|||
name|cachedRowInspector
operator|!=
name|rowInspector
condition|)
block|{
name|evaluateInspector
argument_list|(
name|rowInspector
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|o
operator|=
name|cachedRowInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|o
operator|=
operator|(
operator|(
name|StructObjectInspector
operator|)
name|fieldsObjectInspector
index|[
name|i
operator|-
literal|1
index|]
operator|)
operator|.
name|getStructFieldData
argument_list|(
name|result
operator|.
name|o
argument_list|,
name|fields
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|oi
operator|=
name|fieldsObjectInspector
index|[
name|fieldsObjectInspector
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
block|}
specifier|public
name|ObjectInspector
name|evaluateInspector
parameter_list|(
name|ObjectInspector
name|rowInspector
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|fields
operator|==
literal|null
operator|||
name|cachedRowInspector
operator|!=
name|rowInspector
condition|)
block|{
name|cachedRowInspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|rowInspector
expr_stmt|;
name|fieldNames
operator|=
name|expr
operator|.
name|getColumn
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fields
operator|=
operator|new
name|StructField
index|[
name|fieldNames
operator|.
name|length
index|]
expr_stmt|;
name|fieldsObjectInspector
operator|=
operator|new
name|ObjectInspector
index|[
name|fieldNames
operator|.
name|length
index|]
expr_stmt|;
name|fields
index|[
literal|0
index|]
operator|=
name|cachedRowInspector
operator|.
name|getStructFieldRef
argument_list|(
name|fieldNames
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|fieldsObjectInspector
index|[
literal|0
index|]
operator|=
name|fields
index|[
literal|0
index|]
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|fieldNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fields
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|StructObjectInspector
operator|)
name|fieldsObjectInspector
index|[
name|i
operator|-
literal|1
index|]
operator|)
operator|.
name|getStructFieldRef
argument_list|(
name|fieldNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|fieldsObjectInspector
index|[
name|i
index|]
operator|=
name|fields
index|[
name|i
index|]
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|fieldsObjectInspector
index|[
name|fieldsObjectInspector
operator|.
name|length
operator|-
literal|1
index|]
return|;
block|}
block|}
end_class

end_unit

