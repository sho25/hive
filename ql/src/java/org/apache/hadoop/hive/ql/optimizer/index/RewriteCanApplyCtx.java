begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FilterOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|PreOrderOnceWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|RuleRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_comment
comment|/**  * RewriteCanApplyCtx class stores the context for the {@link RewriteCanApplyProcFactory}  * to determine if any index can be used and if the input query  * meets all the criteria for rewrite optimization.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|RewriteCanApplyCtx
implements|implements
name|NodeProcessorCtx
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RewriteCanApplyCtx
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|RewriteCanApplyCtx
parameter_list|(
name|ParseContext
name|parseContext
parameter_list|)
block|{
name|this
operator|.
name|parseContext
operator|=
name|parseContext
expr_stmt|;
block|}
specifier|public
specifier|static
name|RewriteCanApplyCtx
name|getInstance
parameter_list|(
name|ParseContext
name|parseContext
parameter_list|)
block|{
return|return
operator|new
name|RewriteCanApplyCtx
argument_list|(
name|parseContext
argument_list|)
return|;
block|}
comment|// Rewrite Variables
specifier|private
name|boolean
name|selClauseColsFetchException
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|queryHasGroupBy
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|aggFuncIsNotCount
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|aggParameterException
init|=
literal|false
decl_stmt|;
comment|//The most important, indexKey
specifier|private
name|String
name|indexKey
decl_stmt|;
specifier|private
specifier|final
name|ParseContext
name|parseContext
decl_stmt|;
specifier|private
name|String
name|alias
decl_stmt|;
specifier|private
name|String
name|baseTableName
decl_stmt|;
specifier|private
name|String
name|indexTableName
decl_stmt|;
specifier|private
name|String
name|aggFunction
decl_stmt|;
specifier|private
name|TableScanOperator
name|tableScanOperator
decl_stmt|;
specifier|private
name|List
argument_list|<
name|SelectOperator
argument_list|>
name|selectOperators
decl_stmt|;
specifier|private
name|List
argument_list|<
name|GroupByOperator
argument_list|>
name|groupByOperators
decl_stmt|;
name|void
name|resetCanApplyCtx
parameter_list|()
block|{
name|setQueryHasGroupBy
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setAggFuncIsNotCount
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setSelClauseColsFetchException
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setBaseTableName
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setAggFunction
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setIndexKey
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isQueryHasGroupBy
parameter_list|()
block|{
return|return
name|queryHasGroupBy
return|;
block|}
specifier|public
name|void
name|setQueryHasGroupBy
parameter_list|(
name|boolean
name|queryHasGroupBy
parameter_list|)
block|{
name|this
operator|.
name|queryHasGroupBy
operator|=
name|queryHasGroupBy
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAggFuncIsNotCount
parameter_list|()
block|{
return|return
name|aggFuncIsNotCount
return|;
block|}
specifier|public
name|void
name|setAggFuncIsNotCount
parameter_list|(
name|boolean
name|aggFuncIsNotCount
parameter_list|)
block|{
name|this
operator|.
name|aggFuncIsNotCount
operator|=
name|aggFuncIsNotCount
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getBaseToIdxTableMap
parameter_list|()
block|{
return|return
name|baseToIdxTableMap
return|;
block|}
specifier|public
name|void
name|setAggFunction
parameter_list|(
name|String
name|aggFunction
parameter_list|)
block|{
name|this
operator|.
name|aggFunction
operator|=
name|aggFunction
expr_stmt|;
block|}
specifier|public
name|String
name|getAggFunction
parameter_list|()
block|{
return|return
name|aggFunction
return|;
block|}
specifier|public
name|void
name|setSelClauseColsFetchException
parameter_list|(
name|boolean
name|selClauseColsFetchException
parameter_list|)
block|{
name|this
operator|.
name|selClauseColsFetchException
operator|=
name|selClauseColsFetchException
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSelClauseColsFetchException
parameter_list|()
block|{
return|return
name|selClauseColsFetchException
return|;
block|}
specifier|public
name|String
name|getAlias
parameter_list|()
block|{
return|return
name|alias
return|;
block|}
specifier|public
name|void
name|setAlias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|this
operator|.
name|alias
operator|=
name|alias
expr_stmt|;
block|}
specifier|public
name|String
name|getBaseTableName
parameter_list|()
block|{
return|return
name|baseTableName
return|;
block|}
specifier|public
name|void
name|setBaseTableName
parameter_list|(
name|String
name|baseTableName
parameter_list|)
block|{
name|this
operator|.
name|baseTableName
operator|=
name|baseTableName
expr_stmt|;
block|}
specifier|public
name|String
name|getIndexTableName
parameter_list|()
block|{
return|return
name|indexTableName
return|;
block|}
specifier|public
name|void
name|setIndexTableName
parameter_list|(
name|String
name|indexTableName
parameter_list|)
block|{
name|this
operator|.
name|indexTableName
operator|=
name|indexTableName
expr_stmt|;
block|}
specifier|public
name|ParseContext
name|getParseContext
parameter_list|()
block|{
return|return
name|parseContext
return|;
block|}
comment|/**    * This method walks all the nodes starting from topOp TableScanOperator node    * and invokes methods from {@link RewriteCanApplyProcFactory} for each of the rules    * added to the opRules map. We use the {@link PreOrderOnceWalker} for a pre-order    * traversal of the operator tree.    *    * The methods from {@link RewriteCanApplyProcFactory} set appropriate values in    * {@link RewriteVars} enum.    *    * @param topOp    * @throws SemanticException    */
name|void
name|populateRewriteVars
parameter_list|(
name|TableScanOperator
name|topOp
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
comment|//^TS%[(SEL%)|(FIL%)]*GRY%[(FIL%)]*RS%[(FIL%)]*GRY%
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R1"
argument_list|,
name|TableScanOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%[("
operator|+
name|SelectOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%)|("
operator|+
name|FilterOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%)]*"
operator|+
name|GroupByOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%["
operator|+
name|FilterOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%]*"
operator|+
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%["
operator|+
name|FilterOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%]*"
operator|+
name|GroupByOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
name|RewriteCanApplyProcFactory
operator|.
name|canApplyOnTableScanOperator
argument_list|(
name|topOp
argument_list|)
argument_list|)
expr_stmt|;
comment|// The dispatcher fires the processor corresponding to the closest matching
comment|// rule and passes the context along
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|getDefaultProc
argument_list|()
argument_list|,
name|opRules
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|PreOrderOnceWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
comment|// Create a list of topop nodes
name|List
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|add
argument_list|(
name|topOp
argument_list|)
expr_stmt|;
try|try
block|{
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in walking operator tree. Rewrite variables not populated"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Default procedure for {@link DefaultRuleDispatcher}.    * @return    */
specifier|private
name|NodeProcessor
name|getDefaultProc
parameter_list|()
block|{
return|return
operator|new
name|NodeProcessor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
comment|//Map for base table to index table mapping
comment|//TableScan operator for base table will be modified to read from index table
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|baseToIdxTableMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
empty_stmt|;
specifier|public
name|void
name|addTable
parameter_list|(
name|String
name|baseTableName
parameter_list|,
name|String
name|indexTableName
parameter_list|)
block|{
name|baseToIdxTableMap
operator|.
name|put
argument_list|(
name|baseTableName
argument_list|,
name|indexTableName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|findBaseTable
parameter_list|(
name|String
name|baseTableName
parameter_list|)
block|{
return|return
name|baseToIdxTableMap
operator|.
name|get
argument_list|(
name|baseTableName
argument_list|)
return|;
block|}
specifier|public
name|String
name|getIndexKey
parameter_list|()
block|{
return|return
name|indexKey
return|;
block|}
specifier|public
name|void
name|setIndexKey
parameter_list|(
name|String
name|indexKey
parameter_list|)
block|{
name|this
operator|.
name|indexKey
operator|=
name|indexKey
expr_stmt|;
block|}
specifier|public
name|TableScanOperator
name|getTableScanOperator
parameter_list|()
block|{
return|return
name|tableScanOperator
return|;
block|}
specifier|public
name|void
name|setTableScanOperator
parameter_list|(
name|TableScanOperator
name|tableScanOperator
parameter_list|)
block|{
name|this
operator|.
name|tableScanOperator
operator|=
name|tableScanOperator
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|SelectOperator
argument_list|>
name|getSelectOperators
parameter_list|()
block|{
return|return
name|selectOperators
return|;
block|}
specifier|public
name|void
name|setSelectOperators
parameter_list|(
name|List
argument_list|<
name|SelectOperator
argument_list|>
name|selectOperators
parameter_list|)
block|{
name|this
operator|.
name|selectOperators
operator|=
name|selectOperators
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|GroupByOperator
argument_list|>
name|getGroupByOperators
parameter_list|()
block|{
return|return
name|groupByOperators
return|;
block|}
specifier|public
name|void
name|setGroupByOperators
parameter_list|(
name|List
argument_list|<
name|GroupByOperator
argument_list|>
name|groupByOperators
parameter_list|)
block|{
name|this
operator|.
name|groupByOperators
operator|=
name|groupByOperators
expr_stmt|;
block|}
specifier|public
name|void
name|setAggParameterException
parameter_list|(
name|boolean
name|aggParameterException
parameter_list|)
block|{
name|this
operator|.
name|aggParameterException
operator|=
name|aggParameterException
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAggParameterException
parameter_list|()
block|{
return|return
name|aggParameterException
return|;
block|}
block|}
end_class

end_unit

