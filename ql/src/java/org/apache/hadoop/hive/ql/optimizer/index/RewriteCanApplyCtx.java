begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FilterOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|PreOrderWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|RuleRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_comment
comment|/**  * RewriteCanApplyCtx class stores the context for the {@link RewriteCanApplyProcFactory}  * to determine if any index can be used and if the input query  * meets all the criteria for rewrite optimization.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|RewriteCanApplyCtx
implements|implements
name|NodeProcessorCtx
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RewriteCanApplyCtx
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|RewriteCanApplyCtx
parameter_list|(
name|ParseContext
name|parseContext
parameter_list|)
block|{
name|this
operator|.
name|parseContext
operator|=
name|parseContext
expr_stmt|;
block|}
specifier|public
specifier|static
name|RewriteCanApplyCtx
name|getInstance
parameter_list|(
name|ParseContext
name|parseContext
parameter_list|)
block|{
return|return
operator|new
name|RewriteCanApplyCtx
argument_list|(
name|parseContext
argument_list|)
return|;
block|}
comment|// Rewrite Variables
specifier|private
name|int
name|aggFuncCnt
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|queryHasGroupBy
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|aggFuncIsNotCount
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|aggFuncColsFetchException
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|whrClauseColsFetchException
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|selClauseColsFetchException
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|gbyKeysFetchException
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|countOnAllCols
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|countOfOne
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|queryHasMultipleTables
init|=
literal|false
decl_stmt|;
comment|//Data structures that are populated in the RewriteCanApplyProcFactory
comment|//methods to check if the index key meets all criteria
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|selectColumnsList
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|predicateColumnsList
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|gbKeyNameList
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|aggFuncColList
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ParseContext
name|parseContext
decl_stmt|;
specifier|private
name|String
name|baseTableName
decl_stmt|;
specifier|private
name|String
name|aggFunction
decl_stmt|;
name|void
name|resetCanApplyCtx
parameter_list|()
block|{
name|setAggFuncCnt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setQueryHasGroupBy
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setAggFuncIsNotCount
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setAggFuncColsFetchException
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setWhrClauseColsFetchException
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setSelClauseColsFetchException
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setGbyKeysFetchException
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setCountOnAllCols
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setCountOfOne
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setQueryHasMultipleTables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|selectColumnsList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|predicateColumnsList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|gbKeyNameList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|aggFuncColList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|setBaseTableName
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setAggFunction
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isQueryHasGroupBy
parameter_list|()
block|{
return|return
name|queryHasGroupBy
return|;
block|}
specifier|public
name|void
name|setQueryHasGroupBy
parameter_list|(
name|boolean
name|queryHasGroupBy
parameter_list|)
block|{
name|this
operator|.
name|queryHasGroupBy
operator|=
name|queryHasGroupBy
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAggFuncIsNotCount
parameter_list|()
block|{
return|return
name|aggFuncIsNotCount
return|;
block|}
specifier|public
name|void
name|setAggFuncIsNotCount
parameter_list|(
name|boolean
name|aggFuncIsNotCount
parameter_list|)
block|{
name|this
operator|.
name|aggFuncIsNotCount
operator|=
name|aggFuncIsNotCount
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getBaseToIdxTableMap
parameter_list|()
block|{
return|return
name|baseToIdxTableMap
return|;
block|}
specifier|public
name|void
name|setAggFunction
parameter_list|(
name|String
name|aggFunction
parameter_list|)
block|{
name|this
operator|.
name|aggFunction
operator|=
name|aggFunction
expr_stmt|;
block|}
specifier|public
name|String
name|getAggFunction
parameter_list|()
block|{
return|return
name|aggFunction
return|;
block|}
specifier|public
name|void
name|setAggFuncColsFetchException
parameter_list|(
name|boolean
name|aggFuncColsFetchException
parameter_list|)
block|{
name|this
operator|.
name|aggFuncColsFetchException
operator|=
name|aggFuncColsFetchException
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAggFuncColsFetchException
parameter_list|()
block|{
return|return
name|aggFuncColsFetchException
return|;
block|}
specifier|public
name|void
name|setWhrClauseColsFetchException
parameter_list|(
name|boolean
name|whrClauseColsFetchException
parameter_list|)
block|{
name|this
operator|.
name|whrClauseColsFetchException
operator|=
name|whrClauseColsFetchException
expr_stmt|;
block|}
specifier|public
name|boolean
name|isWhrClauseColsFetchException
parameter_list|()
block|{
return|return
name|whrClauseColsFetchException
return|;
block|}
specifier|public
name|void
name|setSelClauseColsFetchException
parameter_list|(
name|boolean
name|selClauseColsFetchException
parameter_list|)
block|{
name|this
operator|.
name|selClauseColsFetchException
operator|=
name|selClauseColsFetchException
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSelClauseColsFetchException
parameter_list|()
block|{
return|return
name|selClauseColsFetchException
return|;
block|}
specifier|public
name|void
name|setGbyKeysFetchException
parameter_list|(
name|boolean
name|gbyKeysFetchException
parameter_list|)
block|{
name|this
operator|.
name|gbyKeysFetchException
operator|=
name|gbyKeysFetchException
expr_stmt|;
block|}
specifier|public
name|boolean
name|isGbyKeysFetchException
parameter_list|()
block|{
return|return
name|gbyKeysFetchException
return|;
block|}
specifier|public
name|void
name|setCountOnAllCols
parameter_list|(
name|boolean
name|countOnAllCols
parameter_list|)
block|{
name|this
operator|.
name|countOnAllCols
operator|=
name|countOnAllCols
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCountOnAllCols
parameter_list|()
block|{
return|return
name|countOnAllCols
return|;
block|}
specifier|public
name|void
name|setCountOfOne
parameter_list|(
name|boolean
name|countOfOne
parameter_list|)
block|{
name|this
operator|.
name|countOfOne
operator|=
name|countOfOne
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCountOfOne
parameter_list|()
block|{
return|return
name|countOfOne
return|;
block|}
specifier|public
name|void
name|setQueryHasMultipleTables
parameter_list|(
name|boolean
name|queryHasMultipleTables
parameter_list|)
block|{
name|this
operator|.
name|queryHasMultipleTables
operator|=
name|queryHasMultipleTables
expr_stmt|;
block|}
specifier|public
name|boolean
name|isQueryHasMultipleTables
parameter_list|()
block|{
return|return
name|queryHasMultipleTables
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getSelectColumnsList
parameter_list|()
block|{
return|return
name|selectColumnsList
return|;
block|}
specifier|public
name|void
name|setSelectColumnsList
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|selectColumnsList
parameter_list|)
block|{
name|this
operator|.
name|selectColumnsList
operator|=
name|selectColumnsList
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getPredicateColumnsList
parameter_list|()
block|{
return|return
name|predicateColumnsList
return|;
block|}
specifier|public
name|void
name|setPredicateColumnsList
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|predicateColumnsList
parameter_list|)
block|{
name|this
operator|.
name|predicateColumnsList
operator|=
name|predicateColumnsList
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getGbKeyNameList
parameter_list|()
block|{
return|return
name|gbKeyNameList
return|;
block|}
specifier|public
name|void
name|setGbKeyNameList
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|gbKeyNameList
parameter_list|)
block|{
name|this
operator|.
name|gbKeyNameList
operator|=
name|gbKeyNameList
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAggFuncColList
parameter_list|()
block|{
return|return
name|aggFuncColList
return|;
block|}
specifier|public
name|void
name|setAggFuncColList
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|aggFuncColList
parameter_list|)
block|{
name|this
operator|.
name|aggFuncColList
operator|=
name|aggFuncColList
expr_stmt|;
block|}
specifier|public
name|int
name|getAggFuncCnt
parameter_list|()
block|{
return|return
name|aggFuncCnt
return|;
block|}
specifier|public
name|void
name|setAggFuncCnt
parameter_list|(
name|int
name|aggFuncCnt
parameter_list|)
block|{
name|this
operator|.
name|aggFuncCnt
operator|=
name|aggFuncCnt
expr_stmt|;
block|}
specifier|public
name|String
name|getBaseTableName
parameter_list|()
block|{
return|return
name|baseTableName
return|;
block|}
specifier|public
name|void
name|setBaseTableName
parameter_list|(
name|String
name|baseTableName
parameter_list|)
block|{
name|this
operator|.
name|baseTableName
operator|=
name|baseTableName
expr_stmt|;
block|}
specifier|public
name|ParseContext
name|getParseContext
parameter_list|()
block|{
return|return
name|parseContext
return|;
block|}
comment|/**    * This method walks all the nodes starting from topOp TableScanOperator node    * and invokes methods from {@link RewriteCanApplyProcFactory} for each of the rules    * added to the opRules map. We use the {@link PreOrderWalker} for a pre-order    * traversal of the operator tree.    *    * The methods from {@link RewriteCanApplyProcFactory} set appropriate values in    * {@link RewriteVars} enum.    *    * @param topOp    * @throws SemanticException    */
name|void
name|populateRewriteVars
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|topOp
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R1"
argument_list|,
name|FilterOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
name|RewriteCanApplyProcFactory
operator|.
name|canApplyOnFilterOperator
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R2"
argument_list|,
name|GroupByOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
name|RewriteCanApplyProcFactory
operator|.
name|canApplyOnGroupByOperator
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R3"
argument_list|,
name|SelectOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
name|RewriteCanApplyProcFactory
operator|.
name|canApplyOnSelectOperator
argument_list|()
argument_list|)
expr_stmt|;
comment|// The dispatcher fires the processor corresponding to the closest matching
comment|// rule and passes the context along
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|getDefaultProc
argument_list|()
argument_list|,
name|opRules
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|PreOrderWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
comment|// Create a list of topop nodes
name|List
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|add
argument_list|(
name|topOp
argument_list|)
expr_stmt|;
try|try
block|{
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in walking operator tree. Rewrite variables not populated"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Default procedure for {@link DefaultRuleDispatcher}.    * @return    */
specifier|private
name|NodeProcessor
name|getDefaultProc
parameter_list|()
block|{
return|return
operator|new
name|NodeProcessor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
comment|//Map for base table to index table mapping
comment|//TableScan operator for base table will be modified to read from index table
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|baseToIdxTableMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
empty_stmt|;
specifier|public
name|void
name|addTable
parameter_list|(
name|String
name|baseTableName
parameter_list|,
name|String
name|indexTableName
parameter_list|)
block|{
name|baseToIdxTableMap
operator|.
name|put
argument_list|(
name|baseTableName
argument_list|,
name|indexTableName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|findBaseTable
parameter_list|(
name|String
name|baseTableName
parameter_list|)
block|{
return|return
name|baseToIdxTableMap
operator|.
name|get
argument_list|(
name|baseTableName
argument_list|)
return|;
block|}
name|boolean
name|isIndexUsableForQueryBranchRewrite
parameter_list|(
name|Index
name|index
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|indexKeyNames
parameter_list|)
block|{
comment|//--------------------------------------------
comment|//Check if all columns in select list are part of index key columns
if|if
condition|(
operator|!
name|indexKeyNames
operator|.
name|containsAll
argument_list|(
name|selectColumnsList
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Select list has non index key column : "
operator|+
literal|" Cannot use index "
operator|+
name|index
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|//--------------------------------------------
comment|// Check if all columns in where predicate are part of index key columns
if|if
condition|(
operator|!
name|indexKeyNames
operator|.
name|containsAll
argument_list|(
name|predicateColumnsList
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Predicate column ref list has non index key column : "
operator|+
literal|" Cannot use index  "
operator|+
name|index
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|//--------------------------------------------
comment|// For group by, we need to check if all keys are from index columns
comment|// itself. Here GB key order can be different than index columns but that does
comment|// not really matter for final result.
if|if
condition|(
operator|!
name|indexKeyNames
operator|.
name|containsAll
argument_list|(
name|gbKeyNameList
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Group by key has some non-indexed columns, "
operator|+
literal|" Cannot use index  "
operator|+
name|index
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// If we have agg function (currently only COUNT is supported), check if its inputs are
comment|// from index. we currently support only that.
if|if
condition|(
name|aggFuncColList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|indexKeyNames
operator|.
name|containsAll
argument_list|(
name|aggFuncColList
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Agg Func input is not present in index key columns. Currently "
operator|+
literal|"only agg func on index columns are supported by rewrite optimization"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|//Now that we are good to do this optimization, set parameters in context
comment|//which would be used by transformation procedure as inputs.
if|if
condition|(
name|queryHasGroupBy
operator|&&
name|aggFuncCnt
operator|==
literal|1
operator|&&
operator|!
name|aggFuncIsNotCount
condition|)
block|{
name|addTable
argument_list|(
name|baseTableName
argument_list|,
name|index
operator|.
name|getIndexTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No valid criteria met to apply rewrite."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

