begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MemoryMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|SoftReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|DataTypePhysicalVariation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|IConfigureJobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|KeyWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|ConstantVectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpressionWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpressionWriterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
operator|.
name|VectorAggregateExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|wrapper
operator|.
name|VectorHashKeyWrapperBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|wrapper
operator|.
name|VectorHashKeyWrapperBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|GroupByDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorGroupByDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|JavaDataModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javolution
operator|.
name|util
operator|.
name|FastBitSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Vectorized GROUP BY operator implementation. Consumes the vectorized input and  * stores the aggregate operators' intermediate states. Emits row mode output.  *  */
end_comment

begin_class
specifier|public
class|class
name|VectorGroupByOperator
extends|extends
name|Operator
argument_list|<
name|GroupByDesc
argument_list|>
implements|implements
name|VectorizationOperator
implements|,
name|VectorizationContextRegion
implements|,
name|IConfigureJobConf
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VectorGroupByOperator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|VectorizationContext
name|vContext
decl_stmt|;
specifier|private
name|VectorGroupByDesc
name|vectorDesc
decl_stmt|;
comment|/**    * This is the vector of aggregators. They are stateless and only implement    * the algorithm of how to compute the aggregation. state is kept in the    * aggregation buffers and is our responsibility to match the proper state for each key.    */
specifier|private
name|VectorAggregationDesc
index|[]
name|vecAggrDescs
decl_stmt|;
comment|/**    * Key vector expressions.    */
specifier|private
name|VectorExpression
index|[]
name|keyExpressions
decl_stmt|;
specifier|private
name|int
name|outputKeyLength
decl_stmt|;
specifier|private
name|TypeInfo
index|[]
name|outputTypeInfos
decl_stmt|;
specifier|private
name|DataTypePhysicalVariation
index|[]
name|outputDataTypePhysicalVariations
decl_stmt|;
comment|// Create a new outgoing vectorization context because column name map will change.
specifier|private
name|VectorizationContext
name|vOutContext
init|=
literal|null
decl_stmt|;
comment|// The above members are initialized by the constructor and must not be
comment|// transient.
comment|//---------------------------------------------------------------------------
specifier|private
specifier|transient
name|VectorAggregateExpression
index|[]
name|aggregators
decl_stmt|;
comment|/**    * The aggregation buffers to use for the current batch.    */
specifier|private
specifier|transient
name|VectorAggregationBufferBatch
name|aggregationBatchInfo
decl_stmt|;
comment|/**    * The current batch key wrappers.    * The very same instance gets reused for all batches.    */
specifier|private
specifier|transient
name|VectorHashKeyWrapperBatch
name|keyWrappersBatch
decl_stmt|;
specifier|private
specifier|transient
name|Object
index|[]
name|forwardCache
decl_stmt|;
specifier|private
specifier|transient
name|VectorizedRowBatch
name|outputBatch
decl_stmt|;
specifier|private
specifier|transient
name|VectorizedRowBatchCtx
name|vrbCtx
decl_stmt|;
comment|/*    * Grouping sets members.    */
specifier|private
specifier|transient
name|boolean
name|groupingSetsPresent
decl_stmt|;
comment|// The field bits (i.e. which fields to include) or "id" for each grouping set.
specifier|private
specifier|transient
name|long
index|[]
name|groupingSets
decl_stmt|;
comment|// The position in the column keys of the dummy grouping set id column.
specifier|private
specifier|transient
name|int
name|groupingSetsPosition
decl_stmt|;
comment|// The planner puts a constant field in for the dummy grouping set id.  We will overwrite it
comment|// as we process the grouping sets.
specifier|private
specifier|transient
name|ConstantVectorExpression
name|groupingSetsDummyVectorExpression
decl_stmt|;
comment|// We translate the grouping set bit field into a boolean arrays.
specifier|private
specifier|transient
name|boolean
index|[]
index|[]
name|allGroupingSetsOverrideIsNulls
decl_stmt|;
specifier|private
specifier|transient
name|int
name|numEntriesHashTable
decl_stmt|;
specifier|private
specifier|transient
name|long
name|maxHashTblMemory
decl_stmt|;
specifier|private
specifier|transient
name|long
name|maxMemory
decl_stmt|;
specifier|private
name|float
name|memoryThreshold
decl_stmt|;
comment|/**    * Interface for processing mode: global, hash, unsorted streaming, or group batch    */
specifier|private
specifier|static
interface|interface
name|IProcessingMode
block|{
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
function_decl|;
specifier|public
name|void
name|setNextVectorBatchGroupStatus
parameter_list|(
name|boolean
name|isLastGroupBatch
parameter_list|)
throws|throws
name|HiveException
function_decl|;
specifier|public
name|void
name|processBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
function_decl|;
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|aborted
parameter_list|)
throws|throws
name|HiveException
function_decl|;
block|}
comment|/**    * Base class for all processing modes    */
specifier|private
specifier|abstract
class|class
name|ProcessingModeBase
implements|implements
name|IProcessingMode
block|{
comment|// Overridden and used in ProcessingModeReduceMergePartial mode.
annotation|@
name|Override
specifier|public
name|void
name|setNextVectorBatchGroupStatus
parameter_list|(
name|boolean
name|isLastGroupBatch
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Some Spark plans cause Hash and other modes to get this.  So, ignore it.
block|}
specifier|protected
specifier|abstract
name|void
name|doProcessBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|boolean
name|isFirstGroupingSet
parameter_list|,
name|boolean
index|[]
name|currentGroupingSetsOverrideIsNulls
parameter_list|)
throws|throws
name|HiveException
function_decl|;
annotation|@
name|Override
specifier|public
name|void
name|processBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|groupingSetsPresent
condition|)
block|{
name|doProcessBatch
argument_list|(
name|batch
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// We drive the doProcessBatch logic with the same batch but different
comment|// grouping set id and null variation.
comment|// PERFORMANCE NOTE: We do not try to reuse columns and generate the KeyWrappers anew...
specifier|final
name|int
name|size
init|=
name|groupingSets
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
comment|// NOTE: We are overwriting the constant vector value...
name|groupingSetsDummyVectorExpression
operator|.
name|setLongValue
argument_list|(
name|groupingSets
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|groupingSetsDummyVectorExpression
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|doProcessBatch
argument_list|(
name|batch
argument_list|,
operator|(
name|i
operator|==
literal|0
operator|)
argument_list|,
name|allGroupingSetsOverrideIsNulls
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Evaluates the aggregators on the current batch.      * The aggregationBatchInfo must have been prepared      * by calling {@link #prepareBatchAggregationBufferSets} first.      */
specifier|protected
name|void
name|processAggregators
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// We now have a vector of aggregation buffer sets to use for each row
comment|// We can start computing the aggregates.
comment|// If the number of distinct keys in the batch is 1 we can
comment|// use the optimized code path of aggregateInput
name|VectorAggregationBufferRow
index|[]
name|aggregationBufferSets
init|=
name|aggregationBatchInfo
operator|.
name|getAggregationBuffers
argument_list|()
decl_stmt|;
if|if
condition|(
name|aggregationBatchInfo
operator|.
name|getDistinctBufferSetCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|VectorAggregateExpression
operator|.
name|AggregationBuffer
index|[]
name|aggregationBuffers
init|=
name|aggregationBufferSets
index|[
literal|0
index|]
operator|.
name|getAggregationBuffers
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregators
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|aggregators
index|[
name|i
index|]
operator|.
name|aggregateInput
argument_list|(
name|aggregationBuffers
index|[
name|i
index|]
argument_list|,
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregators
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|aggregators
index|[
name|i
index|]
operator|.
name|aggregateInputSelection
argument_list|(
name|aggregationBufferSets
argument_list|,
name|i
argument_list|,
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * allocates a new aggregation buffer set.      */
specifier|protected
name|VectorAggregationBufferRow
name|allocateAggregationBuffer
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorAggregateExpression
operator|.
name|AggregationBuffer
index|[]
name|aggregationBuffers
init|=
operator|new
name|VectorAggregateExpression
operator|.
name|AggregationBuffer
index|[
name|aggregators
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregators
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|aggregationBuffers
index|[
name|i
index|]
operator|=
name|aggregators
index|[
name|i
index|]
operator|.
name|getNewAggregationBuffer
argument_list|()
expr_stmt|;
name|aggregators
index|[
name|i
index|]
operator|.
name|reset
argument_list|(
name|aggregationBuffers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|VectorAggregationBufferRow
name|bufferSet
init|=
operator|new
name|VectorAggregationBufferRow
argument_list|(
name|aggregationBuffers
argument_list|)
decl_stmt|;
return|return
name|bufferSet
return|;
block|}
block|}
comment|/**    * Global aggregates (no GROUP BY clause, no keys)    * This mode is very simple, there are no keys to consider, and only flushes one row at closing    * The one row must flush even if no input was seen (NULLs)    */
specifier|private
class|class
name|ProcessingModeGlobalAggregate
extends|extends
name|ProcessingModeBase
block|{
comment|/**      * In global processing mode there is only one set of aggregation buffers      */
specifier|private
name|VectorAggregationBufferRow
name|aggregationBuffers
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|aggregationBuffers
operator|=
name|allocateAggregationBuffer
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"using global aggregation processing mode"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNextVectorBatchGroupStatus
parameter_list|(
name|boolean
name|isLastGroupBatch
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Do nothing.
block|}
annotation|@
name|Override
specifier|public
name|void
name|doProcessBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|boolean
name|isFirstGroupingSet
parameter_list|,
name|boolean
index|[]
name|currentGroupingSetsOverrideIsNulls
parameter_list|)
throws|throws
name|HiveException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregators
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|aggregators
index|[
name|i
index|]
operator|.
name|aggregateInput
argument_list|(
name|aggregationBuffers
operator|.
name|getAggregationBuffer
argument_list|(
name|i
argument_list|)
argument_list|,
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|aborted
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|aborted
condition|)
block|{
name|writeSingleRow
argument_list|(
literal|null
argument_list|,
name|aggregationBuffers
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Hash Aggregate mode processing    */
specifier|private
class|class
name|ProcessingModeHashAggregate
extends|extends
name|ProcessingModeBase
block|{
comment|/**      * The global key-aggregation hash map.      */
specifier|private
name|Map
argument_list|<
name|KeyWrapper
argument_list|,
name|VectorAggregationBufferRow
argument_list|>
name|mapKeysAggregationBuffers
decl_stmt|;
comment|/**      * Total per hashtable entry fixed memory (does not depend on key/agg values).      */
specifier|private
name|long
name|fixedHashEntrySize
decl_stmt|;
comment|/**      * Average per hashtable entry variable size memory (depends on key/agg value).      */
specifier|private
name|int
name|avgVariableSize
decl_stmt|;
comment|/**      * Number of entries added to the hashtable since the last check if it should flush.      */
specifier|private
name|int
name|numEntriesSinceCheck
decl_stmt|;
comment|/**      * Sum of batch size processed (ie. rows).      */
specifier|private
name|long
name|sumBatchSize
decl_stmt|;
comment|/**      * Max number of entries in the vector group by aggregation hashtables.      * Exceeding this will trigger a flush irrelevant of memory pressure condition.      */
specifier|private
name|int
name|maxHtEntries
init|=
literal|1000000
decl_stmt|;
comment|/**      * The number of new entries that must be added to the hashtable before a memory size check.      */
specifier|private
name|int
name|checkInterval
init|=
literal|10000
decl_stmt|;
comment|/**      * Percent of entries to flush when memory threshold exceeded.      */
specifier|private
name|float
name|percentEntriesToFlush
init|=
literal|0.1f
decl_stmt|;
comment|/**      * A soft reference used to detect memory pressure      */
specifier|private
name|SoftReference
argument_list|<
name|Object
argument_list|>
name|gcCanary
init|=
operator|new
name|SoftReference
argument_list|<
name|Object
argument_list|>
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Counts the number of time the gcCanary died and was resurrected      */
specifier|private
name|long
name|gcCanaryFlushes
init|=
literal|0L
decl_stmt|;
comment|/**      * Count of rows since the last check for changing from aggregate to streaming mode      */
specifier|private
name|long
name|lastModeCheckRowCount
init|=
literal|0
decl_stmt|;
comment|/**      * Minimum factor for hash table to reduce number of entries      * If this is not met, the processing switches to streaming mode      */
specifier|private
name|float
name|minReductionHashAggr
decl_stmt|;
comment|/**      * Number of rows processed between checks for minReductionHashAggr factor      * TODO: there is overlap between numRowsCompareHashAggr and checkInterval      */
specifier|private
name|long
name|numRowsCompareHashAggr
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// hconf is null in unit testing
if|if
condition|(
literal|null
operator|!=
name|hconf
condition|)
block|{
name|this
operator|.
name|percentEntriesToFlush
operator|=
name|HiveConf
operator|.
name|getFloatVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_GROUPBY_FLUSH_PERCENT
argument_list|)
expr_stmt|;
name|this
operator|.
name|checkInterval
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_GROUPBY_CHECKINTERVAL
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxHtEntries
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_GROUPBY_MAXENTRIES
argument_list|)
expr_stmt|;
name|this
operator|.
name|minReductionHashAggr
operator|=
name|HiveConf
operator|.
name|getFloatVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPAGGRHASHMINREDUCTION
argument_list|)
expr_stmt|;
name|this
operator|.
name|numRowsCompareHashAggr
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEGROUPBYMAPINTERVAL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|percentEntriesToFlush
operator|=
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_GROUPBY_FLUSH_PERCENT
operator|.
name|defaultFloatVal
expr_stmt|;
name|this
operator|.
name|checkInterval
operator|=
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_GROUPBY_CHECKINTERVAL
operator|.
name|defaultIntVal
expr_stmt|;
name|this
operator|.
name|maxHtEntries
operator|=
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_GROUPBY_MAXENTRIES
operator|.
name|defaultIntVal
expr_stmt|;
name|this
operator|.
name|minReductionHashAggr
operator|=
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPAGGRHASHMINREDUCTION
operator|.
name|defaultFloatVal
expr_stmt|;
name|this
operator|.
name|numRowsCompareHashAggr
operator|=
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEGROUPBYMAPINTERVAL
operator|.
name|defaultIntVal
expr_stmt|;
block|}
name|sumBatchSize
operator|=
literal|0
expr_stmt|;
name|mapKeysAggregationBuffers
operator|=
operator|new
name|HashMap
argument_list|<
name|KeyWrapper
argument_list|,
name|VectorAggregationBufferRow
argument_list|>
argument_list|()
expr_stmt|;
name|computeMemoryLimits
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"using hash aggregation processing mode"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doProcessBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|boolean
name|isFirstGroupingSet
parameter_list|,
name|boolean
index|[]
name|currentGroupingSetsOverrideIsNulls
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|groupingSetsPresent
operator|||
name|isFirstGroupingSet
condition|)
block|{
comment|// Evaluate the key expressions once.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyExpressions
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|keyExpressions
index|[
name|i
index|]
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
comment|// First we traverse the batch to evaluate and prepare the KeyWrappers
comment|// After this the KeyWrappers are properly set and hash code is computed
if|if
condition|(
operator|!
name|groupingSetsPresent
condition|)
block|{
name|keyWrappersBatch
operator|.
name|evaluateBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyWrappersBatch
operator|.
name|evaluateBatchGroupingSets
argument_list|(
name|batch
argument_list|,
name|currentGroupingSetsOverrideIsNulls
argument_list|)
expr_stmt|;
block|}
comment|// Next we locate the aggregation buffer set for each key
name|prepareBatchAggregationBufferSets
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// Finally, evaluate the aggregators
name|processAggregators
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|//Flush if memory limits were reached
comment|// We keep flushing until the memory is under threshold
name|int
name|preFlushEntriesCount
init|=
name|numEntriesHashTable
decl_stmt|;
while|while
condition|(
name|shouldFlush
argument_list|(
name|batch
argument_list|)
condition|)
block|{
name|flush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|gcCanary
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|gcCanaryFlushes
operator|++
expr_stmt|;
name|gcCanary
operator|=
operator|new
name|SoftReference
argument_list|<
name|Object
argument_list|>
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//Validate that some progress is being made
if|if
condition|(
operator|!
operator|(
name|numEntriesHashTable
operator|<
name|preFlushEntriesCount
operator|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Flush did not progress: %d entries before, %d entries after"
argument_list|,
name|preFlushEntriesCount
argument_list|,
name|numEntriesHashTable
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|preFlushEntriesCount
operator|=
name|numEntriesHashTable
expr_stmt|;
block|}
if|if
condition|(
name|sumBatchSize
operator|==
literal|0
operator|&&
literal|0
operator|!=
name|batch
operator|.
name|size
condition|)
block|{
comment|// Sample the first batch processed for variable sizes.
name|updateAvgVariableSize
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
name|sumBatchSize
operator|+=
name|batch
operator|.
name|size
expr_stmt|;
name|lastModeCheckRowCount
operator|+=
name|batch
operator|.
name|size
expr_stmt|;
comment|// Check if we should turn into streaming mode
name|checkHashModeEfficiency
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|aborted
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|aborted
condition|)
block|{
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|aborted
operator|&&
name|sumBatchSize
operator|==
literal|0
operator|&&
name|GroupByOperator
operator|.
name|shouldEmitSummaryRow
argument_list|(
name|conf
argument_list|)
condition|)
block|{
comment|// in case the empty grouping set is preset; but no output has done
comment|// the "summary row" still needs to be emitted
name|VectorHashKeyWrapperBase
name|kw
init|=
name|keyWrappersBatch
operator|.
name|getVectorHashKeyWrappers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|kw
operator|.
name|setNull
argument_list|()
expr_stmt|;
name|int
name|pos
init|=
name|conf
operator|.
name|getGroupingSetPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|pos
operator|>=
literal|0
condition|)
block|{
name|long
name|val
init|=
operator|(
literal|1L
operator|<<
name|pos
operator|)
operator|-
literal|1
decl_stmt|;
name|keyWrappersBatch
operator|.
name|setLongValue
argument_list|(
name|kw
argument_list|,
name|pos
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
name|VectorAggregationBufferRow
name|groupAggregators
init|=
name|allocateAggregationBuffer
argument_list|()
decl_stmt|;
name|writeSingleRow
argument_list|(
name|kw
argument_list|,
name|groupAggregators
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Locates the aggregation buffer sets to use for each key in the current batch.      * The keyWrappersBatch must have evaluated the current batch first.      */
specifier|private
name|void
name|prepareBatchAggregationBufferSets
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// The aggregation batch vector needs to know when we start a new batch
comment|// to bump its internal version.
name|aggregationBatchInfo
operator|.
name|startBatch
argument_list|()
expr_stmt|;
if|if
condition|(
name|batch
operator|.
name|size
operator|==
literal|0
condition|)
block|{
return|return;
block|}
comment|// We now have to probe the global hash and find-or-allocate
comment|// the aggregation buffers to use for each key present in the batch
name|VectorHashKeyWrapperBase
index|[]
name|keyWrappers
init|=
name|keyWrappersBatch
operator|.
name|getVectorHashKeyWrappers
argument_list|()
decl_stmt|;
specifier|final
name|int
name|n
init|=
name|keyExpressions
operator|.
name|length
operator|==
literal|0
condition|?
literal|1
else|:
name|batch
operator|.
name|size
decl_stmt|;
comment|// note - the row mapping is not relevant when aggregationBatchInfo::getDistinctBufferSetCount() == 1
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|VectorHashKeyWrapperBase
name|kw
init|=
name|keyWrappers
index|[
name|i
index|]
decl_stmt|;
name|VectorAggregationBufferRow
name|aggregationBuffer
init|=
name|mapKeysAggregationBuffers
operator|.
name|get
argument_list|(
name|kw
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|aggregationBuffer
condition|)
block|{
comment|// the probe failed, we must allocate a set of aggregation buffers
comment|// and push the (keywrapper,buffers) pair into the hash.
comment|// is very important to clone the keywrapper, the one we have from our
comment|// keyWrappersBatch is going to be reset/reused on next batch.
name|aggregationBuffer
operator|=
name|allocateAggregationBuffer
argument_list|()
expr_stmt|;
name|mapKeysAggregationBuffers
operator|.
name|put
argument_list|(
name|kw
operator|.
name|copyKey
argument_list|()
argument_list|,
name|aggregationBuffer
argument_list|)
expr_stmt|;
name|numEntriesHashTable
operator|++
expr_stmt|;
name|numEntriesSinceCheck
operator|++
expr_stmt|;
block|}
name|aggregationBatchInfo
operator|.
name|mapAggregationBufferSet
argument_list|(
name|aggregationBuffer
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Computes the memory limits for hash table flush (spill).      */
specifier|private
name|void
name|computeMemoryLimits
parameter_list|()
block|{
name|JavaDataModel
name|model
init|=
name|JavaDataModel
operator|.
name|get
argument_list|()
decl_stmt|;
name|fixedHashEntrySize
operator|=
name|model
operator|.
name|hashMapEntry
argument_list|()
operator|+
name|keyWrappersBatch
operator|.
name|getKeysFixedSize
argument_list|()
operator|+
name|aggregationBatchInfo
operator|.
name|getAggregatorsFixedSize
argument_list|()
expr_stmt|;
name|MemoryMXBean
name|memoryMXBean
init|=
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
decl_stmt|;
name|maxMemory
operator|=
name|memoryMXBean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getMax
argument_list|()
expr_stmt|;
name|memoryThreshold
operator|=
name|conf
operator|.
name|getMemoryThreshold
argument_list|()
expr_stmt|;
comment|// Tests may leave this unitialized, so better set it to 1
if|if
condition|(
name|memoryThreshold
operator|==
literal|0.0f
condition|)
block|{
name|memoryThreshold
operator|=
literal|1.0f
expr_stmt|;
block|}
name|maxHashTblMemory
operator|=
call|(
name|int
call|)
argument_list|(
name|maxMemory
operator|*
name|memoryThreshold
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"maxMemory:%dMb (%d * %f) fixSize:%d (key:%d agg:%d)"
argument_list|,
name|maxHashTblMemory
operator|/
literal|1024
operator|/
literal|1024
argument_list|,
name|maxMemory
operator|/
literal|1024
operator|/
literal|1024
argument_list|,
name|memoryThreshold
argument_list|,
name|fixedHashEntrySize
argument_list|,
name|keyWrappersBatch
operator|.
name|getKeysFixedSize
argument_list|()
argument_list|,
name|aggregationBatchInfo
operator|.
name|getAggregatorsFixedSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Flushes the entries in the hash table by emiting output (forward).      * When parameter 'all' is true all the entries are flushed.      * @param all      * @throws HiveException      */
specifier|private
name|void
name|flush
parameter_list|(
name|boolean
name|all
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|entriesToFlush
init|=
name|all
condition|?
name|numEntriesHashTable
else|:
call|(
name|int
call|)
argument_list|(
name|numEntriesHashTable
operator|*
name|this
operator|.
name|percentEntriesToFlush
argument_list|)
decl_stmt|;
name|int
name|entriesFlushed
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Flush %d %s entries:%d fixed:%d variable:%d (used:%dMb max:%dMb) gcCanary:%s"
argument_list|,
name|entriesToFlush
argument_list|,
name|all
condition|?
literal|"(all)"
else|:
literal|""
argument_list|,
name|numEntriesHashTable
argument_list|,
name|fixedHashEntrySize
argument_list|,
name|avgVariableSize
argument_list|,
name|numEntriesHashTable
operator|*
operator|(
name|fixedHashEntrySize
operator|+
name|avgVariableSize
operator|)
operator|/
literal|1024
operator|/
literal|1024
argument_list|,
name|maxHashTblMemory
operator|/
literal|1024
operator|/
literal|1024
argument_list|,
name|gcCanary
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|?
literal|"dead"
else|:
literal|"alive"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* Iterate the global (keywrapper,aggregationbuffers) map and emit        a row for each key */
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|KeyWrapper
argument_list|,
name|VectorAggregationBufferRow
argument_list|>
argument_list|>
name|iter
init|=
name|mapKeysAggregationBuffers
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|KeyWrapper
argument_list|,
name|VectorAggregationBufferRow
argument_list|>
name|pair
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|writeSingleRow
argument_list|(
operator|(
name|VectorHashKeyWrapperBase
operator|)
name|pair
operator|.
name|getKey
argument_list|()
argument_list|,
name|pair
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|all
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
operator|--
name|numEntriesHashTable
expr_stmt|;
if|if
condition|(
operator|++
name|entriesFlushed
operator|>=
name|entriesToFlush
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|all
condition|)
block|{
name|mapKeysAggregationBuffers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|numEntriesHashTable
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|all
operator|&&
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"GC canary caused %d flushes"
argument_list|,
name|gcCanaryFlushes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns true if the memory threshold for the hash table was reached.      */
specifier|private
name|boolean
name|shouldFlush
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
if|if
condition|(
name|batch
operator|.
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//numEntriesSinceCheck is the number of entries added to the hash table
comment|// since the last time we checked the average variable size
if|if
condition|(
name|numEntriesSinceCheck
operator|>=
name|this
operator|.
name|checkInterval
condition|)
block|{
comment|// Were going to update the average variable row size by sampling the current batch
name|updateAvgVariableSize
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|numEntriesSinceCheck
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|numEntriesHashTable
operator|>
name|this
operator|.
name|maxHtEntries
operator|||
name|numEntriesHashTable
operator|*
operator|(
name|fixedHashEntrySize
operator|+
name|avgVariableSize
operator|)
operator|>
name|maxHashTblMemory
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|gcCanary
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Updates the average variable size of the hash table entries.      * The average is only updates by probing the batch that added the entry in the hash table      * that caused the check threshold to be reached.      */
specifier|private
name|void
name|updateAvgVariableSize
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
name|int
name|keyVariableSize
init|=
name|keyWrappersBatch
operator|.
name|getVariableSize
argument_list|(
name|batch
operator|.
name|size
argument_list|)
decl_stmt|;
name|int
name|aggVariableSize
init|=
name|aggregationBatchInfo
operator|.
name|getVariableSize
argument_list|(
name|batch
operator|.
name|size
argument_list|)
decl_stmt|;
comment|// This assumes the distribution of variable size keys/aggregates in the input
comment|// is the same as the distribution of variable sizes in the hash entries
name|avgVariableSize
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
name|avgVariableSize
operator|*
name|sumBatchSize
operator|+
name|keyVariableSize
operator|+
name|aggVariableSize
operator|)
operator|/
operator|(
name|sumBatchSize
operator|+
name|batch
operator|.
name|size
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks if the HT reduces the number of entries by at least minReductionHashAggr factor      * @throws HiveException      */
specifier|private
name|void
name|checkHashModeEfficiency
parameter_list|()
throws|throws
name|HiveException
block|{
if|if
condition|(
name|lastModeCheckRowCount
operator|>
name|numRowsCompareHashAggr
condition|)
block|{
name|lastModeCheckRowCount
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"checkHashModeEfficiency: HT:%d RC:%d MIN:%d"
argument_list|,
name|numEntriesHashTable
argument_list|,
name|sumBatchSize
argument_list|,
call|(
name|long
call|)
argument_list|(
name|sumBatchSize
operator|*
name|minReductionHashAggr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numEntriesHashTable
operator|>
name|sumBatchSize
operator|*
name|minReductionHashAggr
condition|)
block|{
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|changeToStreamingMode
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Streaming processing mode on ALREADY GROUPED data. Each input VectorizedRowBatch may    * have a mix of different keys.  Intermediate values are flushed each time key changes.    */
specifier|private
class|class
name|ProcessingModeStreaming
extends|extends
name|ProcessingModeBase
block|{
comment|/**      * The aggregation buffers used in streaming mode      */
specifier|private
name|VectorAggregationBufferRow
name|currentStreamingAggregators
decl_stmt|;
comment|/**      * The current key, used in streaming mode      */
specifier|private
name|VectorHashKeyWrapperBase
name|streamingKey
decl_stmt|;
comment|/**      * The keys that needs to be flushed at the end of the current batch      */
specifier|private
specifier|final
name|VectorHashKeyWrapperBase
index|[]
name|keysToFlush
init|=
operator|new
name|VectorHashKeyWrapperBase
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
decl_stmt|;
comment|/**      * The aggregates that needs to be flushed at the end of the current batch      */
specifier|private
specifier|final
name|VectorAggregationBufferRow
index|[]
name|rowsToFlush
init|=
operator|new
name|VectorAggregationBufferRow
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
decl_stmt|;
comment|/**      * A pool of VectorAggregationBufferRow to avoid repeated allocations      */
specifier|private
name|VectorUtilBatchObjectPool
argument_list|<
name|VectorAggregationBufferRow
argument_list|>
name|streamAggregationBufferRowPool
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|streamAggregationBufferRowPool
operator|=
operator|new
name|VectorUtilBatchObjectPool
argument_list|<
name|VectorAggregationBufferRow
argument_list|>
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
operator|new
name|VectorUtilBatchObjectPool
operator|.
name|IAllocator
argument_list|<
name|VectorAggregationBufferRow
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|VectorAggregationBufferRow
name|alloc
parameter_list|()
throws|throws
name|HiveException
block|{
return|return
name|allocateAggregationBuffer
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|free
parameter_list|(
name|VectorAggregationBufferRow
name|t
parameter_list|)
block|{
comment|// Nothing to do
block|}
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"using unsorted streaming aggregation processing mode"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNextVectorBatchGroupStatus
parameter_list|(
name|boolean
name|isLastGroupBatch
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Do nothing.
block|}
annotation|@
name|Override
specifier|public
name|void
name|doProcessBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|boolean
name|isFirstGroupingSet
parameter_list|,
name|boolean
index|[]
name|currentGroupingSetsOverrideIsNulls
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|groupingSetsPresent
operator|||
name|isFirstGroupingSet
condition|)
block|{
comment|// Evaluate the key expressions once.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyExpressions
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|keyExpressions
index|[
name|i
index|]
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
comment|// First we traverse the batch to evaluate and prepare the KeyWrappers
comment|// After this the KeyWrappers are properly set and hash code is computed
if|if
condition|(
operator|!
name|groupingSetsPresent
condition|)
block|{
name|keyWrappersBatch
operator|.
name|evaluateBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyWrappersBatch
operator|.
name|evaluateBatchGroupingSets
argument_list|(
name|batch
argument_list|,
name|currentGroupingSetsOverrideIsNulls
argument_list|)
expr_stmt|;
block|}
name|VectorHashKeyWrapperBase
index|[]
name|batchKeys
init|=
name|keyWrappersBatch
operator|.
name|getVectorHashKeyWrappers
argument_list|()
decl_stmt|;
specifier|final
name|VectorHashKeyWrapperBase
name|prevKey
init|=
name|streamingKey
decl_stmt|;
if|if
condition|(
name|streamingKey
operator|==
literal|null
condition|)
block|{
comment|// This is the first batch we process after switching from hash mode
name|currentStreamingAggregators
operator|=
name|streamAggregationBufferRowPool
operator|.
name|getFromPool
argument_list|()
expr_stmt|;
name|streamingKey
operator|=
name|batchKeys
index|[
literal|0
index|]
expr_stmt|;
block|}
name|aggregationBatchInfo
operator|.
name|startBatch
argument_list|()
expr_stmt|;
name|int
name|flushMark
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|batchKeys
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|streamingKey
argument_list|)
condition|)
block|{
comment|// We've encountered a new key, must save current one
comment|// We can't forward yet, the aggregators have not been evaluated
name|rowsToFlush
index|[
name|flushMark
index|]
operator|=
name|currentStreamingAggregators
expr_stmt|;
name|keysToFlush
index|[
name|flushMark
index|]
operator|=
name|streamingKey
expr_stmt|;
name|currentStreamingAggregators
operator|=
name|streamAggregationBufferRowPool
operator|.
name|getFromPool
argument_list|()
expr_stmt|;
name|streamingKey
operator|=
name|batchKeys
index|[
name|i
index|]
expr_stmt|;
operator|++
name|flushMark
expr_stmt|;
block|}
name|aggregationBatchInfo
operator|.
name|mapAggregationBufferSet
argument_list|(
name|currentStreamingAggregators
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
comment|// evaluate the aggregators
name|processAggregators
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// Now flush/forward all keys/rows, except the last (current) one
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|flushMark
condition|;
operator|++
name|i
control|)
block|{
name|writeSingleRow
argument_list|(
name|keysToFlush
index|[
name|i
index|]
argument_list|,
name|rowsToFlush
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|rowsToFlush
index|[
name|i
index|]
operator|.
name|reset
argument_list|()
expr_stmt|;
name|keysToFlush
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
name|streamAggregationBufferRowPool
operator|.
name|putInPool
argument_list|(
name|rowsToFlush
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|streamingKey
operator|!=
name|prevKey
condition|)
block|{
name|streamingKey
operator|=
operator|(
name|VectorHashKeyWrapperBase
operator|)
name|streamingKey
operator|.
name|copyKey
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|aborted
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|aborted
operator|&&
literal|null
operator|!=
name|streamingKey
condition|)
block|{
name|writeSingleRow
argument_list|(
name|streamingKey
argument_list|,
name|currentStreamingAggregators
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Sorted reduce group batch processing mode. Each input VectorizedRowBatch will have the    * same key.  On endGroup (or close), the intermediate values are flushed.    *    * We build the output rows one-at-a-time in the output vectorized row batch (outputBatch)    * in 2 steps:    *    *   1) Just after startGroup, we copy the group key to the next position in the output batch,    *      but don't increment the size in the batch (yet).  This is done with the copyGroupKey    *      method of VectorGroupKeyHelper.  The next position is outputBatch.size    *    *      We know the same key is used for the whole batch (i.e. repeating) since that is how    *      vectorized reduce-shuffle feeds the batches to us.    *    *   2) Later at endGroup after reduce-shuffle has fed us all the input batches for the group,    *      we fill in the aggregation columns in outputBatch at outputBatch.size.  Our method    *      writeGroupRow does this and finally increments outputBatch.size.    *    */
specifier|private
class|class
name|ProcessingModeReduceMergePartial
extends|extends
name|ProcessingModeBase
block|{
specifier|private
name|boolean
name|first
decl_stmt|;
specifier|private
name|boolean
name|isLastGroupBatch
decl_stmt|;
comment|/**      * The group vector key helper.      */
name|VectorGroupKeyHelper
name|groupKeyHelper
decl_stmt|;
comment|/**      * The group vector aggregation buffers.      */
specifier|private
name|VectorAggregationBufferRow
name|groupAggregators
decl_stmt|;
comment|/**      * Buffer to hold string values.      */
specifier|private
name|DataOutputBuffer
name|buffer
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|isLastGroupBatch
operator|=
literal|true
expr_stmt|;
comment|// We do not include the dummy grouping set column in the output.  So we pass outputKeyLength
comment|// instead of keyExpressions.length
name|groupKeyHelper
operator|=
operator|new
name|VectorGroupKeyHelper
argument_list|(
name|outputKeyLength
argument_list|)
expr_stmt|;
name|groupKeyHelper
operator|.
name|init
argument_list|(
name|keyExpressions
argument_list|)
expr_stmt|;
name|groupAggregators
operator|=
name|allocateAggregationBuffer
argument_list|()
expr_stmt|;
name|buffer
operator|=
operator|new
name|DataOutputBuffer
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"using sorted group batch aggregation processing mode"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNextVectorBatchGroupStatus
parameter_list|(
name|boolean
name|isLastGroupBatch
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|this
operator|.
name|isLastGroupBatch
condition|)
block|{
comment|// Previous batch was the last of a group of batches.  Remember the next is the first batch
comment|// of a new group of batches.
name|first
operator|=
literal|true
expr_stmt|;
block|}
name|this
operator|.
name|isLastGroupBatch
operator|=
name|isLastGroupBatch
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doProcessBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|boolean
name|isFirstGroupingSet
parameter_list|,
name|boolean
index|[]
name|currentGroupingSetsOverrideIsNulls
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|first
condition|)
block|{
comment|// Copy the group key to output batch now.  We'll copy in the aggregates at the end of the group.
name|first
operator|=
literal|false
expr_stmt|;
comment|// Evaluate the key expressions of just this first batch to get the correct key.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputKeyLength
condition|;
name|i
operator|++
control|)
block|{
name|keyExpressions
index|[
name|i
index|]
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
name|groupKeyHelper
operator|.
name|copyGroupKey
argument_list|(
name|batch
argument_list|,
name|outputBatch
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
comment|// Aggregate this batch.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregators
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|aggregators
index|[
name|i
index|]
operator|.
name|aggregateInput
argument_list|(
name|groupAggregators
operator|.
name|getAggregationBuffer
argument_list|(
name|i
argument_list|)
argument_list|,
name|batch
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isLastGroupBatch
condition|)
block|{
name|writeGroupRow
argument_list|(
name|groupAggregators
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|groupAggregators
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|aborted
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|aborted
operator|&&
operator|!
name|first
operator|&&
operator|!
name|isLastGroupBatch
condition|)
block|{
name|writeGroupRow
argument_list|(
name|groupAggregators
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Current processing mode. Processing mode can change (eg. hash -> streaming).    */
specifier|private
specifier|transient
name|IProcessingMode
name|processingMode
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|VectorGroupByOperator
parameter_list|(
name|CompilationOpContext
name|ctx
parameter_list|,
name|OperatorDesc
name|conf
parameter_list|,
name|VectorizationContext
name|vContext
parameter_list|,
name|VectorDesc
name|vectorDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|this
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|GroupByDesc
name|desc
init|=
operator|(
name|GroupByDesc
operator|)
name|conf
decl_stmt|;
name|this
operator|.
name|conf
operator|=
name|desc
expr_stmt|;
name|this
operator|.
name|vContext
operator|=
name|vContext
expr_stmt|;
name|this
operator|.
name|vectorDesc
operator|=
operator|(
name|VectorGroupByDesc
operator|)
name|vectorDesc
expr_stmt|;
name|keyExpressions
operator|=
name|this
operator|.
name|vectorDesc
operator|.
name|getKeyExpressions
argument_list|()
expr_stmt|;
name|vecAggrDescs
operator|=
name|this
operator|.
name|vectorDesc
operator|.
name|getVecAggrDescs
argument_list|()
expr_stmt|;
comment|// Grouping id should be pruned, which is the last of key columns
comment|// see ColumnPrunerGroupByProc
name|outputKeyLength
operator|=
name|this
operator|.
name|conf
operator|.
name|pruneGroupingSetId
argument_list|()
condition|?
name|keyExpressions
operator|.
name|length
operator|-
literal|1
else|:
name|keyExpressions
operator|.
name|length
expr_stmt|;
specifier|final
name|int
name|aggregationCount
init|=
name|vecAggrDescs
operator|.
name|length
decl_stmt|;
specifier|final
name|int
name|outputCount
init|=
name|outputKeyLength
operator|+
name|aggregationCount
decl_stmt|;
name|outputTypeInfos
operator|=
operator|new
name|TypeInfo
index|[
name|outputCount
index|]
expr_stmt|;
name|outputDataTypePhysicalVariations
operator|=
operator|new
name|DataTypePhysicalVariation
index|[
name|outputCount
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputKeyLength
condition|;
name|i
operator|++
control|)
block|{
name|VectorExpression
name|keyExpression
init|=
name|keyExpressions
index|[
name|i
index|]
decl_stmt|;
name|outputTypeInfos
index|[
name|i
index|]
operator|=
name|keyExpression
operator|.
name|getOutputTypeInfo
argument_list|()
expr_stmt|;
name|outputDataTypePhysicalVariations
index|[
name|i
index|]
operator|=
name|keyExpression
operator|.
name|getOutputDataTypePhysicalVariation
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregationCount
condition|;
name|i
operator|++
control|)
block|{
name|VectorAggregationDesc
name|vecAggrDesc
init|=
name|vecAggrDescs
index|[
name|i
index|]
decl_stmt|;
name|outputTypeInfos
index|[
name|i
operator|+
name|outputKeyLength
index|]
operator|=
name|vecAggrDesc
operator|.
name|getOutputTypeInfo
argument_list|()
expr_stmt|;
name|outputDataTypePhysicalVariations
index|[
name|i
operator|+
name|outputKeyLength
index|]
operator|=
name|vecAggrDesc
operator|.
name|getOutputDataTypePhysicalVariation
argument_list|()
expr_stmt|;
block|}
name|vOutContext
operator|=
operator|new
name|VectorizationContext
argument_list|(
name|getName
argument_list|()
argument_list|,
name|desc
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|,
comment|/* vContextEnvironment */
name|vContext
argument_list|)
expr_stmt|;
name|vOutContext
operator|.
name|setInitialTypeInfos
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|outputTypeInfos
argument_list|)
argument_list|)
expr_stmt|;
name|vOutContext
operator|.
name|setInitialDataTypePhysicalVariations
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|outputDataTypePhysicalVariations
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Kryo ctor. */
annotation|@
name|VisibleForTesting
specifier|public
name|VectorGroupByOperator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|VectorGroupByOperator
parameter_list|(
name|CompilationOpContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|VectorizationContext
name|getInputVectorizationContext
parameter_list|()
block|{
return|return
name|vContext
return|;
block|}
specifier|private
name|void
name|setupGroupingSets
parameter_list|()
block|{
name|groupingSetsPresent
operator|=
name|conf
operator|.
name|isGroupingSetsPresent
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|groupingSetsPresent
condition|)
block|{
name|groupingSets
operator|=
literal|null
expr_stmt|;
name|groupingSetsPosition
operator|=
operator|-
literal|1
expr_stmt|;
name|groupingSetsDummyVectorExpression
operator|=
literal|null
expr_stmt|;
name|allGroupingSetsOverrideIsNulls
operator|=
literal|null
expr_stmt|;
return|return;
block|}
name|groupingSets
operator|=
name|ArrayUtils
operator|.
name|toPrimitive
argument_list|(
name|conf
operator|.
name|getListGroupingSets
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Long
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|groupingSetsPosition
operator|=
name|conf
operator|.
name|getGroupingSetPosition
argument_list|()
expr_stmt|;
name|allGroupingSetsOverrideIsNulls
operator|=
operator|new
name|boolean
index|[
name|groupingSets
operator|.
name|length
index|]
index|[]
expr_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|groupingSet
range|:
name|groupingSets
control|)
block|{
comment|// Create the mapping corresponding to the grouping set
comment|// Assume all columns are null, except the dummy column is always non-null.
name|boolean
index|[]
name|groupingSetsOverrideIsNull
init|=
operator|new
name|boolean
index|[
name|keyExpressions
operator|.
name|length
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|groupingSetsOverrideIsNull
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|groupingSetsOverrideIsNull
index|[
name|groupingSetsPosition
index|]
operator|=
literal|false
expr_stmt|;
comment|// Add keys of this grouping set.
name|FastBitSet
name|bitset
init|=
name|GroupByOperator
operator|.
name|groupingSet2BitSet
argument_list|(
name|groupingSet
argument_list|,
name|groupingSetsPosition
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|keyPos
init|=
name|bitset
operator|.
name|nextClearBit
argument_list|(
literal|0
argument_list|)
init|;
name|keyPos
operator|<
name|groupingSetsPosition
condition|;
name|keyPos
operator|=
name|bitset
operator|.
name|nextClearBit
argument_list|(
name|keyPos
operator|+
literal|1
argument_list|)
control|)
block|{
name|groupingSetsOverrideIsNull
index|[
name|keyPos
index|]
operator|=
literal|false
expr_stmt|;
block|}
name|allGroupingSetsOverrideIsNulls
index|[
name|pos
index|]
operator|=
name|groupingSetsOverrideIsNull
expr_stmt|;
name|pos
operator|++
expr_stmt|;
block|}
comment|// The last key column is the dummy grouping set id.
comment|//
comment|// Figure out which (scratch) column was used so we can overwrite the dummy id.
name|groupingSetsDummyVectorExpression
operator|=
operator|(
name|ConstantVectorExpression
operator|)
name|keyExpressions
index|[
name|groupingSetsPosition
index|]
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|initializeOp
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|VectorExpression
operator|.
name|doTransientInit
argument_list|(
name|keyExpressions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|objectInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keysDesc
init|=
name|conf
operator|.
name|getKeys
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|outputFieldNames
init|=
name|conf
operator|.
name|getOutputColumnNames
argument_list|()
decl_stmt|;
specifier|final
name|int
name|outputCount
init|=
name|outputFieldNames
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputKeyLength
condition|;
operator|++
name|i
control|)
block|{
name|VectorExpressionWriter
name|vew
init|=
name|VectorExpressionWriterFactory
operator|.
name|genVectorExpressionWritable
argument_list|(
name|keysDesc
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|vew
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|objectInspectors
operator|.
name|add
argument_list|(
name|oi
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|aggregateCount
init|=
name|vecAggrDescs
operator|.
name|length
decl_stmt|;
name|aggregators
operator|=
operator|new
name|VectorAggregateExpression
index|[
name|aggregateCount
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregateCount
condition|;
operator|++
name|i
control|)
block|{
name|VectorAggregationDesc
name|vecAggrDesc
init|=
name|vecAggrDescs
index|[
name|i
index|]
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|VectorAggregateExpression
argument_list|>
name|vecAggrClass
init|=
name|vecAggrDesc
operator|.
name|getVecAggrClass
argument_list|()
decl_stmt|;
name|Constructor
argument_list|<
name|?
extends|extends
name|VectorAggregateExpression
argument_list|>
name|ctor
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ctor
operator|=
name|vecAggrClass
operator|.
name|getConstructor
argument_list|(
name|VectorAggregationDesc
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Constructor "
operator|+
name|vecAggrClass
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"(VectorAggregationDesc) not available"
argument_list|)
throw|;
block|}
name|VectorAggregateExpression
name|vecAggrExpr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|vecAggrExpr
operator|=
name|ctor
operator|.
name|newInstance
argument_list|(
name|vecAggrDesc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Failed to create "
operator|+
name|vecAggrClass
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"(VectorAggregationDesc) object "
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|VectorExpression
operator|.
name|doTransientInit
argument_list|(
name|vecAggrExpr
operator|.
name|getInputExpression
argument_list|()
argument_list|)
expr_stmt|;
name|aggregators
index|[
name|i
index|]
operator|=
name|vecAggrExpr
expr_stmt|;
name|ObjectInspector
name|objInsp
init|=
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|vecAggrDesc
operator|.
name|getOutputTypeInfo
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|objInsp
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|objectInspectors
operator|.
name|add
argument_list|(
name|objInsp
argument_list|)
expr_stmt|;
block|}
name|keyWrappersBatch
operator|=
name|VectorHashKeyWrapperBatch
operator|.
name|compileKeyWrapperBatch
argument_list|(
name|keyExpressions
argument_list|)
expr_stmt|;
name|aggregationBatchInfo
operator|=
operator|new
name|VectorAggregationBufferBatch
argument_list|()
expr_stmt|;
name|aggregationBatchInfo
operator|.
name|compileAggregationBatchInfo
argument_list|(
name|aggregators
argument_list|)
expr_stmt|;
name|outputObjInspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|outputFieldNames
argument_list|,
name|objectInspectors
argument_list|)
expr_stmt|;
name|vrbCtx
operator|=
operator|new
name|VectorizedRowBatchCtx
argument_list|(
name|outputFieldNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|outputTypeInfos
argument_list|,
name|outputDataTypePhysicalVariations
argument_list|,
comment|/* dataColumnNums */
literal|null
argument_list|,
comment|/* partitionColumnCount */
literal|0
argument_list|,
comment|/* virtualColumnCount */
literal|0
argument_list|,
comment|/* neededVirtualColumns */
literal|null
argument_list|,
name|vOutContext
operator|.
name|getScratchColumnTypeNames
argument_list|()
argument_list|,
name|vOutContext
operator|.
name|getScratchDataTypePhysicalVariations
argument_list|()
argument_list|)
expr_stmt|;
name|outputBatch
operator|=
name|vrbCtx
operator|.
name|createVectorizedRowBatch
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|he
parameter_list|)
block|{
throw|throw
name|he
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|forwardCache
operator|=
operator|new
name|Object
index|[
name|outputKeyLength
operator|+
name|aggregators
operator|.
name|length
index|]
expr_stmt|;
name|setupGroupingSets
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|vectorDesc
operator|.
name|getProcessingMode
argument_list|()
condition|)
block|{
case|case
name|GLOBAL
case|:
name|Preconditions
operator|.
name|checkState
argument_list|(
name|outputKeyLength
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|groupingSetsPresent
argument_list|)
expr_stmt|;
name|processingMode
operator|=
name|this
operator|.
expr|new
name|ProcessingModeGlobalAggregate
argument_list|()
expr_stmt|;
break|break;
case|case
name|HASH
case|:
name|processingMode
operator|=
name|this
operator|.
expr|new
name|ProcessingModeHashAggregate
argument_list|()
expr_stmt|;
break|break;
case|case
name|MERGE_PARTIAL
case|:
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|groupingSetsPresent
argument_list|)
expr_stmt|;
name|processingMode
operator|=
name|this
operator|.
expr|new
name|ProcessingModeReduceMergePartial
argument_list|()
expr_stmt|;
break|break;
case|case
name|STREAMING
case|:
name|processingMode
operator|=
name|this
operator|.
expr|new
name|ProcessingModeStreaming
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported vector GROUP BY processing mode "
operator|+
name|vectorDesc
operator|.
name|getProcessingMode
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
name|processingMode
operator|.
name|initialize
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
block|}
comment|/**    * changes the processing mode to streaming    * This is done at the request of the hash agg mode, if the number of keys    * exceeds the minReductionHashAggr factor    * @throws HiveException    */
specifier|private
name|void
name|changeToStreamingMode
parameter_list|()
throws|throws
name|HiveException
block|{
name|processingMode
operator|=
name|this
operator|.
expr|new
name|ProcessingModeStreaming
argument_list|()
expr_stmt|;
name|processingMode
operator|.
name|initialize
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"switched to streaming mode"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNextVectorBatchGroupStatus
parameter_list|(
name|boolean
name|isLastGroupBatch
parameter_list|)
throws|throws
name|HiveException
block|{
name|processingMode
operator|.
name|setNextVectorBatchGroupStatus
argument_list|(
name|isLastGroupBatch
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startGroup
parameter_list|()
throws|throws
name|HiveException
block|{
comment|// We do not call startGroup on operators below because we are batching rows in
comment|// an output batch and the semantics will not work.
comment|// super.startGroup();
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unexpected startGroup"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endGroup
parameter_list|()
throws|throws
name|HiveException
block|{
comment|// We do not call endGroup on operators below because we are batching rows in
comment|// an output batch and the semantics will not work.
comment|// super.endGroup();
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unexpected startGroup"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|(
name|VectorizedRowBatch
operator|)
name|row
decl_stmt|;
if|if
condition|(
name|batch
operator|.
name|size
operator|>
literal|0
condition|)
block|{
name|processingMode
operator|.
name|processBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Emits a single row, made from the key and the row aggregation buffers values    * kw is null if keyExpressions.length is 0    * @param kw    * @param agg    * @throws HiveException    */
specifier|private
name|void
name|writeSingleRow
parameter_list|(
name|VectorHashKeyWrapperBase
name|kw
parameter_list|,
name|VectorAggregationBufferRow
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|colNum
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|batchIndex
init|=
name|outputBatch
operator|.
name|size
decl_stmt|;
comment|// Output keys and aggregates into the output batch.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputKeyLength
condition|;
operator|++
name|i
control|)
block|{
name|keyWrappersBatch
operator|.
name|assignRowColumn
argument_list|(
name|outputBatch
argument_list|,
name|batchIndex
argument_list|,
name|colNum
operator|++
argument_list|,
name|kw
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregators
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|aggregators
index|[
name|i
index|]
operator|.
name|assignRowColumn
argument_list|(
name|outputBatch
argument_list|,
name|batchIndex
argument_list|,
name|colNum
operator|++
argument_list|,
name|agg
operator|.
name|getAggregationBuffer
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|++
name|outputBatch
operator|.
name|size
expr_stmt|;
if|if
condition|(
name|outputBatch
operator|.
name|size
operator|==
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|)
block|{
name|flushOutput
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Emits a (reduce) group row, made from the key (copied in at the beginning of the group) and    * the row aggregation buffers values    * @param agg    * @param buffer    * @throws HiveException    */
specifier|private
name|void
name|writeGroupRow
parameter_list|(
name|VectorAggregationBufferRow
name|agg
parameter_list|,
name|DataOutputBuffer
name|buffer
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|colNum
init|=
name|outputKeyLength
decl_stmt|;
comment|// Start after group keys.
specifier|final
name|int
name|batchIndex
init|=
name|outputBatch
operator|.
name|size
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregators
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|aggregators
index|[
name|i
index|]
operator|.
name|assignRowColumn
argument_list|(
name|outputBatch
argument_list|,
name|batchIndex
argument_list|,
name|colNum
operator|++
argument_list|,
name|agg
operator|.
name|getAggregationBuffer
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|++
name|outputBatch
operator|.
name|size
expr_stmt|;
if|if
condition|(
name|outputBatch
operator|.
name|size
operator|==
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|)
block|{
name|flushOutput
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|flushOutput
parameter_list|()
throws|throws
name|HiveException
block|{
name|vectorForward
argument_list|(
name|outputBatch
argument_list|)
expr_stmt|;
name|outputBatch
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|closeOp
parameter_list|(
name|boolean
name|aborted
parameter_list|)
throws|throws
name|HiveException
block|{
name|processingMode
operator|.
name|close
argument_list|(
name|aborted
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|aborted
operator|&&
name|outputBatch
operator|.
name|size
operator|>
literal|0
condition|)
block|{
name|flushOutput
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|VectorExpression
index|[]
name|getKeyExpressions
parameter_list|()
block|{
return|return
name|keyExpressions
return|;
block|}
specifier|public
name|void
name|setKeyExpressions
parameter_list|(
name|VectorExpression
index|[]
name|keyExpressions
parameter_list|)
block|{
name|this
operator|.
name|keyExpressions
operator|=
name|keyExpressions
expr_stmt|;
block|}
specifier|public
name|VectorAggregateExpression
index|[]
name|getAggregators
parameter_list|()
block|{
return|return
name|aggregators
return|;
block|}
specifier|public
name|void
name|setAggregators
parameter_list|(
name|VectorAggregateExpression
index|[]
name|aggregators
parameter_list|)
block|{
name|this
operator|.
name|aggregators
operator|=
name|aggregators
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|VectorizationContext
name|getOutputVectorizationContext
parameter_list|()
block|{
return|return
name|vOutContext
return|;
block|}
annotation|@
name|Override
specifier|public
name|OperatorType
name|getType
parameter_list|()
block|{
return|return
name|OperatorType
operator|.
name|GROUPBY
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getOperatorName
argument_list|()
return|;
block|}
specifier|static
specifier|public
name|String
name|getOperatorName
parameter_list|()
block|{
return|return
literal|"GBY"
return|;
block|}
annotation|@
name|Override
specifier|public
name|VectorDesc
name|getVectorDesc
parameter_list|()
block|{
return|return
name|vectorDesc
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|configureJobConf
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
comment|// only needed when grouping sets are present
if|if
condition|(
name|conf
operator|.
name|getGroupingSetPosition
argument_list|()
operator|>
literal|0
operator|&&
name|GroupByOperator
operator|.
name|shouldEmitSummaryRow
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|job
operator|.
name|setBoolean
argument_list|(
name|Utilities
operator|.
name|ENSURE_OPERATORS_EXECUTED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

