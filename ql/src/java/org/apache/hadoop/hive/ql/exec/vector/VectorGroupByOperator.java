begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MemoryMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|KeyWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpressionWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpressionWriterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
operator|.
name|VectorAggregateExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AggregationDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|GroupByDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|JavaDataModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_comment
comment|/**  * Vectorized GROUP BY operator implementation. Consumes the vectorized input and  * stores the aggregate operators' intermediate states. Emits row mode output.  *  */
end_comment

begin_class
specifier|public
class|class
name|VectorGroupByOperator
extends|extends
name|Operator
argument_list|<
name|GroupByDesc
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|VectorGroupByOperator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|VectorizationContext
name|vContext
decl_stmt|;
comment|/**    * This is the vector of aggregators. They are stateless and only implement    * the algorithm of how to compute the aggregation. state is kept in the    * aggregation buffers and is our responsibility to match the proper state for each key.    */
specifier|private
specifier|transient
name|VectorAggregateExpression
index|[]
name|aggregators
decl_stmt|;
comment|/**    * Key vector expressions.    */
specifier|private
specifier|transient
name|VectorExpression
index|[]
name|keyExpressions
decl_stmt|;
specifier|private
name|VectorExpressionWriter
index|[]
name|keyOutputWriters
decl_stmt|;
comment|/**    * The aggregation buffers to use for the current batch.    */
specifier|private
specifier|transient
name|VectorAggregationBufferBatch
name|aggregationBatchInfo
decl_stmt|;
comment|/**    * The current batch key wrappers.    * The very same instance gets reused for all batches.    */
specifier|private
specifier|transient
name|VectorHashKeyWrapperBatch
name|keyWrappersBatch
decl_stmt|;
comment|/**    * Total amount of memory allowed for JVM heap.    */
specifier|private
specifier|transient
name|long
name|maxMemory
decl_stmt|;
comment|/**    * configure percent of memory threshold usable by QP.    */
specifier|private
specifier|transient
name|float
name|memoryThreshold
decl_stmt|;
comment|/**    * Max memory usable by the hashtable before it should flush.    */
specifier|private
specifier|transient
name|long
name|maxHashTblMemory
decl_stmt|;
comment|/**    * Total per hashtable entry fixed memory (does not depend on key/agg values).    */
specifier|private
specifier|transient
name|int
name|fixedHashEntrySize
decl_stmt|;
comment|/**    * Average per hashtable entry variable size memory (depends on key/agg value).    */
specifier|private
specifier|transient
name|int
name|avgVariableSize
decl_stmt|;
comment|/**    * Current number of entries in the hash table.    */
specifier|private
specifier|transient
name|int
name|numEntriesHashTable
decl_stmt|;
comment|/**    * Number of entries added to the hashtable since the last check if it should flush.    */
specifier|private
specifier|transient
name|int
name|numEntriesSinceCheck
decl_stmt|;
comment|/**    * Sum of batch size processed (ie. rows).    */
specifier|private
specifier|transient
name|long
name|sumBatchSize
decl_stmt|;
comment|/**    * The number of new entries that must be added to the hashtable before a memory size check.    */
specifier|private
specifier|static
specifier|final
name|int
name|FLUSH_CHECK_THRESHOLD
init|=
literal|10000
decl_stmt|;
comment|/**    * Percent of entries to flush when memory threshold exceeded.    */
specifier|private
specifier|static
specifier|final
name|float
name|PERCENT_ENTRIES_TO_FLUSH
init|=
literal|0.1f
decl_stmt|;
comment|/**    * The global key-aggregation hash map.    */
specifier|private
specifier|transient
name|Map
argument_list|<
name|KeyWrapper
argument_list|,
name|VectorAggregationBufferRow
argument_list|>
name|mapKeysAggregationBuffers
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|VectorGroupByOperator
parameter_list|(
name|VectorizationContext
name|ctxt
parameter_list|,
name|OperatorDesc
name|conf
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|vContext
operator|=
name|ctxt
expr_stmt|;
name|this
operator|.
name|conf
operator|=
operator|(
name|GroupByDesc
operator|)
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|objectInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|vContext
operator|.
name|setOperatorType
argument_list|(
name|OperatorType
operator|.
name|GROUPBY
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keysDesc
init|=
name|conf
operator|.
name|getKeys
argument_list|()
decl_stmt|;
name|keyExpressions
operator|=
name|vContext
operator|.
name|getVectorExpressions
argument_list|(
name|keysDesc
argument_list|)
expr_stmt|;
name|keyOutputWriters
operator|=
operator|new
name|VectorExpressionWriter
index|[
name|keyExpressions
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyExpressions
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|keyOutputWriters
index|[
name|i
index|]
operator|=
name|VectorExpressionWriterFactory
operator|.
name|genVectorExpressionWritable
argument_list|(
name|keysDesc
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|objectInspectors
operator|.
name|add
argument_list|(
name|keyOutputWriters
index|[
name|i
index|]
operator|.
name|getObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|AggregationDesc
argument_list|>
name|aggrDesc
init|=
name|conf
operator|.
name|getAggregators
argument_list|()
decl_stmt|;
name|aggregators
operator|=
operator|new
name|VectorAggregateExpression
index|[
name|aggrDesc
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggrDesc
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|AggregationDesc
name|desc
init|=
name|aggrDesc
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|aggregators
index|[
name|i
index|]
operator|=
name|vContext
operator|.
name|getAggregatorExpression
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|objectInspectors
operator|.
name|add
argument_list|(
name|aggregators
index|[
name|i
index|]
operator|.
name|getOutputObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|keyWrappersBatch
operator|=
name|VectorHashKeyWrapperBatch
operator|.
name|compileKeyWrapperBatch
argument_list|(
name|keyExpressions
argument_list|)
expr_stmt|;
name|aggregationBatchInfo
operator|=
operator|new
name|VectorAggregationBufferBatch
argument_list|()
expr_stmt|;
name|aggregationBatchInfo
operator|.
name|compileAggregationBatchInfo
argument_list|(
name|aggregators
argument_list|)
expr_stmt|;
name|mapKeysAggregationBuffers
operator|=
operator|new
name|HashMap
argument_list|<
name|KeyWrapper
argument_list|,
name|VectorAggregationBufferRow
argument_list|>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|outputFieldNames
init|=
name|conf
operator|.
name|getOutputColumnNames
argument_list|()
decl_stmt|;
name|outputObjInspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|outputFieldNames
argument_list|,
name|objectInspectors
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|he
parameter_list|)
block|{
throw|throw
name|he
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|computeMemoryLimits
argument_list|()
expr_stmt|;
name|initializeChildren
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Computes the memory limits for hash table flush (spill).    */
specifier|private
name|void
name|computeMemoryLimits
parameter_list|()
block|{
name|JavaDataModel
name|model
init|=
name|JavaDataModel
operator|.
name|get
argument_list|()
decl_stmt|;
name|fixedHashEntrySize
operator|=
name|model
operator|.
name|hashMapEntry
argument_list|()
operator|+
name|keyWrappersBatch
operator|.
name|getKeysFixedSize
argument_list|()
operator|+
name|aggregationBatchInfo
operator|.
name|getAggregatorsFixedSize
argument_list|()
expr_stmt|;
name|MemoryMXBean
name|memoryMXBean
init|=
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
decl_stmt|;
name|maxMemory
operator|=
name|memoryMXBean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getMax
argument_list|()
expr_stmt|;
name|memoryThreshold
operator|=
name|conf
operator|.
name|getMemoryThreshold
argument_list|()
expr_stmt|;
comment|// Tests may leave this unitialized, so better set it to 1
if|if
condition|(
name|memoryThreshold
operator|==
literal|0.0f
condition|)
block|{
name|memoryThreshold
operator|=
literal|1.0f
expr_stmt|;
block|}
name|maxHashTblMemory
operator|=
call|(
name|int
call|)
argument_list|(
name|maxMemory
operator|*
name|memoryThreshold
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"maxMemory:%dMb (%d * %f) fixSize:%d (key:%d agg:%d)"
argument_list|,
name|maxHashTblMemory
operator|/
literal|1024
operator|/
literal|1024
argument_list|,
name|maxMemory
operator|/
literal|1024
operator|/
literal|1024
argument_list|,
name|memoryThreshold
argument_list|,
name|fixedHashEntrySize
argument_list|,
name|keyWrappersBatch
operator|.
name|getKeysFixedSize
argument_list|()
argument_list|,
name|aggregationBatchInfo
operator|.
name|getAggregatorsFixedSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|processOp
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|(
name|VectorizedRowBatch
operator|)
name|row
decl_stmt|;
comment|// First we traverse the batch to evaluate and prepare the KeyWrappers
comment|// After this the KeyWrappers are properly set and hash code is computed
name|keyWrappersBatch
operator|.
name|evaluateBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// Next we locate the aggregation buffer set for each key
name|prepareBatchAggregationBufferSets
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// Finally, evaluate the aggregators
name|processAggregators
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|//Flush if memory limits were reached
if|if
condition|(
name|shouldFlush
argument_list|(
name|batch
argument_list|)
condition|)
block|{
name|flush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sumBatchSize
operator|==
literal|0
operator|&&
literal|0
operator|!=
name|batch
operator|.
name|size
condition|)
block|{
comment|// Sample the first batch processed for variable sizes.
name|updateAvgVariableSize
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
name|sumBatchSize
operator|+=
name|batch
operator|.
name|size
expr_stmt|;
block|}
comment|/**    * Flushes the entries in the hash table by emiting output (forward).    * When parameter 'all' is true all the entries are flushed.    * @param all    * @throws HiveException    */
specifier|private
name|void
name|flush
parameter_list|(
name|boolean
name|all
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|entriesToFlush
init|=
name|all
condition|?
name|numEntriesHashTable
else|:
call|(
name|int
call|)
argument_list|(
name|numEntriesHashTable
operator|*
name|PERCENT_ENTRIES_TO_FLUSH
argument_list|)
decl_stmt|;
name|int
name|entriesFlushed
init|=
literal|0
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Flush %d %s entries:%d fixed:%d variable:%d (used:%dMb max:%dMb)"
argument_list|,
name|entriesToFlush
argument_list|,
name|all
condition|?
literal|"(all)"
else|:
literal|""
argument_list|,
name|numEntriesHashTable
argument_list|,
name|fixedHashEntrySize
argument_list|,
name|avgVariableSize
argument_list|,
name|numEntriesHashTable
operator|*
operator|(
name|fixedHashEntrySize
operator|+
name|avgVariableSize
operator|)
operator|/
literal|1024
operator|/
literal|1024
argument_list|,
name|maxHashTblMemory
operator|/
literal|1024
operator|/
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|forwardCache
init|=
operator|new
name|Object
index|[
name|keyExpressions
operator|.
name|length
operator|+
name|aggregators
operator|.
name|length
index|]
decl_stmt|;
if|if
condition|(
name|keyExpressions
operator|.
name|length
operator|==
literal|0
operator|&&
name|mapKeysAggregationBuffers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// if this is a global aggregation (no keys) and empty set, must still emit NULLs
name|VectorAggregationBufferRow
name|emptyBuffers
init|=
name|allocateAggregationBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregators
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|forwardCache
index|[
name|i
index|]
operator|=
name|aggregators
index|[
name|i
index|]
operator|.
name|evaluateOutput
argument_list|(
name|emptyBuffers
operator|.
name|getAggregationBuffer
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|forward
argument_list|(
name|forwardCache
argument_list|,
name|outputObjInspector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/* Iterate the global (keywrapper,aggregationbuffers) map and emit        a row for each key */
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|KeyWrapper
argument_list|,
name|VectorAggregationBufferRow
argument_list|>
argument_list|>
name|iter
init|=
name|mapKeysAggregationBuffers
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|KeyWrapper
argument_list|,
name|VectorAggregationBufferRow
argument_list|>
name|pair
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|fi
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyExpressions
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|VectorHashKeyWrapper
name|kw
init|=
operator|(
name|VectorHashKeyWrapper
operator|)
name|pair
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|forwardCache
index|[
name|fi
operator|++
index|]
operator|=
name|keyWrappersBatch
operator|.
name|getWritableKeyValue
argument_list|(
name|kw
argument_list|,
name|i
argument_list|,
name|keyOutputWriters
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregators
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|forwardCache
index|[
name|fi
operator|++
index|]
operator|=
name|aggregators
index|[
name|i
index|]
operator|.
name|evaluateOutput
argument_list|(
name|pair
operator|.
name|getValue
argument_list|()
operator|.
name|getAggregationBuffer
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"forwarding keys: %s: %s"
argument_list|,
name|pair
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|forwardCache
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|forward
argument_list|(
name|forwardCache
argument_list|,
name|outputObjInspector
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|all
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
operator|--
name|numEntriesHashTable
expr_stmt|;
if|if
condition|(
operator|++
name|entriesFlushed
operator|>=
name|entriesToFlush
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|all
condition|)
block|{
name|mapKeysAggregationBuffers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|numEntriesHashTable
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|/**    * Returns true if the memory threshold for the hash table was reached.    */
specifier|private
name|boolean
name|shouldFlush
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
if|if
condition|(
name|numEntriesSinceCheck
operator|<
name|FLUSH_CHECK_THRESHOLD
operator|||
name|batch
operator|.
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Were going to update the average variable row size by sampling the current batch
name|updateAvgVariableSize
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|numEntriesSinceCheck
operator|=
literal|0
expr_stmt|;
return|return
name|numEntriesHashTable
operator|*
operator|(
name|fixedHashEntrySize
operator|+
name|avgVariableSize
operator|)
operator|>
name|maxHashTblMemory
return|;
block|}
comment|/**    * Updates the average variable size of the hash table entries.    * The average is only updates by probing the batch that added the entry in the hash table    * that caused the check threshold to be reached.    */
specifier|private
name|void
name|updateAvgVariableSize
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
name|int
name|keyVariableSize
init|=
name|keyWrappersBatch
operator|.
name|getVariableSize
argument_list|(
name|batch
operator|.
name|size
argument_list|)
decl_stmt|;
name|int
name|aggVariableSize
init|=
name|aggregationBatchInfo
operator|.
name|getVariableSize
argument_list|(
name|batch
operator|.
name|size
argument_list|)
decl_stmt|;
comment|// This assumes the distribution of variable size keys/aggregates in the input
comment|// is the same as the distribution of variable sizes in the hash entries
name|avgVariableSize
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
name|avgVariableSize
operator|*
name|sumBatchSize
operator|+
name|keyVariableSize
operator|+
name|aggVariableSize
operator|)
operator|/
operator|(
name|sumBatchSize
operator|+
name|batch
operator|.
name|size
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Evaluates the aggregators on the current batch.    * The aggregationBatchInfo must have been prepared    * by calling {@link #prepareBatchAggregationBufferSets} first.    */
specifier|private
name|void
name|processAggregators
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// We now have a vector of aggregation buffer sets to use for each row
comment|// We can start computing the aggregates.
comment|// If the number of distinct keys in the batch is 1 we can
comment|// use the optimized code path of aggregateInput
name|VectorAggregationBufferRow
index|[]
name|aggregationBufferSets
init|=
name|aggregationBatchInfo
operator|.
name|getAggregationBuffers
argument_list|()
decl_stmt|;
if|if
condition|(
name|aggregationBatchInfo
operator|.
name|getDistinctBufferSetCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|VectorAggregateExpression
operator|.
name|AggregationBuffer
index|[]
name|aggregationBuffers
init|=
name|aggregationBufferSets
index|[
literal|0
index|]
operator|.
name|getAggregationBuffers
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregators
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|aggregators
index|[
name|i
index|]
operator|.
name|aggregateInput
argument_list|(
name|aggregationBuffers
index|[
name|i
index|]
argument_list|,
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregators
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|aggregators
index|[
name|i
index|]
operator|.
name|aggregateInputSelection
argument_list|(
name|aggregationBufferSets
argument_list|,
name|i
argument_list|,
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Locates the aggregation buffer sets to use for each key in the current batch.    * The keyWrappersBatch must have evaluated the current batch first.    */
specifier|private
name|void
name|prepareBatchAggregationBufferSets
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// The aggregation batch vector needs to know when we start a new batch
comment|// to bump its internal version.
name|aggregationBatchInfo
operator|.
name|startBatch
argument_list|()
expr_stmt|;
comment|// We now have to probe the global hash and find-or-allocate
comment|// the aggregation buffers to use for each key present in the batch
name|VectorHashKeyWrapper
index|[]
name|keyWrappers
init|=
name|keyWrappersBatch
operator|.
name|getVectorHashKeyWrappers
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
operator|++
name|i
control|)
block|{
name|VectorHashKeyWrapper
name|kw
init|=
name|keyWrappers
index|[
name|i
index|]
decl_stmt|;
name|VectorAggregationBufferRow
name|aggregationBuffer
init|=
name|mapKeysAggregationBuffers
operator|.
name|get
argument_list|(
name|kw
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|aggregationBuffer
condition|)
block|{
comment|// the probe failed, we must allocate a set of aggregation buffers
comment|// and push the (keywrapper,buffers) pair into the hash.
comment|// is very important to clone the keywrapper, the one we have from our
comment|// keyWrappersBatch is going to be reset/reused on next batch.
name|aggregationBuffer
operator|=
name|allocateAggregationBuffer
argument_list|()
expr_stmt|;
name|mapKeysAggregationBuffers
operator|.
name|put
argument_list|(
name|kw
operator|.
name|copyKey
argument_list|()
argument_list|,
name|aggregationBuffer
argument_list|)
expr_stmt|;
name|numEntriesHashTable
operator|++
expr_stmt|;
name|numEntriesSinceCheck
operator|++
expr_stmt|;
block|}
name|aggregationBatchInfo
operator|.
name|mapAggregationBufferSet
argument_list|(
name|aggregationBuffer
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * allocates a new aggregation buffer set.    */
specifier|private
name|VectorAggregationBufferRow
name|allocateAggregationBuffer
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorAggregateExpression
operator|.
name|AggregationBuffer
index|[]
name|aggregationBuffers
init|=
operator|new
name|VectorAggregateExpression
operator|.
name|AggregationBuffer
index|[
name|aggregators
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregators
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|aggregationBuffers
index|[
name|i
index|]
operator|=
name|aggregators
index|[
name|i
index|]
operator|.
name|getNewAggregationBuffer
argument_list|()
expr_stmt|;
name|aggregators
index|[
name|i
index|]
operator|.
name|reset
argument_list|(
name|aggregationBuffers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|VectorAggregationBufferRow
name|bufferSet
init|=
operator|new
name|VectorAggregationBufferRow
argument_list|(
name|aggregationBuffers
argument_list|)
decl_stmt|;
return|return
name|bufferSet
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|closeOp
parameter_list|(
name|boolean
name|aborted
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|aborted
condition|)
block|{
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return the name of the operator    */
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getOperatorName
argument_list|()
return|;
block|}
specifier|static
specifier|public
name|String
name|getOperatorName
parameter_list|()
block|{
return|return
literal|"GBY"
return|;
block|}
annotation|@
name|Override
specifier|public
name|OperatorType
name|getType
parameter_list|()
block|{
return|return
name|OperatorType
operator|.
name|GROUPBY
return|;
block|}
block|}
end_class

end_unit

