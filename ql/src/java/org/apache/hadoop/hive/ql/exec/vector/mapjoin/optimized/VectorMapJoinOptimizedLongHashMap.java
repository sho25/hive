begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|optimized
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinUtil
operator|.
name|JoinResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinTableContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinTableContainer
operator|.
name|ReusableGetAdaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MatchTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinHashMapResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinLongHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinNonMatchedIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
operator|.
name|HashTableKeyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|WriteBuffers
operator|.
name|ByteSegmentRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|fast
operator|.
name|BinarySortableDeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_comment
comment|/*  * An single long value hash map based on the BytesBytesMultiHashMap.  *  * We serialize the long key into BinarySortable format into an output buffer accepted by  * BytesBytesMultiHashMap.  */
end_comment

begin_class
specifier|public
class|class
name|VectorMapJoinOptimizedLongHashMap
extends|extends
name|VectorMapJoinOptimizedHashMap
implements|implements
name|VectorMapJoinLongHashMap
block|{
specifier|private
name|HashTableKeyType
name|hashTableKeyType
decl_stmt|;
specifier|private
name|VectorMapJoinOptimizedLongCommon
name|longCommon
decl_stmt|;
specifier|private
specifier|static
class|class
name|NonMatchedLongHashMapIterator
extends|extends
name|VectorMapJoinOptimizedNonMatchedIterator
block|{
specifier|private
name|VectorMapJoinOptimizedLongHashMap
name|hashMap
decl_stmt|;
comment|// Extract long with non-shared deserializer object.
specifier|private
name|BinarySortableDeserializeRead
name|keyBinarySortableDeserializeRead
decl_stmt|;
specifier|private
name|long
name|longValue
decl_stmt|;
name|NonMatchedLongHashMapIterator
parameter_list|(
name|MatchTracker
name|matchTracker
parameter_list|,
name|VectorMapJoinOptimizedLongHashMap
name|hashMap
parameter_list|)
block|{
name|super
argument_list|(
name|matchTracker
argument_list|)
expr_stmt|;
name|this
operator|.
name|hashMap
operator|=
name|hashMap
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|()
block|{
name|super
operator|.
name|init
argument_list|()
expr_stmt|;
name|nonMatchedIterator
operator|=
operator|(
operator|(
name|MapJoinTableContainer
operator|)
name|hashMap
operator|.
name|originalTableContainer
operator|)
operator|.
name|createNonMatchedSmallTableIterator
argument_list|(
name|matchTracker
argument_list|)
expr_stmt|;
name|TypeInfo
name|integerTypeInfo
decl_stmt|;
switch|switch
condition|(
name|hashMap
operator|.
name|hashTableKeyType
condition|)
block|{
case|case
name|BOOLEAN
case|:
name|integerTypeInfo
operator|=
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|integerTypeInfo
operator|=
name|TypeInfoFactory
operator|.
name|byteTypeInfo
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|integerTypeInfo
operator|=
name|TypeInfoFactory
operator|.
name|shortTypeInfo
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|integerTypeInfo
operator|=
name|TypeInfoFactory
operator|.
name|intTypeInfo
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|integerTypeInfo
operator|=
name|TypeInfoFactory
operator|.
name|longTypeInfo
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected key type "
operator|+
name|hashMap
operator|.
name|hashTableKeyType
argument_list|)
throw|;
block|}
name|keyBinarySortableDeserializeRead
operator|=
name|BinarySortableDeserializeRead
operator|.
name|with
argument_list|(
operator|new
name|TypeInfo
index|[]
block|{
name|integerTypeInfo
block|}
argument_list|,
literal|false
argument_list|,
name|hashMap
operator|.
name|longCommon
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|readNonMatchedLongKey
parameter_list|(
name|ByteSegmentRef
name|keyRef
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|byte
index|[]
name|keyBytes
init|=
name|keyRef
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|int
name|keyOffset
init|=
operator|(
name|int
operator|)
name|keyRef
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|int
name|keyLength
init|=
name|keyRef
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|keyBinarySortableDeserializeRead
operator|.
name|set
argument_list|(
name|keyBytes
argument_list|,
name|keyOffset
argument_list|,
name|keyLength
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|keyBinarySortableDeserializeRead
operator|.
name|readNextField
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|hashMap
operator|.
name|hashTableKeyType
condition|)
block|{
case|case
name|BOOLEAN
case|:
name|longValue
operator|=
name|keyBinarySortableDeserializeRead
operator|.
name|currentBoolean
condition|?
literal|1
else|:
literal|0
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|longValue
operator|=
name|keyBinarySortableDeserializeRead
operator|.
name|currentByte
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|longValue
operator|=
name|keyBinarySortableDeserializeRead
operator|.
name|currentShort
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|longValue
operator|=
name|keyBinarySortableDeserializeRead
operator|.
name|currentInt
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|longValue
operator|=
name|keyBinarySortableDeserializeRead
operator|.
name|currentLong
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected key type "
operator|+
name|hashMap
operator|.
name|hashTableKeyType
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|readNonMatchedLongKey
parameter_list|()
throws|throws
name|HiveException
block|{
return|return
name|readNonMatchedLongKey
argument_list|(
name|nonMatchedIterator
operator|.
name|getCurrentKeyAsRef
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getNonMatchedLongKey
parameter_list|()
throws|throws
name|HiveException
block|{
return|return
name|longValue
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|useMinMax
parameter_list|()
block|{
return|return
name|longCommon
operator|.
name|useMinMax
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|min
parameter_list|()
block|{
return|return
name|longCommon
operator|.
name|min
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|max
parameter_list|()
block|{
return|return
name|longCommon
operator|.
name|max
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|VectorMapJoinNonMatchedIterator
name|createNonMatchedIterator
parameter_list|(
name|MatchTracker
name|matchTracker
parameter_list|)
block|{
return|return
operator|new
name|NonMatchedLongHashMapIterator
argument_list|(
name|matchTracker
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|JoinResult
name|lookup
parameter_list|(
name|long
name|key
parameter_list|,
name|VectorMapJoinHashMapResult
name|hashMapResult
parameter_list|)
throws|throws
name|IOException
block|{
name|SerializedBytes
name|serializedBytes
init|=
name|longCommon
operator|.
name|serialize
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|super
operator|.
name|lookup
argument_list|(
name|serializedBytes
operator|.
name|bytes
argument_list|,
name|serializedBytes
operator|.
name|offset
argument_list|,
name|serializedBytes
operator|.
name|length
argument_list|,
name|hashMapResult
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|JoinResult
name|lookup
parameter_list|(
name|long
name|key
parameter_list|,
name|VectorMapJoinHashMapResult
name|hashMapResult
parameter_list|,
name|MatchTracker
name|matchTracker
parameter_list|)
throws|throws
name|IOException
block|{
name|SerializedBytes
name|serializedBytes
init|=
name|longCommon
operator|.
name|serialize
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|super
operator|.
name|lookup
argument_list|(
name|serializedBytes
operator|.
name|bytes
argument_list|,
name|serializedBytes
operator|.
name|offset
argument_list|,
name|serializedBytes
operator|.
name|length
argument_list|,
name|hashMapResult
argument_list|,
name|matchTracker
argument_list|)
return|;
block|}
specifier|public
name|VectorMapJoinOptimizedLongHashMap
parameter_list|(
name|boolean
name|minMaxEnabled
parameter_list|,
name|boolean
name|isOuterJoin
parameter_list|,
name|HashTableKeyType
name|hashTableKeyType
parameter_list|,
name|MapJoinTableContainer
name|originalTableContainer
parameter_list|,
name|ReusableGetAdaptor
name|hashMapRowGetter
parameter_list|,
name|TableDesc
name|tableDesc
parameter_list|)
block|{
name|super
argument_list|(
name|originalTableContainer
argument_list|,
name|hashMapRowGetter
argument_list|)
expr_stmt|;
name|this
operator|.
name|hashTableKeyType
operator|=
name|hashTableKeyType
expr_stmt|;
name|longCommon
operator|=
operator|new
name|VectorMapJoinOptimizedLongCommon
argument_list|(
name|minMaxEnabled
argument_list|,
name|isOuterJoin
argument_list|,
name|hashTableKeyType
argument_list|,
name|tableDesc
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

