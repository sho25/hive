begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ClassNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ClassNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|OperatorProcessorContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
operator|.
name|opTuple
import|;
end_import

begin_comment
comment|/**  * Dispatches calls to relevant method in processor. The user registers various rules with the dispatcher, and  * the processor corresponding to closest matching rule is fired.  */
end_comment

begin_class
specifier|public
class|class
name|DefaultRuleDispatcher
implements|implements
name|Dispatcher
block|{
specifier|private
name|Map
argument_list|<
name|Rule
argument_list|,
name|OperatorProcessor
argument_list|>
name|opProcRules
decl_stmt|;
specifier|private
name|OperatorProcessorContext
name|opProcCtx
decl_stmt|;
comment|/**    * constructor    * @param opp operator processor that handles actual processing of the node    * @param opProcCtx operator processor context, which is opaque to the dispatcher    */
specifier|public
name|DefaultRuleDispatcher
parameter_list|(
name|Map
argument_list|<
name|Rule
argument_list|,
name|OperatorProcessor
argument_list|>
name|opp
parameter_list|,
name|OperatorProcessorContext
name|opProcCtx
parameter_list|)
block|{
name|this
operator|.
name|opProcRules
operator|=
name|opp
expr_stmt|;
name|this
operator|.
name|opProcCtx
operator|=
name|opProcCtx
expr_stmt|;
block|}
comment|/**    * dispatcher function    * @param op operator to process    * @param opStack the operators encountered so far    * @throws SemanticException    */
specifier|public
name|void
name|dispatch
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|op
parameter_list|,
name|Stack
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|opStack
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// find the firing rule
comment|// find the rule from the stack specified
name|Rule
name|rule
init|=
literal|null
decl_stmt|;
name|int
name|minCost
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|Rule
name|r
range|:
name|opProcRules
operator|.
name|keySet
argument_list|()
control|)
block|{
name|int
name|cost
init|=
name|r
operator|.
name|cost
argument_list|(
name|opStack
argument_list|)
decl_stmt|;
if|if
condition|(
name|cost
operator|<=
name|minCost
condition|)
block|{
name|minCost
operator|=
name|cost
expr_stmt|;
name|rule
operator|=
name|r
expr_stmt|;
block|}
block|}
assert|assert
name|rule
operator|!=
literal|null
assert|;
name|OperatorProcessor
name|proc
init|=
name|opProcRules
operator|.
name|get
argument_list|(
name|rule
argument_list|)
decl_stmt|;
comment|// If the processor has registered a process method for the particular operator, invoke it.
comment|// Otherwise implement the generic function, which would definitely be implemented
for|for
control|(
name|opTuple
name|opt
range|:
name|OperatorFactory
operator|.
name|opvec
control|)
block|{
if|if
condition|(
name|opt
operator|.
name|opClass
operator|.
name|isInstance
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|Method
name|pcall
decl_stmt|;
try|try
block|{
name|pcall
operator|=
name|proc
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"process"
argument_list|,
name|opt
operator|.
name|opClass
argument_list|,
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.hive.ql.optimizer.OperatorProcessorContext"
argument_list|)
argument_list|)
expr_stmt|;
name|pcall
operator|.
name|invoke
argument_list|(
name|proc
argument_list|,
name|op
argument_list|,
name|opProcCtx
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
assert|assert
literal|false
assert|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
assert|assert
literal|false
assert|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
assert|assert
literal|false
assert|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
assert|assert
literal|false
assert|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
operator|.
name|getTargetException
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
assert|assert
literal|false
assert|;
block|}
block|}
block|}
try|try
block|{
comment|// no method found - invoke the generic function
name|Method
name|pcall
init|=
name|proc
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"process"
argument_list|,
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.hive.ql.exec.Operator"
argument_list|)
argument_list|,
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.hive.ql.optimizer.OperatorProcessorContext"
argument_list|)
argument_list|)
decl_stmt|;
name|pcall
operator|.
name|invoke
argument_list|(
name|proc
argument_list|,
operator|(
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
operator|)
name|op
operator|)
argument_list|,
name|opProcCtx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
assert|assert
literal|false
assert|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
assert|assert
literal|false
assert|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
assert|assert
literal|false
assert|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
assert|assert
literal|false
assert|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
operator|.
name|getTargetException
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
assert|assert
literal|false
assert|;
block|}
block|}
block|}
end_class

end_unit

