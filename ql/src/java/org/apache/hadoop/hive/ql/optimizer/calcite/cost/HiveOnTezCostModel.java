begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|cost
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelDistribution
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableIntList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|CalciteSemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
operator|.
name|JoinPredicateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveTableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveJoin
operator|.
name|MapJoinStreamingRelation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * Cost model for Tez execution engine.  */
end_comment

begin_class
specifier|public
class|class
name|HiveOnTezCostModel
extends|extends
name|HiveCostModel
block|{
specifier|private
specifier|static
name|HiveOnTezCostModel
name|INSTANCE
decl_stmt|;
specifier|private
specifier|static
name|HiveAlgorithmsUtil
name|algoUtils
decl_stmt|;
specifier|private
specifier|static
specifier|transient
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveOnTezCostModel
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|synchronized
specifier|public
specifier|static
name|HiveOnTezCostModel
name|getCostModel
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
if|if
condition|(
name|INSTANCE
operator|==
literal|null
condition|)
block|{
name|INSTANCE
operator|=
operator|new
name|HiveOnTezCostModel
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|INSTANCE
return|;
block|}
specifier|private
name|HiveOnTezCostModel
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|TezCommonJoinAlgorithm
operator|.
name|INSTANCE
argument_list|,
name|TezMapJoinAlgorithm
operator|.
name|INSTANCE
argument_list|,
name|TezBucketJoinAlgorithm
operator|.
name|INSTANCE
argument_list|,
name|TezSMBJoinAlgorithm
operator|.
name|INSTANCE
argument_list|)
argument_list|)
expr_stmt|;
name|algoUtils
operator|=
operator|new
name|HiveAlgorithmsUtil
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptCost
name|getDefaultCost
parameter_list|()
block|{
return|return
name|HiveCost
operator|.
name|FACTORY
operator|.
name|makeZeroCost
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptCost
name|getScanCost
parameter_list|(
name|HiveTableScan
name|ts
parameter_list|)
block|{
return|return
name|algoUtils
operator|.
name|computeScanCost
argument_list|(
name|ts
operator|.
name|getRows
argument_list|()
argument_list|,
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|ts
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptCost
name|getAggregateCost
parameter_list|(
name|HiveAggregate
name|aggregate
parameter_list|)
block|{
if|if
condition|(
name|aggregate
operator|.
name|isBucketedInput
argument_list|()
condition|)
block|{
return|return
name|HiveCost
operator|.
name|FACTORY
operator|.
name|makeZeroCost
argument_list|()
return|;
block|}
else|else
block|{
comment|// 1. Sum of input cardinalities
specifier|final
name|Double
name|rCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|aggregate
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rCount
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// 2. CPU cost = sorting cost
specifier|final
name|double
name|cpuCost
init|=
name|algoUtils
operator|.
name|computeSortCPUCost
argument_list|(
name|rCount
argument_list|)
decl_stmt|;
comment|// 3. IO cost = cost of writing intermediary results to local FS +
comment|//              cost of reading from local FS for transferring to GBy +
comment|//              cost of transferring map outputs to GBy operator
specifier|final
name|Double
name|rAverageSize
init|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|aggregate
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rAverageSize
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|double
name|ioCost
init|=
name|algoUtils
operator|.
name|computeSortIOCost
argument_list|(
operator|new
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|(
name|rCount
argument_list|,
name|rAverageSize
argument_list|)
argument_list|)
decl_stmt|;
comment|// 4. Result
return|return
name|HiveCost
operator|.
name|FACTORY
operator|.
name|makeCost
argument_list|(
name|rCount
argument_list|,
name|cpuCost
argument_list|,
name|ioCost
argument_list|)
return|;
block|}
block|}
comment|/**    * COMMON_JOIN is Sort Merge Join. Each parallel computation handles multiple    * splits.    */
specifier|public
specifier|static
class|class
name|TezCommonJoinAlgorithm
implements|implements
name|JoinAlgorithm
block|{
specifier|public
specifier|static
specifier|final
name|JoinAlgorithm
name|INSTANCE
init|=
operator|new
name|TezCommonJoinAlgorithm
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ALGORITHM_NAME
init|=
literal|"CommonJoin"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|ALGORITHM_NAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isExecutable
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptCost
name|getCost
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
comment|// 1. Sum of input cardinalities
specifier|final
name|Double
name|leftRCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Double
name|rightRCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|join
operator|.
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftRCount
operator|==
literal|null
operator|||
name|rightRCount
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|double
name|rCount
init|=
name|leftRCount
operator|+
name|rightRCount
decl_stmt|;
comment|// 2. CPU cost = sorting cost (for each relation) +
comment|//               total merge cost
name|ImmutableList
argument_list|<
name|Double
argument_list|>
name|cardinalities
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Double
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
name|leftRCount
argument_list|)
operator|.
name|add
argument_list|(
name|rightRCount
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|double
name|cpuCost
decl_stmt|;
try|try
block|{
name|cpuCost
operator|=
name|algoUtils
operator|.
name|computeSortMergeCPUCost
argument_list|(
name|cardinalities
argument_list|,
name|join
operator|.
name|getSortedInputs
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CalciteSemanticException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Failed to compute sort merge cpu cost "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// 3. IO cost = cost of writing intermediary results to local FS +
comment|//              cost of reading from local FS for transferring to join +
comment|//              cost of transferring map outputs to Join operator
specifier|final
name|Double
name|leftRAverageSize
init|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Double
name|rightRAverageSize
init|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|join
operator|.
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftRAverageSize
operator|==
literal|null
operator|||
name|rightRAverageSize
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ImmutableList
argument_list|<
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
name|relationInfos
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|(
name|leftRCount
argument_list|,
name|leftRAverageSize
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|(
name|rightRCount
argument_list|,
name|rightRAverageSize
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|double
name|ioCost
init|=
name|algoUtils
operator|.
name|computeSortMergeIOCost
argument_list|(
name|relationInfos
argument_list|)
decl_stmt|;
comment|// 4. Result
return|return
name|HiveCost
operator|.
name|FACTORY
operator|.
name|makeCost
argument_list|(
name|rCount
argument_list|,
name|cpuCost
argument_list|,
name|ioCost
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ImmutableList
argument_list|<
name|RelCollation
argument_list|>
name|getCollation
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
return|return
name|HiveAlgorithmsUtil
operator|.
name|getJoinCollation
argument_list|(
name|join
operator|.
name|getJoinPredicateInfo
argument_list|()
argument_list|,
name|MapJoinStreamingRelation
operator|.
name|NONE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDistribution
name|getDistribution
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
return|return
name|HiveAlgorithmsUtil
operator|.
name|getJoinRedistribution
argument_list|(
name|join
operator|.
name|getJoinPredicateInfo
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Double
name|getMemory
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
return|return
name|HiveAlgorithmsUtil
operator|.
name|getJoinMemory
argument_list|(
name|join
argument_list|,
name|MapJoinStreamingRelation
operator|.
name|NONE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Double
name|getCumulativeMemoryWithinPhaseSplit
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
name|JoinAlgorithm
name|oldAlgo
init|=
name|join
operator|.
name|getJoinAlgorithm
argument_list|()
decl_stmt|;
name|join
operator|.
name|setJoinAlgorithm
argument_list|(
name|TezCommonJoinAlgorithm
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
specifier|final
name|Double
name|memoryWithinPhase
init|=
name|RelMetadataQuery
operator|.
name|cumulativeMemoryWithinPhase
argument_list|(
name|join
argument_list|)
decl_stmt|;
specifier|final
name|Integer
name|splitCount
init|=
name|RelMetadataQuery
operator|.
name|splitCount
argument_list|(
name|join
argument_list|)
decl_stmt|;
name|join
operator|.
name|setJoinAlgorithm
argument_list|(
name|oldAlgo
argument_list|)
expr_stmt|;
if|if
condition|(
name|memoryWithinPhase
operator|==
literal|null
operator|||
name|splitCount
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|memoryWithinPhase
operator|/
name|splitCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|isPhaseTransition
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getSplitCount
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
return|return
name|HiveAlgorithmsUtil
operator|.
name|getSplitCountWithRepartition
argument_list|(
name|join
argument_list|)
return|;
block|}
block|}
comment|/**    * MAP_JOIN a hash join that keeps the whole data set of non streaming tables    * in memory.    */
specifier|public
specifier|static
class|class
name|TezMapJoinAlgorithm
implements|implements
name|JoinAlgorithm
block|{
specifier|public
specifier|static
specifier|final
name|JoinAlgorithm
name|INSTANCE
init|=
operator|new
name|TezMapJoinAlgorithm
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ALGORITHM_NAME
init|=
literal|"MapJoin"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|ALGORITHM_NAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isExecutable
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
specifier|final
name|Double
name|maxMemory
init|=
name|join
operator|.
name|getCluster
argument_list|()
operator|.
name|getPlanner
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|unwrap
argument_list|(
name|HiveAlgorithmsConf
operator|.
name|class
argument_list|)
operator|.
name|getMaxMemory
argument_list|()
decl_stmt|;
comment|// Check streaming side
name|RelNode
name|smallInput
init|=
name|join
operator|.
name|getStreamingInput
argument_list|()
decl_stmt|;
if|if
condition|(
name|smallInput
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|HiveAlgorithmsUtil
operator|.
name|isFittingIntoMemory
argument_list|(
name|maxMemory
argument_list|,
name|smallInput
argument_list|,
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptCost
name|getCost
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
comment|// 1. Sum of input cardinalities
specifier|final
name|Double
name|leftRCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Double
name|rightRCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|join
operator|.
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftRCount
operator|==
literal|null
operator|||
name|rightRCount
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|double
name|rCount
init|=
name|leftRCount
operator|+
name|rightRCount
decl_stmt|;
comment|// 2. CPU cost = HashTable  construction  cost  +
comment|//               join cost
name|ImmutableList
argument_list|<
name|Double
argument_list|>
name|cardinalities
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Double
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
name|leftRCount
argument_list|)
operator|.
name|add
argument_list|(
name|rightRCount
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableBitSet
operator|.
name|Builder
name|streamingBuilder
init|=
operator|new
name|ImmutableBitSet
operator|.
name|Builder
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|join
operator|.
name|getStreamingSide
argument_list|()
condition|)
block|{
case|case
name|LEFT_RELATION
case|:
name|streamingBuilder
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|RIGHT_RELATION
case|:
name|streamingBuilder
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
break|break;
default|default:
return|return
literal|null
return|;
block|}
name|ImmutableBitSet
name|streaming
init|=
name|streamingBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|double
name|cpuCost
init|=
name|HiveAlgorithmsUtil
operator|.
name|computeMapJoinCPUCost
argument_list|(
name|cardinalities
argument_list|,
name|streaming
argument_list|)
decl_stmt|;
comment|// 3. IO cost = cost of transferring small tables to join node *
comment|//              degree of parallelism
specifier|final
name|Double
name|leftRAverageSize
init|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Double
name|rightRAverageSize
init|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|join
operator|.
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftRAverageSize
operator|==
literal|null
operator|||
name|rightRAverageSize
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ImmutableList
argument_list|<
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
name|relationInfos
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|(
name|leftRCount
argument_list|,
name|leftRAverageSize
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|(
name|rightRCount
argument_list|,
name|rightRAverageSize
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|JoinAlgorithm
name|oldAlgo
init|=
name|join
operator|.
name|getJoinAlgorithm
argument_list|()
decl_stmt|;
name|join
operator|.
name|setJoinAlgorithm
argument_list|(
name|TezMapJoinAlgorithm
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
specifier|final
name|int
name|parallelism
init|=
name|RelMetadataQuery
operator|.
name|splitCount
argument_list|(
name|join
argument_list|)
operator|==
literal|null
condition|?
literal|1
else|:
name|RelMetadataQuery
operator|.
name|splitCount
argument_list|(
name|join
argument_list|)
decl_stmt|;
name|join
operator|.
name|setJoinAlgorithm
argument_list|(
name|oldAlgo
argument_list|)
expr_stmt|;
specifier|final
name|double
name|ioCost
init|=
name|algoUtils
operator|.
name|computeMapJoinIOCost
argument_list|(
name|relationInfos
argument_list|,
name|streaming
argument_list|,
name|parallelism
argument_list|)
decl_stmt|;
comment|// 4. Result
return|return
name|HiveCost
operator|.
name|FACTORY
operator|.
name|makeCost
argument_list|(
name|rCount
argument_list|,
name|cpuCost
argument_list|,
name|ioCost
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ImmutableList
argument_list|<
name|RelCollation
argument_list|>
name|getCollation
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
if|if
condition|(
name|join
operator|.
name|getStreamingSide
argument_list|()
operator|!=
name|MapJoinStreamingRelation
operator|.
name|LEFT_RELATION
operator|||
name|join
operator|.
name|getStreamingSide
argument_list|()
operator|!=
name|MapJoinStreamingRelation
operator|.
name|RIGHT_RELATION
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|HiveAlgorithmsUtil
operator|.
name|getJoinCollation
argument_list|(
name|join
operator|.
name|getJoinPredicateInfo
argument_list|()
argument_list|,
name|join
operator|.
name|getStreamingSide
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDistribution
name|getDistribution
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
if|if
condition|(
name|join
operator|.
name|getStreamingSide
argument_list|()
operator|!=
name|MapJoinStreamingRelation
operator|.
name|LEFT_RELATION
operator|||
name|join
operator|.
name|getStreamingSide
argument_list|()
operator|!=
name|MapJoinStreamingRelation
operator|.
name|RIGHT_RELATION
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|HiveAlgorithmsUtil
operator|.
name|getJoinDistribution
argument_list|(
name|join
operator|.
name|getJoinPredicateInfo
argument_list|()
argument_list|,
name|join
operator|.
name|getStreamingSide
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Double
name|getMemory
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
return|return
name|HiveAlgorithmsUtil
operator|.
name|getJoinMemory
argument_list|(
name|join
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Double
name|getCumulativeMemoryWithinPhaseSplit
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
comment|// Check streaming side
name|RelNode
name|inMemoryInput
decl_stmt|;
if|if
condition|(
name|join
operator|.
name|getStreamingSide
argument_list|()
operator|==
name|MapJoinStreamingRelation
operator|.
name|LEFT_RELATION
condition|)
block|{
name|inMemoryInput
operator|=
name|join
operator|.
name|getRight
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|join
operator|.
name|getStreamingSide
argument_list|()
operator|==
name|MapJoinStreamingRelation
operator|.
name|RIGHT_RELATION
condition|)
block|{
name|inMemoryInput
operator|=
name|join
operator|.
name|getLeft
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
comment|// If simple map join, the whole relation goes in memory
return|return
name|RelMetadataQuery
operator|.
name|cumulativeMemoryWithinPhase
argument_list|(
name|inMemoryInput
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|isPhaseTransition
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getSplitCount
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
return|return
name|HiveAlgorithmsUtil
operator|.
name|getSplitCountWithoutRepartition
argument_list|(
name|join
argument_list|)
return|;
block|}
block|}
comment|/**    * BUCKET_JOIN is a hash joins where one bucket of the non streaming tables    * is kept in memory at the time.    */
specifier|public
specifier|static
class|class
name|TezBucketJoinAlgorithm
implements|implements
name|JoinAlgorithm
block|{
specifier|public
specifier|static
specifier|final
name|JoinAlgorithm
name|INSTANCE
init|=
operator|new
name|TezBucketJoinAlgorithm
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ALGORITHM_NAME
init|=
literal|"BucketJoin"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|ALGORITHM_NAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isExecutable
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
specifier|final
name|Double
name|maxMemory
init|=
name|join
operator|.
name|getCluster
argument_list|()
operator|.
name|getPlanner
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|unwrap
argument_list|(
name|HiveAlgorithmsConf
operator|.
name|class
argument_list|)
operator|.
name|getMaxMemory
argument_list|()
decl_stmt|;
comment|// Check streaming side
name|RelNode
name|smallInput
init|=
name|join
operator|.
name|getStreamingInput
argument_list|()
decl_stmt|;
if|if
condition|(
name|smallInput
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Get key columns
name|JoinPredicateInfo
name|joinPredInfo
init|=
name|join
operator|.
name|getJoinPredicateInfo
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ImmutableIntList
argument_list|>
name|joinKeysInChildren
init|=
operator|new
name|ArrayList
argument_list|<
name|ImmutableIntList
argument_list|>
argument_list|()
decl_stmt|;
name|joinKeysInChildren
operator|.
name|add
argument_list|(
name|ImmutableIntList
operator|.
name|copyOf
argument_list|(
name|joinPredInfo
operator|.
name|getProjsFromLeftPartOfJoinKeysInChildSchema
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|joinKeysInChildren
operator|.
name|add
argument_list|(
name|ImmutableIntList
operator|.
name|copyOf
argument_list|(
name|joinPredInfo
operator|.
name|getProjsFromRightPartOfJoinKeysInChildSchema
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Requirements: for Bucket, bucketed by their keys on both sides and fitting in memory
comment|// Obtain number of buckets
comment|//TODO: Incase of non bucketed splits would be computed based on data size/max part size
comment|// What we need is a way to get buckets not splits
name|JoinAlgorithm
name|oldAlgo
init|=
name|join
operator|.
name|getJoinAlgorithm
argument_list|()
decl_stmt|;
name|join
operator|.
name|setJoinAlgorithm
argument_list|(
name|TezBucketJoinAlgorithm
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|Integer
name|buckets
init|=
name|RelMetadataQuery
operator|.
name|splitCount
argument_list|(
name|smallInput
argument_list|)
decl_stmt|;
name|join
operator|.
name|setJoinAlgorithm
argument_list|(
name|oldAlgo
argument_list|)
expr_stmt|;
if|if
condition|(
name|buckets
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|HiveAlgorithmsUtil
operator|.
name|isFittingIntoMemory
argument_list|(
name|maxMemory
argument_list|,
name|smallInput
argument_list|,
name|buckets
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|join
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RelNode
name|input
init|=
name|join
operator|.
name|getInputs
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Is bucketJoin possible? We need correct bucketing
name|RelDistribution
name|distribution
init|=
name|RelMetadataQuery
operator|.
name|distribution
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|distribution
operator|.
name|getType
argument_list|()
operator|!=
name|Type
operator|.
name|HASH_DISTRIBUTED
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|distribution
operator|.
name|getKeys
argument_list|()
operator|.
name|containsAll
argument_list|(
name|joinKeysInChildren
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptCost
name|getCost
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
comment|// 1. Sum of input cardinalities
specifier|final
name|Double
name|leftRCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Double
name|rightRCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|join
operator|.
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftRCount
operator|==
literal|null
operator|||
name|rightRCount
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|double
name|rCount
init|=
name|leftRCount
operator|+
name|rightRCount
decl_stmt|;
comment|// 2. CPU cost = HashTable  construction  cost  +
comment|//               join cost
name|ImmutableList
argument_list|<
name|Double
argument_list|>
name|cardinalities
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Double
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
name|leftRCount
argument_list|)
operator|.
name|add
argument_list|(
name|rightRCount
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableBitSet
operator|.
name|Builder
name|streamingBuilder
init|=
operator|new
name|ImmutableBitSet
operator|.
name|Builder
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|join
operator|.
name|getStreamingSide
argument_list|()
condition|)
block|{
case|case
name|LEFT_RELATION
case|:
name|streamingBuilder
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|RIGHT_RELATION
case|:
name|streamingBuilder
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
break|break;
default|default:
return|return
literal|null
return|;
block|}
name|ImmutableBitSet
name|streaming
init|=
name|streamingBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|double
name|cpuCost
init|=
name|algoUtils
operator|.
name|computeBucketMapJoinCPUCost
argument_list|(
name|cardinalities
argument_list|,
name|streaming
argument_list|)
decl_stmt|;
comment|// 3. IO cost = cost of transferring small tables to join node *
comment|//              degree of parallelism
specifier|final
name|Double
name|leftRAverageSize
init|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Double
name|rightRAverageSize
init|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|join
operator|.
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftRAverageSize
operator|==
literal|null
operator|||
name|rightRAverageSize
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ImmutableList
argument_list|<
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
name|relationInfos
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|(
name|leftRCount
argument_list|,
name|leftRAverageSize
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|(
name|rightRCount
argument_list|,
name|rightRAverageSize
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|//TODO: No Of buckets is not same as no of splits
name|JoinAlgorithm
name|oldAlgo
init|=
name|join
operator|.
name|getJoinAlgorithm
argument_list|()
decl_stmt|;
name|join
operator|.
name|setJoinAlgorithm
argument_list|(
name|TezBucketJoinAlgorithm
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
specifier|final
name|int
name|parallelism
init|=
name|RelMetadataQuery
operator|.
name|splitCount
argument_list|(
name|join
argument_list|)
operator|==
literal|null
condition|?
literal|1
else|:
name|RelMetadataQuery
operator|.
name|splitCount
argument_list|(
name|join
argument_list|)
decl_stmt|;
name|join
operator|.
name|setJoinAlgorithm
argument_list|(
name|oldAlgo
argument_list|)
expr_stmt|;
specifier|final
name|double
name|ioCost
init|=
name|algoUtils
operator|.
name|computeBucketMapJoinIOCost
argument_list|(
name|relationInfos
argument_list|,
name|streaming
argument_list|,
name|parallelism
argument_list|)
decl_stmt|;
comment|// 4. Result
return|return
name|HiveCost
operator|.
name|FACTORY
operator|.
name|makeCost
argument_list|(
name|rCount
argument_list|,
name|cpuCost
argument_list|,
name|ioCost
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ImmutableList
argument_list|<
name|RelCollation
argument_list|>
name|getCollation
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
if|if
condition|(
name|join
operator|.
name|getStreamingSide
argument_list|()
operator|!=
name|MapJoinStreamingRelation
operator|.
name|LEFT_RELATION
operator|||
name|join
operator|.
name|getStreamingSide
argument_list|()
operator|!=
name|MapJoinStreamingRelation
operator|.
name|RIGHT_RELATION
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|HiveAlgorithmsUtil
operator|.
name|getJoinCollation
argument_list|(
name|join
operator|.
name|getJoinPredicateInfo
argument_list|()
argument_list|,
name|join
operator|.
name|getStreamingSide
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDistribution
name|getDistribution
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
return|return
name|HiveAlgorithmsUtil
operator|.
name|getJoinRedistribution
argument_list|(
name|join
operator|.
name|getJoinPredicateInfo
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Double
name|getMemory
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
return|return
name|HiveAlgorithmsUtil
operator|.
name|getJoinMemory
argument_list|(
name|join
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Double
name|getCumulativeMemoryWithinPhaseSplit
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
comment|// Check streaming side
name|RelNode
name|inMemoryInput
decl_stmt|;
if|if
condition|(
name|join
operator|.
name|getStreamingSide
argument_list|()
operator|==
name|MapJoinStreamingRelation
operator|.
name|LEFT_RELATION
condition|)
block|{
name|inMemoryInput
operator|=
name|join
operator|.
name|getRight
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|join
operator|.
name|getStreamingSide
argument_list|()
operator|==
name|MapJoinStreamingRelation
operator|.
name|RIGHT_RELATION
condition|)
block|{
name|inMemoryInput
operator|=
name|join
operator|.
name|getLeft
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
comment|// If bucket map join, only a split goes in memory
specifier|final
name|Double
name|memoryInput
init|=
name|RelMetadataQuery
operator|.
name|cumulativeMemoryWithinPhase
argument_list|(
name|inMemoryInput
argument_list|)
decl_stmt|;
specifier|final
name|Integer
name|splitCount
init|=
name|RelMetadataQuery
operator|.
name|splitCount
argument_list|(
name|inMemoryInput
argument_list|)
decl_stmt|;
if|if
condition|(
name|memoryInput
operator|==
literal|null
operator|||
name|splitCount
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|memoryInput
operator|/
name|splitCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|isPhaseTransition
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getSplitCount
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
return|return
name|HiveAlgorithmsUtil
operator|.
name|getSplitCountWithoutRepartition
argument_list|(
name|join
argument_list|)
return|;
block|}
block|}
comment|/**    * SMB_JOIN is a Sort Merge Join. Each parallel computation handles one bucket.    */
specifier|public
specifier|static
class|class
name|TezSMBJoinAlgorithm
implements|implements
name|JoinAlgorithm
block|{
specifier|public
specifier|static
specifier|final
name|JoinAlgorithm
name|INSTANCE
init|=
operator|new
name|TezSMBJoinAlgorithm
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ALGORITHM_NAME
init|=
literal|"SMBJoin"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|ALGORITHM_NAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isExecutable
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
comment|// Requirements: for SMB, sorted by their keys on both sides and bucketed.
comment|// Get key columns
name|JoinPredicateInfo
name|joinPredInfo
init|=
name|join
operator|.
name|getJoinPredicateInfo
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ImmutableIntList
argument_list|>
name|joinKeysInChildren
init|=
operator|new
name|ArrayList
argument_list|<
name|ImmutableIntList
argument_list|>
argument_list|()
decl_stmt|;
name|joinKeysInChildren
operator|.
name|add
argument_list|(
name|ImmutableIntList
operator|.
name|copyOf
argument_list|(
name|joinPredInfo
operator|.
name|getProjsFromLeftPartOfJoinKeysInChildSchema
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|joinKeysInChildren
operator|.
name|add
argument_list|(
name|ImmutableIntList
operator|.
name|copyOf
argument_list|(
name|joinPredInfo
operator|.
name|getProjsFromRightPartOfJoinKeysInChildSchema
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|join
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RelNode
name|input
init|=
name|join
operator|.
name|getInputs
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Is smbJoin possible? We need correct order
name|boolean
name|orderFound
decl_stmt|;
try|try
block|{
name|orderFound
operator|=
name|join
operator|.
name|getSortedInputs
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CalciteSemanticException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Not possible to do SMB Join "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|orderFound
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Is smbJoin possible? We need correct bucketing
name|RelDistribution
name|distribution
init|=
name|RelMetadataQuery
operator|.
name|distribution
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|distribution
operator|.
name|getType
argument_list|()
operator|!=
name|Type
operator|.
name|HASH_DISTRIBUTED
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|distribution
operator|.
name|getKeys
argument_list|()
operator|.
name|containsAll
argument_list|(
name|joinKeysInChildren
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptCost
name|getCost
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
comment|// 1. Sum of input cardinalities
specifier|final
name|Double
name|leftRCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Double
name|rightRCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|join
operator|.
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftRCount
operator|==
literal|null
operator|||
name|rightRCount
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|double
name|rCount
init|=
name|leftRCount
operator|+
name|rightRCount
decl_stmt|;
comment|// 2. CPU cost = HashTable  construction  cost  +
comment|//               join cost
name|ImmutableList
argument_list|<
name|Double
argument_list|>
name|cardinalities
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Double
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
name|leftRCount
argument_list|)
operator|.
name|add
argument_list|(
name|rightRCount
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableBitSet
operator|.
name|Builder
name|streamingBuilder
init|=
operator|new
name|ImmutableBitSet
operator|.
name|Builder
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|join
operator|.
name|getStreamingSide
argument_list|()
condition|)
block|{
case|case
name|LEFT_RELATION
case|:
name|streamingBuilder
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|RIGHT_RELATION
case|:
name|streamingBuilder
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
break|break;
default|default:
return|return
literal|null
return|;
block|}
name|ImmutableBitSet
name|streaming
init|=
name|streamingBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|double
name|cpuCost
init|=
name|HiveAlgorithmsUtil
operator|.
name|computeSMBMapJoinCPUCost
argument_list|(
name|cardinalities
argument_list|)
decl_stmt|;
comment|// 3. IO cost = cost of transferring small tables to join node *
comment|//              degree of parallelism
specifier|final
name|Double
name|leftRAverageSize
init|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Double
name|rightRAverageSize
init|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|join
operator|.
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftRAverageSize
operator|==
literal|null
operator|||
name|rightRAverageSize
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ImmutableList
argument_list|<
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
name|relationInfos
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|(
name|leftRCount
argument_list|,
name|leftRAverageSize
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|(
name|rightRCount
argument_list|,
name|rightRAverageSize
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// TODO: Split count is not the same as no of buckets
name|JoinAlgorithm
name|oldAlgo
init|=
name|join
operator|.
name|getJoinAlgorithm
argument_list|()
decl_stmt|;
name|join
operator|.
name|setJoinAlgorithm
argument_list|(
name|TezSMBJoinAlgorithm
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
specifier|final
name|int
name|parallelism
init|=
name|RelMetadataQuery
operator|.
name|splitCount
argument_list|(
name|join
argument_list|)
operator|==
literal|null
condition|?
literal|1
else|:
name|RelMetadataQuery
operator|.
name|splitCount
argument_list|(
name|join
argument_list|)
decl_stmt|;
name|join
operator|.
name|setJoinAlgorithm
argument_list|(
name|oldAlgo
argument_list|)
expr_stmt|;
specifier|final
name|double
name|ioCost
init|=
name|algoUtils
operator|.
name|computeSMBMapJoinIOCost
argument_list|(
name|relationInfos
argument_list|,
name|streaming
argument_list|,
name|parallelism
argument_list|)
decl_stmt|;
comment|// 4. Result
return|return
name|HiveCost
operator|.
name|FACTORY
operator|.
name|makeCost
argument_list|(
name|rCount
argument_list|,
name|cpuCost
argument_list|,
name|ioCost
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ImmutableList
argument_list|<
name|RelCollation
argument_list|>
name|getCollation
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
return|return
name|HiveAlgorithmsUtil
operator|.
name|getJoinCollation
argument_list|(
name|join
operator|.
name|getJoinPredicateInfo
argument_list|()
argument_list|,
name|MapJoinStreamingRelation
operator|.
name|NONE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDistribution
name|getDistribution
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
return|return
name|HiveAlgorithmsUtil
operator|.
name|getJoinRedistribution
argument_list|(
name|join
operator|.
name|getJoinPredicateInfo
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Double
name|getMemory
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
return|return
literal|0.0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Double
name|getCumulativeMemoryWithinPhaseSplit
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
comment|// TODO: Split count is not same as no of buckets
name|JoinAlgorithm
name|oldAlgo
init|=
name|join
operator|.
name|getJoinAlgorithm
argument_list|()
decl_stmt|;
name|join
operator|.
name|setJoinAlgorithm
argument_list|(
name|TezSMBJoinAlgorithm
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
specifier|final
name|Double
name|memoryWithinPhase
init|=
name|RelMetadataQuery
operator|.
name|cumulativeMemoryWithinPhase
argument_list|(
name|join
argument_list|)
decl_stmt|;
specifier|final
name|Integer
name|splitCount
init|=
name|RelMetadataQuery
operator|.
name|splitCount
argument_list|(
name|join
argument_list|)
decl_stmt|;
name|join
operator|.
name|setJoinAlgorithm
argument_list|(
name|oldAlgo
argument_list|)
expr_stmt|;
if|if
condition|(
name|memoryWithinPhase
operator|==
literal|null
operator|||
name|splitCount
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|memoryWithinPhase
operator|/
name|splitCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|isPhaseTransition
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getSplitCount
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
return|return
name|HiveAlgorithmsUtil
operator|.
name|getSplitCountWithoutRepartition
argument_list|(
name|join
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

