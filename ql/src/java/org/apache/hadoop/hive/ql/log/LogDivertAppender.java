begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|OperationLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LogEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LoggerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|appender
operator|.
name|RandomAccessFileAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|appender
operator|.
name|routing
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|appender
operator|.
name|routing
operator|.
name|Routes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|appender
operator|.
name|routing
operator|.
name|RoutingAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|LoggerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|plugins
operator|.
name|PluginAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|plugins
operator|.
name|PluginFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|plugins
operator|.
name|processor
operator|.
name|PluginEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|plugins
operator|.
name|util
operator|.
name|PluginType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|filter
operator|.
name|AbstractFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|layout
operator|.
name|PatternLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Divert appender to redirect operation logs to separate files.  */
end_comment

begin_class
specifier|public
class|class
name|LogDivertAppender
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|slf4j
operator|.
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LogDivertAppender
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|verboseLayout
init|=
literal|"%d{yy/MM/dd HH:mm:ss} %p %c{2}: %m%n"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|nonVerboseLayout
init|=
literal|"%-5p : %m%n"
decl_stmt|;
comment|/**    * A log filter that filters messages coming from the logger with the given names.    * It be used as a white list filter or a black list filter.    * We apply black list filter on the Loggers used by the log diversion stuff, so that    * they don't generate more logs for themselves when they process logs.    * White list filter is used for less verbose log collection    */
annotation|@
name|Plugin
argument_list|(
name|name
operator|=
literal|"NameFilter"
argument_list|,
name|category
operator|=
literal|"Core"
argument_list|,
name|elementType
operator|=
literal|"filter"
argument_list|,
name|printObject
operator|=
literal|true
argument_list|)
specifier|private
specifier|static
class|class
name|NameFilter
extends|extends
name|AbstractFilter
block|{
specifier|private
name|Pattern
name|namePattern
decl_stmt|;
specifier|private
name|OperationLog
operator|.
name|LoggingLevel
name|loggingMode
decl_stmt|;
comment|/* Patterns that are excluded in verbose logging level.      * Filter out messages coming from log processing classes, or we'll run an infinite loop.      */
specifier|private
specifier|static
specifier|final
name|Pattern
name|verboseExcludeNamePattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
literal|"|"
argument_list|)
operator|.
name|join
argument_list|(
operator|new
name|String
index|[]
block|{
name|LOG
operator|.
name|getName
argument_list|()
block|,
name|OperationLog
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
argument_list|)
decl_stmt|;
comment|/* Patterns that are included in execution logging level.      * In execution mode, show only select logger messages.      */
specifier|private
specifier|static
specifier|final
name|Pattern
name|executionIncludeNamePattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
literal|"|"
argument_list|)
operator|.
name|join
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"org.apache.hadoop.mapreduce.JobSubmitter"
block|,
literal|"org.apache.hadoop.mapreduce.Job"
block|,
literal|"SessionState"
block|,
literal|"ReplState"
block|,
name|Task
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|Driver
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
literal|"org.apache.hadoop.hive.ql.exec.spark.status.SparkJobMonitor"
block|}
argument_list|)
argument_list|)
decl_stmt|;
comment|/* Patterns that are included in performance logging level.      * In performance mode, show execution and performance logger messages.      */
specifier|private
specifier|static
specifier|final
name|Pattern
name|performanceIncludeNamePattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|executionIncludeNamePattern
operator|.
name|pattern
argument_list|()
operator|+
literal|"|"
operator|+
name|PerfLogger
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|void
name|setCurrentNamePattern
parameter_list|(
name|OperationLog
operator|.
name|LoggingLevel
name|mode
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|==
name|OperationLog
operator|.
name|LoggingLevel
operator|.
name|VERBOSE
condition|)
block|{
name|this
operator|.
name|namePattern
operator|=
name|verboseExcludeNamePattern
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|OperationLog
operator|.
name|LoggingLevel
operator|.
name|EXECUTION
condition|)
block|{
name|this
operator|.
name|namePattern
operator|=
name|executionIncludeNamePattern
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|OperationLog
operator|.
name|LoggingLevel
operator|.
name|PERFORMANCE
condition|)
block|{
name|this
operator|.
name|namePattern
operator|=
name|performanceIncludeNamePattern
expr_stmt|;
block|}
block|}
specifier|public
name|NameFilter
parameter_list|(
name|OperationLog
operator|.
name|LoggingLevel
name|loggingMode
parameter_list|)
block|{
name|this
operator|.
name|loggingMode
operator|=
name|loggingMode
expr_stmt|;
name|setCurrentNamePattern
argument_list|(
name|loggingMode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|filter
parameter_list|(
name|LogEvent
name|event
parameter_list|)
block|{
name|boolean
name|excludeMatches
init|=
operator|(
name|loggingMode
operator|==
name|OperationLog
operator|.
name|LoggingLevel
operator|.
name|VERBOSE
operator|)
decl_stmt|;
name|String
name|logLevel
init|=
name|event
operator|.
name|getContextMap
argument_list|()
operator|.
name|get
argument_list|(
name|LogUtils
operator|.
name|OPERATIONLOG_LEVEL_KEY
argument_list|)
decl_stmt|;
name|logLevel
operator|=
name|logLevel
operator|==
literal|null
condition|?
literal|""
else|:
name|logLevel
expr_stmt|;
name|OperationLog
operator|.
name|LoggingLevel
name|currentLoggingMode
init|=
name|OperationLog
operator|.
name|getLoggingLevel
argument_list|(
name|logLevel
argument_list|)
decl_stmt|;
comment|// If logging is disabled, deny everything.
if|if
condition|(
name|currentLoggingMode
operator|==
name|OperationLog
operator|.
name|LoggingLevel
operator|.
name|NONE
condition|)
block|{
return|return
name|Result
operator|.
name|DENY
return|;
block|}
comment|// Look at the current session's setting
comment|// and set the pattern and excludeMatches accordingly.
if|if
condition|(
name|currentLoggingMode
operator|!=
name|loggingMode
condition|)
block|{
name|loggingMode
operator|=
name|currentLoggingMode
expr_stmt|;
name|excludeMatches
operator|=
operator|(
name|loggingMode
operator|==
name|OperationLog
operator|.
name|LoggingLevel
operator|.
name|VERBOSE
operator|)
expr_stmt|;
name|setCurrentNamePattern
argument_list|(
name|loggingMode
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isMatch
init|=
name|namePattern
operator|.
name|matcher
argument_list|(
name|event
operator|.
name|getLoggerName
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
decl_stmt|;
if|if
condition|(
name|excludeMatches
operator|==
name|isMatch
condition|)
block|{
comment|// Deny if this is black-list filter (excludeMatches = true) and it
comment|// matched or if this is whitelist filter and it didn't match
return|return
name|Result
operator|.
name|DENY
return|;
block|}
return|return
name|Result
operator|.
name|NEUTRAL
return|;
block|}
annotation|@
name|PluginFactory
specifier|public
specifier|static
name|NameFilter
name|createFilter
parameter_list|(
annotation|@
name|PluginAttribute
argument_list|(
literal|"loggingLevel"
argument_list|)
specifier|final
name|String
name|loggingLevel
parameter_list|)
block|{
comment|// Name required for routing. Error out if it is not set.
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|loggingLevel
argument_list|,
literal|"loggingLevel must be specified for "
operator|+
name|NameFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|NameFilter
argument_list|(
name|OperationLog
operator|.
name|getLoggingLevel
argument_list|(
name|loggingLevel
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Programmatically register a routing appender to Log4J configuration, which    * automatically writes the log of each query to an individual file.    * The equivilent property configuration is as follows:    * # queryId based routing file appender       appender.query-routing.type = Routing       appender.query-routing.name = query-routing       appender.query-routing.routes.type = Routes       appender.query-routing.routes.pattern = $${ctx:queryId}       # default route       appender.query-routing.routes.route-default.type = Route       appender.query-routing.routes.route-default.key = $${ctx:queryId}       appender.query-routing.routes.route-default.app.type = null       appender.query-routing.routes.route-default.app.name = Null       # queryId based route       appender.query-routing.routes.route-mdc.type = Route       appender.query-routing.routes.route-mdc.name = IrrelevantName-query-routing       appender.query-routing.routes.route-mdc.app.type = RandomAccessFile       appender.query-routing.routes.route-mdc.app.name = query-file-appender       appender.query-routing.routes.route-mdc.app.fileName = ${sys:hive.log.dir}/${ctx:sessionId}/${ctx:queryId}       appender.query-routing.routes.route-mdc.app.layout.type = PatternLayout       appender.query-routing.routes.route-mdc.app.layout.pattern = %d{ISO8601} %5p %c{2}: %m%n    * @param conf  the configuration for HiveServer2 instance    */
specifier|public
specifier|static
name|void
name|registerRoutingAppender
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|loggingLevel
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_LOGGING_OPERATION_LEVEL
argument_list|)
decl_stmt|;
name|OperationLog
operator|.
name|LoggingLevel
name|loggingMode
init|=
name|OperationLog
operator|.
name|getLoggingLevel
argument_list|(
name|loggingLevel
argument_list|)
decl_stmt|;
name|String
name|layout
init|=
name|loggingMode
operator|==
name|OperationLog
operator|.
name|LoggingLevel
operator|.
name|VERBOSE
condition|?
name|verboseLayout
else|:
name|nonVerboseLayout
decl_stmt|;
name|String
name|logLocation
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_LOGGING_OPERATION_LOG_LOCATION
argument_list|)
decl_stmt|;
comment|// Create NullAppender
name|PluginEntry
name|nullEntry
init|=
operator|new
name|PluginEntry
argument_list|()
decl_stmt|;
name|nullEntry
operator|.
name|setClassName
argument_list|(
name|NullAppender
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|nullEntry
operator|.
name|setKey
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
name|nullEntry
operator|.
name|setName
argument_list|(
literal|"appender"
argument_list|)
expr_stmt|;
name|PluginType
argument_list|<
name|NullAppender
argument_list|>
name|nullChildType
init|=
operator|new
name|PluginType
argument_list|<
name|NullAppender
argument_list|>
argument_list|(
name|nullEntry
argument_list|,
name|NullAppender
operator|.
name|class
argument_list|,
literal|"appender"
argument_list|)
decl_stmt|;
name|Node
name|nullChildNode
init|=
operator|new
name|Node
argument_list|(
literal|null
argument_list|,
literal|"Null"
argument_list|,
name|nullChildType
argument_list|)
decl_stmt|;
comment|// Create default route
name|PluginEntry
name|defaultEntry
init|=
operator|new
name|PluginEntry
argument_list|()
decl_stmt|;
name|defaultEntry
operator|.
name|setClassName
argument_list|(
name|Route
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|defaultEntry
operator|.
name|setKey
argument_list|(
literal|"route"
argument_list|)
expr_stmt|;
name|defaultEntry
operator|.
name|setName
argument_list|(
literal|"Route"
argument_list|)
expr_stmt|;
name|PluginType
argument_list|<
name|Route
argument_list|>
name|defaultType
init|=
operator|new
name|PluginType
argument_list|<
name|Route
argument_list|>
argument_list|(
name|defaultEntry
argument_list|,
name|Route
operator|.
name|class
argument_list|,
literal|"Route"
argument_list|)
decl_stmt|;
name|Node
name|nullNode
init|=
operator|new
name|Node
argument_list|(
literal|null
argument_list|,
literal|"Route"
argument_list|,
name|defaultType
argument_list|)
decl_stmt|;
name|nullNode
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|nullChildNode
argument_list|)
expr_stmt|;
name|Route
name|defaultRoute
init|=
name|Route
operator|.
name|createRoute
argument_list|(
literal|null
argument_list|,
literal|"${ctx:queryId}"
argument_list|,
name|nullNode
argument_list|)
decl_stmt|;
comment|// Create queryId based route
name|PluginEntry
name|entry
init|=
operator|new
name|PluginEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setClassName
argument_list|(
name|Route
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setKey
argument_list|(
literal|"route"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setName
argument_list|(
literal|"Route"
argument_list|)
expr_stmt|;
name|PluginType
argument_list|<
name|Route
argument_list|>
name|type
init|=
operator|new
name|PluginType
argument_list|<
name|Route
argument_list|>
argument_list|(
name|entry
argument_list|,
name|Route
operator|.
name|class
argument_list|,
literal|"Route"
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
operator|new
name|Node
argument_list|(
literal|null
argument_list|,
literal|"Route"
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|PluginEntry
name|childEntry
init|=
operator|new
name|PluginEntry
argument_list|()
decl_stmt|;
name|childEntry
operator|.
name|setClassName
argument_list|(
name|RandomAccessFileAppender
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|childEntry
operator|.
name|setKey
argument_list|(
literal|"randomaccessfile"
argument_list|)
expr_stmt|;
name|childEntry
operator|.
name|setName
argument_list|(
literal|"appender"
argument_list|)
expr_stmt|;
name|PluginType
argument_list|<
name|RandomAccessFileAppender
argument_list|>
name|childType
init|=
operator|new
name|PluginType
argument_list|<
name|RandomAccessFileAppender
argument_list|>
argument_list|(
name|childEntry
argument_list|,
name|RandomAccessFileAppender
operator|.
name|class
argument_list|,
literal|"appender"
argument_list|)
decl_stmt|;
name|Node
name|childNode
init|=
operator|new
name|Node
argument_list|(
name|node
argument_list|,
literal|"RandomAccessFile"
argument_list|,
name|childType
argument_list|)
decl_stmt|;
name|childNode
operator|.
name|getAttributes
argument_list|()
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"query-file-appender"
argument_list|)
expr_stmt|;
name|childNode
operator|.
name|getAttributes
argument_list|()
operator|.
name|put
argument_list|(
literal|"fileName"
argument_list|,
name|logLocation
operator|+
literal|"/${ctx:sessionId}/${ctx:queryId}"
argument_list|)
expr_stmt|;
name|node
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|childNode
argument_list|)
expr_stmt|;
name|PluginEntry
name|filterEntry
init|=
operator|new
name|PluginEntry
argument_list|()
decl_stmt|;
name|filterEntry
operator|.
name|setClassName
argument_list|(
name|NameFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|filterEntry
operator|.
name|setKey
argument_list|(
literal|"namefilter"
argument_list|)
expr_stmt|;
name|filterEntry
operator|.
name|setName
argument_list|(
literal|"namefilter"
argument_list|)
expr_stmt|;
name|PluginType
argument_list|<
name|NameFilter
argument_list|>
name|filterType
init|=
operator|new
name|PluginType
argument_list|<
name|NameFilter
argument_list|>
argument_list|(
name|filterEntry
argument_list|,
name|NameFilter
operator|.
name|class
argument_list|,
literal|"filter"
argument_list|)
decl_stmt|;
name|Node
name|filterNode
init|=
operator|new
name|Node
argument_list|(
name|childNode
argument_list|,
literal|"NameFilter"
argument_list|,
name|filterType
argument_list|)
decl_stmt|;
name|filterNode
operator|.
name|getAttributes
argument_list|()
operator|.
name|put
argument_list|(
literal|"loggingLevel"
argument_list|,
name|loggingMode
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|childNode
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|filterNode
argument_list|)
expr_stmt|;
name|PluginEntry
name|layoutEntry
init|=
operator|new
name|PluginEntry
argument_list|()
decl_stmt|;
name|layoutEntry
operator|.
name|setClassName
argument_list|(
name|PatternLayout
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|layoutEntry
operator|.
name|setKey
argument_list|(
literal|"patternlayout"
argument_list|)
expr_stmt|;
name|layoutEntry
operator|.
name|setName
argument_list|(
literal|"layout"
argument_list|)
expr_stmt|;
name|PluginType
argument_list|<
name|PatternLayout
argument_list|>
name|layoutType
init|=
operator|new
name|PluginType
argument_list|<
name|PatternLayout
argument_list|>
argument_list|(
name|layoutEntry
argument_list|,
name|PatternLayout
operator|.
name|class
argument_list|,
literal|"layout"
argument_list|)
decl_stmt|;
name|Node
name|layoutNode
init|=
operator|new
name|Node
argument_list|(
name|childNode
argument_list|,
literal|"PatternLayout"
argument_list|,
name|layoutType
argument_list|)
decl_stmt|;
name|layoutNode
operator|.
name|getAttributes
argument_list|()
operator|.
name|put
argument_list|(
literal|"pattern"
argument_list|,
name|layout
argument_list|)
expr_stmt|;
name|childNode
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|layoutNode
argument_list|)
expr_stmt|;
name|Route
name|mdcRoute
init|=
name|Route
operator|.
name|createRoute
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|Routes
name|routes
init|=
name|Routes
operator|.
name|createRoutes
argument_list|(
literal|"${ctx:queryId}"
argument_list|,
name|defaultRoute
argument_list|,
name|mdcRoute
argument_list|)
decl_stmt|;
name|LoggerContext
name|context
init|=
operator|(
name|LoggerContext
operator|)
name|LogManager
operator|.
name|getContext
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Configuration
name|configuration
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|RoutingAppender
name|routingAppender
init|=
name|RoutingAppender
operator|.
name|createAppender
argument_list|(
literal|"query-routing"
argument_list|,
literal|"true"
argument_list|,
name|routes
argument_list|,
name|configuration
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LoggerConfig
name|loggerConfig
init|=
name|configuration
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|loggerConfig
operator|.
name|addAppender
argument_list|(
name|routingAppender
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|context
operator|.
name|updateLoggers
argument_list|()
expr_stmt|;
name|routingAppender
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

