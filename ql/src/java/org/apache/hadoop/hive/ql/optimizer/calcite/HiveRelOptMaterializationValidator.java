begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableFunctionScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalCorrelate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalIntersect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalMatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalMinus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|logical
operator|.
name|LogicalValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveAggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveExcept
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveIntersect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveSemiJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveSortLimit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveTableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Checks the query plan for conditions that would make the plan unsuitable for  * materialized views or query caching:  * - References to temporary or external tables  * - References to non-determinisitc functions.  */
end_comment

begin_class
specifier|public
class|class
name|HiveRelOptMaterializationValidator
extends|extends
name|HiveRelShuttleImpl
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveRelOptMaterializationValidator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|String
name|resultCacheInvalidReason
decl_stmt|;
specifier|protected
name|String
name|automaticRewritingInvalidReason
decl_stmt|;
specifier|public
name|void
name|validate
parameter_list|(
name|RelNode
name|relNode
parameter_list|)
block|{
try|try
block|{
name|relNode
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Util
operator|.
name|FoundOne
name|e
parameter_list|)
block|{
comment|// Can ignore - the check failed.
block|}
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|TableScan
name|scan
parameter_list|)
block|{
if|if
condition|(
name|scan
operator|instanceof
name|HiveTableScan
condition|)
block|{
name|HiveTableScan
name|hiveScan
init|=
operator|(
name|HiveTableScan
operator|)
name|scan
decl_stmt|;
name|RelOptHiveTable
name|relOptHiveTable
init|=
operator|(
name|RelOptHiveTable
operator|)
name|hiveScan
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|Table
name|tab
init|=
name|relOptHiveTable
operator|.
name|getHiveTableMD
argument_list|()
decl_stmt|;
if|if
condition|(
name|tab
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|fail
argument_list|(
name|tab
operator|.
name|getTableName
argument_list|()
operator|+
literal|" is a temporary table"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tab
operator|.
name|getTableType
argument_list|()
operator|==
name|TableType
operator|.
name|EXTERNAL_TABLE
condition|)
block|{
name|fail
argument_list|(
name|tab
operator|.
name|getFullyQualifiedName
argument_list|()
operator|+
literal|" is an external table"
argument_list|)
expr_stmt|;
block|}
return|return
name|scan
return|;
block|}
comment|// TableScan of a non-Hive table - don't support for materializations.
name|fail
argument_list|(
name|scan
operator|.
name|getTable
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|" is a table scan of a non-Hive table."
argument_list|)
expr_stmt|;
return|return
name|scan
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|HiveProject
name|project
parameter_list|)
block|{
for|for
control|(
name|RexNode
name|expr
range|:
name|project
operator|.
name|getProjects
argument_list|()
control|)
block|{
name|checkExpr
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|visit
argument_list|(
name|project
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|HiveFilter
name|filter
parameter_list|)
block|{
name|checkExpr
argument_list|(
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|visit
argument_list|(
name|filter
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
if|if
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
operator|!=
name|JoinRelType
operator|.
name|INNER
condition|)
block|{
name|setAutomaticRewritingInvalidReason
argument_list|(
name|join
operator|.
name|getJoinType
argument_list|()
operator|+
literal|" join type is not supported by rewriting algorithm."
argument_list|)
expr_stmt|;
block|}
name|checkExpr
argument_list|(
name|join
operator|.
name|getCondition
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|visit
argument_list|(
name|join
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|HiveAggregate
name|aggregate
parameter_list|)
block|{
comment|// Is there anything to check here?
return|return
name|super
operator|.
name|visit
argument_list|(
name|aggregate
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|RelNode
name|node
parameter_list|)
block|{
name|setAutomaticRewritingInvalidReason
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// There are several Hive RelNode types which do not have their own visit() method
comment|// defined in the HiveRelShuttle interface, which need to be handled appropriately here.
comment|// Per jcamachorodriguez we should not encounter HiveMultiJoin/HiveSortExchange
comment|// during these checks, so no need to add those here.
if|if
condition|(
name|node
operator|instanceof
name|HiveUnion
condition|)
block|{
return|return
name|visit
argument_list|(
operator|(
name|HiveUnion
operator|)
name|node
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|HiveSortLimit
condition|)
block|{
return|return
name|visit
argument_list|(
operator|(
name|HiveSortLimit
operator|)
name|node
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|HiveSemiJoin
condition|)
block|{
return|return
name|visit
argument_list|(
operator|(
name|HiveSemiJoin
operator|)
name|node
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|HiveExcept
condition|)
block|{
return|return
name|visit
argument_list|(
operator|(
name|HiveExcept
operator|)
name|node
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|HiveIntersect
condition|)
block|{
return|return
name|visit
argument_list|(
operator|(
name|HiveIntersect
operator|)
name|node
argument_list|)
return|;
block|}
comment|// Fall-back for an unexpected RelNode type
return|return
name|fail
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|TableFunctionScan
name|scan
parameter_list|)
block|{
name|setAutomaticRewritingInvalidReason
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|checkExpr
argument_list|(
name|scan
operator|.
name|getCall
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|visit
argument_list|(
name|scan
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|LogicalValues
name|values
parameter_list|)
block|{
comment|// Not expected to be encountered for Hive - fail
return|return
name|fail
argument_list|(
name|values
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|LogicalFilter
name|filter
parameter_list|)
block|{
comment|// Not expected to be encountered for Hive - fail
return|return
name|fail
argument_list|(
name|filter
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|LogicalProject
name|project
parameter_list|)
block|{
comment|// Not expected to be encountered for Hive - fail
return|return
name|fail
argument_list|(
name|project
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|LogicalJoin
name|join
parameter_list|)
block|{
comment|// Not expected to be encountered for Hive - fail
return|return
name|fail
argument_list|(
name|join
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|LogicalCorrelate
name|correlate
parameter_list|)
block|{
comment|// Not expected to be encountered for Hive - fail
return|return
name|fail
argument_list|(
name|correlate
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|LogicalUnion
name|union
parameter_list|)
block|{
comment|// Not expected to be encountered for Hive - fail
return|return
name|fail
argument_list|(
name|union
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|LogicalIntersect
name|intersect
parameter_list|)
block|{
comment|// Not expected to be encountered for Hive - fail
return|return
name|fail
argument_list|(
name|intersect
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|LogicalMinus
name|minus
parameter_list|)
block|{
comment|// Not expected to be encountered for Hive - fail
return|return
name|fail
argument_list|(
name|minus
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|LogicalAggregate
name|aggregate
parameter_list|)
block|{
comment|// Not expected to be encountered for Hive - fail
return|return
name|fail
argument_list|(
name|aggregate
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|LogicalMatch
name|match
parameter_list|)
block|{
comment|// Not expected to be encountered for Hive - fail
return|return
name|fail
argument_list|(
name|match
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|LogicalSort
name|sort
parameter_list|)
block|{
comment|// Not expected to be encountered for Hive - fail
return|return
name|fail
argument_list|(
name|sort
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|visit
parameter_list|(
name|LogicalExchange
name|exchange
parameter_list|)
block|{
comment|// Not expected to be encountered for Hive - fail
return|return
name|fail
argument_list|(
name|exchange
argument_list|)
return|;
block|}
comment|// Note: Not currently part of the HiveRelNode interface
specifier|private
name|RelNode
name|visit
parameter_list|(
name|HiveUnion
name|union
parameter_list|)
block|{
return|return
name|visitChildren
argument_list|(
name|union
argument_list|)
return|;
block|}
comment|// Note: Not currently part of the HiveRelNode interface
specifier|private
name|RelNode
name|visit
parameter_list|(
name|HiveSortLimit
name|sort
parameter_list|)
block|{
name|checkExpr
argument_list|(
name|sort
operator|.
name|getFetchExpr
argument_list|()
argument_list|)
expr_stmt|;
name|checkExpr
argument_list|(
name|sort
operator|.
name|getOffsetExpr
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|visitChildren
argument_list|(
name|sort
argument_list|)
return|;
block|}
comment|// Note: Not currently part of the HiveRelNode interface
specifier|private
name|RelNode
name|visit
parameter_list|(
name|HiveSemiJoin
name|semiJoin
parameter_list|)
block|{
name|checkExpr
argument_list|(
name|semiJoin
operator|.
name|getCondition
argument_list|()
argument_list|)
expr_stmt|;
name|checkExpr
argument_list|(
name|semiJoin
operator|.
name|getJoinFilter
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|visitChildren
argument_list|(
name|semiJoin
argument_list|)
return|;
block|}
comment|// Note: Not currently part of the HiveRelNode interface
specifier|private
name|RelNode
name|visit
parameter_list|(
name|HiveExcept
name|except
parameter_list|)
block|{
return|return
name|visitChildren
argument_list|(
name|except
argument_list|)
return|;
block|}
comment|// Note: Not currently part of the HiveRelNode interface
specifier|private
name|RelNode
name|visit
parameter_list|(
name|HiveIntersect
name|intersect
parameter_list|)
block|{
return|return
name|visitChildren
argument_list|(
name|intersect
argument_list|)
return|;
block|}
specifier|private
name|void
name|fail
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
name|setResultCacheInvalidReason
argument_list|(
name|reason
argument_list|)
expr_stmt|;
name|setAutomaticRewritingInvalidReason
argument_list|(
name|reason
argument_list|)
expr_stmt|;
throw|throw
name|Util
operator|.
name|FoundOne
operator|.
name|NULL
throw|;
block|}
specifier|private
name|RelNode
name|fail
parameter_list|(
name|RelNode
name|node
parameter_list|)
block|{
name|setResultCacheInvalidReason
argument_list|(
literal|"Unsupported RelNode type "
operator|+
name|node
operator|.
name|getRelTypeName
argument_list|()
operator|+
literal|" encountered in the query plan"
argument_list|)
expr_stmt|;
name|setAutomaticRewritingInvalidReason
argument_list|(
name|node
argument_list|)
expr_stmt|;
throw|throw
name|Util
operator|.
name|FoundOne
operator|.
name|NULL
throw|;
block|}
specifier|private
name|void
name|checkExpr
parameter_list|(
name|RexNode
name|expr
parameter_list|)
block|{
name|RexCall
name|invalidCall
init|=
name|HiveCalciteUtil
operator|.
name|checkMaterializable
argument_list|(
name|expr
argument_list|)
decl_stmt|;
if|if
condition|(
name|invalidCall
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
name|invalidCall
operator|.
name|getOperator
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" is not a deterministic function"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getResultCacheInvalidReason
parameter_list|()
block|{
return|return
name|resultCacheInvalidReason
return|;
block|}
specifier|public
name|void
name|setResultCacheInvalidReason
parameter_list|(
name|String
name|resultCacheInvalidReason
parameter_list|)
block|{
name|this
operator|.
name|resultCacheInvalidReason
operator|=
name|resultCacheInvalidReason
expr_stmt|;
block|}
specifier|public
name|boolean
name|isValidForQueryCaching
parameter_list|()
block|{
return|return
name|resultCacheInvalidReason
operator|==
literal|null
return|;
block|}
specifier|public
name|String
name|getAutomaticRewritingInvalidReason
parameter_list|()
block|{
return|return
name|automaticRewritingInvalidReason
return|;
block|}
specifier|public
name|void
name|setAutomaticRewritingInvalidReason
parameter_list|(
name|String
name|automaticRewritingInvalidReason
parameter_list|)
block|{
if|if
condition|(
name|isValidForAutomaticRewriting
argument_list|()
condition|)
block|{
name|this
operator|.
name|automaticRewritingInvalidReason
operator|=
name|automaticRewritingInvalidReason
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setAutomaticRewritingInvalidReason
parameter_list|(
name|RelNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|isValidForAutomaticRewriting
argument_list|()
condition|)
block|{
name|this
operator|.
name|automaticRewritingInvalidReason
operator|=
literal|"Unsupported RelNode type "
operator|+
name|node
operator|.
name|getRelTypeName
argument_list|()
operator|+
literal|" encountered in the query plan"
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isValidForAutomaticRewriting
parameter_list|()
block|{
return|return
name|automaticRewritingInvalidReason
operator|==
literal|null
return|;
block|}
block|}
end_class

end_unit

