begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLRecoverableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsAggregator
import|;
end_import

begin_class
specifier|public
class|class
name|JDBCStatsAggregator
implements|implements
name|StatsAggregator
block|{
specifier|private
name|Connection
name|conn
decl_stmt|;
specifier|private
name|String
name|connectionString
decl_stmt|;
specifier|private
name|Configuration
name|hiveconf
decl_stmt|;
specifier|private
name|Task
argument_list|<
name|?
argument_list|>
name|sourceTask
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PreparedStatement
argument_list|>
name|columnMapping
decl_stmt|;
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|int
name|timeout
init|=
literal|30
decl_stmt|;
specifier|private
specifier|final
name|String
name|comment
init|=
literal|"Hive stats aggregation: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
name|int
name|maxRetries
decl_stmt|;
specifier|private
name|long
name|waitWindow
decl_stmt|;
specifier|private
specifier|final
name|Random
name|r
decl_stmt|;
specifier|public
name|JDBCStatsAggregator
parameter_list|()
block|{
name|columnMapping
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PreparedStatement
argument_list|>
argument_list|()
expr_stmt|;
name|r
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|connect
parameter_list|(
name|Configuration
name|hiveconf
parameter_list|,
name|Task
name|sourceTask
parameter_list|)
block|{
name|this
operator|.
name|hiveconf
operator|=
name|hiveconf
expr_stmt|;
name|timeout
operator|=
operator|(
name|int
operator|)
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|hiveconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_JDBC_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|connectionString
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hiveconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSDBCONNECTIONSTRING
argument_list|)
expr_stmt|;
name|String
name|driver
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hiveconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSJDBCDRIVER
argument_list|)
decl_stmt|;
name|maxRetries
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hiveconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_RETRIES_MAX
argument_list|)
expr_stmt|;
name|waitWindow
operator|=
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|hiveconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_RETRIES_WAIT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|sourceTask
operator|=
name|sourceTask
expr_stmt|;
try|try
block|{
name|JavaUtils
operator|.
name|loadClass
argument_list|(
name|driver
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during instantiating JDBC driver "
operator|+
name|driver
operator|+
literal|". "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// stats is non-blocking -- throw an exception when timeout
name|DriverManager
operator|.
name|setLoginTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
comment|// function pointer for executeWithRetry to setQueryTimeout
name|Utilities
operator|.
name|SQLCommand
argument_list|<
name|Void
argument_list|>
name|setQueryTimeout
init|=
operator|new
name|Utilities
operator|.
name|SQLCommand
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|(
name|PreparedStatement
name|stmt
parameter_list|)
throws|throws
name|SQLException
block|{
name|Utilities
operator|.
name|setQueryTimeout
argument_list|(
name|stmt
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// retry connection and statement preparations
for|for
control|(
name|int
name|failures
init|=
literal|0
init|;
condition|;
name|failures
operator|++
control|)
block|{
try|try
block|{
name|conn
operator|=
name|Utilities
operator|.
name|connectWithRetry
argument_list|(
name|connectionString
argument_list|,
name|waitWindow
argument_list|,
name|maxRetries
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|statType
range|:
name|JDBCStatsUtils
operator|.
name|getSupportedStatistics
argument_list|()
control|)
block|{
comment|// prepare statements
name|PreparedStatement
name|selStmt
init|=
name|Utilities
operator|.
name|prepareWithRetry
argument_list|(
name|conn
argument_list|,
name|JDBCStatsUtils
operator|.
name|getSelectAggr
argument_list|(
name|statType
argument_list|,
name|comment
argument_list|)
argument_list|,
name|waitWindow
argument_list|,
name|maxRetries
argument_list|)
decl_stmt|;
name|columnMapping
operator|.
name|put
argument_list|(
name|statType
argument_list|,
name|selStmt
argument_list|)
expr_stmt|;
comment|// set query timeout
name|Utilities
operator|.
name|executeWithRetry
argument_list|(
name|setQueryTimeout
argument_list|,
name|selStmt
argument_list|,
name|waitWindow
argument_list|,
name|failures
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SQLRecoverableException
name|e
parameter_list|)
block|{
if|if
condition|(
name|failures
operator|>
name|maxRetries
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during JDBC connection and preparing statement: "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|long
name|waitTime
init|=
name|Utilities
operator|.
name|getRandomWaitTime
argument_list|(
name|waitWindow
argument_list|,
name|failures
argument_list|,
name|r
argument_list|)
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|waitTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{         }
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// for SQLTransientException (maxRetries already achieved at Utilities retry functions
comment|// or SQLNonTransientException, declare a real failure
return|return
literal|false
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|aggregateStats
parameter_list|(
name|String
name|fileID
parameter_list|,
name|String
name|statType
parameter_list|)
block|{
if|if
condition|(
operator|!
name|JDBCStatsUtils
operator|.
name|isValidStatistic
argument_list|(
name|statType
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid statistic: "
operator|+
name|statType
operator|+
literal|", supported stats: "
operator|+
name|JDBCStatsUtils
operator|.
name|getSupportedStatistics
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Utilities
operator|.
name|SQLCommand
argument_list|<
name|ResultSet
argument_list|>
name|execQuery
init|=
operator|new
name|Utilities
operator|.
name|SQLCommand
argument_list|<
name|ResultSet
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ResultSet
name|run
parameter_list|(
name|PreparedStatement
name|stmt
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|stmt
operator|.
name|executeQuery
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|JDBCStatsUtils
operator|.
name|validateRowId
argument_list|(
name|fileID
argument_list|)
expr_stmt|;
name|String
name|keyPrefix
init|=
name|Utilities
operator|.
name|escapeSqlLike
argument_list|(
name|fileID
argument_list|)
operator|+
literal|"%"
decl_stmt|;
for|for
control|(
name|int
name|failures
init|=
literal|0
init|;
condition|;
name|failures
operator|++
control|)
block|{
try|try
block|{
name|long
name|retval
init|=
literal|0
decl_stmt|;
name|PreparedStatement
name|selStmt
init|=
name|columnMapping
operator|.
name|get
argument_list|(
name|statType
argument_list|)
decl_stmt|;
name|selStmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|keyPrefix
argument_list|)
expr_stmt|;
name|selStmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|Character
operator|.
name|toString
argument_list|(
name|Utilities
operator|.
name|sqlEscapeChar
argument_list|)
argument_list|)
expr_stmt|;
name|ResultSet
name|result
init|=
name|Utilities
operator|.
name|executeWithRetry
argument_list|(
name|execQuery
argument_list|,
name|selStmt
argument_list|,
name|waitWindow
argument_list|,
name|maxRetries
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|next
argument_list|()
condition|)
block|{
name|retval
operator|=
name|result
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Nothing published. Nothing aggregated."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|Long
operator|.
name|toString
argument_list|(
name|retval
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLRecoverableException
name|e
parameter_list|)
block|{
comment|// need to start from scratch (connection)
if|if
condition|(
name|failures
operator|>=
name|maxRetries
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// close the current connection
name|closeConnection
argument_list|()
expr_stmt|;
name|long
name|waitTime
init|=
name|Utilities
operator|.
name|getRandomWaitTime
argument_list|(
name|waitWindow
argument_list|,
name|failures
argument_list|,
name|r
argument_list|)
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|waitTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|iex
parameter_list|)
block|{         }
comment|// getting a new connection
if|if
condition|(
operator|!
name|connect
argument_list|(
name|hiveconf
argument_list|,
name|sourceTask
argument_list|)
condition|)
block|{
comment|// if cannot reconnect, just fail because connect() already handles retries.
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during publishing aggregation. "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// for SQLTransientException (already handled by Utilities.*WithRetries() functions
comment|// and SQLNonTransientException, just declare failure.
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during publishing aggregation. "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|closeConnection
parameter_list|()
block|{
if|if
condition|(
name|conn
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// In case of derby, explicitly close the database connection
if|if
condition|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hiveconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSDBCLASS
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"jdbc:derby"
argument_list|)
condition|)
block|{
try|try
block|{
comment|// The following closes the derby connection. It throws an exception that has to be caught
comment|// and ignored.
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|connectionString
operator|+
literal|";shutdown=true"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Do nothing because we know that an exception is thrown anyway.
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during JDBC termination. "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|cleanUp
parameter_list|(
name|String
name|rowID
parameter_list|)
block|{
name|Utilities
operator|.
name|SQLCommand
argument_list|<
name|Void
argument_list|>
name|execUpdate
init|=
operator|new
name|Utilities
operator|.
name|SQLCommand
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|(
name|PreparedStatement
name|stmt
parameter_list|)
throws|throws
name|SQLException
block|{
name|stmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|JDBCStatsUtils
operator|.
name|validateRowId
argument_list|(
name|rowID
argument_list|)
expr_stmt|;
name|String
name|keyPrefix
init|=
name|Utilities
operator|.
name|escapeSqlLike
argument_list|(
name|rowID
argument_list|)
operator|+
literal|"%"
decl_stmt|;
name|PreparedStatement
name|delStmt
init|=
name|Utilities
operator|.
name|prepareWithRetry
argument_list|(
name|conn
argument_list|,
name|JDBCStatsUtils
operator|.
name|getDeleteAggr
argument_list|(
name|rowID
argument_list|,
name|comment
argument_list|)
argument_list|,
name|waitWindow
argument_list|,
name|maxRetries
argument_list|)
decl_stmt|;
name|delStmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|keyPrefix
argument_list|)
expr_stmt|;
name|delStmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|Character
operator|.
name|toString
argument_list|(
name|Utilities
operator|.
name|sqlEscapeChar
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|failures
init|=
literal|0
init|;
condition|;
name|failures
operator|++
control|)
block|{
try|try
block|{
name|Utilities
operator|.
name|executeWithRetry
argument_list|(
name|execUpdate
argument_list|,
name|delStmt
argument_list|,
name|waitWindow
argument_list|,
name|maxRetries
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SQLRecoverableException
name|e
parameter_list|)
block|{
comment|// need to start from scratch (connection)
if|if
condition|(
name|failures
operator|>=
name|maxRetries
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during clean-up after "
operator|+
name|maxRetries
operator|+
literal|" retries. "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// close the current connection
name|closeConnection
argument_list|()
expr_stmt|;
name|long
name|waitTime
init|=
name|Utilities
operator|.
name|getRandomWaitTime
argument_list|(
name|waitWindow
argument_list|,
name|failures
argument_list|,
name|r
argument_list|)
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|waitTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|iex
parameter_list|)
block|{           }
comment|// getting a new connection
if|if
condition|(
operator|!
name|connect
argument_list|(
name|hiveconf
argument_list|,
name|sourceTask
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during clean-up. "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// for SQLTransientException (already handled by Utilities.*WithRetries() functions
comment|// and SQLNonTransientException, just declare failure.
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during clean-up. "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during publishing aggregation. "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

