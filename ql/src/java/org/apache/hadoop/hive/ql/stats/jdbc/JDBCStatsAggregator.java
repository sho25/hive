begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsSetupConst
import|;
end_import

begin_class
specifier|public
class|class
name|JDBCStatsAggregator
implements|implements
name|StatsAggregator
block|{
specifier|private
name|Connection
name|conn
decl_stmt|;
specifier|private
name|String
name|connectionString
decl_stmt|;
specifier|private
name|Configuration
name|hiveconf
decl_stmt|;
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|int
name|timeout
init|=
literal|30
decl_stmt|;
specifier|public
name|boolean
name|connect
parameter_list|(
name|Configuration
name|hiveconf
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|hiveconf
operator|=
name|hiveconf
expr_stmt|;
name|timeout
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hiveconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_JDBC_TIMEOUT
argument_list|)
expr_stmt|;
name|connectionString
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hiveconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSDBCONNECTIONSTRING
argument_list|)
expr_stmt|;
name|String
name|driver
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hiveconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSJDBCDRIVER
argument_list|)
decl_stmt|;
name|Class
operator|.
name|forName
argument_list|(
name|driver
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
comment|// stats is non-blocking -- throw an exception when timeout
name|DriverManager
operator|.
name|setLoginTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|connectionString
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during JDBC connection. "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|aggregateStats
parameter_list|(
name|String
name|fileID
parameter_list|,
name|String
name|statType
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stats Aggregator for key "
operator|+
name|fileID
argument_list|)
expr_stmt|;
if|if
condition|(
name|statType
operator|!=
name|StatsSetupConst
operator|.
name|ROW_COUNT
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Warning. Invalid statistic. Currently "
operator|+
literal|"row count is the only supported statistic"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
block|{
name|long
name|retval
init|=
literal|0
decl_stmt|;
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|setQueryTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|String
name|select
init|=
literal|"SELECT SUM"
operator|+
literal|"("
operator|+
name|JDBCStatsSetupConstants
operator|.
name|PART_STAT_ROW_COUNT_COLUMN_NAME
operator|+
literal|")"
operator|+
literal|" FROM "
operator|+
name|JDBCStatsSetupConstants
operator|.
name|PART_STAT_TABLE_NAME
operator|+
literal|" WHERE "
operator|+
name|JDBCStatsSetupConstants
operator|.
name|PART_STAT_ID_COLUMN_NAME
operator|+
literal|" LIKE '"
operator|+
name|fileID
operator|+
literal|"%'"
decl_stmt|;
name|ResultSet
name|result
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|select
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|next
argument_list|()
condition|)
block|{
name|retval
operator|=
name|result
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Warning. Nothing published. Nothing aggregated."
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
name|stmt
operator|.
name|clearBatch
argument_list|()
expr_stmt|;
comment|/* Automatic Cleaning:           IMPORTANT: Since we publish and aggregate only 1 value (1 column) which is the row count, it           is valid to delete the row after aggregation (automatic cleaning) because we know that there is no           other values to aggregate.           If ;in the future; other values are aggregated and published, then we cannot do cleaning except           when we are sure that all values are aggregated, or we can separate the implementation of cleaning           through a separate method which the developer has to call it manually in the code.        */
name|String
name|delete
init|=
literal|"DELETE FROM "
operator|+
name|JDBCStatsSetupConstants
operator|.
name|PART_STAT_TABLE_NAME
operator|+
literal|" WHERE "
operator|+
name|JDBCStatsSetupConstants
operator|.
name|PART_STAT_ID_COLUMN_NAME
operator|+
literal|" LIKE '"
operator|+
name|fileID
operator|+
literal|"%'"
decl_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stats aggregator got "
operator|+
name|retval
argument_list|)
expr_stmt|;
return|return
name|Long
operator|.
name|toString
argument_list|(
name|retval
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during publishing aggregation. "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|boolean
name|closeConnection
parameter_list|()
block|{
if|if
condition|(
name|conn
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// In case of derby, explicitly close the database connection
if|if
condition|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hiveconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSDBCLASS
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"jdbc:derby"
argument_list|)
condition|)
block|{
try|try
block|{
comment|// The following closes the derby connection. It throws an exception that has to be caught and ignored.
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|connectionString
operator|+
literal|";shutdown=true"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Do nothing because we know that an exception is thrown anyway.
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during JDBC termination. "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|cleanUp
parameter_list|(
name|String
name|rowID
parameter_list|)
block|{
try|try
block|{
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|String
name|delete
init|=
literal|"DELETE FROM "
operator|+
name|JDBCStatsSetupConstants
operator|.
name|PART_STAT_TABLE_NAME
operator|+
literal|" WHERE "
operator|+
name|JDBCStatsSetupConstants
operator|.
name|PART_STAT_ID_COLUMN_NAME
operator|+
literal|" LIKE '"
operator|+
name|rowID
operator|+
literal|"%'"
decl_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|closeConnection
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during publishing aggregation. "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

