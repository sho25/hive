begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|tree
operator|.
name|CommonTree
import|;
end_import

begin_comment
comment|/**  * Implementation of a parse tree processor. This processor does a depth first walk  * of the parse tree and calls the associated event processors  */
end_comment

begin_class
specifier|public
class|class
name|DefaultASTProcessor
implements|implements
name|ASTProcessor
block|{
comment|/** 	 * The dispatcher used to dispatch ParseTreeEvents to the ParseTreeEventProcessors 	 */
specifier|private
name|ASTEventDispatcher
name|dispatcher
decl_stmt|;
comment|/** 	 * Processes the parse tree 	 *  	 * @see org.apache.hadoop.hive.ql.parse.ASTProcessor#process(org.antlr.runtime.tree.CommonTree) 	 */
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|CommonTree
name|ast
parameter_list|)
block|{
comment|// Base case
if|if
condition|(
name|ast
operator|.
name|getToken
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
switch|switch
condition|(
name|ast
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|TOK_SELECTDI
case|:
case|case
name|HiveParser
operator|.
name|TOK_SELECT
case|:
name|dispatcher
operator|.
name|dispatch
argument_list|(
name|ASTEvent
operator|.
name|SELECT_CLAUSE
argument_list|,
name|ast
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_WHERE
case|:
name|dispatcher
operator|.
name|dispatch
argument_list|(
name|ASTEvent
operator|.
name|WHERE_CLAUSE
argument_list|,
name|ast
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_DESTINATION
case|:
name|dispatcher
operator|.
name|dispatch
argument_list|(
name|ASTEvent
operator|.
name|DESTINATION
argument_list|,
name|ast
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_FROM
case|:
comment|// Check if this is a subquery
name|CommonTree
name|frm
init|=
operator|(
name|CommonTree
operator|)
name|ast
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|frm
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TABREF
condition|)
block|{
name|dispatcher
operator|.
name|dispatch
argument_list|(
name|ASTEvent
operator|.
name|SRC_TABLE
argument_list|,
name|ast
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|frm
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_SUBQUERY
condition|)
block|{
name|dispatcher
operator|.
name|dispatch
argument_list|(
name|ASTEvent
operator|.
name|SUBQUERY
argument_list|,
name|ast
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ParseUtils
operator|.
name|isJoinToken
argument_list|(
name|frm
argument_list|)
condition|)
block|{
name|dispatcher
operator|.
name|dispatch
argument_list|(
name|ASTEvent
operator|.
name|JOIN_CLAUSE
argument_list|,
name|ast
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|HiveParser
operator|.
name|TOK_CLUSTERBY
case|:
name|dispatcher
operator|.
name|dispatch
argument_list|(
name|ASTEvent
operator|.
name|CLUSTERBY_CLAUSE
argument_list|,
name|ast
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_GROUPBY
case|:
name|dispatcher
operator|.
name|dispatch
argument_list|(
name|ASTEvent
operator|.
name|GROUPBY_CLAUSE
argument_list|,
name|ast
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_LIMIT
case|:
name|dispatcher
operator|.
name|dispatch
argument_list|(
name|ASTEvent
operator|.
name|LIMIT_CLAUSE
argument_list|,
name|ast
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
comment|// Iterate over the rest of the children
name|int
name|child_count
init|=
name|ast
operator|.
name|getChildCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|child_pos
init|=
literal|0
init|;
name|child_pos
operator|<
name|child_count
condition|;
operator|++
name|child_pos
control|)
block|{
comment|// Recurse
name|process
argument_list|(
operator|(
name|CommonTree
operator|)
name|ast
operator|.
name|getChild
argument_list|(
name|child_pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Sets the dispatcher for the parse tree processor 	 *  	 * @see org.apache.hadoop.hive.ql.parse.ASTProcessor#register(org.apache.hadoop.hive.ql.parse.ASTEvent, org.apache.hadoop.hive.ql.parse.ParseTreeEventProcessor) 	 */
annotation|@
name|Override
specifier|public
name|void
name|setDispatcher
parameter_list|(
name|ASTEventDispatcher
name|dispatcher
parameter_list|)
block|{
name|this
operator|.
name|dispatcher
operator|=
name|dispatcher
expr_stmt|;
block|}
block|}
end_class

end_unit

