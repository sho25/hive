begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Implements a memory manager that keeps a global context of how many ORC  * writers there are and manages the memory between them. For use cases with  * dynamic partitions, it is easy to end up with many writers in the same task.  * By managing the size of each allocation, we try to cut down the size of each  * allocation and keep the task from running out of memory.  */
end_comment

begin_class
class|class
name|MemoryManager
block|{
comment|/**    * How much does the pool need to change between notifications?    */
specifier|private
specifier|static
specifier|final
name|double
name|NOTIFICATION_FACTOR
init|=
literal|1.1
decl_stmt|;
specifier|private
specifier|final
name|long
name|totalMemoryPool
decl_stmt|;
specifier|private
name|long
name|notificationTrigger
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|WriterInfo
argument_list|>
name|writerList
init|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|WriterInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|long
name|totalAllocation
init|=
literal|0
decl_stmt|;
specifier|private
name|double
name|currentScale
init|=
literal|1
decl_stmt|;
specifier|private
name|double
name|lastNotificationScale
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
class|class
name|WriterInfo
block|{
name|long
name|allocation
decl_stmt|;
name|Callback
name|callback
decl_stmt|;
name|WriterInfo
parameter_list|(
name|long
name|allocation
parameter_list|,
name|Callback
name|callback
parameter_list|)
block|{
name|this
operator|.
name|allocation
operator|=
name|allocation
expr_stmt|;
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
block|}
block|}
specifier|public
interface|interface
name|Callback
block|{
name|void
name|checkMemory
parameter_list|(
name|double
name|newScale
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Create the memory manager.    * @param conf use the configuration to find the maximum size of the memory    *             pool.    */
name|MemoryManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|HiveConf
operator|.
name|ConfVars
name|poolVar
init|=
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ORC_FILE_MEMORY_POOL
decl_stmt|;
name|double
name|maxLoad
init|=
name|conf
operator|.
name|getFloat
argument_list|(
name|poolVar
operator|.
name|varname
argument_list|,
name|poolVar
operator|.
name|defaultFloatVal
argument_list|)
decl_stmt|;
name|totalMemoryPool
operator|=
name|Math
operator|.
name|round
argument_list|(
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getMax
argument_list|()
operator|*
name|maxLoad
argument_list|)
expr_stmt|;
name|notificationTrigger
operator|=
name|Math
operator|.
name|round
argument_list|(
name|totalMemoryPool
operator|*
name|NOTIFICATION_FACTOR
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a new writer's memory allocation to the pool    * @param path the file that is being written    * @param requestedAllocation the requested buffer size    */
specifier|synchronized
name|void
name|addWriter
parameter_list|(
name|Path
name|path
parameter_list|,
name|long
name|requestedAllocation
parameter_list|,
name|Callback
name|callback
parameter_list|)
throws|throws
name|IOException
block|{
name|WriterInfo
name|oldVal
init|=
name|writerList
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldVal
operator|==
literal|null
condition|)
block|{
name|oldVal
operator|=
operator|new
name|WriterInfo
argument_list|(
name|requestedAllocation
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|writerList
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|oldVal
argument_list|)
expr_stmt|;
name|totalAllocation
operator|+=
name|requestedAllocation
expr_stmt|;
block|}
else|else
block|{
name|totalAllocation
operator|+=
name|requestedAllocation
operator|-
name|oldVal
operator|.
name|allocation
expr_stmt|;
name|oldVal
operator|.
name|allocation
operator|=
name|requestedAllocation
expr_stmt|;
name|oldVal
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
block|}
name|updateScale
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove the given writer from the pool.    * @param path the file that has been closed    */
specifier|synchronized
name|void
name|removeWriter
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|WriterInfo
name|val
init|=
name|writerList
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|writerList
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|totalAllocation
operator|-=
name|val
operator|.
name|allocation
expr_stmt|;
name|updateScale
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the total pool size that is available for ORC writers.    * @return the number of bytes in the pool    */
name|long
name|getTotalMemoryPool
parameter_list|()
block|{
return|return
name|totalMemoryPool
return|;
block|}
comment|/**    * The scaling factor for each allocation to ensure that the pool isn't    * oversubscribed.    * @return a fraction between 0.0 and 1.0 of the requested size that is    * available for each writer.    */
specifier|synchronized
name|double
name|getAllocationScale
parameter_list|()
block|{
return|return
name|currentScale
return|;
block|}
comment|/**    * Update the currentScale based on the current allocation and pool size.    * This also updates the notificationTrigger.    * @param isAllocate is this an allocation?    */
specifier|private
name|void
name|updateScale
parameter_list|(
name|boolean
name|isAllocate
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|totalAllocation
operator|<=
name|totalMemoryPool
condition|)
block|{
name|currentScale
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|currentScale
operator|=
operator|(
name|double
operator|)
name|totalMemoryPool
operator|/
name|totalAllocation
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isAllocate
condition|)
block|{
comment|// ensure that we notify if we drop 10% from the high water mark
name|notificationTrigger
operator|=
name|Math
operator|.
name|min
argument_list|(
name|notificationTrigger
argument_list|,
name|Math
operator|.
name|round
argument_list|(
name|totalMemoryPool
operator|*
name|NOTIFICATION_FACTOR
operator|/
name|currentScale
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we've allocated a new writer, so check to see if we need to notify
if|if
condition|(
name|totalAllocation
operator|>
name|notificationTrigger
condition|)
block|{
for|for
control|(
name|WriterInfo
name|writer
range|:
name|writerList
operator|.
name|values
argument_list|()
control|)
block|{
name|writer
operator|.
name|callback
operator|.
name|checkMemory
argument_list|(
name|currentScale
argument_list|)
expr_stmt|;
block|}
comment|// set the next notification trigger
name|notificationTrigger
operator|=
name|Math
operator|.
name|round
argument_list|(
name|totalMemoryPool
operator|*
name|NOTIFICATION_FACTOR
operator|/
name|currentScale
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

