begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|CommonJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultGraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|RuleRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|OpParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|QB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|QBExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|RowResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinCondDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SelectDesc
import|;
end_import

begin_comment
comment|/**  * Implementation of correlation optimizer. The optimization is based on  * the paper "YSmart: Yet Another SQL-to-MapReduce Translator"  * (Rubao Lee, Tian Luo, Yin Huai, Fusheng Wang, Yongqiang He, and Xiaodong Zhang)  * (http://www.cse.ohio-state.edu/hpcs/WWW/HTML/publications/papers/TR-11-7.pdf).  * This optimizer first detects three kinds of  * correlations, Input Correlation (IC), Transit Correlation (TC) and Job Flow Correlation (JFC),  * and then merge correlated MapReduce-jobs (MR-jobs) into one MR-job.  * Since opColumnExprMap, opParseCtx, opRowResolver may be changed by  * other optimizers,  * currently, correlation optimizer has two phases. The first phase is the first transformation in  * the Optimizer. In the first phase, original opColumnExprMap, opParseCtx, opRowResolver  * will be recorded. Then, the second phase (the last transformation before SimpleFetchOptimizer)  * will perform correlation detection and query plan tree transformation.  *  * For the definitions of correlations, see the original paper of YSmart.  *  * Rules for merging correlated MR-jobs implemented in this correlation  * optimizer are:  * 1. If an MR-job for a Join operation has the same partitioning keys with its all  * preceding MR-jobs, correlation optimizer merges these MR-jobs into one MR-job.  * 2. If an MR-job for a GroupBy and Aggregation operation has the same partitioning keys  * with its preceding MR-job, correlation optimizer merges these two MR-jobs into one MR-job.  *  * Note: In the current implementation, if correlation optimizer detects MR-jobs of a sub-plan tree  * are correlated, it transforms this sub-plan tree to a single MR-job when the input of this  * sub-plan tree is not a temporary table. Otherwise, the current implementation will ignore this  * sub-plan tree.  *  * There are several future work that will enhance the correlation optimizer.  * Here are four examples:  * 1. Add a new rule that is if two MR-jobs share the same  * partitioning keys and they have common input tables, merge these two MR-jobs into a single  * MR-job.  * 2. The current implementation detects MR-jobs which have the same partitioning keys  * as correlated MR-jobs. However, the condition of same partitioning keys can be relaxed to use  * common partitioning keys.  * 3. The current implementation cannot optimize MR-jobs for the  * aggregation functions with a distinct keyword, which should be supported in the future  * implementation of the correlation optimizer.  * 4. Optimize queries involve self-join.  */
end_comment

begin_class
specifier|public
class|class
name|CorrelationOptimizer
implements|implements
name|Transform
block|{
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CorrelationOptimizer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aliastoTabName
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|aliastoTab
decl_stmt|;
specifier|public
name|CorrelationOptimizer
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|aliastoTabName
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|aliastoTab
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
argument_list|()
expr_stmt|;
name|pGraphContext
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|boolean
name|initializeAliastoTabNameMapping
parameter_list|(
name|QB
name|qb
parameter_list|)
block|{
comment|// If any sub-query's qb is null, CorrelationOptimizer will not optimize this query.
comment|// e.g. auto_join27.q
if|if
condition|(
name|qb
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|ret
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|qb
operator|.
name|getAliases
argument_list|()
control|)
block|{
name|aliastoTabName
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|qb
operator|.
name|getTabNameForAlias
argument_list|(
name|alias
argument_list|)
argument_list|)
expr_stmt|;
name|aliastoTab
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|qb
operator|.
name|getMetaData
argument_list|()
operator|.
name|getSrcForAlias
argument_list|(
name|alias
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|subqalias
range|:
name|qb
operator|.
name|getSubqAliases
argument_list|()
control|)
block|{
name|QBExpr
name|qbexpr
init|=
name|qb
operator|.
name|getSubqForAlias
argument_list|(
name|subqalias
argument_list|)
decl_stmt|;
name|ret
operator|=
name|ret
operator|&&
name|initializeAliastoTabNameMapping
argument_list|(
name|qbexpr
operator|.
name|getQB
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|ParseContext
name|pGraphContext
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|,
name|OpParseContext
argument_list|>
name|opParseCtx
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|,
name|OpParseContext
argument_list|>
name|originalOpParseCtx
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|,
name|OpParseContext
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|,
name|RowResolver
argument_list|>
name|originalOpRowResolver
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|,
name|RowResolver
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|>
name|originalOpColumnExprMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|isPhase1
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|abort
init|=
literal|false
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ReduceSinkOperator
argument_list|,
name|GroupByOperator
argument_list|>
name|groupbyNonMapSide2MapSide
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|GroupByOperator
argument_list|,
name|ReduceSinkOperator
argument_list|>
name|groupbyMapSide2NonMapSide
decl_stmt|;
comment|/**    * Transform the query tree. Firstly, find out correlations between operations.    * Then, group these operators in groups    *    * @param pactx    *          current parse context    * @throws SemanticException    */
specifier|public
name|ParseContext
name|transform
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|isPhase1
condition|)
block|{
name|pGraphContext
operator|=
name|pctx
expr_stmt|;
name|opParseCtx
operator|=
name|pctx
operator|.
name|getOpParseCtx
argument_list|()
expr_stmt|;
name|CorrelationNodePhase1ProcCtx
name|phase1ProcCtx
init|=
operator|new
name|CorrelationNodePhase1ProcCtx
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|getPhase1DefaultProc
argument_list|()
argument_list|,
name|opRules
argument_list|,
name|phase1ProcCtx
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
comment|// Create a list of topOp nodes
name|List
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|addAll
argument_list|(
name|pGraphContext
operator|.
name|getTopOps
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|isPhase1
operator|=
literal|false
expr_stmt|;
name|abort
operator|=
name|phase1ProcCtx
operator|.
name|fileSinkOperatorCount
operator|>
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|/*        * Types of correlations:        * 1) Input Correlation: Multiple nodes have input correlation        * (IC) if their input relation sets are not disjoint;        * 2) Transit Correlation: Multiple nodes have transit correlation        * (TC) if they have not only input correlation, but        * also the same partition key;        * 3) Job Flow Correlation: A node has job flow correlation        * (JFC) with one of its child nodes if it has the same        * partition key as that child node.        */
name|pGraphContext
operator|=
name|pctx
expr_stmt|;
if|if
condition|(
name|abort
condition|)
block|{
comment|//TODO: handle queries with multiple FileSinkOperators;
name|LOG
operator|.
name|info
argument_list|(
literal|"Abort. Reasons are ..."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"-- Currently, a query with multiple FileSinkOperators are not supported."
argument_list|)
expr_stmt|;
return|return
name|pGraphContext
return|;
block|}
name|opParseCtx
operator|=
name|pctx
operator|.
name|getOpParseCtx
argument_list|()
expr_stmt|;
name|groupbyNonMapSide2MapSide
operator|=
name|pctx
operator|.
name|getGroupbyNonMapSide2MapSide
argument_list|()
expr_stmt|;
name|groupbyMapSide2NonMapSide
operator|=
name|pctx
operator|.
name|getGroupbyMapSide2NonMapSide
argument_list|()
expr_stmt|;
name|QB
name|qb
init|=
name|pGraphContext
operator|.
name|getQB
argument_list|()
decl_stmt|;
name|abort
operator|=
operator|!
name|initializeAliastoTabNameMapping
argument_list|(
name|qb
argument_list|)
expr_stmt|;
if|if
condition|(
name|abort
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Abort. Reasons are ..."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"-- This query or its sub-queries has a null qb."
argument_list|)
expr_stmt|;
return|return
name|pGraphContext
return|;
block|}
comment|// 0: Replace all map-side group by pattern (GBY-RS-GBY) to
comment|// non-map-side group by pattern (RS-GBY) if necessary
if|if
condition|(
name|pGraphContext
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPSIDEAGGREGATE
argument_list|)
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|GroupByOperator
argument_list|,
name|ReduceSinkOperator
argument_list|>
name|entry
range|:
name|groupbyMapSide2NonMapSide
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|GroupByOperator
name|mapSidePatternStart
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|GroupByOperator
name|mapSidePatternEnd
init|=
operator|(
name|GroupByOperator
operator|)
name|mapSidePatternStart
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ReduceSinkOperator
name|nonMapSidePatternStart
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|GroupByOperator
name|nonMapSidePatternEnd
init|=
operator|(
name|GroupByOperator
operator|)
name|nonMapSidePatternStart
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|parents
init|=
name|mapSidePatternStart
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|children
init|=
name|mapSidePatternEnd
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
name|nonMapSidePatternStart
operator|.
name|setParentOperators
argument_list|(
name|parents
argument_list|)
expr_stmt|;
name|nonMapSidePatternEnd
operator|.
name|setChildOperators
argument_list|(
name|children
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
range|:
name|parents
control|)
block|{
name|parent
operator|.
name|replaceChild
argument_list|(
name|mapSidePatternStart
argument_list|,
name|nonMapSidePatternStart
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
range|:
name|children
control|)
block|{
name|child
operator|.
name|replaceParent
argument_list|(
name|mapSidePatternEnd
argument_list|,
name|nonMapSidePatternEnd
argument_list|)
expr_stmt|;
block|}
name|addOperatorInfo
argument_list|(
name|nonMapSidePatternStart
argument_list|)
expr_stmt|;
name|addOperatorInfo
argument_list|(
name|nonMapSidePatternEnd
argument_list|)
expr_stmt|;
block|}
block|}
comment|// 1: detect correlations
name|CorrelationNodeProcCtx
name|correlationCtx
init|=
operator|new
name|CorrelationNodeProcCtx
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R1"
argument_list|,
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
operator|new
name|CorrelationNodeProc
argument_list|()
argument_list|)
expr_stmt|;
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|getDefaultProc
argument_list|()
argument_list|,
name|opRules
argument_list|,
name|correlationCtx
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
comment|// Create a list of topOp nodes
name|List
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|addAll
argument_list|(
name|pGraphContext
operator|.
name|getTopOps
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|abort
operator|=
name|correlationCtx
operator|.
name|isAbort
argument_list|()
expr_stmt|;
name|int
name|correlationsAppliedCount
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|abort
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Abort. Reasons are ..."
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|reason
range|:
name|correlationCtx
operator|.
name|getAbortReasons
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"-- "
operator|+
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// 2: transform the query plan tree
name|LOG
operator|.
name|info
argument_list|(
literal|"Begain query plan transformation based on intra-query correlations. "
operator|+
name|correlationCtx
operator|.
name|getCorrelations
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" correlation(s) to be applied"
argument_list|)
expr_stmt|;
for|for
control|(
name|IntraQueryCorrelation
name|correlation
range|:
name|correlationCtx
operator|.
name|getCorrelations
argument_list|()
control|)
block|{
name|boolean
name|ret
init|=
name|CorrelationOptimizerUtils
operator|.
name|applyCorrelation
argument_list|(
name|correlation
argument_list|,
name|pGraphContext
argument_list|,
name|originalOpColumnExprMap
argument_list|,
name|originalOpRowResolver
argument_list|,
name|groupbyNonMapSide2MapSide
argument_list|,
name|originalOpParseCtx
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
condition|)
block|{
name|correlationsAppliedCount
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|// 3: if no correlation applied, replace all non-map-side group by pattern (GBY-RS-GBY) to
comment|// map-side group by pattern (RS-GBY) if necessary
if|if
condition|(
name|correlationsAppliedCount
operator|==
literal|0
operator|&&
name|pGraphContext
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPSIDEAGGREGATE
argument_list|)
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|ReduceSinkOperator
argument_list|,
name|GroupByOperator
argument_list|>
name|entry
range|:
name|groupbyNonMapSide2MapSide
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|GroupByOperator
name|mapSidePatternStart
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|GroupByOperator
name|mapSidePatternEnd
init|=
operator|(
name|GroupByOperator
operator|)
name|mapSidePatternStart
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ReduceSinkOperator
name|nonMapSidePatternStart
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|GroupByOperator
name|nonMapSidePatternEnd
init|=
operator|(
name|GroupByOperator
operator|)
name|nonMapSidePatternStart
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|parents
init|=
name|nonMapSidePatternStart
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|children
init|=
name|nonMapSidePatternEnd
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
name|mapSidePatternStart
operator|.
name|setParentOperators
argument_list|(
name|parents
argument_list|)
expr_stmt|;
name|mapSidePatternEnd
operator|.
name|setChildOperators
argument_list|(
name|children
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
range|:
name|parents
control|)
block|{
name|parent
operator|.
name|replaceChild
argument_list|(
name|nonMapSidePatternStart
argument_list|,
name|mapSidePatternStart
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
range|:
name|children
control|)
block|{
name|child
operator|.
name|replaceParent
argument_list|(
name|nonMapSidePatternEnd
argument_list|,
name|mapSidePatternEnd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Finish query plan transformation based on intra-query correlations. "
operator|+
name|correlationsAppliedCount
operator|+
literal|" correlation(s) actually be applied"
argument_list|)
expr_stmt|;
block|}
return|return
name|pGraphContext
return|;
block|}
specifier|private
name|void
name|addOperatorInfo
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|)
block|{
name|OpParseContext
name|opCtx
init|=
name|opParseCtx
operator|.
name|get
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|getColumnExprMap
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|originalOpColumnExprMap
operator|.
name|containsKey
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|originalOpColumnExprMap
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|op
operator|.
name|getColumnExprMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|opCtx
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|originalOpParseCtx
operator|.
name|containsKey
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|originalOpParseCtx
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|opCtx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|opCtx
operator|.
name|getRowResolver
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|originalOpRowResolver
operator|.
name|containsKey
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|originalOpRowResolver
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|opCtx
operator|.
name|getRowResolver
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|NodeProcessor
name|getPhase1DefaultProc
parameter_list|()
block|{
return|return
operator|new
name|NodeProcessor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
init|=
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
operator|)
name|nd
decl_stmt|;
name|addOperatorInfo
argument_list|(
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|FileSinkOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
condition|)
block|{
operator|(
operator|(
name|CorrelationNodePhase1ProcCtx
operator|)
name|procCtx
operator|)
operator|.
name|fileSinkOperatorCount
operator|++
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
specifier|private
class|class
name|CorrelationNodeProc
implements|implements
name|NodeProcessor
block|{
specifier|public
name|ReduceSinkOperator
name|findNextChildReduceSinkOperator
parameter_list|(
name|ReduceSinkOperator
name|rsop
parameter_list|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
init|=
name|rsop
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|op
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|op
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|FileSinkOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
assert|assert
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
assert|;
name|op
operator|=
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ReduceSinkOperator
operator|)
name|op
return|;
block|}
specifier|private
name|void
name|analyzeReduceSinkOperatorsOfJoinOperator
parameter_list|(
name|JoinCondDesc
index|[]
name|joinConds
parameter_list|,
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|rsOps
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|curentRsOps
parameter_list|,
name|Set
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|correlatedRsOps
parameter_list|)
block|{
if|if
condition|(
name|correlatedRsOps
operator|.
name|contains
argument_list|(
operator|(
name|ReduceSinkOperator
operator|)
name|curentRsOps
argument_list|)
condition|)
block|{
return|return;
block|}
name|correlatedRsOps
operator|.
name|add
argument_list|(
operator|(
name|ReduceSinkOperator
operator|)
name|curentRsOps
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|rsOps
operator|.
name|indexOf
argument_list|(
name|curentRsOps
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|joinConds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|JoinCondDesc
name|joinCond
init|=
name|joinConds
index|[
name|i
index|]
decl_stmt|;
name|int
name|type
init|=
name|joinCond
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|pos
operator|==
name|joinCond
operator|.
name|getLeft
argument_list|()
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|JoinDesc
operator|.
name|INNER_JOIN
operator|||
name|type
operator|==
name|JoinDesc
operator|.
name|LEFT_OUTER_JOIN
condition|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|newCurrentRsOps
init|=
name|rsOps
operator|.
name|get
argument_list|(
name|joinCond
operator|.
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
name|analyzeReduceSinkOperatorsOfJoinOperator
argument_list|(
name|joinConds
argument_list|,
name|rsOps
argument_list|,
name|newCurrentRsOps
argument_list|,
name|correlatedRsOps
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|pos
operator|==
name|joinCond
operator|.
name|getRight
argument_list|()
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|JoinDesc
operator|.
name|INNER_JOIN
operator|||
name|type
operator|==
name|JoinDesc
operator|.
name|RIGHT_OUTER_JOIN
condition|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|newCurrentRsOps
init|=
name|rsOps
operator|.
name|get
argument_list|(
name|joinCond
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
name|analyzeReduceSinkOperatorsOfJoinOperator
argument_list|(
name|joinConds
argument_list|,
name|rsOps
argument_list|,
name|newCurrentRsOps
argument_list|,
name|correlatedRsOps
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|Set
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|findCorrelatedReduceSinkOperators
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|keyColumns
parameter_list|,
name|IntraQueryCorrelation
name|correlation
parameter_list|)
throws|throws
name|SemanticException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"now detecting operator "
operator|+
name|op
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|" "
operator|+
name|op
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|correlatedReduceSinkOps
init|=
operator|new
name|HashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|getParentOperators
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|correlatedReduceSinkOps
return|;
block|}
if|if
condition|(
name|originalOpColumnExprMap
operator|.
name|get
argument_list|(
name|op
argument_list|)
operator|==
literal|null
operator|&&
operator|!
operator|(
name|op
operator|instanceof
name|ReduceSinkOperator
operator|)
condition|)
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
range|:
name|op
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
name|correlatedReduceSinkOps
operator|.
name|addAll
argument_list|(
name|findCorrelatedReduceSinkOperators
argument_list|(
name|parent
argument_list|,
name|keyColumns
argument_list|,
name|correlation
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|originalOpColumnExprMap
operator|.
name|get
argument_list|(
name|op
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|op
operator|instanceof
name|ReduceSinkOperator
operator|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|newKeyColumns
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|keyColumn
range|:
name|keyColumns
control|)
block|{
name|ExprNodeDesc
name|col
init|=
name|originalOpColumnExprMap
operator|.
name|get
argument_list|(
name|op
argument_list|)
operator|.
name|get
argument_list|(
name|keyColumn
argument_list|)
decl_stmt|;
if|if
condition|(
name|col
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|newKeyColumns
operator|.
name|add
argument_list|(
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|col
operator|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|op
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|CommonJoinOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|tableNeedToCheck
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|keyColumn
range|:
name|keyColumns
control|)
block|{
for|for
control|(
name|ColumnInfo
name|cinfo
range|:
name|originalOpParseCtx
operator|.
name|get
argument_list|(
name|op
argument_list|)
operator|.
name|getRowResolver
argument_list|()
operator|.
name|getColumnInfos
argument_list|()
control|)
block|{
if|if
condition|(
name|keyColumn
operator|.
name|equals
argument_list|(
name|cinfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
condition|)
block|{
name|tableNeedToCheck
operator|.
name|add
argument_list|(
name|cinfo
operator|.
name|getTabAlias
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Set
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|correlatedRsOps
init|=
operator|new
name|HashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
range|:
name|op
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
name|originalOpParseCtx
operator|.
name|get
argument_list|(
name|parent
argument_list|)
operator|.
name|getRowResolver
argument_list|()
operator|.
name|getTableNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|tbl
range|:
name|tableNames
control|)
block|{
if|if
condition|(
name|tableNeedToCheck
operator|.
name|contains
argument_list|(
name|tbl
argument_list|)
condition|)
block|{
name|correlatedRsOps
operator|.
name|addAll
argument_list|(
name|findCorrelatedReduceSinkOperators
argument_list|(
name|parent
argument_list|,
name|newKeyColumns
argument_list|,
name|correlation
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Right now, if any ReduceSinkOperator of this JoinOperator is not correlated, we will
comment|// not optimize this query
if|if
condition|(
name|correlatedRsOps
operator|.
name|size
argument_list|()
operator|==
name|op
operator|.
name|getParentOperators
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|correlatedReduceSinkOps
operator|.
name|addAll
argument_list|(
name|correlatedRsOps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|correlatedReduceSinkOps
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
range|:
name|op
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
name|correlatedReduceSinkOps
operator|.
name|addAll
argument_list|(
name|findCorrelatedReduceSinkOperators
argument_list|(
name|parent
argument_list|,
name|newKeyColumns
argument_list|,
name|correlation
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|originalOpColumnExprMap
operator|.
name|get
argument_list|(
name|op
argument_list|)
operator|!=
literal|null
operator|&&
name|op
operator|instanceof
name|ReduceSinkOperator
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|newKeyColumns
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|keyColumn
range|:
name|keyColumns
control|)
block|{
name|ExprNodeDesc
name|col
init|=
name|originalOpColumnExprMap
operator|.
name|get
argument_list|(
name|op
argument_list|)
operator|.
name|get
argument_list|(
name|keyColumn
argument_list|)
decl_stmt|;
if|if
condition|(
name|col
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|newKeyColumns
operator|.
name|add
argument_list|(
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|col
operator|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|ReduceSinkOperator
name|rsop
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|op
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|thisKeyColumns
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|key
range|:
name|rsop
operator|.
name|getConf
argument_list|()
operator|.
name|getKeyCols
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|thisKeyColumns
operator|.
name|add
argument_list|(
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|key
operator|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|isCorrelated
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|intersection
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|newKeyColumns
argument_list|)
decl_stmt|;
name|intersection
operator|.
name|retainAll
argument_list|(
name|thisKeyColumns
argument_list|)
expr_stmt|;
comment|// TODO: should use if intersection is empty to evaluate if two corresponding operators are
comment|// correlated
name|isCorrelated
operator|=
operator|(
name|intersection
operator|.
name|size
argument_list|()
operator|==
name|thisKeyColumns
operator|.
name|size
argument_list|()
operator|&&
operator|!
name|intersection
operator|.
name|isEmpty
argument_list|()
operator|)
expr_stmt|;
name|ReduceSinkOperator
name|nextChildReduceSinkOperator
init|=
name|findNextChildReduceSinkOperator
argument_list|(
name|rsop
argument_list|)
decl_stmt|;
comment|// Since we start the search from those reduceSinkOperator at bottom (near FileSinkOperator),
comment|// we can always find a reduceSinkOperator at a lower level
assert|assert
name|nextChildReduceSinkOperator
operator|!=
literal|null
assert|;
if|if
condition|(
name|isCorrelated
condition|)
block|{
if|if
condition|(
name|nextChildReduceSinkOperator
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|CommonJoinOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|intersection
operator|.
name|size
argument_list|()
operator|!=
name|nextChildReduceSinkOperator
operator|.
name|getConf
argument_list|()
operator|.
name|getKeyCols
argument_list|()
operator|.
name|size
argument_list|()
operator|||
name|intersection
operator|.
name|size
argument_list|()
operator|!=
name|rsop
operator|.
name|getConf
argument_list|()
operator|.
name|getKeyCols
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// Right now, we can only handle identical join keys.
name|isCorrelated
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|isCorrelated
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Operator "
operator|+
name|op
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|" "
operator|+
name|op
operator|.
name|getName
argument_list|()
operator|+
literal|" is correlated"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"--keys of this operator: "
operator|+
name|thisKeyColumns
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"--keys of child operator: "
operator|+
name|keyColumns
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"--keys of child operator mapped to this operator:"
operator|+
name|newKeyColumns
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
call|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
call|)
argument_list|(
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|CommonJoinOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
condition|)
block|{
name|JoinOperator
name|joinOp
init|=
operator|(
name|JoinOperator
operator|)
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|JoinCondDesc
index|[]
name|joinConds
init|=
name|joinOp
operator|.
name|getConf
argument_list|()
operator|.
name|getConds
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|rsOps
init|=
name|joinOp
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|correlatedRsOps
init|=
operator|new
name|HashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|()
decl_stmt|;
name|analyzeReduceSinkOperatorsOfJoinOperator
argument_list|(
name|joinConds
argument_list|,
name|rsOps
argument_list|,
name|op
argument_list|,
name|correlatedRsOps
argument_list|)
expr_stmt|;
name|correlatedReduceSinkOps
operator|.
name|addAll
argument_list|(
name|correlatedRsOps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|correlatedReduceSinkOps
operator|.
name|add
argument_list|(
name|rsop
argument_list|)
expr_stmt|;
block|}
comment|// this if block is useful when we use "isCorrelated = !(intersection.isEmpty());" for
comment|// the evaluation of isCorrelated
if|if
condition|(
name|nextChildReduceSinkOperator
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|GroupByOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
operator|&&
operator|(
name|intersection
operator|.
name|size
argument_list|()
operator|<
name|nextChildReduceSinkOperator
operator|.
name|getConf
argument_list|()
operator|.
name|getKeyCols
argument_list|()
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--found a RS-GBY pattern that needs to be replaced to GBY-RS-GBY patterns. "
operator|+
literal|" The number of common keys is "
operator|+
name|intersection
operator|.
name|size
argument_list|()
operator|+
literal|", and the number of keys of next group by operator"
operator|+
name|nextChildReduceSinkOperator
operator|.
name|getConf
argument_list|()
operator|.
name|getKeyCols
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|correlation
operator|.
name|addToRSGBYToBeReplacedByGBYRSGBY
argument_list|(
name|nextChildReduceSinkOperator
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Operator "
operator|+
name|op
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|" "
operator|+
name|op
operator|.
name|getName
argument_list|()
operator|+
literal|" is not correlated"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"--keys of this operator: "
operator|+
name|thisKeyColumns
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"--keys of child operator: "
operator|+
name|keyColumns
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"--keys of child operator mapped to this operator:"
operator|+
name|newKeyColumns
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|correlatedReduceSinkOps
operator|.
name|clear
argument_list|()
expr_stmt|;
name|correlation
operator|.
name|getRSGBYToBeReplacedByGBYRSGBY
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"ReduceSinkOperator "
operator|+
name|op
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|" does not have ColumnExprMap"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"CorrelationOptimizer cannot optimize this plan. "
operator|+
literal|"ReduceSinkOperator "
operator|+
name|op
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|" does not have ColumnExprMap"
argument_list|)
throw|;
block|}
return|return
name|correlatedReduceSinkOps
return|;
block|}
specifier|private
name|Set
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|exploitJFC
parameter_list|(
name|ReduceSinkOperator
name|op
parameter_list|,
name|CorrelationNodeProcCtx
name|correlationCtx
parameter_list|,
name|IntraQueryCorrelation
name|correlation
parameter_list|)
throws|throws
name|SemanticException
block|{
name|correlationCtx
operator|.
name|addWalked
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|correlation
operator|.
name|addToAllReduceSinkOperators
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|reduceSinkOperators
init|=
operator|new
name|HashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|shouldDetect
init|=
literal|true
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keys
init|=
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getKeyCols
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keyColumns
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|key
range|:
name|keys
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|key
operator|instanceof
name|ExprNodeColumnDesc
operator|)
condition|)
block|{
name|shouldDetect
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|keyColumns
operator|.
name|add
argument_list|(
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|key
operator|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|shouldDetect
condition|)
block|{
name|Set
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|newReduceSinkOperators
init|=
operator|new
name|HashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
range|:
name|op
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Operator "
operator|+
name|op
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|": start detecting correlation from this operator"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"--keys of this operator: "
operator|+
name|keyColumns
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|correlatedReduceSinkOperators
init|=
name|findCorrelatedReduceSinkOperators
argument_list|(
name|parent
argument_list|,
name|keyColumns
argument_list|,
name|correlation
argument_list|)
decl_stmt|;
if|if
condition|(
name|correlatedReduceSinkOperators
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|newReduceSinkOperators
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|ReduceSinkOperator
name|rsop
range|:
name|correlatedReduceSinkOperators
control|)
block|{
comment|// For two ReduceSinkOperators, we say the one closer to FileSinkOperators is up and
comment|// another one is down
if|if
condition|(
operator|!
name|correlation
operator|.
name|getUp2downRSops
argument_list|()
operator|.
name|containsKey
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|correlation
operator|.
name|getUp2downRSops
argument_list|()
operator|.
name|put
argument_list|(
name|op
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|correlation
operator|.
name|getUp2downRSops
argument_list|()
operator|.
name|get
argument_list|(
name|op
argument_list|)
operator|.
name|add
argument_list|(
name|rsop
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|correlation
operator|.
name|getDown2upRSops
argument_list|()
operator|.
name|containsKey
argument_list|(
name|rsop
argument_list|)
condition|)
block|{
name|correlation
operator|.
name|getDown2upRSops
argument_list|()
operator|.
name|put
argument_list|(
name|rsop
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|correlation
operator|.
name|getDown2upRSops
argument_list|()
operator|.
name|get
argument_list|(
name|rsop
argument_list|)
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|exploited
init|=
name|exploitJFC
argument_list|(
name|rsop
argument_list|,
name|correlationCtx
argument_list|,
name|correlation
argument_list|)
decl_stmt|;
if|if
condition|(
name|exploited
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|newReduceSinkOperators
operator|.
name|add
argument_list|(
name|rsop
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newReduceSinkOperators
operator|.
name|addAll
argument_list|(
name|exploited
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|reduceSinkOperators
operator|.
name|addAll
argument_list|(
name|newReduceSinkOperators
argument_list|)
expr_stmt|;
block|}
return|return
name|reduceSinkOperators
return|;
block|}
specifier|private
name|TableScanOperator
name|findTableScanOPerator
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|startPoint
parameter_list|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|thisOp
init|=
name|startPoint
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|thisOp
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|thisOp
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|TableScanOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|TableScanOperator
operator|)
name|thisOp
return|;
block|}
else|else
block|{
if|if
condition|(
name|thisOp
operator|.
name|getParentOperators
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|thisOp
operator|=
name|thisOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|annotateOpPlan
parameter_list|(
name|IntraQueryCorrelation
name|correlation
parameter_list|)
block|{
name|Map
argument_list|<
name|ReduceSinkOperator
argument_list|,
name|Integer
argument_list|>
name|bottomReduceSink2OperationPath
init|=
operator|new
name|HashMap
argument_list|<
name|ReduceSinkOperator
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|indx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ReduceSinkOperator
name|rsop
range|:
name|correlation
operator|.
name|getBottomReduceSinkOperators
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|bottomReduceSink2OperationPath
operator|.
name|containsKey
argument_list|(
name|rsop
argument_list|)
condition|)
block|{
name|bottomReduceSink2OperationPath
operator|.
name|put
argument_list|(
name|rsop
argument_list|,
name|indx
argument_list|)
expr_stmt|;
for|for
control|(
name|ReduceSinkOperator
name|peerRSop
range|:
name|CorrelationOptimizerUtils
operator|.
name|findPeerReduceSinkOperators
argument_list|(
name|rsop
argument_list|)
control|)
block|{
if|if
condition|(
name|correlation
operator|.
name|getBottomReduceSinkOperators
argument_list|()
operator|.
name|contains
argument_list|(
name|peerRSop
argument_list|)
condition|)
block|{
name|bottomReduceSink2OperationPath
operator|.
name|put
argument_list|(
name|peerRSop
argument_list|,
name|indx
argument_list|)
expr_stmt|;
block|}
block|}
name|indx
operator|++
expr_stmt|;
block|}
block|}
name|correlation
operator|.
name|setBottomReduceSink2OperationPathMap
argument_list|(
name|bottomReduceSink2OperationPath
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|CorrelationNodeProcCtx
name|correlationCtx
init|=
operator|(
name|CorrelationNodeProcCtx
operator|)
name|ctx
decl_stmt|;
name|ReduceSinkOperator
name|op
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|nd
decl_stmt|;
if|if
condition|(
name|correlationCtx
operator|.
name|isWalked
argument_list|(
name|op
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Walk to operator "
operator|+
operator|(
operator|(
name|Operator
operator|)
name|nd
operator|)
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|" "
operator|+
operator|(
operator|(
name|Operator
operator|)
name|nd
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addOperatorInfo
argument_list|(
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
operator|)
name|nd
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getKeyCols
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
operator|(
operator|!
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|CommonJoinOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
operator|&&
operator|!
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|GroupByOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|correlationCtx
operator|.
name|addWalked
argument_list|(
name|op
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// 1: find out correlation
name|IntraQueryCorrelation
name|correlation
init|=
operator|new
name|IntraQueryCorrelation
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|peerReduceSinkOperators
init|=
name|CorrelationOptimizerUtils
operator|.
name|findPeerReduceSinkOperators
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|bottomReduceSinkOperators
init|=
operator|new
name|ArrayList
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ReduceSinkOperator
name|rsop
range|:
name|peerReduceSinkOperators
control|)
block|{
name|Set
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|thisBottomReduceSinkOperators
init|=
name|exploitJFC
argument_list|(
name|rsop
argument_list|,
name|correlationCtx
argument_list|,
name|correlation
argument_list|)
decl_stmt|;
if|if
condition|(
name|thisBottomReduceSinkOperators
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|thisBottomReduceSinkOperators
operator|.
name|add
argument_list|(
name|rsop
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|isClear
init|=
literal|false
decl_stmt|;
comment|// bottom ReduceSinkOperators are those ReduceSinkOperators which are close to
comment|// TableScanOperators
for|for
control|(
name|ReduceSinkOperator
name|bottomRsop
range|:
name|thisBottomReduceSinkOperators
control|)
block|{
name|TableScanOperator
name|tsop
init|=
name|findTableScanOPerator
argument_list|(
name|bottomRsop
argument_list|)
decl_stmt|;
if|if
condition|(
name|tsop
operator|==
literal|null
condition|)
block|{
name|isClear
operator|=
literal|true
expr_stmt|;
comment|// currently the optimizer can only optimize correlations involving
comment|// source tables (input tables)
block|}
else|else
block|{
comment|// bottom ReduceSinkOperators are those ReduceSinkOperators which are close to
comment|// FileSinkOperators
if|if
condition|(
operator|!
name|correlation
operator|.
name|getTop2TSops
argument_list|()
operator|.
name|containsKey
argument_list|(
name|rsop
argument_list|)
condition|)
block|{
name|correlation
operator|.
name|getTop2TSops
argument_list|()
operator|.
name|put
argument_list|(
name|rsop
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|TableScanOperator
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|correlation
operator|.
name|getTop2TSops
argument_list|()
operator|.
name|get
argument_list|(
name|rsop
argument_list|)
operator|.
name|add
argument_list|(
name|tsop
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|correlation
operator|.
name|getBottom2TSops
argument_list|()
operator|.
name|containsKey
argument_list|(
name|bottomRsop
argument_list|)
condition|)
block|{
name|correlation
operator|.
name|getBottom2TSops
argument_list|()
operator|.
name|put
argument_list|(
name|bottomRsop
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|TableScanOperator
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|correlation
operator|.
name|getBottom2TSops
argument_list|()
operator|.
name|get
argument_list|(
name|bottomRsop
argument_list|)
operator|.
name|add
argument_list|(
name|tsop
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isClear
condition|)
block|{
name|thisBottomReduceSinkOperators
operator|.
name|clear
argument_list|()
expr_stmt|;
name|thisBottomReduceSinkOperators
operator|.
name|add
argument_list|(
name|rsop
argument_list|)
expr_stmt|;
block|}
block|}
name|bottomReduceSinkOperators
operator|.
name|addAll
argument_list|(
name|thisBottomReduceSinkOperators
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|peerReduceSinkOperators
operator|.
name|containsAll
argument_list|(
name|bottomReduceSinkOperators
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"has job flow correlation"
argument_list|)
expr_stmt|;
name|correlation
operator|.
name|setJobFlowCorrelation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|correlation
operator|.
name|setJFCCorrelation
argument_list|(
name|peerReduceSinkOperators
argument_list|,
name|bottomReduceSinkOperators
argument_list|)
expr_stmt|;
name|annotateOpPlan
argument_list|(
name|correlation
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|correlation
operator|.
name|hasJobFlowCorrelation
argument_list|()
condition|)
block|{
name|boolean
name|hasICandTC
init|=
name|findICandTC
argument_list|(
name|correlation
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"has input correlation and transit correlation? "
operator|+
name|hasICandTC
argument_list|)
expr_stmt|;
name|correlation
operator|.
name|setInputCorrelation
argument_list|(
name|hasICandTC
argument_list|)
expr_stmt|;
name|correlation
operator|.
name|setTransitCorrelation
argument_list|(
name|hasICandTC
argument_list|)
expr_stmt|;
name|boolean
name|hasSelfJoin
init|=
name|hasSelfJoin
argument_list|(
name|correlation
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"has self-join? "
operator|+
name|hasSelfJoin
argument_list|)
expr_stmt|;
name|correlation
operator|.
name|setInvolveSelfJoin
argument_list|(
name|hasSelfJoin
argument_list|)
expr_stmt|;
comment|// TODO: support self-join involved cases. For self-join related operation paths, after the
comment|// correlation dispatch operator, each path should be filtered by a filter operator
if|if
condition|(
operator|!
name|hasSelfJoin
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"correlation detected"
argument_list|)
expr_stmt|;
name|correlationCtx
operator|.
name|addCorrelation
argument_list|(
name|correlation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"correlation discarded. The current optimizer cannot optimize it"
argument_list|)
expr_stmt|;
block|}
block|}
name|correlationCtx
operator|.
name|addWalkedAll
argument_list|(
name|peerReduceSinkOperators
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|hasSelfJoin
parameter_list|(
name|IntraQueryCorrelation
name|correlation
parameter_list|)
block|{
name|boolean
name|hasSelfJoin
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|>
name|entry
range|:
name|correlation
operator|.
name|getTable2CorrelatedRSops
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|ReduceSinkOperator
name|rsop
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|intersection
init|=
operator|new
name|HashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|(
name|CorrelationOptimizerUtils
operator|.
name|findPeerReduceSinkOperators
argument_list|(
name|rsop
argument_list|)
argument_list|)
decl_stmt|;
name|intersection
operator|.
name|retainAll
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// if self-join is involved
if|if
condition|(
name|intersection
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|hasSelfJoin
operator|=
literal|true
expr_stmt|;
return|return
name|hasSelfJoin
return|;
block|}
block|}
block|}
return|return
name|hasSelfJoin
return|;
block|}
specifier|private
name|boolean
name|findICandTC
parameter_list|(
name|IntraQueryCorrelation
name|correlation
parameter_list|)
block|{
name|boolean
name|hasICandTC
init|=
literal|false
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|>
name|table2RSops
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|TableScanOperator
argument_list|>
argument_list|>
name|table2TSops
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|TableScanOperator
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ReduceSinkOperator
argument_list|,
name|List
argument_list|<
name|TableScanOperator
argument_list|>
argument_list|>
name|entry
range|:
name|correlation
operator|.
name|getBottom2TSops
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|tbl
init|=
name|aliastoTabName
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConf
argument_list|()
operator|.
name|getAlias
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|table2RSops
operator|.
name|containsKey
argument_list|(
name|tbl
argument_list|)
operator|&&
operator|!
name|table2TSops
operator|.
name|containsKey
argument_list|(
name|tbl
argument_list|)
condition|)
block|{
name|table2RSops
operator|.
name|put
argument_list|(
name|tbl
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|table2TSops
operator|.
name|put
argument_list|(
name|tbl
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|TableScanOperator
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
assert|assert
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
name|table2RSops
operator|.
name|get
argument_list|(
name|tbl
argument_list|)
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|table2TSops
operator|.
name|get
argument_list|(
name|tbl
argument_list|)
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|>
name|entry
range|:
name|table2RSops
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|hasICandTC
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|correlation
operator|.
name|setICandTCCorrelation
argument_list|(
name|table2RSops
argument_list|,
name|table2TSops
argument_list|)
expr_stmt|;
return|return
name|hasICandTC
return|;
block|}
block|}
specifier|private
name|NodeProcessor
name|getDefaultProc
parameter_list|()
block|{
return|return
operator|new
name|NodeProcessor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|ctx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Walk to operator "
operator|+
operator|(
operator|(
name|Operator
operator|)
name|nd
operator|)
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|" "
operator|+
operator|(
operator|(
name|Operator
operator|)
name|nd
operator|)
operator|.
name|getName
argument_list|()
operator|+
literal|". No actual work to do"
argument_list|)
expr_stmt|;
name|CorrelationNodeProcCtx
name|correlationCtx
init|=
operator|(
name|CorrelationNodeProcCtx
operator|)
name|ctx
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
init|=
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
operator|)
name|nd
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|MapJoinOperator
operator|.
name|getOperatorName
argument_list|()
argument_list|)
condition|)
block|{
name|correlationCtx
operator|.
name|setAbort
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|correlationCtx
operator|.
name|getAbortReasons
argument_list|()
operator|.
name|add
argument_list|(
literal|"Found MAPJOIN"
argument_list|)
expr_stmt|;
block|}
name|addOperatorInfo
argument_list|(
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
operator|)
name|nd
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
specifier|public
class|class
name|IntraQueryCorrelation
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|ReduceSinkOperator
argument_list|,
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|>
name|down2upRSops
init|=
operator|new
name|HashMap
argument_list|<
name|ReduceSinkOperator
argument_list|,
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ReduceSinkOperator
argument_list|,
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|>
name|up2downRSops
init|=
operator|new
name|HashMap
argument_list|<
name|ReduceSinkOperator
argument_list|,
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ReduceSinkOperator
argument_list|,
name|List
argument_list|<
name|TableScanOperator
argument_list|>
argument_list|>
name|top2TSops
init|=
operator|new
name|HashMap
argument_list|<
name|ReduceSinkOperator
argument_list|,
name|List
argument_list|<
name|TableScanOperator
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ReduceSinkOperator
argument_list|,
name|List
argument_list|<
name|TableScanOperator
argument_list|>
argument_list|>
name|bottom2TSops
init|=
operator|new
name|HashMap
argument_list|<
name|ReduceSinkOperator
argument_list|,
name|List
argument_list|<
name|TableScanOperator
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|topReduceSinkOperators
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|bottomReduceSinkOperators
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|>
name|table2CorrelatedRSops
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|TableScanOperator
argument_list|>
argument_list|>
name|table2CorrelatedTSops
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ReduceSinkOperator
argument_list|,
name|Integer
argument_list|>
name|bottomReduceSink2OperationPathMap
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|dispatchConf
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// inputTag->(Child->outputTag)
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|SelectDesc
argument_list|>
argument_list|>
argument_list|>
name|dispatchValueSelectDescConf
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|SelectDesc
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// inputTag->(Child->SelectDesc)
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|SelectDesc
argument_list|>
argument_list|>
argument_list|>
name|dispatchKeySelectDescConf
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|SelectDesc
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// inputTag->(Child->SelectDesc)
specifier|private
specifier|final
name|Set
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|allReduceSinkOperators
init|=
operator|new
name|HashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|()
decl_stmt|;
comment|// this set contains all ReduceSink-GroupBy operator-pairs that should be be replaced by
comment|// GroupBy-ReduceSink-GroupBy pattern.
comment|// the type of first GroupByOperator is hash type and this one will be used to group records.
specifier|private
specifier|final
name|Set
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|rSGBYToBeReplacedByGBYRSGBY
init|=
operator|new
name|HashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|addToRSGBYToBeReplacedByGBYRSGBY
parameter_list|(
name|ReduceSinkOperator
name|rsop
parameter_list|)
block|{
name|rSGBYToBeReplacedByGBYRSGBY
operator|.
name|add
argument_list|(
name|rsop
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|getRSGBYToBeReplacedByGBYRSGBY
parameter_list|()
block|{
return|return
name|rSGBYToBeReplacedByGBYRSGBY
return|;
block|}
specifier|public
name|void
name|addToAllReduceSinkOperators
parameter_list|(
name|ReduceSinkOperator
name|rsop
parameter_list|)
block|{
name|allReduceSinkOperators
operator|.
name|add
argument_list|(
name|rsop
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|getAllReduceSinkOperators
parameter_list|()
block|{
return|return
name|allReduceSinkOperators
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|getDispatchConf
parameter_list|()
block|{
return|return
name|dispatchConf
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|SelectDesc
argument_list|>
argument_list|>
argument_list|>
name|getDispatchValueSelectDescConf
parameter_list|()
block|{
return|return
name|dispatchValueSelectDescConf
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|SelectDesc
argument_list|>
argument_list|>
argument_list|>
name|getDispatchKeySelectDescConf
parameter_list|()
block|{
return|return
name|dispatchKeySelectDescConf
return|;
block|}
specifier|public
name|void
name|addOperationPathToDispatchConf
parameter_list|(
name|Integer
name|opPlan
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dispatchConf
operator|.
name|containsKey
argument_list|(
name|opPlan
argument_list|)
condition|)
block|{
name|dispatchConf
operator|.
name|put
argument_list|(
name|opPlan
argument_list|,
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|getDispatchConfForOperationPath
parameter_list|(
name|Integer
name|opPlan
parameter_list|)
block|{
return|return
name|dispatchConf
operator|.
name|get
argument_list|(
name|opPlan
argument_list|)
return|;
block|}
specifier|public
name|void
name|addOperationPathToDispatchValueSelectDescConf
parameter_list|(
name|Integer
name|opPlan
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dispatchValueSelectDescConf
operator|.
name|containsKey
argument_list|(
name|opPlan
argument_list|)
condition|)
block|{
name|dispatchValueSelectDescConf
operator|.
name|put
argument_list|(
name|opPlan
argument_list|,
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|SelectDesc
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|SelectDesc
argument_list|>
argument_list|>
name|getDispatchValueSelectDescConfForOperationPath
parameter_list|(
name|Integer
name|opPlan
parameter_list|)
block|{
return|return
name|dispatchValueSelectDescConf
operator|.
name|get
argument_list|(
name|opPlan
argument_list|)
return|;
block|}
specifier|public
name|void
name|addOperationPathToDispatchKeySelectDescConf
parameter_list|(
name|Integer
name|opPlan
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dispatchKeySelectDescConf
operator|.
name|containsKey
argument_list|(
name|opPlan
argument_list|)
condition|)
block|{
name|dispatchKeySelectDescConf
operator|.
name|put
argument_list|(
name|opPlan
argument_list|,
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|SelectDesc
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|SelectDesc
argument_list|>
argument_list|>
name|getDispatchKeySelectDescConfForOperationPath
parameter_list|(
name|Integer
name|opPlan
parameter_list|)
block|{
return|return
name|dispatchKeySelectDescConf
operator|.
name|get
argument_list|(
name|opPlan
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|inputCorrelation
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|transitCorrelation
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|jobFlowCorrelation
init|=
literal|false
decl_stmt|;
specifier|public
name|void
name|setBottomReduceSink2OperationPathMap
parameter_list|(
name|Map
argument_list|<
name|ReduceSinkOperator
argument_list|,
name|Integer
argument_list|>
name|bottomReduceSink2OperationPathMap
parameter_list|)
block|{
name|this
operator|.
name|bottomReduceSink2OperationPathMap
operator|=
name|bottomReduceSink2OperationPathMap
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|ReduceSinkOperator
argument_list|,
name|Integer
argument_list|>
name|getBottomReduceSink2OperationPathMap
parameter_list|()
block|{
return|return
name|bottomReduceSink2OperationPathMap
return|;
block|}
specifier|public
name|void
name|setInputCorrelation
parameter_list|(
name|boolean
name|inputCorrelation
parameter_list|)
block|{
name|this
operator|.
name|inputCorrelation
operator|=
name|inputCorrelation
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasInputCorrelation
parameter_list|()
block|{
return|return
name|inputCorrelation
return|;
block|}
specifier|public
name|void
name|setTransitCorrelation
parameter_list|(
name|boolean
name|transitCorrelation
parameter_list|)
block|{
name|this
operator|.
name|transitCorrelation
operator|=
name|transitCorrelation
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasTransitCorrelation
parameter_list|()
block|{
return|return
name|transitCorrelation
return|;
block|}
specifier|public
name|void
name|setJobFlowCorrelation
parameter_list|(
name|boolean
name|jobFlowCorrelation
parameter_list|)
block|{
name|this
operator|.
name|jobFlowCorrelation
operator|=
name|jobFlowCorrelation
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasJobFlowCorrelation
parameter_list|()
block|{
return|return
name|jobFlowCorrelation
return|;
block|}
specifier|public
name|Map
argument_list|<
name|ReduceSinkOperator
argument_list|,
name|List
argument_list|<
name|TableScanOperator
argument_list|>
argument_list|>
name|getTop2TSops
parameter_list|()
block|{
return|return
name|top2TSops
return|;
block|}
specifier|public
name|Map
argument_list|<
name|ReduceSinkOperator
argument_list|,
name|List
argument_list|<
name|TableScanOperator
argument_list|>
argument_list|>
name|getBottom2TSops
parameter_list|()
block|{
return|return
name|bottom2TSops
return|;
block|}
specifier|public
name|Map
argument_list|<
name|ReduceSinkOperator
argument_list|,
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|>
name|getDown2upRSops
parameter_list|()
block|{
return|return
name|down2upRSops
return|;
block|}
specifier|public
name|Map
argument_list|<
name|ReduceSinkOperator
argument_list|,
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|>
name|getUp2downRSops
parameter_list|()
block|{
return|return
name|up2downRSops
return|;
block|}
specifier|public
name|void
name|setJFCCorrelation
parameter_list|(
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|peerReduceSinkOperators
parameter_list|,
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|bottomReduceSinkOperators
parameter_list|)
block|{
name|this
operator|.
name|topReduceSinkOperators
operator|=
name|peerReduceSinkOperators
expr_stmt|;
name|this
operator|.
name|bottomReduceSinkOperators
operator|=
name|bottomReduceSinkOperators
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|getTopReduceSinkOperators
parameter_list|()
block|{
return|return
name|topReduceSinkOperators
return|;
block|}
specifier|public
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|getBottomReduceSinkOperators
parameter_list|()
block|{
return|return
name|bottomReduceSinkOperators
return|;
block|}
specifier|public
name|void
name|setICandTCCorrelation
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|>
name|table2RSops
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|TableScanOperator
argument_list|>
argument_list|>
name|table2TSops
parameter_list|)
block|{
name|this
operator|.
name|table2CorrelatedRSops
operator|=
name|table2RSops
expr_stmt|;
name|this
operator|.
name|table2CorrelatedTSops
operator|=
name|table2TSops
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|>
name|getTable2CorrelatedRSops
parameter_list|()
block|{
return|return
name|table2CorrelatedRSops
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|TableScanOperator
argument_list|>
argument_list|>
name|getTable2CorrelatedTSops
parameter_list|()
block|{
return|return
name|table2CorrelatedTSops
return|;
block|}
specifier|private
name|boolean
name|isInvolveSelfJoin
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|isInvolveSelfJoin
parameter_list|()
block|{
return|return
name|isInvolveSelfJoin
return|;
block|}
specifier|public
name|void
name|setInvolveSelfJoin
parameter_list|(
name|boolean
name|isInvolveSelfJoin
parameter_list|)
block|{
name|this
operator|.
name|isInvolveSelfJoin
operator|=
name|isInvolveSelfJoin
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|CorrelationNodePhase1ProcCtx
implements|implements
name|NodeProcessorCtx
block|{
specifier|public
name|int
name|fileSinkOperatorCount
init|=
literal|0
decl_stmt|;
block|}
specifier|private
class|class
name|CorrelationNodeProcCtx
implements|implements
name|NodeProcessorCtx
block|{
specifier|private
name|boolean
name|abort
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|abortReasons
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|walked
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|IntraQueryCorrelation
argument_list|>
name|correlations
decl_stmt|;
specifier|public
name|CorrelationNodeProcCtx
parameter_list|()
block|{
name|walked
operator|=
operator|new
name|HashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|()
expr_stmt|;
name|correlations
operator|=
operator|new
name|ArrayList
argument_list|<
name|IntraQueryCorrelation
argument_list|>
argument_list|()
expr_stmt|;
name|abort
operator|=
literal|false
expr_stmt|;
name|abortReasons
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setAbort
parameter_list|(
name|boolean
name|abort
parameter_list|)
block|{
name|this
operator|.
name|abort
operator|=
name|abort
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAbort
parameter_list|()
block|{
return|return
name|abort
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAbortReasons
parameter_list|()
block|{
return|return
name|abortReasons
return|;
block|}
specifier|public
name|void
name|addCorrelation
parameter_list|(
name|IntraQueryCorrelation
name|correlation
parameter_list|)
block|{
name|correlations
operator|.
name|add
argument_list|(
name|correlation
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|IntraQueryCorrelation
argument_list|>
name|getCorrelations
parameter_list|()
block|{
return|return
name|correlations
return|;
block|}
specifier|public
name|boolean
name|isWalked
parameter_list|(
name|ReduceSinkOperator
name|op
parameter_list|)
block|{
return|return
name|walked
operator|.
name|contains
argument_list|(
name|op
argument_list|)
return|;
block|}
specifier|public
name|void
name|addWalked
parameter_list|(
name|ReduceSinkOperator
name|op
parameter_list|)
block|{
name|walked
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addWalkedAll
parameter_list|(
name|Collection
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|c
parameter_list|)
block|{
name|walked
operator|.
name|addAll
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

