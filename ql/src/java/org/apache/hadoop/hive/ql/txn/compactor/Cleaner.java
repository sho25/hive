begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|txn
operator|.
name|compactor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ReplChangeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidWriteIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidReaderWriteIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksResponseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|CompactionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * A class to clean directories after compactions.  This will run in a separate thread.  */
end_comment

begin_class
specifier|public
class|class
name|Cleaner
extends|extends
name|CompactorThread
block|{
specifier|static
specifier|final
specifier|private
name|String
name|CLASS_NAME
init|=
name|Cleaner
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CLASS_NAME
argument_list|)
decl_stmt|;
specifier|private
name|long
name|cleanerCheckInterval
init|=
literal|0
decl_stmt|;
specifier|private
name|ReplChangeManager
name|replChangeManager
decl_stmt|;
comment|// List of compactions to clean.
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|compactId2LockMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|CompactionInfo
argument_list|>
name|compactId2CompactInfoMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|AtomicBoolean
name|stop
parameter_list|,
name|AtomicBoolean
name|looped
parameter_list|)
throws|throws
name|MetaException
block|{
name|super
operator|.
name|init
argument_list|(
name|stop
argument_list|,
name|looped
argument_list|)
expr_stmt|;
name|replChangeManager
operator|=
name|ReplChangeManager
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|cleanerCheckInterval
operator|==
literal|0
condition|)
block|{
name|cleanerCheckInterval
operator|=
name|conf
operator|.
name|getTimeVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_COMPACTOR_CLEANER_RUN_INTERVAL
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
do|do
block|{
comment|// This is solely for testing.  It checks if the test has set the looped value to false,
comment|// and if so remembers that and then sets it to true at the end.  We have to check here
comment|// first to make sure we go through a complete iteration of the loop before resetting it.
name|boolean
name|setLooped
init|=
operator|!
name|looped
operator|.
name|get
argument_list|()
decl_stmt|;
name|TxnStore
operator|.
name|MutexAPI
operator|.
name|LockHandle
name|handle
init|=
literal|null
decl_stmt|;
name|long
name|startedAt
init|=
operator|-
literal|1
decl_stmt|;
comment|// Make sure nothing escapes this run method and kills the metastore at large,
comment|// so wrap it in a big catch Throwable statement.
try|try
block|{
name|handle
operator|=
name|txnHandler
operator|.
name|getMutexAPI
argument_list|()
operator|.
name|acquireLock
argument_list|(
name|TxnStore
operator|.
name|MUTEX_KEY
operator|.
name|Cleaner
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|startedAt
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|// First look for all the compactions that are waiting to be cleaned.  If we have not
comment|// seen an entry before, look for all the locks held on that table or partition and
comment|// record them.  We will then only clean the partition once all of those locks have been
comment|// released.  This way we avoid removing the files while they are in use,
comment|// while at the same time avoiding starving the cleaner as new readers come along.
comment|// This works because we know that any reader who comes along after the worker thread has
comment|// done the compaction will read the more up to date version of the data (either in a
comment|// newer delta or in a newer base).
name|List
argument_list|<
name|CompactionInfo
argument_list|>
name|toClean
init|=
name|txnHandler
operator|.
name|findReadyToClean
argument_list|()
decl_stmt|;
block|{
comment|/**            * Since there may be more than 1 instance of Cleaner running we may have state info            * for items which were cleaned by instances.  Here we remove them.            *            * In the long run if we add end_time to compaction_queue, then we can check that            * hive_locks.acquired_at> compaction_queue.end_time + safety_buffer in which case            * we know the lock owner is reading files created by this compaction or later.            * The advantage is that we don't have to store the locks.            */
name|Set
argument_list|<
name|Long
argument_list|>
name|currentToCleanSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CompactionInfo
name|ci
range|:
name|toClean
control|)
block|{
name|currentToCleanSet
operator|.
name|add
argument_list|(
name|ci
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|cleanPerformedByOthers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|id
range|:
name|compactId2CompactInfoMap
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|currentToCleanSet
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|cleanPerformedByOthers
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|long
name|id
range|:
name|cleanPerformedByOthers
control|)
block|{
name|compactId2CompactInfoMap
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|compactId2LockMap
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|toClean
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|||
name|compactId2LockMap
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ShowLocksResponse
name|locksResponse
init|=
name|txnHandler
operator|.
name|showLocks
argument_list|(
operator|new
name|ShowLocksRequest
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|dumpLockState
argument_list|(
name|locksResponse
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CompactionInfo
name|ci
range|:
name|toClean
control|)
block|{
comment|// Check to see if we have seen this request before.  If so, ignore it.  If not,
comment|// add it to our queue.
if|if
condition|(
operator|!
name|compactId2LockMap
operator|.
name|containsKey
argument_list|(
name|ci
operator|.
name|id
argument_list|)
condition|)
block|{
name|compactId2LockMap
operator|.
name|put
argument_list|(
name|ci
operator|.
name|id
argument_list|,
name|findRelatedLocks
argument_list|(
name|ci
argument_list|,
name|locksResponse
argument_list|)
argument_list|)
expr_stmt|;
name|compactId2CompactInfoMap
operator|.
name|put
argument_list|(
name|ci
operator|.
name|id
argument_list|,
name|ci
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Now, for each entry in the queue, see if all of the associated locks are clear so we
comment|// can clean
name|Set
argument_list|<
name|Long
argument_list|>
name|currentLocks
init|=
name|buildCurrentLockSet
argument_list|(
name|locksResponse
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|expiredLocks
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|compactionsCleaned
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|queueEntry
range|:
name|compactId2LockMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|boolean
name|sawLock
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Long
name|lockId
range|:
name|queueEntry
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|currentLocks
operator|.
name|contains
argument_list|(
name|lockId
argument_list|)
condition|)
block|{
name|sawLock
operator|=
literal|true
expr_stmt|;
break|break;
block|}
else|else
block|{
name|expiredLocks
operator|.
name|add
argument_list|(
name|lockId
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|sawLock
condition|)
block|{
comment|// Remember to remove this when we're out of the loop,
comment|// we can't do it in the loop or we'll get a concurrent modification exception.
name|compactionsCleaned
operator|.
name|add
argument_list|(
name|queueEntry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
comment|//Future thought: this may be expensive so consider having a thread pool run in parallel
name|clean
argument_list|(
name|compactId2CompactInfoMap
operator|.
name|get
argument_list|(
name|queueEntry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Remove the locks we didn't see so we don't look for them again next time
for|for
control|(
name|Long
name|lockId
range|:
name|expiredLocks
control|)
block|{
name|queueEntry
operator|.
name|getValue
argument_list|()
operator|.
name|remove
argument_list|(
name|lockId
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping cleaning of "
operator|+
name|idWatermark
argument_list|(
name|compactId2CompactInfoMap
operator|.
name|get
argument_list|(
name|queueEntry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|" due to reader present: "
operator|+
name|queueEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|compactionsCleaned
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Long
name|compactId
range|:
name|compactionsCleaned
control|)
block|{
name|compactId2LockMap
operator|.
name|remove
argument_list|(
name|compactId
argument_list|)
expr_stmt|;
name|compactId2CompactInfoMap
operator|.
name|remove
argument_list|(
name|compactId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught an exception in the main loop of compactor cleaner, "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|handle
operator|!=
literal|null
condition|)
block|{
name|handle
operator|.
name|releaseLocks
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|setLooped
condition|)
block|{
name|looped
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Now, go back to bed until it's time to do this again
name|long
name|elapsedTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startedAt
decl_stmt|;
if|if
condition|(
name|elapsedTime
operator|>=
name|cleanerCheckInterval
operator|||
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
continue|continue;
block|}
else|else
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|cleanerCheckInterval
operator|-
name|elapsedTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// What can I do about it?
block|}
block|}
block|}
do|while
condition|(
operator|!
name|stop
operator|.
name|get
argument_list|()
condition|)
do|;
block|}
specifier|private
name|Set
argument_list|<
name|Long
argument_list|>
name|findRelatedLocks
parameter_list|(
name|CompactionInfo
name|ci
parameter_list|,
name|ShowLocksResponse
name|locksResponse
parameter_list|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|relatedLocks
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ShowLocksResponseElement
name|lock
range|:
name|locksResponse
operator|.
name|getLocks
argument_list|()
control|)
block|{
comment|/**        * Hive QL is not case sensitive wrt db/table/column names        * Partition names get        * normalized (as far as I can tell) by lower casing column name but not partition value.        * {@link org.apache.hadoop.hive.metastore.Warehouse#makePartName(List, List, String)}        * {@link org.apache.hadoop.hive.ql.parse.DDLSemanticAnalyzer#getPartSpec(ASTNode)}        * Since user input may start out in any case, compare here case-insensitive for db/table        * but leave partition name as is.        */
if|if
condition|(
name|ci
operator|.
name|dbname
operator|.
name|equalsIgnoreCase
argument_list|(
name|lock
operator|.
name|getDbname
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|ci
operator|.
name|tableName
operator|==
literal|null
operator|&&
name|lock
operator|.
name|getTablename
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|ci
operator|.
name|tableName
operator|!=
literal|null
operator|&&
name|ci
operator|.
name|tableName
operator|.
name|equalsIgnoreCase
argument_list|(
name|lock
operator|.
name|getTablename
argument_list|()
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
operator|(
name|ci
operator|.
name|partName
operator|==
literal|null
operator|&&
name|lock
operator|.
name|getPartname
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|ci
operator|.
name|partName
operator|!=
literal|null
operator|&&
name|ci
operator|.
name|partName
operator|.
name|equals
argument_list|(
name|lock
operator|.
name|getPartname
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|relatedLocks
operator|.
name|add
argument_list|(
name|lock
operator|.
name|getLockid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|relatedLocks
return|;
block|}
specifier|private
name|Set
argument_list|<
name|Long
argument_list|>
name|buildCurrentLockSet
parameter_list|(
name|ShowLocksResponse
name|locksResponse
parameter_list|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|currentLocks
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|(
name|locksResponse
operator|.
name|getLocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ShowLocksResponseElement
name|lock
range|:
name|locksResponse
operator|.
name|getLocks
argument_list|()
control|)
block|{
name|currentLocks
operator|.
name|add
argument_list|(
name|lock
operator|.
name|getLockid
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|currentLocks
return|;
block|}
specifier|private
name|void
name|clean
parameter_list|(
name|CompactionInfo
name|ci
parameter_list|)
throws|throws
name|MetaException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting cleaning for "
operator|+
name|ci
argument_list|)
expr_stmt|;
try|try
block|{
name|Table
name|t
init|=
name|resolveTable
argument_list|(
name|ci
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
comment|// The table was dropped before we got around to cleaning it.
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to find table "
operator|+
name|ci
operator|.
name|getFullTableName
argument_list|()
operator|+
literal|", assuming it was dropped."
operator|+
name|idWatermark
argument_list|(
name|ci
argument_list|)
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|markCleaned
argument_list|(
name|ci
argument_list|)
expr_stmt|;
return|return;
block|}
name|Partition
name|p
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ci
operator|.
name|partName
operator|!=
literal|null
condition|)
block|{
name|p
operator|=
name|resolvePartition
argument_list|(
name|ci
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
comment|// The partition was dropped before we got around to cleaning it.
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to find partition "
operator|+
name|ci
operator|.
name|getFullPartitionName
argument_list|()
operator|+
literal|", assuming it was dropped."
operator|+
name|idWatermark
argument_list|(
name|ci
argument_list|)
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|markCleaned
argument_list|(
name|ci
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|StorageDescriptor
name|sd
init|=
name|resolveStorageDescriptor
argument_list|(
name|t
argument_list|,
name|p
argument_list|)
decl_stmt|;
specifier|final
name|String
name|location
init|=
name|sd
operator|.
name|getLocation
argument_list|()
decl_stmt|;
comment|/**        * Each Compaction only compacts as far as the highest txn id such that all txns below it        * are resolved (i.e. not opened).  This is what "highestWriteId" tracks.  This is only tracked        * since Hive 1.3.0/2.0 - thus may be 0.  See ValidCompactorWriteIdList and uses for more info.        *        * We only want to clean up to the highestWriteId - otherwise we risk deleting deltas from        * under an active reader.        *        * Suppose we have deltas D2 D3 for table T, i.e. the last compaction created D3 so now there is a         * clean request for D2.          * Cleaner checks existing locks and finds none.        * Between that check and removeFiles() a query starts (it will be reading D3) and another compaction        * completes which creates D4.        * Now removeFiles() (more specifically AcidUtils.getAcidState()) will declare D3 to be obsolete        * unless ValidWriteIdList is "capped" at highestWriteId.        */
specifier|final
name|ValidWriteIdList
name|validWriteIdList
init|=
operator|(
name|ci
operator|.
name|highestWriteId
operator|>
literal|0
operator|)
condition|?
operator|new
name|ValidReaderWriteIdList
argument_list|(
name|ci
operator|.
name|getFullTableName
argument_list|()
argument_list|,
operator|new
name|long
index|[
literal|0
index|]
argument_list|,
operator|new
name|BitSet
argument_list|()
argument_list|,
name|ci
operator|.
name|highestWriteId
argument_list|)
else|:
operator|new
name|ValidReaderWriteIdList
argument_list|()
decl_stmt|;
if|if
condition|(
name|runJobAsSelf
argument_list|(
name|ci
operator|.
name|runAs
argument_list|)
condition|)
block|{
name|removeFiles
argument_list|(
name|location
argument_list|,
name|validWriteIdList
argument_list|,
name|ci
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleaning as user "
operator|+
name|ci
operator|.
name|runAs
operator|+
literal|" for "
operator|+
name|ci
operator|.
name|getFullPartitionName
argument_list|()
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|ci
operator|.
name|runAs
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|removeFiles
argument_list|(
name|location
argument_list|,
name|validWriteIdList
argument_list|,
name|ci
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|FileSystem
operator|.
name|closeAllForUGI
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not clean up file-system handles for UGI: "
operator|+
name|ugi
operator|+
literal|" for "
operator|+
name|ci
operator|.
name|getFullPartitionName
argument_list|()
operator|+
name|idWatermark
argument_list|(
name|ci
argument_list|)
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
name|txnHandler
operator|.
name|markCleaned
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught exception when cleaning, unable to complete cleaning of "
operator|+
name|ci
operator|+
literal|" "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|markFailed
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|idWatermark
parameter_list|(
name|CompactionInfo
name|ci
parameter_list|)
block|{
return|return
literal|" id="
operator|+
name|ci
operator|.
name|id
return|;
block|}
specifier|private
name|void
name|removeFiles
parameter_list|(
name|String
name|location
parameter_list|,
name|ValidWriteIdList
name|writeIdList
parameter_list|,
name|CompactionInfo
name|ci
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveException
block|{
name|Path
name|locPath
init|=
operator|new
name|Path
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|AcidUtils
operator|.
name|Directory
name|dir
init|=
name|AcidUtils
operator|.
name|getAcidState
argument_list|(
name|locPath
argument_list|,
name|conf
argument_list|,
name|writeIdList
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|obsoleteDirs
init|=
name|dir
operator|.
name|getObsolete
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|filesToDelete
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|(
name|obsoleteDirs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuilder
name|extraDebugInfo
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|stat
range|:
name|obsoleteDirs
control|)
block|{
name|filesToDelete
operator|.
name|add
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|extraDebugInfo
operator|.
name|append
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|FileUtils
operator|.
name|isPathWithinSubtree
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
argument_list|,
name|locPath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|idWatermark
argument_list|(
name|ci
argument_list|)
operator|+
literal|" found unexpected file: "
operator|+
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|extraDebugInfo
operator|.
name|setCharAt
argument_list|(
name|extraDebugInfo
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|,
literal|']'
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|compactIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|compactId2CompactInfoMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|compactIds
argument_list|)
expr_stmt|;
name|extraDebugInfo
operator|.
name|append
argument_list|(
literal|"compactId2CompactInfoMap.keySet("
argument_list|)
operator|.
name|append
argument_list|(
name|compactIds
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|idWatermark
argument_list|(
name|ci
argument_list|)
operator|+
literal|" About to remove "
operator|+
name|filesToDelete
operator|.
name|size
argument_list|()
operator|+
literal|" obsolete directories from "
operator|+
name|location
operator|+
literal|". "
operator|+
name|extraDebugInfo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|filesToDelete
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Hmm, nothing to delete in the cleaner for directory "
operator|+
name|location
operator|+
literal|", that hardly seems right."
argument_list|)
expr_stmt|;
return|return;
block|}
name|FileSystem
name|fs
init|=
name|filesToDelete
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Database
name|db
init|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getDatabase
argument_list|(
name|ci
operator|.
name|dbname
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|dead
range|:
name|filesToDelete
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to delete path "
operator|+
name|dead
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ReplChangeManager
operator|.
name|isSourceOfReplication
argument_list|(
name|db
argument_list|)
condition|)
block|{
name|replChangeManager
operator|.
name|recycle
argument_list|(
name|dead
argument_list|,
name|ReplChangeManager
operator|.
name|RecycleType
operator|.
name|MOVE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|delete
argument_list|(
name|dead
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|LockComparator
implements|implements
name|Comparator
argument_list|<
name|ShowLocksResponseElement
argument_list|>
block|{
comment|//sort ascending by resource, nulls first
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ShowLocksResponseElement
name|o1
parameter_list|,
name|ShowLocksResponseElement
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|==
name|o2
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|o1
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|o2
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
name|int
name|v
init|=
name|o1
operator|.
name|getDbname
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|o2
operator|.
name|getDbname
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
return|return
name|v
return|;
block|}
if|if
condition|(
name|o1
operator|.
name|getTablename
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|o2
operator|.
name|getTablename
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
name|v
operator|=
name|o1
operator|.
name|getTablename
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|o2
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
return|return
name|v
return|;
block|}
if|if
condition|(
name|o1
operator|.
name|getPartname
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|o2
operator|.
name|getPartname
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
name|v
operator|=
name|o1
operator|.
name|getPartname
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|o2
operator|.
name|getPartname
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
return|return
name|v
return|;
block|}
comment|//if still equal, compare by lock ids
name|v
operator|=
name|Long
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|getLockid
argument_list|()
argument_list|,
name|o2
operator|.
name|getLockid
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|!=
literal|0
condition|)
block|{
return|return
name|v
return|;
block|}
return|return
name|Long
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|getLockIdInternal
argument_list|()
argument_list|,
name|o2
operator|.
name|getLockIdInternal
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|dumpLockState
parameter_list|(
name|ShowLocksResponse
name|slr
parameter_list|)
block|{
name|Iterator
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|l
init|=
name|slr
operator|.
name|getLocksIterator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|sortedList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|l
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sortedList
operator|.
name|add
argument_list|(
name|l
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//sort for readability
name|sortedList
operator|.
name|sort
argument_list|(
operator|new
name|LockComparator
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"dumping locks"
argument_list|)
expr_stmt|;
for|for
control|(
name|ShowLocksResponseElement
name|lock
range|:
name|sortedList
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|lock
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

