begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|serde
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|serde
operator|.
name|primitive
operator|.
name|ParquetPrimitiveInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|SettableStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|CharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ArrayWritable
import|;
end_import

begin_comment
comment|/**  *  * The ArrayWritableObjectInspector will inspect an ArrayWritable, considering it as a Hive struct.<br />  * It can also inspect a List if Hive decides to inspect the result of an inspection.  *  */
end_comment

begin_class
specifier|public
class|class
name|ArrayWritableObjectInspector
extends|extends
name|SettableStructObjectInspector
block|{
specifier|private
specifier|final
name|TypeInfo
name|typeInfo
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldInfos
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|StructField
argument_list|>
name|fields
decl_stmt|;
specifier|private
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|StructFieldImpl
argument_list|>
name|fieldsByName
decl_stmt|;
specifier|public
name|ArrayWritableObjectInspector
parameter_list|(
specifier|final
name|StructTypeInfo
name|rowTypeInfo
parameter_list|)
block|{
name|typeInfo
operator|=
name|rowTypeInfo
expr_stmt|;
name|fieldNames
operator|=
name|rowTypeInfo
operator|.
name|getAllStructFieldNames
argument_list|()
expr_stmt|;
name|fieldInfos
operator|=
name|rowTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
expr_stmt|;
name|fields
operator|=
operator|new
name|ArrayList
argument_list|<
name|StructField
argument_list|>
argument_list|(
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|fieldsByName
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|StructFieldImpl
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldNames
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|String
name|name
init|=
name|fieldNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|TypeInfo
name|fieldInfo
init|=
name|fieldInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|StructFieldImpl
name|field
init|=
operator|new
name|StructFieldImpl
argument_list|(
name|name
argument_list|,
name|getObjectInspector
argument_list|(
name|fieldInfo
argument_list|)
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|fieldsByName
operator|.
name|put
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ObjectInspector
name|getObjectInspector
parameter_list|(
specifier|final
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
if|if
condition|(
name|typeInfo
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|)
condition|)
block|{
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
return|;
block|}
elseif|else
if|if
condition|(
name|typeInfo
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
condition|)
block|{
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBooleanObjectInspector
return|;
block|}
elseif|else
if|if
condition|(
name|typeInfo
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|floatTypeInfo
argument_list|)
condition|)
block|{
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableFloatObjectInspector
return|;
block|}
elseif|else
if|if
condition|(
name|typeInfo
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
condition|)
block|{
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableIntObjectInspector
return|;
block|}
elseif|else
if|if
condition|(
name|typeInfo
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
condition|)
block|{
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
return|;
block|}
elseif|else
if|if
condition|(
name|typeInfo
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
condition|)
block|{
return|return
name|ParquetPrimitiveInspectorFactory
operator|.
name|parquetStringInspector
return|;
block|}
elseif|else
if|if
condition|(
name|typeInfo
operator|instanceof
name|DecimalTypeInfo
condition|)
block|{
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
operator|(
name|DecimalTypeInfo
operator|)
name|typeInfo
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|typeInfo
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|STRUCT
argument_list|)
condition|)
block|{
return|return
operator|new
name|ArrayWritableObjectInspector
argument_list|(
operator|(
name|StructTypeInfo
operator|)
name|typeInfo
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|typeInfo
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|LIST
argument_list|)
condition|)
block|{
specifier|final
name|TypeInfo
name|subTypeInfo
init|=
operator|(
operator|(
name|ListTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getListElementTypeInfo
argument_list|()
decl_stmt|;
return|return
operator|new
name|ParquetHiveArrayInspector
argument_list|(
name|getObjectInspector
argument_list|(
name|subTypeInfo
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|typeInfo
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|MAP
argument_list|)
condition|)
block|{
specifier|final
name|TypeInfo
name|keyTypeInfo
init|=
operator|(
operator|(
name|MapTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getMapKeyTypeInfo
argument_list|()
decl_stmt|;
specifier|final
name|TypeInfo
name|valueTypeInfo
init|=
operator|(
operator|(
name|MapTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getMapValueTypeInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyTypeInfo
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
operator|||
name|keyTypeInfo
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|byteTypeInfo
argument_list|)
operator|||
name|keyTypeInfo
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|shortTypeInfo
argument_list|)
condition|)
block|{
return|return
operator|new
name|DeepParquetHiveMapInspector
argument_list|(
name|getObjectInspector
argument_list|(
name|keyTypeInfo
argument_list|)
argument_list|,
name|getObjectInspector
argument_list|(
name|valueTypeInfo
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|StandardParquetHiveMapInspector
argument_list|(
name|getObjectInspector
argument_list|(
name|keyTypeInfo
argument_list|)
argument_list|,
name|getObjectInspector
argument_list|(
name|valueTypeInfo
argument_list|)
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|typeInfo
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|byteTypeInfo
argument_list|)
condition|)
block|{
return|return
name|ParquetPrimitiveInspectorFactory
operator|.
name|parquetByteInspector
return|;
block|}
elseif|else
if|if
condition|(
name|typeInfo
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|shortTypeInfo
argument_list|)
condition|)
block|{
return|return
name|ParquetPrimitiveInspectorFactory
operator|.
name|parquetShortInspector
return|;
block|}
elseif|else
if|if
condition|(
name|typeInfo
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
argument_list|)
condition|)
block|{
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableTimestampObjectInspector
return|;
block|}
elseif|else
if|if
condition|(
name|typeInfo
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|binaryTypeInfo
argument_list|)
condition|)
block|{
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBinaryObjectInspector
return|;
block|}
elseif|else
if|if
condition|(
name|typeInfo
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|dateTypeInfo
argument_list|)
condition|)
block|{
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDateObjectInspector
return|;
block|}
elseif|else
if|if
condition|(
name|typeInfo
operator|.
name|getTypeName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|CHAR_TYPE_NAME
argument_list|)
condition|)
block|{
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
operator|(
name|CharTypeInfo
operator|)
name|typeInfo
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|typeInfo
operator|.
name|getTypeName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|VARCHAR_TYPE_NAME
argument_list|)
condition|)
block|{
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
operator|(
name|VarcharTypeInfo
operator|)
name|typeInfo
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unknown field type: "
operator|+
name|typeInfo
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Category
name|getCategory
parameter_list|()
block|{
return|return
name|Category
operator|.
name|STRUCT
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|typeInfo
operator|.
name|getTypeName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|getAllStructFieldRefs
parameter_list|()
block|{
return|return
name|fields
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getStructFieldData
parameter_list|(
specifier|final
name|Object
name|data
parameter_list|,
specifier|final
name|StructField
name|fieldRef
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|data
operator|instanceof
name|ArrayWritable
condition|)
block|{
specifier|final
name|ArrayWritable
name|arr
init|=
operator|(
name|ArrayWritable
operator|)
name|data
decl_stmt|;
specifier|final
name|StructFieldImpl
name|structField
init|=
operator|(
name|StructFieldImpl
operator|)
name|fieldRef
decl_stmt|;
if|if
condition|(
name|structField
operator|.
name|getIndex
argument_list|()
operator|<
name|arr
operator|.
name|get
argument_list|()
operator|.
name|length
condition|)
block|{
return|return
name|arr
operator|.
name|get
argument_list|()
index|[
name|structField
operator|.
name|getIndex
argument_list|()
index|]
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|//since setStructFieldData and create return a list, getStructFieldData should be able to
comment|//handle list data. This is required when table serde is ParquetHiveSerDe and partition serde
comment|//is something else.
if|if
condition|(
name|data
operator|instanceof
name|List
condition|)
block|{
return|return
operator|(
operator|(
name|List
operator|)
name|data
operator|)
operator|.
name|get
argument_list|(
operator|(
operator|(
name|StructFieldImpl
operator|)
name|fieldRef
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot inspect "
operator|+
name|data
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|StructField
name|getStructFieldRef
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|fieldsByName
operator|.
name|get
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getStructFieldsDataAsList
parameter_list|(
specifier|final
name|Object
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|data
operator|instanceof
name|ArrayWritable
condition|)
block|{
specifier|final
name|ArrayWritable
name|arr
init|=
operator|(
name|ArrayWritable
operator|)
name|data
decl_stmt|;
specifier|final
name|Object
index|[]
name|arrWritable
init|=
name|arr
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|arrWritable
argument_list|)
argument_list|)
return|;
block|}
comment|//since setStructFieldData and create return a list, getStructFieldData should be able to
comment|//handle list data. This is required when table serde is ParquetHiveSerDe and partition serde
comment|//is something else.
if|if
condition|(
name|data
operator|instanceof
name|List
condition|)
block|{
return|return
operator|(
operator|(
name|List
operator|)
name|data
operator|)
return|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot inspect "
operator|+
name|data
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|create
parameter_list|()
block|{
specifier|final
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setStructFieldData
parameter_list|(
name|Object
name|struct
parameter_list|,
name|StructField
name|field
parameter_list|,
name|Object
name|fieldValue
parameter_list|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|struct
decl_stmt|;
name|list
operator|.
name|set
argument_list|(
operator|(
operator|(
name|StructFieldImpl
operator|)
name|field
operator|)
operator|.
name|getIndex
argument_list|()
argument_list|,
name|fieldValue
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|ArrayWritableObjectInspector
name|other
init|=
operator|(
name|ArrayWritableObjectInspector
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|typeInfo
operator|!=
name|other
operator|.
name|typeInfo
operator|&&
operator|(
name|this
operator|.
name|typeInfo
operator|==
literal|null
operator|||
operator|!
name|this
operator|.
name|typeInfo
operator|.
name|equals
argument_list|(
name|other
operator|.
name|typeInfo
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
literal|5
decl_stmt|;
name|hash
operator|=
literal|29
operator|*
name|hash
operator|+
operator|(
name|this
operator|.
name|typeInfo
operator|!=
literal|null
condition|?
name|this
operator|.
name|typeInfo
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|hash
return|;
block|}
class|class
name|StructFieldImpl
implements|implements
name|StructField
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|ObjectInspector
name|inspector
decl_stmt|;
specifier|private
specifier|final
name|int
name|index
decl_stmt|;
specifier|public
name|StructFieldImpl
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|ObjectInspector
name|inspector
parameter_list|,
specifier|final
name|int
name|index
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|inspector
operator|=
name|inspector
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFieldComment
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|int
name|getIndex
parameter_list|()
block|{
return|return
name|index
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getFieldObjectInspector
parameter_list|()
block|{
return|return
name|inspector
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFieldID
parameter_list|()
block|{
return|return
name|index
return|;
block|}
block|}
block|}
end_class

end_unit

