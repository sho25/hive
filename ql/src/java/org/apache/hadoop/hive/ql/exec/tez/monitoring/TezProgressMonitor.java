begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|monitoring
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|log
operator|.
name|ProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|BaseWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|client
operator|.
name|DAGClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|client
operator|.
name|DAGStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|client
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|client
operator|.
name|VertexStatus
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|client
operator|.
name|DAGStatus
operator|.
name|State
operator|.
name|KILLED
import|;
end_import

begin_class
class|class
name|TezProgressMonitor
implements|implements
name|ProgressMonitor
block|{
specifier|private
specifier|static
specifier|final
name|int
name|COLUMN_1_WIDTH
init|=
literal|16
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|BaseWork
argument_list|>
name|topSortedWork
decl_stmt|;
specifier|private
specifier|final
name|SessionState
operator|.
name|LogHelper
name|console
decl_stmt|;
specifier|private
specifier|final
name|long
name|executionStartTime
decl_stmt|;
specifier|private
specifier|final
name|DAGStatus
name|status
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|VertexStatus
argument_list|>
name|vertexStatusMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|VertexProgress
argument_list|>
name|progressCountsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Try to get most the data required from dagClient in the constructor itself so that even after    * the tez job has finished this object can be used for later use.s    */
name|TezProgressMonitor
parameter_list|(
name|DAGClient
name|dagClient
parameter_list|,
name|DAGStatus
name|status
parameter_list|,
name|List
argument_list|<
name|BaseWork
argument_list|>
name|topSortedWork
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Progress
argument_list|>
name|progressMap
parameter_list|,
name|SessionState
operator|.
name|LogHelper
name|console
parameter_list|,
name|long
name|executionStartTime
parameter_list|)
throws|throws
name|IOException
throws|,
name|TezException
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|topSortedWork
operator|=
name|topSortedWork
expr_stmt|;
name|this
operator|.
name|console
operator|=
name|console
expr_stmt|;
name|this
operator|.
name|executionStartTime
operator|=
name|executionStartTime
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Progress
argument_list|>
name|entry
range|:
name|progressMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|vertexName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|progressCountsMap
operator|.
name|put
argument_list|(
name|vertexName
argument_list|,
operator|new
name|VertexProgress
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|status
operator|.
name|getState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|vertexStatusMap
operator|.
name|put
argument_list|(
name|vertexName
argument_list|,
name|dagClient
operator|.
name|getVertexStatus
argument_list|(
name|vertexName
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// best attempt, shouldn't really kill DAG for this
block|}
block|}
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|headers
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|"VERTICES"
argument_list|,
literal|"MODE"
argument_list|,
literal|"STATUS"
argument_list|,
literal|"TOTAL"
argument_list|,
literal|"COMPLETED"
argument_list|,
literal|"RUNNING"
argument_list|,
literal|"PENDING"
argument_list|,
literal|"FAILED"
argument_list|,
literal|"KILLED"
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|rows
parameter_list|()
block|{
try|try
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BaseWork
name|baseWork
range|:
name|topSortedWork
control|)
block|{
name|String
name|vertexName
init|=
name|baseWork
operator|.
name|getName
argument_list|()
decl_stmt|;
name|VertexProgress
name|progress
init|=
name|progressCountsMap
operator|.
name|get
argument_list|(
name|vertexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|progress
operator|!=
literal|null
condition|)
block|{
comment|// Map 1 .......... container  SUCCEEDED      7          7        0        0       0       0
name|results
operator|.
name|add
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getNameWithProgress
argument_list|(
name|vertexName
argument_list|,
name|progress
operator|.
name|succeededTaskCount
argument_list|,
name|progress
operator|.
name|totalTaskCount
argument_list|)
argument_list|,
name|getMode
argument_list|(
name|baseWork
argument_list|)
argument_list|,
name|progress
operator|.
name|vertexStatus
argument_list|(
name|vertexStatusMap
operator|.
name|get
argument_list|(
name|vertexName
argument_list|)
argument_list|)
argument_list|,
name|progress
operator|.
name|total
argument_list|()
argument_list|,
name|progress
operator|.
name|completed
argument_list|()
argument_list|,
name|progress
operator|.
name|running
argument_list|()
argument_list|,
name|progress
operator|.
name|pending
argument_list|()
argument_list|,
name|progress
operator|.
name|failed
argument_list|()
argument_list|,
name|progress
operator|.
name|killed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Getting  Progress Bar table rows failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" stack trace: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|// -------------------------------------------------------------------------------
comment|// VERTICES: 03/04            [=================>>-----] 86%  ELAPSED TIME: 1.71 s
comment|// -------------------------------------------------------------------------------
comment|// contains footerSummary , progressedPercentage, starTime
annotation|@
name|Override
specifier|public
name|String
name|footerSummary
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"VERTICES: %02d/%02d"
argument_list|,
name|completed
argument_list|()
argument_list|,
name|progressCountsMap
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|startTime
parameter_list|()
block|{
return|return
name|executionStartTime
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|progressedPercentage
parameter_list|()
block|{
name|int
name|sumTotal
init|=
literal|0
decl_stmt|,
name|sumComplete
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|progressCountsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|VertexProgress
name|progress
init|=
name|progressCountsMap
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
specifier|final
name|int
name|complete
init|=
name|progress
operator|.
name|succeededTaskCount
decl_stmt|;
specifier|final
name|int
name|total
init|=
name|progress
operator|.
name|totalTaskCount
decl_stmt|;
if|if
condition|(
name|total
operator|>
literal|0
condition|)
block|{
name|sumTotal
operator|+=
name|total
expr_stmt|;
name|sumComplete
operator|+=
name|complete
expr_stmt|;
block|}
block|}
return|return
operator|(
name|sumTotal
operator|==
literal|0
operator|)
condition|?
literal|0.0f
else|:
operator|(
name|float
operator|)
name|sumComplete
operator|/
operator|(
name|float
operator|)
name|sumTotal
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executionStatus
parameter_list|()
block|{
return|return
name|this
operator|.
name|status
operator|.
name|getState
argument_list|()
operator|.
name|name
argument_list|()
return|;
block|}
specifier|private
name|int
name|completed
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|completed
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|progressCountsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|VertexProgress
name|progress
init|=
name|progressCountsMap
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
specifier|final
name|int
name|complete
init|=
name|progress
operator|.
name|succeededTaskCount
decl_stmt|;
specifier|final
name|int
name|total
init|=
name|progress
operator|.
name|totalTaskCount
decl_stmt|;
if|if
condition|(
name|total
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|complete
operator|==
name|total
condition|)
block|{
name|completed
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|completed
operator|.
name|size
argument_list|()
return|;
block|}
comment|// Map 1 ..........
specifier|private
name|String
name|getNameWithProgress
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|complete
parameter_list|,
name|int
name|total
parameter_list|)
block|{
name|String
name|result
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|float
name|percent
init|=
name|total
operator|==
literal|0
condition|?
literal|0.0f
else|:
operator|(
name|float
operator|)
name|complete
operator|/
operator|(
name|float
operator|)
name|total
decl_stmt|;
comment|// lets use the remaining space in column 1 as progress bar
name|int
name|spaceRemaining
init|=
name|COLUMN_1_WIDTH
operator|-
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
decl_stmt|;
name|String
name|trimmedVName
init|=
name|s
decl_stmt|;
comment|// if the vertex name is longer than column 1 width, trim it down
comment|// "Tez Merge File Work" will become "Tez Merge File.."
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
name|COLUMN_1_WIDTH
condition|)
block|{
name|trimmedVName
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|COLUMN_1_WIDTH
operator|-
literal|1
argument_list|)
expr_stmt|;
name|trimmedVName
operator|=
name|trimmedVName
operator|+
literal|".."
expr_stmt|;
block|}
name|result
operator|=
name|trimmedVName
operator|+
literal|" "
expr_stmt|;
name|int
name|toFill
init|=
call|(
name|int
call|)
argument_list|(
name|spaceRemaining
operator|*
name|percent
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toFill
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|+=
literal|"."
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|String
name|getMode
parameter_list|(
name|BaseWork
name|work
parameter_list|)
block|{
name|String
name|mode
init|=
literal|"container"
decl_stmt|;
if|if
condition|(
name|work
operator|!=
literal|null
condition|)
block|{
comment|// uber> llap> container
if|if
condition|(
name|work
operator|.
name|getUberMode
argument_list|()
condition|)
block|{
name|mode
operator|=
literal|"uber"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|work
operator|.
name|getLlapMode
argument_list|()
condition|)
block|{
name|mode
operator|=
literal|"llap"
expr_stmt|;
block|}
else|else
block|{
name|mode
operator|=
literal|"container"
expr_stmt|;
block|}
block|}
return|return
name|mode
return|;
block|}
specifier|static
class|class
name|VertexProgress
block|{
specifier|private
specifier|final
name|int
name|totalTaskCount
decl_stmt|;
specifier|private
specifier|final
name|int
name|succeededTaskCount
decl_stmt|;
specifier|private
specifier|final
name|int
name|failedTaskAttemptCount
decl_stmt|;
specifier|private
specifier|final
name|long
name|killedTaskAttemptCount
decl_stmt|;
specifier|private
specifier|final
name|int
name|runningTaskCount
decl_stmt|;
specifier|private
specifier|final
name|DAGStatus
operator|.
name|State
name|dagState
decl_stmt|;
name|VertexProgress
parameter_list|(
name|Progress
name|progress
parameter_list|,
name|DAGStatus
operator|.
name|State
name|dagState
parameter_list|)
block|{
name|this
argument_list|(
name|progress
operator|.
name|getTotalTaskCount
argument_list|()
argument_list|,
name|progress
operator|.
name|getSucceededTaskCount
argument_list|()
argument_list|,
name|progress
operator|.
name|getFailedTaskAttemptCount
argument_list|()
argument_list|,
name|progress
operator|.
name|getKilledTaskAttemptCount
argument_list|()
argument_list|,
name|progress
operator|.
name|getRunningTaskCount
argument_list|()
argument_list|,
name|dagState
argument_list|)
expr_stmt|;
block|}
name|VertexProgress
parameter_list|(
name|int
name|totalTaskCount
parameter_list|,
name|int
name|succeededTaskCount
parameter_list|,
name|int
name|failedTaskAttemptCount
parameter_list|,
name|int
name|killedTaskAttemptCount
parameter_list|,
name|int
name|runningTaskCount
parameter_list|,
name|DAGStatus
operator|.
name|State
name|dagState
parameter_list|)
block|{
name|this
operator|.
name|totalTaskCount
operator|=
name|totalTaskCount
expr_stmt|;
name|this
operator|.
name|succeededTaskCount
operator|=
name|succeededTaskCount
expr_stmt|;
name|this
operator|.
name|failedTaskAttemptCount
operator|=
name|failedTaskAttemptCount
expr_stmt|;
name|this
operator|.
name|killedTaskAttemptCount
operator|=
name|killedTaskAttemptCount
expr_stmt|;
name|this
operator|.
name|runningTaskCount
operator|=
name|runningTaskCount
expr_stmt|;
name|this
operator|.
name|dagState
operator|=
name|dagState
expr_stmt|;
block|}
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|succeededTaskCount
operator|<
name|totalTaskCount
operator|&&
operator|(
name|succeededTaskCount
operator|>
literal|0
operator|||
name|runningTaskCount
operator|>
literal|0
operator|||
name|failedTaskAttemptCount
operator|>
literal|0
operator|)
return|;
block|}
name|String
name|vertexStatus
parameter_list|(
name|VertexStatus
name|vertexStatus
parameter_list|)
block|{
comment|// To get vertex status we can use DAGClient.getVertexStatus(), but it will be expensive to
comment|// get status from AM for every refresh of the UI. Lets infer the state from task counts.
comment|// Only if DAG is FAILED or KILLED the vertex status is fetched from AM.
name|VertexStatus
operator|.
name|State
name|vertexState
init|=
name|VertexStatus
operator|.
name|State
operator|.
name|INITIALIZING
decl_stmt|;
if|if
condition|(
name|totalTaskCount
operator|>
literal|0
condition|)
block|{
name|vertexState
operator|=
name|VertexStatus
operator|.
name|State
operator|.
name|INITED
expr_stmt|;
block|}
comment|// RUNNING state
if|if
condition|(
name|isRunning
argument_list|()
condition|)
block|{
name|vertexState
operator|=
name|VertexStatus
operator|.
name|State
operator|.
name|RUNNING
expr_stmt|;
block|}
comment|// SUCCEEDED state
if|if
condition|(
name|succeededTaskCount
operator|==
name|totalTaskCount
condition|)
block|{
name|vertexState
operator|=
name|VertexStatus
operator|.
name|State
operator|.
name|SUCCEEDED
expr_stmt|;
block|}
comment|// DAG might have been killed, lets try to get vertex state from AM before dying
comment|// KILLED or FAILED state
if|if
condition|(
name|dagState
operator|==
name|KILLED
condition|)
block|{
if|if
condition|(
name|vertexStatus
operator|!=
literal|null
condition|)
block|{
name|vertexState
operator|=
name|vertexStatus
operator|.
name|getState
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|vertexState
operator|.
name|toString
argument_list|()
return|;
block|}
comment|//    "TOTAL", "COMPLETED", "RUNNING", "PENDING", "FAILED", "KILLED"
name|String
name|total
parameter_list|()
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|totalTaskCount
argument_list|)
return|;
block|}
name|String
name|completed
parameter_list|()
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|succeededTaskCount
argument_list|)
return|;
block|}
name|String
name|running
parameter_list|()
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|runningTaskCount
argument_list|)
return|;
block|}
name|String
name|pending
parameter_list|()
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|totalTaskCount
operator|-
name|succeededTaskCount
operator|-
name|runningTaskCount
argument_list|)
return|;
block|}
name|String
name|failed
parameter_list|()
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|failedTaskAttemptCount
argument_list|)
return|;
block|}
name|String
name|killed
parameter_list|()
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|killedTaskAttemptCount
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|VertexProgress
name|that
init|=
operator|(
name|VertexProgress
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|totalTaskCount
operator|!=
name|that
operator|.
name|totalTaskCount
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|succeededTaskCount
operator|!=
name|that
operator|.
name|succeededTaskCount
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|failedTaskAttemptCount
operator|!=
name|that
operator|.
name|failedTaskAttemptCount
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|killedTaskAttemptCount
operator|!=
name|that
operator|.
name|killedTaskAttemptCount
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|runningTaskCount
operator|!=
name|that
operator|.
name|runningTaskCount
condition|)
return|return
literal|false
return|;
return|return
name|dagState
operator|==
name|that
operator|.
name|dagState
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|totalTaskCount
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|succeededTaskCount
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|failedTaskAttemptCount
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
call|(
name|int
call|)
argument_list|(
name|killedTaskAttemptCount
operator|^
operator|(
name|killedTaskAttemptCount
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|runningTaskCount
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|dagState
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
block|}
end_class

end_unit

