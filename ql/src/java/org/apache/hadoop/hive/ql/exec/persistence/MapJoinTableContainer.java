begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExprNodeEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorHashKeyWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorHashKeyWrapperBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpressionWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_interface
specifier|public
interface|interface
name|MapJoinTableContainer
block|{
comment|/**    * Retrieve rows from hashtable key by key, one key at a time, w/o copying the structures    * for each key. "Old" HashMapWrapper will still create/retrieve new objects for java HashMap;    * but the optimized one doesn't have to.    */
specifier|public
interface|interface
name|ReusableGetAdaptor
block|{
comment|/**      * Changes current rows to which adaptor is referring to the rows corresponding to      * the key represented by a VHKW object, and writers and batch used to interpret it.      */
name|void
name|setFromVector
parameter_list|(
name|VectorHashKeyWrapper
name|kw
parameter_list|,
name|VectorExpressionWriter
index|[]
name|keyOutputWriters
parameter_list|,
name|VectorHashKeyWrapperBatch
name|keyWrapperBatch
parameter_list|)
throws|throws
name|HiveException
function_decl|;
comment|/**      * Changes current rows to which adaptor is referring to the rows corresponding to      * the key represented by a row object, and fields and ois used to interpret it.      */
name|void
name|setFromRow
parameter_list|(
name|Object
name|row
parameter_list|,
name|List
argument_list|<
name|ExprNodeEvaluator
argument_list|>
name|fields
parameter_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|ois
parameter_list|)
throws|throws
name|HiveException
function_decl|;
comment|/**      * Changes current rows to which adaptor is referring to the rows corresponding to      * the key that another adaptor has already deserialized via setFromVector/setFromRow.      */
name|void
name|setFromOther
parameter_list|(
name|ReusableGetAdaptor
name|other
parameter_list|)
function_decl|;
comment|/**      * Checks whether the current key has any nulls.      */
name|boolean
name|hasAnyNulls
parameter_list|(
name|int
name|fieldCount
parameter_list|,
name|boolean
index|[]
name|nullsafes
parameter_list|)
function_decl|;
comment|/**      * @return The container w/the rows corresponding to a key set via a previous set... call.      */
name|MapJoinRowContainer
name|getCurrentRows
parameter_list|()
function_decl|;
comment|/**      * @return key      */
name|Object
index|[]
name|getCurrentKey
parameter_list|()
function_decl|;
block|}
comment|/**    * Adds row from input to the table.    */
name|MapJoinKey
name|putRow
parameter_list|(
name|MapJoinObjectSerDeContext
name|keyContext
parameter_list|,
name|Writable
name|currentKey
parameter_list|,
name|MapJoinObjectSerDeContext
name|valueContext
parameter_list|,
name|Writable
name|currentValue
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|HiveException
function_decl|;
comment|/**    * Indicates to the container that the puts have ended; table is now r/o.    */
name|void
name|seal
parameter_list|()
function_decl|;
comment|/**    * Creates reusable get adaptor that can be used to retrieve rows from the table    * based on either vectorized or non-vectorized input rows to MapJoinOperator.    * @param keyTypeFromLoader Last key from hash table loader, to determine key type used    *                          when loading hashtable (if it can vary).    */
name|ReusableGetAdaptor
name|createGetter
parameter_list|(
name|MapJoinKey
name|keyTypeFromLoader
parameter_list|)
function_decl|;
comment|/** Clears the contents of the table. */
name|void
name|clear
parameter_list|()
function_decl|;
name|MapJoinKey
name|getAnyKey
parameter_list|()
function_decl|;
name|void
name|dumpMetrics
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

