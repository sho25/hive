begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|translator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelCollations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|CalciteSemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveSortLimit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_class
specifier|public
class|class
name|PlanModifierUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PlanModifierUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|void
name|fixTopOBSchema
parameter_list|(
specifier|final
name|RelNode
name|rootRel
parameter_list|,
name|Pair
argument_list|<
name|RelNode
argument_list|,
name|RelNode
argument_list|>
name|topSelparentPair
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|resultSchema
parameter_list|,
name|boolean
name|replaceProject
parameter_list|)
throws|throws
name|CalciteSemanticException
block|{
if|if
condition|(
operator|!
operator|(
name|topSelparentPair
operator|.
name|getKey
argument_list|()
operator|instanceof
name|Sort
operator|)
operator|||
operator|!
name|HiveCalciteUtil
operator|.
name|orderRelNode
argument_list|(
name|topSelparentPair
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|HiveSortLimit
name|obRel
init|=
operator|(
name|HiveSortLimit
operator|)
name|topSelparentPair
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Project
name|obChild
init|=
operator|(
name|Project
operator|)
name|topSelparentPair
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|obChild
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
operator|<=
name|resultSchema
operator|.
name|size
argument_list|()
condition|)
block|{
return|return;
block|}
name|RelDataType
name|rt
init|=
name|obChild
operator|.
name|getRowType
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
name|Set
argument_list|<
name|Integer
argument_list|>
name|collationInputRefs
init|=
operator|new
name|HashSet
argument_list|(
name|RelCollations
operator|.
name|ordinals
argument_list|(
name|obRel
operator|.
name|getCollation
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|,
name|RexNode
argument_list|>
name|inputRefToCallMapBldr
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|resultSchema
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|rt
operator|.
name|getFieldCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|collationInputRefs
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|RexNode
name|obyExpr
init|=
name|obChild
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|obyExpr
operator|instanceof
name|RexCall
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Old RexCall : "
operator|+
name|obyExpr
argument_list|)
expr_stmt|;
name|obyExpr
operator|=
name|adjustOBSchema
argument_list|(
operator|(
name|RexCall
operator|)
name|obyExpr
argument_list|,
name|obChild
argument_list|,
name|resultSchema
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"New RexCall : "
operator|+
name|obyExpr
argument_list|)
expr_stmt|;
block|}
name|inputRefToCallMapBldr
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|obyExpr
argument_list|)
expr_stmt|;
block|}
block|}
name|ImmutableMap
argument_list|<
name|Integer
argument_list|,
name|RexNode
argument_list|>
name|inputRefToCallMap
init|=
name|inputRefToCallMapBldr
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|obChild
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
operator|-
name|inputRefToCallMap
operator|.
name|size
argument_list|()
operator|)
operator|!=
name|resultSchema
operator|.
name|size
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|generateInvalidSchemaMessage
argument_list|(
name|obChild
argument_list|,
name|resultSchema
argument_list|,
name|inputRefToCallMap
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CalciteSemanticException
argument_list|(
literal|"Result Schema didn't match Optimized Op Tree Schema"
argument_list|)
throw|;
block|}
if|if
condition|(
name|replaceProject
condition|)
block|{
comment|// This removes order-by only expressions from the projections.
name|HiveProject
name|replacementProjectRel
init|=
name|HiveProject
operator|.
name|create
argument_list|(
name|obChild
operator|.
name|getInput
argument_list|()
argument_list|,
name|obChild
operator|.
name|getChildExps
argument_list|()
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|resultSchema
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|obChild
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|resultSchema
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|obRel
operator|.
name|replaceInput
argument_list|(
literal|0
argument_list|,
name|replacementProjectRel
argument_list|)
expr_stmt|;
block|}
name|obRel
operator|.
name|setInputRefToCallMap
argument_list|(
name|inputRefToCallMap
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|RexCall
name|adjustOBSchema
parameter_list|(
name|RexCall
name|obyExpr
parameter_list|,
name|Project
name|obChild
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|resultSchema
parameter_list|)
block|{
name|int
name|a
init|=
operator|-
literal|1
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|obyExpr
operator|.
name|operands
operator|.
name|size
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|RexNode
name|rn
init|=
name|obyExpr
operator|.
name|operands
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|resultSchema
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|obChild
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|rn
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|a
operator|=
name|j
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|a
operator|!=
operator|-
literal|1
condition|)
block|{
name|operands
operator|.
name|add
argument_list|(
operator|new
name|RexInputRef
argument_list|(
name|a
argument_list|,
name|rn
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|rn
operator|instanceof
name|RexCall
condition|)
block|{
name|operands
operator|.
name|add
argument_list|(
name|adjustOBSchema
argument_list|(
operator|(
name|RexCall
operator|)
name|rn
argument_list|,
name|obChild
argument_list|,
name|resultSchema
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|operands
operator|.
name|add
argument_list|(
name|rn
argument_list|)
expr_stmt|;
block|}
block|}
name|a
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
operator|(
name|RexCall
operator|)
name|obChild
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeCall
argument_list|(
name|obyExpr
operator|.
name|getType
argument_list|()
argument_list|,
name|obyExpr
operator|.
name|getOperator
argument_list|()
argument_list|,
name|operands
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|String
name|generateInvalidSchemaMessage
parameter_list|(
name|Project
name|topLevelProj
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|resultSchema
parameter_list|,
name|int
name|fieldsForOB
parameter_list|)
block|{
name|String
name|errorDesc
init|=
literal|"Result Schema didn't match Calcite Optimized Op Tree; schema: "
decl_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|resultSchema
control|)
block|{
name|errorDesc
operator|+=
literal|"["
operator|+
name|fs
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|fs
operator|.
name|getType
argument_list|()
operator|+
literal|"], "
expr_stmt|;
block|}
name|errorDesc
operator|+=
literal|" projection fields: "
expr_stmt|;
for|for
control|(
name|RexNode
name|exp
range|:
name|topLevelProj
operator|.
name|getChildExps
argument_list|()
control|)
block|{
name|errorDesc
operator|+=
literal|"["
operator|+
name|exp
operator|.
name|toString
argument_list|()
operator|+
literal|":"
operator|+
name|exp
operator|.
name|getType
argument_list|()
operator|+
literal|"], "
expr_stmt|;
block|}
if|if
condition|(
name|fieldsForOB
operator|!=
literal|0
condition|)
block|{
name|errorDesc
operator|+=
name|fieldsForOB
operator|+
literal|" fields removed due to ORDER BY  "
expr_stmt|;
block|}
return|return
name|errorDesc
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|errorDesc
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
return|;
block|}
block|}
end_class

end_unit

