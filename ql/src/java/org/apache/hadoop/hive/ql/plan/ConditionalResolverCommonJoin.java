begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_comment
comment|/**  * ConditionalResolverSkewJoin.  *  */
end_comment

begin_class
specifier|public
class|class
name|ConditionalResolverCommonJoin
implements|implements
name|ConditionalResolver
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/**    * ConditionalResolverSkewJoinCtx.    *    */
specifier|public
specifier|static
class|class
name|ConditionalResolverCommonJoinCtx
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|aliasToTask
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|pathToAliases
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|aliasToKnownSize
decl_stmt|;
specifier|private
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|commonJoinTask
decl_stmt|;
specifier|private
name|String
name|localTmpDir
decl_stmt|;
specifier|private
name|String
name|hdfsTmpDir
decl_stmt|;
specifier|public
name|ConditionalResolverCommonJoinCtx
parameter_list|()
block|{     }
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|getAliasToTask
parameter_list|()
block|{
return|return
name|aliasToTask
return|;
block|}
specifier|public
name|void
name|setAliasToTask
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|aliasToTask
parameter_list|)
block|{
name|this
operator|.
name|aliasToTask
operator|=
name|aliasToTask
expr_stmt|;
block|}
specifier|public
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|getCommonJoinTask
parameter_list|()
block|{
return|return
name|commonJoinTask
return|;
block|}
specifier|public
name|void
name|setCommonJoinTask
parameter_list|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|commonJoinTask
parameter_list|)
block|{
name|this
operator|.
name|commonJoinTask
operator|=
name|commonJoinTask
expr_stmt|;
block|}
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getAliasToKnownSize
parameter_list|()
block|{
return|return
name|aliasToKnownSize
return|;
block|}
specifier|public
name|void
name|setAliasToKnownSize
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|aliasToKnownSize
parameter_list|)
block|{
name|this
operator|.
name|aliasToKnownSize
operator|=
name|aliasToKnownSize
expr_stmt|;
block|}
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|getPathToAliases
parameter_list|()
block|{
return|return
name|pathToAliases
return|;
block|}
specifier|public
name|void
name|setPathToAliases
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|pathToAliases
parameter_list|)
block|{
name|this
operator|.
name|pathToAliases
operator|=
name|pathToAliases
expr_stmt|;
block|}
specifier|public
name|String
name|getLocalTmpDir
parameter_list|()
block|{
return|return
name|localTmpDir
return|;
block|}
specifier|public
name|void
name|setLocalTmpDir
parameter_list|(
name|String
name|localTmpDir
parameter_list|)
block|{
name|this
operator|.
name|localTmpDir
operator|=
name|localTmpDir
expr_stmt|;
block|}
specifier|public
name|String
name|getHdfsTmpDir
parameter_list|()
block|{
return|return
name|hdfsTmpDir
return|;
block|}
specifier|public
name|void
name|setHdfsTmpDir
parameter_list|(
name|String
name|hdfsTmpDir
parameter_list|)
block|{
name|this
operator|.
name|hdfsTmpDir
operator|=
name|hdfsTmpDir
expr_stmt|;
block|}
block|}
specifier|public
name|ConditionalResolverCommonJoin
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|getTasks
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|Object
name|objCtx
parameter_list|)
block|{
name|ConditionalResolverCommonJoinCtx
name|ctx
init|=
operator|(
name|ConditionalResolverCommonJoinCtx
operator|)
name|objCtx
decl_stmt|;
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|resTsks
init|=
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// get aliasToPath and pass it to the heuristic
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|pathToAliases
init|=
name|ctx
operator|.
name|getPathToAliases
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|aliasToKnownSize
init|=
name|ctx
operator|.
name|getAliasToKnownSize
argument_list|()
decl_stmt|;
name|String
name|bigTableAlias
init|=
name|this
operator|.
name|resolveMapJoinTask
argument_list|(
name|pathToAliases
argument_list|,
name|ctx
operator|.
name|getAliasToTask
argument_list|()
argument_list|,
name|aliasToKnownSize
argument_list|,
name|ctx
operator|.
name|getHdfsTmpDir
argument_list|()
argument_list|,
name|ctx
operator|.
name|getLocalTmpDir
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|bigTableAlias
operator|==
literal|null
condition|)
block|{
comment|// run common join task
name|resTsks
operator|.
name|add
argument_list|(
name|ctx
operator|.
name|getCommonJoinTask
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// run the map join task
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
init|=
name|ctx
operator|.
name|getAliasToTask
argument_list|()
operator|.
name|get
argument_list|(
name|bigTableAlias
argument_list|)
decl_stmt|;
comment|//set task tag
if|if
condition|(
name|task
operator|.
name|getTaskTag
argument_list|()
operator|==
name|Task
operator|.
name|CONVERTED_LOCAL_MAPJOIN
condition|)
block|{
name|task
operator|.
name|getBackupTask
argument_list|()
operator|.
name|setTaskTag
argument_list|(
name|Task
operator|.
name|BACKUP_COMMON_JOIN
argument_list|)
expr_stmt|;
block|}
name|resTsks
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
return|return
name|resTsks
return|;
block|}
class|class
name|AliasFileSizePair
implements|implements
name|Comparable
argument_list|<
name|AliasFileSizePair
argument_list|>
block|{
name|String
name|alias
decl_stmt|;
name|long
name|size
decl_stmt|;
name|AliasFileSizePair
parameter_list|(
name|String
name|alias
parameter_list|,
name|long
name|size
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|alias
operator|=
name|alias
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|AliasFileSizePair
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
call|(
name|int
call|)
argument_list|(
name|size
operator|-
name|o
operator|.
name|size
argument_list|)
return|;
block|}
block|}
specifier|private
name|String
name|resolveMapJoinTask
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|pathToAliases
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|aliasToTask
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|aliasToKnownSize
parameter_list|,
name|String
name|hdfsTmpDir
parameter_list|,
name|String
name|localTmpDir
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
block|{
name|String
name|bigTableFileAlias
init|=
literal|null
decl_stmt|;
name|long
name|smallTablesFileSizeSum
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|AliasFileSizePair
argument_list|>
name|aliasToFileSizeMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|AliasFileSizePair
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|aliasToKnownSize
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|alias
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|AliasFileSizePair
name|pair
init|=
operator|new
name|AliasFileSizePair
argument_list|(
name|alias
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|aliasToFileSizeMap
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|pair
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// need to compute the input size at runtime, and select the biggest as
comment|// the big table.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|oneEntry
range|:
name|pathToAliases
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|p
init|=
name|oneEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// this path is intermediate data
if|if
condition|(
name|p
operator|.
name|startsWith
argument_list|(
name|hdfsTmpDir
argument_list|)
operator|||
name|p
operator|.
name|startsWith
argument_list|(
name|localTmpDir
argument_list|)
condition|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|aliasArray
init|=
name|oneEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|aliasArray
operator|.
name|size
argument_list|()
operator|<=
literal|0
condition|)
block|{
continue|continue;
block|}
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|long
name|fileSize
init|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|path
argument_list|)
operator|.
name|getLength
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|aliasArray
control|)
block|{
name|AliasFileSizePair
name|pair
init|=
name|aliasToFileSizeMap
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|==
literal|null
condition|)
block|{
name|pair
operator|=
operator|new
name|AliasFileSizePair
argument_list|(
name|alias
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|aliasToFileSizeMap
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|pair
argument_list|)
expr_stmt|;
block|}
name|pair
operator|.
name|size
operator|+=
name|fileSize
expr_stmt|;
block|}
block|}
block|}
comment|// generate file size to alias mapping; but not set file size as key,
comment|// because different file may have the same file size.
name|List
argument_list|<
name|AliasFileSizePair
argument_list|>
name|aliasFileSizeList
init|=
operator|new
name|ArrayList
argument_list|<
name|AliasFileSizePair
argument_list|>
argument_list|(
name|aliasToFileSizeMap
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|aliasFileSizeList
argument_list|)
expr_stmt|;
comment|// iterating through this list from the end to beginning, trying to find
comment|// the big table for mapjoin
name|int
name|idx
init|=
name|aliasFileSizeList
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|boolean
name|bigAliasFound
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
name|AliasFileSizePair
name|pair
init|=
name|aliasFileSizeList
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|String
name|alias
init|=
name|pair
operator|.
name|alias
decl_stmt|;
name|long
name|size
init|=
name|pair
operator|.
name|size
decl_stmt|;
if|if
condition|(
operator|!
name|bigAliasFound
operator|&&
name|aliasToTask
operator|.
name|get
argument_list|(
name|alias
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// got the big table
name|bigAliasFound
operator|=
literal|true
expr_stmt|;
name|bigTableFileAlias
operator|=
name|alias
expr_stmt|;
continue|continue;
block|}
name|smallTablesFileSizeSum
operator|+=
name|size
expr_stmt|;
name|idx
operator|--
expr_stmt|;
block|}
comment|// compare with threshold
name|long
name|threshold
init|=
name|HiveConf
operator|.
name|getLongVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESMALLTABLESFILESIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|smallTablesFileSizeSum
operator|<=
name|threshold
condition|)
block|{
return|return
name|bigTableFileAlias
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

