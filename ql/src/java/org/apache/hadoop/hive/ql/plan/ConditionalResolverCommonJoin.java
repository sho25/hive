begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_comment
comment|/**  * ConditionalResolverSkewJoin.  *  */
end_comment

begin_class
specifier|public
class|class
name|ConditionalResolverCommonJoin
implements|implements
name|ConditionalResolver
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/**    * ConditionalResolverSkewJoinCtx.    *    */
specifier|public
specifier|static
class|class
name|ConditionalResolverCommonJoinCtx
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|aliasToTask
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aliasToPath
decl_stmt|;
specifier|private
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|commonJoinTask
decl_stmt|;
specifier|public
name|ConditionalResolverCommonJoinCtx
parameter_list|()
block|{     }
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|getAliasToTask
parameter_list|()
block|{
return|return
name|aliasToTask
return|;
block|}
specifier|public
name|void
name|setAliasToTask
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|aliasToTask
parameter_list|)
block|{
name|this
operator|.
name|aliasToTask
operator|=
name|aliasToTask
expr_stmt|;
block|}
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getAliasToPath
parameter_list|()
block|{
return|return
name|aliasToPath
return|;
block|}
specifier|public
name|void
name|setAliasToPath
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aliasToPath
parameter_list|)
block|{
name|this
operator|.
name|aliasToPath
operator|=
name|aliasToPath
expr_stmt|;
block|}
specifier|public
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|getCommonJoinTask
parameter_list|()
block|{
return|return
name|commonJoinTask
return|;
block|}
specifier|public
name|void
name|setCommonJoinTask
parameter_list|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|commonJoinTask
parameter_list|)
block|{
name|this
operator|.
name|commonJoinTask
operator|=
name|commonJoinTask
expr_stmt|;
block|}
block|}
specifier|public
name|ConditionalResolverCommonJoin
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|getTasks
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|Object
name|objCtx
parameter_list|)
block|{
name|ConditionalResolverCommonJoinCtx
name|ctx
init|=
operator|(
name|ConditionalResolverCommonJoinCtx
operator|)
name|objCtx
decl_stmt|;
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|resTsks
init|=
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// get aliasToPath and pass it to the heuristic
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aliasToPath
init|=
name|ctx
operator|.
name|getAliasToPath
argument_list|()
decl_stmt|;
name|String
name|bigTableAlias
init|=
name|this
operator|.
name|resolveMapJoinTask
argument_list|(
name|aliasToPath
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|bigTableAlias
operator|==
literal|null
condition|)
block|{
comment|// run common join task
name|resTsks
operator|.
name|add
argument_list|(
name|ctx
operator|.
name|getCommonJoinTask
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// run the map join task
name|resTsks
operator|.
name|add
argument_list|(
name|ctx
operator|.
name|getAliasToTask
argument_list|()
operator|.
name|get
argument_list|(
name|bigTableAlias
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resTsks
return|;
block|}
specifier|private
name|String
name|resolveMapJoinTask
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aliasToPath
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
block|{
comment|// for the full out join; return null directly
if|if
condition|(
name|aliasToPath
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// generate file size to alias mapping; but not set file size as key,
comment|// because different file may have the same file size.
name|List
argument_list|<
name|String
argument_list|>
name|aliasList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|fileSizeList
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|aliasToPath
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|alias
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|pathStr
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|pathStr
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|fstatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|long
name|fileSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fstatus
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fileSize
operator|+=
name|fstatus
index|[
name|i
index|]
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fileSize
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Input file size is 0"
argument_list|)
throw|;
block|}
comment|// put into list and sorted set
name|aliasList
operator|.
name|add
argument_list|(
name|alias
argument_list|)
expr_stmt|;
name|fileSizeList
operator|.
name|add
argument_list|(
name|fileSize
argument_list|)
expr_stmt|;
block|}
comment|// sorted based file size
name|List
argument_list|<
name|Long
argument_list|>
name|sortedList
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
name|fileSizeList
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedList
argument_list|)
expr_stmt|;
comment|// get big table file size and small table file size summary
name|long
name|bigTableFileSize
init|=
literal|0
decl_stmt|;
name|long
name|smallTablesFileSizeSum
init|=
literal|0
decl_stmt|;
name|String
name|bigTableFileAlias
init|=
literal|null
decl_stmt|;
name|int
name|size
init|=
name|sortedList
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|tmpIndex
decl_stmt|;
comment|// Iterate the sorted_set to get big/small table file size
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|sortedList
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|Long
name|key
init|=
name|sortedList
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|(
name|size
operator|-
literal|1
operator|)
condition|)
block|{
name|smallTablesFileSizeSum
operator|+=
name|key
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|tmpIndex
operator|=
name|fileSizeList
operator|.
name|indexOf
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|String
name|alias
init|=
name|aliasList
operator|.
name|get
argument_list|(
name|tmpIndex
argument_list|)
decl_stmt|;
name|bigTableFileSize
operator|+=
name|key
operator|.
name|longValue
argument_list|()
expr_stmt|;
name|bigTableFileAlias
operator|=
name|alias
expr_stmt|;
block|}
block|}
comment|// compare with threshold
name|long
name|threshold
init|=
name|HiveConf
operator|.
name|getLongVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESMALLTABLESFILESIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|smallTablesFileSizeSum
operator|<=
name|threshold
condition|)
block|{
return|return
name|bigTableFileAlias
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

