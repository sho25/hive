begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|aggregationDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|exprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|groupByDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|SerDeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * GroupBy operator implementation.  */
end_comment

begin_class
specifier|public
class|class
name|GroupByOperator
extends|extends
name|Operator
argument_list|<
name|groupByDesc
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|transient
specifier|protected
name|ExprNodeEvaluator
index|[]
name|keyFields
decl_stmt|;
specifier|transient
specifier|protected
name|ExprNodeEvaluator
index|[]
index|[]
name|aggregationParameterFields
decl_stmt|;
comment|// In the future, we may allow both count(DISTINCT a) and sum(DISTINCT a) in the same SQL clause,
comment|// so aggregationIsDistinct is a boolean array instead of a single number.
specifier|transient
specifier|protected
name|boolean
index|[]
name|aggregationIsDistinct
decl_stmt|;
specifier|transient
name|Class
argument_list|<
name|?
extends|extends
name|UDAF
argument_list|>
index|[]
name|aggregationClasses
decl_stmt|;
specifier|transient
specifier|protected
name|Method
index|[]
name|aggregationsAggregateMethods
decl_stmt|;
specifier|transient
specifier|protected
name|Method
index|[]
name|aggregationsEvaluateMethods
decl_stmt|;
specifier|transient
specifier|protected
name|List
argument_list|<
name|SerDeField
argument_list|>
name|choKeyFields
decl_stmt|;
comment|// Used by sort-based GroupBy: Mode = COMPLETE, PARTIAL1, PARTIAL2
specifier|transient
specifier|protected
name|CompositeHiveObject
name|currentKeys
decl_stmt|;
specifier|transient
specifier|protected
name|UDAF
index|[]
name|aggregations
decl_stmt|;
specifier|transient
specifier|protected
name|Object
index|[]
index|[]
name|aggregationsParametersLastInvoke
decl_stmt|;
comment|// Used by hash-based GroupBy: Mode = HASH
specifier|transient
specifier|protected
name|HashMap
argument_list|<
name|CompositeHiveObject
argument_list|,
name|UDAF
index|[]
argument_list|>
name|hashAggregations
decl_stmt|;
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
try|try
block|{
comment|// init keyFields
name|keyFields
operator|=
operator|new
name|ExprNodeEvaluator
index|[
name|conf
operator|.
name|getKeys
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|keyFields
index|[
name|i
index|]
operator|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|conf
operator|.
name|getKeys
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// init aggregationParameterFields
name|aggregationParameterFields
operator|=
operator|new
name|ExprNodeEvaluator
index|[
name|conf
operator|.
name|getAggregators
argument_list|()
operator|.
name|size
argument_list|()
index|]
index|[]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregationParameterFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
name|parameters
init|=
name|conf
operator|.
name|getAggregators
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|aggregationParameterFields
index|[
name|i
index|]
operator|=
operator|new
name|ExprNodeEvaluator
index|[
name|parameters
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|parameters
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|aggregationParameterFields
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// init aggregationIsDistinct
name|aggregationIsDistinct
operator|=
operator|new
name|boolean
index|[
name|conf
operator|.
name|getAggregators
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregationIsDistinct
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|aggregationIsDistinct
index|[
name|i
index|]
operator|=
name|conf
operator|.
name|getAggregators
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getDistinct
argument_list|()
expr_stmt|;
block|}
comment|// init aggregationClasses
name|aggregationClasses
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|UDAF
argument_list|>
index|[]
operator|)
operator|new
name|Class
index|[
name|conf
operator|.
name|getAggregators
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|conf
operator|.
name|getAggregators
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|aggregationDesc
name|agg
init|=
name|conf
operator|.
name|getAggregators
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|aggregationClasses
index|[
name|i
index|]
operator|=
name|agg
operator|.
name|getAggregationClass
argument_list|()
expr_stmt|;
block|}
comment|// init aggregations, aggregationsAggregateMethods,
comment|// aggregationsEvaluateMethods
name|aggregationsAggregateMethods
operator|=
operator|new
name|Method
index|[
name|aggregationClasses
operator|.
name|length
index|]
expr_stmt|;
name|aggregationsEvaluateMethods
operator|=
operator|new
name|Method
index|[
name|aggregationClasses
operator|.
name|length
index|]
expr_stmt|;
name|String
name|aggregateMethodName
init|=
operator|(
name|conf
operator|.
name|getMode
argument_list|()
operator|==
name|groupByDesc
operator|.
name|Mode
operator|.
name|PARTIAL2
condition|?
literal|"aggregatePartial"
else|:
literal|"aggregate"
operator|)
decl_stmt|;
name|String
name|evaluateMethodName
init|=
operator|(
operator|(
name|conf
operator|.
name|getMode
argument_list|()
operator|==
name|groupByDesc
operator|.
name|Mode
operator|.
name|PARTIAL1
operator|||
name|conf
operator|.
name|getMode
argument_list|()
operator|==
name|groupByDesc
operator|.
name|Mode
operator|.
name|HASH
operator|)
condition|?
literal|"evaluatePartial"
else|:
literal|"evaluate"
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregationClasses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// aggregationsAggregateMethods
for|for
control|(
name|Method
name|m
range|:
name|aggregationClasses
index|[
name|i
index|]
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|aggregateMethodName
argument_list|)
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
name|aggregationParameterFields
index|[
name|i
index|]
operator|.
name|length
condition|)
block|{
name|aggregationsAggregateMethods
index|[
name|i
index|]
operator|=
name|m
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
literal|null
operator|==
name|aggregationsAggregateMethods
index|[
name|i
index|]
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot find "
operator|+
name|aggregateMethodName
operator|+
literal|" method of UDAF class "
operator|+
name|aggregationClasses
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|" that accepts "
operator|+
name|aggregationParameterFields
index|[
name|i
index|]
operator|.
name|length
operator|+
literal|" parameters!"
argument_list|)
throw|;
block|}
comment|// aggregationsEvaluateMethods
name|aggregationsEvaluateMethods
index|[
name|i
index|]
operator|=
name|aggregationClasses
index|[
name|i
index|]
operator|.
name|getMethod
argument_list|(
name|evaluateMethodName
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|aggregationsEvaluateMethods
index|[
name|i
index|]
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot find "
operator|+
name|evaluateMethodName
operator|+
literal|" method of UDAF class "
operator|+
name|aggregationClasses
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|"!"
argument_list|)
throw|;
block|}
assert|assert
operator|(
name|aggregationsEvaluateMethods
index|[
name|i
index|]
operator|!=
literal|null
operator|)
assert|;
block|}
if|if
condition|(
name|conf
operator|.
name|getMode
argument_list|()
operator|!=
name|groupByDesc
operator|.
name|Mode
operator|.
name|HASH
condition|)
block|{
name|aggregationsParametersLastInvoke
operator|=
operator|new
name|Object
index|[
name|conf
operator|.
name|getAggregators
argument_list|()
operator|.
name|size
argument_list|()
index|]
index|[]
expr_stmt|;
name|aggregations
operator|=
name|newAggregations
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|hashAggregations
operator|=
operator|new
name|HashMap
argument_list|<
name|CompositeHiveObject
argument_list|,
name|UDAF
index|[]
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|UDAF
index|[]
name|newAggregations
parameter_list|()
throws|throws
name|Exception
block|{
name|UDAF
index|[]
name|aggs
init|=
operator|new
name|UDAF
index|[
name|aggregationClasses
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregationClasses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|aggs
index|[
name|i
index|]
operator|=
name|aggregationClasses
index|[
name|i
index|]
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|aggs
index|[
name|i
index|]
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
return|return
name|aggs
return|;
block|}
specifier|protected
name|void
name|updateAggregations
parameter_list|(
name|UDAF
index|[]
name|aggs
parameter_list|,
name|HiveObject
name|row
parameter_list|,
name|Object
index|[]
index|[]
name|lastInvoke
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|ai
init|=
literal|0
init|;
name|ai
operator|<
name|aggs
operator|.
name|length
condition|;
name|ai
operator|++
control|)
block|{
comment|// Calculate the parameters
name|Object
index|[]
name|o
init|=
operator|new
name|Object
index|[
name|aggregationParameterFields
index|[
name|ai
index|]
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|pi
init|=
literal|0
init|;
name|pi
operator|<
name|aggregationParameterFields
index|[
name|ai
index|]
operator|.
name|length
condition|;
name|pi
operator|++
control|)
block|{
name|o
index|[
name|pi
index|]
operator|=
name|aggregationParameterFields
index|[
name|ai
index|]
index|[
name|pi
index|]
operator|.
name|evaluateToObject
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
comment|// Update the aggregations.
if|if
condition|(
name|aggregationIsDistinct
index|[
name|ai
index|]
operator|&&
name|lastInvoke
operator|!=
literal|null
condition|)
block|{
comment|// different differentParameters?
name|boolean
name|differentParameters
init|=
operator|(
name|lastInvoke
index|[
name|ai
index|]
operator|==
literal|null
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|differentParameters
condition|)
block|{
for|for
control|(
name|int
name|pi
init|=
literal|0
init|;
name|pi
operator|<
name|o
operator|.
name|length
condition|;
name|pi
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|o
index|[
name|pi
index|]
operator|.
name|equals
argument_list|(
name|lastInvoke
index|[
name|ai
index|]
index|[
name|pi
index|]
argument_list|)
condition|)
block|{
name|differentParameters
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|differentParameters
condition|)
block|{
name|aggregationsAggregateMethods
index|[
name|ai
index|]
operator|.
name|invoke
argument_list|(
name|aggs
index|[
name|ai
index|]
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|lastInvoke
index|[
name|ai
index|]
operator|=
name|o
expr_stmt|;
block|}
block|}
else|else
block|{
name|aggregationsAggregateMethods
index|[
name|ai
index|]
operator|.
name|invoke
argument_list|(
name|aggs
index|[
name|ai
index|]
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|process
parameter_list|(
name|HiveObject
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
comment|// Compute the keys
name|ArrayList
argument_list|<
name|HiveObject
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveObject
argument_list|>
argument_list|(
name|keyFields
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|keys
operator|.
name|add
argument_list|(
name|keyFields
index|[
name|i
index|]
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CompositeHiveObject
name|newKeys
init|=
operator|new
name|CompositeHiveObject
argument_list|(
name|keys
argument_list|)
decl_stmt|;
comment|// Prepare aggs for updating
name|UDAF
index|[]
name|aggs
init|=
literal|null
decl_stmt|;
name|Object
index|[]
index|[]
name|lastInvoke
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|aggregations
operator|!=
literal|null
condition|)
block|{
comment|// sort-based aggregation
comment|// Need to forward?
if|if
condition|(
name|currentKeys
operator|!=
literal|null
operator|&&
operator|!
name|newKeys
operator|.
name|equals
argument_list|(
name|currentKeys
argument_list|)
condition|)
block|{
name|forward
argument_list|(
name|currentKeys
argument_list|,
name|aggregations
argument_list|)
expr_stmt|;
block|}
comment|// Need to update the keys?
if|if
condition|(
name|currentKeys
operator|==
literal|null
operator|||
operator|!
name|newKeys
operator|.
name|equals
argument_list|(
name|currentKeys
argument_list|)
condition|)
block|{
name|currentKeys
operator|=
name|newKeys
expr_stmt|;
comment|// init aggregations
for|for
control|(
name|UDAF
name|aggregation
range|:
name|aggregations
control|)
block|{
name|aggregation
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
comment|// clear parameters in last-invoke
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregationsParametersLastInvoke
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|aggregationsParametersLastInvoke
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|aggs
operator|=
name|aggregations
expr_stmt|;
name|lastInvoke
operator|=
name|aggregationsParametersLastInvoke
expr_stmt|;
block|}
else|else
block|{
comment|// hash-based aggregations
name|aggs
operator|=
name|hashAggregations
operator|.
name|get
argument_list|(
name|newKeys
argument_list|)
expr_stmt|;
if|if
condition|(
name|aggs
operator|==
literal|null
condition|)
block|{
name|aggs
operator|=
name|newAggregations
argument_list|()
expr_stmt|;
name|hashAggregations
operator|.
name|put
argument_list|(
name|newKeys
argument_list|,
name|aggs
argument_list|)
expr_stmt|;
comment|// TODO: Hash aggregation does not support DISTINCT now
name|lastInvoke
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// Update the aggs
name|updateAggregations
argument_list|(
name|aggs
argument_list|,
name|row
argument_list|,
name|lastInvoke
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Forward a record of keys and aggregation results.    *     * @param keys    *          The keys in the record    * @throws HiveException    */
specifier|protected
name|void
name|forward
parameter_list|(
name|CompositeHiveObject
name|keys
parameter_list|,
name|UDAF
index|[]
name|aggs
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|choKeyFields
operator|==
literal|null
condition|)
block|{
comment|// init choKeyFields
name|choKeyFields
operator|=
operator|new
name|ArrayList
argument_list|<
name|SerDeField
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|choKeyFields
operator|.
name|add
argument_list|(
name|keys
operator|.
name|getFieldFromExpression
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|totalFields
init|=
name|keys
operator|.
name|width
operator|+
name|aggs
operator|.
name|length
decl_stmt|;
name|CompositeHiveObject
name|cho
init|=
operator|new
name|CompositeHiveObject
argument_list|(
name|totalFields
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|width
condition|;
name|i
operator|++
control|)
block|{
name|cho
operator|.
name|addHiveObject
argument_list|(
name|keys
operator|.
name|get
argument_list|(
name|choKeyFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cho
operator|.
name|addHiveObject
argument_list|(
operator|new
name|PrimitiveHiveObject
argument_list|(
name|aggregationsEvaluateMethods
index|[
name|i
index|]
operator|.
name|invoke
argument_list|(
name|aggs
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|forward
argument_list|(
name|cho
argument_list|)
expr_stmt|;
block|}
comment|/**    * We need to forward all the aggregations to children.    *     */
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|abort
condition|)
block|{
try|try
block|{
if|if
condition|(
name|aggregations
operator|!=
literal|null
condition|)
block|{
comment|// sort-based aggregations
if|if
condition|(
name|currentKeys
operator|!=
literal|null
condition|)
block|{
name|forward
argument_list|(
name|currentKeys
argument_list|,
name|aggregations
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|hashAggregations
operator|!=
literal|null
condition|)
block|{
comment|// hash-based aggregations
for|for
control|(
name|CompositeHiveObject
name|key
range|:
name|hashAggregations
operator|.
name|keySet
argument_list|()
control|)
block|{
name|forward
argument_list|(
name|key
argument_list|,
name|hashAggregations
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// The GroupByOperator is not initialized, which means there is no data
comment|// (since we initialize the operators when we see the first record).
comment|// Just do nothing here.
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|super
operator|.
name|close
argument_list|(
name|abort
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

