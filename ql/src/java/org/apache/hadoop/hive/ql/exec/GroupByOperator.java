begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MemoryMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|OpParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AggregationDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|GroupByDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
operator|.
name|AggregationBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|ByteArrayRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyBinary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyPrimitive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LazyBinaryObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LazyStringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
operator|.
name|ObjectInspectorCopyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|UnionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|javolution
operator|.
name|util
operator|.
name|FastBitSet
import|;
end_import

begin_comment
comment|/**  * GroupBy operator implementation.  */
end_comment

begin_class
specifier|public
class|class
name|GroupByOperator
extends|extends
name|Operator
argument_list|<
name|GroupByDesc
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUMROWSESTIMATESIZE
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|transient
name|ExprNodeEvaluator
index|[]
name|keyFields
decl_stmt|;
specifier|private
specifier|transient
name|ObjectInspector
index|[]
name|keyObjectInspectors
decl_stmt|;
specifier|private
specifier|transient
name|ExprNodeEvaluator
index|[]
index|[]
name|aggregationParameterFields
decl_stmt|;
specifier|private
specifier|transient
name|ObjectInspector
index|[]
index|[]
name|aggregationParameterObjectInspectors
decl_stmt|;
specifier|private
specifier|transient
name|ObjectInspector
index|[]
index|[]
name|aggregationParameterStandardObjectInspectors
decl_stmt|;
specifier|private
specifier|transient
name|Object
index|[]
index|[]
name|aggregationParameterObjects
decl_stmt|;
comment|// so aggregationIsDistinct is a boolean array instead of a single number.
specifier|private
specifier|transient
name|boolean
index|[]
name|aggregationIsDistinct
decl_stmt|;
comment|// Map from integer tag to distinct aggrs
specifier|private
specifier|transient
name|Map
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|distinctKeyAggrs
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// Map from integer tag to non-distinct aggrs with key parameters.
specifier|private
specifier|transient
name|Map
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|nonDistinctKeyAggrs
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// List of non-distinct aggrs.
specifier|private
specifier|transient
name|List
argument_list|<
name|Integer
argument_list|>
name|nonDistinctAggrs
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|// Union expr for distinct keys
specifier|private
specifier|transient
name|ExprNodeEvaluator
name|unionExprEval
decl_stmt|;
specifier|private
specifier|transient
name|GenericUDAFEvaluator
index|[]
name|aggregationEvaluators
decl_stmt|;
specifier|private
specifier|transient
name|boolean
index|[]
name|estimableAggregationEvaluators
decl_stmt|;
comment|// Used by sort-based GroupBy: Mode = COMPLETE, PARTIAL1, PARTIAL2,
comment|// MERGEPARTIAL
specifier|private
specifier|transient
name|KeyWrapper
name|currentKeys
decl_stmt|;
specifier|private
specifier|transient
name|KeyWrapper
name|newKeys
decl_stmt|;
specifier|private
specifier|transient
name|AggregationBuffer
index|[]
name|aggregations
decl_stmt|;
specifier|private
specifier|transient
name|Object
index|[]
index|[]
name|aggregationsParametersLastInvoke
decl_stmt|;
comment|// Used by hash-based GroupBy: Mode = HASH, PARTIALS
specifier|private
specifier|transient
name|HashMap
argument_list|<
name|KeyWrapper
argument_list|,
name|AggregationBuffer
index|[]
argument_list|>
name|hashAggregations
decl_stmt|;
specifier|private
specifier|transient
name|boolean
name|firstRow
decl_stmt|;
specifier|private
specifier|transient
name|boolean
name|hashAggr
decl_stmt|;
specifier|private
specifier|transient
name|long
name|numRowsInput
decl_stmt|;
specifier|private
specifier|transient
name|long
name|numRowsHashTbl
decl_stmt|;
specifier|private
specifier|transient
name|int
name|groupbyMapAggrInterval
decl_stmt|;
specifier|private
specifier|transient
name|long
name|numRowsCompareHashAggr
decl_stmt|;
specifier|private
specifier|transient
name|float
name|minReductionHashAggr
decl_stmt|;
specifier|private
specifier|transient
name|int
name|outputKeyLength
decl_stmt|;
comment|// current Key ObjectInspectors are standard ObjectInspectors
specifier|private
specifier|transient
name|ObjectInspector
index|[]
name|currentKeyObjectInspectors
decl_stmt|;
specifier|private
specifier|transient
name|MemoryMXBean
name|memoryMXBean
decl_stmt|;
specifier|private
specifier|transient
name|boolean
name|groupingSetsPresent
decl_stmt|;
comment|// generates grouping set
specifier|private
specifier|transient
name|int
name|groupingSetsPosition
decl_stmt|;
comment|// position of grouping set, generally the last of keys
specifier|private
specifier|transient
name|List
argument_list|<
name|Integer
argument_list|>
name|groupingSets
decl_stmt|;
comment|// declared grouping set values
specifier|private
specifier|transient
name|FastBitSet
index|[]
name|groupingSetsBitSet
decl_stmt|;
comment|// bitsets acquired from grouping set values
specifier|private
specifier|transient
name|IntWritable
index|[]
name|newKeysGroupingSets
decl_stmt|;
comment|// for these positions, some variable primitive type (String) is used, so size
comment|// cannot be estimated. sample it at runtime.
specifier|private
specifier|transient
name|List
argument_list|<
name|Integer
argument_list|>
name|keyPositionsSize
decl_stmt|;
comment|// for these positions, some variable primitive type (String) is used for the
comment|// aggregation classes
specifier|private
specifier|transient
name|List
argument_list|<
name|Field
argument_list|>
index|[]
name|aggrPositions
decl_stmt|;
specifier|private
specifier|transient
name|int
name|fixedRowSize
decl_stmt|;
specifier|private
specifier|transient
name|int
name|totalVariableSize
decl_stmt|;
specifier|private
specifier|transient
name|int
name|numEntriesVarSize
decl_stmt|;
specifier|private
specifier|transient
name|int
name|countAfterReport
decl_stmt|;
comment|// report or forward
specifier|private
specifier|transient
name|int
name|heartbeatInterval
decl_stmt|;
specifier|private
specifier|transient
name|boolean
name|isTez
decl_stmt|;
specifier|private
specifier|transient
name|boolean
name|isLlap
decl_stmt|;
specifier|private
specifier|transient
name|int
name|numExecutors
decl_stmt|;
comment|/**    * Total amount of memory allowed for JVM heap.    */
specifier|protected
specifier|transient
name|long
name|maxMemory
decl_stmt|;
comment|/**    * Max memory usable by the hashtable before it should flush.    */
specifier|protected
specifier|transient
name|long
name|maxHashTblMemory
decl_stmt|;
comment|/**    * configure percent of memory threshold usable by QP.    */
specifier|protected
specifier|transient
name|float
name|memoryThreshold
decl_stmt|;
comment|/**    * Current number of entries in the hash table.    */
specifier|protected
specifier|transient
name|int
name|numEntriesHashTable
decl_stmt|;
specifier|public
specifier|static
name|FastBitSet
name|groupingSet2BitSet
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|FastBitSet
name|bits
init|=
operator|new
name|FastBitSet
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|value
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|value
operator|%
literal|2
operator|!=
literal|0
condition|)
block|{
name|bits
operator|.
name|set
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
operator|++
name|index
expr_stmt|;
name|value
operator|=
name|value
operator|>>>
literal|1
expr_stmt|;
block|}
return|return
name|bits
return|;
block|}
comment|/** Kryo ctor. */
specifier|protected
name|GroupByOperator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|GroupByOperator
parameter_list|(
name|CompilationOpContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|initializeOp
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|numRowsInput
operator|=
literal|0
expr_stmt|;
name|numRowsHashTbl
operator|=
literal|0
expr_stmt|;
name|heartbeatInterval
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESENDHEARTBEAT
argument_list|)
expr_stmt|;
name|countAfterReport
operator|=
literal|0
expr_stmt|;
name|groupingSetsPresent
operator|=
name|conf
operator|.
name|isGroupingSetsPresent
argument_list|()
expr_stmt|;
name|ObjectInspector
name|rowInspector
init|=
name|inputObjInspectors
index|[
literal|0
index|]
decl_stmt|;
comment|// init keyFields
name|int
name|numKeys
init|=
name|conf
operator|.
name|getKeys
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|keyFields
operator|=
operator|new
name|ExprNodeEvaluator
index|[
name|numKeys
index|]
expr_stmt|;
name|keyObjectInspectors
operator|=
operator|new
name|ObjectInspector
index|[
name|numKeys
index|]
expr_stmt|;
name|currentKeyObjectInspectors
operator|=
operator|new
name|ObjectInspector
index|[
name|numKeys
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numKeys
condition|;
name|i
operator|++
control|)
block|{
name|keyFields
index|[
name|i
index|]
operator|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|conf
operator|.
name|getKeys
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|keyObjectInspectors
index|[
name|i
index|]
operator|=
name|keyFields
index|[
name|i
index|]
operator|.
name|initialize
argument_list|(
name|rowInspector
argument_list|)
expr_stmt|;
name|currentKeyObjectInspectors
index|[
name|i
index|]
operator|=
name|ObjectInspectorUtils
operator|.
name|getStandardObjectInspector
argument_list|(
name|keyObjectInspectors
index|[
name|i
index|]
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
expr_stmt|;
block|}
comment|// Initialize the constants for the grouping sets, so that they can be re-used for
comment|// each row
if|if
condition|(
name|groupingSetsPresent
condition|)
block|{
name|groupingSets
operator|=
name|conf
operator|.
name|getListGroupingSets
argument_list|()
expr_stmt|;
name|groupingSetsPosition
operator|=
name|conf
operator|.
name|getGroupingSetPosition
argument_list|()
expr_stmt|;
name|newKeysGroupingSets
operator|=
operator|new
name|IntWritable
index|[
name|groupingSets
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|groupingSetsBitSet
operator|=
operator|new
name|FastBitSet
index|[
name|groupingSets
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|groupingSet
range|:
name|groupingSets
control|)
block|{
comment|// Create the mapping corresponding to the grouping set
name|newKeysGroupingSets
index|[
name|pos
index|]
operator|=
operator|new
name|IntWritable
argument_list|(
name|groupingSet
argument_list|)
expr_stmt|;
name|groupingSetsBitSet
index|[
name|pos
index|]
operator|=
name|groupingSet2BitSet
argument_list|(
name|groupingSet
argument_list|)
expr_stmt|;
name|pos
operator|++
expr_stmt|;
block|}
block|}
comment|// initialize unionExpr for reduce-side
comment|// reduce KEY has union field as the last field if there are distinct
comment|// aggregates in group-by.
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|sfs
init|=
operator|(
operator|(
name|StructObjectInspector
operator|)
name|rowInspector
operator|)
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
if|if
condition|(
name|sfs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|StructField
name|keyField
init|=
name|sfs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyField
operator|.
name|getFieldName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|.
name|equals
argument_list|(
name|Utilities
operator|.
name|ReduceField
operator|.
name|KEY
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|ObjectInspector
name|keyObjInspector
init|=
name|keyField
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyObjInspector
operator|instanceof
name|StructObjectInspector
condition|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|keysfs
init|=
operator|(
operator|(
name|StructObjectInspector
operator|)
name|keyObjInspector
operator|)
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
if|if
condition|(
name|keysfs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// the last field is the union field, if any
name|StructField
name|sf
init|=
name|keysfs
operator|.
name|get
argument_list|(
name|keysfs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|sf
operator|.
name|getFieldObjectInspector
argument_list|()
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|ObjectInspector
operator|.
name|Category
operator|.
name|UNION
argument_list|)
condition|)
block|{
name|unionExprEval
operator|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|sf
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
argument_list|,
name|keyField
operator|.
name|getFieldName
argument_list|()
operator|+
literal|"."
operator|+
name|sf
operator|.
name|getFieldName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|unionExprEval
operator|.
name|initialize
argument_list|(
name|rowInspector
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// init aggregationParameterFields
name|ArrayList
argument_list|<
name|AggregationDesc
argument_list|>
name|aggrs
init|=
name|conf
operator|.
name|getAggregators
argument_list|()
decl_stmt|;
name|aggregationParameterFields
operator|=
operator|new
name|ExprNodeEvaluator
index|[
name|aggrs
operator|.
name|size
argument_list|()
index|]
index|[]
expr_stmt|;
name|aggregationParameterObjectInspectors
operator|=
operator|new
name|ObjectInspector
index|[
name|aggrs
operator|.
name|size
argument_list|()
index|]
index|[]
expr_stmt|;
name|aggregationParameterStandardObjectInspectors
operator|=
operator|new
name|ObjectInspector
index|[
name|aggrs
operator|.
name|size
argument_list|()
index|]
index|[]
expr_stmt|;
name|aggregationParameterObjects
operator|=
operator|new
name|Object
index|[
name|aggrs
operator|.
name|size
argument_list|()
index|]
index|[]
expr_stmt|;
name|aggregationIsDistinct
operator|=
operator|new
name|boolean
index|[
name|aggrs
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggrs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|AggregationDesc
name|aggr
init|=
name|aggrs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|parameters
init|=
name|aggr
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|aggregationParameterFields
index|[
name|i
index|]
operator|=
operator|new
name|ExprNodeEvaluator
index|[
name|parameters
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|aggregationParameterObjectInspectors
index|[
name|i
index|]
operator|=
operator|new
name|ObjectInspector
index|[
name|parameters
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|aggregationParameterStandardObjectInspectors
index|[
name|i
index|]
operator|=
operator|new
name|ObjectInspector
index|[
name|parameters
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|aggregationParameterObjects
index|[
name|i
index|]
operator|=
operator|new
name|Object
index|[
name|parameters
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|parameters
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|aggregationParameterFields
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|aggregationParameterObjectInspectors
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|aggregationParameterFields
index|[
name|i
index|]
index|[
name|j
index|]
operator|.
name|initialize
argument_list|(
name|rowInspector
argument_list|)
expr_stmt|;
if|if
condition|(
name|unionExprEval
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|names
init|=
name|parameters
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getExprString
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
comment|// parameters of the form : KEY.colx:t.coly
if|if
condition|(
name|Utilities
operator|.
name|ReduceField
operator|.
name|KEY
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|names
index|[
literal|0
index|]
argument_list|)
operator|&&
name|names
operator|.
name|length
operator|>
literal|2
condition|)
block|{
name|String
name|name
init|=
name|names
index|[
name|names
operator|.
name|length
operator|-
literal|2
index|]
decl_stmt|;
name|int
name|tag
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|name
operator|.
name|split
argument_list|(
literal|"\\:"
argument_list|)
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|aggr
operator|.
name|getDistinct
argument_list|()
condition|)
block|{
comment|// is distinct
name|Set
argument_list|<
name|Integer
argument_list|>
name|set
init|=
name|distinctKeyAggrs
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|set
condition|)
block|{
name|set
operator|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|distinctKeyAggrs
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|set
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|set
init|=
name|nonDistinctKeyAggrs
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|set
condition|)
block|{
name|set
operator|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|nonDistinctKeyAggrs
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|set
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// will be KEY._COLx or VALUE._COLx
if|if
condition|(
operator|!
name|nonDistinctAggrs
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|nonDistinctAggrs
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|aggr
operator|.
name|getDistinct
argument_list|()
condition|)
block|{
name|aggregationIsDistinct
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|aggregationParameterStandardObjectInspectors
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|ObjectInspectorUtils
operator|.
name|getStandardObjectInspector
argument_list|(
name|aggregationParameterObjectInspectors
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
expr_stmt|;
name|aggregationParameterObjects
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|parameters
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// for ex: count(*)
if|if
condition|(
operator|!
name|nonDistinctAggrs
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|nonDistinctAggrs
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// init aggregationClasses
name|aggregationEvaluators
operator|=
operator|new
name|GenericUDAFEvaluator
index|[
name|conf
operator|.
name|getAggregators
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregationEvaluators
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|AggregationDesc
name|agg
init|=
name|conf
operator|.
name|getAggregators
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|aggregationEvaluators
index|[
name|i
index|]
operator|=
name|agg
operator|.
name|getGenericUDAFEvaluator
argument_list|()
expr_stmt|;
block|}
name|MapredContext
name|context
init|=
name|MapredContext
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|GenericUDAFEvaluator
name|genericUDAFEvaluator
range|:
name|aggregationEvaluators
control|)
block|{
name|context
operator|.
name|setup
argument_list|(
name|genericUDAFEvaluator
argument_list|)
expr_stmt|;
block|}
block|}
name|aggregationsParametersLastInvoke
operator|=
operator|new
name|Object
index|[
name|conf
operator|.
name|getAggregators
argument_list|()
operator|.
name|size
argument_list|()
index|]
index|[]
expr_stmt|;
if|if
condition|(
operator|(
name|conf
operator|.
name|getMode
argument_list|()
operator|!=
name|GroupByDesc
operator|.
name|Mode
operator|.
name|HASH
operator|||
name|conf
operator|.
name|getBucketGroup
argument_list|()
operator|)
operator|&&
operator|(
operator|!
name|groupingSetsPresent
operator|)
condition|)
block|{
name|aggregations
operator|=
name|newAggregations
argument_list|()
expr_stmt|;
name|hashAggr
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|hashAggregations
operator|=
operator|new
name|HashMap
argument_list|<
name|KeyWrapper
argument_list|,
name|AggregationBuffer
index|[]
argument_list|>
argument_list|(
literal|256
argument_list|)
expr_stmt|;
name|aggregations
operator|=
name|newAggregations
argument_list|()
expr_stmt|;
name|hashAggr
operator|=
literal|true
expr_stmt|;
name|keyPositionsSize
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|aggrPositions
operator|=
operator|new
name|List
index|[
name|aggregations
operator|.
name|length
index|]
expr_stmt|;
name|groupbyMapAggrInterval
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEGROUPBYMAPINTERVAL
argument_list|)
expr_stmt|;
comment|// compare every groupbyMapAggrInterval rows
name|numRowsCompareHashAggr
operator|=
name|groupbyMapAggrInterval
expr_stmt|;
name|minReductionHashAggr
operator|=
name|HiveConf
operator|.
name|getFloatVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPAGGRHASHMINREDUCTION
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|conf
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|)
decl_stmt|;
comment|// grouping id should be pruned, which is the last of key columns
comment|// see ColumnPrunerGroupByProc
name|outputKeyLength
operator|=
name|conf
operator|.
name|pruneGroupingSetId
argument_list|()
condition|?
name|keyFields
operator|.
name|length
operator|-
literal|1
else|:
name|keyFields
operator|.
name|length
expr_stmt|;
comment|// init objectInspectors
name|ObjectInspector
index|[]
name|objectInspectors
init|=
operator|new
name|ObjectInspector
index|[
name|outputKeyLength
operator|+
name|aggregationEvaluators
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputKeyLength
condition|;
name|i
operator|++
control|)
block|{
name|objectInspectors
index|[
name|i
index|]
operator|=
name|currentKeyObjectInspectors
index|[
name|i
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregationEvaluators
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|objectInspectors
index|[
name|outputKeyLength
operator|+
name|i
index|]
operator|=
name|aggregationEvaluators
index|[
name|i
index|]
operator|.
name|init
argument_list|(
name|conf
operator|.
name|getAggregators
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getMode
argument_list|()
argument_list|,
name|aggregationParameterObjectInspectors
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|outputObjInspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fieldNames
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|objectInspectors
argument_list|)
argument_list|)
expr_stmt|;
name|KeyWrapperFactory
name|keyWrapperFactory
init|=
operator|new
name|KeyWrapperFactory
argument_list|(
name|keyFields
argument_list|,
name|keyObjectInspectors
argument_list|,
name|currentKeyObjectInspectors
argument_list|)
decl_stmt|;
name|newKeys
operator|=
name|keyWrapperFactory
operator|.
name|getKeyWrapper
argument_list|()
expr_stmt|;
name|isTez
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
argument_list|)
operator|.
name|equals
argument_list|(
literal|"tez"
argument_list|)
expr_stmt|;
name|isLlap
operator|=
name|isTez
operator|&&
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXECUTION_MODE
argument_list|)
operator|.
name|equals
argument_list|(
literal|"llap"
argument_list|)
expr_stmt|;
name|numExecutors
operator|=
name|isLlap
condition|?
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_DAEMON_NUM_EXECUTORS
argument_list|)
else|:
literal|1
expr_stmt|;
name|firstRow
operator|=
literal|true
expr_stmt|;
comment|// estimate the number of hash table entries based on the size of each
comment|// entry. Since the size of a entry
comment|// is not known, estimate that based on the number of entries
if|if
condition|(
name|hashAggr
condition|)
block|{
name|computeMaxEntriesHashAggr
argument_list|()
expr_stmt|;
block|}
name|memoryMXBean
operator|=
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
expr_stmt|;
if|if
condition|(
name|isLlap
operator|||
operator|!
name|isTez
condition|)
block|{
name|maxMemory
operator|=
name|memoryMXBean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getMax
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|maxMemory
operator|=
name|getConf
argument_list|()
operator|.
name|getMaxMemoryAvailable
argument_list|()
expr_stmt|;
block|}
name|memoryThreshold
operator|=
name|this
operator|.
name|getConf
argument_list|()
operator|.
name|getMemoryThreshold
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"isTez: {} isLlap: {} numExecutors: {} maxMemory: {}"
argument_list|,
name|isTez
argument_list|,
name|isLlap
argument_list|,
name|numExecutors
argument_list|,
name|maxMemory
argument_list|)
expr_stmt|;
block|}
comment|/**    * Estimate the number of entries in map-side hash table. The user can specify    * the total amount of memory to be used by the map-side hash. By default, all    * available memory is used. The size of each row is estimated, rather    * crudely, and the number of entries are figure out based on that.    *    * @return number of entries that can fit in hash table - useful for map-side    *         aggregation only    **/
specifier|private
name|void
name|computeMaxEntriesHashAggr
parameter_list|()
throws|throws
name|HiveException
block|{
name|float
name|memoryPercentage
init|=
name|this
operator|.
name|getConf
argument_list|()
operator|.
name|getGroupByMemoryUsage
argument_list|()
decl_stmt|;
if|if
condition|(
name|isLlap
operator|||
operator|!
name|isTez
condition|)
block|{
name|maxHashTblMemory
operator|=
call|(
name|long
call|)
argument_list|(
name|memoryPercentage
operator|*
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|maxMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|maxHashTblMemory
operator|=
call|(
name|long
call|)
argument_list|(
name|memoryPercentage
operator|*
name|getConf
argument_list|()
operator|.
name|getMaxMemoryAvailable
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Max hash table memory: memoryPercentage:{}, maxHashTblMemory:{} bytes"
argument_list|,
name|memoryPercentage
argument_list|,
name|maxHashTblMemory
argument_list|)
expr_stmt|;
name|estimateRowSize
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|int
name|javaObjectOverHead
init|=
literal|64
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|javaHashEntryOverHead
init|=
literal|64
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|javaSizePrimitiveType
init|=
literal|16
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|javaSizeUnknownType
init|=
literal|256
decl_stmt|;
comment|/**    * The size of the element at position 'pos' is returned, if possible. If the    * datatype is of variable length, STRING, a list of such key positions is    * maintained, and the size for such positions is then actually calculated at    * runtime.    *    * @param pos    *          the position of the key    * @return the size of this datatype    **/
specifier|private
name|int
name|getSize
parameter_list|(
name|int
name|pos
parameter_list|,
name|PrimitiveCategory
name|category
parameter_list|)
block|{
switch|switch
condition|(
name|category
condition|)
block|{
case|case
name|VOID
case|:
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
return|return
name|javaSizePrimitiveType
return|;
case|case
name|STRING
case|:
name|keyPositionsSize
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|javaObjectOverHead
return|;
case|case
name|BINARY
case|:
name|keyPositionsSize
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|javaObjectOverHead
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|javaObjectOverHead
operator|+
name|javaSizePrimitiveType
return|;
default|default:
return|return
name|javaSizeUnknownType
return|;
block|}
block|}
comment|/**    * The size of the element at position 'pos' is returned, if possible. If the    * field is of variable length, STRING, a list of such field names for the    * field position is maintained, and the size for such positions is then    * actually calculated at runtime.    *    * @param pos    *          the position of the key    * @param c    *          the type of the key    * @param f    *          the field to be added    * @return the size of this datatype    **/
specifier|private
name|int
name|getSize
parameter_list|(
name|int
name|pos
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|,
name|Field
name|f
parameter_list|)
block|{
if|if
condition|(
name|c
operator|.
name|isPrimitive
argument_list|()
operator|||
name|c
operator|.
name|isInstance
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|||
name|c
operator|.
name|isInstance
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
argument_list|)
operator|||
name|c
operator|.
name|isInstance
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
operator|||
name|c
operator|.
name|isInstance
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
name|c
operator|.
name|isInstance
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
name|c
operator|.
name|isInstance
argument_list|(
operator|new
name|Float
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
name|c
operator|.
name|isInstance
argument_list|(
operator|new
name|Double
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|javaSizePrimitiveType
return|;
block|}
if|if
condition|(
name|c
operator|.
name|isInstance
argument_list|(
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|javaObjectOverHead
operator|+
name|javaSizePrimitiveType
return|;
block|}
if|if
condition|(
name|c
operator|.
name|isInstance
argument_list|(
operator|new
name|String
argument_list|()
argument_list|)
operator|||
name|c
operator|.
name|isInstance
argument_list|(
operator|new
name|ByteArrayRef
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|aggrPositions
index|[
name|pos
index|]
operator|==
literal|null
condition|)
block|{
name|aggrPositions
index|[
name|pos
index|]
operator|=
operator|new
name|ArrayList
argument_list|<
name|Field
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|aggrPositions
index|[
name|pos
index|]
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
return|return
name|javaObjectOverHead
return|;
block|}
return|return
name|javaSizeUnknownType
return|;
block|}
comment|/**    * @param pos    *          position of the key    * @param typeInfo    *          type of the input    * @return the size of this datatype    **/
specifier|private
name|int
name|getSize
parameter_list|(
name|int
name|pos
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
if|if
condition|(
name|typeInfo
operator|instanceof
name|PrimitiveTypeInfo
condition|)
block|{
return|return
name|getSize
argument_list|(
name|pos
argument_list|,
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
return|;
block|}
return|return
name|javaSizeUnknownType
return|;
block|}
comment|/**    * @return the size of each row    **/
specifier|private
name|void
name|estimateRowSize
parameter_list|()
throws|throws
name|HiveException
block|{
comment|// estimate the size of each entry -
comment|// a datatype with unknown size (String/Struct etc. - is assumed to be 256
comment|// bytes for now).
comment|// 64 bytes is the overhead for a reference
name|fixedRowSize
operator|=
name|javaHashEntryOverHead
expr_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keys
init|=
name|conf
operator|.
name|getKeys
argument_list|()
decl_stmt|;
comment|// Go over all the keys and get the size of the fields of fixed length. Keep
comment|// track of the variable length keys
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|fixedRowSize
operator|+=
name|getSize
argument_list|(
name|pos
argument_list|,
name|keys
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|.
name|getTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Go over all the aggregation classes and and get the size of the fields of
comment|// fixed length. Keep track of the variable length
comment|// fields in these aggregation classes.
name|estimableAggregationEvaluators
operator|=
operator|new
name|boolean
index|[
name|aggregationEvaluators
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregationEvaluators
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fixedRowSize
operator|+=
name|javaObjectOverHead
expr_stmt|;
name|AggregationBuffer
name|agg
init|=
name|aggregationEvaluators
index|[
name|i
index|]
operator|.
name|getNewAggregationBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|GenericUDAFEvaluator
operator|.
name|isEstimable
argument_list|(
name|agg
argument_list|)
condition|)
block|{
name|estimableAggregationEvaluators
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
name|Field
index|[]
name|fArr
init|=
name|ObjectInspectorUtils
operator|.
name|getDeclaredNonStaticFields
argument_list|(
name|agg
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Field
name|f
range|:
name|fArr
control|)
block|{
name|fixedRowSize
operator|+=
name|getSize
argument_list|(
name|i
argument_list|,
name|f
operator|.
name|getType
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|AggregationBuffer
index|[]
name|newAggregations
parameter_list|()
throws|throws
name|HiveException
block|{
name|AggregationBuffer
index|[]
name|aggs
init|=
operator|new
name|AggregationBuffer
index|[
name|aggregationEvaluators
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregationEvaluators
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|aggs
index|[
name|i
index|]
operator|=
name|aggregationEvaluators
index|[
name|i
index|]
operator|.
name|getNewAggregationBuffer
argument_list|()
expr_stmt|;
comment|// aggregationClasses[i].reset(aggs[i]);
block|}
return|return
name|aggs
return|;
block|}
specifier|protected
name|void
name|resetAggregations
parameter_list|(
name|AggregationBuffer
index|[]
name|aggs
parameter_list|)
throws|throws
name|HiveException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|aggregationEvaluators
index|[
name|i
index|]
operator|.
name|reset
argument_list|(
name|aggs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Update aggregations. If the aggregation is for distinct, in case of hash    * aggregation, the client tells us whether it is a new entry. For sort-based    * aggregations, the last row is compared with the current one to figure out    * whether it has changed. As a cleanup, the lastInvoke logic can be pushed in    * the caller, and this function can be independent of that. The client should    * always notify whether it is a different row or not.    *    * @param aggs the aggregations to be evaluated    *    * @param row the row being processed    *    * @param rowInspector the inspector for the row    *    * @param hashAggr whether hash aggregation is being performed or not    *    * @param newEntryForHashAggr only valid if it is a hash aggregation, whether    * it is a new entry or not    */
specifier|protected
name|void
name|updateAggregations
parameter_list|(
name|AggregationBuffer
index|[]
name|aggs
parameter_list|,
name|Object
name|row
parameter_list|,
name|ObjectInspector
name|rowInspector
parameter_list|,
name|boolean
name|hashAggr
parameter_list|,
name|boolean
name|newEntryForHashAggr
parameter_list|,
name|Object
index|[]
index|[]
name|lastInvoke
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|unionExprEval
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|int
name|ai
init|=
literal|0
init|;
name|ai
operator|<
name|aggs
operator|.
name|length
condition|;
name|ai
operator|++
control|)
block|{
comment|// Calculate the parameters
name|Object
index|[]
name|o
init|=
operator|new
name|Object
index|[
name|aggregationParameterFields
index|[
name|ai
index|]
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|pi
init|=
literal|0
init|;
name|pi
operator|<
name|aggregationParameterFields
index|[
name|ai
index|]
operator|.
name|length
condition|;
name|pi
operator|++
control|)
block|{
name|o
index|[
name|pi
index|]
operator|=
name|aggregationParameterFields
index|[
name|ai
index|]
index|[
name|pi
index|]
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
comment|// Update the aggregations.
if|if
condition|(
name|aggregationIsDistinct
index|[
name|ai
index|]
condition|)
block|{
if|if
condition|(
name|hashAggr
condition|)
block|{
if|if
condition|(
name|newEntryForHashAggr
condition|)
block|{
name|aggregationEvaluators
index|[
name|ai
index|]
operator|.
name|aggregate
argument_list|(
name|aggs
index|[
name|ai
index|]
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|lastInvoke
index|[
name|ai
index|]
operator|==
literal|null
condition|)
block|{
name|lastInvoke
index|[
name|ai
index|]
operator|=
operator|new
name|Object
index|[
name|o
operator|.
name|length
index|]
expr_stmt|;
block|}
if|if
condition|(
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o
argument_list|,
name|aggregationParameterObjectInspectors
index|[
name|ai
index|]
argument_list|,
name|lastInvoke
index|[
name|ai
index|]
argument_list|,
name|aggregationParameterStandardObjectInspectors
index|[
name|ai
index|]
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|aggregationEvaluators
index|[
name|ai
index|]
operator|.
name|aggregate
argument_list|(
name|aggs
index|[
name|ai
index|]
argument_list|,
name|o
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|pi
init|=
literal|0
init|;
name|pi
operator|<
name|o
operator|.
name|length
condition|;
name|pi
operator|++
control|)
block|{
name|lastInvoke
index|[
name|ai
index|]
index|[
name|pi
index|]
operator|=
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|o
index|[
name|pi
index|]
argument_list|,
name|aggregationParameterObjectInspectors
index|[
name|ai
index|]
index|[
name|pi
index|]
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|aggregationEvaluators
index|[
name|ai
index|]
operator|.
name|aggregate
argument_list|(
name|aggs
index|[
name|ai
index|]
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
if|if
condition|(
name|distinctKeyAggrs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// evaluate union object
name|UnionObject
name|uo
init|=
call|(
name|UnionObject
call|)
argument_list|(
name|unionExprEval
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|unionTag
init|=
name|uo
operator|.
name|getTag
argument_list|()
decl_stmt|;
comment|// update non-distinct key aggregations : "KEY._colx:t._coly"
if|if
condition|(
name|nonDistinctKeyAggrs
operator|.
name|get
argument_list|(
name|unionTag
argument_list|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|pos
range|:
name|nonDistinctKeyAggrs
operator|.
name|get
argument_list|(
name|unionTag
argument_list|)
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|new
name|Object
index|[
name|aggregationParameterFields
index|[
name|pos
index|]
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|pi
init|=
literal|0
init|;
name|pi
operator|<
name|aggregationParameterFields
index|[
name|pos
index|]
operator|.
name|length
condition|;
name|pi
operator|++
control|)
block|{
name|o
index|[
name|pi
index|]
operator|=
name|aggregationParameterFields
index|[
name|pos
index|]
index|[
name|pi
index|]
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|aggregationEvaluators
index|[
name|pos
index|]
operator|.
name|aggregate
argument_list|(
name|aggs
index|[
name|pos
index|]
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
comment|// there may be multi distinct clauses for one column
comment|// update them all.
if|if
condition|(
name|distinctKeyAggrs
operator|.
name|get
argument_list|(
name|unionTag
argument_list|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
range|:
name|distinctKeyAggrs
operator|.
name|get
argument_list|(
name|unionTag
argument_list|)
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|new
name|Object
index|[
name|aggregationParameterFields
index|[
name|i
index|]
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|pi
init|=
literal|0
init|;
name|pi
operator|<
name|aggregationParameterFields
index|[
name|i
index|]
operator|.
name|length
condition|;
name|pi
operator|++
control|)
block|{
name|o
index|[
name|pi
index|]
operator|=
name|aggregationParameterFields
index|[
name|i
index|]
index|[
name|pi
index|]
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hashAggr
condition|)
block|{
if|if
condition|(
name|newEntryForHashAggr
condition|)
block|{
name|aggregationEvaluators
index|[
name|i
index|]
operator|.
name|aggregate
argument_list|(
name|aggs
index|[
name|i
index|]
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|lastInvoke
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|lastInvoke
index|[
name|i
index|]
operator|=
operator|new
name|Object
index|[
name|o
operator|.
name|length
index|]
expr_stmt|;
block|}
if|if
condition|(
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o
argument_list|,
name|aggregationParameterObjectInspectors
index|[
name|i
index|]
argument_list|,
name|lastInvoke
index|[
name|i
index|]
argument_list|,
name|aggregationParameterStandardObjectInspectors
index|[
name|i
index|]
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|aggregationEvaluators
index|[
name|i
index|]
operator|.
name|aggregate
argument_list|(
name|aggs
index|[
name|i
index|]
argument_list|,
name|o
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|pi
init|=
literal|0
init|;
name|pi
operator|<
name|o
operator|.
name|length
condition|;
name|pi
operator|++
control|)
block|{
name|lastInvoke
index|[
name|i
index|]
index|[
name|pi
index|]
operator|=
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|o
index|[
name|pi
index|]
argument_list|,
name|aggregationParameterObjectInspectors
index|[
name|i
index|]
index|[
name|pi
index|]
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// update non-distinct groupby key or value aggregations: 'KEY._COLx or VALUE._colx'
comment|// these aggregations should be updated only once.
if|if
condition|(
name|unionTag
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|int
name|pos
range|:
name|nonDistinctAggrs
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|new
name|Object
index|[
name|aggregationParameterFields
index|[
name|pos
index|]
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|pi
init|=
literal|0
init|;
name|pi
operator|<
name|aggregationParameterFields
index|[
name|pos
index|]
operator|.
name|length
condition|;
name|pi
operator|++
control|)
block|{
name|o
index|[
name|pi
index|]
operator|=
name|aggregationParameterFields
index|[
name|pos
index|]
index|[
name|pi
index|]
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|aggregationEvaluators
index|[
name|pos
index|]
operator|.
name|aggregate
argument_list|(
name|aggs
index|[
name|pos
index|]
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|ai
init|=
literal|0
init|;
name|ai
operator|<
name|aggs
operator|.
name|length
condition|;
name|ai
operator|++
control|)
block|{
comment|// there is no distinct aggregation,
comment|// update all aggregations
name|Object
index|[]
name|o
init|=
operator|new
name|Object
index|[
name|aggregationParameterFields
index|[
name|ai
index|]
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|pi
init|=
literal|0
init|;
name|pi
operator|<
name|aggregationParameterFields
index|[
name|ai
index|]
operator|.
name|length
condition|;
name|pi
operator|++
control|)
block|{
name|o
index|[
name|pi
index|]
operator|=
name|aggregationParameterFields
index|[
name|ai
index|]
index|[
name|pi
index|]
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|aggregationEvaluators
index|[
name|ai
index|]
operator|.
name|aggregate
argument_list|(
name|aggs
index|[
name|ai
index|]
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|processKey
parameter_list|(
name|Object
name|row
parameter_list|,
name|ObjectInspector
name|rowInspector
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|hashAggr
condition|)
block|{
name|newKeys
operator|.
name|setHashKey
argument_list|()
expr_stmt|;
name|processHashAggr
argument_list|(
name|row
argument_list|,
name|rowInspector
argument_list|,
name|newKeys
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processAggr
argument_list|(
name|row
argument_list|,
name|rowInspector
argument_list|,
name|newKeys
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|countAfterReport
operator|!=
literal|0
operator|&&
operator|(
name|countAfterReport
operator|%
name|heartbeatInterval
operator|)
operator|==
literal|0
operator|&&
operator|(
name|reporter
operator|!=
literal|null
operator|)
condition|)
block|{
name|reporter
operator|.
name|progress
argument_list|()
expr_stmt|;
name|countAfterReport
operator|=
literal|0
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
name|firstRow
operator|=
literal|false
expr_stmt|;
name|ObjectInspector
name|rowInspector
init|=
name|inputObjInspectors
index|[
name|tag
index|]
decl_stmt|;
comment|// Total number of input rows is needed for hash aggregation only
if|if
condition|(
name|hashAggr
condition|)
block|{
name|numRowsInput
operator|++
expr_stmt|;
comment|// if hash aggregation is not behaving properly, disable it
if|if
condition|(
name|numRowsInput
operator|==
name|numRowsCompareHashAggr
condition|)
block|{
name|numRowsCompareHashAggr
operator|+=
name|groupbyMapAggrInterval
expr_stmt|;
comment|// map-side aggregation should reduce the entries by at-least half
if|if
condition|(
name|numRowsHashTbl
operator|>
name|numRowsInput
operator|*
name|minReductionHashAggr
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Disable Hash Aggr: #hash table = "
operator|+
name|numRowsHashTbl
operator|+
literal|" #total = "
operator|+
name|numRowsInput
operator|+
literal|" reduction = "
operator|+
literal|1.0
operator|*
operator|(
name|numRowsHashTbl
operator|/
name|numRowsInput
operator|)
operator|+
literal|" minReduction = "
operator|+
name|minReductionHashAggr
argument_list|)
expr_stmt|;
name|flushHashTable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hashAggr
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isLogTraceEnabled
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Hash Aggr Enabled: #hash table = "
operator|+
name|numRowsHashTbl
operator|+
literal|" #total = "
operator|+
name|numRowsInput
operator|+
literal|" reduction = "
operator|+
literal|1.0
operator|*
operator|(
name|numRowsHashTbl
operator|/
name|numRowsInput
operator|)
operator|+
literal|" minReduction = "
operator|+
name|minReductionHashAggr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
try|try
block|{
name|countAfterReport
operator|++
expr_stmt|;
name|newKeys
operator|.
name|getNewKey
argument_list|(
name|row
argument_list|,
name|rowInspector
argument_list|)
expr_stmt|;
if|if
condition|(
name|groupingSetsPresent
condition|)
block|{
name|Object
index|[]
name|newKeysArray
init|=
name|newKeys
operator|.
name|getKeyArray
argument_list|()
decl_stmt|;
name|Object
index|[]
name|cloneNewKeysArray
init|=
operator|new
name|Object
index|[
name|newKeysArray
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|keyPos
init|=
literal|0
init|;
name|keyPos
operator|<
name|groupingSetsPosition
condition|;
name|keyPos
operator|++
control|)
block|{
name|cloneNewKeysArray
index|[
name|keyPos
index|]
operator|=
name|newKeysArray
index|[
name|keyPos
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|groupingSetPos
init|=
literal|0
init|;
name|groupingSetPos
operator|<
name|groupingSets
operator|.
name|size
argument_list|()
condition|;
name|groupingSetPos
operator|++
control|)
block|{
for|for
control|(
name|int
name|keyPos
init|=
literal|0
init|;
name|keyPos
operator|<
name|groupingSetsPosition
condition|;
name|keyPos
operator|++
control|)
block|{
name|newKeysArray
index|[
name|keyPos
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|FastBitSet
name|bitset
init|=
name|groupingSetsBitSet
index|[
name|groupingSetPos
index|]
decl_stmt|;
comment|// Some keys need to be left to null corresponding to that grouping set.
for|for
control|(
name|int
name|keyPos
init|=
name|bitset
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
init|;
name|keyPos
operator|>=
literal|0
condition|;
name|keyPos
operator|=
name|bitset
operator|.
name|nextSetBit
argument_list|(
name|keyPos
operator|+
literal|1
argument_list|)
control|)
block|{
name|newKeysArray
index|[
name|keyPos
index|]
operator|=
name|cloneNewKeysArray
index|[
name|keyPos
index|]
expr_stmt|;
block|}
name|newKeysArray
index|[
name|groupingSetsPosition
index|]
operator|=
name|newKeysGroupingSets
index|[
name|groupingSetPos
index|]
expr_stmt|;
name|processKey
argument_list|(
name|row
argument_list|,
name|rowInspector
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|processKey
argument_list|(
name|row
argument_list|,
name|rowInspector
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|processHashAggr
parameter_list|(
name|Object
name|row
parameter_list|,
name|ObjectInspector
name|rowInspector
parameter_list|,
name|KeyWrapper
name|newKeys
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Prepare aggs for updating
name|AggregationBuffer
index|[]
name|aggs
init|=
literal|null
decl_stmt|;
name|boolean
name|newEntryForHashAggr
init|=
literal|false
decl_stmt|;
comment|// hash-based aggregations
name|aggs
operator|=
name|hashAggregations
operator|.
name|get
argument_list|(
name|newKeys
argument_list|)
expr_stmt|;
if|if
condition|(
name|aggs
operator|==
literal|null
condition|)
block|{
name|KeyWrapper
name|newKeyProber
init|=
name|newKeys
operator|.
name|copyKey
argument_list|()
decl_stmt|;
name|aggs
operator|=
name|newAggregations
argument_list|()
expr_stmt|;
name|hashAggregations
operator|.
name|put
argument_list|(
name|newKeyProber
argument_list|,
name|aggs
argument_list|)
expr_stmt|;
name|newEntryForHashAggr
operator|=
literal|true
expr_stmt|;
name|numRowsHashTbl
operator|++
expr_stmt|;
comment|// new entry in the hash table
block|}
comment|// Update the aggs
name|updateAggregations
argument_list|(
name|aggs
argument_list|,
name|row
argument_list|,
name|rowInspector
argument_list|,
literal|true
argument_list|,
name|newEntryForHashAggr
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// We can only flush after the updateAggregations is done, or the
comment|// potentially new entry "aggs"
comment|// can be flushed out of the hash table.
comment|// Based on user-specified parameters, check if the hash table needs to be
comment|// flushed.
if|if
condition|(
name|shouldBeFlushed
argument_list|(
name|newKeys
argument_list|)
condition|)
block|{
name|flushHashTable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Non-hash aggregation
specifier|private
name|void
name|processAggr
parameter_list|(
name|Object
name|row
parameter_list|,
name|ObjectInspector
name|rowInspector
parameter_list|,
name|KeyWrapper
name|newKeys
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Prepare aggs for updating
name|AggregationBuffer
index|[]
name|aggs
init|=
literal|null
decl_stmt|;
name|Object
index|[]
index|[]
name|lastInvoke
init|=
literal|null
decl_stmt|;
comment|//boolean keysAreEqual = (currentKeys != null&& newKeys != null)?
comment|//  newKeyStructEqualComparer.areEqual(currentKeys, newKeys) : false;
name|boolean
name|keysAreEqual
init|=
operator|(
name|currentKeys
operator|!=
literal|null
operator|&&
name|newKeys
operator|!=
literal|null
operator|)
condition|?
name|newKeys
operator|.
name|equals
argument_list|(
name|currentKeys
argument_list|)
else|:
literal|false
decl_stmt|;
comment|// Forward the current keys if needed for sort-based aggregation
if|if
condition|(
name|currentKeys
operator|!=
literal|null
operator|&&
operator|!
name|keysAreEqual
condition|)
block|{
comment|// This is to optimize queries of the form:
comment|// select count(distinct key) from T
comment|// where T is sorted and bucketized by key
comment|// Partial aggregation is performed on the mapper, and the
comment|// reducer gets 1 row (partial result) per mapper.
if|if
condition|(
operator|!
name|conf
operator|.
name|isDontResetAggrsDistinct
argument_list|()
condition|)
block|{
name|forward
argument_list|(
name|currentKeys
operator|.
name|getKeyArray
argument_list|()
argument_list|,
name|aggregations
argument_list|)
expr_stmt|;
name|countAfterReport
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|// Need to update the keys?
if|if
condition|(
name|currentKeys
operator|==
literal|null
operator|||
operator|!
name|keysAreEqual
condition|)
block|{
if|if
condition|(
name|currentKeys
operator|==
literal|null
condition|)
block|{
name|currentKeys
operator|=
name|newKeys
operator|.
name|copyKey
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|currentKeys
operator|.
name|copyKey
argument_list|(
name|newKeys
argument_list|)
expr_stmt|;
block|}
comment|// Reset the aggregations
comment|// For distincts optimization with sorting/bucketing, perform partial aggregation
if|if
condition|(
operator|!
name|conf
operator|.
name|isDontResetAggrsDistinct
argument_list|()
condition|)
block|{
name|resetAggregations
argument_list|(
name|aggregations
argument_list|)
expr_stmt|;
block|}
comment|// clear parameters in last-invoke
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregationsParametersLastInvoke
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|aggregationsParametersLastInvoke
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|aggs
operator|=
name|aggregations
expr_stmt|;
name|lastInvoke
operator|=
name|aggregationsParametersLastInvoke
expr_stmt|;
comment|// Update the aggs
name|updateAggregations
argument_list|(
name|aggs
argument_list|,
name|row
argument_list|,
name|rowInspector
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|lastInvoke
argument_list|)
expr_stmt|;
block|}
comment|/**    * Based on user-parameters, should the hash table be flushed.    *    * @param newKeys    *          keys for the row under consideration    **/
specifier|private
name|boolean
name|shouldBeFlushed
parameter_list|(
name|KeyWrapper
name|newKeys
parameter_list|)
block|{
name|int
name|numEntries
init|=
name|hashAggregations
operator|.
name|size
argument_list|()
decl_stmt|;
name|long
name|usedMemory
decl_stmt|;
name|float
name|rate
decl_stmt|;
comment|// The fixed size for the aggregation class is already known. Get the
comment|// variable portion of the size every NUMROWSESTIMATESIZE rows.
if|if
condition|(
operator|(
name|numEntriesHashTable
operator|==
literal|0
operator|)
operator|||
operator|(
operator|(
name|numEntries
operator|%
name|NUMROWSESTIMATESIZE
operator|)
operator|==
literal|0
operator|)
condition|)
block|{
comment|//check how much memory left memory
name|usedMemory
operator|=
name|memoryMXBean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
expr_stmt|;
comment|// TODO: there is no easy and reliable way to compute the memory used by the executor threads and on-heap cache.
comment|// Assuming the used memory is equally divided among all executors.
name|usedMemory
operator|=
name|isLlap
condition|?
name|usedMemory
operator|/
name|numExecutors
else|:
name|usedMemory
expr_stmt|;
name|rate
operator|=
operator|(
name|float
operator|)
name|usedMemory
operator|/
operator|(
name|float
operator|)
name|maxMemory
expr_stmt|;
if|if
condition|(
name|rate
operator|>
name|memoryThreshold
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|Integer
name|pos
range|:
name|keyPositionsSize
control|)
block|{
name|Object
name|key
init|=
name|newKeys
operator|.
name|getKeyArray
argument_list|()
index|[
name|pos
operator|.
name|intValue
argument_list|()
index|]
decl_stmt|;
comment|// Ignore nulls
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|key
operator|instanceof
name|LazyString
condition|)
block|{
name|totalVariableSize
operator|+=
operator|(
operator|(
name|LazyPrimitive
argument_list|<
name|LazyStringObjectInspector
argument_list|,
name|Text
argument_list|>
operator|)
name|key
operator|)
operator|.
name|getWritableObject
argument_list|()
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|instanceof
name|String
condition|)
block|{
name|totalVariableSize
operator|+=
operator|(
operator|(
name|String
operator|)
name|key
operator|)
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|instanceof
name|Text
condition|)
block|{
name|totalVariableSize
operator|+=
operator|(
operator|(
name|Text
operator|)
name|key
operator|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|instanceof
name|LazyBinary
condition|)
block|{
name|totalVariableSize
operator|+=
operator|(
operator|(
name|LazyPrimitive
argument_list|<
name|LazyBinaryObjectInspector
argument_list|,
name|BytesWritable
argument_list|>
operator|)
name|key
operator|)
operator|.
name|getWritableObject
argument_list|()
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|instanceof
name|BytesWritable
condition|)
block|{
name|totalVariableSize
operator|+=
operator|(
operator|(
name|BytesWritable
operator|)
name|key
operator|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|instanceof
name|ByteArrayRef
condition|)
block|{
name|totalVariableSize
operator|+=
operator|(
operator|(
name|ByteArrayRef
operator|)
name|key
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
block|}
block|}
name|AggregationBuffer
index|[]
name|aggs
init|=
name|hashAggregations
operator|.
name|get
argument_list|(
name|newKeys
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|AggregationBuffer
name|agg
init|=
name|aggs
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|estimableAggregationEvaluators
index|[
name|i
index|]
condition|)
block|{
name|totalVariableSize
operator|+=
operator|(
operator|(
name|GenericUDAFEvaluator
operator|.
name|AbstractAggregationBuffer
operator|)
name|agg
operator|)
operator|.
name|estimate
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|aggrPositions
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|totalVariableSize
operator|+=
name|estimateSize
argument_list|(
name|agg
argument_list|,
name|aggrPositions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|numEntriesVarSize
operator|++
expr_stmt|;
comment|// Update the number of entries that can fit in the hash table
name|numEntriesHashTable
operator|=
call|(
name|int
call|)
argument_list|(
name|maxHashTblMemory
operator|/
operator|(
name|fixedRowSize
operator|+
operator|(
name|totalVariableSize
operator|/
name|numEntriesVarSize
operator|)
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isLogTraceEnabled
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Hash Aggr: #hash table = "
operator|+
name|numEntries
operator|+
literal|" #max in hash table = "
operator|+
name|numEntriesHashTable
argument_list|)
expr_stmt|;
block|}
block|}
comment|// flush if necessary
if|if
condition|(
name|numEntries
operator|>=
name|numEntriesHashTable
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|int
name|estimateSize
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|)
block|{
name|int
name|length
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Field
name|f
range|:
name|fields
control|)
block|{
try|try
block|{
name|Object
name|o
init|=
name|f
operator|.
name|get
argument_list|(
name|agg
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|length
operator|+=
operator|(
operator|(
name|String
operator|)
name|o
operator|)
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|ByteArrayRef
condition|)
block|{
name|length
operator|+=
operator|(
operator|(
name|ByteArrayRef
operator|)
name|o
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// continue.. null out the field?
block|}
block|}
return|return
name|length
return|;
block|}
comment|/**    * Flush hash table. This method is used by hash-based aggregations    * @param complete    * @throws HiveException    */
specifier|private
name|void
name|flushHashTable
parameter_list|(
name|boolean
name|complete
parameter_list|)
throws|throws
name|HiveException
block|{
name|countAfterReport
operator|=
literal|0
expr_stmt|;
comment|// Currently, the algorithm flushes 10% of the entries - this can be
comment|// changed in the future
if|if
condition|(
name|complete
condition|)
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|KeyWrapper
argument_list|,
name|AggregationBuffer
index|[]
argument_list|>
argument_list|>
name|iter
init|=
name|hashAggregations
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|KeyWrapper
argument_list|,
name|AggregationBuffer
index|[]
argument_list|>
name|m
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|forward
argument_list|(
name|m
operator|.
name|getKey
argument_list|()
operator|.
name|getKeyArray
argument_list|()
argument_list|,
name|m
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hashAggregations
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hashAggregations
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|isLogInfoEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Hash Table completed flushed"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|int
name|oldSize
init|=
name|hashAggregations
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|isLogInfoEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Hash Tbl flush: #hash table = "
operator|+
name|oldSize
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|KeyWrapper
argument_list|,
name|AggregationBuffer
index|[]
argument_list|>
argument_list|>
name|iter
init|=
name|hashAggregations
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|numDel
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|KeyWrapper
argument_list|,
name|AggregationBuffer
index|[]
argument_list|>
name|m
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|forward
argument_list|(
name|m
operator|.
name|getKey
argument_list|()
operator|.
name|getKeyArray
argument_list|()
argument_list|,
name|m
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|numDel
operator|++
expr_stmt|;
if|if
condition|(
name|numDel
operator|*
literal|10
operator|>=
name|oldSize
condition|)
block|{
if|if
condition|(
name|isLogInfoEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Hash Table flushed: new size = "
operator|+
name|hashAggregations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
block|}
specifier|transient
name|Object
index|[]
name|forwardCache
decl_stmt|;
comment|/**    * Forward a record of keys and aggregation results.    *    * @param keys    *          The keys in the record    * @throws HiveException    */
specifier|private
name|void
name|forward
parameter_list|(
name|Object
index|[]
name|keys
parameter_list|,
name|AggregationBuffer
index|[]
name|aggs
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|forwardCache
operator|==
literal|null
condition|)
block|{
name|forwardCache
operator|=
operator|new
name|Object
index|[
name|outputKeyLength
operator|+
name|aggs
operator|.
name|length
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputKeyLength
condition|;
name|i
operator|++
control|)
block|{
name|forwardCache
index|[
name|i
index|]
operator|=
name|keys
index|[
name|i
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|forwardCache
index|[
name|outputKeyLength
operator|+
name|i
index|]
operator|=
name|aggregationEvaluators
index|[
name|i
index|]
operator|.
name|evaluate
argument_list|(
name|aggs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|forward
argument_list|(
name|forwardCache
argument_list|,
name|outputObjInspector
argument_list|)
expr_stmt|;
block|}
comment|/**    * Forward all aggregations to children. It is only used by DemuxOperator.    * @throws HiveException    */
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|HiveException
block|{
try|try
block|{
if|if
condition|(
name|hashAggregations
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isLogInfoEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Begin Hash Table flush: size = "
operator|+
name|hashAggregations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Iterator
name|iter
init|=
name|hashAggregations
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|KeyWrapper
argument_list|,
name|AggregationBuffer
index|[]
argument_list|>
name|m
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|forward
argument_list|(
name|m
operator|.
name|getKey
argument_list|()
operator|.
name|getKeyArray
argument_list|()
argument_list|,
name|m
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|hashAggregations
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|aggregations
operator|!=
literal|null
condition|)
block|{
comment|// sort-based aggregations
if|if
condition|(
name|currentKeys
operator|!=
literal|null
condition|)
block|{
name|forward
argument_list|(
name|currentKeys
operator|.
name|getKeyArray
argument_list|()
argument_list|,
name|aggregations
argument_list|)
expr_stmt|;
block|}
name|currentKeys
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|// The GroupByOperator is not initialized, which means there is no
comment|// data
comment|// (since we initialize the operators when we see the first record).
comment|// Just do nothing here.
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * We need to forward all the aggregations to children.    *    */
annotation|@
name|Override
specifier|public
name|void
name|closeOp
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|abort
condition|)
block|{
try|try
block|{
comment|// If there is no grouping key and no row came to this operator
if|if
condition|(
name|firstRow
operator|&&
operator|(
name|keyFields
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
name|firstRow
operator|=
literal|false
expr_stmt|;
comment|// There is no grouping key - simulate a null row
comment|// This is based on the assumption that a null row is ignored by
comment|// aggregation functions
for|for
control|(
name|int
name|ai
init|=
literal|0
init|;
name|ai
operator|<
name|aggregations
operator|.
name|length
condition|;
name|ai
operator|++
control|)
block|{
comment|// o is set to NULL in order to distinguish no rows at all
name|Object
index|[]
name|o
decl_stmt|;
if|if
condition|(
name|aggregationParameterFields
index|[
name|ai
index|]
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|o
operator|=
operator|new
name|Object
index|[
name|aggregationParameterFields
index|[
name|ai
index|]
operator|.
name|length
index|]
expr_stmt|;
block|}
else|else
block|{
name|o
operator|=
literal|null
expr_stmt|;
block|}
comment|// Calculate the parameters
for|for
control|(
name|int
name|pi
init|=
literal|0
init|;
name|pi
operator|<
name|aggregationParameterFields
index|[
name|ai
index|]
operator|.
name|length
condition|;
name|pi
operator|++
control|)
block|{
name|o
index|[
name|pi
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|aggregationEvaluators
index|[
name|ai
index|]
operator|.
name|aggregate
argument_list|(
name|aggregations
index|[
name|ai
index|]
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
comment|// create dummy keys - size 0
name|forward
argument_list|(
operator|new
name|Object
index|[
literal|0
index|]
argument_list|,
name|aggregations
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|hashAggregations
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|closeOp
argument_list|(
name|abort
argument_list|)
expr_stmt|;
block|}
comment|// Group by contains the columns needed - no need to aggregate from children
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|genColLists
parameter_list|(
name|HashMap
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|,
name|OpParseContext
argument_list|>
name|opParseCtx
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|colLists
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keys
init|=
name|conf
operator|.
name|getKeys
argument_list|()
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|key
range|:
name|keys
control|)
block|{
name|colLists
operator|=
name|Utilities
operator|.
name|mergeUniqElems
argument_list|(
name|colLists
argument_list|,
name|key
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|AggregationDesc
argument_list|>
name|aggrs
init|=
name|conf
operator|.
name|getAggregators
argument_list|()
decl_stmt|;
for|for
control|(
name|AggregationDesc
name|aggr
range|:
name|aggrs
control|)
block|{
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|params
init|=
name|aggr
operator|.
name|getParameters
argument_list|()
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|param
range|:
name|params
control|)
block|{
name|colLists
operator|=
name|Utilities
operator|.
name|mergeUniqElems
argument_list|(
name|colLists
argument_list|,
name|param
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|colLists
return|;
block|}
comment|/**    * @return the name of the operator    */
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|GroupByOperator
operator|.
name|getOperatorName
argument_list|()
return|;
block|}
specifier|static
specifier|public
name|String
name|getOperatorName
parameter_list|()
block|{
return|return
literal|"GBY"
return|;
block|}
annotation|@
name|Override
specifier|public
name|OperatorType
name|getType
parameter_list|()
block|{
return|return
name|OperatorType
operator|.
name|GROUPBY
return|;
block|}
comment|/**    * we can push the limit above GBY (running in Reducer), since that will generate single row    * for each group. This doesn't necessarily hold for GBY (running in Mappers),    * so we don't push limit above it.    */
annotation|@
name|Override
specifier|public
name|boolean
name|acceptLimitPushdown
parameter_list|()
block|{
return|return
name|getConf
argument_list|()
operator|.
name|getMode
argument_list|()
operator|==
name|GroupByDesc
operator|.
name|Mode
operator|.
name|MERGEPARTIAL
operator|||
name|getConf
argument_list|()
operator|.
name|getMode
argument_list|()
operator|==
name|GroupByDesc
operator|.
name|Mode
operator|.
name|COMPLETE
return|;
block|}
block|}
end_class

end_unit

