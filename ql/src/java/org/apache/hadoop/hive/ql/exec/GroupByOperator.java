begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|IllegalAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|aggregationDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|exprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|groupByDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
operator|.
name|ObjectInspectorCopyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|OpParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * GroupBy operator implementation.  */
end_comment

begin_class
specifier|public
class|class
name|GroupByOperator
extends|extends
name|Operator
argument_list|<
name|groupByDesc
argument_list|>
implements|implements
name|Serializable
block|{
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GroupByOperator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUMROWSESTIMATESIZE
init|=
literal|1000
decl_stmt|;
specifier|transient
specifier|protected
name|ExprNodeEvaluator
index|[]
name|keyFields
decl_stmt|;
specifier|transient
specifier|protected
name|ObjectInspector
index|[]
name|keyObjectInspectors
decl_stmt|;
specifier|transient
specifier|protected
name|Object
index|[]
name|keyObjects
decl_stmt|;
specifier|transient
specifier|protected
name|ExprNodeEvaluator
index|[]
index|[]
name|aggregationParameterFields
decl_stmt|;
specifier|transient
specifier|protected
name|ObjectInspector
index|[]
index|[]
name|aggregationParameterObjectInspectors
decl_stmt|;
specifier|transient
specifier|protected
name|ObjectInspector
index|[]
index|[]
name|aggregationParameterStandardObjectInspectors
decl_stmt|;
specifier|transient
specifier|protected
name|Object
index|[]
index|[]
name|aggregationParameterObjects
decl_stmt|;
comment|// In the future, we may allow both count(DISTINCT a) and sum(DISTINCT a) in the same SQL clause,
comment|// so aggregationIsDistinct is a boolean array instead of a single number.
specifier|transient
specifier|protected
name|boolean
index|[]
name|aggregationIsDistinct
decl_stmt|;
specifier|transient
name|Class
argument_list|<
name|?
extends|extends
name|UDAFEvaluator
argument_list|>
index|[]
name|aggregationClasses
decl_stmt|;
specifier|transient
specifier|protected
name|Method
index|[]
name|aggregationsAggregateMethods
decl_stmt|;
specifier|transient
specifier|protected
name|Method
index|[]
name|aggregationsEvaluateMethods
decl_stmt|;
specifier|transient
specifier|protected
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|objectInspectors
decl_stmt|;
specifier|transient
specifier|protected
name|ObjectInspector
name|outputObjectInspector
decl_stmt|;
specifier|transient
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fieldNames
decl_stmt|;
comment|// Used by sort-based GroupBy: Mode = COMPLETE, PARTIAL1, PARTIAL2
specifier|transient
specifier|protected
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|currentKeys
decl_stmt|;
specifier|transient
specifier|protected
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|newKeys
decl_stmt|;
specifier|transient
specifier|protected
name|UDAFEvaluator
index|[]
name|aggregations
decl_stmt|;
specifier|transient
specifier|protected
name|Object
index|[]
index|[]
name|aggregationsParametersLastInvoke
decl_stmt|;
comment|// Used by hash-based GroupBy: Mode = HASH
specifier|transient
specifier|protected
name|HashMap
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|,
name|UDAFEvaluator
index|[]
argument_list|>
name|hashAggregations
decl_stmt|;
specifier|transient
name|boolean
name|firstRow
decl_stmt|;
specifier|transient
name|long
name|totalMemory
decl_stmt|;
specifier|transient
name|boolean
name|hashAggr
decl_stmt|;
specifier|transient
name|long
name|numRowsInput
decl_stmt|;
specifier|transient
name|long
name|numRowsHashTbl
decl_stmt|;
specifier|transient
name|int
name|groupbyMapAggrInterval
decl_stmt|;
specifier|transient
name|long
name|numRowsCompareHashAggr
decl_stmt|;
specifier|transient
name|float
name|minReductionHashAggr
decl_stmt|;
comment|// current Key ObjectInspectors are standard ObjectInspectors
specifier|transient
specifier|protected
name|ObjectInspector
index|[]
name|currentKeyObjectInspectors
decl_stmt|;
comment|// new Key ObjectInspectors are objectInspectors from the parent
specifier|transient
name|StructObjectInspector
name|newKeyObjectInspector
decl_stmt|;
specifier|transient
name|StructObjectInspector
name|currentKeyObjectInspector
decl_stmt|;
comment|/**    * This is used to store the position and field names for variable length fields.    **/
class|class
name|varLenFields
block|{
name|int
name|aggrPos
decl_stmt|;
name|List
argument_list|<
name|Field
argument_list|>
name|fields
decl_stmt|;
name|varLenFields
parameter_list|(
name|int
name|aggrPos
parameter_list|,
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|)
block|{
name|this
operator|.
name|aggrPos
operator|=
name|aggrPos
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
block|}
name|int
name|getAggrPos
parameter_list|()
block|{
return|return
name|aggrPos
return|;
block|}
name|List
argument_list|<
name|Field
argument_list|>
name|getFields
parameter_list|()
block|{
return|return
name|fields
return|;
block|}
block|}
empty_stmt|;
comment|// for these positions, some variable primitive type (String) is used, so size cannot be estimated. sample it at runtime.
specifier|transient
name|List
argument_list|<
name|Integer
argument_list|>
name|keyPositionsSize
decl_stmt|;
comment|// for these positions, some variable primitive type (String) is used for the aggregation classes
specifier|transient
name|List
argument_list|<
name|varLenFields
argument_list|>
name|aggrPositions
decl_stmt|;
specifier|transient
name|int
name|fixedRowSize
decl_stmt|;
specifier|transient
name|long
name|maxHashTblMemory
decl_stmt|;
specifier|transient
name|int
name|totalVariableSize
decl_stmt|;
specifier|transient
name|int
name|numEntriesVarSize
decl_stmt|;
specifier|transient
name|int
name|numEntriesHashTable
decl_stmt|;
specifier|public
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|,
name|Reporter
name|reporter
parameter_list|,
name|ObjectInspector
index|[]
name|inputObjInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|totalMemory
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|totalMemory
argument_list|()
expr_stmt|;
name|numRowsInput
operator|=
literal|0
expr_stmt|;
name|numRowsHashTbl
operator|=
literal|0
expr_stmt|;
comment|// init keyFields
name|keyFields
operator|=
operator|new
name|ExprNodeEvaluator
index|[
name|conf
operator|.
name|getKeys
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|keyObjectInspectors
operator|=
operator|new
name|ObjectInspector
index|[
name|conf
operator|.
name|getKeys
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|keyObjects
operator|=
operator|new
name|Object
index|[
name|conf
operator|.
name|getKeys
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|keyFields
index|[
name|i
index|]
operator|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|conf
operator|.
name|getKeys
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|keyObjectInspectors
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
name|keyObjects
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|newKeys
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|keyFields
operator|.
name|length
argument_list|)
expr_stmt|;
name|currentKeyObjectInspectors
operator|=
operator|new
name|ObjectInspector
index|[
name|conf
operator|.
name|getKeys
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
comment|// init aggregationParameterFields
name|aggregationParameterFields
operator|=
operator|new
name|ExprNodeEvaluator
index|[
name|conf
operator|.
name|getAggregators
argument_list|()
operator|.
name|size
argument_list|()
index|]
index|[]
expr_stmt|;
name|aggregationParameterObjectInspectors
operator|=
operator|new
name|ObjectInspector
index|[
name|conf
operator|.
name|getAggregators
argument_list|()
operator|.
name|size
argument_list|()
index|]
index|[]
expr_stmt|;
name|aggregationParameterStandardObjectInspectors
operator|=
operator|new
name|ObjectInspector
index|[
name|conf
operator|.
name|getAggregators
argument_list|()
operator|.
name|size
argument_list|()
index|]
index|[]
expr_stmt|;
name|aggregationParameterObjects
operator|=
operator|new
name|Object
index|[
name|conf
operator|.
name|getAggregators
argument_list|()
operator|.
name|size
argument_list|()
index|]
index|[]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregationParameterFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
name|parameters
init|=
name|conf
operator|.
name|getAggregators
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|aggregationParameterFields
index|[
name|i
index|]
operator|=
operator|new
name|ExprNodeEvaluator
index|[
name|parameters
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|aggregationParameterObjectInspectors
index|[
name|i
index|]
operator|=
operator|new
name|ObjectInspector
index|[
name|parameters
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|aggregationParameterStandardObjectInspectors
index|[
name|i
index|]
operator|=
operator|new
name|ObjectInspector
index|[
name|parameters
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|aggregationParameterObjects
index|[
name|i
index|]
operator|=
operator|new
name|Object
index|[
name|parameters
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|parameters
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|aggregationParameterFields
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|aggregationParameterObjectInspectors
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
literal|null
expr_stmt|;
name|aggregationParameterStandardObjectInspectors
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
literal|null
expr_stmt|;
name|aggregationParameterObjects
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// init aggregationIsDistinct
name|aggregationIsDistinct
operator|=
operator|new
name|boolean
index|[
name|conf
operator|.
name|getAggregators
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregationIsDistinct
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|aggregationIsDistinct
index|[
name|i
index|]
operator|=
name|conf
operator|.
name|getAggregators
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getDistinct
argument_list|()
expr_stmt|;
block|}
comment|// init aggregationClasses
name|aggregationClasses
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|UDAFEvaluator
argument_list|>
index|[]
operator|)
operator|new
name|Class
index|[
name|conf
operator|.
name|getAggregators
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|conf
operator|.
name|getAggregators
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|aggregationDesc
name|agg
init|=
name|conf
operator|.
name|getAggregators
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|aggregationClasses
index|[
name|i
index|]
operator|=
name|agg
operator|.
name|getAggregationClass
argument_list|()
expr_stmt|;
block|}
comment|// init aggregations, aggregationsAggregateMethods,
comment|// aggregationsEvaluateMethods
name|aggregationsAggregateMethods
operator|=
operator|new
name|Method
index|[
name|aggregationClasses
operator|.
name|length
index|]
expr_stmt|;
name|aggregationsEvaluateMethods
operator|=
operator|new
name|Method
index|[
name|aggregationClasses
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregationClasses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|evaluateMethodName
init|=
name|conf
operator|.
name|getEvalMethods
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|aggregateMethodName
init|=
name|conf
operator|.
name|getAggMethods
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// aggregationsAggregateMethods
for|for
control|(
name|Method
name|m
range|:
name|aggregationClasses
index|[
name|i
index|]
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|aggregateMethodName
argument_list|)
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
name|aggregationParameterFields
index|[
name|i
index|]
operator|.
name|length
condition|)
block|{
name|aggregationsAggregateMethods
index|[
name|i
index|]
operator|=
name|m
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
literal|null
operator|==
name|aggregationsAggregateMethods
index|[
name|i
index|]
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Cannot find "
operator|+
name|aggregateMethodName
operator|+
literal|" method of UDAF class "
operator|+
name|aggregationClasses
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|" that accepts "
operator|+
name|aggregationParameterFields
index|[
name|i
index|]
operator|.
name|length
operator|+
literal|" parameters!"
argument_list|)
throw|;
block|}
comment|// aggregationsEvaluateMethods
try|try
block|{
name|aggregationsEvaluateMethods
index|[
name|i
index|]
operator|=
name|aggregationClasses
index|[
name|i
index|]
operator|.
name|getMethod
argument_list|(
name|evaluateMethodName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unable to get the method named "
operator|+
name|evaluateMethodName
operator|+
literal|" from "
operator|+
name|aggregationClasses
index|[
name|i
index|]
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|==
name|aggregationsEvaluateMethods
index|[
name|i
index|]
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Cannot find "
operator|+
name|evaluateMethodName
operator|+
literal|" method of UDAF class "
operator|+
name|aggregationClasses
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|"!"
argument_list|)
throw|;
block|}
assert|assert
operator|(
name|aggregationsEvaluateMethods
index|[
name|i
index|]
operator|!=
literal|null
operator|)
assert|;
block|}
name|aggregationsParametersLastInvoke
operator|=
operator|new
name|Object
index|[
name|conf
operator|.
name|getAggregators
argument_list|()
operator|.
name|size
argument_list|()
index|]
index|[]
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getMode
argument_list|()
operator|!=
name|groupByDesc
operator|.
name|Mode
operator|.
name|HASH
condition|)
block|{
name|aggregations
operator|=
name|newAggregations
argument_list|()
expr_stmt|;
name|hashAggr
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|hashAggregations
operator|=
operator|new
name|HashMap
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|,
name|UDAFEvaluator
index|[]
argument_list|>
argument_list|()
expr_stmt|;
name|aggregations
operator|=
name|newAggregations
argument_list|()
expr_stmt|;
name|hashAggr
operator|=
literal|true
expr_stmt|;
name|keyPositionsSize
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|aggrPositions
operator|=
operator|new
name|ArrayList
argument_list|<
name|varLenFields
argument_list|>
argument_list|()
expr_stmt|;
name|groupbyMapAggrInterval
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEGROUPBYMAPINTERVAL
argument_list|)
expr_stmt|;
comment|// compare every groupbyMapAggrInterval rows
name|numRowsCompareHashAggr
operator|=
name|groupbyMapAggrInterval
expr_stmt|;
name|minReductionHashAggr
operator|=
name|HiveConf
operator|.
name|getFloatVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPAGGRHASHMINREDUCTION
argument_list|)
expr_stmt|;
block|}
comment|// init objectInspectors
name|int
name|totalFields
init|=
name|keyFields
operator|.
name|length
operator|+
name|aggregationClasses
operator|.
name|length
decl_stmt|;
name|objectInspectors
operator|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|totalFields
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|objectInspectors
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregationClasses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|objectInspectors
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|PrimitiveObjectInspectorUtils
operator|.
name|getTypeEntryFromPrimitiveWritableClass
argument_list|(
name|aggregationsEvaluateMethods
index|[
name|i
index|]
operator|.
name|getReturnType
argument_list|()
argument_list|)
operator|.
name|primitiveCategory
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fieldNames
operator|=
name|conf
operator|.
name|getOutputColumnNames
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keyObjectInspectors
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|keyObjectInspectors
index|[
name|i
index|]
operator|=
name|keyFields
index|[
name|i
index|]
operator|.
name|initialize
argument_list|(
name|inputObjInspector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|currentKeyObjectInspectors
index|[
name|i
index|]
operator|=
name|ObjectInspectorUtils
operator|.
name|getStandardObjectInspector
argument_list|(
name|keyObjectInspectors
index|[
name|i
index|]
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
expr_stmt|;
block|}
name|objectInspectors
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|currentKeyObjectInspectors
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Generate key names
name|ArrayList
argument_list|<
name|String
argument_list|>
name|keyNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|keyFields
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|keyNames
operator|.
name|add
argument_list|(
name|fieldNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newKeyObjectInspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|keyNames
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|keyObjectInspectors
argument_list|)
argument_list|)
expr_stmt|;
name|currentKeyObjectInspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|keyNames
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|currentKeyObjectInspectors
argument_list|)
argument_list|)
expr_stmt|;
name|outputObjectInspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fieldNames
argument_list|,
name|objectInspectors
argument_list|)
expr_stmt|;
name|firstRow
operator|=
literal|true
expr_stmt|;
comment|// estimate the number of hash table entries based on the size of each entry. Since the size of a entry
comment|// is not known, estimate that based on the number of entries
if|if
condition|(
name|conf
operator|.
name|getMode
argument_list|()
operator|==
name|groupByDesc
operator|.
name|Mode
operator|.
name|HASH
condition|)
name|computeMaxEntriesHashAggr
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|initializeChildren
argument_list|(
name|hconf
argument_list|,
name|reporter
argument_list|,
operator|new
name|ObjectInspector
index|[]
block|{
name|outputObjectInspector
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Estimate the number of entries in map-side hash table.     * The user can specify the total amount of memory to be used by the map-side hash. By default, all available    * memory is used. The size of each row is estimated, rather crudely, and the number of entries are figure out    * based on that.     * @return number of entries that can fit in hash table - useful for map-side aggregation only    **/
specifier|private
name|void
name|computeMaxEntriesHashAggr
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
block|{
name|maxHashTblMemory
operator|=
call|(
name|long
call|)
argument_list|(
name|HiveConf
operator|.
name|getFloatVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPAGGRHASHMEMORY
argument_list|)
operator|*
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|maxMemory
argument_list|()
argument_list|)
expr_stmt|;
name|estimateRowSize
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|int
name|javaObjectOverHead
init|=
literal|64
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|javaHashEntryOverHead
init|=
literal|64
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|javaSizePrimitiveType
init|=
literal|16
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|javaSizeUnknownType
init|=
literal|256
decl_stmt|;
comment|/**    * The size of the element at position 'pos' is returned, if possible.     * If the datatype is of variable length, STRING, a list of such key positions is maintained, and the size for such positions is    * then actually calculated at runtime.    * @param pos the position of the key    * @param c   the type of the key    * @return the size of this datatype    **/
specifier|private
name|int
name|getSize
parameter_list|(
name|int
name|pos
parameter_list|,
name|PrimitiveCategory
name|category
parameter_list|)
block|{
switch|switch
condition|(
name|category
condition|)
block|{
case|case
name|VOID
case|:
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
block|{
return|return
name|javaSizePrimitiveType
return|;
block|}
case|case
name|STRING
case|:
block|{
name|keyPositionsSize
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|javaObjectOverHead
return|;
block|}
default|default:
block|{
return|return
name|javaSizeUnknownType
return|;
block|}
block|}
block|}
comment|/**    * The size of the element at position 'pos' is returned, if possible.     * If the field is of variable length, STRING, a list of such field names for the field position is maintained, and the size     * for such positions is then actually calculated at runtime.    * @param pos the position of the key    * @param c   the type of the key    * @param f   the field to be added    * @return the size of this datatype    **/
specifier|private
name|int
name|getSize
parameter_list|(
name|int
name|pos
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|,
name|Field
name|f
parameter_list|)
block|{
if|if
condition|(
name|c
operator|.
name|isPrimitive
argument_list|()
operator|||
name|c
operator|.
name|isInstance
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|||
name|c
operator|.
name|isInstance
argument_list|(
operator|new
name|Byte
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
argument_list|)
operator|||
name|c
operator|.
name|isInstance
argument_list|(
operator|new
name|Short
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
operator|||
name|c
operator|.
name|isInstance
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
name|c
operator|.
name|isInstance
argument_list|(
operator|new
name|Long
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
name|c
operator|.
name|isInstance
argument_list|(
operator|new
name|Float
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
name|c
operator|.
name|isInstance
argument_list|(
operator|new
name|Double
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
return|return
name|javaSizePrimitiveType
return|;
if|if
condition|(
name|c
operator|.
name|isInstance
argument_list|(
operator|new
name|String
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|varLenFields
name|v
init|=
literal|null
decl_stmt|;
for|for
control|(
name|idx
operator|=
literal|0
init|;
name|idx
operator|<
name|aggrPositions
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|v
operator|=
name|aggrPositions
operator|.
name|get
argument_list|(
name|idx
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|.
name|getAggrPos
argument_list|()
operator|==
name|pos
condition|)
break|break;
block|}
if|if
condition|(
name|idx
operator|==
name|aggrPositions
operator|.
name|size
argument_list|()
condition|)
block|{
name|v
operator|=
operator|new
name|varLenFields
argument_list|(
name|pos
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Field
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|aggrPositions
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
name|v
operator|.
name|getFields
argument_list|()
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
return|return
name|javaObjectOverHead
return|;
block|}
return|return
name|javaSizeUnknownType
return|;
block|}
comment|/**    * @param pos position of the key    * @param typeinfo type of the input    * @return the size of this datatype    **/
specifier|private
name|int
name|getSize
parameter_list|(
name|int
name|pos
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
if|if
condition|(
name|typeInfo
operator|instanceof
name|PrimitiveTypeInfo
condition|)
return|return
name|getSize
argument_list|(
name|pos
argument_list|,
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
return|;
return|return
name|javaSizeUnknownType
return|;
block|}
comment|/**    * @return the size of each row    **/
specifier|private
name|void
name|estimateRowSize
parameter_list|()
block|{
comment|// estimate the size of each entry -
comment|// a datatype with unknown size (String/Struct etc. - is assumed to be 256 bytes for now).
comment|// 64 bytes is the overhead for a reference
name|fixedRowSize
operator|=
name|javaHashEntryOverHead
expr_stmt|;
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
name|keys
init|=
name|conf
operator|.
name|getKeys
argument_list|()
decl_stmt|;
comment|// Go over all the keys and get the size of the fields of fixed length. Keep track of the variable length keys
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
name|fixedRowSize
operator|+=
name|getSize
argument_list|(
name|pos
argument_list|,
name|keys
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|.
name|getTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
comment|// Go over all the aggregation classes and and get the size of the fields of fixed length. Keep track of the variable length
comment|// fields in these aggregation classes.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregationClasses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fixedRowSize
operator|+=
name|javaObjectOverHead
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|UDAFEvaluator
argument_list|>
name|agg
init|=
name|aggregationClasses
index|[
name|i
index|]
decl_stmt|;
name|Field
index|[]
name|fArr
init|=
name|ObjectInspectorUtils
operator|.
name|getDeclaredNonStaticFields
argument_list|(
name|agg
argument_list|)
decl_stmt|;
for|for
control|(
name|Field
name|f
range|:
name|fArr
control|)
block|{
name|fixedRowSize
operator|+=
name|getSize
argument_list|(
name|i
argument_list|,
name|f
operator|.
name|getType
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|UDAFEvaluator
index|[]
name|newAggregations
parameter_list|()
throws|throws
name|HiveException
block|{
name|UDAFEvaluator
index|[]
name|aggs
init|=
operator|new
name|UDAFEvaluator
index|[
name|aggregationClasses
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregationClasses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|aggs
index|[
name|i
index|]
operator|=
name|aggregationClasses
index|[
name|i
index|]
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unable to create an instance of class "
operator|+
name|aggregationClasses
index|[
name|i
index|]
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|aggs
index|[
name|i
index|]
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
return|return
name|aggs
return|;
block|}
specifier|protected
name|void
name|updateAggregations
parameter_list|(
name|UDAFEvaluator
index|[]
name|aggs
parameter_list|,
name|Object
name|row
parameter_list|,
name|ObjectInspector
name|rowInspector
parameter_list|,
name|boolean
name|hashAggr
parameter_list|,
name|boolean
name|newEntry
parameter_list|,
name|Object
index|[]
index|[]
name|lastInvoke
parameter_list|)
throws|throws
name|HiveException
block|{
for|for
control|(
name|int
name|ai
init|=
literal|0
init|;
name|ai
operator|<
name|aggs
operator|.
name|length
condition|;
name|ai
operator|++
control|)
block|{
comment|// Calculate the parameters
name|Object
index|[]
name|o
init|=
operator|new
name|Object
index|[
name|aggregationParameterFields
index|[
name|ai
index|]
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|pi
init|=
literal|0
init|;
name|pi
operator|<
name|aggregationParameterFields
index|[
name|ai
index|]
operator|.
name|length
condition|;
name|pi
operator|++
control|)
block|{
name|ObjectInspector
name|oi
init|=
name|aggregationParameterObjectInspectors
index|[
name|ai
index|]
index|[
name|pi
index|]
decl_stmt|;
if|if
condition|(
name|oi
operator|==
literal|null
condition|)
block|{
name|oi
operator|=
name|aggregationParameterFields
index|[
name|ai
index|]
index|[
name|pi
index|]
operator|.
name|initialize
argument_list|(
name|rowInspector
argument_list|)
expr_stmt|;
name|aggregationParameterObjectInspectors
index|[
name|ai
index|]
index|[
name|pi
index|]
operator|=
name|oi
expr_stmt|;
name|aggregationParameterStandardObjectInspectors
index|[
name|ai
index|]
index|[
name|pi
index|]
operator|=
name|ObjectInspectorUtils
operator|.
name|getStandardObjectInspector
argument_list|(
name|oi
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
expr_stmt|;
block|}
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
decl_stmt|;
name|o
index|[
name|pi
index|]
operator|=
name|poi
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|aggregationParameterFields
index|[
name|ai
index|]
index|[
name|pi
index|]
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Update the aggregations.
if|if
condition|(
name|aggregationIsDistinct
index|[
name|ai
index|]
condition|)
block|{
if|if
condition|(
name|hashAggr
condition|)
block|{
if|if
condition|(
name|newEntry
condition|)
block|{
name|FunctionRegistry
operator|.
name|invoke
argument_list|(
name|aggregationsAggregateMethods
index|[
name|ai
index|]
argument_list|,
name|aggs
index|[
name|ai
index|]
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|boolean
name|differentParameters
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
name|lastInvoke
operator|==
literal|null
operator|)
operator|||
operator|(
name|lastInvoke
index|[
name|ai
index|]
operator|==
literal|null
operator|)
condition|)
name|differentParameters
operator|=
literal|true
expr_stmt|;
else|else
block|{
for|for
control|(
name|int
name|pi
init|=
literal|0
init|;
name|pi
operator|<
name|o
operator|.
name|length
condition|;
name|pi
operator|++
control|)
block|{
if|if
condition|(
name|o
index|[
name|pi
index|]
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|lastInvoke
index|[
name|ai
index|]
index|[
name|pi
index|]
operator|!=
literal|null
condition|)
block|{
name|differentParameters
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|o
index|[
name|pi
index|]
operator|.
name|equals
argument_list|(
name|lastInvoke
index|[
name|ai
index|]
index|[
name|pi
index|]
argument_list|)
condition|)
block|{
name|differentParameters
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|differentParameters
condition|)
block|{
name|FunctionRegistry
operator|.
name|invoke
argument_list|(
name|aggregationsAggregateMethods
index|[
name|ai
index|]
argument_list|,
name|aggs
index|[
name|ai
index|]
argument_list|,
name|o
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastInvoke
index|[
name|ai
index|]
operator|==
literal|null
condition|)
block|{
name|lastInvoke
index|[
name|ai
index|]
operator|=
operator|new
name|Object
index|[
name|o
operator|.
name|length
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|pi
init|=
literal|0
init|;
name|pi
operator|<
name|o
operator|.
name|length
condition|;
name|pi
operator|++
control|)
block|{
name|lastInvoke
index|[
name|ai
index|]
index|[
name|pi
index|]
operator|=
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|o
index|[
name|pi
index|]
argument_list|,
name|aggregationParameterStandardObjectInspectors
index|[
name|ai
index|]
index|[
name|pi
index|]
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|FunctionRegistry
operator|.
name|invoke
argument_list|(
name|aggregationsAggregateMethods
index|[
name|ai
index|]
argument_list|,
name|aggs
index|[
name|ai
index|]
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|process
parameter_list|(
name|Object
name|row
parameter_list|,
name|ObjectInspector
name|rowInspector
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
name|firstRow
operator|=
literal|false
expr_stmt|;
comment|// Total number of input rows is needed for hash aggregation only
if|if
condition|(
name|hashAggr
condition|)
block|{
name|numRowsInput
operator|++
expr_stmt|;
comment|// if hash aggregation is not behaving properly, disable it
if|if
condition|(
name|numRowsInput
operator|==
name|numRowsCompareHashAggr
condition|)
block|{
name|numRowsCompareHashAggr
operator|+=
name|groupbyMapAggrInterval
expr_stmt|;
comment|// map-side aggregation should reduce the entries by at-least half
if|if
condition|(
name|numRowsHashTbl
operator|>
name|numRowsInput
operator|*
name|minReductionHashAggr
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Disable Hash Aggr: #hash table = "
operator|+
name|numRowsHashTbl
operator|+
literal|" #total = "
operator|+
name|numRowsInput
operator|+
literal|" reduction = "
operator|+
literal|1.0
operator|*
operator|(
name|numRowsHashTbl
operator|/
name|numRowsInput
operator|)
operator|+
literal|" minReduction = "
operator|+
name|minReductionHashAggr
argument_list|)
expr_stmt|;
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hashAggr
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Hash Aggr Enabled: #hash table = "
operator|+
name|numRowsHashTbl
operator|+
literal|" #total = "
operator|+
name|numRowsInput
operator|+
literal|" reduction = "
operator|+
literal|1.0
operator|*
operator|(
name|numRowsHashTbl
operator|/
name|numRowsInput
operator|)
operator|+
literal|" minReduction = "
operator|+
name|minReductionHashAggr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
comment|// Compute the keys
name|newKeys
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keyObjectInspectors
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|keyObjectInspectors
index|[
name|i
index|]
operator|=
name|keyFields
index|[
name|i
index|]
operator|.
name|initialize
argument_list|(
name|rowInspector
argument_list|)
expr_stmt|;
block|}
name|keyObjects
index|[
name|i
index|]
operator|=
name|keyFields
index|[
name|i
index|]
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|newKeys
operator|.
name|add
argument_list|(
name|keyObjects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hashAggr
condition|)
name|processHashAggr
argument_list|(
name|row
argument_list|,
name|rowInspector
argument_list|,
name|newKeys
argument_list|)
expr_stmt|;
else|else
name|processAggr
argument_list|(
name|row
argument_list|,
name|rowInspector
argument_list|,
name|newKeys
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|deepCopyElements
parameter_list|(
name|Object
index|[]
name|keys
parameter_list|,
name|ObjectInspector
index|[]
name|keyObjectInspectors
parameter_list|,
name|ObjectInspectorCopyOption
name|copyOption
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|keys
operator|.
name|length
argument_list|)
decl_stmt|;
name|deepCopyElements
argument_list|(
name|keys
argument_list|,
name|keyObjectInspectors
argument_list|,
name|result
argument_list|,
name|copyOption
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|void
name|deepCopyElements
parameter_list|(
name|Object
index|[]
name|keys
parameter_list|,
name|ObjectInspector
index|[]
name|keyObjectInspectors
parameter_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|result
parameter_list|,
name|ObjectInspectorCopyOption
name|copyOption
parameter_list|)
block|{
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|keyObjectInspectors
index|[
name|i
index|]
argument_list|,
name|copyOption
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processHashAggr
parameter_list|(
name|Object
name|row
parameter_list|,
name|ObjectInspector
name|rowInspector
parameter_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|newKeys
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Prepare aggs for updating
name|UDAFEvaluator
index|[]
name|aggs
init|=
literal|null
decl_stmt|;
name|boolean
name|newEntry
init|=
literal|false
decl_stmt|;
comment|// hash-based aggregations
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|newDefaultKeys
init|=
name|deepCopyElements
argument_list|(
name|keyObjects
argument_list|,
name|keyObjectInspectors
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
decl_stmt|;
name|aggs
operator|=
name|hashAggregations
operator|.
name|get
argument_list|(
name|newDefaultKeys
argument_list|)
expr_stmt|;
if|if
condition|(
name|aggs
operator|==
literal|null
condition|)
block|{
name|aggs
operator|=
name|newAggregations
argument_list|()
expr_stmt|;
name|hashAggregations
operator|.
name|put
argument_list|(
name|newDefaultKeys
argument_list|,
name|aggs
argument_list|)
expr_stmt|;
name|newEntry
operator|=
literal|true
expr_stmt|;
name|numRowsHashTbl
operator|++
expr_stmt|;
comment|// new entry in the hash table
block|}
comment|// Update the aggs
name|updateAggregations
argument_list|(
name|aggs
argument_list|,
name|row
argument_list|,
name|rowInspector
argument_list|,
literal|true
argument_list|,
name|newEntry
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// based on used-specified parameters, check if the hash table needs to be flushed
if|if
condition|(
name|shouldBeFlushed
argument_list|(
name|newKeys
argument_list|)
condition|)
block|{
name|flush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processAggr
parameter_list|(
name|Object
name|row
parameter_list|,
name|ObjectInspector
name|rowInspector
parameter_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|newKeys
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Prepare aggs for updating
name|UDAFEvaluator
index|[]
name|aggs
init|=
literal|null
decl_stmt|;
name|Object
index|[]
index|[]
name|lastInvoke
init|=
literal|null
decl_stmt|;
name|boolean
name|keysAreEqual
init|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|newKeys
argument_list|,
name|newKeyObjectInspector
argument_list|,
name|currentKeys
argument_list|,
name|currentKeyObjectInspector
argument_list|)
operator|==
literal|0
decl_stmt|;
comment|// Forward the current keys if needed for sort-based aggregation
if|if
condition|(
name|currentKeys
operator|!=
literal|null
operator|&&
operator|!
name|keysAreEqual
condition|)
name|forward
argument_list|(
name|currentKeys
argument_list|,
name|aggregations
argument_list|)
expr_stmt|;
comment|// Need to update the keys?
if|if
condition|(
name|currentKeys
operator|==
literal|null
operator|||
operator|!
name|keysAreEqual
condition|)
block|{
if|if
condition|(
name|currentKeys
operator|==
literal|null
condition|)
block|{
name|currentKeys
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|keyFields
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|deepCopyElements
argument_list|(
name|keyObjects
argument_list|,
name|keyObjectInspectors
argument_list|,
name|currentKeys
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
expr_stmt|;
comment|// Init aggregations
for|for
control|(
name|UDAFEvaluator
name|aggregation
range|:
name|aggregations
control|)
name|aggregation
operator|.
name|init
argument_list|()
expr_stmt|;
comment|// clear parameters in last-invoke
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregationsParametersLastInvoke
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|aggregationsParametersLastInvoke
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|aggs
operator|=
name|aggregations
expr_stmt|;
name|lastInvoke
operator|=
name|aggregationsParametersLastInvoke
expr_stmt|;
comment|// Update the aggs
name|updateAggregations
argument_list|(
name|aggs
argument_list|,
name|row
argument_list|,
name|rowInspector
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|lastInvoke
argument_list|)
expr_stmt|;
block|}
comment|/**    * Based on user-parameters, should the hash table be flushed.    * @param newKeys keys for the row under consideration    **/
specifier|private
name|boolean
name|shouldBeFlushed
parameter_list|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|newKeys
parameter_list|)
block|{
name|int
name|numEntries
init|=
name|hashAggregations
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// The fixed size for the aggregation class is already known. Get the variable portion of the size every NUMROWSESTIMATESIZE rows.
if|if
condition|(
operator|(
name|numEntriesHashTable
operator|==
literal|0
operator|)
operator|||
operator|(
operator|(
name|numEntries
operator|%
name|NUMROWSESTIMATESIZE
operator|)
operator|==
literal|0
operator|)
condition|)
block|{
for|for
control|(
name|Integer
name|pos
range|:
name|keyPositionsSize
control|)
block|{
name|Object
name|key
init|=
name|newKeys
operator|.
name|get
argument_list|(
name|pos
operator|.
name|intValue
argument_list|()
argument_list|)
decl_stmt|;
comment|// Ignore nulls
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|key
operator|instanceof
name|String
condition|)
block|{
name|totalVariableSize
operator|+=
operator|(
operator|(
name|String
operator|)
name|key
operator|)
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|instanceof
name|Text
condition|)
block|{
name|totalVariableSize
operator|+=
operator|(
operator|(
name|Text
operator|)
name|key
operator|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|UDAFEvaluator
index|[]
name|aggs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|aggrPositions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|aggs
operator|=
name|hashAggregations
operator|.
name|get
argument_list|(
name|newKeys
argument_list|)
expr_stmt|;
for|for
control|(
name|varLenFields
name|v
range|:
name|aggrPositions
control|)
block|{
name|int
name|aggrPos
init|=
name|v
operator|.
name|getAggrPos
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Field
argument_list|>
name|fieldsVarLen
init|=
name|v
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|UDAFEvaluator
name|agg
init|=
name|aggs
index|[
name|aggrPos
index|]
decl_stmt|;
try|try
block|{
for|for
control|(
name|Field
name|f
range|:
name|fieldsVarLen
control|)
name|totalVariableSize
operator|+=
operator|(
operator|(
name|String
operator|)
name|f
operator|.
name|get
argument_list|(
name|agg
argument_list|)
operator|)
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
assert|assert
literal|false
assert|;
block|}
block|}
name|numEntriesVarSize
operator|++
expr_stmt|;
comment|// Update the number of entries that can fit in the hash table
name|numEntriesHashTable
operator|=
call|(
name|int
call|)
argument_list|(
name|maxHashTblMemory
operator|/
operator|(
name|fixedRowSize
operator|+
operator|(
operator|(
name|int
operator|)
name|totalVariableSize
operator|/
name|numEntriesVarSize
operator|)
operator|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Hash Aggr: #hash table = "
operator|+
name|numEntries
operator|+
literal|" #max in hash table = "
operator|+
name|numEntriesHashTable
argument_list|)
expr_stmt|;
block|}
comment|// flush if necessary
if|if
condition|(
name|numEntries
operator|>=
name|numEntriesHashTable
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|flush
parameter_list|(
name|boolean
name|complete
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Currently, the algorithm flushes 10% of the entries - this can be
comment|// changed in the future
if|if
condition|(
name|complete
condition|)
block|{
name|Iterator
name|iter
init|=
name|hashAggregations
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|,
name|UDAFEvaluator
index|[]
argument_list|>
name|m
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|forward
argument_list|(
name|m
operator|.
name|getKey
argument_list|()
argument_list|,
name|m
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hashAggregations
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hashAggregations
operator|=
literal|null
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Hash Table completed flushed"
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|oldSize
init|=
name|hashAggregations
operator|.
name|size
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Hash Tbl flush: #hash table = "
operator|+
name|oldSize
argument_list|)
expr_stmt|;
name|Iterator
name|iter
init|=
name|hashAggregations
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|numDel
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|,
name|UDAFEvaluator
index|[]
argument_list|>
name|m
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|forward
argument_list|(
name|m
operator|.
name|getKey
argument_list|()
argument_list|,
name|m
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|numDel
operator|++
expr_stmt|;
if|if
condition|(
name|numDel
operator|*
literal|10
operator|>=
name|oldSize
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Hash Table flushed: new size = "
operator|+
name|hashAggregations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
specifier|transient
name|Object
index|[]
name|forwardCache
decl_stmt|;
comment|/**    * Forward a record of keys and aggregation results.    *     * @param keys    *          The keys in the record    * @throws HiveException    */
specifier|protected
name|void
name|forward
parameter_list|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|keys
parameter_list|,
name|UDAFEvaluator
index|[]
name|aggs
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|totalFields
init|=
name|keys
operator|.
name|size
argument_list|()
operator|+
name|aggs
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|forwardCache
operator|==
literal|null
condition|)
block|{
name|forwardCache
operator|=
operator|new
name|Object
index|[
name|totalFields
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|forwardCache
index|[
name|i
index|]
operator|=
name|keys
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|forwardCache
index|[
name|keys
operator|.
name|size
argument_list|()
operator|+
name|i
index|]
operator|=
name|aggregationsEvaluateMethods
index|[
name|i
index|]
operator|.
name|invoke
argument_list|(
name|aggs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unable to execute UDAF function "
operator|+
name|aggregationsEvaluateMethods
index|[
name|i
index|]
operator|+
literal|" "
operator|+
literal|" on object "
operator|+
literal|"("
operator|+
name|aggs
index|[
name|i
index|]
operator|+
literal|") "
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|forward
argument_list|(
name|forwardCache
argument_list|,
name|outputObjectInspector
argument_list|)
expr_stmt|;
block|}
comment|/**    * We need to forward all the aggregations to children.    *     */
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|abort
condition|)
block|{
try|try
block|{
comment|// If there is no grouping key and no row came to this operator
if|if
condition|(
name|firstRow
operator|&&
operator|(
name|keyFields
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
name|firstRow
operator|=
literal|false
expr_stmt|;
comment|// There is no grouping key - simulate a null row
comment|// This is based on the assumption that a null row is ignored by aggregation functions
for|for
control|(
name|int
name|ai
init|=
literal|0
init|;
name|ai
operator|<
name|aggregations
operator|.
name|length
condition|;
name|ai
operator|++
control|)
block|{
comment|// Calculate the parameters
name|Object
index|[]
name|o
init|=
operator|new
name|Object
index|[
name|aggregationParameterFields
index|[
name|ai
index|]
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|pi
init|=
literal|0
init|;
name|pi
operator|<
name|aggregationParameterFields
index|[
name|ai
index|]
operator|.
name|length
condition|;
name|pi
operator|++
control|)
name|o
index|[
name|pi
index|]
operator|=
literal|null
expr_stmt|;
name|FunctionRegistry
operator|.
name|invoke
argument_list|(
name|aggregationsAggregateMethods
index|[
name|ai
index|]
argument_list|,
name|aggregations
index|[
name|ai
index|]
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
comment|// create dummy keys - size 0
name|forward
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|aggregations
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|hashAggregations
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Begin Hash Table flush at close: size = "
operator|+
name|hashAggregations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|iter
init|=
name|hashAggregations
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|,
name|UDAFEvaluator
index|[]
argument_list|>
name|m
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|forward
argument_list|(
name|m
operator|.
name|getKey
argument_list|()
argument_list|,
name|m
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|hashAggregations
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|aggregations
operator|!=
literal|null
condition|)
block|{
comment|// sort-based aggregations
if|if
condition|(
name|currentKeys
operator|!=
literal|null
condition|)
block|{
name|forward
argument_list|(
name|currentKeys
argument_list|,
name|aggregations
argument_list|)
expr_stmt|;
block|}
name|currentKeys
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|// The GroupByOperator is not initialized, which means there is no data
comment|// (since we initialize the operators when we see the first record).
comment|// Just do nothing here.
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|super
operator|.
name|close
argument_list|(
name|abort
argument_list|)
expr_stmt|;
block|}
comment|// Group by contains the columns needed - no need to aggregate from children
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|genColLists
parameter_list|(
name|HashMap
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|,
name|OpParseContext
argument_list|>
name|opParseCtx
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|colLists
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
name|keys
init|=
name|conf
operator|.
name|getKeys
argument_list|()
decl_stmt|;
for|for
control|(
name|exprNodeDesc
name|key
range|:
name|keys
control|)
name|colLists
operator|=
name|Utilities
operator|.
name|mergeUniqElems
argument_list|(
name|colLists
argument_list|,
name|key
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|aggregationDesc
argument_list|>
name|aggrs
init|=
name|conf
operator|.
name|getAggregators
argument_list|()
decl_stmt|;
for|for
control|(
name|aggregationDesc
name|aggr
range|:
name|aggrs
control|)
block|{
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
name|params
init|=
name|aggr
operator|.
name|getParameters
argument_list|()
decl_stmt|;
for|for
control|(
name|exprNodeDesc
name|param
range|:
name|params
control|)
name|colLists
operator|=
name|Utilities
operator|.
name|mergeUniqElems
argument_list|(
name|colLists
argument_list|,
name|param
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|colLists
return|;
block|}
comment|/**    * @return the name of the operator    */
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
literal|"GBY"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

