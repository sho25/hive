begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_class
specifier|public
class|class
name|VectorExpressionDescriptor
block|{
specifier|public
enum|enum
name|ArgumentType
block|{
name|NONE
argument_list|(
literal|0
argument_list|)
block|,
name|LONG
argument_list|(
literal|1
argument_list|)
block|,
name|DOUBLE
argument_list|(
literal|2
argument_list|)
block|,
name|STRING
argument_list|(
literal|3
argument_list|)
block|,
name|ANY
argument_list|(
literal|7
argument_list|)
block|;
specifier|private
specifier|final
name|int
name|value
decl_stmt|;
name|ArgumentType
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|val
expr_stmt|;
block|}
specifier|public
name|int
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
specifier|static
name|ArgumentType
name|getType
parameter_list|(
name|String
name|inType
parameter_list|)
block|{
return|return
name|valueOf
argument_list|(
name|VectorizationContext
operator|.
name|getNormalizedTypeName
argument_list|(
name|inType
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
enum|enum
name|InputExpressionType
block|{
name|NONE
argument_list|(
literal|0
argument_list|)
block|,
name|COLUMN
argument_list|(
literal|1
argument_list|)
block|,
name|SCALAR
argument_list|(
literal|2
argument_list|)
block|;
specifier|private
specifier|final
name|int
name|value
decl_stmt|;
name|InputExpressionType
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|val
expr_stmt|;
block|}
specifier|public
name|int
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
specifier|public
enum|enum
name|Mode
block|{
name|PROJECTION
argument_list|(
literal|0
argument_list|)
block|,
name|FILTER
argument_list|(
literal|1
argument_list|)
block|;
specifier|private
specifier|final
name|int
name|value
decl_stmt|;
name|Mode
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|val
expr_stmt|;
block|}
specifier|public
name|int
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
comment|/**    * Each vector expression has a bitmap that determines the kind or a classification for    * the expression. Following parameters are used to identify the kind of an expression.    *<ol>    *<li>The expression produces an output column (projection) or does in-place filtering    *     (filter).</li>    *<li>Number if arguments the expression takes (unary, binary etc). For now we assume maximum 3    *     arguments.</li>    *<li>Types of each argument (long/double/string)</li>    *<li>The input to the expression is a column or a scalar.</li>    *</ol>    * The bitmap consists of 18 bits:    *<ul>    *<li>1 bit for filter/projection.    *<li>2 bits for number of input arguments.    *<li>3 bits for each argument type. Total 9 bits for maximum 3 arguments. For unary    *       expressions only first 3 bits are set, rest of the 6 bits are set to 0.    *<li>2 bits to encode whether argument is a column or scalar. Total 6 bits for each argument.    *<ul>    */
specifier|public
specifier|static
class|class
name|Builder
block|{
specifier|private
name|Mode
name|mode
init|=
name|Mode
operator|.
name|PROJECTION
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxNumArguments
init|=
literal|3
decl_stmt|;
name|ArgumentType
index|[]
name|argTypes
init|=
operator|new
name|ArgumentType
index|[
name|maxNumArguments
index|]
decl_stmt|;
name|InputExpressionType
index|[]
name|exprTypes
init|=
operator|new
name|InputExpressionType
index|[
name|maxNumArguments
index|]
decl_stmt|;
specifier|private
name|int
name|argCount
init|=
literal|0
decl_stmt|;
specifier|public
name|Builder
parameter_list|()
block|{
name|argTypes
index|[
literal|0
index|]
operator|=
name|ArgumentType
operator|.
name|NONE
expr_stmt|;
name|argTypes
index|[
literal|1
index|]
operator|=
name|ArgumentType
operator|.
name|NONE
expr_stmt|;
name|argTypes
index|[
literal|2
index|]
operator|=
name|ArgumentType
operator|.
name|NONE
expr_stmt|;
name|exprTypes
index|[
literal|0
index|]
operator|=
name|InputExpressionType
operator|.
name|NONE
expr_stmt|;
name|exprTypes
index|[
literal|1
index|]
operator|=
name|InputExpressionType
operator|.
name|NONE
expr_stmt|;
name|exprTypes
index|[
literal|2
index|]
operator|=
name|InputExpressionType
operator|.
name|NONE
expr_stmt|;
block|}
specifier|public
name|Builder
name|setMode
parameter_list|(
name|Mode
name|m
parameter_list|)
block|{
name|this
operator|.
name|mode
operator|=
name|m
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|setNumArguments
parameter_list|(
name|int
name|argCount
parameter_list|)
block|{
name|this
operator|.
name|argCount
operator|=
name|argCount
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|setArgumentTypes
parameter_list|(
name|ArgumentType
modifier|...
name|types
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|argTypes
index|[
name|i
index|]
operator|=
name|types
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|setArgumentTypes
parameter_list|(
name|String
modifier|...
name|types
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|argTypes
index|[
name|i
index|]
operator|=
name|ArgumentType
operator|.
name|getType
argument_list|(
name|types
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|setArgumentType
parameter_list|(
name|int
name|index
parameter_list|,
name|ArgumentType
name|type
parameter_list|)
block|{
name|argTypes
index|[
name|index
index|]
operator|=
name|type
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|setArgumentType
parameter_list|(
name|int
name|index
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|argTypes
index|[
name|index
index|]
operator|=
name|ArgumentType
operator|.
name|getType
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|setInputExpressionTypes
parameter_list|(
name|InputExpressionType
modifier|...
name|types
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|exprTypes
index|[
name|i
index|]
operator|=
name|types
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|setInputExpressionType
parameter_list|(
name|int
name|index
parameter_list|,
name|InputExpressionType
name|type
parameter_list|)
block|{
name|exprTypes
index|[
name|index
index|]
operator|=
name|type
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Descriptor
name|build
parameter_list|()
block|{
return|return
operator|new
name|Descriptor
argument_list|(
name|mode
argument_list|,
name|argCount
argument_list|,
name|argTypes
argument_list|,
name|exprTypes
argument_list|)
return|;
block|}
block|}
comment|/**    * Descriptor is immutable and is constructed by the {@link Builder} only.    */
specifier|public
specifier|static
specifier|final
class|class
name|Descriptor
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|Descriptor
name|other
init|=
operator|(
name|Descriptor
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|mode
operator|.
name|equals
argument_list|(
name|other
operator|.
name|mode
argument_list|)
operator|||
operator|(
name|argCount
operator|!=
name|other
operator|.
name|argCount
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|argTypes
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|other
operator|.
name|argTypes
index|[
name|i
index|]
argument_list|)
operator|&&
operator|(
operator|!
name|argTypes
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|ArgumentType
operator|.
name|ANY
argument_list|)
operator|&&
operator|!
name|other
operator|.
name|argTypes
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|ArgumentType
operator|.
name|ANY
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|exprTypes
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|other
operator|.
name|exprTypes
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|final
name|Mode
name|mode
decl_stmt|;
specifier|private
specifier|final
name|ArgumentType
index|[]
name|argTypes
decl_stmt|;
specifier|private
specifier|final
name|InputExpressionType
index|[]
name|exprTypes
decl_stmt|;
specifier|private
specifier|final
name|int
name|argCount
decl_stmt|;
specifier|private
name|Descriptor
parameter_list|(
name|Mode
name|mode
parameter_list|,
name|int
name|argCount
parameter_list|,
name|ArgumentType
index|[]
name|argTypes
parameter_list|,
name|InputExpressionType
index|[]
name|exprTypes
parameter_list|)
block|{
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
name|this
operator|.
name|argTypes
operator|=
name|argTypes
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|exprTypes
operator|=
name|exprTypes
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|argCount
operator|=
name|argCount
expr_stmt|;
block|}
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getVectorExpressionClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|udf
parameter_list|,
name|Descriptor
name|descriptor
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorizedExpressions
name|annotation
init|=
name|udf
operator|.
name|getAnnotation
argument_list|(
name|VectorizedExpressions
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|==
literal|null
operator|||
name|annotation
operator|.
name|value
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Class
argument_list|<
name|?
extends|extends
name|VectorExpression
argument_list|>
index|[]
name|list
init|=
name|annotation
operator|.
name|value
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|VectorExpression
argument_list|>
name|ve
range|:
name|list
control|)
block|{
try|try
block|{
if|if
condition|(
name|ve
operator|.
name|newInstance
argument_list|()
operator|.
name|getDescriptor
argument_list|()
operator|.
name|equals
argument_list|(
name|descriptor
argument_list|)
condition|)
block|{
return|return
name|ve
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

