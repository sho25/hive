begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FilterOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|ForwardWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|PreOrderOnceWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|RuleRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|TypeRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFIn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_comment
comment|/**  * This optimization will take a Filter expression, and if its predicate contains  * an OR operator whose children are constant equality expressions, it will try  * to generate an IN clause (which is more efficient). If the OR operator contains  * AND operator children, the optimization might generate an IN clause that uses  * structs.  */
end_comment

begin_class
specifier|public
class|class
name|PointLookupOptimizer
extends|extends
name|Transform
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PointLookupOptimizer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|IN_UDF
init|=
name|GenericUDFIn
operator|.
name|class
operator|.
name|getAnnotation
argument_list|(
name|Description
operator|.
name|class
argument_list|)
operator|.
name|name
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|STRUCT_UDF
init|=
name|GenericUDFStruct
operator|.
name|class
operator|.
name|getAnnotation
argument_list|(
name|Description
operator|.
name|class
argument_list|)
operator|.
name|name
argument_list|()
decl_stmt|;
comment|// these are closure-bound for all the walkers in context
specifier|public
specifier|final
name|int
name|minOrExpr
decl_stmt|;
comment|/*    * Pass in configs and pre-create a parse context    */
specifier|public
name|PointLookupOptimizer
parameter_list|(
specifier|final
name|int
name|min
parameter_list|)
block|{
name|this
operator|.
name|minOrExpr
operator|=
name|min
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ParseContext
name|transform
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// 1. Trigger transformation
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R1"
argument_list|,
name|FilterOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
operator|new
name|FilterTransformer
argument_list|()
argument_list|)
expr_stmt|;
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
literal|null
argument_list|,
name|opRules
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|ForwardWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|addAll
argument_list|(
name|pctx
operator|.
name|getTopOps
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|pctx
return|;
block|}
specifier|private
class|class
name|FilterTransformer
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|FilterOperator
name|filterOp
init|=
operator|(
name|FilterOperator
operator|)
name|nd
decl_stmt|;
name|ExprNodeDesc
name|predicate
init|=
name|filterOp
operator|.
name|getConf
argument_list|()
operator|.
name|getPredicate
argument_list|()
decl_stmt|;
comment|// Generate the list bucketing pruning predicate
name|ExprNodeDesc
name|newPredicate
init|=
name|generateInClause
argument_list|(
name|predicate
argument_list|)
decl_stmt|;
if|if
condition|(
name|newPredicate
operator|!=
literal|null
condition|)
block|{
comment|// Replace filter in current FIL with new FIL
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generated new predicate with IN clause: "
operator|+
name|newPredicate
argument_list|)
expr_stmt|;
block|}
name|filterOp
operator|.
name|getConf
argument_list|()
operator|.
name|setPredicate
argument_list|(
name|newPredicate
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|ExprNodeDesc
name|generateInClause
parameter_list|(
name|ExprNodeDesc
name|predicate
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|exprRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
name|exprRules
operator|.
name|put
argument_list|(
operator|new
name|TypeRule
argument_list|(
name|ExprNodeGenericFuncDesc
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|OrExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
comment|// The dispatcher fires the processor corresponding to the closest matching
comment|// rule and passes the context along
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
literal|null
argument_list|,
name|exprRules
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|GraphWalker
name|egw
init|=
operator|new
name|PreOrderOnceWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Node
argument_list|>
name|startNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|startNodes
operator|.
name|add
argument_list|(
name|predicate
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|outputMap
init|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|egw
operator|.
name|startWalking
argument_list|(
name|startNodes
argument_list|,
name|outputMap
argument_list|)
expr_stmt|;
return|return
operator|(
name|ExprNodeDesc
operator|)
name|outputMap
operator|.
name|get
argument_list|(
name|predicate
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|OrExprProcessor
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ExprNodeGenericFuncDesc
name|fd
init|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|nd
decl_stmt|;
comment|// 1. If it is not an OR operator, we bail out.
if|if
condition|(
operator|!
name|FunctionRegistry
operator|.
name|isOpOr
argument_list|(
name|fd
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// 2. It is an OR operator with enough children
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|fd
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|<
name|minOrExpr
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|ExprNodeColumnDesc
argument_list|,
name|ExprNodeConstantDesc
argument_list|>
argument_list|>
name|columnConstantsMap
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|boolean
name|modeAnd
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ExprNodeDesc
name|child
init|=
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// - If the child is an AND operator, extract its children
comment|// - Otherwise, take the child itself
specifier|final
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|conjunctions
decl_stmt|;
if|if
condition|(
name|FunctionRegistry
operator|.
name|isOpAnd
argument_list|(
name|child
argument_list|)
condition|)
block|{
comment|// If it is the first child, we set the mode variable value
comment|// Otherwise, if the mode we are working on is different, we
comment|// bail out
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|modeAnd
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|modeAnd
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// Multiple children
name|conjunctions
operator|=
name|child
operator|.
name|getChildren
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// If it is the first child, we set the mode variable value
comment|// Otherwise, if the mode we are working on is different, we
comment|// bail out
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|modeAnd
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|modeAnd
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// One child
name|conjunctions
operator|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|conjunctions
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
comment|// 3. We will extract the literals to introduce in the IN clause.
comment|//    If the patterns OR-AND-EqOp or OR-EqOp are not matched, we bail out
for|for
control|(
name|ExprNodeDesc
name|conjunction
range|:
name|conjunctions
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|conjunction
operator|instanceof
name|ExprNodeGenericFuncDesc
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ExprNodeGenericFuncDesc
name|conjCall
init|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|conjunction
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|GenericUDF
argument_list|>
name|genericUdfClass
init|=
name|conjCall
operator|.
name|getGenericUDF
argument_list|()
operator|.
name|getClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|GenericUDFOPEqual
operator|.
name|class
operator|==
name|genericUdfClass
condition|)
block|{
if|if
condition|(
name|conjCall
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ExprNodeColumnDesc
operator|&&
name|conjCall
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|ExprNodeConstantDesc
condition|)
block|{
name|ExprNodeColumnDesc
name|ref
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|conjCall
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|refString
init|=
name|ref
operator|.
name|toString
argument_list|()
decl_stmt|;
name|columnConstantsMap
operator|.
name|put
argument_list|(
name|refString
argument_list|,
operator|new
name|Pair
argument_list|<
name|ExprNodeColumnDesc
argument_list|,
name|ExprNodeConstantDesc
argument_list|>
argument_list|(
name|ref
argument_list|,
operator|(
name|ExprNodeConstantDesc
operator|)
name|conjCall
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|columnConstantsMap
operator|.
name|get
argument_list|(
name|refString
argument_list|)
operator|.
name|size
argument_list|()
operator|!=
name|i
operator|+
literal|1
condition|)
block|{
comment|// If we have not added to this column desc before, we bail out
return|return
literal|null
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|conjCall
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|ExprNodeColumnDesc
operator|&&
name|conjCall
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ExprNodeConstantDesc
condition|)
block|{
name|ExprNodeColumnDesc
name|ref
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|conjCall
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|refString
init|=
name|ref
operator|.
name|toString
argument_list|()
decl_stmt|;
name|columnConstantsMap
operator|.
name|put
argument_list|(
name|refString
argument_list|,
operator|new
name|Pair
argument_list|<
name|ExprNodeColumnDesc
argument_list|,
name|ExprNodeConstantDesc
argument_list|>
argument_list|(
name|ref
argument_list|,
operator|(
name|ExprNodeConstantDesc
operator|)
name|conjCall
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|columnConstantsMap
operator|.
name|get
argument_list|(
name|refString
argument_list|)
operator|.
name|size
argument_list|()
operator|!=
name|i
operator|+
literal|1
condition|)
block|{
comment|// If we have not added to this column desc before, we bail out
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
comment|// We bail out
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
comment|// We bail out
return|return
literal|null
return|;
block|}
block|}
block|}
comment|// 4. We build the new predicate and return it
name|ExprNodeDesc
name|newPredicate
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|newChildren
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
name|children
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// 4.1 Create structs
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|typeInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|constantFields
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
name|children
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|keyString
range|:
name|columnConstantsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Pair
argument_list|<
name|ExprNodeColumnDesc
argument_list|,
name|ExprNodeConstantDesc
argument_list|>
name|columnConstant
init|=
name|columnConstantsMap
operator|.
name|get
argument_list|(
name|keyString
argument_list|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|columns
operator|.
name|add
argument_list|(
name|columnConstant
operator|.
name|left
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
name|columnConstant
operator|.
name|left
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
name|columnConstant
operator|.
name|left
operator|.
name|getTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|constantFields
operator|.
name|add
argument_list|(
name|columnConstant
operator|.
name|right
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|ExprNodeDesc
name|columnsRefs
decl_stmt|;
if|if
condition|(
name|columns
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|columnsRefs
operator|=
name|columns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|columnsRefs
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|getStructTypeInfo
argument_list|(
name|names
argument_list|,
name|typeInfos
argument_list|)
argument_list|,
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
name|STRUCT_UDF
argument_list|)
operator|.
name|getGenericUDF
argument_list|()
argument_list|,
name|columns
argument_list|)
expr_stmt|;
block|}
name|newChildren
operator|.
name|add
argument_list|(
name|columnsRefs
argument_list|)
expr_stmt|;
block|}
name|ExprNodeDesc
name|values
decl_stmt|;
if|if
condition|(
name|constantFields
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|values
operator|=
name|constantFields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|values
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|getStructTypeInfo
argument_list|(
name|names
argument_list|,
name|typeInfos
argument_list|)
argument_list|,
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
name|STRUCT_UDF
argument_list|)
operator|.
name|getGenericUDF
argument_list|()
argument_list|,
name|constantFields
argument_list|)
expr_stmt|;
block|}
name|newChildren
operator|.
name|add
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
name|newPredicate
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
name|IN_UDF
argument_list|)
operator|.
name|getGenericUDF
argument_list|()
argument_list|,
name|newChildren
argument_list|)
expr_stmt|;
return|return
name|newPredicate
return|;
block|}
block|}
block|}
end_class

end_unit

