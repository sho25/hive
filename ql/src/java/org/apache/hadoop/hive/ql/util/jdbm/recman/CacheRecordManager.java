begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  * JDBM LICENSE v1.00  *  * Redistribution and use of this software and associated documentation  * ("Software"), with or without modification, are permitted provided  * that the following conditions are met:  *  * 1. Redistributions of source code must retain copyright  *    statements and notices.  Redistributions must also contain a  *    copy of this document.  *  * 2. Redistributions in binary form must reproduce the  *    above copyright notice, this list of conditions and the  *    following disclaimer in the documentation and/or other  *    materials provided with the distribution.  *  * 3. The name "JDBM" must not be used to endorse or promote  *    products derived from this Software without prior written  *    permission of Cees de Groot.  For written permission,  *    please contact cg@cdegroot.com.  *  * 4. Products derived from this Software may not be called "JDBM"  *    nor may "JDBM" appear in their names without prior written  *    permission of Cees de Groot.  *  * 5. Due credit should be given to the JDBM Project  *    (http://jdbm.sourceforge.net/).  *  * THIS SOFTWARE IS PROVIDED BY THE JDBM PROJECT AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT  * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND  * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL  * CEES DE GROOT OR ANY CONTRIBUTORS BE LIABLE FOR ANY DIRECT,  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  *  * Copyright 2000 (C) Cees de Groot. All Rights Reserved.  * Copyright 2000-2001 (C) Alex Boisvert. All Rights Reserved.  * Contributions are Copyright (C) 2000 by their associated contributors.  *  * $Id: CacheRecordManager.java,v 1.9 2005/06/25 23:12:32 doomdark Exp $  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|recman
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|RecordManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|helper
operator|.
name|CacheEvictionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|helper
operator|.
name|CachePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|helper
operator|.
name|CachePolicyListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|helper
operator|.
name|DefaultSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|helper
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|helper
operator|.
name|WrappedRuntimeException
import|;
end_import

begin_comment
comment|/**  * A RecordManager wrapping and caching another RecordManager.  *   * @author<a href="mailto:boisvert@intalio.com">Alex Boisvert</a>  * @author<a href="cg@cdegroot.com">Cees de Groot</a>  * @version $Id: CacheRecordManager.java,v 1.9 2005/06/25 23:12:32 doomdark Exp  *          $  */
end_comment

begin_class
specifier|public
class|class
name|CacheRecordManager
implements|implements
name|RecordManager
block|{
comment|/**    * Wrapped RecordManager    */
specifier|protected
name|RecordManager
name|_recman
decl_stmt|;
comment|/**    * Cache for underlying RecordManager    */
specifier|protected
name|CachePolicy
name|_cache
decl_stmt|;
comment|/**    * Construct a CacheRecordManager wrapping another RecordManager and using a    * given cache policy.    *     * @param recman    *          Wrapped RecordManager    * @param cache    *          Cache policy    */
specifier|public
name|CacheRecordManager
parameter_list|(
name|RecordManager
name|recman
parameter_list|,
name|CachePolicy
name|cache
parameter_list|)
block|{
if|if
condition|(
name|recman
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Argument 'recman' is null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Argument 'cache' is null"
argument_list|)
throw|;
block|}
name|_recman
operator|=
name|recman
expr_stmt|;
name|_cache
operator|=
name|cache
expr_stmt|;
name|_cache
operator|.
name|addListener
argument_list|(
operator|new
name|CacheListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the underlying Record Manager.    *     * @return underlying RecordManager or null if CacheRecordManager has been    *         closed.    */
specifier|public
name|RecordManager
name|getRecordManager
parameter_list|()
block|{
return|return
name|_recman
return|;
block|}
comment|/**    * Get the underlying cache policy    *     * @return underlying CachePolicy or null if CacheRecordManager has been    *         closed.    */
specifier|public
name|CachePolicy
name|getCachePolicy
parameter_list|()
block|{
return|return
name|_cache
return|;
block|}
comment|/**    * Inserts a new record using a custom serializer.    *     * @param obj    *          the object for the new record.    * @return the rowid for the new record.    * @throws IOException    *           when one of the underlying I/O operations fails.    */
specifier|public
name|long
name|insert
parameter_list|(
name|Object
name|obj
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|insert
argument_list|(
name|obj
argument_list|,
name|DefaultSerializer
operator|.
name|INSTANCE
argument_list|)
return|;
block|}
comment|/**    * Inserts a new record using a custom serializer.    *     * @param obj    *          the object for the new record.    * @param serializer    *          a custom serializer    * @return the rowid for the new record.    * @throws IOException    *           when one of the underlying I/O operations fails.    */
specifier|public
specifier|synchronized
name|long
name|insert
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Serializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|checkIfClosed
argument_list|()
expr_stmt|;
name|long
name|recid
init|=
name|_recman
operator|.
name|insert
argument_list|(
name|obj
argument_list|,
name|serializer
argument_list|)
decl_stmt|;
try|try
block|{
name|_cache
operator|.
name|put
argument_list|(
operator|new
name|Long
argument_list|(
name|recid
argument_list|)
argument_list|,
operator|new
name|CacheEntry
argument_list|(
name|recid
argument_list|,
name|obj
argument_list|,
name|serializer
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CacheEvictionException
name|except
parameter_list|)
block|{
throw|throw
operator|new
name|WrappedRuntimeException
argument_list|(
name|except
argument_list|)
throw|;
block|}
return|return
name|recid
return|;
block|}
comment|/**    * Deletes a record.    *     * @param recid    *          the rowid for the record that should be deleted.    * @throws IOException    *           when one of the underlying I/O operations fails.    */
specifier|public
specifier|synchronized
name|void
name|delete
parameter_list|(
name|long
name|recid
parameter_list|)
throws|throws
name|IOException
block|{
name|checkIfClosed
argument_list|()
expr_stmt|;
name|_recman
operator|.
name|delete
argument_list|(
name|recid
argument_list|)
expr_stmt|;
name|_cache
operator|.
name|remove
argument_list|(
operator|new
name|Long
argument_list|(
name|recid
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates a record using standard Java serialization.    *     * @param recid    *          the recid for the record that is to be updated.    * @param obj    *          the new object for the record.    * @throws IOException    *           when one of the underlying I/O operations fails.    */
specifier|public
name|void
name|update
parameter_list|(
name|long
name|recid
parameter_list|,
name|Object
name|obj
parameter_list|)
throws|throws
name|IOException
block|{
name|update
argument_list|(
name|recid
argument_list|,
name|obj
argument_list|,
name|DefaultSerializer
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates a record using a custom serializer.    *     * @param recid    *          the recid for the record that is to be updated.    * @param obj    *          the new object for the record.    * @param serializer    *          a custom serializer    * @throws IOException    *           when one of the underlying I/O operations fails.    */
specifier|public
specifier|synchronized
name|void
name|update
parameter_list|(
name|long
name|recid
parameter_list|,
name|Object
name|obj
parameter_list|,
name|Serializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|CacheEntry
name|entry
decl_stmt|;
name|Long
name|id
decl_stmt|;
name|checkIfClosed
argument_list|()
expr_stmt|;
name|id
operator|=
operator|new
name|Long
argument_list|(
name|recid
argument_list|)
expr_stmt|;
try|try
block|{
name|entry
operator|=
operator|(
name|CacheEntry
operator|)
name|_cache
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
comment|// reuse existing cache entry
name|entry
operator|.
name|_obj
operator|=
name|obj
expr_stmt|;
name|entry
operator|.
name|_serializer
operator|=
name|serializer
expr_stmt|;
name|entry
operator|.
name|_isDirty
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|_cache
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|CacheEntry
argument_list|(
name|recid
argument_list|,
name|obj
argument_list|,
name|serializer
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CacheEvictionException
name|except
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|except
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Fetches a record using standard Java serialization.    *     * @param recid    *          the recid for the record that must be fetched.    * @return the object contained in the record.    * @throws IOException    *           when one of the underlying I/O operations fails.    */
specifier|public
name|Object
name|fetch
parameter_list|(
name|long
name|recid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fetch
argument_list|(
name|recid
argument_list|,
name|DefaultSerializer
operator|.
name|INSTANCE
argument_list|)
return|;
block|}
comment|/**    * Fetches a record using a custom serializer.    *     * @param recid    *          the recid for the record that must be fetched.    * @param serializer    *          a custom serializer    * @return the object contained in the record.    * @throws IOException    *           when one of the underlying I/O operations fails.    */
specifier|public
specifier|synchronized
name|Object
name|fetch
parameter_list|(
name|long
name|recid
parameter_list|,
name|Serializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
name|checkIfClosed
argument_list|()
expr_stmt|;
name|Long
name|id
init|=
operator|new
name|Long
argument_list|(
name|recid
argument_list|)
decl_stmt|;
name|CacheEntry
name|entry
init|=
operator|(
name|CacheEntry
operator|)
name|_cache
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|entry
operator|=
operator|new
name|CacheEntry
argument_list|(
name|recid
argument_list|,
literal|null
argument_list|,
name|serializer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|entry
operator|.
name|_obj
operator|=
name|_recman
operator|.
name|fetch
argument_list|(
name|recid
argument_list|,
name|serializer
argument_list|)
expr_stmt|;
try|try
block|{
name|_cache
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CacheEvictionException
name|except
parameter_list|)
block|{
throw|throw
operator|new
name|WrappedRuntimeException
argument_list|(
name|except
argument_list|)
throw|;
block|}
block|}
return|return
name|entry
operator|.
name|_obj
return|;
block|}
comment|/**    * Closes the record manager.    *     * @throws IOException    *           when one of the underlying I/O operations fails.    */
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|checkIfClosed
argument_list|()
expr_stmt|;
name|updateCacheEntries
argument_list|()
expr_stmt|;
name|_recman
operator|.
name|close
argument_list|()
expr_stmt|;
name|_recman
operator|=
literal|null
expr_stmt|;
name|_cache
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Returns the number of slots available for "root" rowids. These slots can be    * used to store special rowids, like rowids that point to other rowids. Root    * rowids are useful for bootstrapping access to a set of data.    */
specifier|public
specifier|synchronized
name|int
name|getRootCount
parameter_list|()
block|{
name|checkIfClosed
argument_list|()
expr_stmt|;
return|return
name|_recman
operator|.
name|getRootCount
argument_list|()
return|;
block|}
comment|/**    * Returns the indicated root rowid.    *     * @see #getRootCount    */
specifier|public
specifier|synchronized
name|long
name|getRoot
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|checkIfClosed
argument_list|()
expr_stmt|;
return|return
name|_recman
operator|.
name|getRoot
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**    * Sets the indicated root rowid.    *     * @see #getRootCount    */
specifier|public
specifier|synchronized
name|void
name|setRoot
parameter_list|(
name|int
name|id
parameter_list|,
name|long
name|rowid
parameter_list|)
throws|throws
name|IOException
block|{
name|checkIfClosed
argument_list|()
expr_stmt|;
name|_recman
operator|.
name|setRoot
argument_list|(
name|id
argument_list|,
name|rowid
argument_list|)
expr_stmt|;
block|}
comment|/**    * Commit (make persistent) all changes since beginning of transaction.    */
specifier|public
specifier|synchronized
name|void
name|commit
parameter_list|()
throws|throws
name|IOException
block|{
name|checkIfClosed
argument_list|()
expr_stmt|;
name|updateCacheEntries
argument_list|()
expr_stmt|;
name|_recman
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
comment|/**    * Rollback (cancel) all changes since beginning of transaction.    */
specifier|public
specifier|synchronized
name|void
name|rollback
parameter_list|()
throws|throws
name|IOException
block|{
name|checkIfClosed
argument_list|()
expr_stmt|;
name|_recman
operator|.
name|rollback
argument_list|()
expr_stmt|;
comment|// discard all cache entries since we don't know which entries
comment|// where part of the transaction
name|_cache
operator|.
name|removeAll
argument_list|()
expr_stmt|;
block|}
comment|/**    * Obtain the record id of a named object. Returns 0 if named object doesn't    * exist.    */
specifier|public
specifier|synchronized
name|long
name|getNamedObject
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|checkIfClosed
argument_list|()
expr_stmt|;
return|return
name|_recman
operator|.
name|getNamedObject
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Set the record id of a named object.    */
specifier|public
specifier|synchronized
name|void
name|setNamedObject
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|recid
parameter_list|)
throws|throws
name|IOException
block|{
name|checkIfClosed
argument_list|()
expr_stmt|;
name|_recman
operator|.
name|setNamedObject
argument_list|(
name|name
argument_list|,
name|recid
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check if RecordManager has been closed. If so, throw an    * IllegalStateException    */
specifier|private
name|void
name|checkIfClosed
parameter_list|()
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
name|_recman
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"RecordManager has been closed"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Update all dirty cache objects to the underlying RecordManager.    */
specifier|protected
name|void
name|updateCacheEntries
parameter_list|()
throws|throws
name|IOException
block|{
name|Enumeration
name|enume
init|=
name|_cache
operator|.
name|elements
argument_list|()
decl_stmt|;
while|while
condition|(
name|enume
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|CacheEntry
name|entry
init|=
operator|(
name|CacheEntry
operator|)
name|enume
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|_isDirty
condition|)
block|{
name|_recman
operator|.
name|update
argument_list|(
name|entry
operator|.
name|_recid
argument_list|,
name|entry
operator|.
name|_obj
argument_list|,
name|entry
operator|.
name|_serializer
argument_list|)
expr_stmt|;
name|entry
operator|.
name|_isDirty
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|CacheEntry
block|{
name|long
name|_recid
decl_stmt|;
name|Object
name|_obj
decl_stmt|;
name|Serializer
name|_serializer
decl_stmt|;
name|boolean
name|_isDirty
decl_stmt|;
name|CacheEntry
parameter_list|(
name|long
name|recid
parameter_list|,
name|Object
name|obj
parameter_list|,
name|Serializer
name|serializer
parameter_list|,
name|boolean
name|isDirty
parameter_list|)
block|{
name|_recid
operator|=
name|recid
expr_stmt|;
name|_obj
operator|=
name|obj
expr_stmt|;
name|_serializer
operator|=
name|serializer
expr_stmt|;
name|_isDirty
operator|=
name|isDirty
expr_stmt|;
block|}
block|}
comment|// class CacheEntry
specifier|private
class|class
name|CacheListener
implements|implements
name|CachePolicyListener
block|{
comment|/**      * Notification that cache is evicting an object      *       * @arg obj object evited from cache      *       */
specifier|public
name|void
name|cacheObjectEvicted
parameter_list|(
name|Object
name|obj
parameter_list|)
throws|throws
name|CacheEvictionException
block|{
name|CacheEntry
name|entry
init|=
operator|(
name|CacheEntry
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|_isDirty
condition|)
block|{
try|try
block|{
name|_recman
operator|.
name|update
argument_list|(
name|entry
operator|.
name|_recid
argument_list|,
name|entry
operator|.
name|_obj
argument_list|,
name|entry
operator|.
name|_serializer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|except
parameter_list|)
block|{
throw|throw
operator|new
name|CacheEvictionException
argument_list|(
name|except
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

