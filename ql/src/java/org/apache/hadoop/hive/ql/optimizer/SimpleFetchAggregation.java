begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultGraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|RuleRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AggregationDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDescUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FileSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_comment
comment|// execute final aggregation stage for simple fetch query on fetch task
end_comment

begin_class
specifier|public
class|class
name|SimpleFetchAggregation
implements|implements
name|Transform
block|{
annotation|@
name|Override
specifier|public
name|ParseContext
name|transform
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|pctx
operator|.
name|getFetchTask
argument_list|()
operator|!=
literal|null
operator|||
operator|!
name|pctx
operator|.
name|getQB
argument_list|()
operator|.
name|getIsQuery
argument_list|()
operator|||
name|pctx
operator|.
name|getQB
argument_list|()
operator|.
name|isAnalyzeRewrite
argument_list|()
operator|||
name|pctx
operator|.
name|getQB
argument_list|()
operator|.
name|isCTAS
argument_list|()
operator|||
name|pctx
operator|.
name|getLoadFileWork
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|||
operator|!
name|pctx
operator|.
name|getLoadTableWork
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|pctx
return|;
block|}
name|String
name|GBY
init|=
name|GroupByOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
decl_stmt|;
name|String
name|RS
init|=
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
decl_stmt|;
name|String
name|SEL
init|=
name|SelectOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
decl_stmt|;
name|String
name|FS
init|=
name|FileSinkOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
decl_stmt|;
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R1"
argument_list|,
name|GBY
operator|+
name|RS
operator|+
name|GBY
operator|+
name|SEL
operator|+
name|FS
argument_list|)
argument_list|,
operator|new
name|SingleGBYProcessor
argument_list|(
name|pctx
argument_list|)
argument_list|)
expr_stmt|;
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
literal|null
argument_list|,
name|opRules
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|addAll
argument_list|(
name|pctx
operator|.
name|getTopOps
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|pctx
return|;
block|}
specifier|static
class|class
name|SingleGBYProcessor
implements|implements
name|NodeProcessor
block|{
specifier|private
name|ParseContext
name|pctx
decl_stmt|;
specifier|public
name|SingleGBYProcessor
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
block|{
name|this
operator|.
name|pctx
operator|=
name|pctx
expr_stmt|;
block|}
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|FileSinkOperator
name|FS
init|=
operator|(
name|FileSinkOperator
operator|)
name|nd
decl_stmt|;
name|GroupByOperator
name|cGBY
init|=
operator|(
name|GroupByOperator
operator|)
name|stack
operator|.
name|get
argument_list|(
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|3
argument_list|)
decl_stmt|;
name|ReduceSinkOperator
name|RS
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|stack
operator|.
name|get
argument_list|(
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|RS
operator|.
name|getConf
argument_list|()
operator|.
name|getNumReducers
argument_list|()
operator|!=
literal|1
operator|||
operator|!
name|RS
operator|.
name|getConf
argument_list|()
operator|.
name|getKeyCols
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|GroupByOperator
name|pGBY
init|=
operator|(
name|GroupByOperator
operator|)
name|stack
operator|.
name|get
argument_list|(
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|5
argument_list|)
decl_stmt|;
name|Path
name|fileName
init|=
name|FS
operator|.
name|getConf
argument_list|()
operator|.
name|getFinalDirName
argument_list|()
decl_stmt|;
name|TableDesc
name|tsDesc
init|=
name|createIntermediateFS
argument_list|(
name|pGBY
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
for|for
control|(
name|AggregationDesc
name|aggregation
range|:
name|cGBY
operator|.
name|getConf
argument_list|()
operator|.
name|getAggregators
argument_list|()
control|)
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|parameters
init|=
name|aggregation
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|aggregation
operator|.
name|setParameters
argument_list|(
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|parameters
argument_list|,
name|cGBY
argument_list|,
name|RS
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pctx
operator|.
name|setFetchTabledesc
argument_list|(
name|tsDesc
argument_list|)
expr_stmt|;
name|pctx
operator|.
name|setFetchSource
argument_list|(
name|cGBY
argument_list|)
expr_stmt|;
name|pctx
operator|.
name|setFetchSink
argument_list|(
name|SimpleFetchOptimizer
operator|.
name|replaceFSwithLS
argument_list|(
name|FS
argument_list|,
literal|"NULL"
argument_list|)
argument_list|)
expr_stmt|;
name|RS
operator|.
name|setParentOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|RS
operator|.
name|setChildOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cGBY
operator|.
name|setParentOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|TableDesc
name|createIntermediateFS
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|parent
parameter_list|,
name|Path
name|fileName
parameter_list|)
block|{
name|TableDesc
name|tsDesc
init|=
name|PlanUtils
operator|.
name|getIntermediateFileTableDesc
argument_list|(
name|PlanUtils
operator|.
name|getFieldSchemasFromRowSchema
argument_list|(
name|parent
operator|.
name|getSchema
argument_list|()
argument_list|,
literal|"temporarycol"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Create a file sink operator for this file name
name|FileSinkDesc
name|desc
init|=
operator|new
name|FileSinkDesc
argument_list|(
name|fileName
argument_list|,
name|tsDesc
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|FileSinkOperator
name|newFS
init|=
operator|(
name|FileSinkOperator
operator|)
name|OperatorFactory
operator|.
name|get
argument_list|(
name|desc
argument_list|,
name|parent
operator|.
name|getSchema
argument_list|()
argument_list|)
decl_stmt|;
name|newFS
operator|.
name|setParentOperators
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|newFS
operator|.
name|getParentOperators
argument_list|()
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|parent
operator|.
name|getChildOperators
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|parent
operator|.
name|getChildOperators
argument_list|()
operator|.
name|add
argument_list|(
name|newFS
argument_list|)
expr_stmt|;
return|return
name|tsDesc
return|;
block|}
block|}
block|}
end_class

end_unit

