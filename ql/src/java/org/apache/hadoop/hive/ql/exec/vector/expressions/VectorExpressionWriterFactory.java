begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * VectorExpressionWritableFactory helper class for generating VectorExpressionWritable objects.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|VectorExpressionWriterFactory
block|{
comment|/**    * VectorExpressionWriter base implementation, to be specialized for Long/Double/Bytes columns    */
specifier|private
specifier|static
specifier|abstract
class|class
name|VectorExpressionWriterBase
implements|implements
name|VectorExpressionWriter
block|{
specifier|protected
name|ObjectInspector
name|objectInspector
decl_stmt|;
comment|/**      * The object inspector associated with this expression. This is created from the expression      * NodeDesc (compile metadata) not from the VectorColumn info and thus preserves the type info      * lost by the vectorization process.      */
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
block|{
return|return
name|objectInspector
return|;
block|}
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|ExprNodeDesc
name|nodeDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|this
operator|.
name|objectInspector
operator|=
name|nodeDesc
operator|.
name|getWritableObjectInspector
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The base implementation must be overridden by the Long specialization      */
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|long
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal error: should not reach here"
argument_list|)
throw|;
block|}
comment|/**      * The base implementation must be overridden by the Double specialization      */
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|double
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal error: should not reach here"
argument_list|)
throw|;
block|}
comment|/**      * The base implementation must be overridden by the Bytes specialization      */
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal error: should not reach here"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Specialized writer for LongVectorColumn expressions. Will throw cast exception    * if the wrong vector column is used.    */
specifier|private
specifier|static
specifier|abstract
class|class
name|VectorExpressionWriterLong
extends|extends
name|VectorExpressionWriterBase
block|{
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|ColumnVector
name|column
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|column
decl_stmt|;
if|if
condition|(
name|lcv
operator|.
name|noNulls
operator|&&
operator|!
name|lcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|lcv
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|lcv
operator|.
name|noNulls
operator|&&
name|lcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|lcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|lcv
operator|.
name|noNulls
operator|&&
operator|!
name|lcv
operator|.
name|isRepeating
operator|&&
operator|!
name|lcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|lcv
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|lcv
operator|.
name|noNulls
operator|&&
operator|!
name|lcv
operator|.
name|isRepeating
operator|&&
name|lcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|lcv
operator|.
name|noNulls
operator|&&
name|lcv
operator|.
name|isRepeating
operator|&&
operator|!
name|lcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|lcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|lcv
operator|.
name|noNulls
operator|&&
name|lcv
operator|.
name|isRepeating
operator|&&
name|lcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Incorrect null/repeating: row:%d noNulls:%b isRepeating:%b isNull[row]:%b isNull[0]:%b"
argument_list|,
name|row
argument_list|,
name|lcv
operator|.
name|noNulls
argument_list|,
name|lcv
operator|.
name|isRepeating
argument_list|,
name|lcv
operator|.
name|isNull
index|[
name|row
index|]
argument_list|,
name|lcv
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Specialized writer for DoubleColumnVector. Will throw cast exception    * if the wrong vector column is used.    */
specifier|private
specifier|static
specifier|abstract
class|class
name|VectorExpressionWriterDouble
extends|extends
name|VectorExpressionWriterBase
block|{
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|ColumnVector
name|column
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
name|DoubleColumnVector
name|dcv
init|=
operator|(
name|DoubleColumnVector
operator|)
name|column
decl_stmt|;
if|if
condition|(
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|dcv
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|dcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
operator|&&
operator|!
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|dcv
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
operator|&&
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
operator|&&
operator|!
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|dcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
operator|&&
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Incorrect null/repeating: row:%d noNulls:%b isRepeating:%b isNull[row]:%b isNull[0]:%b"
argument_list|,
name|row
argument_list|,
name|dcv
operator|.
name|noNulls
argument_list|,
name|dcv
operator|.
name|isRepeating
argument_list|,
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
argument_list|,
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Specialized writer for BytesColumnVector. Will throw cast exception    * if the wrong vector column is used.    */
specifier|private
specifier|static
specifier|abstract
class|class
name|VectorExpressionWriterBytes
extends|extends
name|VectorExpressionWriterBase
block|{
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|ColumnVector
name|column
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
name|BytesColumnVector
name|bcv
init|=
operator|(
name|BytesColumnVector
operator|)
name|column
decl_stmt|;
if|if
condition|(
name|bcv
operator|.
name|noNulls
operator|&&
operator|!
name|bcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|bcv
operator|.
name|vector
index|[
name|row
index|]
argument_list|,
name|bcv
operator|.
name|start
index|[
name|row
index|]
argument_list|,
name|bcv
operator|.
name|length
index|[
name|row
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|bcv
operator|.
name|noNulls
operator|&&
name|bcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|bcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|bcv
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|bcv
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|bcv
operator|.
name|noNulls
operator|&&
operator|!
name|bcv
operator|.
name|isRepeating
operator|&&
operator|!
name|bcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|bcv
operator|.
name|vector
index|[
name|row
index|]
argument_list|,
name|bcv
operator|.
name|start
index|[
name|row
index|]
argument_list|,
name|bcv
operator|.
name|length
index|[
name|row
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|bcv
operator|.
name|noNulls
operator|&&
operator|!
name|bcv
operator|.
name|isRepeating
operator|&&
name|bcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|bcv
operator|.
name|noNulls
operator|&&
name|bcv
operator|.
name|isRepeating
operator|&&
operator|!
name|bcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|bcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|bcv
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|bcv
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|bcv
operator|.
name|noNulls
operator|&&
name|bcv
operator|.
name|isRepeating
operator|&&
name|bcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Incorrect null/repeating: row:%d noNulls:%b isRepeating:%b isNull[row]:%b isNull[0]:%b"
argument_list|,
name|row
argument_list|,
name|bcv
operator|.
name|noNulls
argument_list|,
name|bcv
operator|.
name|isRepeating
argument_list|,
name|bcv
operator|.
name|isNull
index|[
name|row
index|]
argument_list|,
name|bcv
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Compiles the appropriate vector expression writer based on an expression info (ExprNodeDesc)    */
specifier|public
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritable
parameter_list|(
name|ExprNodeDesc
name|nodeDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
name|nodeType
init|=
name|nodeDesc
operator|.
name|getTypeString
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"tinyint"
argument_list|)
condition|)
block|{
return|return
operator|new
name|VectorExpressionWriterLong
argument_list|()
block|{
specifier|private
name|ByteWritable
name|writable
decl_stmt|;
annotation|@
name|Override
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|ExprNodeDesc
name|nodeDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|nodeDesc
argument_list|)
expr_stmt|;
name|writable
operator|=
operator|new
name|ByteWritable
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|writable
operator|.
name|set
argument_list|(
operator|(
name|byte
operator|)
name|value
argument_list|)
expr_stmt|;
return|return
name|writable
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|nodeDesc
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|nodeType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"smallint"
argument_list|)
condition|)
block|{
return|return
operator|new
name|VectorExpressionWriterLong
argument_list|()
block|{
specifier|private
name|ShortWritable
name|writable
decl_stmt|;
annotation|@
name|Override
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|ExprNodeDesc
name|nodeDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|nodeDesc
argument_list|)
expr_stmt|;
name|writable
operator|=
operator|new
name|ShortWritable
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|writable
operator|.
name|set
argument_list|(
operator|(
name|short
operator|)
name|value
argument_list|)
expr_stmt|;
return|return
name|writable
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|nodeDesc
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|nodeType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"int"
argument_list|)
condition|)
block|{
return|return
operator|new
name|VectorExpressionWriterLong
argument_list|()
block|{
specifier|private
name|IntWritable
name|writable
decl_stmt|;
annotation|@
name|Override
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|ExprNodeDesc
name|nodeDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|nodeDesc
argument_list|)
expr_stmt|;
name|writable
operator|=
operator|new
name|IntWritable
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|writable
operator|.
name|set
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
expr_stmt|;
return|return
name|writable
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|nodeDesc
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|nodeType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"bigint"
argument_list|)
condition|)
block|{
return|return
operator|new
name|VectorExpressionWriterLong
argument_list|()
block|{
specifier|private
name|LongWritable
name|writable
decl_stmt|;
annotation|@
name|Override
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|ExprNodeDesc
name|nodeDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|nodeDesc
argument_list|)
expr_stmt|;
name|writable
operator|=
operator|new
name|LongWritable
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|writable
operator|.
name|set
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|writable
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|nodeDesc
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|nodeType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"boolean"
argument_list|)
condition|)
block|{
return|return
operator|new
name|VectorExpressionWriterLong
argument_list|()
block|{
specifier|private
name|BooleanWritable
name|writable
decl_stmt|;
annotation|@
name|Override
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|ExprNodeDesc
name|nodeDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|nodeDesc
argument_list|)
expr_stmt|;
name|writable
operator|=
operator|new
name|BooleanWritable
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|writable
operator|.
name|set
argument_list|(
name|value
operator|!=
literal|0
condition|?
literal|true
else|:
literal|false
argument_list|)
expr_stmt|;
return|return
name|writable
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|nodeDesc
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|nodeType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"timestamp"
argument_list|)
condition|)
block|{
return|return
operator|new
name|VectorExpressionWriterLong
argument_list|()
block|{
specifier|private
name|TimestampWritable
name|writable
decl_stmt|;
specifier|private
name|Timestamp
name|timestamp
decl_stmt|;
annotation|@
name|Override
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|ExprNodeDesc
name|nodeDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|nodeDesc
argument_list|)
expr_stmt|;
name|writable
operator|=
operator|new
name|TimestampWritable
argument_list|()
expr_stmt|;
name|timestamp
operator|=
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|TimestampUtils
operator|.
name|assignTimeInNanoSec
argument_list|(
name|value
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|writable
operator|.
name|set
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|writable
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|nodeDesc
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|nodeType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"string"
argument_list|)
condition|)
block|{
return|return
operator|new
name|VectorExpressionWriterBytes
argument_list|()
block|{
specifier|private
name|Text
name|writable
decl_stmt|;
annotation|@
name|Override
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|ExprNodeDesc
name|nodeDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|nodeDesc
argument_list|)
expr_stmt|;
name|writable
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|HiveException
block|{
name|writable
operator|.
name|set
argument_list|(
name|value
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|writable
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|nodeDesc
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|nodeType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"float"
argument_list|)
condition|)
block|{
return|return
operator|new
name|VectorExpressionWriterDouble
argument_list|()
block|{
specifier|private
name|FloatWritable
name|writable
decl_stmt|;
annotation|@
name|Override
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|ExprNodeDesc
name|nodeDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|nodeDesc
argument_list|)
expr_stmt|;
name|writable
operator|=
operator|new
name|FloatWritable
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|double
name|value
parameter_list|)
block|{
name|writable
operator|.
name|set
argument_list|(
operator|(
name|float
operator|)
name|value
argument_list|)
expr_stmt|;
return|return
name|writable
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|nodeDesc
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|nodeType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"double"
argument_list|)
condition|)
block|{
return|return
operator|new
name|VectorExpressionWriterDouble
argument_list|()
block|{
specifier|private
name|DoubleWritable
name|writable
decl_stmt|;
annotation|@
name|Override
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|ExprNodeDesc
name|nodeDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|nodeDesc
argument_list|)
expr_stmt|;
name|writable
operator|=
operator|new
name|DoubleWritable
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|double
name|value
parameter_list|)
block|{
name|writable
operator|.
name|set
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|writable
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|nodeDesc
argument_list|)
return|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unimplemented genVectorExpressionWritable type: %s for expression: %s"
argument_list|,
name|nodeType
argument_list|,
name|nodeDesc
argument_list|)
argument_list|)
throw|;
block|}
comment|/**    * Helper function to create an array of writers from a list of expression descriptors.    */
specifier|public
specifier|static
name|VectorExpressionWriter
index|[]
name|getExpressionWriters
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|nodesDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorExpressionWriter
index|[]
name|writers
init|=
operator|new
name|VectorExpressionWriter
index|[
name|nodesDesc
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writers
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|ExprNodeDesc
name|nodeDesc
init|=
name|nodesDesc
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|writers
index|[
name|i
index|]
operator|=
name|genVectorExpressionWritable
argument_list|(
name|nodeDesc
argument_list|)
expr_stmt|;
block|}
return|return
name|writers
return|;
block|}
comment|/**    * A poor man Java closure. Works around the problem of having to return multiple objects    * from one function call.    */
specifier|public
specifier|static
interface|interface
name|Closure
block|{
name|void
name|assign
parameter_list|(
name|VectorExpressionWriter
index|[]
name|writers
parameter_list|,
name|ObjectInspector
name|objectInspector
parameter_list|)
function_decl|;
block|}
comment|/**    * Creates the value writers for a column vector expression list.    * Creates an appropriate output object inspector.    */
specifier|public
specifier|static
name|void
name|processVectorExpressions
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|nodesDesc
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|outputColumnNames
parameter_list|,
name|Closure
name|closure
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorExpressionWriter
index|[]
name|writers
init|=
name|getExpressionWriters
argument_list|(
name|nodesDesc
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|oids
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|writers
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writers
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|oids
operator|.
name|add
argument_list|(
name|writers
index|[
name|i
index|]
operator|.
name|getObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ObjectInspector
name|objectInspector
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|outputColumnNames
argument_list|,
name|oids
argument_list|)
decl_stmt|;
name|closure
operator|.
name|assign
argument_list|(
name|writers
argument_list|,
name|objectInspector
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns {@link VectorExpressionWriter} objects for the fields in the given    * object inspector.    *    * @param objInspector    * @return    * @throws HiveException    */
specifier|public
specifier|static
name|VectorExpressionWriter
index|[]
name|getExpressionWriters
parameter_list|(
name|StructObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|outputNodeDescs
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StructField
name|fieldRef
range|:
operator|(
name|objInspector
operator|)
operator|.
name|getAllStructFieldRefs
argument_list|()
control|)
block|{
name|String
name|typeName
init|=
name|fieldRef
operator|.
name|getFieldObjectInspector
argument_list|()
operator|.
name|getTypeName
argument_list|()
decl_stmt|;
name|TypeInfo
name|ti
init|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
name|outputNodeDescs
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeDesc
argument_list|(
name|ti
argument_list|)
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ExprNodeDesc
name|clone
parameter_list|()
block|{
comment|/* Not needed */
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSame
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
comment|/* Not needed */
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|VectorExpressionWriterFactory
operator|.
name|getExpressionWriters
argument_list|(
name|outputNodeDescs
argument_list|)
return|;
block|}
block|}
end_class

end_unit

