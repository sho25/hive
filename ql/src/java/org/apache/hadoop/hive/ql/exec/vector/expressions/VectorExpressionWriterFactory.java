begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|SettableListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|SettableMapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|SettableStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|SettableUnionObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableBinaryObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableBooleanObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableByteObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableDateObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableDoubleObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableFloatObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableHiveCharObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableHiveDecimalObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableHiveIntervalDayTimeObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableHiveIntervalYearMonthObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableHiveVarcharObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableIntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableLongObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableTimestampObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableShortObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableStringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|VoidObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|UnionTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * VectorExpressionWritableFactory helper class for generating VectorExpressionWritable objects.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|VectorExpressionWriterFactory
block|{
comment|/**    * VectorExpressionWriter base implementation, to be specialized for Long/Double/Bytes columns    */
specifier|private
specifier|static
specifier|abstract
class|class
name|VectorExpressionWriterBase
implements|implements
name|VectorExpressionWriter
block|{
specifier|protected
name|ObjectInspector
name|objectInspector
decl_stmt|;
comment|/**      * The object inspector associated with this expression. This is created from the expression      * NodeDesc (compile metadata) not from the VectorColumn info and thus preserves the type info      * lost by the vectorization process.      */
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
block|{
return|return
name|objectInspector
return|;
block|}
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|ObjectInspector
name|objectInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|this
operator|.
name|objectInspector
operator|=
name|objectInspector
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The base implementation must be overridden by the Long specialization      */
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|long
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal error: should not reach here"
argument_list|)
throw|;
block|}
comment|/**      * The base implementation must be overridden by the Long specialization      */
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal error: should not reach here"
argument_list|)
throw|;
block|}
comment|/**      * The base implementation must be overridden by the Double specialization      */
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|double
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal error: should not reach here"
argument_list|)
throw|;
block|}
comment|/**      * The base implementation must be overridden by the Double specialization      */
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|double
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal error: should not reach here"
argument_list|)
throw|;
block|}
comment|/**      * The base implementation must be overridden by the Bytes specialization      */
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal error: should not reach here"
argument_list|)
throw|;
block|}
comment|/**      * The base implementation must be overridden by the Bytes specialization      */
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal error: should not reach here"
argument_list|)
throw|;
block|}
comment|/**      * The base implementation must be overridden by the Decimal specialization      */
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|HiveDecimal
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal error: should not reach here"
argument_list|)
throw|;
block|}
comment|/**      * The base implementation must be overridden by the Decimal specialization      */
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|HiveDecimalWritable
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal error: should not reach here"
argument_list|)
throw|;
block|}
comment|/**      * The base implementation must be overridden by the Decimal specialization      */
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|HiveDecimalWritable
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal error: should not reach here"
argument_list|)
throw|;
block|}
comment|/**      * The base implementation must be overridden by the Decimal specialization      */
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|HiveDecimal
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal error: should not reach here"
argument_list|)
throw|;
block|}
comment|/**      * The base implementation must be overridden by the Timestamp specialization      */
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|Timestamp
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal error: should not reach here"
argument_list|)
throw|;
block|}
comment|/**      * The base implementation must be overridden by the Timestamp specialization      */
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|TimestampWritableV2
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal error: should not reach here"
argument_list|)
throw|;
block|}
comment|/**      * The base implementation must be overridden by the Timestamp specialization      */
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|TimestampWritableV2
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal error: should not reach here"
argument_list|)
throw|;
block|}
comment|/**      * The base implementation must be overridden by the Timestamp specialization      */
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|Timestamp
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal error: should not reach here"
argument_list|)
throw|;
block|}
comment|/**      * The base implementation must be overridden by the HiveIntervalDayTime specialization      */
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|HiveIntervalDayTimeWritable
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal error: should not reach here"
argument_list|)
throw|;
block|}
comment|/**      * The base implementation must be overridden by the HiveIntervalDayTime specialization      */
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|HiveIntervalDayTime
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal error: should not reach here"
argument_list|)
throw|;
block|}
comment|/**      * The base implementation must be overridden by the HiveIntervalDayTime specialization      */
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|HiveIntervalDayTimeWritable
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal error: should not reach here"
argument_list|)
throw|;
block|}
comment|/**      * The base implementation must be overridden by the HiveIntervalDayTime specialization      */
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|HiveIntervalDayTime
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal error: should not reach here"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Specialized writer for LongVectorColumn expressions. Will throw cast exception    * if the wrong vector column is used.    */
specifier|private
specifier|static
specifier|abstract
class|class
name|VectorExpressionWriterLong
extends|extends
name|VectorExpressionWriterBase
block|{
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|ColumnVector
name|column
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|column
decl_stmt|;
if|if
condition|(
name|lcv
operator|.
name|noNulls
operator|&&
operator|!
name|lcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|lcv
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|lcv
operator|.
name|noNulls
operator|&&
name|lcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|lcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|lcv
operator|.
name|noNulls
operator|&&
operator|!
name|lcv
operator|.
name|isRepeating
operator|&&
operator|!
name|lcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|lcv
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|lcv
operator|.
name|noNulls
operator|&&
operator|!
name|lcv
operator|.
name|isRepeating
operator|&&
name|lcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|lcv
operator|.
name|noNulls
operator|&&
name|lcv
operator|.
name|isRepeating
operator|&&
operator|!
name|lcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|lcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|lcv
operator|.
name|noNulls
operator|&&
name|lcv
operator|.
name|isRepeating
operator|&&
name|lcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Incorrect null/repeating: row:%d noNulls:%b isRepeating:%b isNull[row]:%b isNull[0]:%b"
argument_list|,
name|row
argument_list|,
name|lcv
operator|.
name|noNulls
argument_list|,
name|lcv
operator|.
name|isRepeating
argument_list|,
name|lcv
operator|.
name|isNull
index|[
name|row
index|]
argument_list|,
name|lcv
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|ColumnVector
name|column
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
name|LongColumnVector
name|lcv
init|=
operator|(
name|LongColumnVector
operator|)
name|column
decl_stmt|;
if|if
condition|(
name|lcv
operator|.
name|noNulls
operator|&&
operator|!
name|lcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|setValue
argument_list|(
name|field
argument_list|,
name|lcv
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|lcv
operator|.
name|noNulls
operator|&&
name|lcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|setValue
argument_list|(
name|field
argument_list|,
name|lcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|lcv
operator|.
name|noNulls
operator|&&
operator|!
name|lcv
operator|.
name|isRepeating
operator|&&
operator|!
name|lcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
name|setValue
argument_list|(
name|field
argument_list|,
name|lcv
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|lcv
operator|.
name|noNulls
operator|&&
operator|!
name|lcv
operator|.
name|isRepeating
operator|&&
name|lcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|lcv
operator|.
name|noNulls
operator|&&
name|lcv
operator|.
name|isRepeating
operator|&&
operator|!
name|lcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
name|setValue
argument_list|(
name|field
argument_list|,
name|lcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|lcv
operator|.
name|noNulls
operator|&&
name|lcv
operator|.
name|isRepeating
operator|&&
name|lcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Incorrect null/repeating: row:%d noNulls:%b isRepeating:%b isNull[row]:%b isNull[0]:%b"
argument_list|,
name|row
argument_list|,
name|lcv
operator|.
name|noNulls
argument_list|,
name|lcv
operator|.
name|isRepeating
argument_list|,
name|lcv
operator|.
name|isNull
index|[
name|row
index|]
argument_list|,
name|lcv
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Specialized writer for DoubleColumnVector. Will throw cast exception    * if the wrong vector column is used.    */
specifier|private
specifier|static
specifier|abstract
class|class
name|VectorExpressionWriterDouble
extends|extends
name|VectorExpressionWriterBase
block|{
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|ColumnVector
name|column
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
name|DoubleColumnVector
name|dcv
init|=
operator|(
name|DoubleColumnVector
operator|)
name|column
decl_stmt|;
if|if
condition|(
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|dcv
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|dcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
operator|&&
operator|!
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|dcv
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
operator|&&
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
operator|&&
operator|!
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|dcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
operator|&&
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Incorrect null/repeating: row:%d noNulls:%b isRepeating:%b isNull[row]:%b isNull[0]:%b"
argument_list|,
name|row
argument_list|,
name|dcv
operator|.
name|noNulls
argument_list|,
name|dcv
operator|.
name|isRepeating
argument_list|,
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
argument_list|,
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|ColumnVector
name|column
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
name|DoubleColumnVector
name|dcv
init|=
operator|(
name|DoubleColumnVector
operator|)
name|column
decl_stmt|;
if|if
condition|(
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|setValue
argument_list|(
name|field
argument_list|,
name|dcv
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|setValue
argument_list|(
name|field
argument_list|,
name|dcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
operator|&&
operator|!
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
name|setValue
argument_list|(
name|field
argument_list|,
name|dcv
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
operator|&&
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
operator|&&
operator|!
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
name|setValue
argument_list|(
name|field
argument_list|,
name|dcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
operator|&&
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Incorrect null/repeating: row:%d noNulls:%b isRepeating:%b isNull[row]:%b isNull[0]:%b"
argument_list|,
name|row
argument_list|,
name|dcv
operator|.
name|noNulls
argument_list|,
name|dcv
operator|.
name|isRepeating
argument_list|,
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
argument_list|,
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Specialized writer for BytesColumnVector. Will throw cast exception    * if the wrong vector column is used.    */
specifier|private
specifier|static
specifier|abstract
class|class
name|VectorExpressionWriterBytes
extends|extends
name|VectorExpressionWriterBase
block|{
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|ColumnVector
name|column
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
name|BytesColumnVector
name|bcv
init|=
operator|(
name|BytesColumnVector
operator|)
name|column
decl_stmt|;
if|if
condition|(
name|bcv
operator|.
name|noNulls
operator|&&
operator|!
name|bcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|bcv
operator|.
name|vector
index|[
name|row
index|]
argument_list|,
name|bcv
operator|.
name|start
index|[
name|row
index|]
argument_list|,
name|bcv
operator|.
name|length
index|[
name|row
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|bcv
operator|.
name|noNulls
operator|&&
name|bcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|bcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|bcv
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|bcv
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|bcv
operator|.
name|noNulls
operator|&&
operator|!
name|bcv
operator|.
name|isRepeating
operator|&&
operator|!
name|bcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|bcv
operator|.
name|vector
index|[
name|row
index|]
argument_list|,
name|bcv
operator|.
name|start
index|[
name|row
index|]
argument_list|,
name|bcv
operator|.
name|length
index|[
name|row
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|bcv
operator|.
name|noNulls
operator|&&
operator|!
name|bcv
operator|.
name|isRepeating
operator|&&
name|bcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|bcv
operator|.
name|noNulls
operator|&&
name|bcv
operator|.
name|isRepeating
operator|&&
operator|!
name|bcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|bcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|bcv
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|bcv
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|bcv
operator|.
name|noNulls
operator|&&
name|bcv
operator|.
name|isRepeating
operator|&&
name|bcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Incorrect null/repeating: row:%d noNulls:%b isRepeating:%b isNull[row]:%b isNull[0]:%b"
argument_list|,
name|row
argument_list|,
name|bcv
operator|.
name|noNulls
argument_list|,
name|bcv
operator|.
name|isRepeating
argument_list|,
name|bcv
operator|.
name|isNull
index|[
name|row
index|]
argument_list|,
name|bcv
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|ColumnVector
name|column
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
name|BytesColumnVector
name|bcv
init|=
operator|(
name|BytesColumnVector
operator|)
name|column
decl_stmt|;
if|if
condition|(
name|bcv
operator|.
name|noNulls
operator|&&
operator|!
name|bcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|setValue
argument_list|(
name|field
argument_list|,
name|bcv
operator|.
name|vector
index|[
name|row
index|]
argument_list|,
name|bcv
operator|.
name|start
index|[
name|row
index|]
argument_list|,
name|bcv
operator|.
name|length
index|[
name|row
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|bcv
operator|.
name|noNulls
operator|&&
name|bcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|setValue
argument_list|(
name|field
argument_list|,
name|bcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|bcv
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|bcv
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|bcv
operator|.
name|noNulls
operator|&&
operator|!
name|bcv
operator|.
name|isRepeating
operator|&&
operator|!
name|bcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
name|setValue
argument_list|(
name|field
argument_list|,
name|bcv
operator|.
name|vector
index|[
name|row
index|]
argument_list|,
name|bcv
operator|.
name|start
index|[
name|row
index|]
argument_list|,
name|bcv
operator|.
name|length
index|[
name|row
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|bcv
operator|.
name|noNulls
operator|&&
operator|!
name|bcv
operator|.
name|isRepeating
operator|&&
name|bcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|bcv
operator|.
name|noNulls
operator|&&
name|bcv
operator|.
name|isRepeating
operator|&&
operator|!
name|bcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
name|setValue
argument_list|(
name|field
argument_list|,
name|bcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|bcv
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|bcv
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|bcv
operator|.
name|noNulls
operator|&&
name|bcv
operator|.
name|isRepeating
operator|&&
name|bcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Incorrect null/repeating: row:%d noNulls:%b isRepeating:%b isNull[row]:%b isNull[0]:%b"
argument_list|,
name|row
argument_list|,
name|bcv
operator|.
name|noNulls
argument_list|,
name|bcv
operator|.
name|isRepeating
argument_list|,
name|bcv
operator|.
name|isNull
index|[
name|row
index|]
argument_list|,
name|bcv
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Specialized writer for DecimalColumnVector. Will throw cast exception    * if the wrong vector column is used.    */
specifier|private
specifier|static
specifier|abstract
class|class
name|VectorExpressionWriterDecimal
extends|extends
name|VectorExpressionWriterBase
block|{
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|ColumnVector
name|column
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|column
operator|instanceof
name|Decimal64ColumnVector
condition|)
block|{
name|Decimal64ColumnVector
name|d64cv
init|=
operator|(
name|Decimal64ColumnVector
operator|)
name|column
decl_stmt|;
specifier|final
name|long
name|decimal64Long
decl_stmt|;
if|if
condition|(
name|d64cv
operator|.
name|noNulls
operator|&&
operator|!
name|d64cv
operator|.
name|isRepeating
condition|)
block|{
name|decimal64Long
operator|=
name|d64cv
operator|.
name|vector
index|[
name|row
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d64cv
operator|.
name|noNulls
operator|&&
name|d64cv
operator|.
name|isRepeating
condition|)
block|{
name|decimal64Long
operator|=
name|d64cv
operator|.
name|vector
index|[
literal|0
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|d64cv
operator|.
name|noNulls
operator|&&
operator|!
name|d64cv
operator|.
name|isRepeating
operator|&&
operator|!
name|d64cv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|decimal64Long
operator|=
name|d64cv
operator|.
name|vector
index|[
name|row
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|d64cv
operator|.
name|noNulls
operator|&&
operator|!
name|d64cv
operator|.
name|isRepeating
operator|&&
name|d64cv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|d64cv
operator|.
name|noNulls
operator|&&
name|d64cv
operator|.
name|isRepeating
operator|&&
operator|!
name|d64cv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|decimal64Long
operator|=
name|d64cv
operator|.
name|vector
index|[
literal|0
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|d64cv
operator|.
name|noNulls
operator|&&
name|d64cv
operator|.
name|isRepeating
operator|&&
name|d64cv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Incorrect null/repeating: row:%d noNulls:%b isRepeating:%b isNull[row]:%b isNull[0]:%b"
argument_list|,
name|row
argument_list|,
name|d64cv
operator|.
name|noNulls
argument_list|,
name|d64cv
operator|.
name|isRepeating
argument_list|,
name|d64cv
operator|.
name|isNull
index|[
name|row
index|]
argument_list|,
name|d64cv
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
argument_list|)
throw|;
block|}
name|HiveDecimalWritable
name|scratchHiveDecimalWritable
init|=
name|d64cv
operator|.
name|getScratchWritable
argument_list|()
decl_stmt|;
name|scratchHiveDecimalWritable
operator|.
name|deserialize64
argument_list|(
name|decimal64Long
argument_list|,
name|d64cv
operator|.
name|scale
argument_list|)
expr_stmt|;
return|return
name|writeValue
argument_list|(
name|scratchHiveDecimalWritable
argument_list|)
return|;
block|}
name|DecimalColumnVector
name|dcv
init|=
operator|(
name|DecimalColumnVector
operator|)
name|column
decl_stmt|;
if|if
condition|(
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|dcv
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|dcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
operator|&&
operator|!
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|dcv
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
operator|&&
operator|!
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|dcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
operator|&&
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
operator|&&
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Incorrect null/repeating: row:%d noNulls:%b isRepeating:%b isNull[row]:%b isNull[0]:%b"
argument_list|,
name|row
argument_list|,
name|dcv
operator|.
name|noNulls
argument_list|,
name|dcv
operator|.
name|isRepeating
argument_list|,
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
argument_list|,
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|ColumnVector
name|column
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
name|DecimalColumnVector
name|dcv
init|=
operator|(
name|DecimalColumnVector
operator|)
name|column
decl_stmt|;
if|if
condition|(
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|setValue
argument_list|(
name|field
argument_list|,
name|dcv
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|setValue
argument_list|(
name|field
argument_list|,
name|dcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
operator|&&
operator|!
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
name|setValue
argument_list|(
name|field
argument_list|,
name|dcv
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
operator|&&
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
operator|&&
operator|!
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
name|setValue
argument_list|(
name|field
argument_list|,
name|dcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
operator|&&
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Incorrect null/repeating: row:%d noNulls:%b isRepeating:%b isNull[row]:%b isNull[0]:%b"
argument_list|,
name|row
argument_list|,
name|dcv
operator|.
name|noNulls
argument_list|,
name|dcv
operator|.
name|isRepeating
argument_list|,
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
argument_list|,
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Specialized writer for TimestampColumnVector. Will throw cast exception    * if the wrong vector column is used.    */
specifier|private
specifier|static
specifier|abstract
class|class
name|VectorExpressionWriterTimestamp
extends|extends
name|VectorExpressionWriterBase
block|{
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|ColumnVector
name|column
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
name|TimestampColumnVector
name|dcv
init|=
operator|(
name|TimestampColumnVector
operator|)
name|column
decl_stmt|;
name|TimestampWritableV2
name|timestampWritable
init|=
operator|(
name|TimestampWritableV2
operator|)
name|dcv
operator|.
name|getScratchWritable
argument_list|()
decl_stmt|;
if|if
condition|(
name|timestampWritable
operator|==
literal|null
condition|)
block|{
name|timestampWritable
operator|=
operator|new
name|TimestampWritableV2
argument_list|()
expr_stmt|;
name|dcv
operator|.
name|setScratchWritable
argument_list|(
name|timestampWritable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|TimestampUtils
operator|.
name|timestampColumnVectorWritable
argument_list|(
name|dcv
argument_list|,
name|row
argument_list|,
name|timestampWritable
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|TimestampUtils
operator|.
name|timestampColumnVectorWritable
argument_list|(
name|dcv
argument_list|,
literal|0
argument_list|,
name|timestampWritable
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
operator|&&
operator|!
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|TimestampUtils
operator|.
name|timestampColumnVectorWritable
argument_list|(
name|dcv
argument_list|,
name|row
argument_list|,
name|timestampWritable
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
operator|&&
operator|!
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|TimestampUtils
operator|.
name|timestampColumnVectorWritable
argument_list|(
name|dcv
argument_list|,
literal|0
argument_list|,
name|timestampWritable
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
operator|&&
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
operator|&&
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Incorrect null/repeating: row:%d noNulls:%b isRepeating:%b isNull[row]:%b isNull[0]:%b"
argument_list|,
name|row
argument_list|,
name|dcv
operator|.
name|noNulls
argument_list|,
name|dcv
operator|.
name|isRepeating
argument_list|,
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
argument_list|,
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|ColumnVector
name|column
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
name|TimestampColumnVector
name|dcv
init|=
operator|(
name|TimestampColumnVector
operator|)
name|column
decl_stmt|;
name|TimestampWritableV2
name|timestampWritable
init|=
operator|(
name|TimestampWritableV2
operator|)
name|dcv
operator|.
name|getScratchWritable
argument_list|()
decl_stmt|;
if|if
condition|(
name|timestampWritable
operator|==
literal|null
condition|)
block|{
name|timestampWritable
operator|=
operator|new
name|TimestampWritableV2
argument_list|()
expr_stmt|;
name|dcv
operator|.
name|setScratchWritable
argument_list|(
name|timestampWritable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|setValue
argument_list|(
name|field
argument_list|,
name|TimestampUtils
operator|.
name|timestampColumnVectorWritable
argument_list|(
name|dcv
argument_list|,
name|row
argument_list|,
name|timestampWritable
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|setValue
argument_list|(
name|field
argument_list|,
name|TimestampUtils
operator|.
name|timestampColumnVectorWritable
argument_list|(
name|dcv
argument_list|,
literal|0
argument_list|,
name|timestampWritable
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
operator|&&
operator|!
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
name|setValue
argument_list|(
name|field
argument_list|,
name|TimestampUtils
operator|.
name|timestampColumnVectorWritable
argument_list|(
name|dcv
argument_list|,
name|row
argument_list|,
name|timestampWritable
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
operator|&&
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
operator|&&
operator|!
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
name|setValue
argument_list|(
name|field
argument_list|,
name|TimestampUtils
operator|.
name|timestampColumnVectorWritable
argument_list|(
name|dcv
argument_list|,
literal|0
argument_list|,
name|timestampWritable
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
operator|&&
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Incorrect null/repeating: row:%d noNulls:%b isRepeating:%b isNull[row]:%b isNull[0]:%b"
argument_list|,
name|row
argument_list|,
name|dcv
operator|.
name|noNulls
argument_list|,
name|dcv
operator|.
name|isRepeating
argument_list|,
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
argument_list|,
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Specialized writer for IntervalDayTimeColumnVector. Will throw cast exception    * if the wrong vector column is used.    */
specifier|private
specifier|static
specifier|abstract
class|class
name|VectorExpressionWriterIntervalDayTime
extends|extends
name|VectorExpressionWriterBase
block|{
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|ColumnVector
name|column
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
name|IntervalDayTimeColumnVector
name|dcv
init|=
operator|(
name|IntervalDayTimeColumnVector
operator|)
name|column
decl_stmt|;
name|HiveIntervalDayTimeWritable
name|intervalDayTimeWritable
init|=
operator|(
name|HiveIntervalDayTimeWritable
operator|)
name|dcv
operator|.
name|getScratchWritable
argument_list|()
decl_stmt|;
if|if
condition|(
name|intervalDayTimeWritable
operator|==
literal|null
condition|)
block|{
name|intervalDayTimeWritable
operator|=
operator|new
name|HiveIntervalDayTimeWritable
argument_list|()
expr_stmt|;
name|dcv
operator|.
name|setScratchWritable
argument_list|(
name|intervalDayTimeWritable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|TimestampUtils
operator|.
name|intervalDayTimeColumnVectorWritable
argument_list|(
name|dcv
argument_list|,
name|row
argument_list|,
name|intervalDayTimeWritable
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|TimestampUtils
operator|.
name|intervalDayTimeColumnVectorWritable
argument_list|(
name|dcv
argument_list|,
literal|0
argument_list|,
name|intervalDayTimeWritable
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
operator|&&
operator|!
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|TimestampUtils
operator|.
name|intervalDayTimeColumnVectorWritable
argument_list|(
name|dcv
argument_list|,
name|row
argument_list|,
name|intervalDayTimeWritable
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
operator|&&
operator|!
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
name|writeValue
argument_list|(
name|TimestampUtils
operator|.
name|intervalDayTimeColumnVectorWritable
argument_list|(
name|dcv
argument_list|,
literal|0
argument_list|,
name|intervalDayTimeWritable
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
operator|&&
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
operator|&&
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Incorrect null/repeating: row:%d noNulls:%b isRepeating:%b isNull[row]:%b isNull[0]:%b"
argument_list|,
name|row
argument_list|,
name|dcv
operator|.
name|noNulls
argument_list|,
name|dcv
operator|.
name|isRepeating
argument_list|,
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
argument_list|,
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|ColumnVector
name|column
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
name|IntervalDayTimeColumnVector
name|dcv
init|=
operator|(
name|IntervalDayTimeColumnVector
operator|)
name|column
decl_stmt|;
name|HiveIntervalDayTimeWritable
name|intervalDayTimeWritable
init|=
operator|(
name|HiveIntervalDayTimeWritable
operator|)
name|dcv
operator|.
name|getScratchWritable
argument_list|()
decl_stmt|;
if|if
condition|(
name|intervalDayTimeWritable
operator|==
literal|null
condition|)
block|{
name|intervalDayTimeWritable
operator|=
operator|new
name|HiveIntervalDayTimeWritable
argument_list|()
expr_stmt|;
name|dcv
operator|.
name|setScratchWritable
argument_list|(
name|intervalDayTimeWritable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|setValue
argument_list|(
name|field
argument_list|,
name|TimestampUtils
operator|.
name|intervalDayTimeColumnVectorWritable
argument_list|(
name|dcv
argument_list|,
name|row
argument_list|,
name|intervalDayTimeWritable
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
condition|)
block|{
return|return
name|setValue
argument_list|(
name|field
argument_list|,
name|TimestampUtils
operator|.
name|intervalDayTimeColumnVectorWritable
argument_list|(
name|dcv
argument_list|,
literal|0
argument_list|,
name|intervalDayTimeWritable
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
operator|&&
operator|!
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
name|setValue
argument_list|(
name|field
argument_list|,
name|TimestampUtils
operator|.
name|intervalDayTimeColumnVectorWritable
argument_list|(
name|dcv
argument_list|,
name|row
argument_list|,
name|intervalDayTimeWritable
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
operator|!
name|dcv
operator|.
name|isRepeating
operator|&&
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
operator|&&
operator|!
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
name|setValue
argument_list|(
name|field
argument_list|,
name|TimestampUtils
operator|.
name|intervalDayTimeColumnVectorWritable
argument_list|(
name|dcv
argument_list|,
literal|0
argument_list|,
name|intervalDayTimeWritable
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dcv
operator|.
name|noNulls
operator|&&
name|dcv
operator|.
name|isRepeating
operator|&&
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Incorrect null/repeating: row:%d noNulls:%b isRepeating:%b isNull[row]:%b isNull[0]:%b"
argument_list|,
name|row
argument_list|,
name|dcv
operator|.
name|noNulls
argument_list|,
name|dcv
operator|.
name|isRepeating
argument_list|,
name|dcv
operator|.
name|isNull
index|[
name|row
index|]
argument_list|,
name|dcv
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**      * Compiles the appropriate vector expression writer based on an expression info (ExprNodeDesc)      */
specifier|public
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritable
parameter_list|(
name|ExprNodeDesc
name|nodeDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|ObjectInspector
name|objectInspector
init|=
name|nodeDesc
operator|.
name|getWritableObjectInspector
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|objectInspector
condition|)
block|{
name|objectInspector
operator|=
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|nodeDesc
operator|.
name|getTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|objectInspector
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to initialize VectorExpressionWriter for expr: %s"
argument_list|,
name|nodeDesc
operator|.
name|getExprString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|genVectorExpressionWritable
argument_list|(
name|objectInspector
argument_list|)
return|;
block|}
comment|/**      * Compiles the appropriate vector expression writer based on an expression info (ExprNodeDesc)      */
specifier|public
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritable
parameter_list|(
name|VectorExpression
name|vecExpr
parameter_list|)
throws|throws
name|HiveException
block|{
name|TypeInfo
name|outputTypeInfo
init|=
name|vecExpr
operator|.
name|getOutputTypeInfo
argument_list|()
decl_stmt|;
name|ObjectInspector
name|objectInspector
init|=
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|outputTypeInfo
argument_list|)
decl_stmt|;
return|return
name|genVectorExpressionWritable
argument_list|(
name|objectInspector
argument_list|)
return|;
block|}
comment|/**      * Specialized writer for ListColumnVector. Will throw cast exception      * if the wrong vector column is used.      */
specifier|private
specifier|static
specifier|abstract
class|class
name|VectorExpressionWriterList
extends|extends
name|VectorExpressionWriterBase
block|{
comment|// For now, we just use this to hold the object inspector.  There are no writeValue,
comment|// setValue, etc methods yet...
block|}
comment|/**      * Specialized writer for MapColumnVector. Will throw cast exception      * if the wrong vector column is used.      */
specifier|private
specifier|static
specifier|abstract
class|class
name|VectorExpressionWriterMap
extends|extends
name|VectorExpressionWriterBase
block|{
comment|// For now, we just use this to hold the object inspector.  There are no writeValue,
comment|// setValue, etc methods yet...
block|}
comment|/**      * Specialized writer for StructColumnVector. Will throw cast exception      * if the wrong vector column is used.      */
specifier|private
specifier|static
specifier|abstract
class|class
name|VectorExpressionWriterStruct
extends|extends
name|VectorExpressionWriterBase
block|{
comment|// For now, we just use this to hold the object inspector.  There are no writeValue,
comment|// setValue, etc methods yet...
block|}
comment|/**      * Specialized writer for UnionColumnVector. Will throw cast exception      * if the wrong vector column is used.      */
specifier|private
specifier|static
specifier|abstract
class|class
name|VectorExpressionWriterUnion
extends|extends
name|VectorExpressionWriterBase
block|{
comment|// For now, we just use this to hold the object inspector.  There are no writeValue,
comment|// setValue, etc methods yet...
block|}
comment|/**      * Compiles the appropriate vector expression writer based on an expression info (ExprNodeDesc)      */
specifier|public
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritable
parameter_list|(
name|ObjectInspector
name|fieldObjInspector
parameter_list|)
throws|throws
name|HiveException
block|{
switch|switch
condition|(
name|fieldObjInspector
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
switch|switch
condition|(
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|fieldObjInspector
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|FLOAT
case|:
return|return
name|genVectorExpressionWritableFloat
argument_list|(
operator|(
name|SettableFloatObjectInspector
operator|)
name|fieldObjInspector
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|genVectorExpressionWritableDouble
argument_list|(
operator|(
name|SettableDoubleObjectInspector
operator|)
name|fieldObjInspector
argument_list|)
return|;
case|case
name|BOOLEAN
case|:
return|return
name|genVectorExpressionWritableBoolean
argument_list|(
operator|(
name|SettableBooleanObjectInspector
operator|)
name|fieldObjInspector
argument_list|)
return|;
case|case
name|BYTE
case|:
return|return
name|genVectorExpressionWritableByte
argument_list|(
operator|(
name|SettableByteObjectInspector
operator|)
name|fieldObjInspector
argument_list|)
return|;
case|case
name|SHORT
case|:
return|return
name|genVectorExpressionWritableShort
argument_list|(
operator|(
name|SettableShortObjectInspector
operator|)
name|fieldObjInspector
argument_list|)
return|;
case|case
name|INT
case|:
return|return
name|genVectorExpressionWritableInt
argument_list|(
operator|(
name|SettableIntObjectInspector
operator|)
name|fieldObjInspector
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
name|genVectorExpressionWritableLong
argument_list|(
operator|(
name|SettableLongObjectInspector
operator|)
name|fieldObjInspector
argument_list|)
return|;
case|case
name|VOID
case|:
return|return
name|genVectorExpressionWritableVoid
argument_list|(
operator|(
name|VoidObjectInspector
operator|)
name|fieldObjInspector
argument_list|)
return|;
case|case
name|BINARY
case|:
return|return
name|genVectorExpressionWritableBinary
argument_list|(
operator|(
name|SettableBinaryObjectInspector
operator|)
name|fieldObjInspector
argument_list|)
return|;
case|case
name|STRING
case|:
return|return
name|genVectorExpressionWritableString
argument_list|(
operator|(
name|SettableStringObjectInspector
operator|)
name|fieldObjInspector
argument_list|)
return|;
case|case
name|CHAR
case|:
return|return
name|genVectorExpressionWritableChar
argument_list|(
operator|(
name|SettableHiveCharObjectInspector
operator|)
name|fieldObjInspector
argument_list|)
return|;
case|case
name|VARCHAR
case|:
return|return
name|genVectorExpressionWritableVarchar
argument_list|(
operator|(
name|SettableHiveVarcharObjectInspector
operator|)
name|fieldObjInspector
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|genVectorExpressionWritableTimestamp
argument_list|(
operator|(
name|SettableTimestampObjectInspector
operator|)
name|fieldObjInspector
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
name|genVectorExpressionWritableDate
argument_list|(
operator|(
name|SettableDateObjectInspector
operator|)
name|fieldObjInspector
argument_list|)
return|;
case|case
name|INTERVAL_YEAR_MONTH
case|:
return|return
name|genVectorExpressionWritableIntervalYearMonth
argument_list|(
operator|(
name|SettableHiveIntervalYearMonthObjectInspector
operator|)
name|fieldObjInspector
argument_list|)
return|;
case|case
name|INTERVAL_DAY_TIME
case|:
return|return
name|genVectorExpressionWritableIntervalDayTime
argument_list|(
operator|(
name|SettableHiveIntervalDayTimeObjectInspector
operator|)
name|fieldObjInspector
argument_list|)
return|;
case|case
name|DECIMAL
case|:
return|return
name|genVectorExpressionWritableDecimal
argument_list|(
operator|(
name|SettableHiveDecimalObjectInspector
operator|)
name|fieldObjInspector
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown primitive type: "
operator|+
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|fieldObjInspector
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
throw|;
block|}
case|case
name|LIST
case|:
return|return
name|genVectorExpressionWritableList
argument_list|(
operator|(
name|SettableListObjectInspector
operator|)
name|fieldObjInspector
argument_list|)
return|;
case|case
name|MAP
case|:
return|return
name|genVectorExpressionWritableMap
argument_list|(
operator|(
name|SettableMapObjectInspector
operator|)
name|fieldObjInspector
argument_list|)
return|;
case|case
name|STRUCT
case|:
return|return
name|genVectorExpressionWritableStruct
argument_list|(
operator|(
name|SettableStructObjectInspector
operator|)
name|fieldObjInspector
argument_list|)
return|;
case|case
name|UNION
case|:
return|return
name|genVectorExpressionWritableUnion
argument_list|(
operator|(
name|SettableUnionObjectInspector
operator|)
name|fieldObjInspector
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown type "
operator|+
name|fieldObjInspector
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Compiles the appropriate vector expression writers based on a struct object    * inspector.    */
specifier|public
specifier|static
name|VectorExpressionWriter
index|[]
name|genVectorStructExpressionWritables
parameter_list|(
name|StructObjectInspector
name|oi
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorExpressionWriter
index|[]
name|writers
init|=
operator|new
name|VectorExpressionWriter
index|[
name|oi
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|oi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StructField
name|field
range|:
name|fields
control|)
block|{
name|writers
index|[
name|i
operator|++
index|]
operator|=
name|genVectorExpressionWritable
argument_list|(
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|writers
return|;
block|}
specifier|private
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritableDecimal
parameter_list|(
name|SettableHiveDecimalObjectInspector
name|fieldObjInspector
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|VectorExpressionWriterDecimal
argument_list|()
block|{
specifier|private
name|Object
name|obj
decl_stmt|;
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|SettableHiveDecimalObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|objInspector
argument_list|)
expr_stmt|;
name|obj
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|HiveDecimalWritable
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|(
operator|(
name|SettableHiveDecimalObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|obj
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|HiveDecimal
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|(
operator|(
name|SettableHiveDecimalObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|obj
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|HiveDecimalWritable
name|value
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|field
condition|)
block|{
name|field
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|SettableHiveDecimalObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|HiveDecimal
name|value
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|field
condition|)
block|{
name|field
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|SettableHiveDecimalObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|TimestampWritableV2
name|value
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|field
condition|)
block|{
name|field
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|SettableTimestampObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|Timestamp
name|value
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|field
condition|)
block|{
name|field
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|SettableTimestampObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|initValue
parameter_list|(
name|Object
name|ignored
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SettableHiveDecimalObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
name|HiveDecimal
operator|.
name|ZERO
argument_list|)
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|fieldObjInspector
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritableDate
parameter_list|(
name|SettableDateObjectInspector
name|fieldObjInspector
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|VectorExpressionWriterLong
argument_list|()
block|{
specifier|private
name|Date
name|dt
decl_stmt|;
specifier|private
name|Object
name|obj
decl_stmt|;
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|SettableDateObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|objInspector
argument_list|)
expr_stmt|;
name|dt
operator|=
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|obj
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|dt
operator|.
name|setTime
argument_list|(
name|DateWritableV2
operator|.
name|daysToMillis
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SettableDateObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|obj
argument_list|,
name|dt
argument_list|)
expr_stmt|;
return|return
name|obj
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|field
condition|)
block|{
name|field
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|dt
operator|.
name|setTime
argument_list|(
name|DateWritableV2
operator|.
name|daysToMillis
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SettableDateObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|field
argument_list|,
name|dt
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|initValue
parameter_list|(
name|Object
name|ignored
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SettableDateObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|fieldObjInspector
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritableTimestamp
parameter_list|(
name|SettableTimestampObjectInspector
name|fieldObjInspector
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|VectorExpressionWriterTimestamp
argument_list|()
block|{
specifier|private
name|Object
name|obj
decl_stmt|;
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|SettableTimestampObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|objInspector
argument_list|)
expr_stmt|;
name|obj
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|TimestampWritableV2
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|(
operator|(
name|SettableTimestampObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|obj
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|Timestamp
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|(
operator|(
name|SettableTimestampObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|obj
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|HiveIntervalDayTimeWritable
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|(
operator|(
name|SettableHiveIntervalDayTimeObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|obj
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|HiveIntervalDayTime
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|(
operator|(
name|SettableHiveIntervalDayTimeObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|obj
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|TimestampWritableV2
name|value
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|field
condition|)
block|{
name|field
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|SettableTimestampObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|Timestamp
name|value
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|field
condition|)
block|{
name|field
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|SettableTimestampObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|initValue
parameter_list|(
name|Object
name|ignored
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SettableTimestampObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|fieldObjInspector
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritableIntervalYearMonth
parameter_list|(
name|SettableHiveIntervalYearMonthObjectInspector
name|fieldObjInspector
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|VectorExpressionWriterLong
argument_list|()
block|{
specifier|private
name|Object
name|obj
decl_stmt|;
specifier|private
name|HiveIntervalYearMonth
name|interval
decl_stmt|;
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|SettableHiveIntervalYearMonthObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|objInspector
argument_list|)
expr_stmt|;
name|interval
operator|=
operator|new
name|HiveIntervalYearMonth
argument_list|()
expr_stmt|;
name|obj
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|interval
operator|.
name|set
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SettableHiveIntervalYearMonthObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|obj
argument_list|,
name|interval
argument_list|)
expr_stmt|;
return|return
name|obj
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|field
condition|)
block|{
name|field
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|interval
operator|.
name|set
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SettableHiveIntervalYearMonthObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|field
argument_list|,
name|interval
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|initValue
parameter_list|(
name|Object
name|ignored
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SettableHiveIntervalYearMonthObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
operator|new
name|HiveIntervalYearMonth
argument_list|()
argument_list|)
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|fieldObjInspector
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritableIntervalDayTime
parameter_list|(
name|SettableHiveIntervalDayTimeObjectInspector
name|fieldObjInspector
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|VectorExpressionWriterIntervalDayTime
argument_list|()
block|{
specifier|private
name|Object
name|obj
decl_stmt|;
specifier|private
name|HiveIntervalDayTime
name|interval
decl_stmt|;
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|SettableHiveIntervalDayTimeObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|objInspector
argument_list|)
expr_stmt|;
name|interval
operator|=
operator|new
name|HiveIntervalDayTime
argument_list|()
expr_stmt|;
name|obj
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|HiveIntervalDayTimeWritable
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
name|interval
operator|.
name|set
argument_list|(
name|value
operator|.
name|getHiveIntervalDayTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|SettableHiveIntervalDayTimeObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|obj
argument_list|,
name|interval
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|HiveIntervalDayTime
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
name|interval
operator|.
name|set
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|SettableHiveIntervalDayTimeObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|obj
argument_list|,
name|interval
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|HiveIntervalDayTimeWritable
name|value
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|field
condition|)
block|{
name|field
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|interval
operator|.
name|set
argument_list|(
name|value
operator|.
name|getHiveIntervalDayTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|SettableHiveIntervalDayTimeObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|field
argument_list|,
name|interval
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|HiveIntervalDayTime
name|value
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|field
condition|)
block|{
name|field
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|interval
operator|.
name|set
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|SettableHiveIntervalDayTimeObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|field
argument_list|,
name|interval
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|initValue
parameter_list|(
name|Object
name|ignored
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SettableHiveIntervalDayTimeObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
operator|new
name|HiveIntervalDayTime
argument_list|()
argument_list|)
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|fieldObjInspector
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritableChar
parameter_list|(
name|SettableHiveCharObjectInspector
name|fieldObjInspector
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|VectorExpressionWriterBytes
argument_list|()
block|{
specifier|private
name|Object
name|obj
decl_stmt|;
specifier|private
name|Text
name|text
decl_stmt|;
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|SettableHiveCharObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|objInspector
argument_list|)
expr_stmt|;
name|this
operator|.
name|text
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|this
operator|.
name|obj
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|HiveException
block|{
name|text
operator|.
name|set
argument_list|(
name|value
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SettableHiveCharObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|this
operator|.
name|obj
argument_list|,
name|text
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|obj
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
literal|null
operator|==
name|field
condition|)
block|{
name|field
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|text
operator|.
name|set
argument_list|(
name|value
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SettableHiveCharObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|field
argument_list|,
name|text
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|initValue
parameter_list|(
name|Object
name|ignored
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SettableHiveCharObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
operator|new
name|HiveChar
argument_list|(
name|StringUtils
operator|.
name|EMPTY
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|fieldObjInspector
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritableVarchar
parameter_list|(
name|SettableHiveVarcharObjectInspector
name|fieldObjInspector
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|VectorExpressionWriterBytes
argument_list|()
block|{
specifier|private
name|Object
name|obj
decl_stmt|;
specifier|private
name|Text
name|text
decl_stmt|;
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|SettableHiveVarcharObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|objInspector
argument_list|)
expr_stmt|;
name|this
operator|.
name|text
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|this
operator|.
name|obj
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|HiveException
block|{
name|text
operator|.
name|set
argument_list|(
name|value
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SettableHiveVarcharObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|this
operator|.
name|obj
argument_list|,
name|text
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|obj
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
literal|null
operator|==
name|field
condition|)
block|{
name|field
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|text
operator|.
name|set
argument_list|(
name|value
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SettableHiveVarcharObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|field
argument_list|,
name|text
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|initValue
parameter_list|(
name|Object
name|ignored
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SettableHiveVarcharObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
operator|new
name|HiveVarchar
argument_list|(
name|StringUtils
operator|.
name|EMPTY
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|fieldObjInspector
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritableString
parameter_list|(
name|SettableStringObjectInspector
name|fieldObjInspector
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|VectorExpressionWriterBytes
argument_list|()
block|{
specifier|private
name|Object
name|obj
decl_stmt|;
specifier|private
name|Text
name|text
decl_stmt|;
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|SettableStringObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|objInspector
argument_list|)
expr_stmt|;
name|this
operator|.
name|text
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|this
operator|.
name|obj
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|HiveException
block|{
name|this
operator|.
name|text
operator|.
name|set
argument_list|(
name|value
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SettableStringObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|this
operator|.
name|obj
argument_list|,
name|this
operator|.
name|text
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|obj
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
literal|null
operator|==
name|field
condition|)
block|{
name|field
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|text
operator|.
name|set
argument_list|(
name|value
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SettableStringObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|field
argument_list|,
name|this
operator|.
name|text
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|initValue
parameter_list|(
name|Object
name|ignored
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SettableStringObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
name|StringUtils
operator|.
name|EMPTY
argument_list|)
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|fieldObjInspector
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritableBinary
parameter_list|(
name|SettableBinaryObjectInspector
name|fieldObjInspector
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|VectorExpressionWriterBytes
argument_list|()
block|{
specifier|private
name|Object
name|obj
decl_stmt|;
specifier|private
name|byte
index|[]
name|bytes
decl_stmt|;
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|SettableBinaryObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|objInspector
argument_list|)
expr_stmt|;
name|this
operator|.
name|bytes
operator|=
name|ArrayUtils
operator|.
name|EMPTY_BYTE_ARRAY
expr_stmt|;
name|this
operator|.
name|obj
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|HiveException
block|{
name|bytes
operator|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|value
argument_list|,
name|start
argument_list|,
name|start
operator|+
name|length
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SettableBinaryObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|this
operator|.
name|obj
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|obj
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
literal|null
operator|==
name|field
condition|)
block|{
name|field
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|bytes
operator|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|value
argument_list|,
name|start
argument_list|,
name|start
operator|+
name|length
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SettableBinaryObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|field
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|initValue
parameter_list|(
name|Object
name|ignored
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SettableBinaryObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
name|ArrayUtils
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|fieldObjInspector
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritableLong
parameter_list|(
name|SettableLongObjectInspector
name|fieldObjInspector
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|VectorExpressionWriterLong
argument_list|()
block|{
specifier|private
name|Object
name|obj
decl_stmt|;
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|SettableLongObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|objInspector
argument_list|)
expr_stmt|;
name|this
operator|.
name|obj
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|long
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
operator|(
operator|(
name|SettableLongObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|this
operator|.
name|obj
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|obj
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
literal|null
operator|==
name|field
condition|)
block|{
name|field
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|SettableLongObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|initValue
parameter_list|(
name|Object
name|ignored
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SettableLongObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
literal|0L
argument_list|)
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|fieldObjInspector
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritableVoid
parameter_list|(
name|VoidObjectInspector
name|fieldObjInspector
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|VectorExpressionWriterLong
argument_list|()
block|{
specifier|private
name|Object
name|obj
decl_stmt|;
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|VoidObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|objInspector
argument_list|)
expr_stmt|;
name|this
operator|.
name|obj
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|long
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
name|this
operator|.
name|obj
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
literal|null
operator|==
name|field
condition|)
block|{
name|field
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|field
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|initValue
parameter_list|(
name|Object
name|ignored
parameter_list|)
block|{
return|return
operator|(
operator|(
name|VoidObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|copyObject
argument_list|(
literal|null
argument_list|)
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|fieldObjInspector
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritableInt
parameter_list|(
name|SettableIntObjectInspector
name|fieldObjInspector
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|VectorExpressionWriterLong
argument_list|()
block|{
specifier|private
name|Object
name|obj
decl_stmt|;
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|SettableIntObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|objInspector
argument_list|)
expr_stmt|;
name|this
operator|.
name|obj
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|long
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
operator|(
operator|(
name|SettableIntObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|this
operator|.
name|obj
argument_list|,
operator|(
name|int
operator|)
name|value
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|obj
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
literal|null
operator|==
name|field
condition|)
block|{
name|field
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|SettableIntObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|field
argument_list|,
operator|(
name|int
operator|)
name|value
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|initValue
parameter_list|(
name|Object
name|ignored
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SettableIntObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|fieldObjInspector
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritableShort
parameter_list|(
name|SettableShortObjectInspector
name|fieldObjInspector
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|VectorExpressionWriterLong
argument_list|()
block|{
specifier|private
name|Object
name|obj
decl_stmt|;
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|SettableShortObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|objInspector
argument_list|)
expr_stmt|;
name|this
operator|.
name|obj
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|long
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
operator|(
operator|(
name|SettableShortObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|this
operator|.
name|obj
argument_list|,
operator|(
name|short
operator|)
name|value
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|obj
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
literal|null
operator|==
name|field
condition|)
block|{
name|field
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|SettableShortObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|field
argument_list|,
operator|(
name|short
operator|)
name|value
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|initValue
parameter_list|(
name|Object
name|ignored
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SettableShortObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|fieldObjInspector
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritableByte
parameter_list|(
name|SettableByteObjectInspector
name|fieldObjInspector
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|VectorExpressionWriterLong
argument_list|()
block|{
specifier|private
name|Object
name|obj
decl_stmt|;
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|SettableByteObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|objInspector
argument_list|)
expr_stmt|;
name|this
operator|.
name|obj
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|long
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
operator|(
operator|(
name|SettableByteObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|this
operator|.
name|obj
argument_list|,
operator|(
name|byte
operator|)
name|value
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|obj
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
literal|null
operator|==
name|field
condition|)
block|{
name|field
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|SettableByteObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|field
argument_list|,
operator|(
name|byte
operator|)
name|value
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|initValue
parameter_list|(
name|Object
name|ignored
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SettableByteObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|fieldObjInspector
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritableBoolean
parameter_list|(
name|SettableBooleanObjectInspector
name|fieldObjInspector
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|VectorExpressionWriterLong
argument_list|()
block|{
specifier|private
name|Object
name|obj
decl_stmt|;
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|SettableBooleanObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|objInspector
argument_list|)
expr_stmt|;
name|this
operator|.
name|obj
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|long
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
operator|(
operator|(
name|SettableBooleanObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|this
operator|.
name|obj
argument_list|,
name|value
operator|==
literal|0
condition|?
literal|false
else|:
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|obj
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
literal|null
operator|==
name|field
condition|)
block|{
name|field
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|SettableBooleanObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|field
argument_list|,
name|value
operator|==
literal|0
condition|?
literal|false
else|:
literal|true
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|initValue
parameter_list|(
name|Object
name|ignored
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SettableBooleanObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|fieldObjInspector
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritableDouble
parameter_list|(
name|SettableDoubleObjectInspector
name|fieldObjInspector
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|VectorExpressionWriterDouble
argument_list|()
block|{
specifier|private
name|Object
name|obj
decl_stmt|;
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|SettableDoubleObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|objInspector
argument_list|)
expr_stmt|;
name|this
operator|.
name|obj
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|double
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
operator|(
operator|(
name|SettableDoubleObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|this
operator|.
name|obj
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|obj
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|double
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
literal|null
operator|==
name|field
condition|)
block|{
name|field
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|SettableDoubleObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|initValue
parameter_list|(
name|Object
name|ignored
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SettableDoubleObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
literal|0f
argument_list|)
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|fieldObjInspector
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritableFloat
parameter_list|(
name|SettableFloatObjectInspector
name|fieldObjInspector
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|VectorExpressionWriterDouble
argument_list|()
block|{
specifier|private
name|Object
name|obj
decl_stmt|;
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|SettableFloatObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|objInspector
argument_list|)
expr_stmt|;
name|this
operator|.
name|obj
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|double
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
operator|(
operator|(
name|SettableFloatObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|this
operator|.
name|obj
argument_list|,
operator|(
name|float
operator|)
name|value
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|obj
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|field
parameter_list|,
name|double
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
literal|null
operator|==
name|field
condition|)
block|{
name|field
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|SettableFloatObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|set
argument_list|(
name|field
argument_list|,
operator|(
name|float
operator|)
name|value
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|initValue
parameter_list|(
name|Object
name|ignored
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SettableFloatObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
literal|0f
argument_list|)
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|fieldObjInspector
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritableList
parameter_list|(
name|SettableListObjectInspector
name|fieldObjInspector
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|VectorExpressionWriterList
argument_list|()
block|{
specifier|private
name|Object
name|obj
decl_stmt|;
specifier|private
name|VectorExtractRow
name|vectorExtractRow
decl_stmt|;
specifier|private
name|ListTypeInfo
name|listTypeInfo
decl_stmt|;
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|SettableListObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|objInspector
argument_list|)
expr_stmt|;
name|obj
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|vectorExtractRow
operator|=
operator|new
name|VectorExtractRow
argument_list|()
expr_stmt|;
name|listTypeInfo
operator|=
operator|(
name|ListTypeInfo
operator|)
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|objInspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|initValue
parameter_list|(
name|Object
name|ignored
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SettableListObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|create
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|ColumnVector
name|column
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
specifier|final
name|ListColumnVector
name|listColVector
init|=
operator|(
name|ListColumnVector
operator|)
name|column
decl_stmt|;
specifier|final
name|SettableListObjectInspector
name|listOI
init|=
operator|(
name|SettableListObjectInspector
operator|)
name|this
operator|.
name|objectInspector
decl_stmt|;
specifier|final
name|List
name|value
init|=
operator|(
name|List
operator|)
name|vectorExtractRow
operator|.
name|extractRowColumn
argument_list|(
name|listColVector
argument_list|,
name|listTypeInfo
argument_list|,
name|listOI
argument_list|,
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|listOI
operator|.
name|resize
argument_list|(
name|obj
argument_list|,
name|value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|listOI
operator|.
name|set
argument_list|(
name|obj
argument_list|,
name|i
argument_list|,
name|value
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|obj
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|list
parameter_list|,
name|ColumnVector
name|column
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ListColumnVector
name|listColVector
init|=
operator|(
name|ListColumnVector
operator|)
name|column
decl_stmt|;
specifier|final
name|SettableListObjectInspector
name|listOI
init|=
operator|(
name|SettableListObjectInspector
operator|)
name|this
operator|.
name|objectInspector
decl_stmt|;
specifier|final
name|List
name|value
init|=
operator|(
name|List
operator|)
name|vectorExtractRow
operator|.
name|extractRowColumn
argument_list|(
name|listColVector
argument_list|,
name|listTypeInfo
argument_list|,
name|listOI
argument_list|,
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|listOI
operator|.
name|resize
argument_list|(
name|list
argument_list|,
name|value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|listOI
operator|.
name|set
argument_list|(
name|list
argument_list|,
name|i
argument_list|,
name|value
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|fieldObjInspector
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritableMap
parameter_list|(
name|SettableMapObjectInspector
name|fieldObjInspector
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|VectorExpressionWriterMap
argument_list|()
block|{
specifier|private
name|Object
name|obj
decl_stmt|;
specifier|private
name|VectorExtractRow
name|vectorExtractRow
decl_stmt|;
specifier|private
name|MapTypeInfo
name|mapTypeInfo
decl_stmt|;
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|SettableMapObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|objInspector
argument_list|)
expr_stmt|;
name|obj
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|vectorExtractRow
operator|=
operator|new
name|VectorExtractRow
argument_list|()
expr_stmt|;
name|mapTypeInfo
operator|=
operator|(
name|MapTypeInfo
operator|)
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|objInspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|initValue
parameter_list|(
name|Object
name|ignored
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SettableMapObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|create
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|ColumnVector
name|column
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
specifier|final
name|MapColumnVector
name|mapColVector
init|=
operator|(
name|MapColumnVector
operator|)
name|column
decl_stmt|;
specifier|final
name|SettableMapObjectInspector
name|mapOI
init|=
operator|(
name|SettableMapObjectInspector
operator|)
name|this
operator|.
name|objectInspector
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|value
init|=
operator|(
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|vectorExtractRow
operator|.
name|extractRowColumn
argument_list|(
name|mapColVector
argument_list|,
name|mapTypeInfo
argument_list|,
name|mapOI
argument_list|,
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|mapOI
operator|.
name|clear
argument_list|(
name|obj
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|value
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|mapOI
operator|.
name|put
argument_list|(
name|obj
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|obj
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|map
parameter_list|,
name|ColumnVector
name|column
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|map
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|final
name|MapColumnVector
name|mapColVector
init|=
operator|(
name|MapColumnVector
operator|)
name|column
decl_stmt|;
specifier|final
name|SettableMapObjectInspector
name|mapOI
init|=
operator|(
name|SettableMapObjectInspector
operator|)
name|this
operator|.
name|objectInspector
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|value
init|=
operator|(
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|vectorExtractRow
operator|.
name|extractRowColumn
argument_list|(
name|mapColVector
argument_list|,
name|mapTypeInfo
argument_list|,
name|mapOI
argument_list|,
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|mapOI
operator|.
name|clear
argument_list|(
name|map
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|value
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|mapOI
operator|.
name|put
argument_list|(
name|map
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|fieldObjInspector
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritableStruct
parameter_list|(
name|SettableStructObjectInspector
name|fieldObjInspector
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|VectorExpressionWriterStruct
argument_list|()
block|{
specifier|private
name|Object
name|obj
decl_stmt|;
specifier|private
name|VectorExtractRow
name|vectorExtractRow
decl_stmt|;
specifier|private
name|StructTypeInfo
name|structTypeInfo
decl_stmt|;
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|SettableStructObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|objInspector
argument_list|)
expr_stmt|;
name|obj
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|vectorExtractRow
operator|=
operator|new
name|VectorExtractRow
argument_list|()
expr_stmt|;
name|structTypeInfo
operator|=
operator|(
name|StructTypeInfo
operator|)
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|objInspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|initValue
parameter_list|(
name|Object
name|ignored
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SettableStructObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|create
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|ColumnVector
name|column
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
name|setValueInternal
argument_list|(
name|obj
argument_list|,
name|column
argument_list|,
name|row
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|struct
parameter_list|,
name|ColumnVector
name|column
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|struct
operator|==
literal|null
condition|)
block|{
name|struct
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|setValueInternal
argument_list|(
name|struct
argument_list|,
name|column
argument_list|,
name|row
argument_list|)
return|;
block|}
specifier|private
name|Object
name|setValueInternal
parameter_list|(
specifier|final
name|Object
name|struct
parameter_list|,
name|ColumnVector
name|colVector
parameter_list|,
name|int
name|batchIndex
parameter_list|)
block|{
if|if
condition|(
name|colVector
operator|==
literal|null
condition|)
block|{
comment|// The planner will not include unneeded columns for reading but other parts of execution
comment|// may ask for them..
return|return
literal|null
return|;
block|}
specifier|final
name|int
name|adjustedIndex
init|=
operator|(
name|colVector
operator|.
name|isRepeating
condition|?
literal|0
else|:
name|batchIndex
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|colVector
operator|.
name|noNulls
operator|&&
name|colVector
operator|.
name|isNull
index|[
name|adjustedIndex
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|StructColumnVector
name|structColumnVector
init|=
operator|(
name|StructColumnVector
operator|)
name|colVector
decl_stmt|;
specifier|final
name|StandardStructObjectInspector
name|structInspector
init|=
operator|(
name|StandardStructObjectInspector
operator|)
name|objectInspector
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
init|=
name|structTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|fieldTypeInfos
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|structFields
init|=
name|structInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StructField
name|structField
init|=
name|structFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|TypeInfo
name|fieldTypeInfo
init|=
name|fieldTypeInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|value
init|=
name|vectorExtractRow
operator|.
name|extractRowColumn
argument_list|(
name|structColumnVector
operator|.
name|fields
index|[
name|i
index|]
argument_list|,
name|fieldTypeInfo
argument_list|,
name|structField
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|,
name|adjustedIndex
argument_list|)
decl_stmt|;
name|structInspector
operator|.
name|setStructFieldData
argument_list|(
name|struct
argument_list|,
name|structField
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|struct
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|fieldObjInspector
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritableUnion
parameter_list|(
name|SettableUnionObjectInspector
name|fieldObjInspector
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|VectorExpressionWriterMap
argument_list|()
block|{
specifier|private
name|Object
name|obj
decl_stmt|;
specifier|private
name|VectorExtractRow
name|vectorExtractRow
decl_stmt|;
specifier|private
name|UnionTypeInfo
name|unionTypeInfo
decl_stmt|;
specifier|public
name|VectorExpressionWriter
name|init
parameter_list|(
name|SettableUnionObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|objInspector
argument_list|)
expr_stmt|;
name|obj
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|vectorExtractRow
operator|=
operator|new
name|VectorExtractRow
argument_list|()
expr_stmt|;
name|unionTypeInfo
operator|=
operator|(
name|UnionTypeInfo
operator|)
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|objInspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|initValue
parameter_list|(
name|Object
name|ignored
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SettableUnionObjectInspector
operator|)
name|this
operator|.
name|objectInspector
operator|)
operator|.
name|create
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|ColumnVector
name|column
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
specifier|final
name|UnionColumnVector
name|unionColumnVector
init|=
operator|(
name|UnionColumnVector
operator|)
name|column
decl_stmt|;
specifier|final
name|int
name|tag
init|=
name|unionColumnVector
operator|.
name|tags
index|[
name|row
index|]
decl_stmt|;
specifier|final
name|SettableUnionObjectInspector
name|unionOI
init|=
operator|(
name|SettableUnionObjectInspector
operator|)
name|this
operator|.
name|objectInspector
decl_stmt|;
name|ObjectInspector
name|fieldOI
init|=
name|unionOI
operator|.
name|getObjectInspectors
argument_list|()
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
name|ColumnVector
name|fieldColVector
init|=
name|unionColumnVector
operator|.
name|fields
index|[
name|tag
index|]
decl_stmt|;
specifier|final
name|Object
name|value
init|=
name|vectorExtractRow
operator|.
name|extractRowColumn
argument_list|(
name|fieldColVector
argument_list|,
name|unionTypeInfo
operator|.
name|getAllUnionObjectTypeInfos
argument_list|()
operator|.
name|get
argument_list|(
name|tag
argument_list|)
argument_list|,
name|fieldOI
argument_list|,
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|unionOI
operator|.
name|setFieldAndTag
argument_list|(
name|obj
argument_list|,
name|value
argument_list|,
operator|(
name|byte
operator|)
name|tag
argument_list|)
expr_stmt|;
return|return
name|obj
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|union
parameter_list|,
name|ColumnVector
name|column
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|union
operator|==
literal|null
condition|)
block|{
name|union
operator|=
name|initValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|final
name|UnionColumnVector
name|unionColumnVector
init|=
operator|(
name|UnionColumnVector
operator|)
name|column
decl_stmt|;
specifier|final
name|int
name|tag
init|=
name|unionColumnVector
operator|.
name|tags
index|[
name|row
index|]
decl_stmt|;
specifier|final
name|SettableUnionObjectInspector
name|unionOI
init|=
operator|(
name|SettableUnionObjectInspector
operator|)
name|this
operator|.
name|objectInspector
decl_stmt|;
name|ObjectInspector
name|fieldOI
init|=
name|unionOI
operator|.
name|getObjectInspectors
argument_list|()
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
name|ColumnVector
name|fieldColVector
init|=
name|unionColumnVector
operator|.
name|fields
index|[
name|tag
index|]
decl_stmt|;
specifier|final
name|Object
name|value
init|=
name|vectorExtractRow
operator|.
name|extractRowColumn
argument_list|(
name|fieldColVector
argument_list|,
name|unionTypeInfo
operator|.
name|getAllUnionObjectTypeInfos
argument_list|()
operator|.
name|get
argument_list|(
name|tag
argument_list|)
argument_list|,
name|fieldOI
argument_list|,
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|unionOI
operator|.
name|setFieldAndTag
argument_list|(
name|union
argument_list|,
name|value
argument_list|,
operator|(
name|byte
operator|)
name|tag
argument_list|)
expr_stmt|;
return|return
name|union
return|;
block|}
block|}
operator|.
name|init
argument_list|(
name|fieldObjInspector
argument_list|)
return|;
block|}
comment|// For complex types like STRUCT, MAP, etc we do not support, we need a writer that
comment|// does nothing.  We assume the Vectorizer class has not validated the query to actually
comment|// try and use the complex types.  They do show up in inputObjInspector[0] and need to be
comment|// ignored.
specifier|private
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritableEmpty
parameter_list|()
block|{
return|return
operator|new
name|VectorExpressionWriterBase
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|ColumnVector
name|column
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|row
parameter_list|,
name|ColumnVector
name|column
parameter_list|,
name|int
name|columnRow
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|initValue
parameter_list|(
name|Object
name|ost
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
comment|/**    * Helper function to create an array of writers from a list of expression descriptors.    */
specifier|public
specifier|static
name|VectorExpressionWriter
index|[]
name|getExpressionWriters
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|nodesDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorExpressionWriter
index|[]
name|writers
init|=
operator|new
name|VectorExpressionWriter
index|[
name|nodesDesc
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writers
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|ExprNodeDesc
name|nodeDesc
init|=
name|nodesDesc
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|writers
index|[
name|i
index|]
operator|=
name|genVectorExpressionWritable
argument_list|(
name|nodeDesc
argument_list|)
expr_stmt|;
block|}
return|return
name|writers
return|;
block|}
comment|/**    * Helper function to create an array of writers from a list of expression descriptors.    */
specifier|public
specifier|static
name|VectorExpressionWriter
index|[]
name|getExpressionWriters
parameter_list|(
name|VectorExpression
index|[]
name|vecExprs
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorExpressionWriter
index|[]
name|writers
init|=
operator|new
name|VectorExpressionWriter
index|[
name|vecExprs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writers
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|VectorExpression
name|vecExpr
init|=
name|vecExprs
index|[
name|i
index|]
decl_stmt|;
name|writers
index|[
name|i
index|]
operator|=
name|genVectorExpressionWritable
argument_list|(
name|vecExpr
argument_list|)
expr_stmt|;
block|}
return|return
name|writers
return|;
block|}
comment|/**    * A poor man Java closure. Works around the problem of having to return multiple objects    * from one function call.    */
specifier|public
specifier|static
interface|interface
name|SingleOIDClosure
block|{
name|void
name|assign
parameter_list|(
name|VectorExpressionWriter
index|[]
name|writers
parameter_list|,
name|ObjectInspector
name|objectInspector
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
interface|interface
name|ListOIDClosure
block|{
name|void
name|assign
parameter_list|(
name|VectorExpressionWriter
index|[]
name|writers
parameter_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|oids
parameter_list|)
function_decl|;
block|}
comment|/**    * Creates the value writers for a column vector expression list.    * Creates an appropriate output object inspector.    */
specifier|public
specifier|static
name|void
name|processVectorExpressions
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|nodesDesc
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
parameter_list|,
name|SingleOIDClosure
name|closure
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorExpressionWriter
index|[]
name|writers
init|=
name|getExpressionWriters
argument_list|(
name|nodesDesc
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|oids
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|writers
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writers
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|oids
operator|.
name|add
argument_list|(
name|writers
index|[
name|i
index|]
operator|.
name|getObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ObjectInspector
name|objectInspector
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|columnNames
argument_list|,
name|oids
argument_list|)
decl_stmt|;
name|closure
operator|.
name|assign
argument_list|(
name|writers
argument_list|,
name|objectInspector
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates the value writers for a column vector expression list.    * Creates an appropriate output object inspector.    */
specifier|public
specifier|static
name|void
name|processVectorExpressions
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|nodesDesc
parameter_list|,
name|ListOIDClosure
name|closure
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorExpressionWriter
index|[]
name|writers
init|=
name|getExpressionWriters
argument_list|(
name|nodesDesc
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|oids
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|writers
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writers
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|oids
operator|.
name|add
argument_list|(
name|writers
index|[
name|i
index|]
operator|.
name|getObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|closure
operator|.
name|assign
argument_list|(
name|writers
argument_list|,
name|oids
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates the value writers for an struct object inspector.    * Creates an appropriate output object inspector.    */
specifier|public
specifier|static
name|void
name|processVectorInspector
parameter_list|(
name|StructObjectInspector
name|structObjInspector
parameter_list|,
name|SingleOIDClosure
name|closure
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|structObjInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|VectorExpressionWriter
index|[]
name|writers
init|=
operator|new
name|VectorExpressionWriter
index|[
name|fields
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|oids
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|writers
operator|.
name|length
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StructField
name|field
range|:
name|fields
control|)
block|{
name|ObjectInspector
name|fieldObjInsp
init|=
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|writers
index|[
name|i
index|]
operator|=
name|VectorExpressionWriterFactory
operator|.
name|genVectorExpressionWritable
argument_list|(
name|fieldObjInsp
argument_list|)
expr_stmt|;
name|columnNames
operator|.
name|add
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|oids
operator|.
name|add
argument_list|(
name|writers
index|[
name|i
index|]
operator|.
name|getObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|ObjectInspector
name|objectInspector
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|columnNames
argument_list|,
name|oids
argument_list|)
decl_stmt|;
name|closure
operator|.
name|assign
argument_list|(
name|writers
argument_list|,
name|objectInspector
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns {@link VectorExpressionWriter} objects for the fields in the given    * object inspector.    *    * @param objInspector    * @return    * @throws HiveException    */
specifier|public
specifier|static
name|VectorExpressionWriter
index|[]
name|getExpressionWriters
parameter_list|(
name|StructObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|objInspector
operator|.
name|isSettable
argument_list|()
condition|)
block|{
return|return
name|getSettableExpressionWriters
argument_list|(
operator|(
name|SettableStructObjectInspector
operator|)
name|objInspector
argument_list|)
return|;
block|}
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|allFieldRefs
init|=
name|objInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|VectorExpressionWriter
index|[]
name|expressionWriters
init|=
operator|new
name|VectorExpressionWriter
index|[
name|allFieldRefs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expressionWriters
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|expressionWriters
index|[
name|i
index|]
operator|=
name|genVectorExpressionWritable
argument_list|(
name|allFieldRefs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|expressionWriters
return|;
block|}
specifier|public
specifier|static
name|VectorExpressionWriter
index|[]
name|getSettableExpressionWriters
parameter_list|(
name|SettableStructObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldsRef
init|=
name|objInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|VectorExpressionWriter
index|[]
name|writers
init|=
operator|new
name|VectorExpressionWriter
index|[
name|fieldsRef
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writers
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|StructField
name|fieldRef
init|=
name|fieldsRef
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|VectorExpressionWriter
name|baseWriter
init|=
name|genVectorExpressionWritable
argument_list|(
name|fieldRef
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
name|writers
index|[
name|i
index|]
operator|=
name|genVectorExpressionWritable
argument_list|(
name|objInspector
argument_list|,
name|fieldRef
argument_list|,
name|baseWriter
argument_list|)
expr_stmt|;
block|}
return|return
name|writers
return|;
block|}
comment|/**    * VectorExpressionWriterSetter helper for vector expression writers that use    * settable ObjectInspector fields to assign the values.    * This is used by the OrcStruct serialization (eg. CREATE TABLE ... AS ...)    */
specifier|private
specifier|static
class|class
name|VectorExpressionWriterSetter
extends|extends
name|VectorExpressionWriterBase
block|{
specifier|private
name|SettableStructObjectInspector
name|settableObjInspector
decl_stmt|;
specifier|private
name|StructField
name|fieldRef
decl_stmt|;
specifier|private
name|VectorExpressionWriter
name|baseWriter
decl_stmt|;
specifier|public
name|VectorExpressionWriterSetter
name|init
parameter_list|(
name|SettableStructObjectInspector
name|objInspector
parameter_list|,
name|StructField
name|fieldRef
parameter_list|,
name|VectorExpressionWriter
name|baseWriter
parameter_list|)
block|{
name|this
operator|.
name|fieldRef
operator|=
name|fieldRef
expr_stmt|;
name|this
operator|.
name|settableObjInspector
operator|=
name|objInspector
expr_stmt|;
name|this
operator|.
name|objectInspector
operator|=
name|fieldRef
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
name|this
operator|.
name|baseWriter
operator|=
name|baseWriter
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|writeValue
parameter_list|(
name|ColumnVector
name|column
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
name|baseWriter
operator|.
name|writeValue
argument_list|(
name|column
argument_list|,
name|row
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|row
parameter_list|,
name|ColumnVector
name|column
parameter_list|,
name|int
name|columnRow
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// NULLs are handled by each individual base writer setter
comment|// We could handle NULLs centrally here but that would result in spurious allocs
name|Object
name|fieldValue
init|=
name|this
operator|.
name|settableObjInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRef
argument_list|)
decl_stmt|;
name|fieldValue
operator|=
name|baseWriter
operator|.
name|setValue
argument_list|(
name|fieldValue
argument_list|,
name|column
argument_list|,
name|columnRow
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|settableObjInspector
operator|.
name|setStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRef
argument_list|,
name|fieldValue
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|initValue
parameter_list|(
name|Object
name|struct
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|initValue
init|=
name|this
operator|.
name|baseWriter
operator|.
name|initValue
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|this
operator|.
name|settableObjInspector
operator|.
name|setStructFieldData
argument_list|(
name|struct
argument_list|,
name|fieldRef
argument_list|,
name|initValue
argument_list|)
expr_stmt|;
return|return
name|struct
return|;
block|}
block|}
specifier|private
specifier|static
name|VectorExpressionWriter
name|genVectorExpressionWritable
parameter_list|(
name|SettableStructObjectInspector
name|objInspector
parameter_list|,
name|StructField
name|fieldRef
parameter_list|,
name|VectorExpressionWriter
name|baseWriter
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|VectorExpressionWriterSetter
argument_list|()
operator|.
name|init
argument_list|(
name|objInspector
argument_list|,
name|fieldRef
argument_list|,
name|baseWriter
argument_list|)
return|;
block|}
block|}
end_class

end_unit

