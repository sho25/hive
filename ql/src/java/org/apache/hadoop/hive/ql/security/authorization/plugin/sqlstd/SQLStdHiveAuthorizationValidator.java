begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|sqlstd
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|HiveAuthenticationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthorizationValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzPluginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzSessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzSessionContext
operator|.
name|CLIENT_TYPE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveMetastoreClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveOperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrincipal
operator|.
name|HivePrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|sqlstd
operator|.
name|Operation2Privilege
operator|.
name|IOType
import|;
end_import

begin_class
specifier|public
class|class
name|SQLStdHiveAuthorizationValidator
implements|implements
name|HiveAuthorizationValidator
block|{
specifier|private
specifier|final
name|HiveMetastoreClientFactory
name|metastoreClientFactory
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|private
specifier|final
name|HiveAuthenticationProvider
name|authenticator
decl_stmt|;
specifier|private
specifier|final
name|SQLStdHiveAccessControllerWrapper
name|privController
decl_stmt|;
specifier|private
specifier|final
name|HiveAuthzSessionContext
name|ctx
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SQLStdHiveAuthorizationValidator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|SQLStdHiveAuthorizationValidator
parameter_list|(
name|HiveMetastoreClientFactory
name|metastoreClientFactory
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|HiveAuthenticationProvider
name|authenticator
parameter_list|,
name|SQLStdHiveAccessControllerWrapper
name|privilegeManager
parameter_list|,
name|HiveAuthzSessionContext
name|ctx
parameter_list|)
throws|throws
name|HiveAuthzPluginException
block|{
name|this
operator|.
name|metastoreClientFactory
operator|=
name|metastoreClientFactory
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|authenticator
operator|=
name|authenticator
expr_stmt|;
name|this
operator|.
name|privController
operator|=
name|privilegeManager
expr_stmt|;
name|this
operator|.
name|ctx
operator|=
name|SQLAuthorizationUtils
operator|.
name|applyTestSettings
argument_list|(
name|ctx
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkPrivileges
parameter_list|(
name|HiveOperationType
name|hiveOpType
parameter_list|,
name|List
argument_list|<
name|HivePrivilegeObject
argument_list|>
name|inputHObjs
parameter_list|,
name|List
argument_list|<
name|HivePrivilegeObject
argument_list|>
name|outputHObjs
parameter_list|,
name|HiveAuthzContext
name|context
parameter_list|)
throws|throws
name|HiveAuthzPluginException
throws|,
name|HiveAccessControlException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Checking privileges for operation "
operator|+
name|hiveOpType
operator|+
literal|" by user "
operator|+
name|authenticator
operator|.
name|getUserName
argument_list|()
operator|+
literal|" on "
operator|+
literal|" input objects "
operator|+
name|inputHObjs
operator|+
literal|" and output objects "
operator|+
name|outputHObjs
operator|+
literal|". Context Info: "
operator|+
name|context
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
name|String
name|userName
init|=
name|authenticator
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|IMetaStoreClient
name|metastoreClient
init|=
name|metastoreClientFactory
operator|.
name|getHiveMetastoreClient
argument_list|()
decl_stmt|;
comment|// check privileges on input and output objects
name|List
argument_list|<
name|String
argument_list|>
name|deniedMessages
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|checkPrivileges
argument_list|(
name|hiveOpType
argument_list|,
name|inputHObjs
argument_list|,
name|metastoreClient
argument_list|,
name|userName
argument_list|,
name|IOType
operator|.
name|INPUT
argument_list|,
name|deniedMessages
argument_list|)
expr_stmt|;
name|checkPrivileges
argument_list|(
name|hiveOpType
argument_list|,
name|outputHObjs
argument_list|,
name|metastoreClient
argument_list|,
name|userName
argument_list|,
name|IOType
operator|.
name|OUTPUT
argument_list|,
name|deniedMessages
argument_list|)
expr_stmt|;
name|SQLAuthorizationUtils
operator|.
name|assertNoDeniedPermissions
argument_list|(
operator|new
name|HivePrincipal
argument_list|(
name|userName
argument_list|,
name|HivePrincipalType
operator|.
name|USER
argument_list|)
argument_list|,
name|hiveOpType
argument_list|,
name|deniedMessages
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkPrivileges
parameter_list|(
name|HiveOperationType
name|hiveOpType
parameter_list|,
name|List
argument_list|<
name|HivePrivilegeObject
argument_list|>
name|hiveObjects
parameter_list|,
name|IMetaStoreClient
name|metastoreClient
parameter_list|,
name|String
name|userName
parameter_list|,
name|IOType
name|ioType
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|deniedMessages
parameter_list|)
throws|throws
name|HiveAuthzPluginException
throws|,
name|HiveAccessControlException
block|{
if|if
condition|(
name|hiveObjects
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// Compare required privileges and available privileges for each hive object
for|for
control|(
name|HivePrivilegeObject
name|hiveObj
range|:
name|hiveObjects
control|)
block|{
name|RequiredPrivileges
name|requiredPrivs
init|=
name|Operation2Privilege
operator|.
name|getRequiredPrivs
argument_list|(
name|hiveOpType
argument_list|,
name|hiveObj
argument_list|,
name|ioType
argument_list|)
decl_stmt|;
if|if
condition|(
name|requiredPrivs
operator|.
name|getRequiredPrivilegeSet
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// no privileges required, so don't need to check this object privileges
continue|continue;
block|}
comment|// find available privileges
name|RequiredPrivileges
name|availPrivs
init|=
operator|new
name|RequiredPrivileges
argument_list|()
decl_stmt|;
comment|//start with an empty priv set;
switch|switch
condition|(
name|hiveObj
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LOCAL_URI
case|:
case|case
name|DFS_URI
case|:
name|availPrivs
operator|=
name|SQLAuthorizationUtils
operator|.
name|getPrivilegesFromFS
argument_list|(
operator|new
name|Path
argument_list|(
name|hiveObj
operator|.
name|getObjectName
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|,
name|userName
argument_list|)
expr_stmt|;
break|break;
case|case
name|PARTITION
case|:
comment|// sql std authorization is managing privileges at the table/view levels
comment|// only
comment|// ignore partitions
continue|continue;
case|case
name|COMMAND_PARAMS
case|:
case|case
name|FUNCTION
case|:
comment|// operations that have objects of type COMMAND_PARAMS, FUNCTION are authorized
comment|// solely on the type
if|if
condition|(
name|privController
operator|.
name|isUserAdmin
argument_list|()
condition|)
block|{
name|availPrivs
operator|.
name|addPrivilege
argument_list|(
name|SQLPrivTypeGrant
operator|.
name|ADMIN_PRIV
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|availPrivs
operator|=
name|SQLAuthorizationUtils
operator|.
name|getPrivilegesFromMetaStore
argument_list|(
name|metastoreClient
argument_list|,
name|userName
argument_list|,
name|hiveObj
argument_list|,
name|privController
operator|.
name|getCurrentRoleNames
argument_list|()
argument_list|,
name|privController
operator|.
name|isUserAdmin
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Verify that there are no missing privileges
name|Collection
argument_list|<
name|SQLPrivTypeGrant
argument_list|>
name|missingPriv
init|=
name|requiredPrivs
operator|.
name|findMissingPrivs
argument_list|(
name|availPrivs
argument_list|)
decl_stmt|;
name|SQLAuthorizationUtils
operator|.
name|addMissingPrivMsg
argument_list|(
name|missingPriv
argument_list|,
name|hiveObj
argument_list|,
name|deniedMessages
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HivePrivilegeObject
argument_list|>
name|filterListCmdObjects
parameter_list|(
name|List
argument_list|<
name|HivePrivilegeObject
argument_list|>
name|listObjs
parameter_list|,
name|HiveAuthzContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Obtained following objects in  filterListCmdObjects "
operator|+
name|listObjs
operator|+
literal|" for user "
operator|+
name|authenticator
operator|.
name|getUserName
argument_list|()
operator|+
literal|". Context Info: "
operator|+
name|context
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
return|return
name|listObjs
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRowFilterExpression
parameter_list|(
name|String
name|database
parameter_list|,
name|String
name|table
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCellValueTransformer
parameter_list|(
name|String
name|database
parameter_list|,
name|String
name|table
parameter_list|,
name|String
name|columnName
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needTransform
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needTransform
parameter_list|(
name|String
name|database
parameter_list|,
name|String
name|table
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

