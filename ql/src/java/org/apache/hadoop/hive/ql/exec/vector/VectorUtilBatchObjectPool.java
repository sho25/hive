begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|VectorUtilBatchObjectPool
parameter_list|<
name|T
extends|extends
name|Object
parameter_list|>
block|{
specifier|private
specifier|final
name|T
index|[]
name|buffer
decl_stmt|;
comment|/**    * Head of the pool. This is where where we should insert the next    * object returned to the pool      */
specifier|private
name|int
name|head
init|=
literal|0
decl_stmt|;
comment|/**    * Count of available elements. They are behind the head, with wrap-around    * The head itself is not free, is null    */
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|private
name|IAllocator
argument_list|<
name|T
argument_list|>
name|allocator
decl_stmt|;
specifier|public
specifier|static
interface|interface
name|IAllocator
parameter_list|<
name|T
parameter_list|>
block|{
specifier|public
name|T
name|alloc
parameter_list|()
throws|throws
name|HiveException
function_decl|;
specifier|public
name|void
name|free
parameter_list|(
name|T
name|t
parameter_list|)
function_decl|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|VectorUtilBatchObjectPool
parameter_list|(
name|int
name|size
parameter_list|,
name|IAllocator
argument_list|<
name|T
argument_list|>
name|allocator
parameter_list|)
block|{
name|buffer
operator|=
operator|(
name|T
index|[]
operator|)
operator|new
name|Object
index|[
name|size
index|]
expr_stmt|;
name|this
operator|.
name|allocator
operator|=
name|allocator
expr_stmt|;
block|}
specifier|public
name|T
name|getFromPool
parameter_list|()
throws|throws
name|HiveException
block|{
name|T
name|ret
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
comment|// Pool is exhausted, return a new object
name|ret
operator|=
name|allocator
operator|.
name|alloc
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|int
name|tail
init|=
operator|(
name|head
operator|+
name|buffer
operator|.
name|length
operator|-
name|count
operator|)
operator|%
name|buffer
operator|.
name|length
decl_stmt|;
name|ret
operator|=
name|buffer
index|[
name|tail
index|]
expr_stmt|;
name|buffer
index|[
name|tail
index|]
operator|=
literal|null
expr_stmt|;
operator|--
name|count
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|void
name|putInPool
parameter_list|(
name|T
name|object
parameter_list|)
block|{
if|if
condition|(
name|count
operator|<
name|buffer
operator|.
name|length
condition|)
block|{
name|buffer
index|[
name|head
index|]
operator|=
name|object
expr_stmt|;
operator|++
name|count
expr_stmt|;
operator|++
name|head
expr_stmt|;
if|if
condition|(
name|head
operator|==
name|buffer
operator|.
name|length
condition|)
block|{
name|head
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
name|allocator
operator|.
name|free
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

