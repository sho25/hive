begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_comment
comment|/**  * Represents the driver's state. Also has mechanism for locking for the time of state transitions.  */
end_comment

begin_class
specifier|public
class|class
name|DriverState
block|{
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|DriverState
argument_list|>
name|tlInstance
init|=
operator|new
name|ThreadLocal
argument_list|<
name|DriverState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|DriverState
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|DriverState
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
name|void
name|setDriverState
parameter_list|(
name|DriverState
name|state
parameter_list|)
block|{
name|tlInstance
operator|.
name|set
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|DriverState
name|getDriverState
parameter_list|()
block|{
return|return
name|tlInstance
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|removeDriverState
parameter_list|()
block|{
name|tlInstance
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|/**    * Enumeration of the potential driver states.    */
specifier|private
enum|enum
name|State
block|{
name|INITIALIZED
block|,
name|COMPILING
block|,
name|COMPILED
block|,
name|EXECUTING
block|,
name|EXECUTED
block|,
comment|// a state that the driver enters after close() has been called to clean the query results
comment|// and release the resources after the query has been executed
name|CLOSED
block|,
comment|// a state that the driver enters after destroy() is called and it is the end of driver life cycle
name|DESTROYED
block|,
name|ERROR
block|}
comment|// a lock is used for synchronizing the state transition and its associated resource releases
specifier|private
specifier|final
name|ReentrantLock
name|stateLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|aborted
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
name|State
name|driverState
init|=
name|State
operator|.
name|INITIALIZED
decl_stmt|;
specifier|public
name|void
name|lock
parameter_list|()
block|{
name|stateLock
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|unlock
parameter_list|()
block|{
name|stateLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
name|aborted
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|abort
parameter_list|()
block|{
name|aborted
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|compiling
parameter_list|()
block|{
name|driverState
operator|=
name|State
operator|.
name|COMPILING
expr_stmt|;
block|}
specifier|public
name|void
name|compilingWithLocking
parameter_list|()
block|{
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|driverState
operator|=
name|State
operator|.
name|COMPILING
expr_stmt|;
block|}
finally|finally
block|{
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isCompiling
parameter_list|()
block|{
return|return
name|driverState
operator|==
name|State
operator|.
name|COMPILING
return|;
block|}
specifier|public
name|void
name|compilationInterruptedWithLocking
parameter_list|(
name|boolean
name|deferClose
parameter_list|)
block|{
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|driverState
operator|=
name|deferClose
condition|?
name|State
operator|.
name|EXECUTING
else|:
name|State
operator|.
name|ERROR
expr_stmt|;
block|}
finally|finally
block|{
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|compilationFinishedWithLocking
parameter_list|(
name|boolean
name|wasError
parameter_list|)
block|{
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|driverState
operator|=
name|wasError
condition|?
name|State
operator|.
name|ERROR
else|:
name|State
operator|.
name|COMPILED
expr_stmt|;
block|}
finally|finally
block|{
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isCompiled
parameter_list|()
block|{
return|return
name|driverState
operator|==
name|State
operator|.
name|COMPILED
return|;
block|}
specifier|public
name|void
name|executing
parameter_list|()
block|{
name|driverState
operator|=
name|State
operator|.
name|EXECUTING
expr_stmt|;
block|}
specifier|public
name|boolean
name|isExecuting
parameter_list|()
block|{
return|return
name|driverState
operator|==
name|State
operator|.
name|EXECUTING
return|;
block|}
specifier|public
name|void
name|executionFinished
parameter_list|(
name|boolean
name|wasError
parameter_list|)
block|{
name|driverState
operator|=
name|wasError
condition|?
name|State
operator|.
name|ERROR
else|:
name|State
operator|.
name|EXECUTED
expr_stmt|;
block|}
specifier|public
name|boolean
name|isExecuted
parameter_list|()
block|{
return|return
name|driverState
operator|==
name|State
operator|.
name|EXECUTED
return|;
block|}
specifier|public
name|void
name|closed
parameter_list|()
block|{
name|driverState
operator|=
name|State
operator|.
name|CLOSED
expr_stmt|;
block|}
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|driverState
operator|==
name|State
operator|.
name|CLOSED
return|;
block|}
specifier|public
name|void
name|descroyed
parameter_list|()
block|{
name|driverState
operator|=
name|State
operator|.
name|DESTROYED
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDestroyed
parameter_list|()
block|{
return|return
name|driverState
operator|==
name|State
operator|.
name|DESTROYED
return|;
block|}
specifier|public
name|void
name|error
parameter_list|()
block|{
name|driverState
operator|=
name|State
operator|.
name|ERROR
expr_stmt|;
block|}
specifier|public
name|boolean
name|isError
parameter_list|()
block|{
return|return
name|driverState
operator|==
name|State
operator|.
name|ERROR
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s(aborted:%s)"
argument_list|,
name|driverState
argument_list|,
name|aborted
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

