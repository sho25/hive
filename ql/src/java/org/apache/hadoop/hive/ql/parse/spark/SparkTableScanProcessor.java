begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|com
operator|.
name|clearspring
operator|.
name|analytics
operator|.
name|util
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ForwardOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_class
specifier|public
class|class
name|SparkTableScanProcessor
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|GenSparkProcContext
name|context
init|=
operator|(
name|GenSparkProcContext
operator|)
name|procCtx
decl_stmt|;
name|TableScanOperator
name|tblScan
init|=
operator|(
name|TableScanOperator
operator|)
name|nd
decl_stmt|;
name|context
operator|.
name|opToTaskMap
operator|.
name|put
argument_list|(
name|tblScan
argument_list|,
name|context
operator|.
name|defaultTask
argument_list|)
expr_stmt|;
comment|// For multi-table insertion, we first look for potential multiple FSs that can be reached
comment|// from this TS. In the process of searching, we also record the path to each of these FS.
comment|// Then, we find the LCA for these FSs.
comment|//
comment|// That is, in scenarios like the following:
comment|//
comment|//                   OP 1 (TS, UNION, etc)
comment|//                 /    \
comment|//               OP 2   OP 3
comment|//
comment|// If we find such an operator, we record all of its children to context, and unlink
comment|//   them with this operator later, in SparkMultiInsertionProcessor, and it will be become:
comment|//
comment|//                  OP 1 (TS, UNION, FOR, etc)
comment|//                  |
comment|//                  FS
comment|//
comment|//              TS      TS
comment|//              |        |
comment|//             OP 2     OP 3
comment|//
comment|// where the two branches starting with TS are in different Spark tasks.
comment|//
comment|// Because of the restrictions on multi-insertion queries, there could only be two
comment|// categories of TS here: one through which we can reach multiple FSs, and one through
comment|// which we can only reach one FS. For all TS in the first category, they should only
comment|// be able to reach the same set of FS.
comment|// A further conclusion is, there should only be one LCA for the entire operator tree.
comment|//
comment|// N.B.: one special case is when OP is ForwardOperator, in which case we shouldn't break
comment|// the tree since it's already optimized.
name|Map
argument_list|<
name|FileSinkOperator
argument_list|,
name|Stack
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|>
name|fsToPath
init|=
operator|new
name|HashMap
argument_list|<
name|FileSinkOperator
argument_list|,
name|Stack
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Queue
argument_list|<
name|Stack
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|>
name|paths
init|=
operator|new
name|LinkedList
argument_list|<
name|Stack
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Stack
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|p
init|=
operator|new
name|Stack
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|p
operator|.
name|push
argument_list|(
name|tblScan
argument_list|)
expr_stmt|;
name|paths
operator|.
name|offer
argument_list|(
name|p
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|paths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Stack
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|currPath
init|=
name|paths
operator|.
name|poll
argument_list|()
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|currOp
init|=
name|currPath
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|currOp
operator|instanceof
name|FileSinkOperator
condition|)
block|{
name|FileSinkOperator
name|fsOp
init|=
operator|(
name|FileSinkOperator
operator|)
name|currOp
decl_stmt|;
comment|// In case there are multiple paths lead to this FS, we keep the shortest one.
comment|// (We could also keep the longest one - it doesn't matter)
if|if
condition|(
operator|!
name|fsToPath
operator|.
name|containsKey
argument_list|(
name|fsOp
argument_list|)
operator|||
name|currPath
operator|.
name|size
argument_list|()
operator|<
name|fsToPath
operator|.
name|get
argument_list|(
name|fsOp
argument_list|)
operator|.
name|size
argument_list|()
condition|)
block|{
name|fsToPath
operator|.
name|put
argument_list|(
name|fsOp
argument_list|,
name|currPath
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|nextOp
range|:
name|currOp
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
name|Stack
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|nextPath
init|=
operator|new
name|Stack
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|nextPath
operator|.
name|addAll
argument_list|(
name|currPath
argument_list|)
expr_stmt|;
name|nextPath
operator|.
name|push
argument_list|(
name|nextOp
argument_list|)
expr_stmt|;
name|paths
operator|.
name|offer
argument_list|(
name|nextPath
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fsToPath
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// Now, compute the LOWEST height for all these FSs
name|int
name|lowest
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|FileSinkOperator
argument_list|,
name|Stack
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|>
name|e
range|:
name|fsToPath
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|lowest
operator|<
literal|0
operator|||
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|<
name|lowest
condition|)
block|{
name|lowest
operator|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Now, we move up those path that has length larger than the lowest
for|for
control|(
name|Stack
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|st
range|:
name|fsToPath
operator|.
name|values
argument_list|()
control|)
block|{
while|while
condition|(
name|st
operator|.
name|size
argument_list|()
operator|>
name|lowest
condition|)
block|{
name|st
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Now, we move all paths up together, until we reach a least common ancestor
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|lca
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|lca
operator|=
literal|null
expr_stmt|;
name|boolean
name|same
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Stack
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|st
range|:
name|fsToPath
operator|.
name|values
argument_list|()
control|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
init|=
name|st
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|lca
operator|==
literal|null
condition|)
block|{
name|lca
operator|=
name|op
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lca
operator|!=
name|op
condition|)
block|{
name|same
operator|=
literal|false
expr_stmt|;
comment|// but we still need to pop the rest..
block|}
block|}
if|if
condition|(
name|same
condition|)
block|{
break|break;
block|}
block|}
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|lca
operator|.
name|getNumChild
argument_list|()
operator|>
literal|1
argument_list|,
literal|"AssertionError: the LCA should have multiple children, but got "
operator|+
name|lca
operator|.
name|getNumChild
argument_list|()
argument_list|)
expr_stmt|;
comment|// Special case: don't break if LCA is FOR.
if|if
condition|(
operator|!
operator|(
name|lca
operator|instanceof
name|ForwardOperator
operator|)
condition|)
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|childOp
range|:
name|lca
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
name|context
operator|.
name|opToParentMap
operator|.
name|put
argument_list|(
name|childOp
argument_list|,
name|lca
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

