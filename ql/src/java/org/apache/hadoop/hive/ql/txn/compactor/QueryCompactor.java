begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|txn
operator|.
name|compactor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|exception
operator|.
name|ExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidWriteIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|CompactionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Common interface for query based compactions.  */
end_comment

begin_class
specifier|abstract
class|class
name|QueryCompactor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|QueryCompactor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TMPDIR
init|=
literal|"_tmp"
decl_stmt|;
comment|/**    * Start a query based compaction.    * @param hiveConf hive configuration    * @param table the table, where the compaction should run    * @param partition the partition, where the compaction should run    * @param storageDescriptor this is the resolved storage descriptor    * @param writeIds valid write IDs used to filter rows while they're being read for compaction    * @param compactionInfo provides info about the type of compaction    * @throws IOException compaction cannot be finished.    */
specifier|abstract
name|void
name|runCompaction
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|Table
name|table
parameter_list|,
name|Partition
name|partition
parameter_list|,
name|StorageDescriptor
name|storageDescriptor
parameter_list|,
name|ValidWriteIdList
name|writeIds
parameter_list|,
name|CompactionInfo
name|compactionInfo
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * This is the final step of the compaction, which can vary based on compaction type. Usually this involves some file    * operation.    * @param dest The final directory; basically an SD directory.    * @param tmpTableName The name of the temporary table.    * @param conf hive configuration.    * @param actualWriteIds valid write Ids used to fetch the high watermark Id.    * @param compactorTxnId transaction, that the compacter started.    * @throws IOException failed to execute file system operation.    * @throws HiveException failed to execute file operation within hive.    */
specifier|protected
specifier|abstract
name|void
name|commitCompaction
parameter_list|(
name|String
name|dest
parameter_list|,
name|String
name|tmpTableName
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|ValidWriteIdList
name|actualWriteIds
parameter_list|,
name|long
name|compactorTxnId
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveException
function_decl|;
comment|/**    * Run all the queries which performs the compaction.    * @param conf hive configuration, must be not null.    * @param tmpTableName The name of the temporary table.    * @param storageDescriptor this is the resolved storage descriptor.    * @param writeIds valid write IDs used to filter rows while they're being read for compaction.    * @param compactionInfo provides info about the type of compaction.    * @param createQueries collection of queries which creates the temporary tables.    * @param compactionQueries collection of queries which uses data from the original table and writes in temporary    *                          tables.    * @param dropQueries queries which drops the temporary tables.    * @throws IOException error during the run of the compaction.    */
specifier|protected
name|void
name|runCompactionQueries
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|tmpTableName
parameter_list|,
name|StorageDescriptor
name|storageDescriptor
parameter_list|,
name|ValidWriteIdList
name|writeIds
parameter_list|,
name|CompactionInfo
name|compactionInfo
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|createQueries
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|compactionQueries
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dropQueries
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|SessionState
name|sessionState
init|=
name|DriverUtils
operator|.
name|setUpSessionState
argument_list|(
name|conf
argument_list|,
name|user
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|long
name|compactorTxnId
init|=
name|CompactorMR
operator|.
name|CompactorMap
operator|.
name|getCompactorTxnId
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|query
range|:
name|createQueries
control|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running {} compaction query into temp table with query: {}"
argument_list|,
name|compactionInfo
operator|.
name|isMajorCompaction
argument_list|()
condition|?
literal|"major"
else|:
literal|"minor"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|DriverUtils
operator|.
name|runOnDriver
argument_list|(
name|conf
argument_list|,
name|user
argument_list|,
name|sessionState
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|ex
decl_stmt|;
while|while
condition|(
name|cause
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|cause
operator|instanceof
name|AlreadyExistsException
operator|)
condition|)
block|{
name|cause
operator|=
name|cause
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cause
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
for|for
control|(
name|String
name|query
range|:
name|compactionQueries
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running {} compaction via query: {}"
argument_list|,
name|compactionInfo
operator|.
name|isMajorCompaction
argument_list|()
condition|?
literal|"major"
else|:
literal|"minor"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|DriverUtils
operator|.
name|runOnDriver
argument_list|(
name|conf
argument_list|,
name|user
argument_list|,
name|sessionState
argument_list|,
name|query
argument_list|,
name|writeIds
argument_list|,
name|compactorTxnId
argument_list|)
expr_stmt|;
block|}
name|commitCompaction
argument_list|(
name|storageDescriptor
operator|.
name|getLocation
argument_list|()
argument_list|,
name|tmpTableName
argument_list|,
name|conf
argument_list|,
name|writeIds
argument_list|,
name|compactorTxnId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error doing query based {} compaction"
argument_list|,
name|compactionInfo
operator|.
name|isMajorCompaction
argument_list|()
condition|?
literal|"major"
else|:
literal|"minor"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
for|for
control|(
name|String
name|query
range|:
name|dropQueries
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running {} compaction query into temp table with query: {}"
argument_list|,
name|compactionInfo
operator|.
name|isMajorCompaction
argument_list|()
condition|?
literal|"major"
else|:
literal|"minor"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|DriverUtils
operator|.
name|runOnDriver
argument_list|(
name|conf
argument_list|,
name|user
argument_list|,
name|sessionState
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to drop temp table {} which was created for running {} compaction"
argument_list|,
name|tmpTableName
argument_list|,
name|compactionInfo
operator|.
name|isMajorCompaction
argument_list|()
condition|?
literal|"major"
else|:
literal|"minor"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|ExceptionUtils
operator|.
name|getStackTrace
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Collection of some helper functions.    */
specifier|static
class|class
name|Util
block|{
comment|/**      * Determine if compaction can run in a specified directory.      * @param isMajorCompaction type of compaction.      * @param dir the delta directory      * @param sd resolved storage descriptor      * @return true, if compaction can run.      */
specifier|static
name|boolean
name|isEnoughToCompact
parameter_list|(
name|boolean
name|isMajorCompaction
parameter_list|,
name|AcidUtils
operator|.
name|Directory
name|dir
parameter_list|,
name|StorageDescriptor
name|sd
parameter_list|)
block|{
name|int
name|deltaCount
init|=
name|dir
operator|.
name|getCurrentDirectories
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|origCount
init|=
name|dir
operator|.
name|getOriginalFiles
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|StringBuilder
name|deltaInfo
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|deltaCount
argument_list|)
decl_stmt|;
name|boolean
name|isEnoughToCompact
decl_stmt|;
if|if
condition|(
name|isMajorCompaction
condition|)
block|{
name|isEnoughToCompact
operator|=
operator|(
name|origCount
operator|>
literal|0
operator|||
name|deltaCount
operator|+
operator|(
name|dir
operator|.
name|getBaseDirectory
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
operator|)
operator|>
literal|1
operator|)
expr_stmt|;
block|}
else|else
block|{
name|isEnoughToCompact
operator|=
operator|(
name|deltaCount
operator|>
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|deltaCount
operator|==
literal|2
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|deltaByType
init|=
name|dir
operator|.
name|getCurrentDirectories
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|delta
lambda|->
operator|(
name|delta
operator|.
name|isDeleteDelta
argument_list|()
condition|?
name|AcidUtils
operator|.
name|DELETE_DELTA_PREFIX
else|:
name|AcidUtils
operator|.
name|DELTA_PREFIX
operator|)
argument_list|,
name|Collectors
operator|.
name|counting
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|isEnoughToCompact
operator|=
operator|(
name|deltaByType
operator|.
name|size
argument_list|()
operator|!=
name|deltaCount
operator|)
expr_stmt|;
name|deltaInfo
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|deltaByType
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isEnoughToCompact
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not compacting {}; current base: {}, delta files: {}, originals: {}"
argument_list|,
name|sd
operator|.
name|getLocation
argument_list|()
argument_list|,
name|dir
operator|.
name|getBaseDirectory
argument_list|()
argument_list|,
name|deltaInfo
argument_list|,
name|origCount
argument_list|)
expr_stmt|;
block|}
return|return
name|isEnoughToCompact
return|;
block|}
comment|/**      * Check for obsolete directories, and return true if any exist and Cleaner should be      * run. For example if we insert overwrite into a table with only deltas, a new base file with      * the highest writeId is created so there will be no live delta directories, only obsolete      * ones. Compaction is not needed, but the cleaner should still be run.      *      * @return true if cleaning is needed      */
specifier|public
specifier|static
name|boolean
name|needsCleaning
parameter_list|(
name|AcidUtils
operator|.
name|Directory
name|dir
parameter_list|,
name|StorageDescriptor
name|sd
parameter_list|)
block|{
name|int
name|numObsoleteDirs
init|=
name|dir
operator|.
name|getObsolete
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|boolean
name|needsJustCleaning
init|=
name|numObsoleteDirs
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|needsJustCleaning
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} obsolete directories in {} found; marked for cleaning."
argument_list|,
name|numObsoleteDirs
argument_list|,
name|sd
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|needsJustCleaning
return|;
block|}
comment|/**      * Generate a random tmp path, under the provided storage.      * @param sd storage descriptor, must be not null.      * @return path, always not null      */
specifier|static
name|String
name|generateTmpPath
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|)
block|{
return|return
name|sd
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/"
operator|+
name|TMPDIR
operator|+
literal|"_"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Check whether the result directory exits and contains compacted result files. If no splits are found, create      * an empty directory at the destination path, matching a base/delta directory naming convention.      * @param sourcePath the checked source location      * @param destPath the destination, where the new directory should be created      * @param isMajorCompaction is called from a major compaction      * @param isDeleteDelta is the output used as delete delta directory      * @param conf hive configuration      * @param validWriteIdList maximum transaction id      * @return true, if the check was successful      * @throws IOException the new directory cannot be created      */
specifier|private
specifier|static
name|boolean
name|resultHasSplits
parameter_list|(
name|Path
name|sourcePath
parameter_list|,
name|Path
name|destPath
parameter_list|,
name|boolean
name|isMajorCompaction
parameter_list|,
name|boolean
name|isDeleteDelta
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|ValidWriteIdList
name|validWriteIdList
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|sourcePath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|long
name|minOpenWriteId
init|=
name|validWriteIdList
operator|.
name|getMinOpenWriteId
argument_list|()
operator|==
literal|null
condition|?
literal|1
else|:
name|validWriteIdList
operator|.
name|getMinOpenWriteId
argument_list|()
decl_stmt|;
name|long
name|highWatermark
init|=
name|validWriteIdList
operator|.
name|getHighWatermark
argument_list|()
decl_stmt|;
name|AcidOutputFormat
operator|.
name|Options
name|options
init|=
operator|new
name|AcidOutputFormat
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
operator|.
name|writingBase
argument_list|(
name|isMajorCompaction
argument_list|)
operator|.
name|writingDeleteDelta
argument_list|(
name|isDeleteDelta
argument_list|)
operator|.
name|isCompressed
argument_list|(
literal|false
argument_list|)
operator|.
name|minimumWriteId
argument_list|(
name|minOpenWriteId
argument_list|)
operator|.
name|maximumWriteId
argument_list|(
name|highWatermark
argument_list|)
operator|.
name|bucket
argument_list|(
literal|0
argument_list|)
operator|.
name|statementId
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Path
name|newDeltaDir
init|=
name|AcidUtils
operator|.
name|createFilename
argument_list|(
name|destPath
argument_list|,
name|options
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|sourcePath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"{} not found. Assuming 0 splits. Creating {}"
argument_list|,
name|sourcePath
argument_list|,
name|newDeltaDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|newDeltaDir
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Create the base/delta directory matching the naming conventions and move the result files of the compaction      * into it.      * @param sourcePath location of the result files      * @param destPath destination path of the result files, without the base/delta directory      * @param isMajorCompaction is this called from a major compaction      * @param isDeleteDelta is the destination is a delete delta directory      * @param conf hive configuration      * @param validWriteIdList list of valid write Ids      * @param compactorTxnId transaction Id of the compaction      * @throws IOException the destination directory cannot be created      * @throws HiveException the result files cannot be moved to the destination directory      */
specifier|static
name|void
name|moveContents
parameter_list|(
name|Path
name|sourcePath
parameter_list|,
name|Path
name|destPath
parameter_list|,
name|boolean
name|isMajorCompaction
parameter_list|,
name|boolean
name|isDeleteDelta
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|ValidWriteIdList
name|validWriteIdList
parameter_list|,
name|long
name|compactorTxnId
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveException
block|{
if|if
condition|(
operator|!
name|resultHasSplits
argument_list|(
name|sourcePath
argument_list|,
name|destPath
argument_list|,
name|isMajorCompaction
argument_list|,
name|isDeleteDelta
argument_list|,
name|conf
argument_list|,
name|validWriteIdList
argument_list|)
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving contents of {} to {}"
argument_list|,
name|sourcePath
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|sourcePath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|long
name|minOpenWriteId
init|=
name|validWriteIdList
operator|.
name|getMinOpenWriteId
argument_list|()
operator|==
literal|null
condition|?
literal|1
else|:
name|validWriteIdList
operator|.
name|getMinOpenWriteId
argument_list|()
decl_stmt|;
name|long
name|highWatermark
init|=
name|validWriteIdList
operator|.
name|getHighWatermark
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|fileStatus
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|sourcePath
argument_list|)
control|)
block|{
name|String
name|originalFileName
init|=
name|fileStatus
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|AcidUtils
operator|.
name|ORIGINAL_PATTERN
operator|.
name|matcher
argument_list|(
name|originalFileName
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|Optional
argument_list|<
name|Integer
argument_list|>
name|bucketId
init|=
name|AcidUtils
operator|.
name|parseBucketIdFromRow
argument_list|(
name|fs
argument_list|,
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucketId
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|AcidOutputFormat
operator|.
name|Options
name|options
init|=
operator|new
name|AcidOutputFormat
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
operator|.
name|writingBase
argument_list|(
name|isMajorCompaction
argument_list|)
operator|.
name|writingDeleteDelta
argument_list|(
name|isDeleteDelta
argument_list|)
operator|.
name|isCompressed
argument_list|(
literal|false
argument_list|)
operator|.
name|minimumWriteId
argument_list|(
name|minOpenWriteId
argument_list|)
operator|.
name|maximumWriteId
argument_list|(
name|highWatermark
argument_list|)
operator|.
name|bucket
argument_list|(
name|bucketId
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|statementId
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|visibilityTxnId
argument_list|(
name|compactorTxnId
argument_list|)
decl_stmt|;
name|Path
name|finalBucketFile
init|=
name|AcidUtils
operator|.
name|createFilename
argument_list|(
name|destPath
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|Hive
operator|.
name|moveFile
argument_list|(
name|conf
argument_list|,
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|,
name|finalBucketFile
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|fs
operator|.
name|delete
argument_list|(
name|sourcePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

