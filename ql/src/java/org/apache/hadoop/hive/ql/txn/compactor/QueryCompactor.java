begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|txn
operator|.
name|compactor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidWriteIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|CompactionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Common interface for query based compactions.  */
end_comment

begin_class
specifier|abstract
class|class
name|QueryCompactor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|QueryCompactor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TMPDIR
init|=
literal|"_tmp"
decl_stmt|;
comment|/**    * Start a query based compaction.    * @param hiveConf hive configuration    * @param table the table, where the compaction should run    * @param partition the partition, where the compaction should run    * @param storageDescriptor this is the resolved storage descriptor    * @param writeIds valid write IDs used to filter rows while they're being read for compaction    * @param compactionInfo provides info about the type of compaction    * @throws IOException compaction cannot be finished.    */
specifier|abstract
name|void
name|runCompaction
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|Table
name|table
parameter_list|,
name|Partition
name|partition
parameter_list|,
name|StorageDescriptor
name|storageDescriptor
parameter_list|,
name|ValidWriteIdList
name|writeIds
parameter_list|,
name|CompactionInfo
name|compactionInfo
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Collection of some helper functions.    */
specifier|static
class|class
name|Util
block|{
comment|/**      * Determine if compaction can run in a specified directory.      * @param isMajorCompaction type of compaction.      * @param dir the delta directory      * @param sd resolved storage descriptor      * @return true, if compaction can run.      */
specifier|static
name|boolean
name|isEnoughToCompact
parameter_list|(
name|boolean
name|isMajorCompaction
parameter_list|,
name|AcidUtils
operator|.
name|Directory
name|dir
parameter_list|,
name|StorageDescriptor
name|sd
parameter_list|)
block|{
name|int
name|deltaCount
init|=
name|dir
operator|.
name|getCurrentDirectories
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|origCount
init|=
name|dir
operator|.
name|getOriginalFiles
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|StringBuilder
name|deltaInfo
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|deltaCount
argument_list|)
decl_stmt|;
name|boolean
name|isEnoughToCompact
decl_stmt|;
if|if
condition|(
name|isMajorCompaction
condition|)
block|{
name|isEnoughToCompact
operator|=
operator|(
name|origCount
operator|>
literal|0
operator|||
name|deltaCount
operator|+
operator|(
name|dir
operator|.
name|getBaseDirectory
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
operator|)
operator|>
literal|1
operator|)
expr_stmt|;
block|}
else|else
block|{
name|isEnoughToCompact
operator|=
operator|(
name|deltaCount
operator|>
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|deltaCount
operator|==
literal|2
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|deltaByType
init|=
name|dir
operator|.
name|getCurrentDirectories
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|delta
lambda|->
operator|(
name|delta
operator|.
name|isDeleteDelta
argument_list|()
condition|?
name|AcidUtils
operator|.
name|DELETE_DELTA_PREFIX
else|:
name|AcidUtils
operator|.
name|DELTA_PREFIX
operator|)
argument_list|,
name|Collectors
operator|.
name|counting
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|isEnoughToCompact
operator|=
operator|(
name|deltaByType
operator|.
name|size
argument_list|()
operator|!=
name|deltaCount
operator|)
expr_stmt|;
name|deltaInfo
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|deltaByType
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isEnoughToCompact
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not compacting {}; current base: {}, delta files: {}, originals: {}"
argument_list|,
name|sd
operator|.
name|getLocation
argument_list|()
argument_list|,
name|dir
operator|.
name|getBaseDirectory
argument_list|()
argument_list|,
name|deltaInfo
argument_list|,
name|origCount
argument_list|)
expr_stmt|;
block|}
return|return
name|isEnoughToCompact
return|;
block|}
comment|/**      * Check for obsolete directories, and return true if any exist and Cleaner should be      * run. For example if we insert overwrite into a table with only deltas, a new base file with      * the highest writeId is created so there will be no live delta directories, only obsolete      * ones. Compaction is not needed, but the cleaner should still be run.      *      * @return true if cleaning is needed      */
specifier|public
specifier|static
name|boolean
name|needsCleaning
parameter_list|(
name|AcidUtils
operator|.
name|Directory
name|dir
parameter_list|,
name|StorageDescriptor
name|sd
parameter_list|)
block|{
name|int
name|numObsoleteDirs
init|=
name|dir
operator|.
name|getObsolete
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|boolean
name|needsJustCleaning
init|=
name|numObsoleteDirs
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|needsJustCleaning
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} obsolete directories in {} found; marked for cleaning."
argument_list|,
name|numObsoleteDirs
argument_list|,
name|sd
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|needsJustCleaning
return|;
block|}
comment|/**      * Generate a random tmp path, under the provided storage.      * @param sd storage descriptor, must be not null.      * @return path, always not null      */
specifier|static
name|String
name|generateTmpPath
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|)
block|{
return|return
name|sd
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/"
operator|+
name|TMPDIR
operator|+
literal|"_"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

