begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * An implementation of HiveLockManager for use with {@link org.apache.hadoop.hive.ql.lockmgr.DbTxnManager}.  * Note, this lock manager is not meant to stand alone.  It cannot be used  * without the DbTxnManager.  */
end_comment

begin_class
specifier|public
class|class
name|DbLockManager
implements|implements
name|HiveLockManager
block|{
specifier|static
specifier|final
specifier|private
name|String
name|CLASS_NAME
init|=
name|DbLockManager
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CLASS_NAME
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|MAX_SLEEP
init|=
literal|15000
decl_stmt|;
specifier|private
name|HiveLockManagerCtx
name|context
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|DbHiveLock
argument_list|>
name|locks
decl_stmt|;
specifier|private
name|IMetaStoreClient
name|client
decl_stmt|;
specifier|private
name|long
name|nextSleep
init|=
literal|50
decl_stmt|;
name|DbLockManager
parameter_list|(
name|IMetaStoreClient
name|client
parameter_list|)
block|{
name|locks
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setContext
parameter_list|(
name|HiveLockManagerCtx
name|ctx
parameter_list|)
throws|throws
name|LockException
block|{
name|context
operator|=
name|ctx
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HiveLock
name|lock
parameter_list|(
name|HiveLockObject
name|key
parameter_list|,
name|HiveLockMode
name|mode
parameter_list|,
name|boolean
name|keepAlive
parameter_list|)
throws|throws
name|LockException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveLock
argument_list|>
name|lock
parameter_list|(
name|List
argument_list|<
name|HiveLockObj
argument_list|>
name|objs
parameter_list|,
name|boolean
name|keepAlive
parameter_list|)
throws|throws
name|LockException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Send a lock request to the metastore.  This is intended for use by    * {@link DbTxnManager}.    * @param lock lock request    * @param isBlocking if true, will block until locks have been acquired    * @throws LockException    * @return the result of the lock attempt    */
name|LockState
name|lock
parameter_list|(
name|LockRequest
name|lock
parameter_list|,
name|String
name|queryId
parameter_list|,
name|boolean
name|isBlocking
parameter_list|,
name|List
argument_list|<
name|HiveLock
argument_list|>
name|acquiredLocks
parameter_list|)
throws|throws
name|LockException
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Requesting: queryId="
operator|+
name|queryId
operator|+
literal|" "
operator|+
name|lock
argument_list|)
expr_stmt|;
name|LockResponse
name|res
init|=
name|client
operator|.
name|lock
argument_list|(
name|lock
argument_list|)
decl_stmt|;
comment|//link lockId to queryId
name|LOG
operator|.
name|info
argument_list|(
literal|"Response to queryId="
operator|+
name|queryId
operator|+
literal|" "
operator|+
name|res
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isBlocking
condition|)
block|{
if|if
condition|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|WAITING
condition|)
block|{
return|return
name|LockState
operator|.
name|WAITING
return|;
block|}
block|}
while|while
condition|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|WAITING
condition|)
block|{
name|backoff
argument_list|()
expr_stmt|;
name|res
operator|=
name|client
operator|.
name|checkLock
argument_list|(
name|res
operator|.
name|getLockid
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DbHiveLock
name|hl
init|=
operator|new
name|DbHiveLock
argument_list|(
name|res
operator|.
name|getLockid
argument_list|()
argument_list|)
decl_stmt|;
name|locks
operator|.
name|add
argument_list|(
name|hl
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|getState
argument_list|()
operator|!=
name|LockState
operator|.
name|ACQUIRED
condition|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
name|ErrorMsg
operator|.
name|LOCK_CANNOT_BE_ACQUIRED
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
name|acquiredLocks
operator|.
name|add
argument_list|(
name|hl
argument_list|)
expr_stmt|;
return|return
name|res
operator|.
name|getState
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchTxnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Metastore could not find txnid "
operator|+
name|lock
operator|.
name|getTxnid
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LockException
argument_list|(
name|ErrorMsg
operator|.
name|TXNMGR_NOT_INSTANTIATED
operator|.
name|getMsg
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TxnAbortedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Transaction "
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|lock
operator|.
name|getTxnid
argument_list|()
argument_list|)
operator|+
literal|" already aborted."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LockException
argument_list|(
name|e
argument_list|,
name|ErrorMsg
operator|.
name|TXN_ABORTED
argument_list|,
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|lock
operator|.
name|getTxnid
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
name|ErrorMsg
operator|.
name|METASTORE_COMMUNICATION_FAILED
operator|.
name|getMsg
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Used to make another attempt to acquire a lock (in Waiting state)    * @param extLockId    * @return result of the attempt    * @throws LockException    */
name|LockState
name|checkLock
parameter_list|(
name|long
name|extLockId
parameter_list|)
throws|throws
name|LockException
block|{
try|try
block|{
return|return
name|client
operator|.
name|checkLock
argument_list|(
name|extLockId
argument_list|)
operator|.
name|getState
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
name|ErrorMsg
operator|.
name|METASTORE_COMMUNICATION_FAILED
operator|.
name|getMsg
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|unlock
parameter_list|(
name|HiveLock
name|hiveLock
parameter_list|)
throws|throws
name|LockException
block|{
name|long
name|lockId
init|=
operator|(
operator|(
name|DbHiveLock
operator|)
name|hiveLock
operator|)
operator|.
name|lockId
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unlocking "
operator|+
name|hiveLock
argument_list|)
expr_stmt|;
name|client
operator|.
name|unlock
argument_list|(
name|lockId
argument_list|)
expr_stmt|;
name|boolean
name|removed
init|=
name|locks
operator|.
name|remove
argument_list|(
name|hiveLock
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removed a lock "
operator|+
name|removed
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchLockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Metastore could find no record of lock "
operator|+
name|JavaUtils
operator|.
name|lockIdToString
argument_list|(
name|lockId
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LockException
argument_list|(
name|e
argument_list|,
name|ErrorMsg
operator|.
name|LOCK_NO_SUCH_LOCK
argument_list|,
name|JavaUtils
operator|.
name|lockIdToString
argument_list|(
name|lockId
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TxnOpenException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Attempt to unlock lock "
operator|+
name|JavaUtils
operator|.
name|lockIdToString
argument_list|(
name|lockId
argument_list|)
operator|+
literal|"associated with an open transaction, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
name|ErrorMsg
operator|.
name|METASTORE_COMMUNICATION_FAILED
operator|.
name|getMsg
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|releaseLocks
parameter_list|(
name|List
argument_list|<
name|HiveLock
argument_list|>
name|hiveLocks
parameter_list|)
block|{
for|for
control|(
name|HiveLock
name|lock
range|:
name|hiveLocks
control|)
block|{
try|try
block|{
name|unlock
argument_list|(
name|lock
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
comment|// Not sure why this method doesn't throw any exceptions,
comment|// but since the interface doesn't allow it we'll just swallow them and
comment|// move on.
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveLock
argument_list|>
name|getLocks
parameter_list|(
name|boolean
name|verifyTablePartitions
parameter_list|,
name|boolean
name|fetchData
parameter_list|)
throws|throws
name|LockException
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|HiveLock
argument_list|>
argument_list|(
name|locks
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveLock
argument_list|>
name|getLocks
parameter_list|(
name|HiveLockObject
name|key
parameter_list|,
name|boolean
name|verifyTablePartitions
parameter_list|,
name|boolean
name|fetchData
parameter_list|)
throws|throws
name|LockException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|ShowLocksResponse
name|getLocks
parameter_list|()
throws|throws
name|LockException
block|{
try|try
block|{
return|return
name|client
operator|.
name|showLocks
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
name|ErrorMsg
operator|.
name|METASTORE_COMMUNICATION_FAILED
operator|.
name|getMsg
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|LockException
block|{
for|for
control|(
name|HiveLock
name|lock
range|:
name|locks
control|)
block|{
name|unlock
argument_list|(
name|lock
argument_list|)
expr_stmt|;
block|}
name|locks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|prepareRetry
parameter_list|()
throws|throws
name|LockException
block|{
comment|// NOP
block|}
annotation|@
name|Override
specifier|public
name|void
name|refresh
parameter_list|()
block|{
comment|// NOP
block|}
specifier|static
class|class
name|DbHiveLock
extends|extends
name|HiveLock
block|{
name|long
name|lockId
decl_stmt|;
name|DbHiveLock
parameter_list|(
name|long
name|id
parameter_list|)
block|{
name|lockId
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HiveLockObject
name|getHiveLockObject
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|HiveLockMode
name|getHiveLockMode
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|DbHiveLock
condition|)
block|{
return|return
name|lockId
operator|==
operator|(
operator|(
name|DbHiveLock
operator|)
name|other
operator|)
operator|.
name|lockId
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|lockId
operator|%
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|JavaUtils
operator|.
name|lockIdToString
argument_list|(
name|lockId
argument_list|)
return|;
block|}
block|}
comment|/**    * Clear the memory of the locks in this object.  This won't clear the locks from the database.    * It is for use with    * {@link #DbLockManager(org.apache.hadoop.hive.metastore.IMetaStoreClient).commitTxn} and    * {@link #DbLockManager(org.apache.hadoop.hive.metastore.IMetaStoreClient).rollbackTxn}.    */
name|void
name|clearLocalLockRecords
parameter_list|()
block|{
name|locks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// Sleep before we send checkLock again, but do it with a back off
comment|// off so we don't sit and hammer the metastore in a tight loop
specifier|private
name|void
name|backoff
parameter_list|()
block|{
name|nextSleep
operator|*=
literal|2
expr_stmt|;
if|if
condition|(
name|nextSleep
operator|>
name|MAX_SLEEP
condition|)
name|nextSleep
operator|=
name|MAX_SLEEP
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|nextSleep
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{     }
block|}
block|}
end_class

end_unit

