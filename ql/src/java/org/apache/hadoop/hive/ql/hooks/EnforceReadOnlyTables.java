begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**  * Implementation of a pre execute hook that prevents modifications  * of read-only tables used by the test framework  */
end_comment

begin_class
specifier|public
class|class
name|EnforceReadOnlyTables
implements|implements
name|ExecuteWithHookContext
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
init|=
name|hookContext
operator|.
name|getInputs
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
init|=
name|hookContext
operator|.
name|getOutputs
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|hookContext
operator|.
name|getUgi
argument_list|()
decl_stmt|;
name|this
operator|.
name|run
argument_list|(
name|ss
argument_list|,
name|inputs
argument_list|,
name|outputs
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|(
name|SessionState
name|sess
parameter_list|,
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Don't enforce during test driver setup or shutdown.
if|if
condition|(
name|sess
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolean
argument_list|(
literal|"hive.test.init.phase"
argument_list|,
literal|false
argument_list|)
operator|||
name|sess
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolean
argument_list|(
literal|"hive.test.shutdown.phase"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|readOnlyTables
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.src.tables"
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|WriteEntity
name|w
range|:
name|outputs
control|)
block|{
if|if
condition|(
operator|(
name|w
operator|.
name|getTyp
argument_list|()
operator|==
name|WriteEntity
operator|.
name|Type
operator|.
name|TABLE
operator|)
operator|||
operator|(
name|w
operator|.
name|getTyp
argument_list|()
operator|==
name|WriteEntity
operator|.
name|Type
operator|.
name|PARTITION
operator|)
condition|)
block|{
name|Table
name|t
init|=
name|w
operator|.
name|getTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|DEFAULT_DATABASE_NAME
operator|.
name|equalsIgnoreCase
argument_list|(
name|t
operator|.
name|getDbName
argument_list|()
argument_list|)
operator|&&
name|readOnlyTables
operator|.
name|contains
argument_list|(
name|t
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot overwrite read-only table: "
operator|+
name|t
operator|.
name|getTableName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

