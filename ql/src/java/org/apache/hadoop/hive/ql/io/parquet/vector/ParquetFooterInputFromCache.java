begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|encoded
operator|.
name|MemoryBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|encoded
operator|.
name|MemoryBufferOrBuffers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|hadoop
operator|.
name|ParquetFileWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|io
operator|.
name|InputFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|io
operator|.
name|SeekableInputStream
import|;
end_import

begin_comment
comment|/**  * The Parquet InputFile implementation that allows the reader to  * read the footer from cache without being aware of the latter.  * This implements both InputFile and the InputStream that the reader gets from InputFile.  */
end_comment

begin_class
specifier|final
class|class
name|ParquetFooterInputFromCache
extends|extends
name|SeekableInputStream
implements|implements
name|InputFile
block|{
specifier|final
specifier|static
name|int
name|FOOTER_LENGTH_SIZE
init|=
literal|4
decl_stmt|;
comment|// For the file size check.
specifier|private
specifier|static
specifier|final
name|int
name|TAIL_LENGTH
init|=
name|ParquetFileWriter
operator|.
name|MAGIC
operator|.
name|length
operator|+
name|FOOTER_LENGTH_SIZE
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|FAKE_PREFIX_LENGTH
init|=
name|ParquetFileWriter
operator|.
name|MAGIC
operator|.
name|length
decl_stmt|;
specifier|private
specifier|final
name|int
name|length
decl_stmt|,
name|footerLength
decl_stmt|;
specifier|private
name|int
name|position
init|=
literal|0
decl_stmt|,
name|bufferIx
init|=
literal|0
decl_stmt|,
name|bufferPos
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|MemoryBuffer
index|[]
name|cacheData
decl_stmt|;
specifier|private
specifier|final
name|int
index|[]
name|positions
decl_stmt|;
specifier|public
name|ParquetFooterInputFromCache
parameter_list|(
name|MemoryBufferOrBuffers
name|footerData
parameter_list|)
block|{
name|MemoryBuffer
name|oneBuffer
init|=
name|footerData
operator|.
name|getSingleBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|oneBuffer
operator|!=
literal|null
condition|)
block|{
name|cacheData
operator|=
operator|new
name|MemoryBuffer
index|[
literal|2
index|]
expr_stmt|;
name|cacheData
index|[
literal|0
index|]
operator|=
name|oneBuffer
expr_stmt|;
block|}
else|else
block|{
name|MemoryBuffer
index|[]
name|bufs
init|=
name|footerData
operator|.
name|getMultipleBuffers
argument_list|()
decl_stmt|;
name|cacheData
operator|=
operator|new
name|MemoryBuffer
index|[
name|bufs
operator|.
name|length
operator|+
literal|1
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bufs
argument_list|,
literal|0
argument_list|,
name|cacheData
argument_list|,
literal|0
argument_list|,
name|bufs
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|int
name|footerLength
init|=
literal|0
decl_stmt|;
name|positions
operator|=
operator|new
name|int
index|[
name|cacheData
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cacheData
operator|.
name|length
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|positions
index|[
name|i
index|]
operator|=
name|footerLength
expr_stmt|;
name|int
name|dataLen
init|=
name|cacheData
index|[
name|i
index|]
operator|.
name|getByteBufferRaw
argument_list|()
operator|.
name|remaining
argument_list|()
decl_stmt|;
assert|assert
name|dataLen
operator|>
literal|0
assert|;
name|footerLength
operator|+=
name|dataLen
expr_stmt|;
block|}
name|positions
index|[
name|cacheData
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|footerLength
expr_stmt|;
name|cacheData
index|[
name|cacheData
operator|.
name|length
operator|-
literal|1
index|]
operator|=
operator|new
name|FooterEndBuffer
argument_list|(
name|footerLength
argument_list|)
expr_stmt|;
name|this
operator|.
name|footerLength
operator|=
name|footerLength
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|footerLength
operator|+
name|FAKE_PREFIX_LENGTH
operator|+
name|TAIL_LENGTH
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|SeekableInputStream
name|newStream
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Note: this doesn't maintain proper newStream semantics (if any).
comment|//       We could either clone this instead or enforce that this is only called once.
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|position
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|position
operator|=
operator|(
name|int
operator|)
name|targetPos
expr_stmt|;
name|targetPos
operator|-=
name|FAKE_PREFIX_LENGTH
expr_stmt|;
comment|// Not efficient, but we don't expect this to be called frequently.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|positions
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|int
name|endPos
init|=
operator|(
name|i
operator|==
name|positions
operator|.
name|length
operator|)
condition|?
operator|(
name|length
operator|-
name|FAKE_PREFIX_LENGTH
operator|)
else|:
name|positions
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|endPos
operator|>
name|targetPos
condition|)
block|{
name|bufferIx
operator|=
name|i
operator|-
literal|1
expr_stmt|;
name|bufferPos
operator|=
call|(
name|int
call|)
argument_list|(
name|targetPos
operator|-
name|positions
index|[
name|i
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Incorrect seek "
operator|+
name|targetPos
operator|+
literal|"; footer length "
operator|+
name|footerLength
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|positions
argument_list|)
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFully
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|readInternal
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
operator|==
name|len
condition|)
return|return;
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
specifier|public
name|int
name|readInternal
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|position
operator|>=
name|length
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|argPos
init|=
name|offset
decl_stmt|,
name|argEnd
init|=
name|offset
operator|+
name|len
decl_stmt|;
while|while
condition|(
name|argPos
operator|<
name|argEnd
condition|)
block|{
if|if
condition|(
name|bufferIx
operator|==
name|cacheData
operator|.
name|length
condition|)
return|return
operator|(
name|argPos
operator|-
name|offset
operator|)
return|;
name|ByteBuffer
name|data
init|=
name|cacheData
index|[
name|bufferIx
index|]
operator|.
name|getByteBufferDup
argument_list|()
decl_stmt|;
name|int
name|toConsume
init|=
name|Math
operator|.
name|min
argument_list|(
name|argEnd
operator|-
name|argPos
argument_list|,
name|data
operator|.
name|remaining
argument_list|()
operator|-
name|bufferPos
argument_list|)
decl_stmt|;
name|data
operator|.
name|position
argument_list|(
name|data
operator|.
name|position
argument_list|()
operator|+
name|bufferPos
argument_list|)
expr_stmt|;
name|data
operator|.
name|get
argument_list|(
name|b
argument_list|,
name|argPos
argument_list|,
name|toConsume
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|remaining
argument_list|()
operator|==
literal|0
condition|)
block|{
operator|++
name|bufferIx
expr_stmt|;
name|bufferPos
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|bufferPos
operator|+=
name|toConsume
expr_stmt|;
block|}
name|argPos
operator|+=
name|toConsume
expr_stmt|;
block|}
return|return
name|len
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|position
operator|>=
name|length
condition|)
return|return
operator|-
literal|1
return|;
operator|++
name|position
expr_stmt|;
name|ByteBuffer
name|data
init|=
name|cacheData
index|[
name|bufferIx
index|]
operator|.
name|getByteBufferRaw
argument_list|()
decl_stmt|;
name|int
name|bp
init|=
name|bufferPos
decl_stmt|;
operator|++
name|bufferPos
expr_stmt|;
if|if
condition|(
name|bufferPos
operator|==
name|data
operator|.
name|remaining
argument_list|()
condition|)
block|{
operator|++
name|bufferIx
expr_stmt|;
comment|// The first line check should handle the OOB.
name|bufferPos
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|data
operator|.
name|get
argument_list|(
name|data
operator|.
name|position
argument_list|()
operator|+
name|bp
argument_list|)
operator|&
literal|0xFF
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Simple implementation for now - currently Parquet uses heap buffers.
name|int
name|result
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|bb
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|result
operator|=
name|readInternal
argument_list|(
name|bb
operator|.
name|array
argument_list|()
argument_list|,
name|bb
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|>
literal|0
condition|)
block|{
name|bb
operator|.
name|position
argument_list|(
name|bb
operator|.
name|position
argument_list|()
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|bb
operator|.
name|remaining
argument_list|()
index|]
decl_stmt|;
name|result
operator|=
name|readInternal
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|bb
operator|.
name|put
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFully
parameter_list|(
name|byte
index|[]
name|arg0
parameter_list|)
throws|throws
name|IOException
block|{
name|readFully
argument_list|(
name|arg0
argument_list|,
literal|0
argument_list|,
name|arg0
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFully
parameter_list|(
name|ByteBuffer
name|arg0
parameter_list|)
throws|throws
name|IOException
block|{
name|read
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
comment|/**    * The fake buffer that emulates end of file, with footer length and magic. Given that these    * can be generated based on the footer buffer itself, we don't cache them.    */
specifier|private
specifier|final
specifier|static
class|class
name|FooterEndBuffer
implements|implements
name|MemoryBuffer
block|{
specifier|private
specifier|final
name|ByteBuffer
name|bb
decl_stmt|;
specifier|public
name|FooterEndBuffer
parameter_list|(
name|int
name|footerLength
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
name|b
index|[
literal|0
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|footerLength
operator|>>>
literal|0
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|b
index|[
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|footerLength
operator|>>>
literal|8
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|b
index|[
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|footerLength
operator|>>>
literal|16
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|b
index|[
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|footerLength
operator|>>>
literal|24
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ParquetFileWriter
operator|.
name|MAGIC
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|b
index|[
literal|4
operator|+
name|i
index|]
operator|=
name|ParquetFileWriter
operator|.
name|MAGIC
index|[
name|i
index|]
expr_stmt|;
block|}
name|bb
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getByteBufferRaw
parameter_list|()
block|{
return|return
name|bb
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getByteBufferDup
parameter_list|()
block|{
return|return
name|bb
operator|.
name|duplicate
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

