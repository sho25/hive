begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDTF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|ptf
operator|.
name|TableFunctionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|ptf
operator|.
name|WindowingTableFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|AnnotationUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * FunctionInfo.  *  */
end_comment

begin_class
specifier|public
class|class
name|FunctionInfo
block|{
specifier|public
specifier|static
enum|enum
name|FunctionType
block|{
name|BUILTIN
block|,
name|PERSISTENT
block|,
name|TEMPORARY
block|;   }
specifier|private
specifier|final
name|FunctionType
name|functionType
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isInternalTableFunction
decl_stmt|;
specifier|private
specifier|final
name|String
name|displayName
decl_stmt|;
specifier|private
specifier|final
name|FunctionResource
index|[]
name|resources
decl_stmt|;
specifier|private
name|String
name|className
decl_stmt|;
specifier|private
name|GenericUDF
name|genericUDF
decl_stmt|;
specifier|private
name|GenericUDTF
name|genericUDTF
decl_stmt|;
specifier|private
name|GenericUDAFResolver
name|genericUDAFResolver
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|TableFunctionResolver
argument_list|>
name|tableFunctionResolver
decl_stmt|;
specifier|private
name|boolean
name|blockedFunction
decl_stmt|;
comment|// for persistent function
comment|// if the function is dropped, all functions registered to sessions are needed to be reloaded
specifier|private
name|AtomicBoolean
name|discarded
decl_stmt|;
specifier|public
name|FunctionInfo
parameter_list|(
name|String
name|displayName
parameter_list|,
name|String
name|className
parameter_list|,
name|FunctionResource
modifier|...
name|resources
parameter_list|)
block|{
name|this
operator|.
name|functionType
operator|=
name|FunctionType
operator|.
name|PERSISTENT
expr_stmt|;
name|this
operator|.
name|displayName
operator|=
name|displayName
expr_stmt|;
name|this
operator|.
name|className
operator|=
name|className
expr_stmt|;
name|this
operator|.
name|isInternalTableFunction
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|resources
operator|=
name|resources
expr_stmt|;
name|this
operator|.
name|discarded
operator|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// shared to all session functions
block|}
specifier|public
name|FunctionInfo
parameter_list|(
name|FunctionType
name|functionType
parameter_list|,
name|String
name|displayName
parameter_list|,
name|GenericUDF
name|genericUDF
parameter_list|,
name|FunctionResource
modifier|...
name|resources
parameter_list|)
block|{
name|this
operator|.
name|functionType
operator|=
name|functionType
expr_stmt|;
name|this
operator|.
name|displayName
operator|=
name|displayName
expr_stmt|;
name|this
operator|.
name|genericUDF
operator|=
name|genericUDF
expr_stmt|;
name|this
operator|.
name|isInternalTableFunction
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|resources
operator|=
name|resources
expr_stmt|;
block|}
specifier|public
name|FunctionInfo
parameter_list|(
name|FunctionType
name|functionType
parameter_list|,
name|String
name|displayName
parameter_list|,
name|GenericUDAFResolver
name|genericUDAFResolver
parameter_list|,
name|FunctionResource
modifier|...
name|resources
parameter_list|)
block|{
name|this
operator|.
name|functionType
operator|=
name|functionType
expr_stmt|;
name|this
operator|.
name|displayName
operator|=
name|displayName
expr_stmt|;
name|this
operator|.
name|genericUDAFResolver
operator|=
name|genericUDAFResolver
expr_stmt|;
name|this
operator|.
name|isInternalTableFunction
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|resources
operator|=
name|resources
expr_stmt|;
block|}
specifier|public
name|FunctionInfo
parameter_list|(
name|FunctionType
name|functionType
parameter_list|,
name|String
name|displayName
parameter_list|,
name|GenericUDTF
name|genericUDTF
parameter_list|,
name|FunctionResource
modifier|...
name|resources
parameter_list|)
block|{
name|this
operator|.
name|functionType
operator|=
name|functionType
expr_stmt|;
name|this
operator|.
name|displayName
operator|=
name|displayName
expr_stmt|;
name|this
operator|.
name|genericUDTF
operator|=
name|genericUDTF
expr_stmt|;
name|this
operator|.
name|isInternalTableFunction
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|resources
operator|=
name|resources
expr_stmt|;
block|}
specifier|public
name|FunctionInfo
parameter_list|(
name|FunctionType
name|functionType
parameter_list|,
name|String
name|displayName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableFunctionResolver
argument_list|>
name|tFnCls
parameter_list|,
name|FunctionResource
modifier|...
name|resources
parameter_list|)
block|{
name|this
operator|.
name|functionType
operator|=
name|functionType
expr_stmt|;
name|this
operator|.
name|displayName
operator|=
name|displayName
expr_stmt|;
name|this
operator|.
name|tableFunctionResolver
operator|=
name|tFnCls
expr_stmt|;
name|PartitionTableFunctionDescription
name|def
init|=
name|AnnotationUtils
operator|.
name|getAnnotation
argument_list|(
name|tableFunctionResolver
argument_list|,
name|PartitionTableFunctionDescription
operator|.
name|class
argument_list|)
decl_stmt|;
name|this
operator|.
name|isInternalTableFunction
operator|=
name|def
operator|!=
literal|null
operator|&&
name|def
operator|.
name|isInternal
argument_list|()
expr_stmt|;
name|this
operator|.
name|resources
operator|=
name|resources
expr_stmt|;
block|}
comment|/**    * Get a new GenericUDF object for the function.    */
specifier|public
name|GenericUDF
name|getGenericUDF
parameter_list|()
block|{
comment|// GenericUDF is stateful - we have to make a copy here
if|if
condition|(
name|genericUDF
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|FunctionRegistry
operator|.
name|cloneGenericUDF
argument_list|(
name|genericUDF
argument_list|)
return|;
block|}
comment|/**    * Get a new GenericUDTF object for the function.    */
specifier|public
name|GenericUDTF
name|getGenericUDTF
parameter_list|()
block|{
comment|// GenericUDTF is stateful too, copy
if|if
condition|(
name|genericUDTF
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|FunctionRegistry
operator|.
name|cloneGenericUDTF
argument_list|(
name|genericUDTF
argument_list|)
return|;
block|}
comment|/**    * Get the GenericUDAFResolver object for the function.    */
specifier|public
name|GenericUDAFResolver
name|getGenericUDAFResolver
parameter_list|()
block|{
return|return
name|genericUDAFResolver
return|;
block|}
comment|/**    * Get the Class of the UDF.    */
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getFunctionClass
parameter_list|()
block|{
if|if
condition|(
name|isGenericUDF
argument_list|()
condition|)
block|{
if|if
condition|(
name|genericUDF
operator|instanceof
name|GenericUDFBridge
condition|)
block|{
return|return
operator|(
operator|(
name|GenericUDFBridge
operator|)
name|genericUDF
operator|)
operator|.
name|getUdfClass
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|genericUDF
operator|.
name|getClass
argument_list|()
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|isGenericUDAF
argument_list|()
condition|)
block|{
if|if
condition|(
name|genericUDAFResolver
operator|instanceof
name|GenericUDAFBridge
condition|)
block|{
return|return
operator|(
operator|(
name|GenericUDAFBridge
operator|)
name|genericUDAFResolver
operator|)
operator|.
name|getUDAFClass
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|genericUDAFResolver
operator|.
name|getClass
argument_list|()
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|isGenericUDTF
argument_list|()
condition|)
block|{
return|return
name|genericUDTF
operator|.
name|getClass
argument_list|()
return|;
block|}
if|if
condition|(
name|isTableFunction
argument_list|()
condition|)
block|{
return|return
name|this
operator|.
name|tableFunctionResolver
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Get the display name for this function. This should be transferred into    * exprNodeGenericUDFDesc, and will be used as the first parameter to    * GenericUDF.getDisplayName() call, instead of hard-coding the function name.    * This will solve the problem of displaying only one name when a udf is    * registered under 2 names.    */
specifier|public
name|String
name|getDisplayName
parameter_list|()
block|{
return|return
name|displayName
return|;
block|}
comment|/**    * Native functions cannot be unregistered.    */
specifier|public
name|boolean
name|isNative
parameter_list|()
block|{
return|return
name|functionType
operator|==
name|FunctionType
operator|.
name|BUILTIN
operator|||
name|functionType
operator|==
name|FunctionType
operator|.
name|PERSISTENT
return|;
block|}
comment|/**    * Internal table functions cannot be used in the language.    * {@link WindowingTableFunction}    */
specifier|public
name|boolean
name|isInternalTableFunction
parameter_list|()
block|{
return|return
name|isInternalTableFunction
return|;
block|}
comment|/**    * @return TRUE if the function is a GenericUDF    */
specifier|public
name|boolean
name|isGenericUDF
parameter_list|()
block|{
return|return
literal|null
operator|!=
name|genericUDF
return|;
block|}
comment|/**    * @return TRUE if the function is a GenericUDAF    */
specifier|public
name|boolean
name|isGenericUDAF
parameter_list|()
block|{
return|return
literal|null
operator|!=
name|genericUDAFResolver
return|;
block|}
comment|/**    * @return TRUE if the function is a GenericUDTF    */
specifier|public
name|boolean
name|isGenericUDTF
parameter_list|()
block|{
return|return
literal|null
operator|!=
name|genericUDTF
return|;
block|}
comment|/**    * @return TRUE if the function is a Table Function    */
specifier|public
name|boolean
name|isTableFunction
parameter_list|()
block|{
return|return
literal|null
operator|!=
name|tableFunctionResolver
return|;
block|}
specifier|public
name|boolean
name|isBlockedFunction
parameter_list|()
block|{
return|return
name|blockedFunction
return|;
block|}
specifier|public
name|void
name|setBlockedFunction
parameter_list|(
name|boolean
name|blockedFunction
parameter_list|)
block|{
name|this
operator|.
name|blockedFunction
operator|=
name|blockedFunction
expr_stmt|;
block|}
specifier|public
name|boolean
name|isBuiltIn
parameter_list|()
block|{
return|return
name|functionType
operator|==
name|FunctionType
operator|.
name|BUILTIN
return|;
block|}
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
name|functionType
operator|==
name|FunctionType
operator|.
name|PERSISTENT
return|;
block|}
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|className
return|;
block|}
specifier|public
name|FunctionResource
index|[]
name|getResources
parameter_list|()
block|{
return|return
name|resources
return|;
block|}
specifier|public
name|void
name|discarded
parameter_list|()
block|{
if|if
condition|(
name|discarded
operator|!=
literal|null
condition|)
block|{
name|discarded
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// for persistent function
specifier|public
name|boolean
name|isDiscarded
parameter_list|()
block|{
return|return
name|discarded
operator|!=
literal|null
operator|&&
name|discarded
operator|.
name|get
argument_list|()
return|;
block|}
comment|// for persistent function
specifier|public
name|void
name|shareStateWith
parameter_list|(
name|FunctionInfo
name|function
parameter_list|)
block|{
if|if
condition|(
name|function
operator|!=
literal|null
condition|)
block|{
name|function
operator|.
name|discarded
operator|=
name|discarded
expr_stmt|;
block|}
block|}
specifier|public
name|FunctionType
name|getFunctionType
parameter_list|()
block|{
return|return
name|functionType
return|;
block|}
specifier|public
specifier|static
class|class
name|FunctionResource
block|{
specifier|private
specifier|final
name|SessionState
operator|.
name|ResourceType
name|resourceType
decl_stmt|;
specifier|private
specifier|final
name|String
name|resourceURI
decl_stmt|;
specifier|public
name|FunctionResource
parameter_list|(
name|SessionState
operator|.
name|ResourceType
name|resourceType
parameter_list|,
name|String
name|resourceURI
parameter_list|)
block|{
name|this
operator|.
name|resourceType
operator|=
name|resourceType
expr_stmt|;
name|this
operator|.
name|resourceURI
operator|=
name|resourceURI
expr_stmt|;
block|}
specifier|public
name|SessionState
operator|.
name|ResourceType
name|getResourceType
parameter_list|()
block|{
return|return
name|resourceType
return|;
block|}
specifier|public
name|String
name|getResourceURI
parameter_list|()
block|{
return|return
name|resourceURI
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|resourceType
operator|+
literal|":"
operator|+
name|resourceURI
return|;
block|}
block|}
block|}
end_class

end_unit

