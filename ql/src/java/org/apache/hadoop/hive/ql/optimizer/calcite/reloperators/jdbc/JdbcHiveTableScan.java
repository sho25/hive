begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|jdbc
operator|.
name|JdbcConvention
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|jdbc
operator|.
name|JdbcTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|jdbc
operator|.
name|JdbcTableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveTableScan
import|;
end_import

begin_comment
comment|/**  * Relational expression representing a scan of a HiveDB collection.  *  *<p>  * Additional operations might be applied, using the "find" or "aggregate" methods.  *</p>  */
end_comment

begin_class
specifier|public
class|class
name|JdbcHiveTableScan
extends|extends
name|JdbcTableScan
block|{
specifier|private
specifier|final
name|HiveTableScan
name|hiveTableScan
decl_stmt|;
specifier|public
name|JdbcHiveTableScan
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelOptTable
name|table
parameter_list|,
name|JdbcTable
name|jdbcTable
parameter_list|,
name|JdbcConvention
name|jdbcConvention
parameter_list|,
name|HiveTableScan
name|hiveTableScan
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|table
argument_list|,
name|jdbcTable
argument_list|,
name|jdbcConvention
argument_list|)
expr_stmt|;
name|this
operator|.
name|hiveTableScan
operator|=
name|hiveTableScan
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|inputs
operator|.
name|isEmpty
argument_list|()
assert|;
return|return
operator|new
name|JdbcHiveTableScan
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|table
argument_list|,
name|jdbcTable
argument_list|,
operator|(
name|JdbcConvention
operator|)
name|getConvention
argument_list|()
argument_list|,
name|this
operator|.
name|hiveTableScan
argument_list|)
return|;
block|}
specifier|public
name|HiveTableScan
name|getHiveTableScan
parameter_list|()
block|{
return|return
name|hiveTableScan
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelWriter
name|explainTerms
parameter_list|(
name|RelWriter
name|pw
parameter_list|)
block|{
return|return
name|hiveTableScan
operator|.
name|explainTerms
argument_list|(
name|pw
argument_list|)
return|;
block|}
block|}
end_class

end_unit

