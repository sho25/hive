begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
operator|.
name|NUMERIC_GROUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
operator|.
name|VOID_GROUP
import|;
end_import

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"width_bucket"
argument_list|,
name|value
operator|=
literal|"_FUNC_(expr, min_value, max_value, num_buckets) - Returns an integer between 0 and num_buckets+1 by "
operator|+
literal|"mapping the expr into buckets defined by the range [min_value, max_value]"
argument_list|,
name|extended
operator|=
literal|"Returns an integer between 0 and num_buckets+1 by "
operator|+
literal|"mapping expr into the ith equally sized bucket. Buckets are made by dividing [min_value, max_value] into "
operator|+
literal|"equally sized regions. If expr< min_value, return 1, if expr> max_value return num_buckets+1\n"
operator|+
literal|"Example: expr is an integer column withs values 1, 10, 20, 30.\n"
operator|+
literal|"> SELECT _FUNC_(expr, 5, 25, 4) FROM src;\n1\n1\n3\n5"
argument_list|)
specifier|public
class|class
name|GenericUDFWidthBucket
extends|extends
name|GenericUDF
block|{
specifier|private
specifier|transient
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
index|[]
name|inputTypes
init|=
operator|new
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
index|[
literal|4
index|]
decl_stmt|;
specifier|private
specifier|transient
name|ObjectInspectorConverters
operator|.
name|Converter
index|[]
name|converters
init|=
operator|new
name|ObjectInspectorConverters
operator|.
name|Converter
index|[
literal|4
index|]
decl_stmt|;
specifier|private
specifier|final
name|IntWritable
name|output
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|checkArgsSize
argument_list|(
name|arguments
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkArgPrimitive
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkArgPrimitive
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkArgPrimitive
argument_list|(
name|arguments
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkArgPrimitive
argument_list|(
name|arguments
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkArgGroups
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|,
name|inputTypes
argument_list|,
name|NUMERIC_GROUP
argument_list|,
name|VOID_GROUP
argument_list|)
expr_stmt|;
name|checkArgGroups
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|,
name|inputTypes
argument_list|,
name|NUMERIC_GROUP
argument_list|,
name|VOID_GROUP
argument_list|)
expr_stmt|;
name|checkArgGroups
argument_list|(
name|arguments
argument_list|,
literal|2
argument_list|,
name|inputTypes
argument_list|,
name|NUMERIC_GROUP
argument_list|,
name|VOID_GROUP
argument_list|)
expr_stmt|;
name|checkArgGroups
argument_list|(
name|arguments
argument_list|,
literal|3
argument_list|,
name|inputTypes
argument_list|,
name|NUMERIC_GROUP
argument_list|,
name|VOID_GROUP
argument_list|)
expr_stmt|;
name|obtainLongConverter
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|,
name|inputTypes
argument_list|,
name|converters
argument_list|)
expr_stmt|;
name|obtainLongConverter
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|,
name|inputTypes
argument_list|,
name|converters
argument_list|)
expr_stmt|;
name|obtainLongConverter
argument_list|(
name|arguments
argument_list|,
literal|2
argument_list|,
name|inputTypes
argument_list|,
name|converters
argument_list|)
expr_stmt|;
name|obtainIntConverter
argument_list|(
name|arguments
argument_list|,
literal|3
argument_list|,
name|inputTypes
argument_list|,
name|converters
argument_list|)
expr_stmt|;
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableIntObjectInspector
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
name|Long
name|exprValue
init|=
name|getLongValue
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|,
name|converters
argument_list|)
decl_stmt|;
name|Long
name|minValue
init|=
name|getLongValue
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|,
name|converters
argument_list|)
decl_stmt|;
name|Long
name|maxValue
init|=
name|getLongValue
argument_list|(
name|arguments
argument_list|,
literal|2
argument_list|,
name|converters
argument_list|)
decl_stmt|;
name|Integer
name|numBuckets
init|=
name|getIntValue
argument_list|(
name|arguments
argument_list|,
literal|3
argument_list|,
name|converters
argument_list|)
decl_stmt|;
if|if
condition|(
name|exprValue
operator|==
literal|null
operator|||
name|minValue
operator|==
literal|null
operator|||
name|maxValue
operator|==
literal|null
operator|||
name|numBuckets
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|numBuckets
operator|>
literal|0
argument_list|,
literal|"numBuckets in width_bucket function must be above 0"
argument_list|)
expr_stmt|;
name|long
name|intervalSize
init|=
operator|(
name|maxValue
operator|-
name|minValue
operator|)
operator|/
name|numBuckets
decl_stmt|;
if|if
condition|(
name|exprValue
operator|<
name|minValue
condition|)
block|{
name|output
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exprValue
operator|>
name|maxValue
condition|)
block|{
name|output
operator|.
name|set
argument_list|(
name|numBuckets
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|diff
init|=
name|exprValue
operator|-
name|minValue
decl_stmt|;
if|if
condition|(
name|diff
operator|%
name|intervalSize
operator|==
literal|0
condition|)
block|{
name|output
operator|.
name|set
argument_list|(
call|(
name|int
call|)
argument_list|(
name|diff
operator|/
name|intervalSize
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
operator|.
name|set
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
call|(
name|double
call|)
argument_list|(
name|diff
argument_list|)
operator|/
name|intervalSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|output
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
return|return
name|getStandardDisplayString
argument_list|(
literal|"width_bucket"
argument_list|,
name|children
argument_list|)
return|;
block|}
block|}
end_class

end_unit

