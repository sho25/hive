begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Union
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveSortLimit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveUnion
import|;
end_import

begin_comment
comment|/**  * Planner rule that pushes a  * {@link org.apache.hadoop.hive.ql.optimizer.calcite.reloperators.HiveSortLimit}  * past a  * {@link org.apache.hadoop.hive.ql.optimizer.calcite.reloperators.HiveUnion}.  */
end_comment

begin_class
specifier|public
class|class
name|HiveSortUnionReduceRule
extends|extends
name|RelOptRule
block|{
comment|/**    * Rule instance for Union implementation that does not preserve the ordering    * of its inputs. Thus, it makes no sense to match this rule if the Sort does    * not have a limit, i.e., {@link Sort#fetch} is null.    */
specifier|public
specifier|static
specifier|final
name|HiveSortUnionReduceRule
name|INSTANCE
init|=
operator|new
name|HiveSortUnionReduceRule
argument_list|()
decl_stmt|;
comment|// ~ Constructors -----------------------------------------------------------
specifier|private
name|HiveSortUnionReduceRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|HiveSortLimit
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|HiveUnion
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// ~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|HiveSortLimit
name|sort
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|HiveUnion
name|union
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// We only apply this rule if Union.all is true.
comment|// And Sort.fetch is not null and it is more than 0.
return|return
name|union
operator|.
name|all
operator|&&
name|sort
operator|.
name|fetch
operator|!=
literal|null
comment|// Calite bug CALCITE-987
operator|&&
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|sort
operator|.
name|fetch
argument_list|)
operator|>
literal|0
return|;
block|}
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|HiveSortLimit
name|sort
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|HiveUnion
name|union
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Thus we use 'finishPushSortPastUnion' as a flag to identify if we have finished pushing the
comment|// sort past a union.
name|boolean
name|finishPushSortPastUnion
init|=
literal|true
decl_stmt|;
specifier|final
name|int
name|offset
init|=
name|sort
operator|.
name|offset
operator|==
literal|null
condition|?
literal|0
else|:
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|sort
operator|.
name|offset
argument_list|)
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|union
operator|.
name|getInputs
argument_list|()
control|)
block|{
comment|// If we do not reduce the input size, we bail out
if|if
condition|(
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|sort
operator|.
name|fetch
argument_list|)
operator|+
name|offset
operator|<
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|finishPushSortPastUnion
operator|=
literal|false
expr_stmt|;
comment|// Here we do some query rewrite. We first get the new fetchRN, which is
comment|// a sum of offset and fetch.
comment|// We then push it through by creating a new branchSort with the new
comment|// fetchRN but no offset.
name|RexNode
name|fetchRN
init|=
name|sort
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
operator|.
name|makeExactLiteral
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|sort
operator|.
name|fetch
argument_list|)
operator|+
name|offset
argument_list|)
argument_list|)
decl_stmt|;
name|HiveSortLimit
name|branchSort
init|=
name|sort
operator|.
name|copy
argument_list|(
name|sort
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|input
argument_list|,
name|sort
operator|.
name|getCollation
argument_list|()
argument_list|,
literal|null
argument_list|,
name|fetchRN
argument_list|)
decl_stmt|;
name|branchSort
operator|.
name|setRuleCreated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|inputs
operator|.
name|add
argument_list|(
name|branchSort
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inputs
operator|.
name|add
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
comment|// there is nothing to change
if|if
condition|(
name|finishPushSortPastUnion
condition|)
block|{
return|return;
block|}
comment|// create new union and sort
name|HiveUnion
name|unionCopy
init|=
operator|(
name|HiveUnion
operator|)
name|union
operator|.
name|copy
argument_list|(
name|union
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|inputs
argument_list|,
name|union
operator|.
name|all
argument_list|)
decl_stmt|;
name|HiveSortLimit
name|result
init|=
name|sort
operator|.
name|copy
argument_list|(
name|sort
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|unionCopy
argument_list|,
name|sort
operator|.
name|getCollation
argument_list|()
argument_list|,
name|sort
operator|.
name|offset
argument_list|,
name|sort
operator|.
name|fetch
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

