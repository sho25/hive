begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinHashTableResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinHashMapResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_comment
comment|/**  * This class has methods for generating vectorized join results for inner joins.  *  * Inner joins use a hash map to lookup the 1 or more small table values.  *  * One vector inner join optimization is projecting inner keys.  When a key appears  * in the small table results area, instead of copying or referencing key we just include  * that key again in the output projection.  *  * Another optimization is when an inner join does not have any small table columns in the  * join result, we use a different variation call inner big only.  That variation uses  * a hash multi-set instead of hash map since there are no values (just a count).  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|VectorMapJoinInnerGenerateResultOperator
extends|extends
name|VectorMapJoinGenerateResultOperator
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|VectorMapJoinInnerGenerateResultOperator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|//---------------------------------------------------------------------------
comment|// Inner join specific members.
comment|//
comment|// An array of hash map results so we can do lookups on the whole batch before output result
comment|// generation.
specifier|protected
specifier|transient
name|VectorMapJoinHashMapResult
name|hashMapResults
index|[]
decl_stmt|;
comment|// Pre-allocated member for storing the (physical) batch index of matching row (single- or
comment|// multi-small-table-valued) indexes during a process call.
specifier|protected
specifier|transient
name|int
index|[]
name|allMatchs
decl_stmt|;
comment|/*    *  Pre-allocated members for storing information equal key series for small-table matches.    *    *  ~HashMapResultIndices    *                Index into the hashMapResults array for the match.    *  ~AllMatchIndices    *                (Logical) indices into allMatchs to the first row of a match of a    *                possible series of duplicate keys.    *  ~IsSingleValue    *                Whether there is 1 or multiple small table values.    *  ~DuplicateCounts    *                The duplicate count for each matched key.    *    */
specifier|protected
specifier|transient
name|int
index|[]
name|equalKeySeriesHashMapResultIndices
decl_stmt|;
specifier|protected
specifier|transient
name|int
index|[]
name|equalKeySeriesAllMatchIndices
decl_stmt|;
specifier|protected
specifier|transient
name|boolean
index|[]
name|equalKeySeriesIsSingleValue
decl_stmt|;
specifier|protected
specifier|transient
name|int
index|[]
name|equalKeySeriesDuplicateCounts
decl_stmt|;
comment|// Pre-allocated member for storing the (physical) batch index of rows that need to be spilled.
specifier|protected
specifier|transient
name|int
index|[]
name|spills
decl_stmt|;
comment|// Pre-allocated member for storing index into the hashMapResults for each spilled row.
specifier|protected
specifier|transient
name|int
index|[]
name|spillHashMapResultIndices
decl_stmt|;
specifier|public
name|VectorMapJoinInnerGenerateResultOperator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|VectorMapJoinInnerGenerateResultOperator
parameter_list|(
name|VectorizationContext
name|vContext
parameter_list|,
name|OperatorDesc
name|conf
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
argument_list|(
name|vContext
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/*    * Setup our inner join specific members.    */
specifier|protected
name|void
name|commonSetup
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|commonSetup
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// Inner join specific.
name|VectorMapJoinHashMap
name|baseHashMap
init|=
operator|(
name|VectorMapJoinHashMap
operator|)
name|vectorMapJoinHashTable
decl_stmt|;
name|hashMapResults
operator|=
operator|new
name|VectorMapJoinHashMapResult
index|[
name|batch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hashMapResults
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|hashMapResults
index|[
name|i
index|]
operator|=
name|baseHashMap
operator|.
name|createHashMapResult
argument_list|()
expr_stmt|;
block|}
name|allMatchs
operator|=
operator|new
name|int
index|[
name|batch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|equalKeySeriesHashMapResultIndices
operator|=
operator|new
name|int
index|[
name|batch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|equalKeySeriesAllMatchIndices
operator|=
operator|new
name|int
index|[
name|batch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|equalKeySeriesIsSingleValue
operator|=
operator|new
name|boolean
index|[
name|batch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|equalKeySeriesDuplicateCounts
operator|=
operator|new
name|int
index|[
name|batch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|spills
operator|=
operator|new
name|int
index|[
name|batch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|spillHashMapResultIndices
operator|=
operator|new
name|int
index|[
name|batch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
block|}
comment|/*    * Inner join (hash map).    */
comment|/**    * Do the per-batch setup for an inner join.    */
specifier|protected
name|void
name|innerPerBatchSetup
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
comment|// For join operators that can generate small table results, reset their
comment|// (target) scratch columns.
for|for
control|(
name|int
name|column
range|:
name|smallTableOutputVectorColumns
control|)
block|{
name|ColumnVector
name|smallTableColumn
init|=
name|batch
operator|.
name|cols
index|[
name|column
index|]
decl_stmt|;
name|smallTableColumn
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Generate the inner join output results for one vectorized row batch.    *    * @param batch    *          The big table batch with any matching and any non matching rows both as    *          selected in use.    * @param allMatchCount    *          Number of matches in allMatchs.    * @param equalKeySeriesCount    *          Number of single value matches.    * @param spillCount    *          Number of spills in spills.    * @param hashMapResultCount    *          Number of entries in hashMapResults.    */
specifier|protected
name|void
name|finishInner
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|allMatchCount
parameter_list|,
name|int
name|equalKeySeriesCount
parameter_list|,
name|int
name|spillCount
parameter_list|,
name|int
name|hashMapResultCount
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
block|{
name|int
name|numSel
init|=
literal|0
decl_stmt|;
comment|/*      * Optimize by running value expressions only over the matched rows.      */
if|if
condition|(
name|allMatchCount
operator|>
literal|0
operator|&&
name|bigTableValueExpressions
operator|!=
literal|null
condition|)
block|{
name|performValueExpressions
argument_list|(
name|batch
argument_list|,
name|allMatchs
argument_list|,
name|allMatchCount
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|equalKeySeriesCount
condition|;
name|i
operator|++
control|)
block|{
name|int
name|hashMapResultIndex
init|=
name|equalKeySeriesHashMapResultIndices
index|[
name|i
index|]
decl_stmt|;
name|VectorMapJoinHashMapResult
name|hashMapResult
init|=
name|hashMapResults
index|[
name|hashMapResultIndex
index|]
decl_stmt|;
name|int
name|allMatchesIndex
init|=
name|equalKeySeriesAllMatchIndices
index|[
name|i
index|]
decl_stmt|;
name|boolean
name|isSingleValue
init|=
name|equalKeySeriesIsSingleValue
index|[
name|i
index|]
decl_stmt|;
name|int
name|duplicateCount
init|=
name|equalKeySeriesDuplicateCounts
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|isSingleValue
condition|)
block|{
name|numSel
operator|=
name|generateHashMapResultSingleValue
argument_list|(
name|batch
argument_list|,
name|hashMapResult
argument_list|,
name|allMatchs
argument_list|,
name|allMatchesIndex
argument_list|,
name|duplicateCount
argument_list|,
name|numSel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|generateHashMapResultMultiValue
argument_list|(
name|batch
argument_list|,
name|hashMapResult
argument_list|,
name|allMatchs
argument_list|,
name|allMatchesIndex
argument_list|,
name|duplicateCount
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|spillCount
operator|>
literal|0
condition|)
block|{
name|spillHashMapBatch
argument_list|(
name|batch
argument_list|,
operator|(
name|VectorMapJoinHashTableResult
index|[]
operator|)
name|hashMapResults
argument_list|,
name|spills
argument_list|,
name|spillHashMapResultIndices
argument_list|,
name|spillCount
argument_list|)
expr_stmt|;
block|}
name|batch
operator|.
name|size
operator|=
name|numSel
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
block|}
specifier|protected
name|void
name|finishInnerRepeated
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|JoinUtil
operator|.
name|JoinResult
name|joinResult
parameter_list|,
name|VectorMapJoinHashTableResult
name|hashMapResult
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
block|{
name|int
name|numSel
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|joinResult
condition|)
block|{
case|case
name|MATCH
case|:
if|if
condition|(
name|bigTableValueExpressions
operator|!=
literal|null
condition|)
block|{
comment|// Run our value expressions over whole batch.
for|for
control|(
name|VectorExpression
name|ve
range|:
name|bigTableValueExpressions
control|)
block|{
name|ve
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Generate special repeated case.
name|generateHashMapResultRepeatedAll
argument_list|(
name|batch
argument_list|,
name|hashMapResults
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPILL
case|:
comment|// Whole batch is spilled.
name|spillBatchRepeated
argument_list|(
name|batch
argument_list|,
operator|(
name|VectorMapJoinHashTableResult
operator|)
name|hashMapResults
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|NOMATCH
case|:
comment|// No match for entire batch.
name|batch
operator|.
name|size
operator|=
literal|0
expr_stmt|;
break|break;
block|}
block|}
block|}
end_class

end_unit

