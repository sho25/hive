begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|partition
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Utilities for partition related DDL operations.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PartitionUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PartitionUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|PartitionUtils
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"PartitionUtils should not be instantiated"
argument_list|)
throw|;
block|}
comment|/**    * Certain partition values are are used by hive. e.g. the default partition in dynamic partitioning and the    * intermediate partition values used in the archiving process. Naturally, prohibit the user from creating partitions    * with these reserved values. The check that this function is more restrictive than the actual limitation, but it's    * simpler. Should be okay since the reserved names are fairly long and uncommon.    */
specifier|public
specifier|static
name|void
name|validatePartitions
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|reservedPartitionValues
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Partition can't have this name
name|reservedPartitionValues
operator|.
name|add
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|DEFAULTPARTITIONNAME
argument_list|)
argument_list|)
expr_stmt|;
name|reservedPartitionValues
operator|.
name|add
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|DEFAULT_ZOOKEEPER_PARTITION_NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// Partition value can't end in this suffix
name|reservedPartitionValues
operator|.
name|add
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_INT_ORIGINAL
argument_list|)
argument_list|)
expr_stmt|;
name|reservedPartitionValues
operator|.
name|add
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_INT_ARCHIVED
argument_list|)
argument_list|)
expr_stmt|;
name|reservedPartitionValues
operator|.
name|add
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_INT_EXTRACTED
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|partitionSpec
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|s
range|:
name|reservedPartitionValues
control|)
block|{
name|String
name|value
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|RESERVED_PART_VAL
operator|.
name|getMsg
argument_list|(
literal|"(User value: "
operator|+
name|e
operator|.
name|getValue
argument_list|()
operator|+
literal|" Reserved substring: "
operator|+
name|s
operator|+
literal|")"
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|ExprNodeGenericFuncDesc
name|makeBinaryPredicate
parameter_list|(
name|String
name|fn
parameter_list|,
name|ExprNodeDesc
name|left
parameter_list|,
name|ExprNodeDesc
name|right
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
name|fn
argument_list|)
operator|.
name|getGenericUDF
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ExprNodeGenericFuncDesc
name|makeUnaryPredicate
parameter_list|(
name|String
name|fn
parameter_list|,
name|ExprNodeDesc
name|arg
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
name|fn
argument_list|)
operator|.
name|getGenericUDF
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|arg
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Partition
name|getPartition
parameter_list|(
name|Hive
name|db
parameter_list|,
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|boolean
name|throwException
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Partition
name|partition
decl_stmt|;
try|try
block|{
name|partition
operator|=
name|db
operator|.
name|getPartition
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|toMessage
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_PARTITION
argument_list|,
name|partitionSpec
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|partition
operator|==
literal|null
operator|&&
name|throwException
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|toMessage
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_PARTITION
argument_list|,
name|partitionSpec
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|partition
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitions
parameter_list|(
name|Hive
name|db
parameter_list|,
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|boolean
name|throwException
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
decl_stmt|;
try|try
block|{
name|partitions
operator|=
name|partitionSpec
operator|==
literal|null
condition|?
name|db
operator|.
name|getPartitions
argument_list|(
name|table
argument_list|)
else|:
name|db
operator|.
name|getPartitions
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|toMessage
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_PARTITION
argument_list|,
name|partitionSpec
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|partitions
operator|.
name|isEmpty
argument_list|()
operator|&&
name|throwException
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|toMessage
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_PARTITION
argument_list|,
name|partitionSpec
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|partitions
return|;
block|}
specifier|private
specifier|static
name|String
name|toMessage
parameter_list|(
name|ErrorMsg
name|message
parameter_list|,
name|Object
name|detail
parameter_list|)
block|{
return|return
name|detail
operator|==
literal|null
condition|?
name|message
operator|.
name|getMsg
argument_list|()
else|:
name|message
operator|.
name|getMsg
argument_list|(
name|detail
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Add the table partitions to be modified in the output, so that it is available for the pre-execution hook.    */
specifier|public
specifier|static
name|void
name|addTablePartsOutputs
parameter_list|(
name|Hive
name|db
parameter_list|,
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|,
name|Table
name|table
parameter_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|partitionSpecs
parameter_list|,
name|boolean
name|allowMany
parameter_list|,
name|WriteEntity
operator|.
name|WriteType
name|writeType
parameter_list|)
throws|throws
name|SemanticException
block|{
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
range|:
name|partitionSpecs
control|)
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|allowMany
condition|)
block|{
try|try
block|{
name|parts
operator|=
name|db
operator|.
name|getPartitions
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got HiveException during obtaining list of partitions"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|parts
operator|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
name|Partition
name|p
init|=
name|db
operator|.
name|getPartition
argument_list|(
name|table
argument_list|,
name|partitionSpec
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|parts
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Wrong specification"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|Partition
name|p
range|:
name|parts
control|)
block|{
comment|// Don't request any locks here, as the table has already been locked.
name|outputs
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|p
argument_list|,
name|writeType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

