begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|exprNodeFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_class
specifier|public
class|class
name|ExprNodeFuncEvaluator
extends|extends
name|ExprNodeEvaluator
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ExprNodeFuncEvaluator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|exprNodeFuncDesc
name|expr
decl_stmt|;
specifier|transient
name|ArrayList
argument_list|<
name|ExprNodeEvaluator
argument_list|>
name|evaluators
decl_stmt|;
specifier|transient
name|Object
index|[]
name|children
decl_stmt|;
specifier|transient
name|UDF
name|udf
decl_stmt|;
specifier|public
name|ExprNodeFuncEvaluator
parameter_list|(
name|exprNodeFuncDesc
name|expr
parameter_list|)
block|{
name|this
operator|.
name|expr
operator|=
name|expr
expr_stmt|;
assert|assert
operator|(
name|expr
operator|!=
literal|null
operator|)
assert|;
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|expr
operator|.
name|getUDFClass
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|udf
operator|=
operator|(
name|UDF
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|expr
operator|.
name|getUDFClass
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|evaluators
operator|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeEvaluator
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expr
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|evaluators
operator|.
name|add
argument_list|(
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|expr
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|children
operator|=
operator|new
name|Object
index|[
name|expr
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
block|}
specifier|public
name|Object
name|evaluateToObject
parameter_list|(
name|HiveObject
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Evaluate all children first
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|evaluators
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
name|evaluators
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|evaluateToObject
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|children
index|[
name|i
index|]
operator|=
name|o
expr_stmt|;
block|}
try|try
block|{
return|return
name|expr
operator|.
name|getUDFMethod
argument_list|()
operator|.
name|invoke
argument_list|(
name|udf
argument_list|,
name|children
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unable to execute UDF function "
operator|+
name|udf
operator|.
name|getClass
argument_list|()
operator|+
literal|" "
operator|+
name|expr
operator|.
name|getUDFMethod
argument_list|()
operator|+
literal|" on inputs "
operator|+
literal|"("
operator|+
name|children
operator|.
name|length
operator|+
literal|") "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|children
argument_list|)
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|HiveObject
name|evaluate
parameter_list|(
name|HiveObject
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|obj
init|=
name|evaluateToObject
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
operator|new
name|NullHiveObject
argument_list|()
return|;
return|return
operator|new
name|PrimitiveHiveObject
argument_list|(
name|obj
argument_list|)
return|;
block|}
block|}
end_class

end_unit

