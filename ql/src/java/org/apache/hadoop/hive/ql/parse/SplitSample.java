begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Explain
import|;
end_import

begin_comment
comment|/**  *  * This class stores all the information specified in the TABLESAMPLE(...) clause.  * e.g. for the clause "FROM t TABLESAMPLE(1 PERCENT) it will store the percentage 1,  * and the seed number is to determine which 1%. Currently it is from the conf  * hive.sample.seednumber  *  */
end_comment

begin_class
specifier|public
class|class
name|SplitSample
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|// only one of belows is not-null
specifier|private
name|Long
name|totalLength
decl_stmt|;
comment|// total length of sample, prunes splits exceeded
specifier|private
name|Double
name|percent
decl_stmt|;
comment|// percent to total input, prunes splits exceeded
specifier|private
name|Integer
name|rowCount
decl_stmt|;
comment|// row count per split, do not prune splits
comment|/**    * The number used to determine which part of the input to sample    */
specifier|private
name|int
name|seedNum
init|=
literal|0
decl_stmt|;
specifier|public
name|SplitSample
parameter_list|()
block|{   }
specifier|public
name|SplitSample
parameter_list|(
name|double
name|percent
parameter_list|,
name|int
name|seedNum
parameter_list|)
block|{
name|this
operator|.
name|percent
operator|=
name|percent
expr_stmt|;
name|this
operator|.
name|seedNum
operator|=
name|seedNum
expr_stmt|;
block|}
specifier|public
name|SplitSample
parameter_list|(
name|long
name|totalLength
parameter_list|,
name|int
name|seedNum
parameter_list|)
block|{
name|this
operator|.
name|totalLength
operator|=
name|totalLength
expr_stmt|;
name|this
operator|.
name|seedNum
operator|=
name|seedNum
expr_stmt|;
block|}
specifier|public
name|SplitSample
parameter_list|(
name|int
name|rowCount
parameter_list|)
block|{
name|this
operator|.
name|rowCount
operator|=
name|rowCount
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"percentage"
argument_list|)
specifier|public
name|Double
name|getPercent
parameter_list|()
block|{
return|return
name|percent
return|;
block|}
specifier|public
name|void
name|setPercent
parameter_list|(
name|Double
name|percent
parameter_list|)
block|{
name|this
operator|.
name|percent
operator|=
name|percent
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"total length"
argument_list|)
specifier|public
name|Long
name|getTotalLength
parameter_list|()
block|{
return|return
name|totalLength
return|;
block|}
specifier|public
name|void
name|setTotalLength
parameter_list|(
name|Long
name|totalLength
parameter_list|)
block|{
name|this
operator|.
name|totalLength
operator|=
name|totalLength
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"row count"
argument_list|)
specifier|public
name|Integer
name|getRowCount
parameter_list|()
block|{
return|return
name|rowCount
return|;
block|}
specifier|public
name|void
name|setRowCount
parameter_list|(
name|Integer
name|rowCount
parameter_list|)
block|{
name|this
operator|.
name|rowCount
operator|=
name|rowCount
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"seed number"
argument_list|)
specifier|public
name|int
name|getSeedNum
parameter_list|()
block|{
return|return
name|seedNum
return|;
block|}
specifier|public
name|void
name|setSeedNum
parameter_list|(
name|int
name|seedNum
parameter_list|)
block|{
name|this
operator|.
name|seedNum
operator|=
name|seedNum
expr_stmt|;
block|}
specifier|public
name|long
name|getTargetSize
parameter_list|(
name|long
name|totalSize
parameter_list|)
block|{
return|return
name|totalLength
operator|!=
literal|null
condition|?
name|totalLength
else|:
call|(
name|long
call|)
argument_list|(
name|totalSize
operator|*
name|percent
operator|/
literal|100D
argument_list|)
return|;
block|}
block|}
end_class

end_unit

