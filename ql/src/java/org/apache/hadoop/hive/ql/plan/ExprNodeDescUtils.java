begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|type
operator|.
name|TypeCheckProcFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExprNodeEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExprNodeEvaluatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|ConstantPropagateProcFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNotEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|HiveDecimalUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|ExprNodeDescUtils
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExprNodeDescUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|int
name|indexOf
parameter_list|(
name|ExprNodeDesc
name|origin
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|sources
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sources
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|origin
operator|.
name|isSame
argument_list|(
name|sources
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|// traversing origin, find ExprNodeDesc in sources and replaces it with ExprNodeDesc
comment|// in targets having same index.
comment|// return null if failed to find
specifier|public
specifier|static
name|ExprNodeDesc
name|replace
parameter_list|(
name|ExprNodeDesc
name|origin
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|sources
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|targets
parameter_list|)
block|{
name|int
name|index
init|=
name|indexOf
argument_list|(
name|origin
argument_list|,
name|sources
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
return|return
name|targets
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|// encountered column or field which cannot be found in sources
if|if
condition|(
name|origin
operator|instanceof
name|ExprNodeColumnDesc
operator|||
name|origin
operator|instanceof
name|ExprNodeFieldDesc
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// for ExprNodeGenericFuncDesc, it should be deterministic and stateless
if|if
condition|(
name|origin
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
name|ExprNodeGenericFuncDesc
name|func
init|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|origin
decl_stmt|;
if|if
condition|(
operator|!
name|FunctionRegistry
operator|.
name|isConsistentWithinQuery
argument_list|(
name|func
operator|.
name|getGenericUDF
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|origin
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ExprNodeDesc
name|child
init|=
name|replace
argument_list|(
name|origin
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|sources
argument_list|,
name|targets
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|children
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
comment|// duplicate function with possibly replaced children
name|ExprNodeGenericFuncDesc
name|clone
init|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|func
operator|.
name|clone
argument_list|()
decl_stmt|;
name|clone
operator|.
name|setChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
return|return
name|clone
return|;
block|}
comment|// constant or null, just return it
return|return
name|origin
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isDefaultPartition
parameter_list|(
name|ExprNodeDesc
name|origin
parameter_list|,
name|String
name|defaultPartitionName
parameter_list|)
block|{
if|if
condition|(
name|origin
operator|instanceof
name|ExprNodeConstantDesc
operator|&&
operator|(
operator|(
name|ExprNodeConstantDesc
operator|)
name|origin
operator|)
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|ExprNodeConstantDesc
operator|)
name|origin
operator|)
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
operator|&&
operator|(
operator|(
name|ExprNodeConstantDesc
operator|)
name|origin
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|defaultPartitionName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|replaceEqualDefaultPartition
parameter_list|(
name|ExprNodeDesc
name|origin
parameter_list|,
name|String
name|defaultPartitionName
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ExprNodeColumnDesc
name|column
init|=
literal|null
decl_stmt|;
name|ExprNodeConstantDesc
name|defaultPartition
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|origin
operator|instanceof
name|ExprNodeGenericFuncDesc
operator|&&
operator|(
operator|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|origin
operator|)
operator|.
name|getGenericUDF
argument_list|()
operator|instanceof
name|GenericUDFOPEqual
operator|||
operator|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|origin
operator|)
operator|.
name|getGenericUDF
argument_list|()
operator|instanceof
name|GenericUDFOPNotEqual
operator|)
condition|)
block|{
if|if
condition|(
name|isDefaultPartition
argument_list|(
name|origin
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|defaultPartitionName
argument_list|)
condition|)
block|{
name|defaultPartition
operator|=
operator|(
name|ExprNodeConstantDesc
operator|)
name|origin
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|column
operator|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|origin
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isDefaultPartition
argument_list|(
name|origin
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|defaultPartitionName
argument_list|)
condition|)
block|{
name|column
operator|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|origin
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|defaultPartition
operator|=
operator|(
name|ExprNodeConstantDesc
operator|)
name|origin
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Found
if|if
condition|(
name|column
operator|!=
literal|null
condition|)
block|{
name|origin
operator|.
name|getChildren
argument_list|()
operator|.
name|remove
argument_list|(
name|defaultPartition
argument_list|)
expr_stmt|;
name|String
name|fnName
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|origin
operator|)
operator|.
name|getGenericUDF
argument_list|()
operator|instanceof
name|GenericUDFOPEqual
condition|)
block|{
name|fnName
operator|=
literal|"isnull"
expr_stmt|;
block|}
else|else
block|{
name|fnName
operator|=
literal|"isnotnull"
expr_stmt|;
block|}
operator|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|origin
operator|)
operator|.
name|setGenericUDF
argument_list|(
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
name|fnName
argument_list|)
operator|.
name|getGenericUDF
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|origin
operator|.
name|getChildren
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExprNodeDesc
name|child
range|:
name|origin
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|replaceEqualDefaultPartition
argument_list|(
name|child
argument_list|,
name|defaultPartitionName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|replaceNullFiltersWithDefaultPartition
parameter_list|(
name|ExprNodeDesc
name|origin
parameter_list|,
name|String
name|defaultPartitionName
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// Convert "ptn_col isnull" to "ptn_col = default_partition" and
comment|// "ptn_col isnotnull" to "ptn_col<> default_partition"
name|String
name|fnName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|origin
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|origin
operator|)
operator|.
name|getGenericUDF
argument_list|()
operator|instanceof
name|GenericUDFOPNull
condition|)
block|{
name|fnName
operator|=
literal|"="
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|origin
operator|)
operator|.
name|getGenericUDF
argument_list|()
operator|instanceof
name|GenericUDFOPNotNull
condition|)
block|{
name|fnName
operator|=
literal|"<>"
expr_stmt|;
block|}
block|}
comment|// Found an expression for function "isnull" or "isnotnull"
if|if
condition|(
name|fnName
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|origin
operator|.
name|getChildren
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|children
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|ExprNodeConstantDesc
name|defaultPartition
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|defaultPartitionName
argument_list|)
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|defaultPartition
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|origin
operator|)
operator|.
name|setChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|origin
operator|)
operator|.
name|setGenericUDF
argument_list|(
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
name|fnName
argument_list|)
operator|.
name|getGenericUDF
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|origin
operator|.
name|getChildren
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExprNodeDesc
name|child
range|:
name|origin
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|replaceNullFiltersWithDefaultPartition
argument_list|(
name|child
argument_list|,
name|defaultPartitionName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * return true if predicate is already included in source     */
specifier|public
specifier|static
name|boolean
name|containsPredicate
parameter_list|(
name|ExprNodeDesc
name|source
parameter_list|,
name|ExprNodeDesc
name|predicate
parameter_list|)
block|{
if|if
condition|(
name|source
operator|.
name|isSame
argument_list|(
name|predicate
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|FunctionRegistry
operator|.
name|isOpAnd
argument_list|(
name|source
argument_list|)
condition|)
block|{
if|if
condition|(
name|containsPredicate
argument_list|(
name|source
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|predicate
argument_list|)
operator|||
name|containsPredicate
argument_list|(
name|source
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|predicate
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * bind two predicates by AND op    */
specifier|public
specifier|static
name|ExprNodeGenericFuncDesc
name|mergePredicates
parameter_list|(
name|ExprNodeDesc
name|prev
parameter_list|,
name|ExprNodeDesc
name|next
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|FunctionRegistry
operator|.
name|isOpAnd
argument_list|(
name|prev
argument_list|)
condition|)
block|{
name|children
operator|.
name|addAll
argument_list|(
name|prev
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|children
operator|.
name|add
argument_list|(
name|prev
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|FunctionRegistry
operator|.
name|isOpAnd
argument_list|(
name|next
argument_list|)
condition|)
block|{
name|children
operator|.
name|addAll
argument_list|(
name|next
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|children
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|FunctionRegistry
operator|.
name|getGenericUDFForAnd
argument_list|()
argument_list|,
name|children
argument_list|)
return|;
block|}
comment|/**    * bind n predicates by AND op    */
specifier|public
specifier|static
name|ExprNodeDesc
name|mergePredicates
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|exprs
parameter_list|)
block|{
name|ExprNodeDesc
name|prev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|expr
range|:
name|exprs
control|)
block|{
if|if
condition|(
name|prev
operator|==
literal|null
condition|)
block|{
name|prev
operator|=
name|expr
expr_stmt|;
continue|continue;
block|}
name|prev
operator|=
name|mergePredicates
argument_list|(
name|prev
argument_list|,
name|expr
argument_list|)
expr_stmt|;
block|}
return|return
name|prev
return|;
block|}
comment|/**    * split predicates by AND op    */
specifier|public
specifier|static
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|split
parameter_list|(
name|ExprNodeDesc
name|current
parameter_list|)
block|{
return|return
name|split
argument_list|(
name|current
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * split predicates by AND op    */
specifier|public
specifier|static
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|split
parameter_list|(
name|ExprNodeDesc
name|current
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|splitted
parameter_list|)
block|{
if|if
condition|(
name|FunctionRegistry
operator|.
name|isOpAnd
argument_list|(
name|current
argument_list|)
condition|)
block|{
for|for
control|(
name|ExprNodeDesc
name|child
range|:
name|current
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|split
argument_list|(
name|child
argument_list|,
name|splitted
argument_list|)
expr_stmt|;
block|}
return|return
name|splitted
return|;
block|}
if|if
condition|(
name|indexOf
argument_list|(
name|current
argument_list|,
name|splitted
argument_list|)
operator|<
literal|0
condition|)
block|{
name|splitted
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
return|return
name|splitted
return|;
block|}
comment|/**    * Recommend name for the expression    */
specifier|public
specifier|static
name|String
name|recommendInputName
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
if|if
condition|(
name|desc
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
return|return
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|desc
operator|)
operator|.
name|getColumn
argument_list|()
return|;
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|desc
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|FunctionRegistry
operator|.
name|isOpPreserveInputName
argument_list|(
name|desc
argument_list|)
operator|&&
operator|!
name|children
operator|.
name|isEmpty
argument_list|()
operator|&&
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
return|return
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getColumn
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Return false if the expression has any non deterministic function    */
specifier|public
specifier|static
name|boolean
name|isDeterministic
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
if|if
condition|(
name|desc
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
if|if
condition|(
operator|!
name|FunctionRegistry
operator|.
name|isDeterministic
argument_list|(
operator|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|desc
operator|)
operator|.
name|getGenericUDF
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|desc
operator|.
name|getChildren
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExprNodeDesc
name|child
range|:
name|desc
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isDeterministic
argument_list|(
name|child
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|clone
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|sources
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|expr
range|:
name|sources
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|expr
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Convert expressions in current operator to those in terminal operator, which    * is an ancestor of current or null (back to top operator).    * Possibly contain null values for non-traceable exprs    */
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|backtrack
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|sources
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|current
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|terminal
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
name|backtrack
argument_list|(
name|sources
argument_list|,
name|current
argument_list|,
name|terminal
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|backtrack
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|sources
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|current
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|terminal
parameter_list|,
name|boolean
name|foldExpr
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|expr
range|:
name|sources
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|backtrack
argument_list|(
name|expr
argument_list|,
name|current
argument_list|,
name|terminal
argument_list|,
name|foldExpr
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|ExprNodeDesc
name|backtrack
parameter_list|(
name|ExprNodeDesc
name|source
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|current
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|terminal
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
name|backtrack
argument_list|(
name|source
argument_list|,
name|current
argument_list|,
name|terminal
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ExprNodeDesc
name|backtrack
parameter_list|(
name|ExprNodeDesc
name|source
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|current
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|terminal
parameter_list|,
name|boolean
name|foldExpr
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|parent
init|=
name|getSingleParent
argument_list|(
name|current
argument_list|,
name|terminal
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return
name|source
return|;
block|}
if|if
condition|(
operator|!
name|foldExpr
operator|&&
name|isConstant
argument_list|(
name|source
argument_list|)
condition|)
block|{
comment|//constant, just return
return|return
name|source
return|;
block|}
if|if
condition|(
name|source
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
comment|// all children expression should be resolved
name|ExprNodeGenericFuncDesc
name|function
init|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|source
operator|.
name|clone
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|backtrack
argument_list|(
name|function
operator|.
name|getChildren
argument_list|()
argument_list|,
name|current
argument_list|,
name|terminal
argument_list|,
name|foldExpr
argument_list|)
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
comment|// Could not resolve all of the function children, fail
return|return
literal|null
return|;
block|}
block|}
name|function
operator|.
name|setChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
if|if
condition|(
name|foldExpr
condition|)
block|{
comment|// fold after replacing, if possible
name|ExprNodeDesc
name|foldedFunction
init|=
name|ConstantPropagateProcFactory
operator|.
name|foldExpr
argument_list|(
name|function
argument_list|)
decl_stmt|;
if|if
condition|(
name|foldedFunction
operator|!=
literal|null
condition|)
block|{
return|return
name|foldedFunction
return|;
block|}
block|}
return|return
name|function
return|;
block|}
if|if
condition|(
name|source
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|ExprNodeColumnDesc
name|column
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|source
decl_stmt|;
return|return
name|backtrack
argument_list|(
name|column
argument_list|,
name|parent
argument_list|,
name|terminal
argument_list|)
return|;
block|}
if|if
condition|(
name|source
operator|instanceof
name|ExprNodeFieldDesc
condition|)
block|{
comment|// field expression should be resolved
name|ExprNodeFieldDesc
name|field
init|=
operator|(
name|ExprNodeFieldDesc
operator|)
name|source
operator|.
name|clone
argument_list|()
decl_stmt|;
name|ExprNodeDesc
name|fieldDesc
init|=
name|backtrack
argument_list|(
name|field
operator|.
name|getDesc
argument_list|()
argument_list|,
name|current
argument_list|,
name|terminal
argument_list|,
name|foldExpr
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldDesc
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|field
operator|.
name|setDesc
argument_list|(
name|fieldDesc
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
comment|// just return
return|return
name|source
return|;
block|}
comment|// Resolve column expression to input expression by using expression mapping in current operator
specifier|private
specifier|static
name|ExprNodeDesc
name|backtrack
parameter_list|(
name|ExprNodeColumnDesc
name|column
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|current
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|terminal
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|mapping
init|=
name|current
operator|.
name|getColumnExprMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapping
operator|==
literal|null
condition|)
block|{
return|return
name|backtrack
argument_list|(
operator|(
name|ExprNodeDesc
operator|)
name|column
argument_list|,
name|current
argument_list|,
name|terminal
argument_list|)
return|;
block|}
name|ExprNodeDesc
name|mapped
init|=
name|mapping
operator|.
name|get
argument_list|(
name|column
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|mapped
operator|==
literal|null
condition|?
literal|null
else|:
name|backtrack
argument_list|(
name|mapped
argument_list|,
name|current
argument_list|,
name|terminal
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Operator
argument_list|<
name|?
argument_list|>
name|getSingleParent
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|current
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|terminal
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|current
operator|==
name|terminal
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|parents
init|=
name|current
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
if|if
condition|(
name|parents
operator|==
literal|null
operator|||
name|parents
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|terminal
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Failed to meet terminal operator"
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
if|if
condition|(
name|parents
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
if|if
condition|(
name|terminal
operator|!=
literal|null
operator|&&
name|parents
operator|.
name|contains
argument_list|(
name|terminal
argument_list|)
condition|)
block|{
return|return
name|terminal
return|;
block|}
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Met multiple parent operators"
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|resolveJoinKeysAsRSColumns
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|sourceList
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|reduceSinkOp
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
name|sourceList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|source
range|:
name|sourceList
control|)
block|{
name|ExprNodeDesc
name|newExpr
init|=
name|resolveJoinKeysAsRSColumns
argument_list|(
name|source
argument_list|,
name|reduceSinkOp
argument_list|)
decl_stmt|;
if|if
condition|(
name|newExpr
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|result
operator|.
name|add
argument_list|(
name|newExpr
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Join keys are expressions based on the select operator. Resolve the expressions so they    * are based on the ReduceSink operator    *   SEL -&gt; RS -&gt; JOIN    * @param source    * @param reduceSinkOp    * @return    */
specifier|public
specifier|static
name|ExprNodeDesc
name|resolveJoinKeysAsRSColumns
parameter_list|(
name|ExprNodeDesc
name|source
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|reduceSinkOp
parameter_list|)
block|{
comment|// Assuming this is only being done for join keys. As a result we shouldn't have to recursively
comment|// check any nested child expressions, because the result of the expression should exist as an
comment|// output column of the ReduceSink operator
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// columnExprMap has the reverse of what we need - a mapping of the internal column names
comment|// to the ExprNodeDesc from the previous operation.
comment|// Find the key/value where the ExprNodeDesc value matches the column we are searching for.
comment|// The key portion of the entry will be the internal column name for the join key expression.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|mapEntry
range|:
name|reduceSinkOp
operator|.
name|getColumnExprMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|mapEntry
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|source
argument_list|)
condition|)
block|{
name|String
name|columnInternalName
init|=
name|mapEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// Joins always use KEY columns for the keys, so avoid resolving to VALUE columns
if|if
condition|(
name|columnInternalName
operator|.
name|startsWith
argument_list|(
name|Utilities
operator|.
name|ReduceField
operator|.
name|VALUE
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|source
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
comment|// The join key is a table column. Create the ExprNodeDesc based on this column.
name|ColumnInfo
name|columnInfo
init|=
name|reduceSinkOp
operator|.
name|getSchema
argument_list|()
operator|.
name|getColumnInfo
argument_list|(
name|columnInternalName
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|columnInfo
argument_list|)
return|;
block|}
else|else
block|{
comment|// Join key expression is likely some expression involving functions/operators, so there
comment|// is no actual table column for this. But the ReduceSink operator should still have an
comment|// output column corresponding to this expression, using the columnInternalName.
name|String
name|tabAlias
init|=
literal|""
decl_stmt|;
comment|// HIVE-21746: Set tabAlias when possible, such as for constant folded column
comment|// that has foldedFromTab info.
if|if
condition|(
name|source
operator|instanceof
name|ExprNodeConstantDesc
condition|)
block|{
name|tabAlias
operator|=
operator|(
operator|(
name|ExprNodeConstantDesc
operator|)
name|source
operator|)
operator|.
name|getFoldedFromTab
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|source
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
name|columnInternalName
argument_list|,
name|tabAlias
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
comment|// Couldn't find reference to expression
block|}
specifier|public
specifier|static
name|ExprNodeDesc
index|[]
name|extractComparePair
parameter_list|(
name|ExprNodeDesc
name|expr1
parameter_list|,
name|ExprNodeDesc
name|expr2
parameter_list|)
block|{
name|expr1
operator|=
name|extractConstant
argument_list|(
name|expr1
argument_list|)
expr_stmt|;
name|expr2
operator|=
name|extractConstant
argument_list|(
name|expr2
argument_list|)
expr_stmt|;
if|if
condition|(
name|expr1
operator|instanceof
name|ExprNodeColumnDesc
operator|&&
name|expr2
operator|instanceof
name|ExprNodeConstantDesc
condition|)
block|{
return|return
operator|new
name|ExprNodeDesc
index|[]
block|{
name|expr1
block|,
name|expr2
block|}
return|;
block|}
if|if
condition|(
name|expr1
operator|instanceof
name|ExprNodeConstantDesc
operator|&&
name|expr2
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
return|return
operator|new
name|ExprNodeDesc
index|[]
block|{
name|expr1
block|,
name|expr2
block|}
return|;
block|}
comment|// handles cases where the query has a predicate "column-name=constant"
if|if
condition|(
name|expr1
operator|instanceof
name|ExprNodeFieldDesc
operator|&&
name|expr2
operator|instanceof
name|ExprNodeConstantDesc
condition|)
block|{
name|ExprNodeColumnDesc
name|columnDesc
init|=
name|extractColumn
argument_list|(
name|expr1
argument_list|)
decl_stmt|;
return|return
name|columnDesc
operator|!=
literal|null
condition|?
operator|new
name|ExprNodeDesc
index|[]
block|{
name|columnDesc
block|,
name|expr2
block|,
name|expr1
block|}
else|:
literal|null
return|;
block|}
comment|// handles cases where the query has a predicate "constant=column-name"
if|if
condition|(
name|expr1
operator|instanceof
name|ExprNodeConstantDesc
operator|&&
name|expr2
operator|instanceof
name|ExprNodeFieldDesc
condition|)
block|{
name|ExprNodeColumnDesc
name|columnDesc
init|=
name|extractColumn
argument_list|(
name|expr2
argument_list|)
decl_stmt|;
return|return
name|columnDesc
operator|!=
literal|null
condition|?
operator|new
name|ExprNodeDesc
index|[]
block|{
name|expr1
block|,
name|columnDesc
block|,
name|expr2
block|}
else|:
literal|null
return|;
block|}
comment|// todo: constant op constant
return|return
literal|null
return|;
block|}
comment|/**    * Extract fields from the given {@link ExprNodeFieldDesc node descriptor}    * */
specifier|public
specifier|static
name|String
index|[]
name|extractFields
parameter_list|(
name|ExprNodeFieldDesc
name|expr
parameter_list|)
block|{
return|return
name|extractFields
argument_list|(
name|expr
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/*    * Recursively extract fields from ExprNodeDesc. Deeply nested structs can have multiple levels of    * fields in them    */
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|extractFields
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|instanceof
name|ExprNodeFieldDesc
condition|)
block|{
name|ExprNodeFieldDesc
name|field
init|=
operator|(
name|ExprNodeFieldDesc
operator|)
name|expr
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|extractFields
argument_list|(
name|field
operator|.
name|getDesc
argument_list|()
argument_list|,
name|fields
argument_list|)
return|;
block|}
if|if
condition|(
name|expr
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
return|return
name|fields
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected exception while extracting fields from ExprNodeDesc"
argument_list|)
throw|;
block|}
comment|/*    * Extract column from the given ExprNodeDesc    */
specifier|private
specifier|static
name|ExprNodeColumnDesc
name|extractColumn
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
return|return
operator|(
name|ExprNodeColumnDesc
operator|)
name|expr
return|;
block|}
if|if
condition|(
name|expr
operator|instanceof
name|ExprNodeFieldDesc
condition|)
block|{
return|return
name|extractColumn
argument_list|(
operator|(
operator|(
name|ExprNodeFieldDesc
operator|)
name|expr
operator|)
operator|.
name|getDesc
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|// from IndexPredicateAnalyzer
specifier|private
specifier|static
name|ExprNodeDesc
name|extractConstant
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|expr
operator|instanceof
name|ExprNodeGenericFuncDesc
operator|)
condition|)
block|{
return|return
name|expr
return|;
block|}
name|ExprNodeConstantDesc
name|folded
init|=
name|foldConstant
argument_list|(
operator|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|expr
operator|)
argument_list|)
decl_stmt|;
return|return
name|folded
operator|==
literal|null
condition|?
name|expr
else|:
name|folded
return|;
block|}
specifier|private
specifier|static
name|ExprNodeConstantDesc
name|foldConstant
parameter_list|(
name|ExprNodeGenericFuncDesc
name|func
parameter_list|)
block|{
name|GenericUDF
name|udf
init|=
name|func
operator|.
name|getGenericUDF
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|FunctionRegistry
operator|.
name|isConsistentWithinQuery
argument_list|(
name|udf
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
comment|// If the UDF depends on any external resources, we can't fold because the
comment|// resources may not be available at compile time.
if|if
condition|(
name|udf
operator|instanceof
name|GenericUDFBridge
condition|)
block|{
name|UDF
name|internal
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
operator|(
operator|(
name|GenericUDFBridge
operator|)
name|udf
operator|)
operator|.
name|getUdfClass
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|internal
operator|.
name|getRequiredFiles
argument_list|()
operator|!=
literal|null
operator|||
name|internal
operator|.
name|getRequiredJars
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|udf
operator|.
name|getRequiredFiles
argument_list|()
operator|!=
literal|null
operator|||
name|udf
operator|.
name|getRequiredJars
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
if|if
condition|(
name|func
operator|.
name|getChildren
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExprNodeDesc
name|child
range|:
name|func
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|ExprNodeConstantDesc
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|child
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
if|if
condition|(
name|foldConstant
argument_list|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|child
argument_list|)
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
name|ExprNodeEvaluator
name|evaluator
init|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|func
argument_list|)
decl_stmt|;
name|ObjectInspector
name|output
init|=
name|evaluator
operator|.
name|initialize
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Object
name|constant
init|=
name|evaluator
operator|.
name|evaluate
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Object
name|java
init|=
name|ObjectInspectorUtils
operator|.
name|copyToStandardJavaObject
argument_list|(
name|constant
argument_list|,
name|output
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|java
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|getExprNodeColumnDesc
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|exprDescList
parameter_list|,
name|Multimap
argument_list|<
name|Integer
argument_list|,
name|ExprNodeColumnDesc
argument_list|>
name|hashCodeTocolumnDescMap
parameter_list|)
block|{
for|for
control|(
name|ExprNodeDesc
name|exprNodeDesc
range|:
name|exprDescList
control|)
block|{
name|getExprNodeColumnDesc
argument_list|(
name|exprNodeDesc
argument_list|,
name|hashCodeTocolumnDescMap
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get Map of ExprNodeColumnDesc HashCode to ExprNodeColumnDesc.    *    * @param exprDesc    * @param hashCodeToColumnDescMap    */
specifier|public
specifier|static
name|void
name|getExprNodeColumnDesc
parameter_list|(
name|ExprNodeDesc
name|exprDesc
parameter_list|,
name|Multimap
argument_list|<
name|Integer
argument_list|,
name|ExprNodeColumnDesc
argument_list|>
name|hashCodeToColumnDescMap
parameter_list|)
block|{
if|if
condition|(
name|exprDesc
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|Collection
argument_list|<
name|ExprNodeColumnDesc
argument_list|>
name|nodes
init|=
name|hashCodeToColumnDescMap
operator|.
name|get
argument_list|(
name|exprDesc
operator|.
name|hashCode
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|insert
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExprNodeColumnDesc
name|node
range|:
name|nodes
control|)
block|{
if|if
condition|(
name|node
operator|.
name|isSame
argument_list|(
name|exprDesc
argument_list|)
condition|)
block|{
name|insert
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|insert
condition|)
block|{
name|nodes
operator|.
name|add
argument_list|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|exprDesc
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|exprDesc
operator|instanceof
name|ExprNodeColumnListDesc
condition|)
block|{
for|for
control|(
name|ExprNodeDesc
name|child
range|:
name|exprDesc
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|getExprNodeColumnDesc
argument_list|(
name|child
argument_list|,
name|hashCodeToColumnDescMap
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|exprDesc
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
for|for
control|(
name|ExprNodeDesc
name|child
range|:
name|exprDesc
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|getExprNodeColumnDesc
argument_list|(
name|child
argument_list|,
name|hashCodeToColumnDescMap
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|exprDesc
operator|instanceof
name|ExprNodeFieldDesc
condition|)
block|{
name|getExprNodeColumnDesc
argument_list|(
operator|(
operator|(
name|ExprNodeFieldDesc
operator|)
name|exprDesc
operator|)
operator|.
name|getDesc
argument_list|()
argument_list|,
name|hashCodeToColumnDescMap
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exprDesc
operator|instanceof
name|ExprNodeSubQueryDesc
condition|)
block|{
name|getExprNodeColumnDesc
argument_list|(
operator|(
operator|(
name|ExprNodeSubQueryDesc
operator|)
name|exprDesc
operator|)
operator|.
name|getSubQueryLhs
argument_list|()
argument_list|,
name|hashCodeToColumnDescMap
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isConstant
parameter_list|(
name|ExprNodeDesc
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|ExprNodeConstantDesc
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
name|ExprNodeGenericFuncDesc
name|func
init|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|value
decl_stmt|;
if|if
condition|(
operator|!
name|FunctionRegistry
operator|.
name|isConsistentWithinQuery
argument_list|(
name|func
operator|.
name|getGenericUDF
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|ExprNodeDesc
name|child
range|:
name|func
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isConstant
argument_list|(
name|child
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isAllConstants
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|value
parameter_list|)
block|{
for|for
control|(
name|ExprNodeDesc
name|expr
range|:
name|value
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|expr
operator|instanceof
name|ExprNodeConstantDesc
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isNullConstant
parameter_list|(
name|ExprNodeDesc
name|value
parameter_list|)
block|{
if|if
condition|(
operator|(
name|value
operator|instanceof
name|ExprNodeConstantDesc
operator|)
operator|&&
operator|(
operator|(
name|ExprNodeConstantDesc
operator|)
name|value
operator|)
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|PrimitiveTypeInfo
name|deriveMinArgumentCast
parameter_list|(
name|ExprNodeDesc
name|childExpr
parameter_list|,
name|TypeInfo
name|targetType
parameter_list|)
block|{
assert|assert
name|targetType
operator|instanceof
name|PrimitiveTypeInfo
operator|:
literal|"Not a primitive type"
operator|+
name|targetType
assert|;
name|PrimitiveTypeInfo
name|pti
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|targetType
decl_stmt|;
comment|// We only do the minimum cast for decimals. Other types are assumed safe; fix if needed.
comment|// We also don't do anything for non-primitive children (maybe we should assert).
if|if
condition|(
operator|(
name|pti
operator|.
name|getPrimitiveCategory
argument_list|()
operator|!=
name|PrimitiveCategory
operator|.
name|DECIMAL
operator|)
operator|||
operator|(
operator|!
operator|(
name|childExpr
operator|.
name|getTypeInfo
argument_list|()
operator|instanceof
name|PrimitiveTypeInfo
operator|)
operator|)
condition|)
block|{
return|return
name|pti
return|;
block|}
name|PrimitiveTypeInfo
name|childTi
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|childExpr
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
comment|// If the child is also decimal, no cast is needed (we hope - can target type be narrower?).
return|return
name|HiveDecimalUtils
operator|.
name|getDecimalTypeForPrimitiveCategory
argument_list|(
name|childTi
argument_list|)
return|;
block|}
comment|/**    * Build ExprNodeColumnDesc for the projections in the input operator from    * sartpos to endpos(both included). Operator must have an associated    * colExprMap.    *    * @param inputOp    *          Input Hive Operator    * @param startPos    *          starting position in the input operator schema; must be&gt;=0 and&lt;=    *          endPos    * @param endPos    *          end position in the input operator schema; must be&gt;=0.    * @return List of ExprNodeDesc    */
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|genExprNodeDesc
parameter_list|(
name|Operator
name|inputOp
parameter_list|,
name|int
name|startPos
parameter_list|,
name|int
name|endPos
parameter_list|,
name|boolean
name|addEmptyTabAlias
parameter_list|,
name|boolean
name|setColToNonVirtual
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|exprColLst
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|colInfoLst
init|=
name|inputOp
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
decl_stmt|;
name|String
name|tabAlias
decl_stmt|;
name|boolean
name|vc
decl_stmt|;
name|ColumnInfo
name|ci
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startPos
init|;
name|i
operator|<=
name|endPos
condition|;
name|i
operator|++
control|)
block|{
name|ci
operator|=
name|colInfoLst
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|tabAlias
operator|=
name|ci
operator|.
name|getTabAlias
argument_list|()
expr_stmt|;
if|if
condition|(
name|addEmptyTabAlias
condition|)
block|{
name|tabAlias
operator|=
literal|""
expr_stmt|;
block|}
name|vc
operator|=
name|ci
operator|.
name|getIsVirtualCol
argument_list|()
expr_stmt|;
if|if
condition|(
name|setColToNonVirtual
condition|)
block|{
name|vc
operator|=
literal|false
expr_stmt|;
block|}
name|exprColLst
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|ci
operator|.
name|getType
argument_list|()
argument_list|,
name|ci
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|tabAlias
argument_list|,
name|vc
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|exprColLst
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|flattenExprList
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|sourceList
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
name|sourceList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|source
range|:
name|sourceList
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|flattenExpr
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * A normal reduce operator's rowObjectInspector looks like a struct containing    *  nested key/value structs that contain the column values:    *  { key: { reducesinkkey0:int }, value: { _col0:int, _col1:int, .. } }    *    * While the rowObjectInspector looks the same for vectorized queries during    * compilation time, within the tasks at query execution the rowObjectInspector    * has changed to a flatter structure without nested key/value structs:    *  { 'key.reducesinkkey0':int, 'value._col0':int, 'value._col1':int, .. }    *    * Trying to fetch 'key.reducesinkkey0' by name from the list of flattened    * ObjectInspectors does not work because the '.' gets interpreted as a field member,    * even though it is a flattened list of column values.    * This workaround converts the column name referenced in the ExprNodeDesc    * from a nested field name (key.reducesinkkey0) to key_reducesinkkey0,    * simply by replacing '.' with '_'.    * @param source    * @return    */
specifier|public
specifier|static
name|ExprNodeDesc
name|flattenExpr
parameter_list|(
name|ExprNodeDesc
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
comment|// all children expression should be resolved
name|ExprNodeGenericFuncDesc
name|function
init|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|source
operator|.
name|clone
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|newChildren
init|=
name|flattenExprList
argument_list|(
name|function
operator|.
name|getChildren
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|newChild
range|:
name|newChildren
control|)
block|{
if|if
condition|(
name|newChild
operator|==
literal|null
condition|)
block|{
comment|// Could not resolve all of the function children, fail
return|return
literal|null
return|;
block|}
block|}
name|function
operator|.
name|setChildren
argument_list|(
name|newChildren
argument_list|)
expr_stmt|;
return|return
name|function
return|;
block|}
if|if
condition|(
name|source
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|ExprNodeColumnDesc
name|column
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|source
decl_stmt|;
comment|// Create a new ColumnInfo, replacing STRUCT.COLUMN with STRUCT_COLUMN
name|String
name|newColumn
init|=
name|column
operator|.
name|getColumn
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'_'
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|source
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
name|newColumn
argument_list|,
name|column
operator|.
name|getTabAlias
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|source
operator|instanceof
name|ExprNodeFieldDesc
condition|)
block|{
comment|// field expression should be resolved
name|ExprNodeFieldDesc
name|field
init|=
operator|(
name|ExprNodeFieldDesc
operator|)
name|source
operator|.
name|clone
argument_list|()
decl_stmt|;
name|ExprNodeDesc
name|fieldDesc
init|=
name|flattenExpr
argument_list|(
name|field
operator|.
name|getDesc
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldDesc
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|field
operator|.
name|setDesc
argument_list|(
name|fieldDesc
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
comment|// constant or null expr, just return
return|return
name|source
return|;
block|}
specifier|public
specifier|static
name|String
name|extractColName
parameter_list|(
name|ExprNodeDesc
name|root
parameter_list|)
block|{
if|if
condition|(
name|root
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
return|return
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|root
operator|)
operator|.
name|getColumn
argument_list|()
return|;
block|}
else|else
block|{
if|if
condition|(
name|root
operator|.
name|getChildren
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|column
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|d
range|:
name|root
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|String
name|candidate
init|=
name|extractColName
argument_list|(
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
name|column
operator|!=
literal|null
operator|&&
name|candidate
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|candidate
operator|!=
literal|null
condition|)
block|{
name|column
operator|=
name|candidate
expr_stmt|;
block|}
block|}
return|return
name|column
return|;
block|}
block|}
specifier|public
specifier|static
name|ExprNodeColumnDesc
name|getColumnExpr
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|)
block|{
while|while
condition|(
name|FunctionRegistry
operator|.
name|isOpCast
argument_list|(
name|expr
argument_list|)
condition|)
block|{
name|expr
operator|=
name|expr
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|expr
operator|instanceof
name|ExprNodeColumnDesc
operator|)
condition|?
operator|(
name|ExprNodeColumnDesc
operator|)
name|expr
else|:
literal|null
return|;
block|}
comment|// Find the constant origin of a certain column if it is originated from a constant
comment|// Otherwise, it returns the expression that originated the column
specifier|public
specifier|static
name|ExprNodeDesc
name|findConstantExprOrigin
parameter_list|(
name|String
name|dpCol
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|)
block|{
name|ExprNodeDesc
name|expr
init|=
name|op
operator|.
name|getColumnExprMap
argument_list|()
operator|.
name|get
argument_list|(
name|dpCol
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|foldedExpr
decl_stmt|;
comment|// If it is a function, we try to fold it
if|if
condition|(
name|expr
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
name|foldedExpr
operator|=
name|ConstantPropagateProcFactory
operator|.
name|foldExpr
argument_list|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|expr
argument_list|)
expr_stmt|;
if|if
condition|(
name|foldedExpr
operator|==
literal|null
condition|)
block|{
name|foldedExpr
operator|=
name|expr
expr_stmt|;
block|}
block|}
else|else
block|{
name|foldedExpr
operator|=
name|expr
expr_stmt|;
block|}
comment|// If it is a column reference, we will try to resolve it
if|if
condition|(
name|foldedExpr
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|originOp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOp
range|:
name|op
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
if|if
condition|(
name|parentOp
operator|.
name|getColumnExprMap
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|originOp
operator|=
name|parentOp
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|originOp
operator|!=
literal|null
condition|)
block|{
return|return
name|findConstantExprOrigin
argument_list|(
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|foldedExpr
operator|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|originOp
argument_list|)
return|;
block|}
block|}
comment|// Otherwise, we return the expression
return|return
name|foldedExpr
return|;
block|}
comment|/**    * Checks whether the keys of a parent operator are a prefix of the keys of a    * child operator.    * @param childKeys keys of the child operator    * @param parentKeys keys of the parent operator    * @param childOp child operator    * @param parentOp parent operator    * @return true if the keys are a prefix, false otherwise    * @throws SemanticException    */
specifier|public
specifier|static
name|boolean
name|checkPrefixKeys
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childKeys
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|parentKeys
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|childOp
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOp
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
name|checkPrefixKeys
argument_list|(
name|childKeys
argument_list|,
name|parentKeys
argument_list|,
name|childOp
argument_list|,
name|parentOp
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Checks whether the keys of a child operator are a prefix of the keys of a    * parent operator.    * @param childKeys keys of the child operator    * @param parentKeys keys of the parent operator    * @param childOp child operator    * @param parentOp parent operator    * @return true if the keys are a prefix, false otherwise    * @throws SemanticException    */
specifier|public
specifier|static
name|boolean
name|checkPrefixKeysUpstream
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childKeys
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|parentKeys
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|childOp
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOp
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
name|checkPrefixKeys
argument_list|(
name|childKeys
argument_list|,
name|parentKeys
argument_list|,
name|childOp
argument_list|,
name|parentOp
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|checkPrefixKeys
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childKeys
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|parentKeys
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|childOp
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOp
parameter_list|,
name|boolean
name|upstream
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|childKeys
operator|==
literal|null
operator|||
name|childKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|parentKeys
operator|!=
literal|null
operator|&&
operator|!
name|parentKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
name|parentKeys
operator|==
literal|null
operator|||
name|parentKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|size
decl_stmt|;
if|if
condition|(
name|upstream
condition|)
block|{
if|if
condition|(
name|childKeys
operator|.
name|size
argument_list|()
operator|>
name|parentKeys
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|size
operator|=
name|childKeys
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|parentKeys
operator|.
name|size
argument_list|()
operator|>
name|childKeys
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|size
operator|=
name|parentKeys
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|ExprNodeDesc
name|expr
init|=
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|childKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|childOp
argument_list|,
name|parentOp
argument_list|)
decl_stmt|;
if|if
condition|(
name|expr
operator|==
literal|null
condition|)
block|{
comment|// cKey is not present in parent
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|expr
operator|.
name|isSame
argument_list|(
name|parentKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
class|class
name|ColumnOrigin
block|{
specifier|public
name|ExprNodeColumnDesc
name|col
decl_stmt|;
specifier|public
name|Operator
argument_list|<
name|?
argument_list|>
name|op
decl_stmt|;
specifier|public
name|ColumnOrigin
parameter_list|(
name|ExprNodeColumnDesc
name|col
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|op
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|col
operator|=
name|col
expr_stmt|;
name|this
operator|.
name|op
operator|=
name|op
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|ExprNodeDesc
name|findParentExpr
parameter_list|(
name|ExprNodeColumnDesc
name|col
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|op
parameter_list|)
block|{
name|ExprNodeDesc
name|parentExpr
init|=
name|col
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|mapping
init|=
name|op
operator|.
name|getColumnExprMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
name|parentExpr
operator|=
name|mapping
operator|.
name|get
argument_list|(
name|col
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentExpr
operator|==
literal|null
operator|&&
name|op
operator|instanceof
name|ReduceSinkOperator
condition|)
block|{
return|return
name|col
return|;
block|}
block|}
return|return
name|parentExpr
return|;
block|}
specifier|public
specifier|static
name|ColumnOrigin
name|findColumnOrigin
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|op
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|==
literal|null
operator|||
name|op
operator|==
literal|null
condition|)
block|{
comment|// bad input
return|return
literal|null
return|;
block|}
name|ExprNodeColumnDesc
name|col
init|=
name|ExprNodeDescUtils
operator|.
name|getColumnExpr
argument_list|(
name|expr
argument_list|)
decl_stmt|;
if|if
condition|(
name|col
operator|==
literal|null
condition|)
block|{
comment|// not a column
return|return
literal|null
return|;
block|}
name|Operator
argument_list|<
name|?
argument_list|>
name|parentOp
init|=
literal|null
decl_stmt|;
name|int
name|numParents
init|=
name|op
operator|.
name|getNumParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|numParents
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|ColumnOrigin
argument_list|(
name|col
argument_list|,
name|op
argument_list|)
return|;
block|}
name|ExprNodeDesc
name|parentExpr
init|=
name|findParentExpr
argument_list|(
name|col
argument_list|,
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentExpr
operator|==
literal|null
condition|)
block|{
comment|// couldn't find proper parent column expr
return|return
literal|null
return|;
block|}
if|if
condition|(
name|numParents
operator|==
literal|1
condition|)
block|{
name|parentOp
operator|=
name|op
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Multiple parents - find the right one based on the table alias in the parentExpr
name|ExprNodeColumnDesc
name|parentCol
init|=
name|ExprNodeDescUtils
operator|.
name|getColumnExpr
argument_list|(
name|parentExpr
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentCol
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|currParent
range|:
name|op
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
name|RowSchema
name|schema
init|=
name|currParent
operator|.
name|getSchema
argument_list|()
decl_stmt|;
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
comment|// Happens in case of TezDummyStoreOperator
return|return
literal|null
return|;
block|}
if|if
condition|(
name|schema
operator|.
name|getTableNames
argument_list|()
operator|.
name|contains
argument_list|(
name|parentCol
operator|.
name|getTabAlias
argument_list|()
argument_list|)
condition|)
block|{
name|parentOp
operator|=
name|currParent
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|parentOp
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|findColumnOrigin
argument_list|(
name|parentExpr
argument_list|,
name|parentOp
argument_list|)
return|;
block|}
comment|// Null-safe isSame
specifier|public
specifier|static
name|boolean
name|isSame
parameter_list|(
name|ExprNodeDesc
name|desc1
parameter_list|,
name|ExprNodeDesc
name|desc2
parameter_list|)
block|{
return|return
operator|(
name|desc1
operator|==
name|desc2
operator|)
operator|||
operator|(
name|desc1
operator|!=
literal|null
operator|&&
name|desc1
operator|.
name|isSame
argument_list|(
name|desc2
argument_list|)
operator|)
return|;
block|}
comment|// Null-safe isSame for lists of ExprNodeDesc
specifier|public
specifier|static
name|boolean
name|isSame
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|first
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|second
parameter_list|)
block|{
if|if
condition|(
name|first
operator|==
name|second
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|first
operator|==
literal|null
operator|||
name|second
operator|==
literal|null
operator|||
name|first
operator|.
name|size
argument_list|()
operator|!=
name|second
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|first
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|first
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isSame
argument_list|(
name|second
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|// Given an expression this method figures out if the type for the expression is integer
comment|// i.e. INT, SHORT, TINYINT (BYTE) or LONG
specifier|public
specifier|static
name|boolean
name|isIntegerType
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|)
block|{
name|TypeInfo
name|typeInfo
init|=
name|expr
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeInfo
operator|.
name|getCategory
argument_list|()
operator|==
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
name|primitiveCategory
init|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
if|if
condition|(
name|primitiveCategory
operator|==
name|PrimitiveCategory
operator|.
name|INT
operator|||
name|primitiveCategory
operator|==
name|PrimitiveCategory
operator|.
name|SHORT
operator|||
name|primitiveCategory
operator|==
name|PrimitiveCategory
operator|.
name|BYTE
operator|||
name|primitiveCategory
operator|==
name|PrimitiveCategory
operator|.
name|LONG
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isConstantStruct
parameter_list|(
name|ExprNodeDesc
name|valueDesc
parameter_list|)
block|{
return|return
name|valueDesc
operator|instanceof
name|ExprNodeConstantDesc
operator|&&
name|valueDesc
operator|.
name|getTypeInfo
argument_list|()
operator|instanceof
name|StructTypeInfo
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isStructUDF
parameter_list|(
name|ExprNodeDesc
name|columnDesc
parameter_list|)
block|{
if|if
condition|(
name|columnDesc
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
name|ExprNodeGenericFuncDesc
name|exprNodeGenericFuncDesc
init|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|columnDesc
decl_stmt|;
return|return
operator|(
name|exprNodeGenericFuncDesc
operator|.
name|getGenericUDF
argument_list|()
operator|instanceof
name|GenericUDFStruct
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

