begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_class
class|class
name|RecordReaderImpl
implements|implements
name|RecordReader
block|{
specifier|private
specifier|final
name|FSDataInputStream
name|file
decl_stmt|;
specifier|private
specifier|final
name|long
name|firstRow
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|StripeInformation
argument_list|>
name|stripes
init|=
operator|new
name|ArrayList
argument_list|<
name|StripeInformation
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
decl_stmt|;
specifier|private
specifier|final
name|long
name|totalRowCount
decl_stmt|;
specifier|private
specifier|final
name|CompressionCodec
name|codec
decl_stmt|;
specifier|private
specifier|final
name|int
name|bufferSize
decl_stmt|;
specifier|private
specifier|final
name|boolean
index|[]
name|included
decl_stmt|;
specifier|private
specifier|final
name|long
name|rowIndexStride
decl_stmt|;
specifier|private
name|long
name|rowInStripe
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|currentStripe
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|rowBaseInStripe
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|rowCountInStripe
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
init|=
operator|new
name|HashMap
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|TreeReader
name|reader
decl_stmt|;
specifier|private
specifier|final
name|OrcProto
operator|.
name|RowIndex
index|[]
name|indexes
decl_stmt|;
name|RecordReaderImpl
parameter_list|(
name|Iterable
argument_list|<
name|StripeInformation
argument_list|>
name|stripes
parameter_list|,
name|FileSystem
name|fileSystem
parameter_list|,
name|Path
name|path
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|long
name|strideRate
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|file
operator|=
name|fileSystem
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|codec
operator|=
name|codec
expr_stmt|;
name|this
operator|.
name|bufferSize
operator|=
name|bufferSize
expr_stmt|;
name|this
operator|.
name|included
operator|=
name|included
expr_stmt|;
name|long
name|rows
init|=
literal|0
decl_stmt|;
name|long
name|skippedRows
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StripeInformation
name|stripe
range|:
name|stripes
control|)
block|{
name|long
name|stripeStart
init|=
name|stripe
operator|.
name|getOffset
argument_list|()
decl_stmt|;
if|if
condition|(
name|offset
operator|>
name|stripeStart
condition|)
block|{
name|skippedRows
operator|+=
name|stripe
operator|.
name|getNumberOfRows
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stripeStart
operator|<
name|offset
operator|+
name|length
condition|)
block|{
name|this
operator|.
name|stripes
operator|.
name|add
argument_list|(
name|stripe
argument_list|)
expr_stmt|;
name|rows
operator|+=
name|stripe
operator|.
name|getNumberOfRows
argument_list|()
expr_stmt|;
block|}
block|}
name|firstRow
operator|=
name|skippedRows
expr_stmt|;
name|totalRowCount
operator|=
name|rows
expr_stmt|;
name|reader
operator|=
name|createTreeReader
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
name|types
argument_list|,
name|included
argument_list|)
expr_stmt|;
name|indexes
operator|=
operator|new
name|OrcProto
operator|.
name|RowIndex
index|[
name|types
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|rowIndexStride
operator|=
name|strideRate
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|stripes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|readStripe
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|PositionProviderImpl
implements|implements
name|PositionProvider
block|{
specifier|private
specifier|final
name|OrcProto
operator|.
name|RowIndexEntry
name|entry
decl_stmt|;
specifier|private
name|int
name|index
init|=
literal|0
decl_stmt|;
name|PositionProviderImpl
parameter_list|(
name|OrcProto
operator|.
name|RowIndexEntry
name|entry
parameter_list|)
block|{
name|this
operator|.
name|entry
operator|=
name|entry
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getNext
parameter_list|()
block|{
return|return
name|entry
operator|.
name|getPositions
argument_list|(
name|index
operator|++
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|abstract
specifier|static
class|class
name|TreeReader
block|{
specifier|protected
specifier|final
name|Path
name|path
decl_stmt|;
specifier|protected
specifier|final
name|int
name|columnId
decl_stmt|;
specifier|private
name|BitFieldReader
name|present
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|valuePresent
init|=
literal|false
decl_stmt|;
name|TreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|columnId
operator|=
name|columnId
expr_stmt|;
block|}
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
operator|+
literal|" of "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|checkEncoding
argument_list|(
name|encoding
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
argument_list|)
expr_stmt|;
name|InStream
name|in
init|=
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|PRESENT
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
name|present
operator|=
literal|null
expr_stmt|;
name|valuePresent
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|present
operator|=
operator|new
name|BitFieldReader
argument_list|(
name|in
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Seek to the given position.      * @param index the indexes loaded from the file      * @throws IOException      */
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|present
operator|!=
literal|null
condition|)
block|{
name|present
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|long
name|countNonNulls
parameter_list|(
name|long
name|rows
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|present
operator|!=
literal|null
condition|)
block|{
name|long
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|c
init|=
literal|0
init|;
name|c
operator|<
name|rows
condition|;
operator|++
name|c
control|)
block|{
if|if
condition|(
name|present
operator|.
name|next
argument_list|()
operator|==
literal|1
condition|)
block|{
name|result
operator|+=
literal|1
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
else|else
block|{
return|return
name|rows
return|;
block|}
block|}
specifier|abstract
name|void
name|skipRows
parameter_list|(
name|long
name|rows
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|present
operator|!=
literal|null
condition|)
block|{
name|valuePresent
operator|=
name|present
operator|.
name|next
argument_list|()
operator|==
literal|1
expr_stmt|;
block|}
return|return
name|previous
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|BooleanTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|BitFieldReader
name|reader
init|=
literal|null
decl_stmt|;
name|BooleanTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|BitFieldReader
argument_list|(
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|BooleanWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|BooleanWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|BooleanWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|reader
operator|.
name|next
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ByteTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|RunLengthByteReader
name|reader
init|=
literal|null
decl_stmt|;
name|ByteTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|RunLengthByteReader
argument_list|(
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|ByteWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|ByteWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|ByteWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ShortTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|RunLengthIntegerReader
name|reader
init|=
literal|null
decl_stmt|;
name|ShortTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|reader
operator|=
operator|new
name|RunLengthIntegerReader
argument_list|(
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|ShortWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|ShortWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|ShortWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
operator|(
name|short
operator|)
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|IntTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|RunLengthIntegerReader
name|reader
init|=
literal|null
decl_stmt|;
name|IntTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|reader
operator|=
operator|new
name|RunLengthIntegerReader
argument_list|(
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|IntWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|IntWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|IntWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
operator|(
name|int
operator|)
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|LongTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|RunLengthIntegerReader
name|reader
init|=
literal|null
decl_stmt|;
name|LongTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|reader
operator|=
operator|new
name|RunLengthIntegerReader
argument_list|(
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|LongWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LongWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|LongWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|FloatTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|InStream
name|stream
decl_stmt|;
name|FloatTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|stream
operator|=
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|FloatWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|FloatWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|FloatWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|SerializationUtils
operator|.
name|readFloat
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
operator|++
name|i
control|)
block|{
name|SerializationUtils
operator|.
name|readFloat
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|DoubleTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|InStream
name|stream
decl_stmt|;
name|DoubleTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|stream
operator|=
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|DoubleWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|DoubleWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|DoubleWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|SerializationUtils
operator|.
name|readDouble
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|stream
operator|.
name|skip
argument_list|(
name|items
operator|*
literal|8
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|BinaryTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|InStream
name|stream
decl_stmt|;
specifier|private
name|RunLengthIntegerReader
name|lengths
decl_stmt|;
name|BinaryTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|stream
operator|=
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|lengths
operator|=
operator|new
name|RunLengthIntegerReader
argument_list|(
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|LENGTH
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
name|lengths
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|BytesWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|BytesWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|BytesWritable
operator|)
name|previous
expr_stmt|;
block|}
name|int
name|len
init|=
operator|(
name|int
operator|)
name|lengths
operator|.
name|next
argument_list|()
decl_stmt|;
name|result
operator|.
name|setSize
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|int
name|written
init|=
name|stream
operator|.
name|read
argument_list|(
name|result
operator|.
name|getBytes
argument_list|()
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|written
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Can't finish byte read from "
operator|+
name|stream
argument_list|)
throw|;
block|}
name|len
operator|-=
name|written
expr_stmt|;
name|offset
operator|+=
name|written
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|long
name|lengthToSkip
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
operator|++
name|i
control|)
block|{
name|lengthToSkip
operator|+=
name|lengths
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|stream
operator|.
name|skip
argument_list|(
name|lengthToSkip
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TimestampTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|RunLengthIntegerReader
name|data
decl_stmt|;
specifier|private
name|RunLengthIntegerReader
name|nanos
decl_stmt|;
name|TimestampTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|RunLengthIntegerReader
argument_list|(
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|nanos
operator|=
operator|new
name|RunLengthIntegerReader
argument_list|(
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|SECONDARY
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|data
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
name|nanos
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|Timestamp
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|Timestamp
operator|)
name|previous
expr_stmt|;
block|}
name|long
name|millis
init|=
operator|(
name|data
operator|.
name|next
argument_list|()
operator|+
name|WriterImpl
operator|.
name|BASE_TIMESTAMP
operator|)
operator|*
name|WriterImpl
operator|.
name|MILLIS_PER_SECOND
decl_stmt|;
name|int
name|newNanos
init|=
name|parseNanos
argument_list|(
name|nanos
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
comment|// fix the rounding when we divided by 1000.
if|if
condition|(
name|millis
operator|>=
literal|0
condition|)
block|{
name|millis
operator|+=
name|newNanos
operator|/
literal|1000000
expr_stmt|;
block|}
else|else
block|{
name|millis
operator|-=
name|newNanos
operator|/
literal|1000000
expr_stmt|;
block|}
name|result
operator|.
name|setTime
argument_list|(
name|millis
argument_list|)
expr_stmt|;
name|result
operator|.
name|setNanos
argument_list|(
name|newNanos
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|int
name|parseNanos
parameter_list|(
name|long
name|serialized
parameter_list|)
block|{
name|int
name|zeros
init|=
literal|7
operator|&
operator|(
name|int
operator|)
name|serialized
decl_stmt|;
name|int
name|result
init|=
operator|(
name|int
operator|)
name|serialized
operator|>>>
literal|3
decl_stmt|;
if|if
condition|(
name|zeros
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|zeros
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|*=
literal|10
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|data
operator|.
name|skip
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|nanos
operator|.
name|skip
argument_list|(
name|items
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|DateTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|RunLengthIntegerReader
name|reader
init|=
literal|null
decl_stmt|;
name|DateTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|reader
operator|=
operator|new
name|RunLengthIntegerReader
argument_list|(
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|Date
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|Date
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|setTime
argument_list|(
name|DateWritable
operator|.
name|daysToMillis
argument_list|(
operator|(
name|int
operator|)
name|reader
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|DecimalTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|InStream
name|valueStream
decl_stmt|;
specifier|private
name|RunLengthIntegerReader
name|scaleStream
decl_stmt|;
name|DecimalTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|valueStream
operator|=
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
argument_list|)
expr_stmt|;
name|scaleStream
operator|=
operator|new
name|RunLengthIntegerReader
argument_list|(
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|SECONDARY
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|valueStream
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
name|scaleStream
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
return|return
operator|new
name|HiveDecimal
argument_list|(
name|SerializationUtils
operator|.
name|readBigInteger
argument_list|(
name|valueStream
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|scaleStream
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
name|i
operator|++
control|)
block|{
name|SerializationUtils
operator|.
name|readBigInteger
argument_list|(
name|valueStream
argument_list|)
expr_stmt|;
block|}
name|scaleStream
operator|.
name|skip
argument_list|(
name|items
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|StringTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|DynamicByteArray
name|dictionaryBuffer
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|dictionarySize
decl_stmt|;
specifier|private
name|int
index|[]
name|dictionaryOffsets
decl_stmt|;
specifier|private
name|RunLengthIntegerReader
name|reader
decl_stmt|;
name|StringTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
expr_stmt|;
block|}
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DICTIONARY
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
operator|+
literal|" of "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
comment|// read the dictionary blob
name|dictionarySize
operator|=
name|encodings
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getDictionarySize
argument_list|()
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DICTIONARY_DATA
argument_list|)
decl_stmt|;
name|InStream
name|in
init|=
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|dictionaryBuffer
operator|=
operator|new
name|DynamicByteArray
argument_list|(
literal|64
argument_list|,
name|in
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|dictionaryBuffer
operator|.
name|readAll
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dictionaryBuffer
operator|=
literal|null
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// read the lengths
name|name
operator|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|LENGTH
argument_list|)
expr_stmt|;
name|in
operator|=
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|RunLengthIntegerReader
name|lenReader
init|=
operator|new
name|RunLengthIntegerReader
argument_list|(
name|in
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|dictionaryOffsets
operator|==
literal|null
operator|||
name|dictionaryOffsets
operator|.
name|length
operator|<
name|dictionarySize
operator|+
literal|1
condition|)
block|{
name|dictionaryOffsets
operator|=
operator|new
name|int
index|[
name|dictionarySize
operator|+
literal|1
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dictionarySize
condition|;
operator|++
name|i
control|)
block|{
name|dictionaryOffsets
index|[
name|i
index|]
operator|=
name|offset
expr_stmt|;
name|offset
operator|+=
operator|(
name|int
operator|)
name|lenReader
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|dictionaryOffsets
index|[
name|dictionarySize
index|]
operator|=
name|offset
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// set up the row reader
name|name
operator|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|RunLengthIntegerReader
argument_list|(
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|Text
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
name|int
name|entry
init|=
operator|(
name|int
operator|)
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|Text
operator|)
name|previous
expr_stmt|;
block|}
name|int
name|offset
init|=
name|dictionaryOffsets
index|[
name|entry
index|]
decl_stmt|;
name|int
name|length
decl_stmt|;
comment|// if it isn't the last entry, subtract the offsets otherwise use
comment|// the buffer length.
if|if
condition|(
name|entry
operator|<
name|dictionaryOffsets
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|length
operator|=
name|dictionaryOffsets
index|[
name|entry
operator|+
literal|1
index|]
operator|-
name|offset
expr_stmt|;
block|}
else|else
block|{
name|length
operator|=
name|dictionaryBuffer
operator|.
name|size
argument_list|()
operator|-
name|offset
expr_stmt|;
block|}
comment|// If the column is just empty strings, the size will be zero,
comment|// so the buffer will be null, in that case just return result
comment|// as it will default to empty
if|if
condition|(
name|dictionaryBuffer
operator|!=
literal|null
condition|)
block|{
name|dictionaryBuffer
operator|.
name|setText
argument_list|(
name|result
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|StructTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
specifier|final
name|TreeReader
index|[]
name|fields
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|fieldNames
decl_stmt|;
name|StructTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
expr_stmt|;
name|OrcProto
operator|.
name|Type
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
decl_stmt|;
name|int
name|fieldCount
init|=
name|type
operator|.
name|getFieldNamesCount
argument_list|()
decl_stmt|;
name|this
operator|.
name|fields
operator|=
operator|new
name|TreeReader
index|[
name|fieldCount
index|]
expr_stmt|;
name|this
operator|.
name|fieldNames
operator|=
operator|new
name|String
index|[
name|fieldCount
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
operator|++
name|i
control|)
block|{
name|int
name|subtype
init|=
name|type
operator|.
name|getSubtypes
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|included
operator|==
literal|null
operator|||
name|included
index|[
name|subtype
index|]
condition|)
block|{
name|this
operator|.
name|fields
index|[
name|i
index|]
operator|=
name|createTreeReader
argument_list|(
name|path
argument_list|,
name|subtype
argument_list|,
name|types
argument_list|,
name|included
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|fieldNames
index|[
name|i
index|]
operator|=
name|type
operator|.
name|getFieldNames
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeReader
name|kid
range|:
name|fields
control|)
block|{
if|if
condition|(
name|kid
operator|!=
literal|null
condition|)
block|{
name|kid
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|OrcStruct
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|OrcStruct
argument_list|(
name|fields
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|OrcStruct
operator|)
name|previous
expr_stmt|;
comment|// If the input format was initialized with a file with a
comment|// different number of fields, the number of fields needs to
comment|// be updated to the correct number
if|if
condition|(
name|result
operator|.
name|getNumFields
argument_list|()
operator|!=
name|fields
operator|.
name|length
condition|)
block|{
name|result
operator|.
name|setNumFields
argument_list|(
name|fields
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|fields
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|setFieldValue
argument_list|(
name|i
argument_list|,
name|fields
index|[
name|i
index|]
operator|.
name|next
argument_list|(
name|result
operator|.
name|getFieldValue
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeReader
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeReader
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|skipRows
argument_list|(
name|items
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|UnionTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
specifier|final
name|TreeReader
index|[]
name|fields
decl_stmt|;
specifier|private
name|RunLengthByteReader
name|tags
decl_stmt|;
name|UnionTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
expr_stmt|;
name|OrcProto
operator|.
name|Type
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
decl_stmt|;
name|int
name|fieldCount
init|=
name|type
operator|.
name|getSubtypesCount
argument_list|()
decl_stmt|;
name|this
operator|.
name|fields
operator|=
operator|new
name|TreeReader
index|[
name|fieldCount
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
operator|++
name|i
control|)
block|{
name|int
name|subtype
init|=
name|type
operator|.
name|getSubtypes
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|included
operator|==
literal|null
operator|||
name|included
index|[
name|subtype
index|]
condition|)
block|{
name|this
operator|.
name|fields
index|[
name|i
index|]
operator|=
name|createTreeReader
argument_list|(
name|path
argument_list|,
name|subtype
argument_list|,
name|types
argument_list|,
name|included
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|tags
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeReader
name|kid
range|:
name|fields
control|)
block|{
name|kid
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|OrcUnion
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|OrcUnion
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|OrcUnion
operator|)
name|previous
expr_stmt|;
block|}
name|byte
name|tag
init|=
name|tags
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|previousVal
init|=
name|result
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|tag
argument_list|,
name|fields
index|[
name|tag
index|]
operator|.
name|next
argument_list|(
name|tag
operator|==
name|result
operator|.
name|getTag
argument_list|()
condition|?
name|previousVal
else|:
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|tags
operator|=
operator|new
name|RunLengthByteReader
argument_list|(
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeReader
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|long
index|[]
name|counts
init|=
operator|new
name|long
index|[
name|fields
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
operator|++
name|i
control|)
block|{
name|counts
index|[
name|tags
operator|.
name|next
argument_list|()
index|]
operator|+=
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|counts
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|fields
index|[
name|i
index|]
operator|.
name|skipRows
argument_list|(
name|counts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|ListTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
specifier|final
name|TreeReader
name|elementReader
decl_stmt|;
specifier|private
name|RunLengthIntegerReader
name|lengths
decl_stmt|;
name|ListTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
expr_stmt|;
name|OrcProto
operator|.
name|Type
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
decl_stmt|;
name|elementReader
operator|=
name|createTreeReader
argument_list|(
name|path
argument_list|,
name|type
operator|.
name|getSubtypes
argument_list|(
literal|0
argument_list|)
argument_list|,
name|types
argument_list|,
name|included
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|lengths
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
name|elementReader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|previous
expr_stmt|;
block|}
name|int
name|prevLength
init|=
name|result
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|length
init|=
operator|(
name|int
operator|)
name|lengths
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// extend the list to the new length
for|for
control|(
name|int
name|i
init|=
name|prevLength
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// read the new elements into the array
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|elementReader
operator|.
name|next
argument_list|(
name|i
operator|<
name|prevLength
condition|?
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
else|:
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// remove any extra elements
for|for
control|(
name|int
name|i
init|=
name|prevLength
operator|-
literal|1
init|;
name|i
operator|>=
name|length
condition|;
operator|--
name|i
control|)
block|{
name|result
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|lengths
operator|=
operator|new
name|RunLengthIntegerReader
argument_list|(
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|LENGTH
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|elementReader
operator|!=
literal|null
condition|)
block|{
name|elementReader
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|long
name|childSkip
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
operator|++
name|i
control|)
block|{
name|childSkip
operator|+=
name|lengths
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|elementReader
operator|.
name|skipRows
argument_list|(
name|childSkip
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MapTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
specifier|final
name|TreeReader
name|keyReader
decl_stmt|;
specifier|private
specifier|final
name|TreeReader
name|valueReader
decl_stmt|;
specifier|private
name|RunLengthIntegerReader
name|lengths
decl_stmt|;
name|MapTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
expr_stmt|;
name|OrcProto
operator|.
name|Type
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
decl_stmt|;
name|int
name|keyColumn
init|=
name|type
operator|.
name|getSubtypes
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|valueColumn
init|=
name|type
operator|.
name|getSubtypes
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|included
operator|==
literal|null
operator|||
name|included
index|[
name|keyColumn
index|]
condition|)
block|{
name|keyReader
operator|=
name|createTreeReader
argument_list|(
name|path
argument_list|,
name|keyColumn
argument_list|,
name|types
argument_list|,
name|included
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyReader
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|included
operator|==
literal|null
operator|||
name|included
index|[
name|valueColumn
index|]
condition|)
block|{
name|valueReader
operator|=
name|createTreeReader
argument_list|(
name|path
argument_list|,
name|valueColumn
argument_list|,
name|types
argument_list|,
name|included
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|valueReader
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|lengths
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
name|keyReader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|valueReader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|previous
expr_stmt|;
block|}
comment|// for now just clear and create new objects
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|length
init|=
operator|(
name|int
operator|)
name|lengths
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// read the new elements into the array
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|keyReader
operator|.
name|next
argument_list|(
literal|null
argument_list|)
argument_list|,
name|valueReader
operator|.
name|next
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|lengths
operator|=
operator|new
name|RunLengthIntegerReader
argument_list|(
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|LENGTH
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyReader
operator|!=
literal|null
condition|)
block|{
name|keyReader
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|valueReader
operator|!=
literal|null
condition|)
block|{
name|valueReader
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|long
name|childSkip
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
operator|++
name|i
control|)
block|{
name|childSkip
operator|+=
name|lengths
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|keyReader
operator|.
name|skipRows
argument_list|(
name|childSkip
argument_list|)
expr_stmt|;
name|valueReader
operator|.
name|skipRows
argument_list|(
name|childSkip
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|TreeReader
name|createTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|)
throws|throws
name|IOException
block|{
name|OrcProto
operator|.
name|Type
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
operator|new
name|BooleanTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
return|;
case|case
name|BYTE
case|:
return|return
operator|new
name|ByteTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|new
name|DoubleTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
operator|new
name|FloatTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
return|;
case|case
name|SHORT
case|:
return|return
operator|new
name|ShortTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
return|;
case|case
name|INT
case|:
return|return
operator|new
name|IntTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
operator|new
name|LongTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
return|;
case|case
name|STRING
case|:
return|return
operator|new
name|StringTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
return|;
case|case
name|BINARY
case|:
return|return
operator|new
name|BinaryTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|TimestampTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
operator|new
name|DateTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
return|;
case|case
name|DECIMAL
case|:
return|return
operator|new
name|DecimalTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|)
return|;
case|case
name|STRUCT
case|:
return|return
operator|new
name|StructTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|types
argument_list|,
name|included
argument_list|)
return|;
case|case
name|LIST
case|:
return|return
operator|new
name|ListTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|types
argument_list|,
name|included
argument_list|)
return|;
case|case
name|MAP
case|:
return|return
operator|new
name|MapTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|types
argument_list|,
name|included
argument_list|)
return|;
case|case
name|UNION
case|:
return|return
operator|new
name|UnionTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|types
argument_list|,
name|included
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported type "
operator|+
name|type
operator|.
name|getKind
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|OrcProto
operator|.
name|StripeFooter
name|readStripeFooter
parameter_list|(
name|StripeInformation
name|stripe
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|offset
init|=
name|stripe
operator|.
name|getOffset
argument_list|()
operator|+
name|stripe
operator|.
name|getIndexLength
argument_list|()
operator|+
name|stripe
operator|.
name|getDataLength
argument_list|()
decl_stmt|;
name|int
name|tailLength
init|=
operator|(
name|int
operator|)
name|stripe
operator|.
name|getFooterLength
argument_list|()
decl_stmt|;
comment|// read the footer
name|ByteBuffer
name|tailBuf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|tailLength
argument_list|)
decl_stmt|;
name|file
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|file
operator|.
name|readFully
argument_list|(
name|tailBuf
operator|.
name|array
argument_list|()
argument_list|,
name|tailBuf
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|tailLength
argument_list|)
expr_stmt|;
return|return
name|OrcProto
operator|.
name|StripeFooter
operator|.
name|parseFrom
argument_list|(
name|InStream
operator|.
name|create
argument_list|(
literal|"footer"
argument_list|,
name|tailBuf
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|readStripe
parameter_list|()
throws|throws
name|IOException
block|{
name|StripeInformation
name|stripe
init|=
name|stripes
operator|.
name|get
argument_list|(
name|currentStripe
argument_list|)
decl_stmt|;
name|stripeFooter
operator|=
name|readStripeFooter
argument_list|(
name|stripe
argument_list|)
expr_stmt|;
name|long
name|offset
init|=
name|stripe
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|streams
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// if we aren't projecting columns, just read the whole stripe
if|if
condition|(
name|included
operator|==
literal|null
condition|)
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
call|(
name|int
call|)
argument_list|(
name|stripe
operator|.
name|getDataLength
argument_list|()
argument_list|)
index|]
decl_stmt|;
name|file
operator|.
name|seek
argument_list|(
name|offset
operator|+
name|stripe
operator|.
name|getIndexLength
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|readFully
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|sectionOffset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|OrcProto
operator|.
name|Stream
name|section
range|:
name|stripeFooter
operator|.
name|getStreamsList
argument_list|()
control|)
block|{
if|if
condition|(
name|StreamName
operator|.
name|getArea
argument_list|(
name|section
operator|.
name|getKind
argument_list|()
argument_list|)
operator|==
name|StreamName
operator|.
name|Area
operator|.
name|DATA
condition|)
block|{
name|int
name|sectionLength
init|=
operator|(
name|int
operator|)
name|section
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|ByteBuffer
name|sectionBuffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|,
name|sectionOffset
argument_list|,
name|sectionLength
argument_list|)
decl_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|section
operator|.
name|getColumn
argument_list|()
argument_list|,
name|section
operator|.
name|getKind
argument_list|()
argument_list|)
decl_stmt|;
name|streams
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|InStream
operator|.
name|create
argument_list|(
name|name
operator|.
name|toString
argument_list|()
argument_list|,
name|sectionBuffer
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
expr_stmt|;
name|sectionOffset
operator|+=
name|sectionLength
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|OrcProto
operator|.
name|Stream
argument_list|>
name|streamList
init|=
name|stripeFooter
operator|.
name|getStreamsList
argument_list|()
decl_stmt|;
comment|// the index of the current section
name|int
name|currentSection
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|currentSection
operator|<
name|streamList
operator|.
name|size
argument_list|()
operator|&&
name|StreamName
operator|.
name|getArea
argument_list|(
name|streamList
operator|.
name|get
argument_list|(
name|currentSection
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|)
operator|!=
name|StreamName
operator|.
name|Area
operator|.
name|DATA
condition|)
block|{
name|currentSection
operator|+=
literal|1
expr_stmt|;
block|}
comment|// byte position of the current section relative to the stripe start
name|long
name|sectionOffset
init|=
name|stripe
operator|.
name|getIndexLength
argument_list|()
decl_stmt|;
while|while
condition|(
name|currentSection
operator|<
name|streamList
operator|.
name|size
argument_list|()
condition|)
block|{
name|int
name|bytes
init|=
literal|0
decl_stmt|;
comment|// find the first section that shouldn't be read
name|int
name|excluded
init|=
name|currentSection
decl_stmt|;
while|while
condition|(
name|excluded
operator|<
name|streamList
operator|.
name|size
argument_list|()
operator|&&
name|included
index|[
name|streamList
operator|.
name|get
argument_list|(
name|excluded
argument_list|)
operator|.
name|getColumn
argument_list|()
index|]
condition|)
block|{
name|bytes
operator|+=
name|streamList
operator|.
name|get
argument_list|(
name|excluded
argument_list|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|excluded
operator|+=
literal|1
expr_stmt|;
block|}
comment|// actually read the bytes as a big chunk
if|if
condition|(
name|bytes
operator|!=
literal|0
condition|)
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|bytes
index|]
decl_stmt|;
name|file
operator|.
name|seek
argument_list|(
name|offset
operator|+
name|sectionOffset
argument_list|)
expr_stmt|;
name|file
operator|.
name|readFully
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|sectionOffset
operator|+=
name|bytes
expr_stmt|;
comment|// create the streams for the sections we just read
name|bytes
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|currentSection
operator|<
name|excluded
condition|)
block|{
name|OrcProto
operator|.
name|Stream
name|section
init|=
name|streamList
operator|.
name|get
argument_list|(
name|currentSection
argument_list|)
decl_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|section
operator|.
name|getColumn
argument_list|()
argument_list|,
name|section
operator|.
name|getKind
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|streams
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|InStream
operator|.
name|create
argument_list|(
name|name
operator|.
name|toString
argument_list|()
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|,
name|bytes
argument_list|,
operator|(
name|int
operator|)
name|section
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
expr_stmt|;
name|currentSection
operator|+=
literal|1
expr_stmt|;
name|bytes
operator|+=
name|section
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
block|}
comment|// skip forward until we get back to a section that we need
while|while
condition|(
name|currentSection
operator|<
name|streamList
operator|.
name|size
argument_list|()
operator|&&
operator|!
name|included
index|[
name|streamList
operator|.
name|get
argument_list|(
name|currentSection
argument_list|)
operator|.
name|getColumn
argument_list|()
index|]
condition|)
block|{
name|sectionOffset
operator|+=
name|streamList
operator|.
name|get
argument_list|(
name|currentSection
argument_list|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|currentSection
operator|+=
literal|1
expr_stmt|;
block|}
block|}
block|}
name|reader
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
argument_list|)
expr_stmt|;
name|rowInStripe
operator|=
literal|0
expr_stmt|;
name|rowCountInStripe
operator|=
name|stripe
operator|.
name|getNumberOfRows
argument_list|()
expr_stmt|;
name|rowBaseInStripe
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currentStripe
condition|;
operator|++
name|i
control|)
block|{
name|rowBaseInStripe
operator|+=
name|stripes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getNumberOfRows
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|indexes
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|rowInStripe
operator|<
name|rowCountInStripe
operator|||
name|currentStripe
operator|<
name|stripes
operator|.
name|size
argument_list|()
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rowInStripe
operator|>=
name|rowCountInStripe
condition|)
block|{
name|currentStripe
operator|+=
literal|1
expr_stmt|;
name|readStripe
argument_list|()
expr_stmt|;
block|}
name|rowInStripe
operator|+=
literal|1
expr_stmt|;
return|return
name|reader
operator|.
name|next
argument_list|(
name|previous
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getRowNumber
parameter_list|()
block|{
return|return
name|rowInStripe
operator|+
name|rowBaseInStripe
operator|+
name|firstRow
return|;
block|}
comment|/**    * Return the fraction of rows that have been read from the selected.    * section of the file    * @return fraction between 0.0 and 1.0 of rows consumed    */
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
operator|(
operator|(
name|float
operator|)
name|rowBaseInStripe
operator|+
name|rowInStripe
operator|)
operator|/
name|totalRowCount
return|;
block|}
specifier|private
name|int
name|findStripe
parameter_list|(
name|long
name|rowNumber
parameter_list|)
block|{
if|if
condition|(
name|rowNumber
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Seek to a negative row number "
operator|+
name|rowNumber
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|rowNumber
operator|<
name|firstRow
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Seek before reader range "
operator|+
name|rowNumber
argument_list|)
throw|;
block|}
name|rowNumber
operator|-=
name|firstRow
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stripes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|StripeInformation
name|stripe
init|=
name|stripes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|stripe
operator|.
name|getNumberOfRows
argument_list|()
operator|>
name|rowNumber
condition|)
block|{
return|return
name|i
return|;
block|}
name|rowNumber
operator|-=
name|stripe
operator|.
name|getNumberOfRows
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Seek after the end of reader range"
argument_list|)
throw|;
block|}
specifier|private
name|void
name|readRowIndex
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|offset
init|=
name|stripes
operator|.
name|get
argument_list|(
name|currentStripe
argument_list|)
operator|.
name|getOffset
argument_list|()
decl_stmt|;
for|for
control|(
name|OrcProto
operator|.
name|Stream
name|stream
range|:
name|stripeFooter
operator|.
name|getStreamsList
argument_list|()
control|)
block|{
if|if
condition|(
name|stream
operator|.
name|getKind
argument_list|()
operator|==
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|ROW_INDEX
condition|)
block|{
name|int
name|col
init|=
name|stream
operator|.
name|getColumn
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|included
operator|==
literal|null
operator|||
name|included
index|[
name|col
index|]
operator|)
operator|&&
name|indexes
index|[
name|col
index|]
operator|==
literal|null
condition|)
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|stream
operator|.
name|getLength
argument_list|()
index|]
decl_stmt|;
name|file
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|file
operator|.
name|readFully
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|indexes
index|[
name|col
index|]
operator|=
name|OrcProto
operator|.
name|RowIndex
operator|.
name|parseFrom
argument_list|(
name|InStream
operator|.
name|create
argument_list|(
literal|"index"
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|)
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|offset
operator|+=
name|stream
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|seekToRowEntry
parameter_list|(
name|int
name|rowEntry
parameter_list|)
throws|throws
name|IOException
block|{
name|PositionProvider
index|[]
name|index
init|=
operator|new
name|PositionProvider
index|[
name|indexes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|indexes
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|index
index|[
name|i
index|]
operator|=
operator|new
name|PositionProviderImpl
argument_list|(
name|indexes
index|[
name|i
index|]
operator|.
name|getEntry
argument_list|(
name|rowEntry
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seekToRow
parameter_list|(
name|long
name|rowNumber
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|rightStripe
init|=
name|findStripe
argument_list|(
name|rowNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|rightStripe
operator|!=
name|currentStripe
condition|)
block|{
name|currentStripe
operator|=
name|rightStripe
expr_stmt|;
name|readStripe
argument_list|()
expr_stmt|;
block|}
name|readRowIndex
argument_list|()
expr_stmt|;
name|rowInStripe
operator|=
name|rowNumber
operator|-
name|rowBaseInStripe
operator|-
name|firstRow
expr_stmt|;
if|if
condition|(
name|rowIndexStride
operator|!=
literal|0
condition|)
block|{
name|long
name|entry
init|=
name|rowInStripe
operator|/
name|rowIndexStride
decl_stmt|;
name|seekToRowEntry
argument_list|(
operator|(
name|int
operator|)
name|entry
argument_list|)
expr_stmt|;
name|reader
operator|.
name|skipRows
argument_list|(
name|rowInStripe
operator|-
name|entry
operator|*
name|rowIndexStride
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reader
operator|.
name|skipRows
argument_list|(
name|rowInStripe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

