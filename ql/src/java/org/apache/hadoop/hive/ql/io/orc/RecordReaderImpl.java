begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ORC_ZEROCOPY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|EncodedColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|cache
operator|.
name|LowLevelCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|orc
operator|.
name|OrcBatchKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|StringExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|PredicateLeaf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|SearchArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|SearchArgument
operator|.
name|TruthValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|HiveDecimalUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
operator|.
name|ByteBufferPoolShim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
operator|.
name|ZeroCopyReaderShim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ComparisonChain
import|;
end_import

begin_class
specifier|public
class|class
name|RecordReaderImpl
implements|implements
name|RecordReader
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RecordReaderImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|isLogTraceEnabled
init|=
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|FSDataInputStream
name|file
decl_stmt|;
specifier|private
specifier|final
name|long
name|firstRow
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|StripeInformation
argument_list|>
name|stripes
init|=
operator|new
name|ArrayList
argument_list|<
name|StripeInformation
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
decl_stmt|;
specifier|private
specifier|final
name|long
name|totalRowCount
decl_stmt|;
specifier|private
specifier|final
name|CompressionCodec
name|codec
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
decl_stmt|;
specifier|private
specifier|final
name|int
name|bufferSize
decl_stmt|;
specifier|private
specifier|final
name|boolean
index|[]
name|included
decl_stmt|;
specifier|private
specifier|final
name|long
name|rowIndexStride
decl_stmt|;
specifier|private
name|long
name|rowInStripe
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|currentStripe
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|long
name|rowBaseInStripe
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|rowCountInStripe
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
init|=
operator|new
name|HashMap
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BufferChunk
argument_list|>
name|bufferChunks
init|=
operator|new
name|ArrayList
argument_list|<
name|BufferChunk
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|TreeReader
name|reader
decl_stmt|;
specifier|private
specifier|final
name|OrcProto
operator|.
name|RowIndex
index|[]
name|indexes
decl_stmt|;
specifier|private
specifier|final
name|SearchArgument
name|sarg
decl_stmt|;
comment|// the leaf predicates for the sarg
specifier|private
specifier|final
name|List
argument_list|<
name|PredicateLeaf
argument_list|>
name|sargLeaves
decl_stmt|;
comment|// an array the same length as the sargLeaves that map them to column ids
specifier|private
specifier|final
name|int
index|[]
name|filterColumns
decl_stmt|;
comment|// an array about which row groups aren't skipped
specifier|private
name|boolean
index|[]
name|includedRowGroups
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|ByteBufferAllocatorPool
name|pool
init|=
operator|new
name|ByteBufferAllocatorPool
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ZeroCopyReaderShim
name|zcr
decl_stmt|;
comment|// this is an implementation copied from ElasticByteBufferPool in hadoop-2,
comment|// which lacks a clear()/clean() operation
specifier|public
specifier|final
specifier|static
class|class
name|ByteBufferAllocatorPool
implements|implements
name|ByteBufferPoolShim
block|{
specifier|private
specifier|static
specifier|final
class|class
name|Key
implements|implements
name|Comparable
argument_list|<
name|Key
argument_list|>
block|{
specifier|private
specifier|final
name|int
name|capacity
decl_stmt|;
specifier|private
specifier|final
name|long
name|insertionGeneration
decl_stmt|;
name|Key
parameter_list|(
name|int
name|capacity
parameter_list|,
name|long
name|insertionGeneration
parameter_list|)
block|{
name|this
operator|.
name|capacity
operator|=
name|capacity
expr_stmt|;
name|this
operator|.
name|insertionGeneration
operator|=
name|insertionGeneration
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Key
name|other
parameter_list|)
block|{
return|return
name|ComparisonChain
operator|.
name|start
argument_list|()
operator|.
name|compare
argument_list|(
name|capacity
argument_list|,
name|other
operator|.
name|capacity
argument_list|)
operator|.
name|compare
argument_list|(
name|insertionGeneration
argument_list|,
name|other
operator|.
name|insertionGeneration
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|rhs
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|Key
name|o
init|=
operator|(
name|Key
operator|)
name|rhs
decl_stmt|;
return|return
operator|(
name|compareTo
argument_list|(
name|o
argument_list|)
operator|==
literal|0
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|HashCodeBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|capacity
argument_list|)
operator|.
name|append
argument_list|(
name|insertionGeneration
argument_list|)
operator|.
name|toHashCode
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|Key
argument_list|,
name|ByteBuffer
argument_list|>
name|buffers
init|=
operator|new
name|TreeMap
argument_list|<
name|Key
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|Key
argument_list|,
name|ByteBuffer
argument_list|>
name|directBuffers
init|=
operator|new
name|TreeMap
argument_list|<
name|Key
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|long
name|currentGeneration
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|Key
argument_list|,
name|ByteBuffer
argument_list|>
name|getBufferTree
parameter_list|(
name|boolean
name|direct
parameter_list|)
block|{
return|return
name|direct
condition|?
name|directBuffers
else|:
name|buffers
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|buffers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|directBuffers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getBuffer
parameter_list|(
name|boolean
name|direct
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|TreeMap
argument_list|<
name|Key
argument_list|,
name|ByteBuffer
argument_list|>
name|tree
init|=
name|getBufferTree
argument_list|(
name|direct
argument_list|)
decl_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|,
name|ByteBuffer
argument_list|>
name|entry
init|=
name|tree
operator|.
name|ceilingEntry
argument_list|(
operator|new
name|Key
argument_list|(
name|length
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
name|direct
condition|?
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|length
argument_list|)
else|:
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|length
argument_list|)
return|;
block|}
name|tree
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|entry
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|putBuffer
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
name|TreeMap
argument_list|<
name|Key
argument_list|,
name|ByteBuffer
argument_list|>
name|tree
init|=
name|getBufferTree
argument_list|(
name|buffer
operator|.
name|isDirect
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Key
name|key
init|=
operator|new
name|Key
argument_list|(
name|buffer
operator|.
name|capacity
argument_list|()
argument_list|,
name|currentGeneration
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tree
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|tree
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Buffers are indexed by (capacity, generation).
comment|// If our key is not unique on the first try, we try again
block|}
block|}
block|}
comment|/**    * Given a list of column names, find the given column and return the index.    * @param columnNames the list of potential column names    * @param columnName the column name to look for    * @param rootColumn offset the result with the rootColumn    * @return the column number or -1 if the column wasn't found    */
specifier|static
name|int
name|findColumns
parameter_list|(
name|String
index|[]
name|columnNames
parameter_list|,
name|String
name|columnName
parameter_list|,
name|int
name|rootColumn
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnNames
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|columnName
operator|.
name|equals
argument_list|(
name|columnNames
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
name|i
operator|+
name|rootColumn
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Find the mapping from predicate leaves to columns.    * @param sargLeaves the search argument that we need to map    * @param columnNames the names of the columns    * @param rootColumn the offset of the top level row, which offsets the    *                   result    * @return an array mapping the sarg leaves to concrete column numbers    */
specifier|static
name|int
index|[]
name|mapSargColumns
parameter_list|(
name|List
argument_list|<
name|PredicateLeaf
argument_list|>
name|sargLeaves
parameter_list|,
name|String
index|[]
name|columnNames
parameter_list|,
name|int
name|rootColumn
parameter_list|)
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
name|sargLeaves
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|result
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|String
name|colName
init|=
name|sargLeaves
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getColumnName
argument_list|()
decl_stmt|;
name|result
index|[
name|i
index|]
operator|=
name|findColumns
argument_list|(
name|columnNames
argument_list|,
name|colName
argument_list|,
name|rootColumn
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|protected
name|RecordReaderImpl
parameter_list|(
name|List
argument_list|<
name|StripeInformation
argument_list|>
name|stripes
parameter_list|,
name|FileSystem
name|fileSystem
parameter_list|,
name|Path
name|path
parameter_list|,
name|Reader
operator|.
name|Options
name|options
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|long
name|strideRate
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|file
operator|=
name|fileSystem
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|codec
operator|=
name|codec
expr_stmt|;
name|this
operator|.
name|types
operator|=
name|types
expr_stmt|;
name|this
operator|.
name|bufferSize
operator|=
name|bufferSize
expr_stmt|;
name|this
operator|.
name|included
operator|=
name|options
operator|.
name|getInclude
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|sarg
operator|=
name|options
operator|.
name|getSearchArgument
argument_list|()
expr_stmt|;
if|if
condition|(
name|sarg
operator|!=
literal|null
condition|)
block|{
name|sargLeaves
operator|=
name|sarg
operator|.
name|getLeaves
argument_list|()
expr_stmt|;
name|filterColumns
operator|=
name|mapSargColumns
argument_list|(
name|sargLeaves
argument_list|,
name|options
operator|.
name|getColumnNames
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sargLeaves
operator|=
literal|null
expr_stmt|;
name|filterColumns
operator|=
literal|null
expr_stmt|;
block|}
name|long
name|rows
init|=
literal|0
decl_stmt|;
name|long
name|skippedRows
init|=
literal|0
decl_stmt|;
name|long
name|offset
init|=
name|options
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|long
name|maxOffset
init|=
name|options
operator|.
name|getMaxOffset
argument_list|()
decl_stmt|;
for|for
control|(
name|StripeInformation
name|stripe
range|:
name|stripes
control|)
block|{
name|long
name|stripeStart
init|=
name|stripe
operator|.
name|getOffset
argument_list|()
decl_stmt|;
if|if
condition|(
name|offset
operator|>
name|stripeStart
condition|)
block|{
name|skippedRows
operator|+=
name|stripe
operator|.
name|getNumberOfRows
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stripeStart
operator|<
name|maxOffset
condition|)
block|{
name|this
operator|.
name|stripes
operator|.
name|add
argument_list|(
name|stripe
argument_list|)
expr_stmt|;
name|rows
operator|+=
name|stripe
operator|.
name|getNumberOfRows
argument_list|()
expr_stmt|;
block|}
block|}
specifier|final
name|boolean
name|zeroCopy
init|=
operator|(
name|conf
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HIVE_ORC_ZEROCOPY
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|zeroCopy
operator|&&
operator|(
name|codec
operator|==
literal|null
operator|||
operator|(
operator|(
name|codec
operator|instanceof
name|DirectDecompressionCodec
operator|)
operator|&&
operator|(
operator|(
name|DirectDecompressionCodec
operator|)
name|codec
operator|)
operator|.
name|isAvailable
argument_list|()
operator|)
operator|)
condition|)
block|{
comment|/* codec is null or is available */
name|this
operator|.
name|zcr
operator|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getZeroCopyReader
argument_list|(
name|file
argument_list|,
name|pool
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|zcr
operator|=
literal|null
expr_stmt|;
block|}
name|firstRow
operator|=
name|skippedRows
expr_stmt|;
name|totalRowCount
operator|=
name|rows
expr_stmt|;
name|reader
operator|=
name|createTreeReader
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
name|types
argument_list|,
name|included
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|indexes
operator|=
operator|new
name|OrcProto
operator|.
name|RowIndex
index|[
name|types
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|rowIndexStride
operator|=
name|strideRate
expr_stmt|;
name|advanceToNextRow
argument_list|(
name|reader
argument_list|,
literal|0L
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|PositionProviderImpl
implements|implements
name|PositionProvider
block|{
specifier|private
specifier|final
name|OrcProto
operator|.
name|RowIndexEntry
name|entry
decl_stmt|;
specifier|private
name|int
name|index
init|=
literal|0
decl_stmt|;
name|PositionProviderImpl
parameter_list|(
name|OrcProto
operator|.
name|RowIndexEntry
name|entry
parameter_list|)
block|{
name|this
operator|.
name|entry
operator|=
name|entry
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getNext
parameter_list|()
block|{
return|return
name|entry
operator|.
name|getPositions
argument_list|(
name|index
operator|++
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|abstract
specifier|static
class|class
name|TreeReader
block|{
specifier|protected
specifier|final
name|Path
name|path
decl_stmt|;
specifier|protected
specifier|final
name|int
name|columnId
decl_stmt|;
specifier|protected
name|BitFieldReader
name|present
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|valuePresent
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|final
name|Configuration
name|conf
decl_stmt|;
name|TreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|columnId
operator|=
name|columnId
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
operator|+
literal|" of "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
name|IntegerReader
name|createIntegerReader
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
name|kind
parameter_list|,
name|InStream
name|in
parameter_list|,
name|boolean
name|signed
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|DIRECT_V2
case|:
case|case
name|DICTIONARY_V2
case|:
return|return
operator|new
name|RunLengthIntegerReaderV2
argument_list|(
name|in
argument_list|,
name|signed
argument_list|,
name|conf
argument_list|)
return|;
case|case
name|DIRECT
case|:
case|case
name|DICTIONARY
case|:
return|return
operator|new
name|RunLengthIntegerReader
argument_list|(
name|in
argument_list|,
name|signed
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown encoding "
operator|+
name|kind
argument_list|)
throw|;
block|}
block|}
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|checkEncoding
argument_list|(
name|encoding
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
argument_list|)
expr_stmt|;
name|InStream
name|in
init|=
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|PRESENT
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
name|present
operator|=
literal|null
expr_stmt|;
name|valuePresent
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|present
operator|=
operator|new
name|BitFieldReader
argument_list|(
name|in
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Seek to the given position.      * @param index the indexes loaded from the file      * @throws IOException      */
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|present
operator|!=
literal|null
condition|)
block|{
name|present
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|long
name|countNonNulls
parameter_list|(
name|long
name|rows
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|present
operator|!=
literal|null
condition|)
block|{
name|long
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|c
init|=
literal|0
init|;
name|c
operator|<
name|rows
condition|;
operator|++
name|c
control|)
block|{
if|if
condition|(
name|present
operator|.
name|next
argument_list|()
operator|==
literal|1
condition|)
block|{
name|result
operator|+=
literal|1
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
else|else
block|{
return|return
name|rows
return|;
block|}
block|}
specifier|abstract
name|void
name|skipRows
parameter_list|(
name|long
name|rows
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|present
operator|!=
literal|null
condition|)
block|{
name|valuePresent
operator|=
name|present
operator|.
name|next
argument_list|()
operator|==
literal|1
expr_stmt|;
block|}
return|return
name|previous
return|;
block|}
comment|/**      * Populates the isNull vector array in the previousVector object based on      * the present stream values. This function is called from all the child      * readers, and they all set the values based on isNull field value.      * @param previousVector The columnVector object whose isNull value is populated      * @param batchSize Size of the column vector      * @return      * @throws IOException      */
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|ColumnVector
name|result
init|=
operator|(
name|ColumnVector
operator|)
name|previousVector
decl_stmt|;
if|if
condition|(
name|present
operator|!=
literal|null
condition|)
block|{
comment|// Set noNulls and isNull vector of the ColumnVector based on
comment|// present stream
name|result
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|isNull
index|[
name|i
index|]
operator|=
operator|(
name|present
operator|.
name|next
argument_list|()
operator|!=
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|noNulls
operator|&&
name|result
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// There is not present stream, this means that all the values are
comment|// present.
name|result
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|previousVector
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|BooleanTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|BitFieldReader
name|reader
init|=
literal|null
decl_stmt|;
name|BooleanTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|BitFieldReader
argument_list|(
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|BooleanWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|BooleanWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|BooleanWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|reader
operator|.
name|next
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// Read value entries based on isNull entries
name|reader
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ByteTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|RunLengthByteReader
name|reader
init|=
literal|null
decl_stmt|;
name|ByteTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|RunLengthByteReader
argument_list|(
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|ByteWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|ByteWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|ByteWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// Read value entries based on isNull entries
name|reader
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ShortTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|IntegerReader
name|reader
init|=
literal|null
decl_stmt|;
name|ShortTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
operator|+
literal|" of "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|reader
operator|=
name|createIntegerReader
argument_list|(
name|encodings
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|ShortWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|ShortWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|ShortWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
operator|(
name|short
operator|)
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// Read value entries based on isNull entries
name|reader
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|IntTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|IntegerReader
name|reader
init|=
literal|null
decl_stmt|;
name|IntTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
operator|+
literal|" of "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|reader
operator|=
name|createIntegerReader
argument_list|(
name|encodings
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|IntWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|IntWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|IntWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
operator|(
name|int
operator|)
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// Read value entries based on isNull entries
name|reader
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|LongTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|IntegerReader
name|reader
init|=
literal|null
decl_stmt|;
name|LongTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
operator|+
literal|" of "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|reader
operator|=
name|createIntegerReader
argument_list|(
name|encodings
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|LongWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LongWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|LongWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// Read value entries based on isNull entries
name|reader
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|FloatTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|InStream
name|stream
decl_stmt|;
specifier|private
specifier|final
name|SerializationUtils
name|utils
decl_stmt|;
name|FloatTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|utils
operator|=
operator|new
name|SerializationUtils
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|stream
operator|=
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|FloatWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|FloatWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|FloatWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|utils
operator|.
name|readFloat
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|DoubleColumnVector
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|DoubleColumnVector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|DoubleColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// Read value entries based on isNull entries
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|utils
operator|.
name|readFloat
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the value is not present then set NaN
name|result
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
block|}
block|}
comment|// Set isRepeating flag
name|result
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|(
name|i
operator|<
name|batchSize
operator|-
literal|1
operator|&&
name|result
operator|.
name|isRepeating
operator|)
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|result
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|result
operator|.
name|vector
index|[
name|i
operator|+
literal|1
index|]
condition|)
block|{
name|result
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
operator|++
name|i
control|)
block|{
name|utils
operator|.
name|readFloat
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|DoubleTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|InStream
name|stream
decl_stmt|;
specifier|private
specifier|final
name|SerializationUtils
name|utils
decl_stmt|;
name|DoubleTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|utils
operator|=
operator|new
name|SerializationUtils
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|stream
operator|=
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|DoubleWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|DoubleWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|DoubleWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|utils
operator|.
name|readDouble
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|DoubleColumnVector
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|DoubleColumnVector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|DoubleColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// Read value entries based on isNull entries
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|utils
operator|.
name|readDouble
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the value is not present then set NaN
name|result
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
block|}
block|}
comment|// Set isRepeating flag
name|result
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|(
name|i
operator|<
name|batchSize
operator|-
literal|1
operator|&&
name|result
operator|.
name|isRepeating
operator|)
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|result
operator|.
name|vector
index|[
name|i
index|]
operator|!=
name|result
operator|.
name|vector
index|[
name|i
operator|+
literal|1
index|]
condition|)
block|{
name|result
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|stream
operator|.
name|skip
argument_list|(
name|items
operator|*
literal|8
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|BinaryTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|InStream
name|stream
decl_stmt|;
specifier|protected
name|IntegerReader
name|lengths
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|final
name|LongColumnVector
name|scratchlcv
decl_stmt|;
name|BinaryTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|scratchlcv
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
operator|+
literal|" of "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|stream
operator|=
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|lengths
operator|=
name|createIntegerReader
argument_list|(
name|encodings
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|LENGTH
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
name|lengths
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|BytesWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|BytesWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|BytesWritable
operator|)
name|previous
expr_stmt|;
block|}
name|int
name|len
init|=
operator|(
name|int
operator|)
name|lengths
operator|.
name|next
argument_list|()
decl_stmt|;
name|result
operator|.
name|setSize
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|int
name|written
init|=
name|stream
operator|.
name|read
argument_list|(
name|result
operator|.
name|getBytes
argument_list|()
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|written
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Can't finish byte read from "
operator|+
name|stream
argument_list|)
throw|;
block|}
name|len
operator|-=
name|written
expr_stmt|;
name|offset
operator|+=
name|written
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesColumnVector
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|BytesColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|BytesColumnVectorUtil
operator|.
name|readOrcByteArrays
argument_list|(
name|stream
argument_list|,
name|lengths
argument_list|,
name|scratchlcv
argument_list|,
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|long
name|lengthToSkip
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
operator|++
name|i
control|)
block|{
name|lengthToSkip
operator|+=
name|lengths
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|stream
operator|.
name|skip
argument_list|(
name|lengthToSkip
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TimestampTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|IntegerReader
name|data
init|=
literal|null
decl_stmt|;
specifier|private
name|IntegerReader
name|nanos
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|LongColumnVector
name|nanoVector
init|=
operator|new
name|LongColumnVector
argument_list|()
decl_stmt|;
name|TimestampTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
operator|+
literal|" of "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|data
operator|=
name|createIntegerReader
argument_list|(
name|encodings
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|nanos
operator|=
name|createIntegerReader
argument_list|(
name|encodings
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|SECONDARY
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|data
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
name|nanos
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|TimestampWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|TimestampWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|TimestampWritable
operator|)
name|previous
expr_stmt|;
block|}
name|Timestamp
name|ts
init|=
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|long
name|millis
init|=
operator|(
name|data
operator|.
name|next
argument_list|()
operator|+
name|WriterImpl
operator|.
name|BASE_TIMESTAMP
operator|)
operator|*
name|WriterImpl
operator|.
name|MILLIS_PER_SECOND
decl_stmt|;
name|int
name|newNanos
init|=
name|parseNanos
argument_list|(
name|nanos
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
comment|// fix the rounding when we divided by 1000.
if|if
condition|(
name|millis
operator|>=
literal|0
condition|)
block|{
name|millis
operator|+=
name|newNanos
operator|/
literal|1000000
expr_stmt|;
block|}
else|else
block|{
name|millis
operator|-=
name|newNanos
operator|/
literal|1000000
expr_stmt|;
block|}
name|ts
operator|.
name|setTime
argument_list|(
name|millis
argument_list|)
expr_stmt|;
name|ts
operator|.
name|setNanos
argument_list|(
name|newNanos
argument_list|)
expr_stmt|;
name|result
operator|.
name|set
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
name|result
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Object
name|obj
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|=
name|next
argument_list|(
name|obj
argument_list|)
expr_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|result
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TimestampWritable
name|writable
init|=
operator|(
name|TimestampWritable
operator|)
name|obj
decl_stmt|;
name|Timestamp
name|timestamp
init|=
name|writable
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|result
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|TimestampUtils
operator|.
name|getTimeNanoSec
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|int
name|parseNanos
parameter_list|(
name|long
name|serialized
parameter_list|)
block|{
name|int
name|zeros
init|=
literal|7
operator|&
operator|(
name|int
operator|)
name|serialized
decl_stmt|;
name|int
name|result
init|=
call|(
name|int
call|)
argument_list|(
name|serialized
operator|>>>
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|zeros
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|zeros
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|*=
literal|10
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|data
operator|.
name|skip
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|nanos
operator|.
name|skip
argument_list|(
name|items
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|DateTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|IntegerReader
name|reader
init|=
literal|null
decl_stmt|;
name|DateTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
operator|+
literal|" of "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|reader
operator|=
name|createIntegerReader
argument_list|(
name|encodings
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|DateWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|DateWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|DateWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
operator|(
name|int
operator|)
name|reader
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// Read value entries based on isNull entries
name|reader
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|DecimalTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|InStream
name|valueStream
decl_stmt|;
specifier|private
name|IntegerReader
name|scaleStream
init|=
literal|null
decl_stmt|;
specifier|private
name|LongColumnVector
name|scratchScaleVector
init|=
operator|new
name|LongColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|precision
decl_stmt|;
specifier|private
specifier|final
name|int
name|scale
decl_stmt|;
name|DecimalTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
operator|+
literal|" of "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|valueStream
operator|=
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
argument_list|)
expr_stmt|;
name|scaleStream
operator|=
name|createIntegerReader
argument_list|(
name|encodings
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|SECONDARY
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|valueStream
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
name|scaleStream
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|HiveDecimalWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|HiveDecimalWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|HiveDecimalWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
name|SerializationUtils
operator|.
name|readBigInteger
argument_list|(
name|valueStream
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|scaleStream
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|HiveDecimalUtils
operator|.
name|enforcePrecisionScale
argument_list|(
name|result
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|DecimalColumnVector
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|DecimalColumnVector
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Save the reference for isNull in the scratch vector
name|boolean
index|[]
name|scratchIsNull
init|=
name|scratchScaleVector
operator|.
name|isNull
decl_stmt|;
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// Read value entries based on isNull entries
if|if
condition|(
name|result
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|BigInteger
name|bInt
init|=
name|SerializationUtils
operator|.
name|readBigInteger
argument_list|(
name|valueStream
argument_list|)
decl_stmt|;
name|short
name|scaleInData
init|=
operator|(
name|short
operator|)
name|scaleStream
operator|.
name|next
argument_list|()
decl_stmt|;
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bInt
argument_list|,
name|scaleInData
argument_list|)
decl_stmt|;
name|dec
operator|=
name|HiveDecimalUtils
operator|.
name|enforcePrecisionScale
argument_list|(
name|dec
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|result
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|dec
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// result vector has isNull values set, use the same to read scale vector.
name|scratchScaleVector
operator|.
name|isNull
operator|=
name|result
operator|.
name|isNull
expr_stmt|;
name|scaleStream
operator|.
name|nextVector
argument_list|(
name|scratchScaleVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|BigInteger
name|bInt
init|=
name|SerializationUtils
operator|.
name|readBigInteger
argument_list|(
name|valueStream
argument_list|)
decl_stmt|;
name|short
name|scaleInData
init|=
operator|(
name|short
operator|)
name|scratchScaleVector
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bInt
argument_list|,
name|scaleInData
argument_list|)
decl_stmt|;
name|dec
operator|=
name|HiveDecimalUtils
operator|.
name|enforcePrecisionScale
argument_list|(
name|dec
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|result
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|dec
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Switch back the null vector.
name|scratchScaleVector
operator|.
name|isNull
operator|=
name|scratchIsNull
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
name|i
operator|++
control|)
block|{
name|SerializationUtils
operator|.
name|readBigInteger
argument_list|(
name|valueStream
argument_list|)
expr_stmt|;
block|}
name|scaleStream
operator|.
name|skip
argument_list|(
name|items
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A tree reader that will read string columns. At the start of the    * stripe, it creates an internal reader based on whether a direct or    * dictionary encoding was used.    */
specifier|private
specifier|static
class|class
name|StringTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|TreeReader
name|reader
decl_stmt|;
name|StringTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|checkEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
comment|// For each stripe, checks the encoding and initializes the appropriate
comment|// reader
switch|switch
condition|(
name|encodings
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|DIRECT
case|:
case|case
name|DIRECT_V2
case|:
name|reader
operator|=
operator|new
name|StringDirectTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
break|break;
case|case
name|DICTIONARY
case|:
case|case
name|DICTIONARY_V2
case|:
name|reader
operator|=
operator|new
name|StringDictionaryTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported encoding "
operator|+
name|encodings
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|)
throw|;
block|}
name|reader
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|reader
operator|.
name|next
argument_list|(
name|previous
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|reader
operator|.
name|nextVector
argument_list|(
name|previousVector
argument_list|,
name|batchSize
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skipRows
argument_list|(
name|items
argument_list|)
expr_stmt|;
block|}
block|}
comment|// This class collects together very similar methods for reading an ORC vector of byte arrays and
comment|// creating the BytesColumnVector.
comment|//
specifier|private
specifier|static
class|class
name|BytesColumnVectorUtil
block|{
specifier|private
specifier|static
name|byte
index|[]
name|commonReadByteArrays
parameter_list|(
name|InStream
name|stream
parameter_list|,
name|IntegerReader
name|lengths
parameter_list|,
name|LongColumnVector
name|scratchlcv
parameter_list|,
name|BytesColumnVector
name|result
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Read lengths
name|scratchlcv
operator|.
name|isNull
operator|=
name|result
operator|.
name|isNull
expr_stmt|;
comment|// Notice we are replacing the isNull vector here...
name|lengths
operator|.
name|nextVector
argument_list|(
name|scratchlcv
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|int
name|totalLength
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|totalLength
operator|+=
operator|(
name|int
operator|)
name|scratchlcv
operator|.
name|vector
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|totalLength
operator|=
call|(
name|int
call|)
argument_list|(
name|batchSize
operator|*
name|scratchlcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Read all the strings for this batch
name|byte
index|[]
name|allBytes
init|=
operator|new
name|byte
index|[
name|totalLength
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|len
init|=
name|totalLength
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|int
name|bytesRead
init|=
name|stream
operator|.
name|read
argument_list|(
name|allBytes
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytesRead
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Can't finish byte read from "
operator|+
name|stream
argument_list|)
throw|;
block|}
name|len
operator|-=
name|bytesRead
expr_stmt|;
name|offset
operator|+=
name|bytesRead
expr_stmt|;
block|}
return|return
name|allBytes
return|;
block|}
comment|// This method has the common code for reading in bytes into a BytesColumnVector.
specifier|public
specifier|static
name|void
name|readOrcByteArrays
parameter_list|(
name|InStream
name|stream
parameter_list|,
name|IntegerReader
name|lengths
parameter_list|,
name|LongColumnVector
name|scratchlcv
parameter_list|,
name|BytesColumnVector
name|result
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|allBytes
init|=
name|commonReadByteArrays
argument_list|(
name|stream
argument_list|,
name|lengths
argument_list|,
name|scratchlcv
argument_list|,
name|result
argument_list|,
name|batchSize
argument_list|)
decl_stmt|;
comment|// Too expensive to figure out 'repeating' by comparisons.
name|result
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|allBytes
argument_list|,
name|offset
argument_list|,
operator|(
name|int
operator|)
name|scratchlcv
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|scratchlcv
operator|.
name|vector
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|allBytes
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|allBytes
argument_list|,
name|offset
argument_list|,
operator|(
name|int
operator|)
name|scratchlcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|scratchlcv
operator|.
name|vector
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|allBytes
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * A reader for string columns that are direct encoded in the current    * stripe.    */
specifier|private
specifier|static
class|class
name|StringDirectTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|InStream
name|stream
decl_stmt|;
specifier|private
name|IntegerReader
name|lengths
decl_stmt|;
specifier|private
specifier|final
name|LongColumnVector
name|scratchlcv
decl_stmt|;
name|StringDirectTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|scratchlcv
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|&&
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
operator|+
literal|" of "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|stream
operator|=
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|lengths
operator|=
name|createIntegerReader
argument_list|(
name|encodings
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|LENGTH
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
name|lengths
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|Text
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|Text
operator|)
name|previous
expr_stmt|;
block|}
name|int
name|len
init|=
operator|(
name|int
operator|)
name|lengths
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|int
name|written
init|=
name|stream
operator|.
name|read
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|written
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Can't finish byte read from "
operator|+
name|stream
argument_list|)
throw|;
block|}
name|len
operator|-=
name|written
expr_stmt|;
name|offset
operator|+=
name|written
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesColumnVector
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|BytesColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|BytesColumnVectorUtil
operator|.
name|readOrcByteArrays
argument_list|(
name|stream
argument_list|,
name|lengths
argument_list|,
name|scratchlcv
argument_list|,
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|long
name|lengthToSkip
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
operator|++
name|i
control|)
block|{
name|lengthToSkip
operator|+=
name|lengths
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|stream
operator|.
name|skip
argument_list|(
name|lengthToSkip
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A reader for string columns that are dictionary encoded in the current    * stripe.    */
specifier|private
specifier|static
class|class
name|StringDictionaryTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|DynamicByteArray
name|dictionaryBuffer
decl_stmt|;
specifier|private
name|int
index|[]
name|dictionaryOffsets
decl_stmt|;
specifier|private
name|IntegerReader
name|reader
decl_stmt|;
specifier|private
name|byte
index|[]
name|dictionaryBufferInBytesCache
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|LongColumnVector
name|scratchlcv
decl_stmt|;
name|StringDictionaryTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|scratchlcv
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DICTIONARY
operator|&&
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DICTIONARY_V2
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
operator|+
literal|" of "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
comment|// read the dictionary blob
name|int
name|dictionarySize
init|=
name|encodings
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getDictionarySize
argument_list|()
decl_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DICTIONARY_DATA
argument_list|)
decl_stmt|;
name|InStream
name|in
init|=
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|dictionaryBuffer
operator|=
operator|new
name|DynamicByteArray
argument_list|(
literal|64
argument_list|,
name|in
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|dictionaryBuffer
operator|.
name|readAll
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// Since its start of strip invalidate the cache.
name|dictionaryBufferInBytesCache
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|dictionaryBuffer
operator|=
literal|null
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// read the lengths
name|name
operator|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|LENGTH
argument_list|)
expr_stmt|;
name|in
operator|=
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|IntegerReader
name|lenReader
init|=
name|createIntegerReader
argument_list|(
name|encodings
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|in
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|dictionaryOffsets
operator|==
literal|null
operator|||
name|dictionaryOffsets
operator|.
name|length
operator|<
name|dictionarySize
operator|+
literal|1
condition|)
block|{
name|dictionaryOffsets
operator|=
operator|new
name|int
index|[
name|dictionarySize
operator|+
literal|1
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dictionarySize
condition|;
operator|++
name|i
control|)
block|{
name|dictionaryOffsets
index|[
name|i
index|]
operator|=
name|offset
expr_stmt|;
name|offset
operator|+=
operator|(
name|int
operator|)
name|lenReader
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|dictionaryOffsets
index|[
name|dictionarySize
index|]
operator|=
name|offset
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// set up the row reader
name|name
operator|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|reader
operator|=
name|createIntegerReader
argument_list|(
name|encodings
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|Text
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
name|int
name|entry
init|=
operator|(
name|int
operator|)
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|Text
operator|)
name|previous
expr_stmt|;
block|}
name|int
name|offset
init|=
name|dictionaryOffsets
index|[
name|entry
index|]
decl_stmt|;
name|int
name|length
init|=
name|getDictionaryEntryLength
argument_list|(
name|entry
argument_list|,
name|offset
argument_list|)
decl_stmt|;
comment|// If the column is just empty strings, the size will be zero,
comment|// so the buffer will be null, in that case just return result
comment|// as it will default to empty
if|if
condition|(
name|dictionaryBuffer
operator|!=
literal|null
condition|)
block|{
name|dictionaryBuffer
operator|.
name|setText
argument_list|(
name|result
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesColumnVector
name|result
init|=
literal|null
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|,
name|length
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|BytesColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|dictionaryBuffer
operator|!=
literal|null
condition|)
block|{
comment|// Load dictionaryBuffer into cache.
if|if
condition|(
name|dictionaryBufferInBytesCache
operator|==
literal|null
condition|)
block|{
name|dictionaryBufferInBytesCache
operator|=
name|dictionaryBuffer
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|// Read string offsets
name|scratchlcv
operator|.
name|isNull
operator|=
name|result
operator|.
name|isNull
expr_stmt|;
name|reader
operator|.
name|nextVector
argument_list|(
name|scratchlcv
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isRepeating
condition|)
block|{
comment|// The vector has non-repeating strings. Iterate thru the batch
comment|// and set strings one by one
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|offset
operator|=
name|dictionaryOffsets
index|[
operator|(
name|int
operator|)
name|scratchlcv
operator|.
name|vector
index|[
name|i
index|]
index|]
expr_stmt|;
name|length
operator|=
name|getDictionaryEntryLength
argument_list|(
operator|(
name|int
operator|)
name|scratchlcv
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|dictionaryBufferInBytesCache
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the value is null then set offset and length to zero (null string)
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|dictionaryBufferInBytesCache
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// If the value is repeating then just set the first value in the
comment|// vector and set the isRepeating flag to true. No need to iterate thru and
comment|// set all the elements to the same value
name|offset
operator|=
name|dictionaryOffsets
index|[
operator|(
name|int
operator|)
name|scratchlcv
operator|.
name|vector
index|[
literal|0
index|]
index|]
expr_stmt|;
name|length
operator|=
name|getDictionaryEntryLength
argument_list|(
operator|(
name|int
operator|)
name|scratchlcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|result
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|dictionaryBufferInBytesCache
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|isRepeating
operator|=
name|scratchlcv
operator|.
name|isRepeating
expr_stmt|;
block|}
else|else
block|{
comment|// Entire stripe contains null strings.
name|result
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|result
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|result
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|result
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
literal|""
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
name|int
name|getDictionaryEntryLength
parameter_list|(
name|int
name|entry
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|int
name|length
init|=
literal|0
decl_stmt|;
comment|// if it isn't the last entry, subtract the offsets otherwise use
comment|// the buffer length.
if|if
condition|(
name|entry
operator|<
name|dictionaryOffsets
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|length
operator|=
name|dictionaryOffsets
index|[
name|entry
operator|+
literal|1
index|]
operator|-
name|offset
expr_stmt|;
block|}
else|else
block|{
name|length
operator|=
name|dictionaryBuffer
operator|.
name|size
argument_list|()
operator|-
name|offset
expr_stmt|;
block|}
return|return
name|length
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|CharTreeReader
extends|extends
name|StringTreeReader
block|{
name|int
name|maxLength
decl_stmt|;
name|CharTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|int
name|maxLength
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxLength
operator|=
name|maxLength
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|HiveCharWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|HiveCharWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|HiveCharWritable
operator|)
name|previous
expr_stmt|;
block|}
comment|// Use the string reader implementation to populate the internal Text value
name|Object
name|textVal
init|=
name|super
operator|.
name|next
argument_list|(
name|result
operator|.
name|getTextValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|textVal
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// result should now hold the value that was read in.
comment|// enforce char length
name|result
operator|.
name|enforceMaxLength
argument_list|(
name|maxLength
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get the vector of strings from StringTreeReader, then make a 2nd pass to
comment|// adjust down the length (right trim and truncate) if necessary.
name|BytesColumnVector
name|result
init|=
operator|(
name|BytesColumnVector
operator|)
name|super
operator|.
name|nextVector
argument_list|(
name|previousVector
argument_list|,
name|batchSize
argument_list|)
decl_stmt|;
name|int
name|adjustedDownLen
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|result
operator|.
name|noNulls
operator|||
operator|!
name|result
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|adjustedDownLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|result
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|result
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|result
operator|.
name|length
index|[
literal|0
index|]
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|adjustedDownLen
operator|<
name|result
operator|.
name|length
index|[
literal|0
index|]
condition|)
block|{
name|result
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|result
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|adjustedDownLen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|result
operator|.
name|noNulls
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|adjustedDownLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|result
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|length
index|[
name|i
index|]
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|adjustedDownLen
operator|<
name|result
operator|.
name|length
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|result
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|adjustedDownLen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|adjustedDownLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|result
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|length
index|[
name|i
index|]
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|adjustedDownLen
operator|<
name|result
operator|.
name|length
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|result
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|adjustedDownLen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|VarcharTreeReader
extends|extends
name|StringTreeReader
block|{
name|int
name|maxLength
decl_stmt|;
name|VarcharTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|int
name|maxLength
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxLength
operator|=
name|maxLength
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|HiveVarcharWritable
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|HiveVarcharWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|HiveVarcharWritable
operator|)
name|previous
expr_stmt|;
block|}
comment|// Use the string reader implementation to populate the internal Text value
name|Object
name|textVal
init|=
name|super
operator|.
name|next
argument_list|(
name|result
operator|.
name|getTextValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|textVal
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// result should now hold the value that was read in.
comment|// enforce varchar length
name|result
operator|.
name|enforceMaxLength
argument_list|(
name|maxLength
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get the vector of strings from StringTreeReader, then make a 2nd pass to
comment|// adjust down the length (truncate) if necessary.
name|BytesColumnVector
name|result
init|=
operator|(
name|BytesColumnVector
operator|)
name|super
operator|.
name|nextVector
argument_list|(
name|previousVector
argument_list|,
name|batchSize
argument_list|)
decl_stmt|;
name|int
name|adjustedDownLen
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|result
operator|.
name|noNulls
operator|||
operator|!
name|result
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|adjustedDownLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|result
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|result
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|result
operator|.
name|length
index|[
literal|0
index|]
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|adjustedDownLen
operator|<
name|result
operator|.
name|length
index|[
literal|0
index|]
condition|)
block|{
name|result
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|result
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|adjustedDownLen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|result
operator|.
name|noNulls
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|adjustedDownLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|result
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|length
index|[
name|i
index|]
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|adjustedDownLen
operator|<
name|result
operator|.
name|length
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|result
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|adjustedDownLen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|adjustedDownLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|result
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|length
index|[
name|i
index|]
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|adjustedDownLen
operator|<
name|result
operator|.
name|length
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|result
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|adjustedDownLen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|StructTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
specifier|final
name|TreeReader
index|[]
name|fields
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|fieldNames
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|TreeReader
argument_list|>
name|readers
decl_stmt|;
name|StructTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|OrcProto
operator|.
name|Type
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
decl_stmt|;
name|int
name|fieldCount
init|=
name|type
operator|.
name|getFieldNamesCount
argument_list|()
decl_stmt|;
name|this
operator|.
name|fields
operator|=
operator|new
name|TreeReader
index|[
name|fieldCount
index|]
expr_stmt|;
name|this
operator|.
name|fieldNames
operator|=
operator|new
name|String
index|[
name|fieldCount
index|]
expr_stmt|;
name|this
operator|.
name|readers
operator|=
operator|new
name|ArrayList
argument_list|<
name|TreeReader
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
operator|++
name|i
control|)
block|{
name|int
name|subtype
init|=
name|type
operator|.
name|getSubtypes
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|included
operator|==
literal|null
operator|||
name|included
index|[
name|subtype
index|]
condition|)
block|{
name|this
operator|.
name|fields
index|[
name|i
index|]
operator|=
name|createTreeReader
argument_list|(
name|path
argument_list|,
name|subtype
argument_list|,
name|types
argument_list|,
name|included
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|readers
operator|.
name|add
argument_list|(
name|this
operator|.
name|fields
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|fieldNames
index|[
name|i
index|]
operator|=
name|type
operator|.
name|getFieldNames
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeReader
name|kid
range|:
name|fields
control|)
block|{
if|if
condition|(
name|kid
operator|!=
literal|null
condition|)
block|{
name|kid
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|OrcStruct
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|OrcStruct
argument_list|(
name|fields
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|OrcStruct
operator|)
name|previous
expr_stmt|;
comment|// If the input format was initialized with a file with a
comment|// different number of fields, the number of fields needs to
comment|// be updated to the correct number
if|if
condition|(
name|result
operator|.
name|getNumFields
argument_list|()
operator|!=
name|fields
operator|.
name|length
condition|)
block|{
name|result
operator|.
name|setNumFields
argument_list|(
name|fields
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|fields
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|setFieldValue
argument_list|(
name|i
argument_list|,
name|fields
index|[
name|i
index|]
operator|.
name|next
argument_list|(
name|result
operator|.
name|getFieldValue
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * @return Total count of<b>non-null</b> field readers.      */
name|int
name|getReaderCount
parameter_list|()
block|{
return|return
name|readers
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * @param readerIndex Index among<b>non-null</b> readers. Not a column index!      * @return The readerIndex-s<b>non-null</b> field reader.      */
name|TreeReader
name|getColumnReader
parameter_list|(
name|int
name|readerIndex
parameter_list|)
block|{
return|return
name|readers
operator|.
name|get
argument_list|(
name|readerIndex
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|ColumnVector
index|[]
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|previousVector
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|ColumnVector
index|[
name|fields
operator|.
name|length
index|]
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|ColumnVector
index|[]
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read all the members of struct as column vectors
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fields
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|result
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|result
index|[
name|i
index|]
operator|=
operator|(
name|ColumnVector
operator|)
name|fields
index|[
name|i
index|]
operator|.
name|nextVector
argument_list|(
literal|null
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fields
index|[
name|i
index|]
operator|.
name|nextVector
argument_list|(
name|result
index|[
name|i
index|]
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeReader
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeReader
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|skipRows
argument_list|(
name|items
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|UnionTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
specifier|final
name|TreeReader
index|[]
name|fields
decl_stmt|;
specifier|private
name|RunLengthByteReader
name|tags
decl_stmt|;
name|UnionTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|OrcProto
operator|.
name|Type
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
decl_stmt|;
name|int
name|fieldCount
init|=
name|type
operator|.
name|getSubtypesCount
argument_list|()
decl_stmt|;
name|this
operator|.
name|fields
operator|=
operator|new
name|TreeReader
index|[
name|fieldCount
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
operator|++
name|i
control|)
block|{
name|int
name|subtype
init|=
name|type
operator|.
name|getSubtypes
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|included
operator|==
literal|null
operator|||
name|included
index|[
name|subtype
index|]
condition|)
block|{
name|this
operator|.
name|fields
index|[
name|i
index|]
operator|=
name|createTreeReader
argument_list|(
name|path
argument_list|,
name|subtype
argument_list|,
name|types
argument_list|,
name|included
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|tags
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeReader
name|kid
range|:
name|fields
control|)
block|{
name|kid
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|OrcUnion
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|OrcUnion
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|OrcUnion
operator|)
name|previous
expr_stmt|;
block|}
name|byte
name|tag
init|=
name|tags
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|previousVal
init|=
name|result
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|tag
argument_list|,
name|fields
index|[
name|tag
index|]
operator|.
name|next
argument_list|(
name|tag
operator|==
name|result
operator|.
name|getTag
argument_list|()
condition|?
name|previousVal
else|:
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|Object
name|nextVector
parameter_list|(
name|Object
name|previousVector
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"NextVector is not supported operation for Union type"
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|tags
operator|=
operator|new
name|RunLengthByteReader
argument_list|(
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeReader
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|long
index|[]
name|counts
init|=
operator|new
name|long
index|[
name|fields
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
operator|++
name|i
control|)
block|{
name|counts
index|[
name|tags
operator|.
name|next
argument_list|()
index|]
operator|+=
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|counts
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|fields
index|[
name|i
index|]
operator|.
name|skipRows
argument_list|(
name|counts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|ListTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
specifier|final
name|TreeReader
name|elementReader
decl_stmt|;
specifier|private
name|IntegerReader
name|lengths
init|=
literal|null
decl_stmt|;
name|ListTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|OrcProto
operator|.
name|Type
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
decl_stmt|;
name|elementReader
operator|=
name|createTreeReader
argument_list|(
name|path
argument_list|,
name|type
operator|.
name|getSubtypes
argument_list|(
literal|0
argument_list|)
argument_list|,
name|types
argument_list|,
name|included
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|lengths
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
name|elementReader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|previous
expr_stmt|;
block|}
name|int
name|prevLength
init|=
name|result
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|length
init|=
operator|(
name|int
operator|)
name|lengths
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// extend the list to the new length
for|for
control|(
name|int
name|i
init|=
name|prevLength
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// read the new elements into the array
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|elementReader
operator|.
name|next
argument_list|(
name|i
operator|<
name|prevLength
condition|?
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
else|:
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// remove any extra elements
for|for
control|(
name|int
name|i
init|=
name|prevLength
operator|-
literal|1
init|;
name|i
operator|>=
name|length
condition|;
operator|--
name|i
control|)
block|{
name|result
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|Object
name|nextVector
parameter_list|(
name|Object
name|previous
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"NextVector is not supported operation for List type"
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
operator|+
literal|" of "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|lengths
operator|=
name|createIntegerReader
argument_list|(
name|encodings
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|LENGTH
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|elementReader
operator|!=
literal|null
condition|)
block|{
name|elementReader
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|long
name|childSkip
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
operator|++
name|i
control|)
block|{
name|childSkip
operator|+=
name|lengths
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|elementReader
operator|.
name|skipRows
argument_list|(
name|childSkip
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MapTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
specifier|final
name|TreeReader
name|keyReader
decl_stmt|;
specifier|private
specifier|final
name|TreeReader
name|valueReader
decl_stmt|;
specifier|private
name|IntegerReader
name|lengths
init|=
literal|null
decl_stmt|;
name|MapTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|OrcProto
operator|.
name|Type
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
decl_stmt|;
name|int
name|keyColumn
init|=
name|type
operator|.
name|getSubtypes
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|valueColumn
init|=
name|type
operator|.
name|getSubtypes
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|included
operator|==
literal|null
operator|||
name|included
index|[
name|keyColumn
index|]
condition|)
block|{
name|keyReader
operator|=
name|createTreeReader
argument_list|(
name|path
argument_list|,
name|keyColumn
argument_list|,
name|types
argument_list|,
name|included
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyReader
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|included
operator|==
literal|null
operator|||
name|included
index|[
name|valueColumn
index|]
condition|)
block|{
name|valueReader
operator|=
name|createTreeReader
argument_list|(
name|path
argument_list|,
name|valueColumn
argument_list|,
name|types
argument_list|,
name|included
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|valueReader
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|lengths
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
name|keyReader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|valueReader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|next
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|valuePresent
condition|)
block|{
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|previous
expr_stmt|;
block|}
comment|// for now just clear and create new objects
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|length
init|=
operator|(
name|int
operator|)
name|lengths
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// read the new elements into the array
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|keyReader
operator|.
name|next
argument_list|(
literal|null
argument_list|)
argument_list|,
name|valueReader
operator|.
name|next
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|Object
name|nextVector
parameter_list|(
name|Object
name|previous
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"NextVector is not supported operation for Map type"
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
operator|+
literal|" of "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
name|lengths
operator|=
name|createIntegerReader
argument_list|(
name|encodings
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|LENGTH
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyReader
operator|!=
literal|null
condition|)
block|{
name|keyReader
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|valueReader
operator|!=
literal|null
condition|)
block|{
name|valueReader
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|encodings
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|long
name|childSkip
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
operator|++
name|i
control|)
block|{
name|childSkip
operator|+=
name|lengths
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|keyReader
operator|.
name|skipRows
argument_list|(
name|childSkip
argument_list|)
expr_stmt|;
name|valueReader
operator|.
name|skipRows
argument_list|(
name|childSkip
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|TreeReader
name|createTreeReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|columnId
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|OrcProto
operator|.
name|Type
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
operator|new
name|BooleanTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
return|;
case|case
name|BYTE
case|:
return|return
operator|new
name|ByteTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|new
name|DoubleTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
operator|new
name|FloatTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
return|;
case|case
name|SHORT
case|:
return|return
operator|new
name|ShortTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
return|;
case|case
name|INT
case|:
return|return
operator|new
name|IntTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
operator|new
name|LongTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
return|;
case|case
name|STRING
case|:
return|return
operator|new
name|StringTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
return|;
case|case
name|CHAR
case|:
if|if
condition|(
operator|!
name|type
operator|.
name|hasMaximumLength
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ORC char type has no length specified"
argument_list|)
throw|;
block|}
return|return
operator|new
name|CharTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|type
operator|.
name|getMaximumLength
argument_list|()
argument_list|,
name|conf
argument_list|)
return|;
case|case
name|VARCHAR
case|:
if|if
condition|(
operator|!
name|type
operator|.
name|hasMaximumLength
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ORC varchar type has no length specified"
argument_list|)
throw|;
block|}
return|return
operator|new
name|VarcharTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|type
operator|.
name|getMaximumLength
argument_list|()
argument_list|,
name|conf
argument_list|)
return|;
case|case
name|BINARY
case|:
return|return
operator|new
name|BinaryTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|TimestampTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
operator|new
name|DateTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|conf
argument_list|)
return|;
case|case
name|DECIMAL
case|:
name|int
name|precision
init|=
name|type
operator|.
name|hasPrecision
argument_list|()
condition|?
name|type
operator|.
name|getPrecision
argument_list|()
else|:
name|HiveDecimal
operator|.
name|SYSTEM_DEFAULT_PRECISION
decl_stmt|;
name|int
name|scale
init|=
name|type
operator|.
name|hasScale
argument_list|()
condition|?
name|type
operator|.
name|getScale
argument_list|()
else|:
name|HiveDecimal
operator|.
name|SYSTEM_DEFAULT_SCALE
decl_stmt|;
return|return
operator|new
name|DecimalTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|,
name|conf
argument_list|)
return|;
case|case
name|STRUCT
case|:
return|return
operator|new
name|StructTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|types
argument_list|,
name|included
argument_list|,
name|conf
argument_list|)
return|;
case|case
name|LIST
case|:
return|return
operator|new
name|ListTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|types
argument_list|,
name|included
argument_list|,
name|conf
argument_list|)
return|;
case|case
name|MAP
case|:
return|return
operator|new
name|MapTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|types
argument_list|,
name|included
argument_list|,
name|conf
argument_list|)
return|;
case|case
name|UNION
case|:
return|return
operator|new
name|UnionTreeReader
argument_list|(
name|path
argument_list|,
name|columnId
argument_list|,
name|types
argument_list|,
name|included
argument_list|,
name|conf
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported type "
operator|+
name|type
operator|.
name|getKind
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|OrcProto
operator|.
name|StripeFooter
name|readStripeFooter
parameter_list|(
name|StripeInformation
name|stripe
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|offset
init|=
name|stripe
operator|.
name|getOffset
argument_list|()
operator|+
name|stripe
operator|.
name|getIndexLength
argument_list|()
operator|+
name|stripe
operator|.
name|getDataLength
argument_list|()
decl_stmt|;
name|int
name|tailLength
init|=
operator|(
name|int
operator|)
name|stripe
operator|.
name|getFooterLength
argument_list|()
decl_stmt|;
comment|// read the footer
name|ByteBuffer
name|tailBuf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|tailLength
argument_list|)
decl_stmt|;
name|file
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|file
operator|.
name|readFully
argument_list|(
name|tailBuf
operator|.
name|array
argument_list|()
argument_list|,
name|tailBuf
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|tailLength
argument_list|)
expr_stmt|;
return|return
name|OrcProto
operator|.
name|StripeFooter
operator|.
name|parseFrom
argument_list|(
name|InStream
operator|.
name|create
argument_list|(
literal|"footer"
argument_list|,
operator|new
name|ByteBuffer
index|[]
block|{
name|tailBuf
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
name|tailLength
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
return|;
block|}
specifier|static
enum|enum
name|Location
block|{
name|BEFORE
block|,
name|MIN
block|,
name|MIDDLE
block|,
name|MAX
block|,
name|AFTER
block|}
comment|/**    * Given a point and min and max, determine if the point is before, at the    * min, in the middle, at the max, or after the range.    * @param point the point to test    * @param min the minimum point    * @param max the maximum point    * @param<T> the type of the comparision    * @return the location of the point    */
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Location
name|compareToRange
parameter_list|(
name|Comparable
argument_list|<
name|T
argument_list|>
name|point
parameter_list|,
name|T
name|min
parameter_list|,
name|T
name|max
parameter_list|)
block|{
name|int
name|minCompare
init|=
name|point
operator|.
name|compareTo
argument_list|(
name|min
argument_list|)
decl_stmt|;
if|if
condition|(
name|minCompare
operator|<
literal|0
condition|)
block|{
return|return
name|Location
operator|.
name|BEFORE
return|;
block|}
elseif|else
if|if
condition|(
name|minCompare
operator|==
literal|0
condition|)
block|{
return|return
name|Location
operator|.
name|MIN
return|;
block|}
name|int
name|maxCompare
init|=
name|point
operator|.
name|compareTo
argument_list|(
name|max
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxCompare
operator|>
literal|0
condition|)
block|{
return|return
name|Location
operator|.
name|AFTER
return|;
block|}
elseif|else
if|if
condition|(
name|maxCompare
operator|==
literal|0
condition|)
block|{
return|return
name|Location
operator|.
name|MAX
return|;
block|}
return|return
name|Location
operator|.
name|MIDDLE
return|;
block|}
comment|/**    * Get the maximum value out of an index entry.    * @param index    *          the index entry    * @return the object for the maximum value or null if there isn't one    */
specifier|static
name|Object
name|getMax
parameter_list|(
name|ColumnStatistics
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|instanceof
name|IntegerColumnStatistics
condition|)
block|{
return|return
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|index
operator|)
operator|.
name|getMaximum
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|instanceof
name|DoubleColumnStatistics
condition|)
block|{
return|return
operator|(
operator|(
name|DoubleColumnStatistics
operator|)
name|index
operator|)
operator|.
name|getMaximum
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|instanceof
name|StringColumnStatistics
condition|)
block|{
return|return
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|index
operator|)
operator|.
name|getMaximum
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|instanceof
name|DateColumnStatistics
condition|)
block|{
return|return
operator|(
operator|(
name|DateColumnStatistics
operator|)
name|index
operator|)
operator|.
name|getMaximum
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|instanceof
name|DecimalColumnStatistics
condition|)
block|{
return|return
operator|(
operator|(
name|DecimalColumnStatistics
operator|)
name|index
operator|)
operator|.
name|getMaximum
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|instanceof
name|TimestampColumnStatistics
condition|)
block|{
return|return
operator|(
operator|(
name|TimestampColumnStatistics
operator|)
name|index
operator|)
operator|.
name|getMaximum
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|instanceof
name|BooleanColumnStatistics
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|BooleanColumnStatistics
operator|)
name|index
operator|)
operator|.
name|getTrueCount
argument_list|()
operator|!=
literal|0
condition|)
block|{
return|return
literal|"true"
return|;
block|}
else|else
block|{
return|return
literal|"false"
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Get the minimum value out of an index entry.    * @param index    *          the index entry    * @return the object for the minimum value or null if there isn't one    */
specifier|static
name|Object
name|getMin
parameter_list|(
name|ColumnStatistics
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|instanceof
name|IntegerColumnStatistics
condition|)
block|{
return|return
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|index
operator|)
operator|.
name|getMinimum
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|instanceof
name|DoubleColumnStatistics
condition|)
block|{
return|return
operator|(
operator|(
name|DoubleColumnStatistics
operator|)
name|index
operator|)
operator|.
name|getMinimum
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|instanceof
name|StringColumnStatistics
condition|)
block|{
return|return
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|index
operator|)
operator|.
name|getMinimum
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|instanceof
name|DateColumnStatistics
condition|)
block|{
return|return
operator|(
operator|(
name|DateColumnStatistics
operator|)
name|index
operator|)
operator|.
name|getMinimum
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|instanceof
name|DecimalColumnStatistics
condition|)
block|{
return|return
operator|(
operator|(
name|DecimalColumnStatistics
operator|)
name|index
operator|)
operator|.
name|getMinimum
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|instanceof
name|TimestampColumnStatistics
condition|)
block|{
return|return
operator|(
operator|(
name|TimestampColumnStatistics
operator|)
name|index
operator|)
operator|.
name|getMinimum
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|instanceof
name|BooleanColumnStatistics
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|BooleanColumnStatistics
operator|)
name|index
operator|)
operator|.
name|getFalseCount
argument_list|()
operator|!=
literal|0
condition|)
block|{
return|return
literal|"false"
return|;
block|}
else|else
block|{
return|return
literal|"true"
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Evaluate a predicate with respect to the statistics from the column    * that is referenced in the predicate.    * @param index the statistics for the column mentioned in the predicate    * @param predicate the leaf predicate we need to evaluation    * @return the set of truth values that may be returned for the given    *   predicate.    */
specifier|static
name|TruthValue
name|evaluatePredicate
parameter_list|(
name|OrcProto
operator|.
name|ColumnStatistics
name|index
parameter_list|,
name|PredicateLeaf
name|predicate
parameter_list|)
block|{
name|ColumnStatistics
name|cs
init|=
name|ColumnStatisticsImpl
operator|.
name|deserialize
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|Object
name|minValue
init|=
name|getMin
argument_list|(
name|cs
argument_list|)
decl_stmt|;
name|Object
name|maxValue
init|=
name|getMax
argument_list|(
name|cs
argument_list|)
decl_stmt|;
return|return
name|evaluatePredicateRange
argument_list|(
name|predicate
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|)
return|;
block|}
specifier|static
name|TruthValue
name|evaluatePredicateRange
parameter_list|(
name|PredicateLeaf
name|predicate
parameter_list|,
name|Object
name|min
parameter_list|,
name|Object
name|max
parameter_list|)
block|{
comment|// if we didn't have any values, everything must have been null
if|if
condition|(
name|min
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|predicate
operator|.
name|getOperator
argument_list|()
operator|==
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|IS_NULL
condition|)
block|{
return|return
name|TruthValue
operator|.
name|YES
return|;
block|}
else|else
block|{
return|return
name|TruthValue
operator|.
name|NULL
return|;
block|}
block|}
name|Location
name|loc
decl_stmt|;
try|try
block|{
comment|// Predicate object and stats object can be one of the following base types
comment|// LONG, DOUBLE, STRING, DATE, DECIMAL
comment|// Out of these DATE is not implicitly convertible to other types and rest
comment|// others are implicitly convertible. In cases where DATE cannot be converted
comment|// the stats object is converted to text and comparison is performed.
comment|// When STRINGs are converted to other base types, NumberFormat exception
comment|// can occur in which case TruthValue.YES_NO_NULL value is returned
name|Object
name|baseObj
init|=
name|predicate
operator|.
name|getLiteral
argument_list|(
name|PredicateLeaf
operator|.
name|FileFormat
operator|.
name|ORC
argument_list|)
decl_stmt|;
name|Object
name|minValue
init|=
name|getConvertedStatsObj
argument_list|(
name|min
argument_list|,
name|baseObj
argument_list|)
decl_stmt|;
name|Object
name|maxValue
init|=
name|getConvertedStatsObj
argument_list|(
name|max
argument_list|,
name|baseObj
argument_list|)
decl_stmt|;
name|Object
name|predObj
init|=
name|getBaseObjectForComparison
argument_list|(
name|baseObj
argument_list|,
name|minValue
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|predicate
operator|.
name|getOperator
argument_list|()
condition|)
block|{
case|case
name|NULL_SAFE_EQUALS
case|:
name|loc
operator|=
name|compareToRange
argument_list|(
operator|(
name|Comparable
operator|)
name|predObj
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|loc
operator|==
name|Location
operator|.
name|BEFORE
operator|||
name|loc
operator|==
name|Location
operator|.
name|AFTER
condition|)
block|{
return|return
name|TruthValue
operator|.
name|NO
return|;
block|}
else|else
block|{
return|return
name|TruthValue
operator|.
name|YES_NO
return|;
block|}
case|case
name|EQUALS
case|:
name|loc
operator|=
name|compareToRange
argument_list|(
operator|(
name|Comparable
operator|)
name|predObj
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|minValue
operator|.
name|equals
argument_list|(
name|maxValue
argument_list|)
operator|&&
name|loc
operator|==
name|Location
operator|.
name|MIN
condition|)
block|{
return|return
name|TruthValue
operator|.
name|YES_NULL
return|;
block|}
elseif|else
if|if
condition|(
name|loc
operator|==
name|Location
operator|.
name|BEFORE
operator|||
name|loc
operator|==
name|Location
operator|.
name|AFTER
condition|)
block|{
return|return
name|TruthValue
operator|.
name|NO_NULL
return|;
block|}
else|else
block|{
return|return
name|TruthValue
operator|.
name|YES_NO_NULL
return|;
block|}
case|case
name|LESS_THAN
case|:
name|loc
operator|=
name|compareToRange
argument_list|(
operator|(
name|Comparable
operator|)
name|predObj
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|loc
operator|==
name|Location
operator|.
name|AFTER
condition|)
block|{
return|return
name|TruthValue
operator|.
name|YES_NULL
return|;
block|}
elseif|else
if|if
condition|(
name|loc
operator|==
name|Location
operator|.
name|BEFORE
operator|||
name|loc
operator|==
name|Location
operator|.
name|MIN
condition|)
block|{
return|return
name|TruthValue
operator|.
name|NO_NULL
return|;
block|}
else|else
block|{
return|return
name|TruthValue
operator|.
name|YES_NO_NULL
return|;
block|}
case|case
name|LESS_THAN_EQUALS
case|:
name|loc
operator|=
name|compareToRange
argument_list|(
operator|(
name|Comparable
operator|)
name|predObj
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|loc
operator|==
name|Location
operator|.
name|AFTER
operator|||
name|loc
operator|==
name|Location
operator|.
name|MAX
condition|)
block|{
return|return
name|TruthValue
operator|.
name|YES_NULL
return|;
block|}
elseif|else
if|if
condition|(
name|loc
operator|==
name|Location
operator|.
name|BEFORE
condition|)
block|{
return|return
name|TruthValue
operator|.
name|NO_NULL
return|;
block|}
else|else
block|{
return|return
name|TruthValue
operator|.
name|YES_NO_NULL
return|;
block|}
case|case
name|IN
case|:
if|if
condition|(
name|minValue
operator|.
name|equals
argument_list|(
name|maxValue
argument_list|)
condition|)
block|{
comment|// for a single value, look through to see if that value is in the
comment|// set
for|for
control|(
name|Object
name|arg
range|:
name|predicate
operator|.
name|getLiteralList
argument_list|(
name|PredicateLeaf
operator|.
name|FileFormat
operator|.
name|ORC
argument_list|)
control|)
block|{
name|predObj
operator|=
name|getBaseObjectForComparison
argument_list|(
name|arg
argument_list|,
name|minValue
argument_list|)
expr_stmt|;
name|loc
operator|=
name|compareToRange
argument_list|(
operator|(
name|Comparable
operator|)
name|predObj
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|loc
operator|==
name|Location
operator|.
name|MIN
condition|)
block|{
return|return
name|TruthValue
operator|.
name|YES_NULL
return|;
block|}
block|}
return|return
name|TruthValue
operator|.
name|NO_NULL
return|;
block|}
else|else
block|{
comment|// are all of the values outside of the range?
for|for
control|(
name|Object
name|arg
range|:
name|predicate
operator|.
name|getLiteralList
argument_list|(
name|PredicateLeaf
operator|.
name|FileFormat
operator|.
name|ORC
argument_list|)
control|)
block|{
name|predObj
operator|=
name|getBaseObjectForComparison
argument_list|(
name|arg
argument_list|,
name|minValue
argument_list|)
expr_stmt|;
name|loc
operator|=
name|compareToRange
argument_list|(
operator|(
name|Comparable
operator|)
name|predObj
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|loc
operator|==
name|Location
operator|.
name|MIN
operator|||
name|loc
operator|==
name|Location
operator|.
name|MIDDLE
operator|||
name|loc
operator|==
name|Location
operator|.
name|MAX
condition|)
block|{
return|return
name|TruthValue
operator|.
name|YES_NO_NULL
return|;
block|}
block|}
return|return
name|TruthValue
operator|.
name|NO_NULL
return|;
block|}
case|case
name|BETWEEN
case|:
name|List
argument_list|<
name|Object
argument_list|>
name|args
init|=
name|predicate
operator|.
name|getLiteralList
argument_list|(
name|PredicateLeaf
operator|.
name|FileFormat
operator|.
name|ORC
argument_list|)
decl_stmt|;
name|Object
name|predObj1
init|=
name|getBaseObjectForComparison
argument_list|(
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|minValue
argument_list|)
decl_stmt|;
name|loc
operator|=
name|compareToRange
argument_list|(
operator|(
name|Comparable
operator|)
name|predObj1
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|loc
operator|==
name|Location
operator|.
name|BEFORE
operator|||
name|loc
operator|==
name|Location
operator|.
name|MIN
condition|)
block|{
name|Object
name|predObj2
init|=
name|getBaseObjectForComparison
argument_list|(
name|args
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|minValue
argument_list|)
decl_stmt|;
name|Location
name|loc2
init|=
name|compareToRange
argument_list|(
operator|(
name|Comparable
operator|)
name|predObj2
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc2
operator|==
name|Location
operator|.
name|AFTER
operator|||
name|loc2
operator|==
name|Location
operator|.
name|MAX
condition|)
block|{
return|return
name|TruthValue
operator|.
name|YES_NULL
return|;
block|}
elseif|else
if|if
condition|(
name|loc2
operator|==
name|Location
operator|.
name|BEFORE
condition|)
block|{
return|return
name|TruthValue
operator|.
name|NO_NULL
return|;
block|}
else|else
block|{
return|return
name|TruthValue
operator|.
name|YES_NO_NULL
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|loc
operator|==
name|Location
operator|.
name|AFTER
condition|)
block|{
return|return
name|TruthValue
operator|.
name|NO_NULL
return|;
block|}
else|else
block|{
return|return
name|TruthValue
operator|.
name|YES_NO_NULL
return|;
block|}
case|case
name|IS_NULL
case|:
return|return
name|TruthValue
operator|.
name|YES_NO
return|;
default|default:
return|return
name|TruthValue
operator|.
name|YES_NO_NULL
return|;
block|}
comment|// in case failed conversion, return the default YES_NO_NULL truth value
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
return|return
name|TruthValue
operator|.
name|YES_NO_NULL
return|;
block|}
block|}
specifier|private
specifier|static
name|Object
name|getBaseObjectForComparison
parameter_list|(
name|Object
name|predObj
parameter_list|,
name|Object
name|statsObj
parameter_list|)
block|{
if|if
condition|(
name|predObj
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|predObj
operator|instanceof
name|ExprNodeConstantDesc
condition|)
block|{
name|predObj
operator|=
operator|(
operator|(
name|ExprNodeConstantDesc
operator|)
name|predObj
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
comment|// following are implicitly convertible
if|if
condition|(
name|statsObj
operator|instanceof
name|Long
condition|)
block|{
if|if
condition|(
name|predObj
operator|instanceof
name|Double
condition|)
block|{
return|return
operator|(
operator|(
name|Double
operator|)
name|predObj
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|predObj
operator|instanceof
name|HiveDecimal
condition|)
block|{
return|return
operator|(
operator|(
name|HiveDecimal
operator|)
name|predObj
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|predObj
operator|instanceof
name|String
condition|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|predObj
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|statsObj
operator|instanceof
name|Double
condition|)
block|{
if|if
condition|(
name|predObj
operator|instanceof
name|Long
condition|)
block|{
return|return
operator|(
operator|(
name|Long
operator|)
name|predObj
operator|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|predObj
operator|instanceof
name|HiveDecimal
condition|)
block|{
return|return
operator|(
operator|(
name|HiveDecimal
operator|)
name|predObj
operator|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|predObj
operator|instanceof
name|String
condition|)
block|{
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|predObj
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|statsObj
operator|instanceof
name|String
condition|)
block|{
return|return
name|predObj
operator|.
name|toString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|statsObj
operator|instanceof
name|HiveDecimal
condition|)
block|{
if|if
condition|(
name|predObj
operator|instanceof
name|Long
condition|)
block|{
return|return
name|HiveDecimal
operator|.
name|create
argument_list|(
operator|(
operator|(
name|Long
operator|)
name|predObj
operator|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|predObj
operator|instanceof
name|Double
condition|)
block|{
return|return
name|HiveDecimal
operator|.
name|create
argument_list|(
name|predObj
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|predObj
operator|instanceof
name|String
condition|)
block|{
return|return
name|HiveDecimal
operator|.
name|create
argument_list|(
name|predObj
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|predObj
operator|instanceof
name|BigDecimal
condition|)
block|{
return|return
name|HiveDecimal
operator|.
name|create
argument_list|(
operator|(
name|BigDecimal
operator|)
name|predObj
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|predObj
return|;
block|}
specifier|private
specifier|static
name|Object
name|getConvertedStatsObj
parameter_list|(
name|Object
name|statsObj
parameter_list|,
name|Object
name|predObj
parameter_list|)
block|{
comment|// converting between date and other types is not implicit, so convert to
comment|// text for comparison
if|if
condition|(
operator|(
operator|(
name|predObj
operator|instanceof
name|DateWritable
operator|)
operator|&&
operator|!
operator|(
name|statsObj
operator|instanceof
name|DateWritable
operator|)
operator|)
operator|||
operator|(
operator|(
name|statsObj
operator|instanceof
name|DateWritable
operator|)
operator|&&
operator|!
operator|(
name|predObj
operator|instanceof
name|DateWritable
operator|)
operator|)
condition|)
block|{
return|return
name|StringUtils
operator|.
name|stripEnd
argument_list|(
name|statsObj
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
if|if
condition|(
name|statsObj
operator|instanceof
name|String
condition|)
block|{
return|return
name|StringUtils
operator|.
name|stripEnd
argument_list|(
name|statsObj
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
return|return
name|statsObj
return|;
block|}
comment|/**    * Pick the row groups that we need to load from the current stripe.    * @return an array with a boolean for each row group or null if all of the    *    row groups must be read.    * @throws IOException    */
specifier|protected
name|boolean
index|[]
name|pickRowGroups
parameter_list|()
throws|throws
name|IOException
block|{
comment|// if we don't have a sarg or indexes, we read everything
if|if
condition|(
name|sarg
operator|==
literal|null
operator|||
name|rowIndexStride
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|readRowIndex
argument_list|(
name|currentStripe
argument_list|)
expr_stmt|;
name|long
name|rowsInStripe
init|=
name|stripes
operator|.
name|get
argument_list|(
name|currentStripe
argument_list|)
operator|.
name|getNumberOfRows
argument_list|()
decl_stmt|;
name|int
name|groupsInStripe
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|rowsInStripe
operator|+
name|rowIndexStride
operator|-
literal|1
operator|)
operator|/
name|rowIndexStride
argument_list|)
decl_stmt|;
name|boolean
index|[]
name|result
init|=
operator|new
name|boolean
index|[
name|groupsInStripe
index|]
decl_stmt|;
name|TruthValue
index|[]
name|leafValues
init|=
operator|new
name|TruthValue
index|[
name|sargLeaves
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|rowGroup
init|=
literal|0
init|;
name|rowGroup
operator|<
name|result
operator|.
name|length
condition|;
operator|++
name|rowGroup
control|)
block|{
for|for
control|(
name|int
name|pred
init|=
literal|0
init|;
name|pred
operator|<
name|leafValues
operator|.
name|length
condition|;
operator|++
name|pred
control|)
block|{
if|if
condition|(
name|filterColumns
index|[
name|pred
index|]
operator|!=
operator|-
literal|1
condition|)
block|{
name|OrcProto
operator|.
name|ColumnStatistics
name|stats
init|=
name|indexes
index|[
name|filterColumns
index|[
name|pred
index|]
index|]
operator|.
name|getEntry
argument_list|(
name|rowGroup
argument_list|)
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|leafValues
index|[
name|pred
index|]
operator|=
name|evaluatePredicate
argument_list|(
name|stats
argument_list|,
name|sargLeaves
operator|.
name|get
argument_list|(
name|pred
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stats = "
operator|+
name|stats
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting "
operator|+
name|sargLeaves
operator|.
name|get
argument_list|(
name|pred
argument_list|)
operator|+
literal|" to "
operator|+
name|leafValues
index|[
name|pred
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// the column is a virtual column
name|leafValues
index|[
name|pred
index|]
operator|=
name|TruthValue
operator|.
name|YES_NO_NULL
expr_stmt|;
block|}
block|}
name|result
index|[
name|rowGroup
index|]
operator|=
name|sarg
operator|.
name|evaluate
argument_list|(
name|leafValues
argument_list|)
operator|.
name|isNeeded
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Row group "
operator|+
operator|(
name|rowIndexStride
operator|*
name|rowGroup
operator|)
operator|+
literal|" to "
operator|+
operator|(
name|rowIndexStride
operator|*
operator|(
name|rowGroup
operator|+
literal|1
operator|)
operator|-
literal|1
operator|)
operator|+
literal|" is "
operator|+
operator|(
name|result
index|[
name|rowGroup
index|]
condition|?
literal|""
else|:
literal|"not "
operator|)
operator|+
literal|"included."
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if we found something to skip, use the array. otherwise, return null.
for|for
control|(
name|boolean
name|b
range|:
name|result
control|)
block|{
if|if
condition|(
operator|!
name|b
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|clearStreams
parameter_list|()
throws|throws
name|IOException
block|{
comment|// explicit close of all streams to de-ref ByteBuffers
for|for
control|(
name|InStream
name|is
range|:
name|streams
operator|.
name|values
argument_list|()
control|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bufferChunks
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|zcr
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BufferChunk
name|bufChunk
range|:
name|bufferChunks
control|)
block|{
name|zcr
operator|.
name|releaseBuffer
argument_list|(
name|bufChunk
operator|.
name|chunk
argument_list|)
expr_stmt|;
block|}
block|}
name|bufferChunks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|streams
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Read the current stripe into memory.    * @throws IOException    */
specifier|private
name|void
name|readStripe
parameter_list|()
throws|throws
name|IOException
block|{
name|StripeInformation
name|stripe
init|=
name|stripes
operator|.
name|get
argument_list|(
name|currentStripe
argument_list|)
decl_stmt|;
name|stripeFooter
operator|=
name|readStripeFooter
argument_list|(
name|stripe
argument_list|)
expr_stmt|;
name|clearStreams
argument_list|()
expr_stmt|;
comment|// setup the position in the stripe
name|rowCountInStripe
operator|=
name|stripe
operator|.
name|getNumberOfRows
argument_list|()
expr_stmt|;
name|rowInStripe
operator|=
literal|0
expr_stmt|;
name|rowBaseInStripe
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currentStripe
condition|;
operator|++
name|i
control|)
block|{
name|rowBaseInStripe
operator|+=
name|stripes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getNumberOfRows
argument_list|()
expr_stmt|;
block|}
comment|// reset all of the indexes
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|indexes
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|includedRowGroups
operator|=
name|pickRowGroups
argument_list|()
expr_stmt|;
comment|// move forward to the first unskipped row
if|if
condition|(
name|includedRowGroups
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|rowInStripe
operator|<
name|rowCountInStripe
operator|&&
operator|!
name|includedRowGroups
index|[
call|(
name|int
call|)
argument_list|(
name|rowInStripe
operator|/
name|rowIndexStride
argument_list|)
index|]
condition|)
block|{
name|rowInStripe
operator|=
name|Math
operator|.
name|min
argument_list|(
name|rowCountInStripe
argument_list|,
name|rowInStripe
operator|+
name|rowIndexStride
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if we haven't skipped the whole stripe, read the data
if|if
condition|(
name|rowInStripe
operator|<
name|rowCountInStripe
condition|)
block|{
comment|// if we aren't projecting columns or filtering rows, just read it all
if|if
condition|(
name|included
operator|==
literal|null
operator|&&
name|includedRowGroups
operator|==
literal|null
condition|)
block|{
name|readAllDataStreams
argument_list|(
name|stripe
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|readPartialDataStreams
argument_list|(
name|stripe
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
argument_list|)
expr_stmt|;
comment|// if we skipped the first row group, move the pointers forward
if|if
condition|(
name|rowInStripe
operator|!=
literal|0
condition|)
block|{
name|seekToRowEntry
argument_list|(
name|reader
argument_list|,
call|(
name|int
call|)
argument_list|(
name|rowInStripe
operator|/
name|rowIndexStride
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|readAllDataStreams
parameter_list|(
name|StripeInformation
name|stripe
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|start
init|=
name|stripe
operator|.
name|getIndexLength
argument_list|()
decl_stmt|;
name|long
name|end
init|=
name|start
operator|+
name|stripe
operator|.
name|getDataLength
argument_list|()
decl_stmt|;
comment|// TODO: planning should be added here too, to take cache into account
comment|// explicitly trigger 1 big read
name|DiskRange
index|[]
name|ranges
init|=
operator|new
name|DiskRange
index|[]
block|{
operator|new
name|DiskRange
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
block|}
decl_stmt|;
name|bufferChunks
operator|=
name|readDiskRanges
argument_list|(
name|file
argument_list|,
name|zcr
argument_list|,
name|stripe
operator|.
name|getOffset
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ranges
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OrcProto
operator|.
name|Stream
argument_list|>
name|streamDescriptions
init|=
name|stripeFooter
operator|.
name|getStreamsList
argument_list|()
decl_stmt|;
name|createStreams
argument_list|(
name|streamDescriptions
argument_list|,
name|bufferChunks
argument_list|,
literal|null
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|,
name|streams
argument_list|)
expr_stmt|;
comment|// TODO: decompressed data from streams should be put in cache
block|}
comment|/**    * The sections of stripe that we need to read.    */
specifier|static
class|class
name|DiskRange
block|{
comment|/** the first address we need to read. */
name|long
name|offset
decl_stmt|;
comment|/** the first address afterwards. */
name|long
name|end
decl_stmt|;
name|DiskRange
parameter_list|(
name|long
name|offset
parameter_list|,
name|long
name|end
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
if|if
condition|(
name|end
operator|<
name|offset
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid range "
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
operator|||
name|other
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|DiskRange
name|otherR
init|=
operator|(
name|DiskRange
operator|)
name|other
decl_stmt|;
return|return
name|otherR
operator|.
name|offset
operator|==
name|offset
operator|&&
name|otherR
operator|.
name|end
operator|==
name|end
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"range start: "
operator|+
name|offset
operator|+
literal|" end: "
operator|+
name|end
return|;
block|}
block|}
comment|/**    * The sections of stripe that we have read.    * This might not match diskRange - 1 disk range can be multiple buffer chunks, depending on DFS block boundaries.    */
specifier|static
class|class
name|BufferChunk
block|{
specifier|final
name|ByteBuffer
name|chunk
decl_stmt|;
comment|/** the first address we need to read. */
specifier|final
name|long
name|offset
decl_stmt|;
comment|/** end of the buffer **/
specifier|final
name|long
name|end
decl_stmt|;
name|BufferChunk
parameter_list|(
name|ByteBuffer
name|chunk
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|chunk
operator|=
name|chunk
expr_stmt|;
name|end
operator|=
name|offset
operator|+
name|chunk
operator|.
name|remaining
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"range start: "
operator|+
name|offset
operator|+
literal|" size: "
operator|+
name|chunk
operator|.
name|remaining
argument_list|()
operator|+
literal|" type: "
operator|+
operator|(
name|chunk
operator|.
name|isDirect
argument_list|()
condition|?
literal|"direct"
else|:
literal|"array-backed"
operator|)
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|int
name|BYTE_STREAM_POSITIONS
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|RUN_LENGTH_BYTE_POSITIONS
init|=
name|BYTE_STREAM_POSITIONS
operator|+
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BITFIELD_POSITIONS
init|=
name|RUN_LENGTH_BYTE_POSITIONS
operator|+
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|RUN_LENGTH_INT_POSITIONS
init|=
name|BYTE_STREAM_POSITIONS
operator|+
literal|1
decl_stmt|;
comment|/**    * Get the offset in the index positions for the column that the given    * stream starts.    * @param encoding the encoding of the column    * @param type the type of the column    * @param stream the kind of the stream    * @param isCompressed is the file compressed    * @param hasNulls does the column have a PRESENT stream?    * @return the number of positions that will be used for that stream    */
specifier|static
name|int
name|getIndexPosition
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
name|encoding
parameter_list|,
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
name|type
parameter_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
name|stream
parameter_list|,
name|boolean
name|isCompressed
parameter_list|,
name|boolean
name|hasNulls
parameter_list|)
block|{
if|if
condition|(
name|stream
operator|==
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|PRESENT
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|compressionValue
init|=
name|isCompressed
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|base
init|=
name|hasNulls
condition|?
operator|(
name|BITFIELD_POSITIONS
operator|+
name|compressionValue
operator|)
else|:
literal|0
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
case|case
name|DATE
case|:
case|case
name|STRUCT
case|:
case|case
name|MAP
case|:
case|case
name|LIST
case|:
case|case
name|UNION
case|:
return|return
name|base
return|;
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
case|case
name|STRING
case|:
if|if
condition|(
name|encoding
operator|==
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DICTIONARY
operator|||
name|encoding
operator|==
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DICTIONARY_V2
condition|)
block|{
return|return
name|base
return|;
block|}
else|else
block|{
if|if
condition|(
name|stream
operator|==
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
condition|)
block|{
return|return
name|base
return|;
block|}
else|else
block|{
return|return
name|base
operator|+
name|BYTE_STREAM_POSITIONS
operator|+
name|compressionValue
return|;
block|}
block|}
case|case
name|BINARY
case|:
if|if
condition|(
name|stream
operator|==
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
condition|)
block|{
return|return
name|base
return|;
block|}
return|return
name|base
operator|+
name|BYTE_STREAM_POSITIONS
operator|+
name|compressionValue
return|;
case|case
name|DECIMAL
case|:
if|if
condition|(
name|stream
operator|==
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
condition|)
block|{
return|return
name|base
return|;
block|}
return|return
name|base
operator|+
name|BYTE_STREAM_POSITIONS
operator|+
name|compressionValue
return|;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|stream
operator|==
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
condition|)
block|{
return|return
name|base
return|;
block|}
return|return
name|base
operator|+
name|RUN_LENGTH_INT_POSITIONS
operator|+
name|compressionValue
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown type "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
comment|// for uncompressed streams, what is the most overlap with the following set
comment|// of rows (long vint literal group).
specifier|static
specifier|final
name|int
name|WORST_UNCOMPRESSED_SLOP
init|=
literal|2
operator|+
literal|8
operator|*
literal|512
decl_stmt|;
comment|/**    * Is this stream part of a dictionary?    * @return is this part of a dictionary?    */
specifier|static
name|boolean
name|isDictionary
parameter_list|(
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
name|kind
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
block|{
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
name|encodingKind
init|=
name|encoding
operator|.
name|getKind
argument_list|()
decl_stmt|;
return|return
name|kind
operator|==
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DICTIONARY_DATA
operator|||
operator|(
name|kind
operator|==
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|LENGTH
operator|&&
operator|(
name|encodingKind
operator|==
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DICTIONARY
operator|||
name|encodingKind
operator|==
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DICTIONARY_V2
operator|)
operator|)
return|;
block|}
comment|/**    * Plan the ranges of the file that we need to read given the list of    * columns and row groups.    * @param streamList the list of streams avaiable    * @param indexes the indexes that have been loaded    * @param includedColumns which columns are needed    * @param includedRowGroups which row groups are needed    * @param isCompressed does the file have generic compression    * @param encodings the encodings for each column    * @param types the types of the columns    * @param compressionSize the compression block size    * @return the list of disk ranges that will be loaded    */
specifier|static
name|List
argument_list|<
name|DiskRange
argument_list|>
name|planReadPartialDataStreams
parameter_list|(
name|List
argument_list|<
name|OrcProto
operator|.
name|Stream
argument_list|>
name|streamList
parameter_list|,
name|OrcProto
operator|.
name|RowIndex
index|[]
name|indexes
parameter_list|,
name|boolean
index|[]
name|includedColumns
parameter_list|,
name|boolean
index|[]
name|includedRowGroups
parameter_list|,
name|boolean
name|isCompressed
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnEncoding
argument_list|>
name|encodings
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
parameter_list|,
name|int
name|compressionSize
parameter_list|)
block|{
name|List
argument_list|<
name|DiskRange
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|DiskRange
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|offset
init|=
literal|0
decl_stmt|;
comment|// figure out which columns have a present stream
name|boolean
index|[]
name|hasNull
init|=
operator|new
name|boolean
index|[
name|types
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|OrcProto
operator|.
name|Stream
name|stream
range|:
name|streamList
control|)
block|{
if|if
condition|(
name|stream
operator|.
name|getKind
argument_list|()
operator|==
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|PRESENT
condition|)
block|{
name|hasNull
index|[
name|stream
operator|.
name|getColumn
argument_list|()
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|OrcProto
operator|.
name|Stream
name|stream
range|:
name|streamList
control|)
block|{
name|long
name|length
init|=
name|stream
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|int
name|column
init|=
name|stream
operator|.
name|getColumn
argument_list|()
decl_stmt|;
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
name|streamKind
init|=
name|stream
operator|.
name|getKind
argument_list|()
decl_stmt|;
if|if
condition|(
name|StreamName
operator|.
name|getArea
argument_list|(
name|streamKind
argument_list|)
operator|==
name|StreamName
operator|.
name|Area
operator|.
name|DATA
operator|&&
name|includedColumns
index|[
name|column
index|]
condition|)
block|{
comment|// if we aren't filtering or it is a dictionary, load it.
if|if
condition|(
name|includedRowGroups
operator|==
literal|null
operator|||
name|isDictionary
argument_list|(
name|streamKind
argument_list|,
name|encodings
operator|.
name|get
argument_list|(
name|column
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|DiskRange
argument_list|(
name|offset
argument_list|,
name|offset
operator|+
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|group
init|=
literal|0
init|;
name|group
operator|<
name|includedRowGroups
operator|.
name|length
condition|;
operator|++
name|group
control|)
block|{
if|if
condition|(
name|includedRowGroups
index|[
name|group
index|]
condition|)
block|{
name|int
name|posn
init|=
name|getIndexPosition
argument_list|(
name|encodings
operator|.
name|get
argument_list|(
name|column
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|types
operator|.
name|get
argument_list|(
name|column
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|stream
operator|.
name|getKind
argument_list|()
argument_list|,
name|isCompressed
argument_list|,
name|hasNull
index|[
name|column
index|]
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|indexes
index|[
name|column
index|]
operator|.
name|getEntry
argument_list|(
name|group
argument_list|)
operator|.
name|getPositions
argument_list|(
name|posn
argument_list|)
decl_stmt|;
specifier|final
name|long
name|nextGroupOffset
decl_stmt|;
if|if
condition|(
name|group
operator|<
name|includedRowGroups
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|nextGroupOffset
operator|=
name|indexes
index|[
name|column
index|]
operator|.
name|getEntry
argument_list|(
name|group
operator|+
literal|1
argument_list|)
operator|.
name|getPositions
argument_list|(
name|posn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nextGroupOffset
operator|=
name|length
expr_stmt|;
block|}
comment|// figure out the worst case last location
comment|// if adjacent groups have the same compressed block offset then stretch the slop
comment|// by factor of 2 to safely accommodate the next compression block.
comment|// One for the current compression block and another for the next compression block.
specifier|final
name|long
name|slop
init|=
name|isCompressed
condition|?
literal|2
operator|*
operator|(
name|OutStream
operator|.
name|HEADER_SIZE
operator|+
name|compressionSize
operator|)
else|:
name|WORST_UNCOMPRESSED_SLOP
decl_stmt|;
name|long
name|end
init|=
operator|(
name|group
operator|==
name|includedRowGroups
operator|.
name|length
operator|-
literal|1
operator|)
condition|?
name|length
else|:
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|nextGroupOffset
operator|+
name|slop
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|DiskRange
argument_list|(
name|offset
operator|+
name|start
argument_list|,
name|offset
operator|+
name|end
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|offset
operator|+=
name|length
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Update the disk ranges to collapse adjacent or overlapping ranges. It    * assumes that the ranges are sorted.    * @param ranges the list of disk ranges to merge    */
specifier|static
name|void
name|mergeDiskRanges
parameter_list|(
name|List
argument_list|<
name|DiskRange
argument_list|>
name|ranges
parameter_list|)
block|{
name|DiskRange
name|prev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ranges
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DiskRange
name|current
init|=
name|ranges
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
operator|&&
name|overlap
argument_list|(
name|prev
operator|.
name|offset
argument_list|,
name|prev
operator|.
name|end
argument_list|,
name|current
operator|.
name|offset
argument_list|,
name|current
operator|.
name|end
argument_list|)
condition|)
block|{
name|prev
operator|.
name|offset
operator|=
name|Math
operator|.
name|min
argument_list|(
name|prev
operator|.
name|offset
argument_list|,
name|current
operator|.
name|offset
argument_list|)
expr_stmt|;
name|prev
operator|.
name|end
operator|=
name|Math
operator|.
name|max
argument_list|(
name|prev
operator|.
name|end
argument_list|,
name|current
operator|.
name|end
argument_list|)
expr_stmt|;
name|ranges
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|i
operator|-=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|prev
operator|=
name|current
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Read the list of ranges from the file.    * @param file the file to read    * @param base the base of the stripe    * @param ranges the disk ranges within the stripe to read    * @return the bytes read for each disk range, which is the same length as    *    ranges    * @throws IOException    */
specifier|static
name|List
argument_list|<
name|BufferChunk
argument_list|>
name|readDiskRanges
parameter_list|(
name|FSDataInputStream
name|file
parameter_list|,
name|ZeroCopyReaderShim
name|zcr
parameter_list|,
name|long
name|base
parameter_list|,
name|List
argument_list|<
name|DiskRange
argument_list|>
name|ranges
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|BufferChunk
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|RecordReaderImpl
operator|.
name|BufferChunk
argument_list|>
argument_list|(
name|ranges
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DiskRange
name|range
range|:
name|ranges
control|)
block|{
name|int
name|len
init|=
call|(
name|int
call|)
argument_list|(
name|range
operator|.
name|end
operator|-
name|range
operator|.
name|offset
argument_list|)
decl_stmt|;
name|long
name|off
init|=
name|range
operator|.
name|offset
decl_stmt|;
name|file
operator|.
name|seek
argument_list|(
name|base
operator|+
name|off
argument_list|)
expr_stmt|;
if|if
condition|(
name|zcr
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|ByteBuffer
name|partial
init|=
name|zcr
operator|.
name|readBuffer
argument_list|(
name|len
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|BufferChunk
argument_list|(
name|partial
argument_list|,
name|off
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|read
init|=
name|partial
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|len
operator|-=
name|read
expr_stmt|;
name|off
operator|+=
name|read
expr_stmt|;
block|}
block|}
else|else
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|file
operator|.
name|readFully
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|BufferChunk
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|)
argument_list|,
name|range
operator|.
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Does region A overlap region B? The end points are inclusive on both sides.    * @param leftA A's left point    * @param rightA A's right point    * @param leftB B's left point    * @param rightB B's right point    * @return Does region A overlap region B?    */
specifier|static
name|boolean
name|overlap
parameter_list|(
name|long
name|leftA
parameter_list|,
name|long
name|rightA
parameter_list|,
name|long
name|leftB
parameter_list|,
name|long
name|rightB
parameter_list|)
block|{
if|if
condition|(
name|leftA
operator|<=
name|leftB
condition|)
block|{
return|return
name|rightA
operator|>=
name|leftB
return|;
block|}
return|return
name|rightB
operator|>=
name|leftA
return|;
block|}
comment|/**    * Build a string representation of a list of disk ranges.    * @param ranges ranges to stringify    * @return the resulting string    */
specifier|static
name|String
name|stringifyDiskRanges
parameter_list|(
name|List
argument_list|<
name|DiskRange
argument_list|>
name|ranges
parameter_list|)
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ranges
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|ranges
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|static
name|void
name|createStreams
parameter_list|(
name|List
argument_list|<
name|OrcProto
operator|.
name|Stream
argument_list|>
name|streamDescriptions
parameter_list|,
name|List
argument_list|<
name|BufferChunk
argument_list|>
name|ranges
parameter_list|,
name|boolean
index|[]
name|includeColumn
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|OrcProto
operator|.
name|Stream
name|streamDesc
range|:
name|streamDescriptions
control|)
block|{
name|int
name|column
init|=
name|streamDesc
operator|.
name|getColumn
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|includeColumn
operator|==
literal|null
operator|||
name|includeColumn
index|[
name|column
index|]
operator|)
operator|&&
name|StreamName
operator|.
name|getArea
argument_list|(
name|streamDesc
operator|.
name|getKind
argument_list|()
argument_list|)
operator|==
name|StreamName
operator|.
name|Area
operator|.
name|DATA
condition|)
block|{
name|long
name|length
init|=
name|streamDesc
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|int
name|first
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|last
init|=
operator|-
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ranges
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|BufferChunk
name|range
init|=
name|ranges
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|overlap
argument_list|(
name|offset
argument_list|,
name|offset
operator|+
name|length
argument_list|,
name|range
operator|.
name|offset
argument_list|,
name|range
operator|.
name|end
argument_list|)
condition|)
block|{
if|if
condition|(
name|first
operator|==
operator|-
literal|1
condition|)
block|{
name|first
operator|=
name|i
expr_stmt|;
block|}
name|last
operator|=
name|i
expr_stmt|;
block|}
block|}
name|ByteBuffer
index|[]
name|buffers
init|=
operator|new
name|ByteBuffer
index|[
name|last
operator|-
name|first
operator|+
literal|1
index|]
decl_stmt|;
name|long
index|[]
name|offsets
init|=
operator|new
name|long
index|[
name|last
operator|-
name|first
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buffers
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|BufferChunk
name|range
init|=
name|ranges
operator|.
name|get
argument_list|(
name|i
operator|+
name|first
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|Math
operator|.
name|max
argument_list|(
name|range
operator|.
name|offset
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|long
name|end
init|=
name|Math
operator|.
name|min
argument_list|(
name|range
operator|.
name|end
argument_list|,
name|offset
operator|+
name|length
argument_list|)
decl_stmt|;
name|buffers
index|[
name|i
index|]
operator|=
name|range
operator|.
name|chunk
operator|.
name|slice
argument_list|()
expr_stmt|;
assert|assert
name|range
operator|.
name|chunk
operator|.
name|position
argument_list|()
operator|==
literal|0
assert|;
comment|// otherwise we'll mix up positions
comment|/*            * buffers are positioned in-wards if the offset> range.offset            * offsets[i] == range.offset - offset, except if offset> range.offset            */
if|if
condition|(
name|offset
operator|>
name|range
operator|.
name|offset
condition|)
block|{
name|buffers
index|[
name|i
index|]
operator|.
name|position
argument_list|(
call|(
name|int
call|)
argument_list|(
name|offset
operator|-
name|range
operator|.
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|buffers
index|[
name|i
index|]
operator|.
name|limit
argument_list|(
call|(
name|int
call|)
argument_list|(
name|end
operator|-
name|range
operator|.
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|offsets
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|buffers
index|[
name|i
index|]
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|buffers
index|[
name|i
index|]
operator|.
name|limit
argument_list|(
call|(
name|int
call|)
argument_list|(
name|end
operator|-
name|range
operator|.
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|offsets
index|[
name|i
index|]
operator|=
operator|(
name|range
operator|.
name|offset
operator|-
name|offset
operator|)
expr_stmt|;
block|}
block|}
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|column
argument_list|,
name|streamDesc
operator|.
name|getKind
argument_list|()
argument_list|)
decl_stmt|;
name|streams
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|InStream
operator|.
name|create
argument_list|(
name|name
operator|.
name|toString
argument_list|()
argument_list|,
name|buffers
argument_list|,
name|offsets
argument_list|,
name|length
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|offset
operator|+=
name|streamDesc
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|readPartialDataStreams
parameter_list|(
name|StripeInformation
name|stripe
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|OrcProto
operator|.
name|Stream
argument_list|>
name|streamList
init|=
name|stripeFooter
operator|.
name|getStreamsList
argument_list|()
decl_stmt|;
comment|// TODO: planning should take cache into account
name|List
argument_list|<
name|DiskRange
argument_list|>
name|chunks
init|=
name|planReadPartialDataStreams
argument_list|(
name|streamList
argument_list|,
name|indexes
argument_list|,
name|included
argument_list|,
name|includedRowGroups
argument_list|,
name|codec
operator|!=
literal|null
argument_list|,
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
argument_list|,
name|types
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"chunks = "
operator|+
name|stringifyDiskRanges
argument_list|(
name|chunks
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mergeDiskRanges
argument_list|(
name|chunks
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"merge = "
operator|+
name|stringifyDiskRanges
argument_list|(
name|chunks
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bufferChunks
operator|=
name|readDiskRanges
argument_list|(
name|file
argument_list|,
name|zcr
argument_list|,
name|stripe
operator|.
name|getOffset
argument_list|()
argument_list|,
name|chunks
argument_list|)
expr_stmt|;
comment|// TODO: decompressed data from streams should be put in cache
name|createStreams
argument_list|(
name|streamList
argument_list|,
name|bufferChunks
argument_list|,
name|included
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|,
name|streams
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|rowInStripe
operator|<
name|rowCountInStripe
return|;
block|}
comment|/**    * Read the next stripe until we find a row that we don't skip.    * @throws IOException    */
specifier|private
name|void
name|advanceStripe
parameter_list|()
throws|throws
name|IOException
block|{
name|rowInStripe
operator|=
name|rowCountInStripe
expr_stmt|;
while|while
condition|(
name|rowInStripe
operator|>=
name|rowCountInStripe
operator|&&
name|currentStripe
operator|<
name|stripes
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|currentStripe
operator|+=
literal|1
expr_stmt|;
name|readStripe
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Skip over rows that we aren't selecting, so that the next row is    * one that we will read.    * @param nextRow the row we want to go to    * @throws IOException    */
specifier|private
name|boolean
name|advanceToNextRow
parameter_list|(
name|TreeReader
name|reader
parameter_list|,
name|long
name|nextRow
parameter_list|,
name|boolean
name|canAdvanceStripe
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|nextRowInStripe
init|=
name|nextRow
operator|-
name|rowBaseInStripe
decl_stmt|;
comment|// check for row skipping
if|if
condition|(
name|rowIndexStride
operator|!=
literal|0
operator|&&
name|includedRowGroups
operator|!=
literal|null
operator|&&
name|nextRowInStripe
operator|<
name|rowCountInStripe
condition|)
block|{
name|int
name|rowGroup
init|=
call|(
name|int
call|)
argument_list|(
name|nextRowInStripe
operator|/
name|rowIndexStride
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|includedRowGroups
index|[
name|rowGroup
index|]
condition|)
block|{
while|while
condition|(
name|rowGroup
operator|<
name|includedRowGroups
operator|.
name|length
operator|&&
operator|!
name|includedRowGroups
index|[
name|rowGroup
index|]
condition|)
block|{
name|rowGroup
operator|+=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|rowGroup
operator|>=
name|includedRowGroups
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|canAdvanceStripe
condition|)
block|{
name|advanceStripe
argument_list|()
expr_stmt|;
block|}
return|return
name|canAdvanceStripe
return|;
block|}
name|nextRowInStripe
operator|=
name|Math
operator|.
name|min
argument_list|(
name|rowCountInStripe
argument_list|,
name|rowGroup
operator|*
name|rowIndexStride
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nextRowInStripe
operator|>=
name|rowCountInStripe
condition|)
block|{
if|if
condition|(
name|canAdvanceStripe
condition|)
block|{
name|advanceStripe
argument_list|()
expr_stmt|;
block|}
return|return
name|canAdvanceStripe
return|;
block|}
if|if
condition|(
name|nextRowInStripe
operator|!=
name|rowInStripe
condition|)
block|{
if|if
condition|(
name|rowIndexStride
operator|!=
literal|0
condition|)
block|{
name|int
name|rowGroup
init|=
call|(
name|int
call|)
argument_list|(
name|nextRowInStripe
operator|/
name|rowIndexStride
argument_list|)
decl_stmt|;
name|seekToRowEntry
argument_list|(
name|reader
argument_list|,
name|rowGroup
argument_list|)
expr_stmt|;
name|reader
operator|.
name|skipRows
argument_list|(
name|nextRowInStripe
operator|-
name|rowGroup
operator|*
name|rowIndexStride
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reader
operator|.
name|skipRows
argument_list|(
name|nextRowInStripe
operator|-
name|rowInStripe
argument_list|)
expr_stmt|;
block|}
name|rowInStripe
operator|=
name|nextRowInStripe
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
name|result
init|=
name|reader
operator|.
name|next
argument_list|(
name|previous
argument_list|)
decl_stmt|;
comment|// find the next row
name|rowInStripe
operator|+=
literal|1
expr_stmt|;
name|advanceToNextRow
argument_list|(
name|reader
argument_list|,
name|rowInStripe
operator|+
name|rowBaseInStripe
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|isLogTraceEnabled
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"row from "
operator|+
name|reader
operator|.
name|path
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"orc row = "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|VectorizedRowBatch
name|nextBatch
parameter_list|(
name|VectorizedRowBatch
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|VectorizedRowBatch
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rowInStripe
operator|>=
name|rowCountInStripe
condition|)
block|{
name|currentStripe
operator|+=
literal|1
expr_stmt|;
name|readStripe
argument_list|()
expr_stmt|;
block|}
name|long
name|batchSize
init|=
name|computeBatchSize
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|rowInStripe
operator|+=
name|batchSize
expr_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|ColumnVector
index|[]
name|cols
init|=
operator|(
name|ColumnVector
index|[]
operator|)
name|reader
operator|.
name|nextVector
argument_list|(
literal|null
argument_list|,
operator|(
name|int
operator|)
name|batchSize
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|VectorizedRowBatch
argument_list|(
name|cols
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|.
name|cols
operator|=
name|cols
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|VectorizedRowBatch
operator|)
name|previous
expr_stmt|;
name|result
operator|.
name|selectedInUse
operator|=
literal|false
expr_stmt|;
name|reader
operator|.
name|nextVector
argument_list|(
name|result
operator|.
name|cols
argument_list|,
operator|(
name|int
operator|)
name|batchSize
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|size
operator|=
operator|(
name|int
operator|)
name|batchSize
expr_stmt|;
name|advanceToNextRow
argument_list|(
name|reader
argument_list|,
name|rowInStripe
operator|+
name|rowBaseInStripe
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|long
name|computeBatchSize
parameter_list|(
name|long
name|targetBatchSize
parameter_list|)
block|{
name|long
name|batchSize
init|=
literal|0
decl_stmt|;
comment|// In case of PPD, batch size should be aware of row group boundaries. If only a subset of row
comment|// groups are selected then marker position is set to the end of range (subset of row groups
comment|// within strip). Batch size computed out of marker position makes sure that batch size is
comment|// aware of row group boundary and will not cause overflow when reading rows
comment|// illustration of this case is here https://issues.apache.org/jira/browse/HIVE-6287
if|if
condition|(
name|rowIndexStride
operator|!=
literal|0
operator|&&
name|includedRowGroups
operator|!=
literal|null
operator|&&
name|rowInStripe
operator|<
name|rowCountInStripe
condition|)
block|{
name|int
name|startRowGroup
init|=
call|(
name|int
call|)
argument_list|(
name|rowInStripe
operator|/
name|rowIndexStride
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|includedRowGroups
index|[
name|startRowGroup
index|]
condition|)
block|{
while|while
condition|(
name|startRowGroup
operator|<
name|includedRowGroups
operator|.
name|length
operator|&&
operator|!
name|includedRowGroups
index|[
name|startRowGroup
index|]
condition|)
block|{
name|startRowGroup
operator|+=
literal|1
expr_stmt|;
block|}
block|}
name|int
name|endRowGroup
init|=
name|startRowGroup
decl_stmt|;
while|while
condition|(
name|endRowGroup
operator|<
name|includedRowGroups
operator|.
name|length
operator|&&
name|includedRowGroups
index|[
name|endRowGroup
index|]
condition|)
block|{
name|endRowGroup
operator|+=
literal|1
expr_stmt|;
block|}
specifier|final
name|long
name|markerPosition
init|=
operator|(
name|endRowGroup
operator|*
name|rowIndexStride
operator|)
operator|<
name|rowCountInStripe
condition|?
operator|(
name|endRowGroup
operator|*
name|rowIndexStride
operator|)
else|:
name|rowCountInStripe
decl_stmt|;
name|batchSize
operator|=
name|Math
operator|.
name|min
argument_list|(
name|targetBatchSize
argument_list|,
operator|(
name|markerPosition
operator|-
name|rowInStripe
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
operator|&&
name|batchSize
operator|<
name|targetBatchSize
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"markerPosition: "
operator|+
name|markerPosition
operator|+
literal|" batchSize: "
operator|+
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|batchSize
operator|=
name|Math
operator|.
name|min
argument_list|(
name|targetBatchSize
argument_list|,
operator|(
name|rowCountInStripe
operator|-
name|rowInStripe
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|batchSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|clearStreams
argument_list|()
expr_stmt|;
name|pool
operator|.
name|clear
argument_list|()
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getRowNumber
parameter_list|()
block|{
return|return
name|rowInStripe
operator|+
name|rowBaseInStripe
operator|+
name|firstRow
return|;
block|}
comment|/**    * Return the fraction of rows that have been read from the selected.    * section of the file    * @return fraction between 0.0 and 1.0 of rows consumed    */
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
operator|(
operator|(
name|float
operator|)
name|rowBaseInStripe
operator|+
name|rowInStripe
operator|)
operator|/
name|totalRowCount
return|;
block|}
specifier|private
name|int
name|findStripe
parameter_list|(
name|long
name|rowNumber
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stripes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|StripeInformation
name|stripe
init|=
name|stripes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|stripe
operator|.
name|getNumberOfRows
argument_list|()
operator|>
name|rowNumber
condition|)
block|{
return|return
name|i
return|;
block|}
name|rowNumber
operator|-=
name|stripe
operator|.
name|getNumberOfRows
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Seek after the end of reader range"
argument_list|)
throw|;
block|}
specifier|protected
name|OrcProto
operator|.
name|RowIndex
index|[]
name|readRowIndex
parameter_list|(
name|int
name|stripeIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|offset
init|=
name|stripes
operator|.
name|get
argument_list|(
name|stripeIndex
argument_list|)
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
decl_stmt|;
name|OrcProto
operator|.
name|RowIndex
index|[]
name|indexes
decl_stmt|;
comment|// if this is the current stripe, use the cached objects.
if|if
condition|(
name|stripeIndex
operator|==
name|currentStripe
condition|)
block|{
name|stripeFooter
operator|=
name|this
operator|.
name|stripeFooter
expr_stmt|;
name|indexes
operator|=
name|this
operator|.
name|indexes
expr_stmt|;
block|}
else|else
block|{
name|stripeFooter
operator|=
name|readStripeFooter
argument_list|(
name|stripes
operator|.
name|get
argument_list|(
name|stripeIndex
argument_list|)
argument_list|)
expr_stmt|;
name|indexes
operator|=
operator|new
name|OrcProto
operator|.
name|RowIndex
index|[
name|this
operator|.
name|indexes
operator|.
name|length
index|]
expr_stmt|;
block|}
for|for
control|(
name|OrcProto
operator|.
name|Stream
name|stream
range|:
name|stripeFooter
operator|.
name|getStreamsList
argument_list|()
control|)
block|{
if|if
condition|(
name|stream
operator|.
name|getKind
argument_list|()
operator|==
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|ROW_INDEX
condition|)
block|{
name|int
name|col
init|=
name|stream
operator|.
name|getColumn
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|included
operator|==
literal|null
operator|||
name|included
index|[
name|col
index|]
operator|)
operator|&&
name|indexes
index|[
name|col
index|]
operator|==
literal|null
condition|)
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|stream
operator|.
name|getLength
argument_list|()
index|]
decl_stmt|;
name|file
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|file
operator|.
name|readFully
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|indexes
index|[
name|col
index|]
operator|=
name|OrcProto
operator|.
name|RowIndex
operator|.
name|parseFrom
argument_list|(
name|InStream
operator|.
name|create
argument_list|(
literal|"index"
argument_list|,
operator|new
name|ByteBuffer
index|[]
block|{
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|)
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
literal|0
block|}
argument_list|,
name|stream
operator|.
name|getLength
argument_list|()
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|offset
operator|+=
name|stream
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
return|return
name|indexes
return|;
block|}
specifier|private
name|void
name|seekToRowEntry
parameter_list|(
name|TreeReader
name|reader
parameter_list|,
name|int
name|rowEntry
parameter_list|)
throws|throws
name|IOException
block|{
name|PositionProvider
index|[]
name|index
init|=
operator|new
name|PositionProvider
index|[
name|indexes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|indexes
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|index
index|[
name|i
index|]
operator|=
operator|new
name|PositionProviderImpl
argument_list|(
name|indexes
index|[
name|i
index|]
operator|.
name|getEntry
argument_list|(
name|rowEntry
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seekToRow
parameter_list|(
name|long
name|rowNumber
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rowNumber
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Seek to a negative row number "
operator|+
name|rowNumber
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|rowNumber
operator|<
name|firstRow
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Seek before reader range "
operator|+
name|rowNumber
argument_list|)
throw|;
block|}
comment|// convert to our internal form (rows from the beginning of slice)
name|rowNumber
operator|-=
name|firstRow
expr_stmt|;
comment|// move to the right stripe
name|int
name|rightStripe
init|=
name|findStripe
argument_list|(
name|rowNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|rightStripe
operator|!=
name|currentStripe
condition|)
block|{
name|currentStripe
operator|=
name|rightStripe
expr_stmt|;
name|readStripe
argument_list|()
expr_stmt|;
block|}
name|readRowIndex
argument_list|(
name|currentStripe
argument_list|)
expr_stmt|;
comment|// if we aren't to the right row yet, advanance in the stripe.
name|advanceToNextRow
argument_list|(
name|reader
argument_list|,
name|rowNumber
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readEncodedColumns
parameter_list|(
name|long
index|[]
index|[]
name|colRgs
parameter_list|,
name|int
name|rgCount
parameter_list|,
name|SearchArgument
name|sarg
parameter_list|,
name|Consumer
argument_list|<
name|EncodedColumn
argument_list|<
name|OrcBatchKey
argument_list|>
argument_list|>
name|consumer
parameter_list|,
name|LowLevelCache
name|allocator
parameter_list|)
block|{
comment|// TODO: HERE read encoded data
block|}
comment|/* Old prototype code to read stripes one column at a time, with limited output space.   /**    * Iterator-like context to read ORC as a sequence of column x stripe "cells".    * TODO: for this to actually be an iterator-like thing, we need to clone nested reader state.    *       As of now, we advance parent's shared column readers separately, which would cause    *       other calls (e.g. nextBatch) to break once nextColumnStripe is called. Currently,    *       it is always called alone, so this is ok; context is merely a convenience class.    * /   private static class ColumnReadContext {     public ColumnReadContext(StructTreeReader reader) {       StructTreeReader structReader = (StructTreeReader)reader;       readers = new TreeReader[structReader.getReaderCount()];       for (int i = 0; i< readers.length; ++i) {         readers[i] = structReader.getColumnReader(i);       }     }     /** Readers for each separate column; no nulls, just the columns being read. * /     private final TreeReader[] readers;     /** Remembered row offset after a partial read of one column from stripe. * /     private long rowInStripe = 0;     /** Next column to be read (index into readers). * /     private int columnIx = 0;     /** Remaining row count for current stripe; same for every column, so don't recompute. * /     private long remainingToReadFromStart = -1;     /** Whether the next call will be the first for this column x stripe. TODO: derive? * /     private boolean firstCall = true;   }    @Override   public Object prepareColumnRead() {     return new ColumnReadContext((StructTreeReader)this.reader);   }    @Override   public void readNextColumnStripe(Object ctxObj) throws IOException {     ColumnReadContext ctx = (ColumnReadContext)ctxObj;     if (rowInStripe>= rowCountInStripe) {       assert ctx.columnIx == 0;       currentStripe += 1;       readStripe();     }     long rowInStripeGlobal = rowInStripe; // Remember the global state.     rowInStripe = ctx.rowInStripe;     if (ctx.columnIx == 0&& ctx.firstCall) {       // We are starting a new stripe - remember the number of rows to read (same for all cols).       // Doesn't take into account space remaining in ChunkWriter.       ctx.remainingToReadFromStart = computeBatchSize(Long.MAX_VALUE);     }     long remainingToRead =         ctx.firstCall ? ctx.remainingToReadFromStart : computeBatchSize(Long.MAX_VALUE);     TreeReader columnReader = ctx.readers[ctx.columnIx];     if (LOG.isTraceEnabled()) {       LOG.trace("Calling nextChunk for " + remainingToRead);     }     long rowsRead = (read data was here)     assert rowsRead<= remainingToRead;     rowInStripe += rowsRead;     boolean doneWithColumnStripe = (rowsRead == remainingToRead); // always true for stripes     ctx.firstCall = doneWithColumnStripe; // If we are not done, there will be more calls.     if (!doneWithColumnStripe) {       // Note that we are only advancing the reader for the current column.       boolean hasRows = advanceToNextRow(columnReader, rowInStripe + rowBaseInStripe, false);       ctx.rowInStripe = rowInStripe; // Remember the current value for next call.       if (!hasRows) {         throw new AssertionError("No rows after advance; read "             + rowsRead + " out of " + remainingToRead);       }     } else {       // Done with some column + stripe.       ++ctx.columnIx;       if (ctx.columnIx == ctx.readers.length) {         // Done with the last column in this stripe; advance the global rowInStripe.         ctx.columnIx = 0;         ctx.rowInStripe = rowInStripeGlobal = rowInStripe;       } else {         // Revert the state back to start of stripe.         ctx.rowInStripe = rowInStripeGlobal;       }     }     rowInStripe = rowInStripeGlobal; // Restore global state.     return !doneWithColumnStripe;   }*/
block|}
end_class

end_unit

