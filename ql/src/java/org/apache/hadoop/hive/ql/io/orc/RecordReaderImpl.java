begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|Decimal64ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ListColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|MapColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|StructColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|UnionColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|TypeDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|RecordReaderImpl
extends|extends
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|RecordReaderImpl
implements|implements
name|RecordReader
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RecordReaderImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|VectorizedRowBatch
name|batch
decl_stmt|;
specifier|private
name|int
name|rowInBatch
decl_stmt|;
specifier|private
name|long
name|baseRow
decl_stmt|;
specifier|protected
name|RecordReaderImpl
parameter_list|(
name|ReaderImpl
name|fileReader
parameter_list|,
name|Reader
operator|.
name|Options
name|options
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|fileReader
argument_list|,
name|options
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|useDecimal64ColumnVectors
init|=
name|conf
operator|!=
literal|null
operator|&&
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZED_INPUT_FORMAT_SUPPORTS_ENABLED
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"decimal_64"
argument_list|)
decl_stmt|;
if|if
condition|(
name|useDecimal64ColumnVectors
condition|)
block|{
name|batch
operator|=
name|this
operator|.
name|schema
operator|.
name|createRowBatchV2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|batch
operator|=
name|this
operator|.
name|schema
operator|.
name|createRowBatch
argument_list|()
expr_stmt|;
block|}
name|rowInBatch
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * If the current batch is empty, get a new one.    * @return true if we have rows available.    * @throws IOException    */
name|boolean
name|ensureBatch
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|rowInBatch
operator|>=
name|batch
operator|.
name|size
condition|)
block|{
name|baseRow
operator|=
name|super
operator|.
name|getRowNumber
argument_list|()
expr_stmt|;
name|rowInBatch
operator|=
literal|0
expr_stmt|;
return|return
name|super
operator|.
name|nextBatch
argument_list|(
name|batch
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|VectorizedRowBatch
name|createRowBatch
parameter_list|(
name|boolean
name|useDecimal64
parameter_list|)
block|{
return|return
name|useDecimal64
condition|?
name|this
operator|.
name|schema
operator|.
name|createRowBatchV2
argument_list|()
else|:
name|this
operator|.
name|schema
operator|.
name|createRowBatch
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getRowNumber
parameter_list|()
block|{
return|return
name|baseRow
operator|+
name|rowInBatch
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|ensureBatch
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seekToRow
parameter_list|(
name|long
name|row
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|row
operator|>=
name|baseRow
operator|&&
name|row
operator|<
name|baseRow
operator|+
name|batch
operator|.
name|size
condition|)
block|{
name|rowInBatch
operator|=
call|(
name|int
call|)
argument_list|(
name|row
operator|-
name|baseRow
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|seekToRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|0
expr_stmt|;
name|ensureBatch
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|next
parameter_list|(
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|ensureBatch
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|schema
operator|.
name|getCategory
argument_list|()
operator|==
name|TypeDescription
operator|.
name|Category
operator|.
name|STRUCT
condition|)
block|{
name|OrcStruct
name|result
decl_stmt|;
name|List
argument_list|<
name|TypeDescription
argument_list|>
name|children
init|=
name|schema
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|int
name|numberOfChildren
init|=
name|children
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|OrcStruct
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|OrcStruct
argument_list|(
name|numberOfChildren
argument_list|)
expr_stmt|;
name|previous
operator|=
name|result
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|OrcStruct
operator|)
name|previous
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|getNumFields
argument_list|()
operator|!=
name|numberOfChildren
condition|)
block|{
name|result
operator|.
name|setNumFields
argument_list|(
name|numberOfChildren
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfChildren
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|.
name|setFieldValue
argument_list|(
name|i
argument_list|,
name|nextValue
argument_list|(
name|batch
operator|.
name|cols
index|[
name|i
index|]
argument_list|,
name|rowInBatch
argument_list|,
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|result
operator|.
name|getFieldValue
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|previous
operator|=
name|nextValue
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|,
name|rowInBatch
argument_list|,
name|schema
argument_list|,
name|previous
argument_list|)
expr_stmt|;
block|}
name|rowInBatch
operator|+=
literal|1
expr_stmt|;
return|return
name|previous
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|nextBatch
parameter_list|(
name|VectorizedRowBatch
name|theirBatch
parameter_list|)
throws|throws
name|IOException
block|{
comment|// If the user hasn't been reading by row, use the fast path.
if|if
condition|(
name|rowInBatch
operator|>=
name|batch
operator|.
name|size
condition|)
block|{
return|return
name|super
operator|.
name|nextBatch
argument_list|(
name|theirBatch
argument_list|)
return|;
block|}
name|copyIntoBatch
argument_list|(
name|theirBatch
argument_list|,
name|batch
argument_list|,
name|rowInBatch
argument_list|)
expr_stmt|;
name|rowInBatch
operator|+=
name|theirBatch
operator|.
name|size
expr_stmt|;
return|return
name|theirBatch
operator|.
name|size
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// free the memory for the column vectors
name|batch
operator|.
name|cols
operator|=
literal|null
expr_stmt|;
block|}
comment|/* Routines for stubbing into Writables */
specifier|static
name|BooleanWritable
name|nextBoolean
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|BooleanWritable
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|BooleanWritable
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|BooleanWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|BooleanWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|vector
operator|)
operator|.
name|vector
index|[
name|row
index|]
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|static
name|ByteWritable
name|nextByte
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|ByteWritable
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|ByteWritable
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|ByteWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|ByteWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
call|(
name|byte
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|vector
argument_list|)
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|static
name|ShortWritable
name|nextShort
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|ShortWritable
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|ShortWritable
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|ShortWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|ShortWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
call|(
name|short
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|vector
argument_list|)
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|static
name|IntWritable
name|nextInt
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|IntWritable
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|IntWritable
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|IntWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|IntWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
call|(
name|int
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|vector
argument_list|)
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|static
name|LongWritable
name|nextLong
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|LongWritable
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|LongWritable
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|LongWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|LongWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|vector
operator|)
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|static
name|FloatWritable
name|nextFloat
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|FloatWritable
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|FloatWritable
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|FloatWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|FloatWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
call|(
name|float
call|)
argument_list|(
operator|(
name|DoubleColumnVector
operator|)
name|vector
argument_list|)
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|static
name|DoubleWritable
name|nextDouble
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|DoubleWritable
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|DoubleWritable
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|DoubleWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|DoubleWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|vector
operator|)
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|static
name|Text
name|nextString
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|Text
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|Text
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|Text
operator|)
name|previous
expr_stmt|;
block|}
name|BytesColumnVector
name|bytes
init|=
operator|(
name|BytesColumnVector
operator|)
name|vector
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|bytes
operator|.
name|vector
index|[
name|row
index|]
argument_list|,
name|bytes
operator|.
name|start
index|[
name|row
index|]
argument_list|,
name|bytes
operator|.
name|length
index|[
name|row
index|]
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|static
name|HiveCharWritable
name|nextChar
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|size
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|HiveCharWritable
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|HiveCharWritable
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|HiveCharWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|HiveCharWritable
operator|)
name|previous
expr_stmt|;
block|}
name|BytesColumnVector
name|bytes
init|=
operator|(
name|BytesColumnVector
operator|)
name|vector
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|static
name|HiveVarcharWritable
name|nextVarchar
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|size
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|HiveVarcharWritable
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|HiveVarcharWritable
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|HiveVarcharWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|HiveVarcharWritable
operator|)
name|previous
expr_stmt|;
block|}
name|BytesColumnVector
name|bytes
init|=
operator|(
name|BytesColumnVector
operator|)
name|vector
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|static
name|BytesWritable
name|nextBinary
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|BytesWritable
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|BytesWritable
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|BytesWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|BytesWritable
operator|)
name|previous
expr_stmt|;
block|}
name|BytesColumnVector
name|bytes
init|=
operator|(
name|BytesColumnVector
operator|)
name|vector
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|bytes
operator|.
name|vector
index|[
name|row
index|]
argument_list|,
name|bytes
operator|.
name|start
index|[
name|row
index|]
argument_list|,
name|bytes
operator|.
name|length
index|[
name|row
index|]
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|static
name|HiveDecimalWritable
name|nextDecimal
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|HiveDecimalWritable
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|HiveDecimalWritable
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|HiveDecimalWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|HiveDecimalWritable
operator|)
name|previous
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|instanceof
name|Decimal64ColumnVector
condition|)
block|{
name|long
name|value
init|=
operator|(
operator|(
name|Decimal64ColumnVector
operator|)
name|vector
operator|)
operator|.
name|vector
index|[
name|row
index|]
decl_stmt|;
name|result
operator|.
name|deserialize64
argument_list|(
name|value
argument_list|,
operator|(
operator|(
name|Decimal64ColumnVector
operator|)
name|vector
operator|)
operator|.
name|scale
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|set
argument_list|(
operator|(
operator|(
name|DecimalColumnVector
operator|)
name|vector
operator|)
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|static
name|DateWritableV2
name|nextDate
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|DateWritableV2
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|DateWritableV2
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|DateWritableV2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|DateWritableV2
operator|)
name|previous
expr_stmt|;
block|}
name|int
name|date
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|vector
argument_list|)
operator|.
name|vector
index|[
name|row
index|]
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|date
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|static
name|TimestampWritableV2
name|nextTimestamp
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|TimestampWritableV2
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|TimestampWritableV2
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|TimestampWritableV2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|TimestampWritableV2
operator|)
name|previous
expr_stmt|;
block|}
name|TimestampColumnVector
name|tcv
init|=
operator|(
name|TimestampColumnVector
operator|)
name|vector
decl_stmt|;
name|result
operator|.
name|setInternal
argument_list|(
name|tcv
operator|.
name|time
index|[
name|row
index|]
argument_list|,
name|tcv
operator|.
name|nanos
index|[
name|row
index|]
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|static
name|OrcStruct
name|nextStruct
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|TypeDescription
name|schema
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|OrcStruct
name|result
decl_stmt|;
name|List
argument_list|<
name|TypeDescription
argument_list|>
name|childrenTypes
init|=
name|schema
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|int
name|numChildren
init|=
name|childrenTypes
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|OrcStruct
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|OrcStruct
argument_list|(
name|numChildren
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|OrcStruct
operator|)
name|previous
expr_stmt|;
name|result
operator|.
name|setNumFields
argument_list|(
name|numChildren
argument_list|)
expr_stmt|;
block|}
name|StructColumnVector
name|struct
init|=
operator|(
name|StructColumnVector
operator|)
name|vector
decl_stmt|;
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
name|numChildren
condition|;
operator|++
name|f
control|)
block|{
name|result
operator|.
name|setFieldValue
argument_list|(
name|f
argument_list|,
name|nextValue
argument_list|(
name|struct
operator|.
name|fields
index|[
name|f
index|]
argument_list|,
name|row
argument_list|,
name|childrenTypes
operator|.
name|get
argument_list|(
name|f
argument_list|)
argument_list|,
name|result
operator|.
name|getFieldValue
argument_list|(
name|f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|static
name|OrcUnion
name|nextUnion
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|TypeDescription
name|schema
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|OrcUnion
name|result
decl_stmt|;
name|List
argument_list|<
name|TypeDescription
argument_list|>
name|childrenTypes
init|=
name|schema
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|OrcUnion
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|OrcUnion
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|OrcUnion
operator|)
name|previous
expr_stmt|;
block|}
name|UnionColumnVector
name|union
init|=
operator|(
name|UnionColumnVector
operator|)
name|vector
decl_stmt|;
name|byte
name|tag
init|=
operator|(
name|byte
operator|)
name|union
operator|.
name|tags
index|[
name|row
index|]
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|tag
argument_list|,
name|nextValue
argument_list|(
name|union
operator|.
name|fields
index|[
name|tag
index|]
argument_list|,
name|row
argument_list|,
name|childrenTypes
operator|.
name|get
argument_list|(
name|tag
argument_list|)
argument_list|,
name|result
operator|.
name|getObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|static
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|nextList
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|TypeDescription
name|schema
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|ArrayList
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|previous
expr_stmt|;
block|}
name|ListColumnVector
name|list
init|=
operator|(
name|ListColumnVector
operator|)
name|vector
decl_stmt|;
name|int
name|length
init|=
operator|(
name|int
operator|)
name|list
operator|.
name|lengths
index|[
name|row
index|]
decl_stmt|;
name|int
name|offset
init|=
operator|(
name|int
operator|)
name|list
operator|.
name|offsets
index|[
name|row
index|]
decl_stmt|;
name|result
operator|.
name|ensureCapacity
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|int
name|oldLength
init|=
name|result
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|TypeDescription
name|childType
init|=
name|schema
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
name|idx
operator|<
name|length
operator|&&
name|idx
operator|<
name|oldLength
condition|)
block|{
name|result
operator|.
name|set
argument_list|(
name|idx
argument_list|,
name|nextValue
argument_list|(
name|list
operator|.
name|child
argument_list|,
name|offset
operator|+
name|idx
argument_list|,
name|childType
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|+=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|length
operator|<
name|oldLength
condition|)
block|{
name|result
operator|.
name|subList
argument_list|(
name|length
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oldLength
operator|<
name|length
condition|)
block|{
while|while
condition|(
name|idx
operator|<
name|length
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|nextValue
argument_list|(
name|list
operator|.
name|child
argument_list|,
name|offset
operator|+
name|idx
argument_list|,
name|childType
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|+=
literal|1
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|static
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|nextMap
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|TypeDescription
name|schema
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|MapColumnVector
name|map
init|=
operator|(
name|MapColumnVector
operator|)
name|vector
decl_stmt|;
name|int
name|length
init|=
operator|(
name|int
operator|)
name|map
operator|.
name|lengths
index|[
name|row
index|]
decl_stmt|;
name|int
name|offset
init|=
operator|(
name|int
operator|)
name|map
operator|.
name|offsets
index|[
name|row
index|]
decl_stmt|;
name|TypeDescription
name|keyType
init|=
name|schema
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|TypeDescription
name|valueType
init|=
name|schema
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|LinkedHashMap
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|previous
expr_stmt|;
comment|// I couldn't think of a good way to reuse the keys and value objects
comment|// without even more allocations, so take the easy and safe approach.
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|e
init|=
literal|0
init|;
name|e
operator|<
name|length
condition|;
operator|++
name|e
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|nextValue
argument_list|(
name|map
operator|.
name|keys
argument_list|,
name|e
operator|+
name|offset
argument_list|,
name|keyType
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nextValue
argument_list|(
name|map
operator|.
name|values
argument_list|,
name|e
operator|+
name|offset
argument_list|,
name|valueType
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|static
name|Object
name|nextValue
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|TypeDescription
name|schema
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
switch|switch
condition|(
name|schema
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
name|nextBoolean
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|BYTE
case|:
return|return
name|nextByte
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|SHORT
case|:
return|return
name|nextShort
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|INT
case|:
return|return
name|nextInt
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
name|nextLong
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
name|nextFloat
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|nextDouble
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|STRING
case|:
return|return
name|nextString
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|CHAR
case|:
return|return
name|nextChar
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|schema
operator|.
name|getMaxLength
argument_list|()
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|VARCHAR
case|:
return|return
name|nextVarchar
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|schema
operator|.
name|getMaxLength
argument_list|()
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|BINARY
case|:
return|return
name|nextBinary
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|DECIMAL
case|:
return|return
name|nextDecimal
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
name|nextDate
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|nextTimestamp
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|STRUCT
case|:
return|return
name|nextStruct
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|schema
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|UNION
case|:
return|return
name|nextUnion
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|schema
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|LIST
case|:
return|return
name|nextList
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|schema
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|MAP
case|:
return|return
name|nextMap
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|schema
argument_list|,
name|previous
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown type "
operator|+
name|schema
argument_list|)
throw|;
block|}
block|}
comment|/* Routines for copying between VectorizedRowBatches */
name|void
name|copyLongColumn
parameter_list|(
name|ColumnVector
name|destination
parameter_list|,
name|ColumnVector
name|source
parameter_list|,
name|int
name|sourceOffset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|LongColumnVector
name|lsource
init|=
operator|(
name|LongColumnVector
operator|)
name|source
decl_stmt|;
name|LongColumnVector
name|ldest
init|=
operator|(
name|LongColumnVector
operator|)
name|destination
decl_stmt|;
name|ldest
operator|.
name|isRepeating
operator|=
name|lsource
operator|.
name|isRepeating
expr_stmt|;
name|ldest
operator|.
name|noNulls
operator|=
name|lsource
operator|.
name|noNulls
expr_stmt|;
if|if
condition|(
name|source
operator|.
name|isRepeating
condition|)
block|{
name|ldest
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
name|lsource
operator|.
name|isNull
index|[
literal|0
index|]
expr_stmt|;
name|ldest
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|lsource
operator|.
name|vector
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|lsource
operator|.
name|noNulls
condition|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|length
condition|;
operator|++
name|r
control|)
block|{
name|ldest
operator|.
name|isNull
index|[
name|r
index|]
operator|=
name|lsource
operator|.
name|isNull
index|[
name|sourceOffset
operator|+
name|r
index|]
expr_stmt|;
name|ldest
operator|.
name|vector
index|[
name|r
index|]
operator|=
name|lsource
operator|.
name|vector
index|[
name|sourceOffset
operator|+
name|r
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|length
condition|;
operator|++
name|r
control|)
block|{
name|ldest
operator|.
name|vector
index|[
name|r
index|]
operator|=
name|lsource
operator|.
name|vector
index|[
name|sourceOffset
operator|+
name|r
index|]
expr_stmt|;
block|}
block|}
block|}
block|}
name|void
name|copyDoubleColumn
parameter_list|(
name|ColumnVector
name|destination
parameter_list|,
name|ColumnVector
name|source
parameter_list|,
name|int
name|sourceOffset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|DoubleColumnVector
name|castedSource
init|=
operator|(
name|DoubleColumnVector
operator|)
name|source
decl_stmt|;
name|DoubleColumnVector
name|castedDestination
init|=
operator|(
name|DoubleColumnVector
operator|)
name|destination
decl_stmt|;
if|if
condition|(
name|source
operator|.
name|isRepeating
condition|)
block|{
name|castedDestination
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|castedDestination
operator|.
name|noNulls
operator|=
name|castedSource
operator|.
name|noNulls
expr_stmt|;
name|castedDestination
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
name|castedSource
operator|.
name|isNull
index|[
literal|0
index|]
expr_stmt|;
name|castedDestination
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|castedSource
operator|.
name|vector
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|castedSource
operator|.
name|noNulls
condition|)
block|{
name|castedDestination
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|length
condition|;
operator|++
name|r
control|)
block|{
name|castedDestination
operator|.
name|isNull
index|[
name|r
index|]
operator|=
name|castedSource
operator|.
name|isNull
index|[
name|sourceOffset
operator|+
name|r
index|]
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|length
condition|;
operator|++
name|r
control|)
block|{
name|castedDestination
operator|.
name|vector
index|[
name|r
index|]
operator|=
name|castedSource
operator|.
name|vector
index|[
name|sourceOffset
operator|+
name|r
index|]
expr_stmt|;
block|}
block|}
block|}
name|void
name|copyTimestampColumn
parameter_list|(
name|ColumnVector
name|destination
parameter_list|,
name|ColumnVector
name|source
parameter_list|,
name|int
name|sourceOffset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|TimestampColumnVector
name|castedSource
init|=
operator|(
name|TimestampColumnVector
operator|)
name|source
decl_stmt|;
name|TimestampColumnVector
name|castedDestination
init|=
operator|(
name|TimestampColumnVector
operator|)
name|destination
decl_stmt|;
name|castedDestination
operator|.
name|isRepeating
operator|=
name|castedSource
operator|.
name|isRepeating
expr_stmt|;
name|castedDestination
operator|.
name|noNulls
operator|=
name|castedSource
operator|.
name|noNulls
expr_stmt|;
if|if
condition|(
name|source
operator|.
name|isRepeating
condition|)
block|{
name|castedDestination
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
name|castedSource
operator|.
name|isNull
index|[
literal|0
index|]
expr_stmt|;
name|castedDestination
operator|.
name|time
index|[
literal|0
index|]
operator|=
name|castedSource
operator|.
name|time
index|[
literal|0
index|]
expr_stmt|;
name|castedDestination
operator|.
name|nanos
index|[
literal|0
index|]
operator|=
name|castedSource
operator|.
name|nanos
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|castedSource
operator|.
name|noNulls
condition|)
block|{
name|castedDestination
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|length
condition|;
operator|++
name|r
control|)
block|{
name|castedDestination
operator|.
name|isNull
index|[
name|r
index|]
operator|=
name|castedSource
operator|.
name|isNull
index|[
name|sourceOffset
operator|+
name|r
index|]
expr_stmt|;
name|castedDestination
operator|.
name|time
index|[
name|r
index|]
operator|=
name|castedSource
operator|.
name|time
index|[
name|sourceOffset
operator|+
name|r
index|]
expr_stmt|;
name|castedDestination
operator|.
name|nanos
index|[
name|r
index|]
operator|=
name|castedSource
operator|.
name|nanos
index|[
name|sourceOffset
operator|+
name|r
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|length
condition|;
operator|++
name|r
control|)
block|{
name|castedDestination
operator|.
name|time
index|[
name|r
index|]
operator|=
name|castedSource
operator|.
name|time
index|[
name|sourceOffset
operator|+
name|r
index|]
expr_stmt|;
name|castedDestination
operator|.
name|nanos
index|[
name|r
index|]
operator|=
name|castedSource
operator|.
name|nanos
index|[
name|sourceOffset
operator|+
name|r
index|]
expr_stmt|;
block|}
block|}
block|}
block|}
name|void
name|copyDecimalColumn
parameter_list|(
name|ColumnVector
name|destination
parameter_list|,
name|ColumnVector
name|source
parameter_list|,
name|int
name|sourceOffset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|DecimalColumnVector
name|castedSource
init|=
operator|(
name|DecimalColumnVector
operator|)
name|source
decl_stmt|;
name|DecimalColumnVector
name|castedDestination
init|=
operator|(
name|DecimalColumnVector
operator|)
name|destination
decl_stmt|;
name|castedDestination
operator|.
name|isRepeating
operator|=
name|castedSource
operator|.
name|isRepeating
expr_stmt|;
name|castedDestination
operator|.
name|noNulls
operator|=
name|castedSource
operator|.
name|noNulls
expr_stmt|;
if|if
condition|(
name|source
operator|.
name|isRepeating
condition|)
block|{
name|castedDestination
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
name|castedSource
operator|.
name|isNull
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|castedSource
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|castedDestination
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|castedSource
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|castedSource
operator|.
name|noNulls
condition|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|length
condition|;
operator|++
name|r
control|)
block|{
name|castedDestination
operator|.
name|isNull
index|[
name|r
index|]
operator|=
name|castedSource
operator|.
name|isNull
index|[
name|sourceOffset
operator|+
name|r
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|castedDestination
operator|.
name|isNull
index|[
name|r
index|]
condition|)
block|{
name|castedDestination
operator|.
name|set
argument_list|(
name|r
argument_list|,
name|castedSource
operator|.
name|vector
index|[
name|r
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|length
condition|;
operator|++
name|r
control|)
block|{
name|castedDestination
operator|.
name|set
argument_list|(
name|r
argument_list|,
name|castedSource
operator|.
name|vector
index|[
name|r
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|void
name|copyBytesColumn
parameter_list|(
name|ColumnVector
name|destination
parameter_list|,
name|ColumnVector
name|source
parameter_list|,
name|int
name|sourceOffset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|BytesColumnVector
name|castedSource
init|=
operator|(
name|BytesColumnVector
operator|)
name|source
decl_stmt|;
name|BytesColumnVector
name|castedDestination
init|=
operator|(
name|BytesColumnVector
operator|)
name|destination
decl_stmt|;
name|castedDestination
operator|.
name|isRepeating
operator|=
name|castedSource
operator|.
name|isRepeating
expr_stmt|;
name|castedDestination
operator|.
name|noNulls
operator|=
name|castedSource
operator|.
name|noNulls
expr_stmt|;
if|if
condition|(
name|source
operator|.
name|isRepeating
condition|)
block|{
name|castedDestination
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
name|castedSource
operator|.
name|isNull
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|castedSource
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|castedDestination
operator|.
name|setVal
argument_list|(
literal|0
argument_list|,
name|castedSource
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|castedSource
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|castedSource
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|castedSource
operator|.
name|noNulls
condition|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|length
condition|;
operator|++
name|r
control|)
block|{
name|castedDestination
operator|.
name|isNull
index|[
name|r
index|]
operator|=
name|castedSource
operator|.
name|isNull
index|[
name|sourceOffset
operator|+
name|r
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|castedDestination
operator|.
name|isNull
index|[
name|r
index|]
condition|)
block|{
name|castedDestination
operator|.
name|setVal
argument_list|(
name|r
argument_list|,
name|castedSource
operator|.
name|vector
index|[
name|sourceOffset
operator|+
name|r
index|]
argument_list|,
name|castedSource
operator|.
name|start
index|[
name|sourceOffset
operator|+
name|r
index|]
argument_list|,
name|castedSource
operator|.
name|length
index|[
name|sourceOffset
operator|+
name|r
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|length
condition|;
operator|++
name|r
control|)
block|{
name|castedDestination
operator|.
name|setVal
argument_list|(
name|r
argument_list|,
name|castedSource
operator|.
name|vector
index|[
name|sourceOffset
operator|+
name|r
index|]
argument_list|,
name|castedSource
operator|.
name|start
index|[
name|sourceOffset
operator|+
name|r
index|]
argument_list|,
name|castedSource
operator|.
name|length
index|[
name|sourceOffset
operator|+
name|r
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|void
name|copyStructColumn
parameter_list|(
name|ColumnVector
name|destination
parameter_list|,
name|ColumnVector
name|source
parameter_list|,
name|int
name|sourceOffset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|StructColumnVector
name|castedSource
init|=
operator|(
name|StructColumnVector
operator|)
name|source
decl_stmt|;
name|StructColumnVector
name|castedDestination
init|=
operator|(
name|StructColumnVector
operator|)
name|destination
decl_stmt|;
name|castedDestination
operator|.
name|isRepeating
operator|=
name|castedSource
operator|.
name|isRepeating
expr_stmt|;
name|castedDestination
operator|.
name|noNulls
operator|=
name|castedSource
operator|.
name|noNulls
expr_stmt|;
if|if
condition|(
name|source
operator|.
name|isRepeating
condition|)
block|{
name|castedDestination
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
name|castedSource
operator|.
name|isNull
index|[
literal|0
index|]
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|>
name|castedSource
operator|.
name|fields
operator|.
name|length
condition|;
operator|++
name|c
control|)
block|{
name|copyColumn
argument_list|(
name|castedDestination
operator|.
name|fields
index|[
name|c
index|]
argument_list|,
name|castedSource
operator|.
name|fields
index|[
name|c
index|]
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|castedSource
operator|.
name|noNulls
condition|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|length
condition|;
operator|++
name|r
control|)
block|{
name|castedDestination
operator|.
name|isNull
index|[
name|r
index|]
operator|=
name|castedSource
operator|.
name|isNull
index|[
name|sourceOffset
operator|+
name|r
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|>
name|castedSource
operator|.
name|fields
operator|.
name|length
condition|;
operator|++
name|c
control|)
block|{
name|copyColumn
argument_list|(
name|castedDestination
operator|.
name|fields
index|[
name|c
index|]
argument_list|,
name|castedSource
operator|.
name|fields
index|[
name|c
index|]
argument_list|,
name|sourceOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|void
name|copyUnionColumn
parameter_list|(
name|ColumnVector
name|destination
parameter_list|,
name|ColumnVector
name|source
parameter_list|,
name|int
name|sourceOffset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|UnionColumnVector
name|castedSource
init|=
operator|(
name|UnionColumnVector
operator|)
name|source
decl_stmt|;
name|UnionColumnVector
name|castedDestination
init|=
operator|(
name|UnionColumnVector
operator|)
name|destination
decl_stmt|;
name|castedDestination
operator|.
name|isRepeating
operator|=
name|castedSource
operator|.
name|isRepeating
expr_stmt|;
name|castedDestination
operator|.
name|noNulls
operator|=
name|castedSource
operator|.
name|noNulls
expr_stmt|;
if|if
condition|(
name|source
operator|.
name|isRepeating
condition|)
block|{
name|castedDestination
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
name|castedSource
operator|.
name|isNull
index|[
literal|0
index|]
expr_stmt|;
name|int
name|tag
init|=
name|castedSource
operator|.
name|tags
index|[
literal|0
index|]
decl_stmt|;
name|castedDestination
operator|.
name|tags
index|[
literal|0
index|]
operator|=
name|tag
expr_stmt|;
if|if
condition|(
operator|!
name|castedDestination
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|copyColumn
argument_list|(
name|castedDestination
operator|.
name|fields
index|[
name|tag
index|]
argument_list|,
name|castedSource
operator|.
name|fields
index|[
name|tag
index|]
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|castedSource
operator|.
name|noNulls
condition|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|length
condition|;
operator|++
name|r
control|)
block|{
name|castedDestination
operator|.
name|isNull
index|[
name|r
index|]
operator|=
name|castedSource
operator|.
name|isNull
index|[
name|sourceOffset
operator|+
name|r
index|]
expr_stmt|;
name|castedDestination
operator|.
name|tags
index|[
name|r
index|]
operator|=
name|castedSource
operator|.
name|tags
index|[
name|sourceOffset
operator|+
name|r
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|length
condition|;
operator|++
name|r
control|)
block|{
name|castedDestination
operator|.
name|tags
index|[
name|r
index|]
operator|=
name|castedSource
operator|.
name|tags
index|[
name|sourceOffset
operator|+
name|r
index|]
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|>
name|castedSource
operator|.
name|fields
operator|.
name|length
condition|;
operator|++
name|c
control|)
block|{
name|copyColumn
argument_list|(
name|castedDestination
operator|.
name|fields
index|[
name|c
index|]
argument_list|,
name|castedSource
operator|.
name|fields
index|[
name|c
index|]
argument_list|,
name|sourceOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|copyListColumn
parameter_list|(
name|ColumnVector
name|destination
parameter_list|,
name|ColumnVector
name|source
parameter_list|,
name|int
name|sourceOffset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|ListColumnVector
name|castedSource
init|=
operator|(
name|ListColumnVector
operator|)
name|source
decl_stmt|;
name|ListColumnVector
name|castedDestination
init|=
operator|(
name|ListColumnVector
operator|)
name|destination
decl_stmt|;
name|castedDestination
operator|.
name|isRepeating
operator|=
name|castedSource
operator|.
name|noNulls
expr_stmt|;
name|castedDestination
operator|.
name|noNulls
operator|=
name|castedSource
operator|.
name|noNulls
expr_stmt|;
if|if
condition|(
name|source
operator|.
name|isRepeating
condition|)
block|{
name|castedDestination
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
name|castedSource
operator|.
name|isNull
index|[
literal|0
index|]
expr_stmt|;
name|castedDestination
operator|.
name|offsets
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|castedDestination
operator|.
name|lengths
index|[
literal|0
index|]
operator|=
name|castedSource
operator|.
name|lengths
index|[
literal|0
index|]
expr_stmt|;
name|copyColumn
argument_list|(
name|castedDestination
operator|.
name|child
argument_list|,
name|castedSource
operator|.
name|child
argument_list|,
operator|(
name|int
operator|)
name|castedSource
operator|.
name|offsets
index|[
literal|0
index|]
argument_list|,
operator|(
name|int
operator|)
name|castedSource
operator|.
name|lengths
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|castedSource
operator|.
name|noNulls
condition|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|length
condition|;
operator|++
name|r
control|)
block|{
name|castedDestination
operator|.
name|isNull
index|[
name|r
index|]
operator|=
name|castedSource
operator|.
name|isNull
index|[
name|sourceOffset
operator|+
name|r
index|]
expr_stmt|;
block|}
block|}
name|int
name|minOffset
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|int
name|maxOffset
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|length
condition|;
operator|++
name|r
control|)
block|{
name|int
name|childOffset
init|=
operator|(
name|int
operator|)
name|castedSource
operator|.
name|offsets
index|[
name|r
operator|+
name|sourceOffset
index|]
decl_stmt|;
name|int
name|childLength
init|=
operator|(
name|int
operator|)
name|castedSource
operator|.
name|lengths
index|[
name|r
operator|+
name|sourceOffset
index|]
decl_stmt|;
name|castedDestination
operator|.
name|offsets
index|[
name|r
index|]
operator|=
name|childOffset
expr_stmt|;
name|castedDestination
operator|.
name|lengths
index|[
name|r
index|]
operator|=
name|childLength
expr_stmt|;
name|minOffset
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minOffset
argument_list|,
name|childOffset
argument_list|)
expr_stmt|;
name|maxOffset
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxOffset
argument_list|,
name|childOffset
operator|+
name|childLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minOffset
operator|<=
name|maxOffset
condition|)
block|{
name|castedDestination
operator|.
name|childCount
operator|=
name|maxOffset
operator|-
name|minOffset
operator|+
literal|1
expr_stmt|;
name|copyColumn
argument_list|(
name|castedDestination
operator|.
name|child
argument_list|,
name|castedSource
operator|.
name|child
argument_list|,
name|minOffset
argument_list|,
name|castedDestination
operator|.
name|childCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|castedDestination
operator|.
name|childCount
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
name|void
name|copyMapColumn
parameter_list|(
name|ColumnVector
name|destination
parameter_list|,
name|ColumnVector
name|source
parameter_list|,
name|int
name|sourceOffset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|MapColumnVector
name|castedSource
init|=
operator|(
name|MapColumnVector
operator|)
name|source
decl_stmt|;
name|MapColumnVector
name|castedDestination
init|=
operator|(
name|MapColumnVector
operator|)
name|destination
decl_stmt|;
name|castedDestination
operator|.
name|isRepeating
operator|=
name|castedSource
operator|.
name|noNulls
expr_stmt|;
name|castedDestination
operator|.
name|noNulls
operator|=
name|castedSource
operator|.
name|noNulls
expr_stmt|;
if|if
condition|(
name|source
operator|.
name|isRepeating
condition|)
block|{
name|castedDestination
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
name|castedSource
operator|.
name|isNull
index|[
literal|0
index|]
expr_stmt|;
name|castedDestination
operator|.
name|offsets
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|castedDestination
operator|.
name|lengths
index|[
literal|0
index|]
operator|=
name|castedSource
operator|.
name|lengths
index|[
literal|0
index|]
expr_stmt|;
name|copyColumn
argument_list|(
name|castedDestination
operator|.
name|keys
argument_list|,
name|castedSource
operator|.
name|keys
argument_list|,
operator|(
name|int
operator|)
name|castedSource
operator|.
name|offsets
index|[
literal|0
index|]
argument_list|,
operator|(
name|int
operator|)
name|castedSource
operator|.
name|lengths
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|copyColumn
argument_list|(
name|castedDestination
operator|.
name|values
argument_list|,
name|castedSource
operator|.
name|values
argument_list|,
operator|(
name|int
operator|)
name|castedSource
operator|.
name|offsets
index|[
literal|0
index|]
argument_list|,
operator|(
name|int
operator|)
name|castedSource
operator|.
name|lengths
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|castedSource
operator|.
name|noNulls
condition|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|length
condition|;
operator|++
name|r
control|)
block|{
name|castedDestination
operator|.
name|isNull
index|[
name|r
index|]
operator|=
name|castedSource
operator|.
name|isNull
index|[
name|sourceOffset
operator|+
name|r
index|]
expr_stmt|;
block|}
block|}
name|int
name|minOffset
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|int
name|maxOffset
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|length
condition|;
operator|++
name|r
control|)
block|{
name|int
name|childOffset
init|=
operator|(
name|int
operator|)
name|castedSource
operator|.
name|offsets
index|[
name|r
operator|+
name|sourceOffset
index|]
decl_stmt|;
name|int
name|childLength
init|=
operator|(
name|int
operator|)
name|castedSource
operator|.
name|lengths
index|[
name|r
operator|+
name|sourceOffset
index|]
decl_stmt|;
name|castedDestination
operator|.
name|offsets
index|[
name|r
index|]
operator|=
name|childOffset
expr_stmt|;
name|castedDestination
operator|.
name|lengths
index|[
name|r
index|]
operator|=
name|childLength
expr_stmt|;
name|minOffset
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minOffset
argument_list|,
name|childOffset
argument_list|)
expr_stmt|;
name|maxOffset
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxOffset
argument_list|,
name|childOffset
operator|+
name|childLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minOffset
operator|<=
name|maxOffset
condition|)
block|{
name|castedDestination
operator|.
name|childCount
operator|=
name|maxOffset
operator|-
name|minOffset
operator|+
literal|1
expr_stmt|;
name|copyColumn
argument_list|(
name|castedDestination
operator|.
name|keys
argument_list|,
name|castedSource
operator|.
name|keys
argument_list|,
name|minOffset
argument_list|,
name|castedDestination
operator|.
name|childCount
argument_list|)
expr_stmt|;
name|copyColumn
argument_list|(
name|castedDestination
operator|.
name|values
argument_list|,
name|castedSource
operator|.
name|values
argument_list|,
name|minOffset
argument_list|,
name|castedDestination
operator|.
name|childCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|castedDestination
operator|.
name|childCount
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
name|void
name|copyColumn
parameter_list|(
name|ColumnVector
name|destination
parameter_list|,
name|ColumnVector
name|source
parameter_list|,
name|int
name|sourceOffset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|source
operator|.
name|getClass
argument_list|()
operator|==
name|LongColumnVector
operator|.
name|class
condition|)
block|{
name|copyLongColumn
argument_list|(
name|destination
argument_list|,
name|source
argument_list|,
name|sourceOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|.
name|getClass
argument_list|()
operator|==
name|DoubleColumnVector
operator|.
name|class
condition|)
block|{
name|copyDoubleColumn
argument_list|(
name|destination
argument_list|,
name|source
argument_list|,
name|sourceOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|.
name|getClass
argument_list|()
operator|==
name|BytesColumnVector
operator|.
name|class
condition|)
block|{
name|copyBytesColumn
argument_list|(
name|destination
argument_list|,
name|source
argument_list|,
name|sourceOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|.
name|getClass
argument_list|()
operator|==
name|TimestampColumnVector
operator|.
name|class
condition|)
block|{
name|copyTimestampColumn
argument_list|(
name|destination
argument_list|,
name|source
argument_list|,
name|sourceOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|.
name|getClass
argument_list|()
operator|==
name|DecimalColumnVector
operator|.
name|class
condition|)
block|{
name|copyDecimalColumn
argument_list|(
name|destination
argument_list|,
name|source
argument_list|,
name|sourceOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|.
name|getClass
argument_list|()
operator|==
name|StructColumnVector
operator|.
name|class
condition|)
block|{
name|copyStructColumn
argument_list|(
name|destination
argument_list|,
name|source
argument_list|,
name|sourceOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|.
name|getClass
argument_list|()
operator|==
name|UnionColumnVector
operator|.
name|class
condition|)
block|{
name|copyUnionColumn
argument_list|(
name|destination
argument_list|,
name|source
argument_list|,
name|sourceOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|.
name|getClass
argument_list|()
operator|==
name|ListColumnVector
operator|.
name|class
condition|)
block|{
name|copyListColumn
argument_list|(
name|destination
argument_list|,
name|source
argument_list|,
name|sourceOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|.
name|getClass
argument_list|()
operator|==
name|MapColumnVector
operator|.
name|class
condition|)
block|{
name|copyMapColumn
argument_list|(
name|destination
argument_list|,
name|source
argument_list|,
name|sourceOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Copy part of a batch into the destination batch.    * @param destination the batch to copy into    * @param source the batch to copy from    * @param sourceStart the row number to start from in the source    * @return the number of rows copied    */
name|void
name|copyIntoBatch
parameter_list|(
name|VectorizedRowBatch
name|destination
parameter_list|,
name|VectorizedRowBatch
name|source
parameter_list|,
name|int
name|sourceStart
parameter_list|)
block|{
name|int
name|rows
init|=
name|Math
operator|.
name|min
argument_list|(
name|source
operator|.
name|size
operator|-
name|sourceStart
argument_list|,
name|destination
operator|.
name|getMaxSize
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|source
operator|.
name|cols
operator|.
name|length
condition|;
operator|++
name|c
control|)
block|{
name|destination
operator|.
name|cols
index|[
name|c
index|]
operator|.
name|reset
argument_list|()
expr_stmt|;
name|copyColumn
argument_list|(
name|destination
operator|.
name|cols
index|[
name|c
index|]
argument_list|,
name|source
operator|.
name|cols
index|[
name|c
index|]
argument_list|,
name|sourceStart
argument_list|,
name|rows
argument_list|)
expr_stmt|;
block|}
name|destination
operator|.
name|size
operator|=
name|rows
expr_stmt|;
block|}
block|}
end_class

end_unit

