begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPredicateList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
operator|.
name|ValuesReduceRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCorrelVariable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexDynamicParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexFieldAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexOver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexRangeRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexVisitorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlRowOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Stacks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveRelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveRexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveRexUtil
operator|.
name|ExprSimplifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Collection of planner rules that apply various simplifying transformations on  * RexNode trees. Currently, there are two transformations:  *  *<ul>  *<li>Constant reduction, which evaluates constant subtrees, replacing them  * with a corresponding RexLiteral  *<li>Removal of redundant casts, which occurs when the argument into the cast  * is the same as the type of the resulting cast expression  *</ul>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|HiveReduceExpressionsRule
extends|extends
name|RelOptRule
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveReduceExpressionsRule
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//~ Static fields/initializers ---------------------------------------------
comment|/**    * Regular expression that matches the description of all instances of this    * rule and {@link ValuesReduceRule} also. Use    * it to prevent the planner from invoking these rules.    */
specifier|public
specifier|static
specifier|final
name|Pattern
name|EXCLUSION_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"Reduce(Expressions|Values)Rule.*"
argument_list|)
decl_stmt|;
comment|/**    * Singleton rule that reduces constants inside a    * {@link org.apache.calcite.rel.logical.HiveFilter}.    */
specifier|public
specifier|static
specifier|final
name|HiveReduceExpressionsRule
name|FILTER_INSTANCE
init|=
operator|new
name|FilterReduceExpressionsRule
argument_list|(
name|HiveFilter
operator|.
name|class
argument_list|,
name|HiveRelFactories
operator|.
name|HIVE_BUILDER
argument_list|)
decl_stmt|;
comment|/**    * Singleton rule that reduces constants inside a    * {@link org.apache.calcite.rel.logical.HiveProject}.    */
specifier|public
specifier|static
specifier|final
name|HiveReduceExpressionsRule
name|PROJECT_INSTANCE
init|=
operator|new
name|ProjectReduceExpressionsRule
argument_list|(
name|HiveProject
operator|.
name|class
argument_list|,
name|HiveRelFactories
operator|.
name|HIVE_BUILDER
argument_list|)
decl_stmt|;
comment|/**    * Singleton rule that reduces constants inside a    * {@link org.apache.calcite.rel.core.HiveJoin}.    */
specifier|public
specifier|static
specifier|final
name|HiveReduceExpressionsRule
name|JOIN_INSTANCE
init|=
operator|new
name|JoinReduceExpressionsRule
argument_list|(
name|HiveJoin
operator|.
name|class
argument_list|,
name|HiveRelFactories
operator|.
name|HIVE_BUILDER
argument_list|)
decl_stmt|;
comment|/**    * Rule that reduces constants inside a {@link org.apache.calcite.rel.core.Filter}.    * If the condition is a constant, the filter is removed (if TRUE) or replaced with    * an empty {@link org.apache.calcite.rel.core.Values} (if FALSE or NULL).    */
specifier|public
specifier|static
class|class
name|FilterReduceExpressionsRule
extends|extends
name|HiveReduceExpressionsRule
block|{
specifier|public
name|FilterReduceExpressionsRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Filter
argument_list|>
name|filterClass
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|super
argument_list|(
name|filterClass
argument_list|,
name|relBuilderFactory
argument_list|,
literal|"HiveReduceExpressionsRule(Filter)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Filter
name|filter
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|expList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|)
decl_stmt|;
name|RexNode
name|newConditionExp
decl_stmt|;
name|boolean
name|reduced
decl_stmt|;
specifier|final
name|RelOptPredicateList
name|predicates
init|=
name|RelMetadataQuery
operator|.
name|instance
argument_list|()
operator|.
name|getPulledUpPredicates
argument_list|(
name|filter
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reduceExpressions
argument_list|(
name|filter
argument_list|,
name|expList
argument_list|,
name|predicates
argument_list|,
literal|true
argument_list|)
condition|)
block|{
assert|assert
name|expList
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
name|newConditionExp
operator|=
name|expList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|reduced
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// No reduction, but let's still test the original
comment|// predicate to see if it was already a constant,
comment|// in which case we don't need any runtime decision
comment|// about filtering.
name|newConditionExp
operator|=
name|filter
operator|.
name|getCondition
argument_list|()
expr_stmt|;
name|reduced
operator|=
literal|false
expr_stmt|;
block|}
comment|// Even if no reduction, let's still test the original
comment|// predicate to see if it was already a constant,
comment|// in which case we don't need any runtime decision
comment|// about filtering.
comment|// TODO: support LogicalValues
if|if
condition|(
name|newConditionExp
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
name|call
operator|.
name|transformTo
argument_list|(
name|filter
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|reduced
condition|)
block|{
name|call
operator|.
name|transformTo
argument_list|(
name|call
operator|.
name|builder
argument_list|()
operator|.
name|push
argument_list|(
name|filter
operator|.
name|getInput
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|newConditionExp
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
comment|// New plan is absolutely better than old plan.
name|call
operator|.
name|getPlanner
argument_list|()
operator|.
name|setImportance
argument_list|(
name|filter
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Rule that reduces constants inside a {@link org.apache.calcite.rel.core.Project}.    */
specifier|public
specifier|static
class|class
name|ProjectReduceExpressionsRule
extends|extends
name|HiveReduceExpressionsRule
block|{
specifier|public
name|ProjectReduceExpressionsRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Project
argument_list|>
name|projectClass
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|super
argument_list|(
name|projectClass
argument_list|,
name|relBuilderFactory
argument_list|,
literal|"HiveReduceExpressionsRule(Project)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|Project
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RelOptPredicateList
name|predicates
init|=
name|RelMetadataQuery
operator|.
name|instance
argument_list|()
operator|.
name|getPulledUpPredicates
argument_list|(
name|project
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|expList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|project
operator|.
name|getProjects
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reduceExpressions
argument_list|(
name|project
argument_list|,
name|expList
argument_list|,
name|predicates
argument_list|)
condition|)
block|{
name|RelNode
name|newProject
init|=
name|call
operator|.
name|builder
argument_list|()
operator|.
name|push
argument_list|(
name|project
operator|.
name|getInput
argument_list|()
argument_list|)
operator|.
name|project
argument_list|(
name|expList
argument_list|,
name|project
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newProject
argument_list|)
expr_stmt|;
comment|// New plan is absolutely better than old plan.
name|call
operator|.
name|getPlanner
argument_list|()
operator|.
name|setImportance
argument_list|(
name|project
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Rule that reduces constants inside a {@link org.apache.calcite.rel.core.HiveJoin}.    */
specifier|public
specifier|static
class|class
name|JoinReduceExpressionsRule
extends|extends
name|HiveReduceExpressionsRule
block|{
specifier|public
name|JoinReduceExpressionsRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|HiveJoin
argument_list|>
name|joinClass
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|)
block|{
name|super
argument_list|(
name|joinClass
argument_list|,
name|relBuilderFactory
argument_list|,
literal|"HiveReduceExpressionsRule(HiveJoin)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|HiveJoin
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|expList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|join
operator|.
name|getCondition
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|join
operator|.
name|getLeft
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
name|RelMetadataQuery
name|mq
init|=
name|RelMetadataQuery
operator|.
name|instance
argument_list|()
decl_stmt|;
specifier|final
name|RelOptPredicateList
name|leftPredicates
init|=
name|mq
operator|.
name|getPulledUpPredicates
argument_list|(
name|join
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelOptPredicateList
name|rightPredicates
init|=
name|mq
operator|.
name|getPulledUpPredicates
argument_list|(
name|join
operator|.
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RelOptPredicateList
name|predicates
init|=
name|leftPredicates
operator|.
name|union
argument_list|(
name|rightPredicates
operator|.
name|shift
argument_list|(
name|fieldCount
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|reduceExpressions
argument_list|(
name|join
argument_list|,
name|expList
argument_list|,
name|predicates
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return;
block|}
name|call
operator|.
name|transformTo
argument_list|(
name|join
operator|.
name|copy
argument_list|(
name|join
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|expList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|join
operator|.
name|getLeft
argument_list|()
argument_list|,
name|join
operator|.
name|getRight
argument_list|()
argument_list|,
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|,
name|join
operator|.
name|isSemiJoinDone
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// New plan is absolutely better than old plan.
name|call
operator|.
name|getPlanner
argument_list|()
operator|.
name|setImportance
argument_list|(
name|join
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
block|}
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a HiveReduceExpressionsRule.    *    * @param clazz class of rels to which this rule should apply    */
specifier|protected
name|HiveReduceExpressionsRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|RelNode
argument_list|>
name|clazz
parameter_list|,
name|RelBuilderFactory
name|relBuilderFactory
parameter_list|,
name|String
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|clazz
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
name|relBuilderFactory
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
comment|/**    * Reduces a list of expressions.    *    * @param rel     Relational expression    * @param expList List of expressions, modified in place    * @param predicates Constraints known to hold on input expressions    * @return whether reduction found something to change, and succeeded    */
specifier|protected
specifier|static
name|boolean
name|reduceExpressions
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|expList
parameter_list|,
name|RelOptPredicateList
name|predicates
parameter_list|)
block|{
return|return
name|reduceExpressions
argument_list|(
name|rel
argument_list|,
name|expList
argument_list|,
name|predicates
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Reduces a list of expressions.    *    * @param rel     Relational expression    * @param expList List of expressions, modified in place    * @param predicates Constraints known to hold on input expressions    * @param unknownAsFalse Whether UNKNOWN will be treated as FALSE    *    * @return whether reduction found something to change, and succeeded    */
specifier|protected
specifier|static
name|boolean
name|reduceExpressions
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|expList
parameter_list|,
name|RelOptPredicateList
name|predicates
parameter_list|,
name|boolean
name|unknownAsFalse
parameter_list|)
block|{
name|RexBuilder
name|rexBuilder
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|boolean
name|reduced
init|=
name|reduceExpressionsInternal
argument_list|(
name|rel
argument_list|,
name|expList
argument_list|,
name|predicates
argument_list|)
decl_stmt|;
comment|// Simplify preds in place
name|ExprSimplifier
name|simplifier
init|=
operator|new
name|ExprSimplifier
argument_list|(
name|rexBuilder
argument_list|,
name|unknownAsFalse
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|expList2
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|expList
argument_list|)
decl_stmt|;
name|simplifier
operator|.
name|mutate
argument_list|(
name|expList2
argument_list|)
expr_stmt|;
name|boolean
name|simplified
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|expList2
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|expList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|expList
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|expList
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|expList2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|simplified
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|reduced
operator|||
name|simplified
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|reduceExpressionsInternal
parameter_list|(
name|RelNode
name|rel
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|expList
parameter_list|,
name|RelOptPredicateList
name|predicates
parameter_list|)
block|{
name|RexBuilder
name|rexBuilder
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
comment|// Replace predicates on CASE to CASE on predicates.
operator|new
name|CaseShuttle
argument_list|()
operator|.
name|mutate
argument_list|(
name|expList
argument_list|)
expr_stmt|;
comment|// Find reducible expressions.
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|constExps
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Boolean
argument_list|>
name|addCasts
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|removableCasts
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableMap
argument_list|<
name|RexNode
argument_list|,
name|RexNode
argument_list|>
name|constants
init|=
name|predicateConstants
argument_list|(
name|RexNode
operator|.
name|class
argument_list|,
name|rexBuilder
argument_list|,
name|predicates
argument_list|)
decl_stmt|;
name|findReducibleExps
argument_list|(
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
argument_list|,
name|expList
argument_list|,
name|constants
argument_list|,
name|constExps
argument_list|,
name|addCasts
argument_list|,
name|removableCasts
argument_list|)
expr_stmt|;
if|if
condition|(
name|constExps
operator|.
name|isEmpty
argument_list|()
operator|&&
name|removableCasts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Remove redundant casts before reducing constant expressions.
comment|// If the argument to the redundant cast is a reducible constant,
comment|// reducing that argument to a constant first will result in not being
comment|// able to locate the original cast expression.
if|if
condition|(
operator|!
name|removableCasts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|reducedExprs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|exp
range|:
name|removableCasts
control|)
block|{
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|exp
decl_stmt|;
name|reducedExprs
operator|.
name|add
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RexReplacer
name|replacer
init|=
operator|new
name|RexReplacer
argument_list|(
name|rexBuilder
argument_list|,
name|removableCasts
argument_list|,
name|reducedExprs
argument_list|,
name|Collections
operator|.
name|nCopies
argument_list|(
name|removableCasts
operator|.
name|size
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|replacer
operator|.
name|mutate
argument_list|(
name|expList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|constExps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|constExps2
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|constExps
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|constants
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//noinspection unchecked
specifier|final
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|RexNode
argument_list|,
name|RexNode
argument_list|>
argument_list|>
name|pairs
init|=
call|(
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|RexNode
argument_list|,
name|RexNode
argument_list|>
argument_list|>
call|)
argument_list|(
name|List
argument_list|)
name|Lists
operator|.
name|newArrayList
argument_list|(
name|constants
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|RexReplacer
name|replacer
init|=
operator|new
name|RexReplacer
argument_list|(
name|rexBuilder
argument_list|,
name|Pair
operator|.
name|left
argument_list|(
name|pairs
argument_list|)
argument_list|,
name|Pair
operator|.
name|right
argument_list|(
name|pairs
argument_list|)
argument_list|,
name|Collections
operator|.
name|nCopies
argument_list|(
name|pairs
operator|.
name|size
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|replacer
operator|.
name|mutate
argument_list|(
name|constExps2
argument_list|)
expr_stmt|;
block|}
comment|// Compute the values they reduce to.
name|RelOptPlanner
operator|.
name|Executor
name|executor
init|=
name|rel
operator|.
name|getCluster
argument_list|()
operator|.
name|getPlanner
argument_list|()
operator|.
name|getExecutor
argument_list|()
decl_stmt|;
if|if
condition|(
name|executor
operator|==
literal|null
condition|)
block|{
comment|// Cannot reduce expressions: caller has not set an executor in their
comment|// environment. Caller should execute something like the following before
comment|// invoking the planner:
comment|//
comment|// final RexExecutorImpl executor =
comment|//   new RexExecutorImpl(Schemas.createDataContext(null));
comment|// rootRel.getCluster().getPlanner().setExecutor(executor);
return|return
literal|false
return|;
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|reducedValues
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|executor
operator|.
name|reduce
argument_list|(
name|rexBuilder
argument_list|,
name|constExps2
argument_list|,
name|reducedValues
argument_list|)
expr_stmt|;
comment|// Use RexNode.digest to judge whether each newly generated RexNode
comment|// is equivalent to the original one.
if|if
condition|(
name|Lists
operator|.
name|transform
argument_list|(
name|constExps
argument_list|,
name|HiveCalciteUtil
operator|.
name|REX_STR_FN
argument_list|)
operator|.
name|equals
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|reducedValues
argument_list|,
name|HiveCalciteUtil
operator|.
name|REX_STR_FN
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// For Project, we have to be sure to preserve the result
comment|// types, so always cast regardless of the expression type.
comment|// For other RelNodes like Filter, in general, this isn't necessary,
comment|// and the presence of casts could hinder other rules such as sarg
comment|// analysis, which require bare literals.  But there are special cases,
comment|// like when the expression is a UDR argument, that need to be
comment|// handled as special cases.
if|if
condition|(
name|rel
operator|instanceof
name|Project
condition|)
block|{
name|addCasts
operator|=
name|Collections
operator|.
name|nCopies
argument_list|(
name|reducedValues
operator|.
name|size
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|RexReplacer
name|replacer
init|=
operator|new
name|RexReplacer
argument_list|(
name|rexBuilder
argument_list|,
name|constExps
argument_list|,
name|reducedValues
argument_list|,
name|addCasts
argument_list|)
decl_stmt|;
name|replacer
operator|.
name|mutate
argument_list|(
name|expList
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Locates expressions that can be reduced to literals or converted to    * expressions with redundant casts removed.    *    * @param typeFactory    Type factory    * @param exps           list of candidate expressions to be examined for    *                       reduction    * @param constants      List of expressions known to be constant    * @param constExps      returns the list of expressions that can be constant    *                       reduced    * @param addCasts       indicator for each expression that can be constant    *                       reduced, whether a cast of the resulting reduced    *                       expression is potentially necessary    * @param removableCasts returns the list of cast expressions where the cast    */
specifier|protected
specifier|static
name|void
name|findReducibleExps
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|exps
parameter_list|,
name|ImmutableMap
argument_list|<
name|RexNode
argument_list|,
name|RexNode
argument_list|>
name|constants
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|constExps
parameter_list|,
name|List
argument_list|<
name|Boolean
argument_list|>
name|addCasts
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|removableCasts
parameter_list|)
block|{
name|ReducibleExprLocator
name|gardener
init|=
operator|new
name|ReducibleExprLocator
argument_list|(
name|typeFactory
argument_list|,
name|constants
argument_list|,
name|constExps
argument_list|,
name|addCasts
argument_list|,
name|removableCasts
argument_list|)
decl_stmt|;
for|for
control|(
name|RexNode
name|exp
range|:
name|exps
control|)
block|{
name|gardener
operator|.
name|analyze
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
assert|assert
name|constExps
operator|.
name|size
argument_list|()
operator|==
name|addCasts
operator|.
name|size
argument_list|()
assert|;
block|}
comment|/** Creates a map containing each (e, constant) pair that occurs within    * a predicate list.    *    * @param clazz Class of expression that is considered constant    * @param rexBuilder Rex builder    * @param predicates Predicate list    * @param<C> what to consider a constant: {@link RexLiteral} to use a narrow    *           definition of constant, or {@link RexNode} to use    *           {@link RexUtil#isConstant(RexNode)}    * @return Map from values to constants    */
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|RexNode
parameter_list|>
name|ImmutableMap
argument_list|<
name|RexNode
argument_list|,
name|C
argument_list|>
name|predicateConstants
parameter_list|(
name|Class
argument_list|<
name|C
argument_list|>
name|clazz
parameter_list|,
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RelOptPredicateList
name|predicates
parameter_list|)
block|{
comment|// We cannot use an ImmutableMap.Builder here. If there are multiple entries
comment|// with the same key (e.g. "WHERE deptno = 1 AND deptno = 2"), it doesn't
comment|// matter which we take, so the latter will replace the former.
comment|// The basic idea is to find all the pairs of RexNode = RexLiteral
comment|// (1) If 'predicates' contain a non-EQUALS, we bail out.
comment|// (2) It is OK if a RexNode is equal to the same RexLiteral several times,
comment|// (e.g. "WHERE deptno = 1 AND deptno = 1")
comment|// (3) It will return false if there are inconsistent constraints (e.g.
comment|// "WHERE deptno = 1 AND deptno = 2")
specifier|final
name|Map
argument_list|<
name|RexNode
argument_list|,
name|C
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|RexNode
argument_list|>
name|excludeSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|predicate
range|:
name|predicates
operator|.
name|pulledUpPredicates
control|)
block|{
name|gatherConstraints
argument_list|(
name|clazz
argument_list|,
name|predicate
argument_list|,
name|map
argument_list|,
name|excludeSet
argument_list|,
name|rexBuilder
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|RexNode
argument_list|,
name|C
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RexNode
argument_list|,
name|C
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|RexNode
name|rexNode
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|overlap
argument_list|(
name|rexNode
argument_list|,
name|excludeSet
argument_list|)
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|rexNode
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|C
extends|extends
name|RexNode
parameter_list|>
name|void
name|gatherConstraints
parameter_list|(
name|Class
argument_list|<
name|C
argument_list|>
name|clazz
parameter_list|,
name|RexNode
name|predicate
parameter_list|,
name|Map
argument_list|<
name|RexNode
argument_list|,
name|C
argument_list|>
name|map
parameter_list|,
name|Set
argument_list|<
name|RexNode
argument_list|>
name|excludeSet
parameter_list|,
name|RexBuilder
name|rexBuilder
parameter_list|)
block|{
if|if
condition|(
name|predicate
operator|.
name|getKind
argument_list|()
operator|!=
name|SqlKind
operator|.
name|EQUALS
operator|&&
name|predicate
operator|.
name|getKind
argument_list|()
operator|!=
name|SqlKind
operator|.
name|IS_NULL
condition|)
block|{
name|decompose
argument_list|(
name|excludeSet
argument_list|,
name|predicate
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
operator|(
operator|(
name|RexCall
operator|)
name|predicate
operator|)
operator|.
name|getOperands
argument_list|()
decl_stmt|;
if|if
condition|(
name|operands
operator|.
name|size
argument_list|()
operator|!=
literal|2
operator|&&
name|predicate
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|EQUALS
condition|)
block|{
name|decompose
argument_list|(
name|excludeSet
argument_list|,
name|predicate
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// if it reaches here, we have rexNode equals rexNode
specifier|final
name|RexNode
name|left
decl_stmt|;
specifier|final
name|RexNode
name|right
decl_stmt|;
if|if
condition|(
name|predicate
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|EQUALS
condition|)
block|{
name|left
operator|=
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|right
operator|=
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|left
operator|=
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|right
operator|=
name|rexBuilder
operator|.
name|makeNullLiteral
argument_list|(
name|left
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// note that literals are immutable too and they can only be compared through
comment|// values.
name|gatherConstraint
argument_list|(
name|clazz
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|map
argument_list|,
name|excludeSet
argument_list|,
name|rexBuilder
argument_list|)
expr_stmt|;
name|gatherConstraint
argument_list|(
name|clazz
argument_list|,
name|right
argument_list|,
name|left
argument_list|,
name|map
argument_list|,
name|excludeSet
argument_list|,
name|rexBuilder
argument_list|)
expr_stmt|;
block|}
comment|/** Returns whether a value of {@code type2} can be assigned to a variable    * of {@code type1}.    *    *<p>For example:    *<ul>    *<li>{@code canAssignFrom(BIGINT, TINYINT)} returns {@code true}</li>    *<li>{@code canAssignFrom(TINYINT, BIGINT)} returns {@code false}</li>    *<li>{@code canAssignFrom(BIGINT, VARCHAR)} returns {@code false}</li>    *</ul>    */
specifier|private
specifier|static
name|boolean
name|canAssignFrom
parameter_list|(
name|RelDataType
name|type1
parameter_list|,
name|RelDataType
name|type2
parameter_list|)
block|{
specifier|final
name|SqlTypeName
name|name1
init|=
name|type1
operator|.
name|getSqlTypeName
argument_list|()
decl_stmt|;
specifier|final
name|SqlTypeName
name|name2
init|=
name|type2
operator|.
name|getSqlTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name1
operator|.
name|getFamily
argument_list|()
operator|==
name|name2
operator|.
name|getFamily
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|name1
operator|.
name|getFamily
argument_list|()
condition|)
block|{
case|case
name|NUMERIC
case|:
return|return
name|name1
operator|.
name|compareTo
argument_list|(
name|name2
argument_list|)
operator|>=
literal|0
return|;
default|default:
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|C
extends|extends
name|RexNode
parameter_list|>
name|void
name|gatherConstraint
parameter_list|(
name|Class
argument_list|<
name|C
argument_list|>
name|clazz
parameter_list|,
name|RexNode
name|left
parameter_list|,
name|RexNode
name|right
parameter_list|,
name|Map
argument_list|<
name|RexNode
argument_list|,
name|C
argument_list|>
name|map
parameter_list|,
name|Set
argument_list|<
name|RexNode
argument_list|>
name|excludeSet
parameter_list|,
name|RexBuilder
name|rexBuilder
parameter_list|)
block|{
if|if
condition|(
operator|!
name|clazz
operator|.
name|isInstance
argument_list|(
name|right
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|RexUtil
operator|.
name|isConstant
argument_list|(
name|right
argument_list|)
condition|)
block|{
return|return;
block|}
name|C
name|constant
init|=
name|clazz
operator|.
name|cast
argument_list|(
name|right
argument_list|)
decl_stmt|;
if|if
condition|(
name|excludeSet
operator|.
name|contains
argument_list|(
name|left
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|C
name|existedValue
init|=
name|map
operator|.
name|get
argument_list|(
name|left
argument_list|)
decl_stmt|;
if|if
condition|(
name|existedValue
operator|==
literal|null
condition|)
block|{
switch|switch
condition|(
name|left
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|CAST
case|:
comment|// Convert "CAST(c) = literal" to "c = literal", as long as it is a
comment|// widening cast.
specifier|final
name|RexNode
name|operand
init|=
operator|(
operator|(
name|RexCall
operator|)
name|left
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|canAssignFrom
argument_list|(
name|left
operator|.
name|getType
argument_list|()
argument_list|,
name|operand
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|RexNode
name|castRight
init|=
name|rexBuilder
operator|.
name|makeCast
argument_list|(
name|operand
operator|.
name|getType
argument_list|()
argument_list|,
name|constant
argument_list|)
decl_stmt|;
if|if
condition|(
name|castRight
operator|instanceof
name|RexLiteral
condition|)
block|{
name|left
operator|=
name|operand
expr_stmt|;
name|constant
operator|=
name|clazz
operator|.
name|cast
argument_list|(
name|castRight
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|map
operator|.
name|put
argument_list|(
name|left
argument_list|,
name|constant
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|existedValue
operator|instanceof
name|RexLiteral
operator|&&
name|constant
operator|instanceof
name|RexLiteral
operator|&&
operator|!
operator|(
operator|(
name|RexLiteral
operator|)
name|existedValue
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|RexLiteral
operator|)
name|constant
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
comment|// we found conflicting values, e.g. left = 10 and left = 20
name|map
operator|.
name|remove
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|excludeSet
operator|.
name|add
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|boolean
name|overlap
parameter_list|(
name|RexNode
name|rexNode
parameter_list|,
name|Set
argument_list|<
name|RexNode
argument_list|>
name|set
parameter_list|)
block|{
if|if
condition|(
name|rexNode
operator|instanceof
name|RexCall
condition|)
block|{
for|for
control|(
name|RexNode
name|r
range|:
operator|(
operator|(
name|RexCall
operator|)
name|rexNode
operator|)
operator|.
name|getOperands
argument_list|()
control|)
block|{
if|if
condition|(
name|overlap
argument_list|(
name|r
argument_list|,
name|set
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|set
operator|.
name|contains
argument_list|(
name|rexNode
argument_list|)
return|;
block|}
block|}
comment|/** Tries to decompose the RexNode which is a RexCall into non-literal    * RexNodes. */
specifier|private
specifier|static
name|void
name|decompose
parameter_list|(
name|Set
argument_list|<
name|RexNode
argument_list|>
name|set
parameter_list|,
name|RexNode
name|rexNode
parameter_list|)
block|{
if|if
condition|(
name|rexNode
operator|instanceof
name|RexCall
condition|)
block|{
for|for
control|(
name|RexNode
name|r
range|:
operator|(
operator|(
name|RexCall
operator|)
name|rexNode
operator|)
operator|.
name|getOperands
argument_list|()
control|)
block|{
name|decompose
argument_list|(
name|set
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|rexNode
operator|instanceof
name|RexLiteral
operator|)
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|rexNode
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Pushes predicates into a CASE.    *    *<p>We have a loose definition of 'predicate': any boolean expression will    * do, except CASE. For example '(CASE ...) = 5' or '(CASE ...) IS NULL'.    */
specifier|protected
specifier|static
name|RexCall
name|pushPredicateIntoCase
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
if|if
condition|(
name|call
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|!=
name|SqlTypeName
operator|.
name|BOOLEAN
condition|)
block|{
return|return
name|call
return|;
block|}
switch|switch
condition|(
name|call
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|CASE
case|:
case|case
name|AND
case|:
case|case
name|OR
case|:
return|return
name|call
return|;
comment|// don't push CASE into CASE!
block|}
name|int
name|caseOrdinal
init|=
operator|-
literal|1
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
name|call
operator|.
name|getOperands
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operands
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RexNode
name|operand
init|=
name|operands
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|operand
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|CASE
case|:
name|caseOrdinal
operator|=
name|i
expr_stmt|;
block|}
block|}
if|if
condition|(
name|caseOrdinal
operator|<
literal|0
condition|)
block|{
return|return
name|call
return|;
block|}
comment|// Convert
comment|//   f(CASE WHEN p1 THEN v1 ... END, arg)
comment|// to
comment|//   CASE WHEN p1 THEN f(v1, arg) ... END
specifier|final
name|RexCall
name|case_
init|=
operator|(
name|RexCall
operator|)
name|operands
operator|.
name|get
argument_list|(
name|caseOrdinal
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|case_
operator|.
name|getOperands
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RexNode
name|node
init|=
name|case_
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|RexUtil
operator|.
name|isCasePredicate
argument_list|(
name|case_
argument_list|,
name|i
argument_list|)
condition|)
block|{
name|node
operator|=
name|substitute
argument_list|(
name|call
argument_list|,
name|caseOrdinal
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|nodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|case_
operator|.
name|clone
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|nodes
argument_list|)
return|;
block|}
comment|/** Converts op(arg0, ..., argOrdinal, ..., argN) to op(arg0,..., node, ..., argN). */
specifier|protected
specifier|static
name|RexNode
name|substitute
parameter_list|(
name|RexCall
name|call
parameter_list|,
name|int
name|ordinal
parameter_list|,
name|RexNode
name|node
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|newOperands
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|)
decl_stmt|;
name|newOperands
operator|.
name|set
argument_list|(
name|ordinal
argument_list|,
name|node
argument_list|)
expr_stmt|;
return|return
name|call
operator|.
name|clone
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|newOperands
argument_list|)
return|;
block|}
comment|//~ Inner Classes ----------------------------------------------------------
comment|/**    * Replaces expressions with their reductions. Note that we only have to    * look for RexCall, since nothing else is reducible in the first place.    */
specifier|protected
specifier|static
class|class
name|RexReplacer
extends|extends
name|RexShuttle
block|{
specifier|private
specifier|final
name|RexBuilder
name|rexBuilder
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|reducibleExps
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|reducedValues
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Boolean
argument_list|>
name|addCasts
decl_stmt|;
name|RexReplacer
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|reducibleExps
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|reducedValues
parameter_list|,
name|List
argument_list|<
name|Boolean
argument_list|>
name|addCasts
parameter_list|)
block|{
name|this
operator|.
name|rexBuilder
operator|=
name|rexBuilder
expr_stmt|;
name|this
operator|.
name|reducibleExps
operator|=
name|reducibleExps
expr_stmt|;
name|this
operator|.
name|reducedValues
operator|=
name|reducedValues
expr_stmt|;
name|this
operator|.
name|addCasts
operator|=
name|addCasts
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitInputRef
parameter_list|(
name|RexInputRef
name|inputRef
parameter_list|)
block|{
name|RexNode
name|node
init|=
name|visit
argument_list|(
name|inputRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|visitInputRef
argument_list|(
name|inputRef
argument_list|)
return|;
block|}
return|return
name|node
return|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
name|RexNode
name|node
init|=
name|visit
argument_list|(
name|call
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
return|return
name|node
return|;
block|}
name|node
operator|=
name|super
operator|.
name|visitCall
argument_list|(
name|call
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|!=
name|call
condition|)
block|{
name|node
operator|=
name|HiveRexUtil
operator|.
name|simplify
argument_list|(
name|rexBuilder
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
specifier|private
name|RexNode
name|visit
parameter_list|(
specifier|final
name|RexNode
name|call
parameter_list|)
block|{
name|int
name|i
init|=
name|reducibleExps
operator|.
name|indexOf
argument_list|(
name|call
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RexNode
name|replacement
init|=
name|reducedValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|addCasts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|&&
operator|(
name|replacement
operator|.
name|getType
argument_list|()
operator|!=
name|call
operator|.
name|getType
argument_list|()
operator|)
condition|)
block|{
comment|// Handle change from nullable to NOT NULL by claiming
comment|// that the result is still nullable, even though
comment|// we know it isn't.
comment|//
comment|// Also, we cannot reduce CAST('abc' AS VARCHAR(4)) to 'abc'.
comment|// If we make 'abc' of type VARCHAR(4), we may later encounter
comment|// the same expression in a Project's digest where it has
comment|// type VARCHAR(3), and that's wrong.
name|replacement
operator|=
name|rexBuilder
operator|.
name|makeAbstractCast
argument_list|(
name|call
operator|.
name|getType
argument_list|()
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
block|}
return|return
name|replacement
return|;
block|}
block|}
comment|/**    * Helper class used to locate expressions that either can be reduced to    * literals or contain redundant casts.    */
specifier|protected
specifier|static
class|class
name|ReducibleExprLocator
extends|extends
name|RexVisitorImpl
argument_list|<
name|Void
argument_list|>
block|{
comment|/** Whether an expression is constant, and if so, whether it can be      * reduced to a simpler constant. */
enum|enum
name|Constancy
block|{
name|NON_CONSTANT
block|,
name|REDUCIBLE_CONSTANT
block|,
name|IRREDUCIBLE_CONSTANT
block|}
specifier|private
specifier|final
name|RelDataTypeFactory
name|typeFactory
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Constancy
argument_list|>
name|stack
decl_stmt|;
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|RexNode
argument_list|,
name|RexNode
argument_list|>
name|constants
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|constExprs
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Boolean
argument_list|>
name|addCasts
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|removableCasts
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|SqlOperator
argument_list|>
name|parentCallTypeStack
decl_stmt|;
name|ReducibleExprLocator
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|,
name|ImmutableMap
argument_list|<
name|RexNode
argument_list|,
name|RexNode
argument_list|>
name|constants
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|constExprs
parameter_list|,
name|List
argument_list|<
name|Boolean
argument_list|>
name|addCasts
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|removableCasts
parameter_list|)
block|{
comment|// go deep
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|typeFactory
operator|=
name|typeFactory
expr_stmt|;
name|this
operator|.
name|constants
operator|=
name|constants
expr_stmt|;
name|this
operator|.
name|constExprs
operator|=
name|constExprs
expr_stmt|;
name|this
operator|.
name|addCasts
operator|=
name|addCasts
expr_stmt|;
name|this
operator|.
name|removableCasts
operator|=
name|removableCasts
expr_stmt|;
name|this
operator|.
name|stack
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|this
operator|.
name|parentCallTypeStack
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|analyze
parameter_list|(
name|RexNode
name|exp
parameter_list|)
block|{
assert|assert
name|stack
operator|.
name|isEmpty
argument_list|()
assert|;
name|exp
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Deal with top of stack
assert|assert
name|stack
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
assert|assert
name|parentCallTypeStack
operator|.
name|isEmpty
argument_list|()
assert|;
name|Constancy
name|rootConstancy
init|=
name|stack
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootConstancy
operator|==
name|Constancy
operator|.
name|REDUCIBLE_CONSTANT
condition|)
block|{
comment|// The entire subtree was constant, so add it to the result.
name|addResult
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
name|stack
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Void
name|pushVariable
parameter_list|()
block|{
name|stack
operator|.
name|add
argument_list|(
name|Constancy
operator|.
name|NON_CONSTANT
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|addResult
parameter_list|(
name|RexNode
name|exp
parameter_list|)
block|{
comment|// Cast of literal can't be reduced, so skip those (otherwise we'd
comment|// go into an infinite loop as we add them back).
if|if
condition|(
name|exp
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|CAST
condition|)
block|{
name|RexCall
name|cast
init|=
operator|(
name|RexCall
operator|)
name|exp
decl_stmt|;
name|RexNode
name|operand
init|=
name|cast
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|operand
operator|instanceof
name|RexLiteral
condition|)
block|{
return|return;
block|}
block|}
name|constExprs
operator|.
name|add
argument_list|(
name|exp
argument_list|)
expr_stmt|;
comment|// In the case where the expression corresponds to a UDR argument,
comment|// we need to preserve casts.  Note that this only applies to
comment|// the topmost argument, not expressions nested within the UDR
comment|// call.
comment|//
comment|// REVIEW zfong 6/13/08 - Are there other expressions where we
comment|// also need to preserve casts?
if|if
condition|(
name|parentCallTypeStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addCasts
operator|.
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addCasts
operator|.
name|add
argument_list|(
name|isUdf
argument_list|(
name|Stacks
operator|.
name|peek
argument_list|(
name|parentCallTypeStack
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Boolean
name|isUdf
parameter_list|(
name|SqlOperator
name|operator
parameter_list|)
block|{
comment|// return operator instanceof UserDefinedRoutine
return|return
literal|false
return|;
block|}
specifier|public
name|Void
name|visitInputRef
parameter_list|(
name|RexInputRef
name|inputRef
parameter_list|)
block|{
if|if
condition|(
name|constants
operator|.
name|containsKey
argument_list|(
name|inputRef
argument_list|)
condition|)
block|{
name|stack
operator|.
name|add
argument_list|(
name|Constancy
operator|.
name|REDUCIBLE_CONSTANT
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|pushVariable
argument_list|()
return|;
block|}
specifier|public
name|Void
name|visitLiteral
parameter_list|(
name|RexLiteral
name|literal
parameter_list|)
block|{
name|stack
operator|.
name|add
argument_list|(
name|Constancy
operator|.
name|IRREDUCIBLE_CONSTANT
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Void
name|visitOver
parameter_list|(
name|RexOver
name|over
parameter_list|)
block|{
comment|// assume non-constant (running SUM(1) looks constant but isn't)
name|analyzeCall
argument_list|(
name|over
argument_list|,
name|Constancy
operator|.
name|NON_CONSTANT
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Void
name|visitCorrelVariable
parameter_list|(
name|RexCorrelVariable
name|correlVariable
parameter_list|)
block|{
return|return
name|pushVariable
argument_list|()
return|;
block|}
specifier|public
name|Void
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
comment|// assume REDUCIBLE_CONSTANT until proven otherwise
name|analyzeCall
argument_list|(
name|call
argument_list|,
name|Constancy
operator|.
name|REDUCIBLE_CONSTANT
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|analyzeCall
parameter_list|(
name|RexCall
name|call
parameter_list|,
name|Constancy
name|callConstancy
parameter_list|)
block|{
name|Stacks
operator|.
name|push
argument_list|(
name|parentCallTypeStack
argument_list|,
name|call
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
comment|// visit operands, pushing their states onto stack
name|super
operator|.
name|visitCall
argument_list|(
name|call
argument_list|)
expr_stmt|;
comment|// look for NON_CONSTANT operands
name|int
name|operandCount
init|=
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Constancy
argument_list|>
name|operandStack
init|=
name|Util
operator|.
name|last
argument_list|(
name|stack
argument_list|,
name|operandCount
argument_list|)
decl_stmt|;
for|for
control|(
name|Constancy
name|operandConstancy
range|:
name|operandStack
control|)
block|{
if|if
condition|(
name|operandConstancy
operator|==
name|Constancy
operator|.
name|NON_CONSTANT
condition|)
block|{
name|callConstancy
operator|=
name|Constancy
operator|.
name|NON_CONSTANT
expr_stmt|;
block|}
block|}
comment|// Even if all operands are constant, the call itself may
comment|// be non-deterministic.
if|if
condition|(
operator|!
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|isDeterministic
argument_list|()
condition|)
block|{
name|callConstancy
operator|=
name|Constancy
operator|.
name|NON_CONSTANT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|isDynamicFunction
argument_list|()
condition|)
block|{
comment|// We can reduce the call to a constant, but we can't
comment|// cache the plan if the function is dynamic.
comment|// For now, treat it same as non-deterministic.
name|callConstancy
operator|=
name|Constancy
operator|.
name|NON_CONSTANT
expr_stmt|;
block|}
comment|// Row operator itself can't be reduced to a literal, but if
comment|// the operands are constants, we still want to reduce those
if|if
condition|(
operator|(
name|callConstancy
operator|==
name|Constancy
operator|.
name|REDUCIBLE_CONSTANT
operator|)
operator|&&
operator|(
name|call
operator|.
name|getOperator
argument_list|()
operator|instanceof
name|SqlRowOperator
operator|)
condition|)
block|{
name|callConstancy
operator|=
name|Constancy
operator|.
name|NON_CONSTANT
expr_stmt|;
block|}
if|if
condition|(
name|callConstancy
operator|==
name|Constancy
operator|.
name|NON_CONSTANT
condition|)
block|{
comment|// any REDUCIBLE_CONSTANT children are now known to be maximal
comment|// reducible subtrees, so they can be added to the result
comment|// list
for|for
control|(
name|int
name|iOperand
init|=
literal|0
init|;
name|iOperand
operator|<
name|operandCount
condition|;
operator|++
name|iOperand
control|)
block|{
name|Constancy
name|constancy
init|=
name|operandStack
operator|.
name|get
argument_list|(
name|iOperand
argument_list|)
decl_stmt|;
if|if
condition|(
name|constancy
operator|==
name|Constancy
operator|.
name|REDUCIBLE_CONSTANT
condition|)
block|{
name|addResult
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
name|iOperand
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if this cast expression can't be reduced to a literal,
comment|// then see if we can remove the cast
if|if
condition|(
name|call
operator|.
name|getOperator
argument_list|()
operator|==
name|SqlStdOperatorTable
operator|.
name|CAST
condition|)
block|{
name|reduceCasts
argument_list|(
name|call
argument_list|)
expr_stmt|;
block|}
block|}
comment|// pop operands off of the stack
name|operandStack
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// pop this parent call operator off the stack
name|Stacks
operator|.
name|pop
argument_list|(
name|parentCallTypeStack
argument_list|,
name|call
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
comment|// push constancy result for this call onto stack
name|stack
operator|.
name|add
argument_list|(
name|callConstancy
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|reduceCasts
parameter_list|(
name|RexCall
name|outerCast
parameter_list|)
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
name|outerCast
operator|.
name|getOperands
argument_list|()
decl_stmt|;
if|if
condition|(
name|operands
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return;
block|}
name|RelDataType
name|outerCastType
init|=
name|outerCast
operator|.
name|getType
argument_list|()
decl_stmt|;
name|RelDataType
name|operandType
init|=
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|operandType
operator|.
name|equals
argument_list|(
name|outerCastType
argument_list|)
condition|)
block|{
name|removableCasts
operator|.
name|add
argument_list|(
name|outerCast
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// See if the reduction
comment|// CAST((CAST x AS type) AS type NOT NULL)
comment|// -> CAST(x AS type NOT NULL)
comment|// applies.  TODO jvs 15-Dec-2008:  consider
comment|// similar cases for precision changes.
if|if
condition|(
operator|!
operator|(
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|RexCall
operator|)
condition|)
block|{
return|return;
block|}
name|RexCall
name|innerCast
init|=
operator|(
name|RexCall
operator|)
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|innerCast
operator|.
name|getOperator
argument_list|()
operator|!=
name|SqlStdOperatorTable
operator|.
name|CAST
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|innerCast
operator|.
name|getOperands
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return;
block|}
name|RelDataType
name|outerTypeNullable
init|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|outerCastType
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|RelDataType
name|innerTypeNullable
init|=
name|typeFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|operandType
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|outerTypeNullable
operator|!=
name|innerTypeNullable
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|operandType
operator|.
name|isNullable
argument_list|()
condition|)
block|{
name|removableCasts
operator|.
name|add
argument_list|(
name|innerCast
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Void
name|visitDynamicParam
parameter_list|(
name|RexDynamicParam
name|dynamicParam
parameter_list|)
block|{
return|return
name|pushVariable
argument_list|()
return|;
block|}
specifier|public
name|Void
name|visitRangeRef
parameter_list|(
name|RexRangeRef
name|rangeRef
parameter_list|)
block|{
return|return
name|pushVariable
argument_list|()
return|;
block|}
specifier|public
name|Void
name|visitFieldAccess
parameter_list|(
name|RexFieldAccess
name|fieldAccess
parameter_list|)
block|{
return|return
name|pushVariable
argument_list|()
return|;
block|}
block|}
comment|/** Shuttle that pushes predicates into a CASE. */
specifier|protected
specifier|static
class|class
name|CaseShuttle
extends|extends
name|RexShuttle
block|{
annotation|@
name|Override
specifier|public
name|RexNode
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|call
operator|=
operator|(
name|RexCall
operator|)
name|super
operator|.
name|visitCall
argument_list|(
name|call
argument_list|)
expr_stmt|;
specifier|final
name|RexCall
name|old
init|=
name|call
decl_stmt|;
name|call
operator|=
name|pushPredicateIntoCase
argument_list|(
name|call
argument_list|)
expr_stmt|;
if|if
condition|(
name|call
operator|==
name|old
condition|)
block|{
return|return
name|call
return|;
block|}
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|// End HiveReduceExpressionsRule.java
end_comment

end_unit

