begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  **/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|HookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|HooksLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|MaterializedViewRegistryUpdateHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|MetricsQueryLifeTimeHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|QueryLifeTimeHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|QueryLifeTimeHookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|QueryLifeTimeHookContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|QueryLifeTimeHookWithParseHooks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_comment
comment|/**  * A runner class for {@link QueryLifeTimeHook}s and {@link QueryLifeTimeHookWithParseHooks}. The class has run methods  * for each phase of a {@link QueryLifeTimeHook} and {@link QueryLifeTimeHookWithParseHooks}. Each run method checks if  * a list of hooks has be specified, and if so invokes the appropriate callback method of each hook. Each method  * constructs a {@link QueryLifeTimeHookContext} object and pass it to the callback functions.  */
end_comment

begin_class
class|class
name|QueryLifeTimeHookRunner
block|{
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|QueryLifeTimeHook
argument_list|>
name|queryHooks
decl_stmt|;
comment|/**    * Constructs a {@link QueryLifeTimeHookRunner} that loads all hooks to be run via a {@link HooksLoader}.    *    * @param conf the {@link HiveConf} to use when creating {@link QueryLifeTimeHookContext} objects    * @param hooksLoader the {@link HooksLoader} to use when loading all hooks to be run    * @param console the {@link SessionState.LogHelper} to use when running {@link HooksLoader#getHooks(HiveConf.ConfVars)}    */
name|QueryLifeTimeHookRunner
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|HooksLoader
name|hooksLoader
parameter_list|,
name|SessionState
operator|.
name|LogHelper
name|console
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|queryHooks
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_METRICS_ENABLED
argument_list|)
condition|)
block|{
name|queryHooks
operator|.
name|add
argument_list|(
operator|new
name|MetricsQueryLifeTimeHook
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|queryHooks
operator|.
name|add
argument_list|(
operator|new
name|MaterializedViewRegistryUpdateHook
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|QueryLifeTimeHook
argument_list|>
name|propertyDefinedHoooks
decl_stmt|;
try|try
block|{
name|propertyDefinedHoooks
operator|=
name|hooksLoader
operator|.
name|getHooks
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_QUERY_LIFETIME_HOOKS
argument_list|,
name|console
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InstantiationException
decl||
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|propertyDefinedHoooks
operator|!=
literal|null
condition|)
block|{
name|Iterables
operator|.
name|addAll
argument_list|(
name|queryHooks
argument_list|,
name|propertyDefinedHoooks
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * If {@link QueryLifeTimeHookWithParseHooks} have been loaded via the {@link HooksLoader} then invoke the    * {@link QueryLifeTimeHookWithParseHooks#beforeParse(QueryLifeTimeHookContext)} method for each    * {@link QueryLifeTimeHookWithParseHooks}.    *    * @param command the Hive command that is being run    */
name|void
name|runBeforeParseHook
parameter_list|(
name|String
name|command
parameter_list|)
block|{
if|if
condition|(
name|containsHooks
argument_list|()
condition|)
block|{
name|QueryLifeTimeHookContext
name|qhc
init|=
operator|new
name|QueryLifeTimeHookContextImpl
operator|.
name|Builder
argument_list|()
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withCommand
argument_list|(
name|command
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|QueryLifeTimeHook
name|hook
range|:
name|queryHooks
control|)
block|{
if|if
condition|(
name|hook
operator|instanceof
name|QueryLifeTimeHookWithParseHooks
condition|)
block|{
operator|(
operator|(
name|QueryLifeTimeHookWithParseHooks
operator|)
name|hook
operator|)
operator|.
name|beforeParse
argument_list|(
name|qhc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * If {@link QueryLifeTimeHookWithParseHooks} have been loaded via the {@link HooksLoader} then invoke the    * {@link QueryLifeTimeHookWithParseHooks#afterParse(QueryLifeTimeHookContext, boolean)} method for each    * {@link QueryLifeTimeHookWithParseHooks}.    *    * @param command the Hive command that is being run    * @param parseError true if there was an error while parsing the command, false otherwise    */
name|void
name|runAfterParseHook
parameter_list|(
name|String
name|command
parameter_list|,
name|boolean
name|parseError
parameter_list|)
block|{
if|if
condition|(
name|containsHooks
argument_list|()
condition|)
block|{
name|QueryLifeTimeHookContext
name|qhc
init|=
operator|new
name|QueryLifeTimeHookContextImpl
operator|.
name|Builder
argument_list|()
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withCommand
argument_list|(
name|command
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|QueryLifeTimeHook
name|hook
range|:
name|queryHooks
control|)
block|{
if|if
condition|(
name|hook
operator|instanceof
name|QueryLifeTimeHookWithParseHooks
condition|)
block|{
operator|(
operator|(
name|QueryLifeTimeHookWithParseHooks
operator|)
name|hook
operator|)
operator|.
name|afterParse
argument_list|(
name|qhc
argument_list|,
name|parseError
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Invoke the {@link QueryLifeTimeHook#beforeCompile(QueryLifeTimeHookContext)} method for each {@link QueryLifeTimeHook}    *    * @param command the Hive command that is being run    */
name|void
name|runBeforeCompileHook
parameter_list|(
name|String
name|command
parameter_list|)
block|{
if|if
condition|(
name|containsHooks
argument_list|()
condition|)
block|{
name|QueryLifeTimeHookContext
name|qhc
init|=
operator|new
name|QueryLifeTimeHookContextImpl
operator|.
name|Builder
argument_list|()
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withCommand
argument_list|(
name|command
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|QueryLifeTimeHook
name|hook
range|:
name|queryHooks
control|)
block|{
name|hook
operator|.
name|beforeCompile
argument_list|(
name|qhc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Invoke the {@link QueryLifeTimeHook#afterCompile(QueryLifeTimeHookContext, boolean)} method for each {@link QueryLifeTimeHook}    *    * @param command the Hive command that is being run    * @param compileError true if there was an error while compiling the command, false otherwise    */
name|void
name|runAfterCompilationHook
parameter_list|(
name|String
name|command
parameter_list|,
name|boolean
name|compileError
parameter_list|)
block|{
if|if
condition|(
name|containsHooks
argument_list|()
condition|)
block|{
name|QueryLifeTimeHookContext
name|qhc
init|=
operator|new
name|QueryLifeTimeHookContextImpl
operator|.
name|Builder
argument_list|()
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withCommand
argument_list|(
name|command
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|QueryLifeTimeHook
name|hook
range|:
name|queryHooks
control|)
block|{
name|hook
operator|.
name|afterCompile
argument_list|(
name|qhc
argument_list|,
name|compileError
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Invoke the {@link QueryLifeTimeHook#beforeExecution(QueryLifeTimeHookContext)} method for each {@link QueryLifeTimeHook}    *    * @param command the Hive command that is being run    * @param hookContext the {@link HookContext} of the command being run    */
name|void
name|runBeforeExecutionHook
parameter_list|(
name|String
name|command
parameter_list|,
name|HookContext
name|hookContext
parameter_list|)
block|{
if|if
condition|(
name|containsHooks
argument_list|()
condition|)
block|{
name|QueryLifeTimeHookContext
name|qhc
init|=
operator|new
name|QueryLifeTimeHookContextImpl
operator|.
name|Builder
argument_list|()
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withCommand
argument_list|(
name|command
argument_list|)
operator|.
name|withHookContext
argument_list|(
name|hookContext
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|QueryLifeTimeHook
name|hook
range|:
name|queryHooks
control|)
block|{
name|hook
operator|.
name|beforeExecution
argument_list|(
name|qhc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Invoke the {@link QueryLifeTimeHook#afterExecution(QueryLifeTimeHookContext, boolean)} method for each {@link QueryLifeTimeHook}    *    * @param command the Hive command that is being run    * @param hookContext the {@link HookContext} of the command being run    * @param executionError true if there was an error while executing the command, false otherwise    */
name|void
name|runAfterExecutionHook
parameter_list|(
name|String
name|command
parameter_list|,
name|HookContext
name|hookContext
parameter_list|,
name|boolean
name|executionError
parameter_list|)
block|{
if|if
condition|(
name|containsHooks
argument_list|()
condition|)
block|{
name|QueryLifeTimeHookContext
name|qhc
init|=
operator|new
name|QueryLifeTimeHookContextImpl
operator|.
name|Builder
argument_list|()
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withCommand
argument_list|(
name|command
argument_list|)
operator|.
name|withHookContext
argument_list|(
name|hookContext
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|QueryLifeTimeHook
name|hook
range|:
name|queryHooks
control|)
block|{
name|hook
operator|.
name|afterExecution
argument_list|(
name|qhc
argument_list|,
name|executionError
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|containsHooks
parameter_list|()
block|{
return|return
name|queryHooks
operator|!=
literal|null
operator|&&
operator|!
name|queryHooks
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

