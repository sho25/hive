begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A generic, re-usable n-gram estimation class that supports partial aggregations.  * The algorithm is based on the heuristic from the following paper:  * Yael Ben-Haim and Elad Tom-Tov, "A streaming parallel decision tree algorithm",  * J. Machine Learning Research 11 (2010), pp. 849--872.   *  * In particular, it is guaranteed that frequencies will be under-counted. With large  * data and a reasonable precision factor, this undercounting appears to be on the order  * of 5%.  */
end_comment

begin_class
specifier|public
class|class
name|NGramEstimator
block|{
comment|/* Class private variables */
specifier|private
name|int
name|k
decl_stmt|;
specifier|private
name|int
name|pf
decl_stmt|;
specifier|private
name|int
name|n
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|,
name|Double
argument_list|>
name|ngrams
decl_stmt|;
comment|/**    * Creates a new n-gram estimator object. The 'n' for n-grams is computed dynamically    * when data is fed to the object.     */
specifier|public
name|NGramEstimator
parameter_list|()
block|{
name|k
operator|=
literal|0
expr_stmt|;
name|pf
operator|=
literal|0
expr_stmt|;
name|n
operator|=
literal|0
expr_stmt|;
name|ngrams
operator|=
operator|new
name|HashMap
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|,
name|Double
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns true if the 'k' and 'pf' parameters have been set.    */
specifier|public
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
operator|(
name|k
operator|!=
literal|0
operator|)
return|;
block|}
comment|/**    * Sets the 'k' and 'pf' parameters.    */
specifier|public
name|void
name|initialize
parameter_list|(
name|int
name|pk
parameter_list|,
name|int
name|ppf
parameter_list|,
name|int
name|pn
parameter_list|)
throws|throws
name|HiveException
block|{
assert|assert
operator|(
name|pk
operator|>
literal|0
operator|&&
name|ppf
operator|>
literal|0
operator|&&
name|pn
operator|>
literal|0
operator|)
assert|;
name|k
operator|=
name|pk
expr_stmt|;
name|pf
operator|=
name|ppf
expr_stmt|;
name|n
operator|=
name|pn
expr_stmt|;
comment|// enforce a minimum precision factor
if|if
condition|(
name|k
operator|*
name|pf
operator|<
literal|1000
condition|)
block|{
name|pf
operator|=
literal|1000
operator|/
name|k
expr_stmt|;
block|}
block|}
comment|/**    * Resets an n-gram estimator object to its initial state.     */
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|ngrams
operator|.
name|clear
argument_list|()
expr_stmt|;
name|n
operator|=
name|pf
operator|=
name|k
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * Returns the final top-k n-grams in a format suitable for returning to Hive.    */
specifier|public
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
name|getNGrams
parameter_list|()
throws|throws
name|HiveException
block|{
name|trim
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|ngrams
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
comment|// SQL standard - return null for zero elements
return|return
literal|null
return|;
block|}
comment|// Sort the n-gram list by frequencies in descending order
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|,
name|Double
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|(
name|ngrams
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|,
name|Double
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|,
name|Double
argument_list|>
name|o1
parameter_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|,
name|Double
argument_list|>
name|o2
parameter_list|)
block|{
return|return
name|o2
operator|.
name|getValue
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o1
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Convert the n-gram list to a format suitable for Hive
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|key
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Double
name|val
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Object
index|[]
name|curGram
init|=
operator|new
name|Object
index|[
literal|2
index|]
decl_stmt|;
name|ArrayList
argument_list|<
name|Text
argument_list|>
name|ng
init|=
operator|new
name|ArrayList
argument_list|<
name|Text
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|key
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|ng
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
name|key
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|curGram
index|[
literal|0
index|]
operator|=
name|ng
expr_stmt|;
name|curGram
index|[
literal|1
index|]
operator|=
operator|new
name|DoubleWritable
argument_list|(
name|val
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|curGram
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Returns the number of n-grams in our buffer.    */
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|ngrams
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Adds a new n-gram to the estimation.    *    * @param ng The n-gram to add to the estimation    */
specifier|public
name|void
name|add
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|ng
parameter_list|)
throws|throws
name|HiveException
block|{
assert|assert
operator|(
name|ng
operator|!=
literal|null
operator|&&
name|ng
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|ng
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|!=
literal|null
operator|)
assert|;
name|Double
name|curFreq
init|=
name|ngrams
operator|.
name|get
argument_list|(
name|ng
argument_list|)
decl_stmt|;
if|if
condition|(
name|curFreq
operator|==
literal|null
condition|)
block|{
comment|// new n-gram
name|curFreq
operator|=
operator|new
name|Double
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// existing n-gram, just increment count
name|curFreq
operator|++
expr_stmt|;
block|}
name|ngrams
operator|.
name|put
argument_list|(
name|ng
argument_list|,
name|curFreq
argument_list|)
expr_stmt|;
comment|// set 'n' if we haven't done so before
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
name|n
operator|=
name|ng
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|n
operator|!=
name|ng
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|": mismatch in value for 'n'"
operator|+
literal|", which usually is caused by a non-constant expression. Found '"
operator|+
name|n
operator|+
literal|"' and '"
operator|+
name|ng
operator|.
name|size
argument_list|()
operator|+
literal|"'."
argument_list|)
throw|;
block|}
block|}
comment|// Trim down the total number of n-grams if we've exceeded the maximum amount of memory allowed
comment|//
comment|// NOTE: Although 'k'*'pf' specifies the size of the estimation buffer, we don't want to keep
comment|//       performing N.log(N) trim operations each time the maximum hashmap size is exceeded.
comment|//       To handle this, we *actually* maintain an estimation buffer of size 2*'k'*'pf', and
comment|//       trim down to 'k'*'pf' whenever the hashmap size exceeds 2*'k'*'pf'. This really has
comment|//       a significant effect when 'k'*'pf' is very high.
if|if
condition|(
name|ngrams
operator|.
name|size
argument_list|()
operator|>
name|k
operator|*
name|pf
operator|*
literal|2
condition|)
block|{
name|trim
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Trims an n-gram estimation down to either 'pf' * 'k' n-grams, or 'k' n-grams if     * finalTrim is true.    */
specifier|private
name|void
name|trim
parameter_list|(
name|boolean
name|finalTrim
parameter_list|)
throws|throws
name|HiveException
block|{
name|ArrayList
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|,
name|Double
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|(
name|ngrams
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|,
name|Double
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|,
name|Double
argument_list|>
name|o1
parameter_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|,
name|Double
argument_list|>
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getValue
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
operator|-
operator|(
name|finalTrim
condition|?
name|k
else|:
name|pf
operator|*
name|k
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|ngrams
operator|.
name|remove
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Takes a serialized n-gram estimator object created by the serialize() method and merges    * it with the current n-gram object.    *    * @param other A serialized n-gram object created by the serialize() method    * @see merge    */
specifier|public
name|void
name|merge
parameter_list|(
name|List
argument_list|<
name|Text
argument_list|>
name|other
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// Get estimation parameters
name|int
name|otherK
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|other
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|otherN
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|other
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|otherPF
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|other
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|k
operator|>
literal|0
operator|&&
name|k
operator|!=
name|otherK
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|": mismatch in value for 'k'"
operator|+
literal|", which usually is caused by a non-constant expression. Found '"
operator|+
name|k
operator|+
literal|"' and '"
operator|+
name|otherK
operator|+
literal|"'."
argument_list|)
throw|;
block|}
if|if
condition|(
name|n
operator|>
literal|0
operator|&&
name|otherN
operator|!=
name|n
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|": mismatch in value for 'n'"
operator|+
literal|", which usually is caused by a non-constant expression. Found '"
operator|+
name|n
operator|+
literal|"' and '"
operator|+
name|otherN
operator|+
literal|"'."
argument_list|)
throw|;
block|}
if|if
condition|(
name|pf
operator|>
literal|0
operator|&&
name|otherPF
operator|!=
name|pf
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|": mismatch in value for 'pf'"
operator|+
literal|", which usually is caused by a non-constant expression. Found '"
operator|+
name|pf
operator|+
literal|"' and '"
operator|+
name|otherPF
operator|+
literal|"'."
argument_list|)
throw|;
block|}
name|k
operator|=
name|otherK
expr_stmt|;
name|pf
operator|=
name|otherPF
expr_stmt|;
name|n
operator|=
name|otherN
expr_stmt|;
comment|// Merge the other estimation into the current one
for|for
control|(
name|int
name|i
init|=
literal|3
init|;
name|i
operator|<
name|other
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|key
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|n
condition|;
name|j
operator|++
control|)
block|{
name|Text
name|word
init|=
name|other
operator|.
name|get
argument_list|(
name|i
operator|+
name|j
argument_list|)
decl_stmt|;
name|key
operator|.
name|add
argument_list|(
name|word
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|i
operator|+=
name|n
expr_stmt|;
name|double
name|val
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|other
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Double
name|myval
init|=
name|ngrams
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|myval
operator|==
literal|null
condition|)
block|{
name|myval
operator|=
operator|new
name|Double
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|myval
operator|+=
name|val
expr_stmt|;
block|}
name|ngrams
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|myval
argument_list|)
expr_stmt|;
block|}
name|trim
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * In preparation for a Hive merge() call, serializes the current n-gram estimator object into an    * ArrayList of Text objects. This list is deserialized and merged by the     * merge method.    *    * @return An ArrayList of Hadoop Text objects that represents the current    * n-gram estimation.    * @see merge(ArrayList<Text>)    */
specifier|public
name|ArrayList
argument_list|<
name|Text
argument_list|>
name|serialize
parameter_list|()
throws|throws
name|HiveException
block|{
name|ArrayList
argument_list|<
name|Text
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Text
argument_list|>
argument_list|()
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|k
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|n
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|pf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|it
init|=
name|ngrams
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|mykey
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|mykey
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mykey
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
name|mykey
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Double
name|myval
init|=
name|ngrams
operator|.
name|get
argument_list|(
name|mykey
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
name|myval
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

