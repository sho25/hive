begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|alter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|EnvironmentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|CalcitePlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseUtils
import|;
end_import

begin_comment
comment|/**  * Operation process of enabling/disabling materialized view rewrite.  */
end_comment

begin_class
specifier|public
class|class
name|AlterMaterializedViewRewriteOperation
extends|extends
name|DDLOperation
block|{
specifier|private
specifier|final
name|AlterMaterializedViewRewriteDesc
name|desc
decl_stmt|;
specifier|public
name|AlterMaterializedViewRewriteOperation
parameter_list|(
name|DDLOperationContext
name|context
parameter_list|,
name|AlterMaterializedViewRewriteDesc
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|desc
operator|=
name|desc
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|()
throws|throws
name|HiveException
block|{
name|Table
name|mv
init|=
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|getTable
argument_list|(
name|desc
operator|.
name|getMaterializedViewName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mv
operator|.
name|isRewriteEnabled
argument_list|()
operator|==
name|desc
operator|.
name|isRewriteEnable
argument_list|()
condition|)
block|{
comment|// This is a noop, return successfully
return|return
literal|0
return|;
block|}
name|Table
name|newMV
init|=
name|mv
operator|.
name|copy
argument_list|()
decl_stmt|;
comment|// Do not mess with Table instance
if|if
condition|(
name|desc
operator|.
name|isRewriteEnable
argument_list|()
condition|)
block|{
try|try
block|{
name|QueryState
name|qs
init|=
operator|new
name|QueryState
operator|.
name|Builder
argument_list|()
operator|.
name|withHiveConf
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|CalcitePlanner
name|planner
init|=
operator|new
name|CalcitePlanner
argument_list|(
name|qs
argument_list|)
decl_stmt|;
name|Context
name|ctx
init|=
operator|new
name|Context
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|setIsLoadingMaterializedView
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|planner
operator|.
name|initCtx
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|planner
operator|.
name|init
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|RelNode
name|plan
init|=
name|planner
operator|.
name|genLogicalPlan
argument_list|(
name|ParseUtils
operator|.
name|parse
argument_list|(
name|newMV
operator|.
name|getViewExpandedText
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|plan
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"Cannot enable automatic rewriting for materialized view."
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|getCboInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|msg
operator|+=
literal|" "
operator|+
name|ctx
operator|.
name|getCboInfo
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|planner
operator|.
name|isValidAutomaticRewritingMaterialization
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Cannot enable rewriting for materialized view. "
operator|+
name|planner
operator|.
name|getInvalidAutomaticRewritingMaterializationReason
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|newMV
operator|.
name|setRewriteEnabled
argument_list|(
name|desc
operator|.
name|isRewriteEnable
argument_list|()
argument_list|)
expr_stmt|;
name|EnvironmentContext
name|environmentContext
init|=
operator|new
name|EnvironmentContext
argument_list|()
decl_stmt|;
name|environmentContext
operator|.
name|putToProperties
argument_list|(
name|StatsSetupConst
operator|.
name|DO_NOT_UPDATE_STATS
argument_list|,
name|StatsSetupConst
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|alterTable
argument_list|(
name|newMV
argument_list|,
literal|false
argument_list|,
name|environmentContext
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

