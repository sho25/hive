begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_comment
comment|/**  * Lead Lag functionality  */
end_comment

begin_class
specifier|public
class|class
name|LeadLagInfo
block|{
comment|/**    * list of LL invocations in a Query.    */
name|List
argument_list|<
name|ExprNodeGenericFuncDesc
argument_list|>
name|leadLagExprs
decl_stmt|;
comment|/**    * map from the Select Expr Node to the LL Function invocations in it.    */
name|Map
argument_list|<
name|ExprNodeDesc
argument_list|,
name|List
argument_list|<
name|ExprNodeGenericFuncDesc
argument_list|>
argument_list|>
name|mapTopExprToLLFunExprs
decl_stmt|;
specifier|private
name|void
name|addLeadLagExpr
parameter_list|(
name|ExprNodeGenericFuncDesc
name|llFunc
parameter_list|)
block|{
name|leadLagExprs
operator|=
name|leadLagExprs
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|ExprNodeGenericFuncDesc
argument_list|>
argument_list|()
else|:
name|leadLagExprs
expr_stmt|;
name|leadLagExprs
operator|.
name|add
argument_list|(
name|llFunc
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ExprNodeGenericFuncDesc
argument_list|>
name|getLeadLagExprs
parameter_list|()
block|{
return|return
name|leadLagExprs
return|;
block|}
specifier|public
name|void
name|addLLFuncExprForTopExpr
parameter_list|(
name|ExprNodeDesc
name|topExpr
parameter_list|,
name|ExprNodeGenericFuncDesc
name|llFuncExpr
parameter_list|)
block|{
name|addLeadLagExpr
argument_list|(
name|llFuncExpr
argument_list|)
expr_stmt|;
name|mapTopExprToLLFunExprs
operator|=
name|mapTopExprToLLFunExprs
operator|==
literal|null
condition|?
operator|new
name|HashMap
argument_list|<
name|ExprNodeDesc
argument_list|,
name|List
argument_list|<
name|ExprNodeGenericFuncDesc
argument_list|>
argument_list|>
argument_list|()
else|:
name|mapTopExprToLLFunExprs
expr_stmt|;
name|List
argument_list|<
name|ExprNodeGenericFuncDesc
argument_list|>
name|funcList
init|=
name|mapTopExprToLLFunExprs
operator|.
name|get
argument_list|(
name|topExpr
argument_list|)
decl_stmt|;
if|if
condition|(
name|funcList
operator|==
literal|null
condition|)
block|{
name|funcList
operator|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeGenericFuncDesc
argument_list|>
argument_list|()
expr_stmt|;
name|mapTopExprToLLFunExprs
operator|.
name|put
argument_list|(
name|topExpr
argument_list|,
name|funcList
argument_list|)
expr_stmt|;
block|}
name|funcList
operator|.
name|add
argument_list|(
name|llFuncExpr
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ExprNodeGenericFuncDesc
argument_list|>
name|getLLFuncExprsInTopExpr
parameter_list|(
name|ExprNodeDesc
name|topExpr
parameter_list|)
block|{
if|if
condition|(
name|mapTopExprToLLFunExprs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|mapTopExprToLLFunExprs
operator|.
name|get
argument_list|(
name|topExpr
argument_list|)
return|;
block|}
block|}
end_class

end_unit

