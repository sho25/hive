begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaHookLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|EnvironmentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalPrivilegeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_class
specifier|public
class|class
name|SessionHiveMetaStoreClient
extends|extends
name|HiveMetaStoreClient
implements|implements
name|IMetaStoreClient
block|{
name|SessionHiveMetaStoreClient
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|MetaException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|SessionHiveMetaStoreClient
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|HiveMetaHookLoader
name|hookLoader
parameter_list|)
throws|throws
name|MetaException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|hookLoader
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Warehouse
name|wh
init|=
literal|null
decl_stmt|;
specifier|private
name|Warehouse
name|getWh
parameter_list|()
throws|throws
name|MetaException
block|{
if|if
condition|(
name|wh
operator|==
literal|null
condition|)
block|{
name|wh
operator|=
operator|new
name|Warehouse
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|wh
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|create_table_with_environment_context
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|tbl
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
if|if
condition|(
name|tbl
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|createTempTable
argument_list|(
name|tbl
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// non-temp tables should use underlying client.
name|super
operator|.
name|create_table_with_environment_context
argument_list|(
name|tbl
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|drop_table_with_environment_context
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
throws|,
name|UnsupportedOperationException
block|{
comment|// First try temp table
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|table
init|=
name|getTempTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|dropTempTable
argument_list|(
name|table
argument_list|,
name|deleteData
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Try underlying client
name|super
operator|.
name|drop_table_with_environment_context
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|deleteData
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|getTable
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
block|{
comment|// First check temp tables
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|table
init|=
name|getTempTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
return|return
name|deepCopy
argument_list|(
name|table
argument_list|)
return|;
comment|// Original method used deepCopy(), do the same here.
block|}
comment|// Try underlying client
return|return
name|super
operator|.
name|getTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllTables
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
name|super
operator|.
name|getAllTables
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
comment|// May need to merge with list of temp tables
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tables
init|=
name|getTempTablesForDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tables
operator|==
literal|null
operator|||
name|tables
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|tableNames
return|;
block|}
comment|// Get list of temp table names
name|Set
argument_list|<
name|String
argument_list|>
name|tempTableNames
init|=
name|tables
operator|.
name|keySet
argument_list|()
decl_stmt|;
comment|// Merge and sort result
name|Set
argument_list|<
name|String
argument_list|>
name|allTableNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|tableNames
operator|.
name|size
argument_list|()
operator|+
name|tempTableNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|allTableNames
operator|.
name|addAll
argument_list|(
name|tableNames
argument_list|)
expr_stmt|;
name|allTableNames
operator|.
name|addAll
argument_list|(
name|tempTableNames
argument_list|)
expr_stmt|;
name|tableNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|allTableNames
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|tableNames
argument_list|)
expr_stmt|;
return|return
name|tableNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tablePattern
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
name|super
operator|.
name|getTables
argument_list|(
name|dbName
argument_list|,
name|tablePattern
argument_list|)
decl_stmt|;
comment|// May need to merge with list of temp tables
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|tablePattern
operator|=
name|tablePattern
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tables
init|=
name|getTempTablesForDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tables
operator|==
literal|null
operator|||
name|tables
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|tableNames
return|;
block|}
name|tablePattern
operator|=
name|tablePattern
operator|.
name|replaceAll
argument_list|(
literal|"\\*"
argument_list|,
literal|".*"
argument_list|)
expr_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|tablePattern
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|combinedTableNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|tableName
range|:
name|tables
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|matcher
operator|==
literal|null
condition|)
block|{
name|matcher
operator|=
name|pattern
operator|.
name|matcher
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|matcher
operator|.
name|reset
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|combinedTableNames
operator|.
name|add
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Combine/sort temp and normal table results
name|combinedTableNames
operator|.
name|addAll
argument_list|(
name|tableNames
argument_list|)
expr_stmt|;
name|tableNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|combinedTableNames
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|tableNames
argument_list|)
expr_stmt|;
return|return
name|tableNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
argument_list|>
name|getTableObjectsByName
parameter_list|(
name|String
name|dbName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidOperationException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getTempTables
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// No temp tables, just call underlying client
return|return
name|super
operator|.
name|getTableObjectsByName
argument_list|(
name|dbName
argument_list|,
name|tableNames
argument_list|)
return|;
block|}
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
argument_list|>
name|tables
init|=
operator|new
name|ArrayList
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|tableName
range|:
name|tableNames
control|)
block|{
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|table
init|=
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|tables
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|err
parameter_list|)
block|{
comment|// Ignore error, just return the valid tables that are found.
block|}
block|}
return|return
name|tables
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|tableExists
parameter_list|(
name|String
name|databaseName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownDBException
block|{
comment|// First check temp tables
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|table
init|=
name|getTempTable
argument_list|(
name|databaseName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Try underlying client
return|return
name|super
operator|.
name|tableExists
argument_list|(
name|databaseName
argument_list|,
name|tableName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alter_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|new_tbl
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
comment|// First try temp table
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|old_tbl
init|=
name|getTempTable
argument_list|(
name|dbname
argument_list|,
name|tbl_name
argument_list|)
decl_stmt|;
if|if
condition|(
name|old_tbl
operator|!=
literal|null
condition|)
block|{
name|alterTempTable
argument_list|(
name|dbname
argument_list|,
name|tbl_name
argument_list|,
name|old_tbl
argument_list|,
name|new_tbl
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Try underlying client
name|super
operator|.
name|alter_table
argument_list|(
name|dbname
argument_list|,
name|tbl_name
argument_list|,
name|new_tbl
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|get_privilege_set
parameter_list|(
name|HiveObjectRef
name|hiveObject
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
comment|// If caller is looking for temp table, handle here. Otherwise pass on to underlying client.
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|TABLE
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|table
init|=
name|getTempTable
argument_list|(
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
return|return
name|deepCopy
argument_list|(
name|table
operator|.
name|getPrivileges
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|super
operator|.
name|get_privilege_set
argument_list|(
name|hiveObject
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
specifier|private
name|void
name|createTempTable
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|tbl
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"No current SessionState, cannot create temporary table"
operator|+
name|tbl
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
throw|;
block|}
comment|// We may not own the table object, create a copy
name|tbl
operator|=
name|deepCopyAndLowerCaseTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
name|tbl
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|tblName
init|=
name|tbl
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tables
init|=
name|getTempTablesForDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tables
operator|!=
literal|null
operator|&&
name|tables
operator|.
name|containsKey
argument_list|(
name|tblName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Temporary table "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
comment|// Create temp table directory
name|Warehouse
name|wh
init|=
name|getWh
argument_list|()
decl_stmt|;
name|Path
name|tblPath
init|=
name|wh
operator|.
name|getDnsPath
argument_list|(
operator|new
name|Path
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Temp table path not set for "
operator|+
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|wh
operator|.
name|isDir
argument_list|(
name|tblPath
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|wh
operator|.
name|mkdirs
argument_list|(
name|tblPath
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|tblPath
operator|+
literal|" is not a directory or unable to create one"
argument_list|)
throw|;
block|}
block|}
block|}
comment|// Add temp table info to current session
name|Table
name|tTable
init|=
operator|new
name|Table
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
if|if
condition|(
name|tables
operator|==
literal|null
condition|)
block|{
name|tables
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
argument_list|()
expr_stmt|;
name|ss
operator|.
name|getTempTables
argument_list|()
operator|.
name|put
argument_list|(
name|dbName
argument_list|,
name|tables
argument_list|)
expr_stmt|;
block|}
name|tables
operator|.
name|put
argument_list|(
name|tblName
argument_list|,
name|tTable
argument_list|)
expr_stmt|;
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|getTempTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tables
init|=
name|getTempTablesForDatabase
argument_list|(
name|dbName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tables
operator|!=
literal|null
condition|)
block|{
name|Table
name|table
init|=
name|tables
operator|.
name|get
argument_list|(
name|tableName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
return|return
name|table
operator|.
name|getTTable
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|alterTempTable
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|oldt
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|newt
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|Table
name|newTable
init|=
operator|new
name|Table
argument_list|(
name|deepCopyAndLowerCaseTable
argument_list|(
name|newt
argument_list|)
argument_list|)
decl_stmt|;
name|dbname
operator|=
name|dbname
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|tbl_name
operator|=
name|tbl_name
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
comment|// Disallow changing temp table location
if|if
condition|(
operator|!
name|newt
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|equals
argument_list|(
name|oldt
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Temp table location cannot be changed"
argument_list|)
throw|;
block|}
name|String
name|newDbName
init|=
name|newTable
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|newTableName
init|=
name|newTable
operator|.
name|getTableName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|newDbName
operator|.
name|equals
argument_list|(
name|oldt
operator|.
name|getDbName
argument_list|()
argument_list|)
operator|||
operator|!
name|newTableName
operator|.
name|equals
argument_list|(
name|oldt
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
comment|// Table was renamed.
comment|// Do not allow temp table rename if the new name already exists as a temp table
if|if
condition|(
name|getTempTable
argument_list|(
name|newDbName
argument_list|,
name|newTableName
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Cannot rename temporary table to "
operator|+
name|newTableName
operator|+
literal|" - temporary table already exists with the same name"
argument_list|)
throw|;
block|}
comment|// Remove old temp table entry, and add new entry to list of temp tables.
comment|// Note that for temp tables there is no need to rename directories
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tables
init|=
name|getTempTablesForDatabase
argument_list|(
name|dbname
argument_list|)
decl_stmt|;
if|if
condition|(
name|tables
operator|==
literal|null
operator|||
name|tables
operator|.
name|remove
argument_list|(
name|tbl_name
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Could not find temp table entry for "
operator|+
name|dbname
operator|+
literal|"."
operator|+
name|tbl_name
argument_list|)
throw|;
block|}
name|tables
operator|=
name|getTempTablesForDatabase
argument_list|(
name|newDbName
argument_list|)
expr_stmt|;
if|if
condition|(
name|tables
operator|==
literal|null
condition|)
block|{
name|tables
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
argument_list|()
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getTempTables
argument_list|()
operator|.
name|put
argument_list|(
name|newDbName
argument_list|,
name|tables
argument_list|)
expr_stmt|;
block|}
name|tables
operator|.
name|put
argument_list|(
name|newTableName
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getTempTablesForDatabase
argument_list|(
name|dbname
argument_list|)
operator|.
name|put
argument_list|(
name|tbl_name
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|dropTempTable
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|table
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
throws|,
name|UnsupportedOperationException
block|{
name|String
name|dbName
init|=
name|table
operator|.
name|getDbName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|table
operator|.
name|getTableName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
comment|// Determine the temp table path
name|Path
name|tablePath
init|=
literal|null
decl_stmt|;
name|String
name|pathStr
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|pathStr
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|tablePath
operator|=
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getWh
argument_list|()
operator|.
name|isWritable
argument_list|(
name|tablePath
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Table metadata not deleted since "
operator|+
name|tablePath
operator|.
name|getParent
argument_list|()
operator|+
literal|" is not writable by "
operator|+
name|conf
operator|.
name|getUser
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|MetaException
name|metaException
init|=
operator|new
name|MetaException
argument_list|(
literal|"Error checking temp table path for "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|metaException
operator|.
name|initCause
argument_list|(
name|err
argument_list|)
expr_stmt|;
throw|throw
name|metaException
throw|;
block|}
block|}
comment|// Remove table entry from SessionState
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tables
init|=
name|getTempTablesForDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tables
operator|==
literal|null
operator|||
name|tables
operator|.
name|remove
argument_list|(
name|tableName
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Could not find temp table entry for "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tableName
argument_list|)
throw|;
block|}
comment|// Delete table data
if|if
condition|(
name|deleteData
operator|&&
operator|!
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|table
argument_list|)
condition|)
block|{
try|try
block|{
name|getWh
argument_list|()
operator|.
name|deleteDir
argument_list|(
name|tablePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to delete temp table directory: "
operator|+
name|tablePath
argument_list|,
name|err
argument_list|)
expr_stmt|;
comment|// Forgive error
block|}
block|}
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|deepCopyAndLowerCaseTable
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|tbl
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|newCopy
init|=
name|deepCopy
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
name|newCopy
operator|.
name|setDbName
argument_list|(
name|newCopy
operator|.
name|getDbName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|newCopy
operator|.
name|setTableName
argument_list|(
name|newCopy
operator|.
name|getTableName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newCopy
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|getTempTablesForDatabase
parameter_list|(
name|String
name|dbName
parameter_list|)
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No current SessionState, skipping temp tables"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|ss
operator|.
name|getTempTables
argument_list|()
operator|.
name|get
argument_list|(
name|dbName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

