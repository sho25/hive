begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|io
operator|.
name|HdfsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaHookLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|EnvironmentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidInputException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalPrivilegeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SetPartitionsStatsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TableMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownTableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|SecurityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_class
specifier|public
class|class
name|SessionHiveMetaStoreClient
extends|extends
name|HiveMetaStoreClient
implements|implements
name|IMetaStoreClient
block|{
name|SessionHiveMetaStoreClient
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Boolean
name|allowEmbedded
parameter_list|)
throws|throws
name|MetaException
block|{
name|super
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|allowEmbedded
argument_list|)
expr_stmt|;
block|}
name|SessionHiveMetaStoreClient
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HiveMetaHookLoader
name|hookLoader
parameter_list|,
name|Boolean
name|allowEmbedded
parameter_list|)
throws|throws
name|MetaException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|hookLoader
argument_list|,
name|allowEmbedded
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Warehouse
name|wh
init|=
literal|null
decl_stmt|;
specifier|private
name|Warehouse
name|getWh
parameter_list|()
throws|throws
name|MetaException
block|{
if|if
condition|(
name|wh
operator|==
literal|null
condition|)
block|{
name|wh
operator|=
operator|new
name|Warehouse
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|wh
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|create_table_with_environment_context
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|tbl
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
if|if
condition|(
name|tbl
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|createTempTable
argument_list|(
name|tbl
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// non-temp tables should use underlying client.
name|super
operator|.
name|create_table_with_environment_context
argument_list|(
name|tbl
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|drop_table_with_environment_context
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
throws|,
name|UnsupportedOperationException
block|{
comment|// First try temp table
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|table
init|=
name|getTempTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|deleteTempTableColumnStatsForTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|err
parameter_list|)
block|{
comment|// No stats to delete, forgivable error.
name|LOG
operator|.
name|info
argument_list|(
literal|"Object not found in metastore"
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
name|dropTempTable
argument_list|(
name|table
argument_list|,
name|deleteData
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Try underlying client
name|super
operator|.
name|drop_table_with_environment_context
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|deleteData
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|truncateTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
comment|// First try temp table
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|table
init|=
name|getTempTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|truncateTempTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Try underlying client
name|super
operator|.
name|truncateTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|getTable
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
block|{
comment|// First check temp tables
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|table
init|=
name|getTempTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
return|return
name|deepCopy
argument_list|(
name|table
argument_list|)
return|;
comment|// Original method used deepCopy(), do the same here.
block|}
comment|// Try underlying client
return|return
name|super
operator|.
name|getTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllTables
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
name|super
operator|.
name|getAllTables
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
comment|// May need to merge with list of temp tables
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tables
init|=
name|getTempTablesForDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tables
operator|==
literal|null
operator|||
name|tables
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|tableNames
return|;
block|}
comment|// Get list of temp table names
name|Set
argument_list|<
name|String
argument_list|>
name|tempTableNames
init|=
name|tables
operator|.
name|keySet
argument_list|()
decl_stmt|;
comment|// Merge and sort result
name|Set
argument_list|<
name|String
argument_list|>
name|allTableNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|tableNames
operator|.
name|size
argument_list|()
operator|+
name|tempTableNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|allTableNames
operator|.
name|addAll
argument_list|(
name|tableNames
argument_list|)
expr_stmt|;
name|allTableNames
operator|.
name|addAll
argument_list|(
name|tempTableNames
argument_list|)
expr_stmt|;
name|tableNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|allTableNames
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|tableNames
argument_list|)
expr_stmt|;
return|return
name|tableNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tablePattern
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
name|super
operator|.
name|getTables
argument_list|(
name|dbName
argument_list|,
name|tablePattern
argument_list|)
decl_stmt|;
comment|// May need to merge with list of temp tables
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|tablePattern
operator|=
name|tablePattern
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tables
init|=
name|getTempTablesForDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tables
operator|==
literal|null
operator|||
name|tables
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|tableNames
return|;
block|}
name|tablePattern
operator|=
name|tablePattern
operator|.
name|replaceAll
argument_list|(
literal|"\\*"
argument_list|,
literal|".*"
argument_list|)
expr_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|tablePattern
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|combinedTableNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|tableName
range|:
name|tables
operator|.
name|keySet
argument_list|()
control|)
block|{
name|matcher
operator|.
name|reset
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|combinedTableNames
operator|.
name|add
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Combine/sort temp and normal table results
name|combinedTableNames
operator|.
name|addAll
argument_list|(
name|tableNames
argument_list|)
expr_stmt|;
name|tableNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|combinedTableNames
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|tableNames
argument_list|)
expr_stmt|;
return|return
name|tableNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TableMeta
argument_list|>
name|getTableMeta
parameter_list|(
name|String
name|dbPatterns
parameter_list|,
name|String
name|tablePatterns
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableTypes
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|TableMeta
argument_list|>
name|tableMetas
init|=
name|super
operator|.
name|getTableMeta
argument_list|(
name|dbPatterns
argument_list|,
name|tablePatterns
argument_list|,
name|tableTypes
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
argument_list|>
name|tmpTables
init|=
name|getTempTables
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmpTables
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|tableMetas
return|;
block|}
name|List
argument_list|<
name|Matcher
argument_list|>
name|dbPatternList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|element
range|:
name|dbPatterns
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
control|)
block|{
name|dbPatternList
operator|.
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|element
operator|.
name|replaceAll
argument_list|(
literal|"\\*"
argument_list|,
literal|".*"
argument_list|)
argument_list|)
operator|.
name|matcher
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Matcher
argument_list|>
name|tblPatternList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|element
range|:
name|tablePatterns
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
control|)
block|{
name|tblPatternList
operator|.
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|element
operator|.
name|replaceAll
argument_list|(
literal|"\\*"
argument_list|,
literal|".*"
argument_list|)
argument_list|)
operator|.
name|matcher
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
argument_list|>
name|outer
range|:
name|tmpTables
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|matchesAny
argument_list|(
name|outer
operator|.
name|getKey
argument_list|()
argument_list|,
name|dbPatternList
argument_list|)
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|inner
range|:
name|outer
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Table
name|table
init|=
name|inner
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|table
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|String
name|typeString
init|=
name|table
operator|.
name|getTableType
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableTypes
operator|!=
literal|null
operator|&&
operator|!
name|tableTypes
operator|.
name|contains
argument_list|(
name|typeString
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|matchesAny
argument_list|(
name|inner
operator|.
name|getKey
argument_list|()
argument_list|,
name|tblPatternList
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|TableMeta
name|tableMeta
init|=
operator|new
name|TableMeta
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|typeString
argument_list|)
decl_stmt|;
name|tableMeta
operator|.
name|setComments
argument_list|(
name|table
operator|.
name|getProperty
argument_list|(
literal|"comment"
argument_list|)
argument_list|)
expr_stmt|;
name|tableMetas
operator|.
name|add
argument_list|(
name|tableMeta
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tableMetas
return|;
block|}
specifier|private
name|boolean
name|matchesAny
parameter_list|(
name|String
name|string
parameter_list|,
name|List
argument_list|<
name|Matcher
argument_list|>
name|matchers
parameter_list|)
block|{
for|for
control|(
name|Matcher
name|matcher
range|:
name|matchers
control|)
block|{
if|if
condition|(
name|matcher
operator|.
name|reset
argument_list|(
name|string
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
name|matchers
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
argument_list|>
name|getTableObjectsByName
parameter_list|(
name|String
name|dbName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidOperationException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|==
literal|null
operator|||
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getTempTables
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// No temp tables, just call underlying client
return|return
name|super
operator|.
name|getTableObjectsByName
argument_list|(
name|dbName
argument_list|,
name|tableNames
argument_list|)
return|;
block|}
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
argument_list|>
name|tables
init|=
operator|new
name|ArrayList
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|tableName
range|:
name|tableNames
control|)
block|{
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|table
init|=
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|tables
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|err
parameter_list|)
block|{
comment|// Ignore error, just return the valid tables that are found.
block|}
block|}
return|return
name|tables
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|tableExists
parameter_list|(
name|String
name|databaseName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownDBException
block|{
comment|// First check temp tables
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|table
init|=
name|getTempTable
argument_list|(
name|databaseName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Try underlying client
return|return
name|super
operator|.
name|tableExists
argument_list|(
name|databaseName
argument_list|,
name|tableName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getSchema
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
block|{
comment|// First check temp tables
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|table
init|=
name|getTempTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
return|return
name|deepCopyFieldSchemas
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
return|;
block|}
comment|// Try underlying client
return|return
name|super
operator|.
name|getSchema
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|alter_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|new_tbl
parameter_list|,
name|boolean
name|cascade
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|old_tbl
init|=
name|getTempTable
argument_list|(
name|dbname
argument_list|,
name|tbl_name
argument_list|)
decl_stmt|;
if|if
condition|(
name|old_tbl
operator|!=
literal|null
condition|)
block|{
comment|//actually temp table does not support partitions, cascade is not applicable here
name|alterTempTable
argument_list|(
name|dbname
argument_list|,
name|tbl_name
argument_list|,
name|old_tbl
argument_list|,
name|new_tbl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|super
operator|.
name|alter_table
argument_list|(
name|dbname
argument_list|,
name|tbl_name
argument_list|,
name|new_tbl
argument_list|,
name|cascade
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alter_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|new_tbl
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|old_tbl
init|=
name|getTempTable
argument_list|(
name|dbname
argument_list|,
name|tbl_name
argument_list|)
decl_stmt|;
if|if
condition|(
name|old_tbl
operator|!=
literal|null
condition|)
block|{
comment|// actually temp table does not support partitions, cascade is not
comment|// applicable here
name|alterTempTable
argument_list|(
name|dbname
argument_list|,
name|tbl_name
argument_list|,
name|old_tbl
argument_list|,
name|new_tbl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|super
operator|.
name|alter_table
argument_list|(
name|dbname
argument_list|,
name|tbl_name
argument_list|,
name|new_tbl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alter_table_with_environmentContext
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|new_tbl
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
comment|// First try temp table
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|old_tbl
init|=
name|getTempTable
argument_list|(
name|dbname
argument_list|,
name|tbl_name
argument_list|)
decl_stmt|;
if|if
condition|(
name|old_tbl
operator|!=
literal|null
condition|)
block|{
name|alterTempTable
argument_list|(
name|dbname
argument_list|,
name|tbl_name
argument_list|,
name|old_tbl
argument_list|,
name|new_tbl
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Try underlying client
name|super
operator|.
name|alter_table_with_environmentContext
argument_list|(
name|dbname
argument_list|,
name|tbl_name
argument_list|,
name|new_tbl
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|get_privilege_set
parameter_list|(
name|HiveObjectRef
name|hiveObject
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
comment|// If caller is looking for temp table, handle here. Otherwise pass on to underlying client.
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|TABLE
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|table
init|=
name|getTempTable
argument_list|(
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
return|return
name|deepCopy
argument_list|(
name|table
operator|.
name|getPrivileges
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|super
operator|.
name|get_privilege_set
argument_list|(
name|hiveObject
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|boolean
name|setPartitionColumnStatistics
parameter_list|(
name|SetPartitionsStatsRequest
name|request
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
throws|,
name|InvalidInputException
block|{
if|if
condition|(
name|request
operator|.
name|getColStatsSize
argument_list|()
operator|==
literal|1
condition|)
block|{
name|ColumnStatistics
name|colStats
init|=
name|request
operator|.
name|getColStatsIterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
name|colStats
operator|.
name|getStatsDesc
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|desc
operator|.
name|getDbName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|desc
operator|.
name|getTableName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|getTempTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|updateTempTableColumnStats
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|colStats
argument_list|)
return|;
block|}
block|}
return|return
name|super
operator|.
name|setPartitionColumnStatistics
argument_list|(
name|request
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|getTableColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
throws|,
name|InvalidInputException
throws|,
name|InvalidObjectException
block|{
if|if
condition|(
name|getTempTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|getTempTableColumnStats
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|colNames
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|getTableColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|colNames
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|boolean
name|deleteTableColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
throws|,
name|InvalidInputException
block|{
if|if
condition|(
name|getTempTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|deleteTempTableColumnStats
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|colName
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|deleteTableColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|colName
argument_list|)
return|;
block|}
specifier|private
name|void
name|createTempTable
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|tbl
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|boolean
name|isVirtualTable
init|=
name|tbl
operator|.
name|getTableName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|SemanticAnalyzer
operator|.
name|VALUES_TMP_TABLE_NAME_PREFIX
argument_list|)
decl_stmt|;
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"No current SessionState, cannot create temporary table"
operator|+
name|Warehouse
operator|.
name|getQualifiedName
argument_list|(
name|tbl
argument_list|)
argument_list|)
throw|;
block|}
comment|// We may not own the table object, create a copy
name|tbl
operator|=
name|deepCopyAndLowerCaseTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
name|tbl
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|tblName
init|=
name|tbl
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tables
init|=
name|getTempTablesForDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tables
operator|!=
literal|null
operator|&&
name|tables
operator|.
name|containsKey
argument_list|(
name|tblName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Temporary table "
operator|+
name|StatsUtils
operator|.
name|getFullyQualifiedTableName
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
comment|// Create temp table directory
name|Warehouse
name|wh
init|=
name|getWh
argument_list|()
decl_stmt|;
name|Path
name|tblPath
init|=
name|wh
operator|.
name|getDnsPath
argument_list|(
operator|new
name|Path
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Temp table path not set for "
operator|+
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|wh
operator|.
name|isDir
argument_list|(
name|tblPath
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|wh
operator|.
name|mkdirs
argument_list|(
name|tblPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|tblPath
operator|+
literal|" is not a directory or unable to create one"
argument_list|)
throw|;
block|}
block|}
comment|// Make sure location string is in proper format
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|tblPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add temp table info to current session
name|Table
name|tTable
init|=
operator|new
name|Table
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isVirtualTable
condition|)
block|{
name|StatsSetupConst
operator|.
name|setStatsStateForCreateTable
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
operator|.
name|getColumnNamesForTable
argument_list|(
name|tbl
argument_list|)
argument_list|,
name|StatsSetupConst
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tables
operator|==
literal|null
condition|)
block|{
name|tables
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
argument_list|()
expr_stmt|;
name|ss
operator|.
name|getTempTables
argument_list|()
operator|.
name|put
argument_list|(
name|dbName
argument_list|,
name|tables
argument_list|)
expr_stmt|;
block|}
name|tables
operator|.
name|put
argument_list|(
name|tblName
argument_list|,
name|tTable
argument_list|)
expr_stmt|;
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|getTempTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tables
init|=
name|getTempTablesForDatabase
argument_list|(
name|dbName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tables
operator|!=
literal|null
condition|)
block|{
name|Table
name|table
init|=
name|tables
operator|.
name|get
argument_list|(
name|tableName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
return|return
name|table
operator|.
name|getTTable
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|alterTempTable
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|oldt
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|newt
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|dbname
operator|=
name|dbname
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|tbl_name
operator|=
name|tbl_name
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|boolean
name|shouldDeleteColStats
init|=
literal|false
decl_stmt|;
comment|// Disallow changing temp table location
if|if
condition|(
operator|!
name|newt
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|equals
argument_list|(
name|oldt
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Temp table location cannot be changed"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|newtCopy
init|=
name|deepCopyAndLowerCaseTable
argument_list|(
name|newt
argument_list|)
decl_stmt|;
name|Table
name|newTable
init|=
operator|new
name|Table
argument_list|(
name|newtCopy
argument_list|)
decl_stmt|;
name|String
name|newDbName
init|=
name|newTable
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|newTableName
init|=
name|newTable
operator|.
name|getTableName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|newDbName
operator|.
name|equals
argument_list|(
name|oldt
operator|.
name|getDbName
argument_list|()
argument_list|)
operator|||
operator|!
name|newTableName
operator|.
name|equals
argument_list|(
name|oldt
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
comment|// Table was renamed.
comment|// Do not allow temp table rename if the new name already exists as a temp table
if|if
condition|(
name|getTempTable
argument_list|(
name|newDbName
argument_list|,
name|newTableName
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Cannot rename temporary table to "
operator|+
name|newTableName
operator|+
literal|" - temporary table already exists with the same name"
argument_list|)
throw|;
block|}
comment|// Remove old temp table entry, and add new entry to list of temp tables.
comment|// Note that for temp tables there is no need to rename directories
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tables
init|=
name|getTempTablesForDatabase
argument_list|(
name|dbname
argument_list|)
decl_stmt|;
if|if
condition|(
name|tables
operator|==
literal|null
operator|||
name|tables
operator|.
name|remove
argument_list|(
name|tbl_name
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Could not find temp table entry for "
operator|+
name|dbname
operator|+
literal|"."
operator|+
name|tbl_name
argument_list|)
throw|;
block|}
name|shouldDeleteColStats
operator|=
literal|true
expr_stmt|;
name|tables
operator|=
name|getTempTablesForDatabase
argument_list|(
name|newDbName
argument_list|)
expr_stmt|;
if|if
condition|(
name|tables
operator|==
literal|null
condition|)
block|{
name|tables
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
argument_list|()
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getTempTables
argument_list|()
operator|.
name|put
argument_list|(
name|newDbName
argument_list|,
name|tables
argument_list|)
expr_stmt|;
block|}
name|tables
operator|.
name|put
argument_list|(
name|newTableName
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|haveTableColumnsChanged
argument_list|(
name|oldt
argument_list|,
name|newt
argument_list|)
condition|)
block|{
name|shouldDeleteColStats
operator|=
literal|true
expr_stmt|;
block|}
name|getTempTablesForDatabase
argument_list|(
name|dbname
argument_list|)
operator|.
name|put
argument_list|(
name|tbl_name
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shouldDeleteColStats
condition|)
block|{
try|try
block|{
name|deleteTempTableColumnStatsForTable
argument_list|(
name|dbname
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|err
parameter_list|)
block|{
comment|// No stats to delete, forgivable error.
name|LOG
operator|.
name|info
argument_list|(
literal|"Object not found in metastore"
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|boolean
name|haveTableColumnsChanged
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|oldt
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|newt
parameter_list|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|oldCols
init|=
name|oldt
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|newCols
init|=
name|newt
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldCols
operator|.
name|size
argument_list|()
operator|!=
name|newCols
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Iterator
argument_list|<
name|FieldSchema
argument_list|>
name|oldColsIter
init|=
name|oldCols
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|FieldSchema
argument_list|>
name|newColsIter
init|=
name|newCols
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|oldColsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// Don't use FieldSchema.equals() since it also compares comments,
comment|// which is unnecessary for this method.
if|if
condition|(
operator|!
name|fieldSchemaEqualsIgnoreComment
argument_list|(
name|oldColsIter
operator|.
name|next
argument_list|()
argument_list|,
name|newColsIter
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|boolean
name|fieldSchemaEqualsIgnoreComment
parameter_list|(
name|FieldSchema
name|left
parameter_list|,
name|FieldSchema
name|right
parameter_list|)
block|{
comment|// Just check name/type for equality, don't compare comment
if|if
condition|(
operator|!
name|left
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|right
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|left
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|right
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|needToUpdateStats
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|,
name|EnvironmentContext
name|environmentContext
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|props
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|statsPresent
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|stat
range|:
name|StatsSetupConst
operator|.
name|supportedStats
control|)
block|{
name|String
name|statVal
init|=
name|props
operator|.
name|get
argument_list|(
name|stat
argument_list|)
decl_stmt|;
if|if
condition|(
name|statVal
operator|!=
literal|null
operator|&&
name|Long
operator|.
name|parseLong
argument_list|(
name|statVal
argument_list|)
operator|>
literal|0
condition|)
block|{
name|statsPresent
operator|=
literal|true
expr_stmt|;
comment|//In the case of truncate table, we set the stats to be 0.
name|props
operator|.
name|put
argument_list|(
name|stat
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//first set basic stats to true
name|StatsSetupConst
operator|.
name|setBasicStatsState
argument_list|(
name|props
argument_list|,
name|StatsSetupConst
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|environmentContext
operator|.
name|putToProperties
argument_list|(
name|StatsSetupConst
operator|.
name|STATS_GENERATED
argument_list|,
name|StatsSetupConst
operator|.
name|TASK
argument_list|)
expr_stmt|;
comment|//then invalidate column stats
name|StatsSetupConst
operator|.
name|clearColumnStatsState
argument_list|(
name|props
argument_list|)
expr_stmt|;
return|return
name|statsPresent
return|;
block|}
specifier|private
name|void
name|truncateTempTable
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|boolean
name|isAutopurge
init|=
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"auto.purge"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
comment|// this is not transactional
name|Path
name|location
init|=
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|location
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|HadoopShims
operator|.
name|HdfsEncryptionShim
name|shim
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|createHdfsEncryptionShim
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shim
operator|.
name|isPathEncrypted
argument_list|(
name|location
argument_list|)
condition|)
block|{
name|HdfsUtils
operator|.
name|HadoopFileStatus
name|status
init|=
operator|new
name|HdfsUtils
operator|.
name|HadoopFileStatus
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|location
argument_list|)
decl_stmt|;
name|FileStatus
name|targetStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|String
name|targetGroup
init|=
name|targetStatus
operator|==
literal|null
condition|?
literal|null
else|:
name|targetStatus
operator|.
name|getGroup
argument_list|()
decl_stmt|;
name|FileUtils
operator|.
name|moveToTrash
argument_list|(
name|fs
argument_list|,
name|location
argument_list|,
name|conf
argument_list|,
name|isAutopurge
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|HdfsUtils
operator|.
name|setFullFileStatus
argument_list|(
name|conf
argument_list|,
name|status
argument_list|,
name|targetGroup
argument_list|,
name|fs
argument_list|,
name|location
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FileStatus
index|[]
name|statuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|location
argument_list|,
name|FileUtils
operator|.
name|HIDDEN_FILES_PATH_FILTER
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|statuses
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|statuses
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
name|boolean
name|success
init|=
name|Hive
operator|.
name|trashFiles
argument_list|(
name|fs
argument_list|,
name|statuses
argument_list|,
name|conf
argument_list|,
name|isAutopurge
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Error in deleting the contents of "
operator|+
name|location
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|EnvironmentContext
name|environmentContext
init|=
operator|new
name|EnvironmentContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|needToUpdateStats
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
argument_list|,
name|environmentContext
argument_list|)
condition|)
block|{
name|alter_table_with_environmentContext
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|table
argument_list|,
name|environmentContext
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|dropTempTable
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|table
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
throws|,
name|UnsupportedOperationException
block|{
name|String
name|dbName
init|=
name|table
operator|.
name|getDbName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|table
operator|.
name|getTableName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
comment|// Determine the temp table path
name|Path
name|tablePath
init|=
literal|null
decl_stmt|;
name|String
name|pathStr
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|pathStr
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|tablePath
operator|=
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getWh
argument_list|()
operator|.
name|isWritable
argument_list|(
name|tablePath
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Table metadata not deleted since "
operator|+
name|tablePath
operator|.
name|getParent
argument_list|()
operator|+
literal|" is not writable by "
operator|+
name|SecurityUtils
operator|.
name|getUser
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|MetaException
name|metaException
init|=
operator|new
name|MetaException
argument_list|(
literal|"Error checking temp table path for "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|metaException
operator|.
name|initCause
argument_list|(
name|err
argument_list|)
expr_stmt|;
throw|throw
name|metaException
throw|;
block|}
block|}
comment|// Remove table entry from SessionState
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tables
init|=
name|getTempTablesForDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tables
operator|==
literal|null
operator|||
name|tables
operator|.
name|remove
argument_list|(
name|tableName
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Could not find temp table entry for "
operator|+
name|StatsUtils
operator|.
name|getFullyQualifiedTableName
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
throw|;
block|}
comment|// Delete table data
if|if
condition|(
name|deleteData
operator|&&
operator|!
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|table
argument_list|)
condition|)
block|{
try|try
block|{
name|boolean
name|ifPurge
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|envContext
operator|!=
literal|null
condition|)
block|{
name|ifPurge
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|envContext
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"ifPurge"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|getWh
argument_list|()
operator|.
name|deleteDir
argument_list|(
name|tablePath
argument_list|,
literal|true
argument_list|,
name|ifPurge
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to delete temp table directory: "
operator|+
name|tablePath
argument_list|,
name|err
argument_list|)
expr_stmt|;
comment|// Forgive error
block|}
block|}
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|deepCopyAndLowerCaseTable
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|tbl
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|newCopy
init|=
name|deepCopy
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
name|newCopy
operator|.
name|setDbName
argument_list|(
name|newCopy
operator|.
name|getDbName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|newCopy
operator|.
name|setTableName
argument_list|(
name|newCopy
operator|.
name|getTableName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newCopy
return|;
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|getTempTablesForDatabase
parameter_list|(
name|String
name|dbName
parameter_list|)
block|{
return|return
name|getTempTables
argument_list|()
operator|.
name|get
argument_list|(
name|dbName
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
argument_list|>
name|getTempTables
parameter_list|()
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No current SessionState, skipping temp tables"
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
return|return
name|ss
operator|.
name|getTempTables
argument_list|()
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
name|getTempTableColumnStatsForTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No current SessionState, skipping temp tables"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
name|lookupName
init|=
name|StatsUtils
operator|.
name|getFullyQualifiedTableName
argument_list|(
name|dbName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|tableName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ss
operator|.
name|getTempTableColStats
argument_list|()
operator|.
name|get
argument_list|(
name|lookupName
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|getTempTableColumnStats
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
name|tableColStats
init|=
name|getTempTableColumnStatsForTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|retval
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableColStats
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|colName
range|:
name|colNames
control|)
block|{
name|colName
operator|=
name|colName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
if|if
condition|(
name|tableColStats
operator|.
name|containsKey
argument_list|(
name|colName
argument_list|)
condition|)
block|{
name|retval
operator|.
name|add
argument_list|(
operator|new
name|ColumnStatisticsObj
argument_list|(
name|tableColStats
operator|.
name|get
argument_list|(
name|colName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|retval
return|;
block|}
specifier|private
name|boolean
name|updateTempTableColumnStats
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|ColumnStatistics
name|colStats
parameter_list|)
throws|throws
name|MetaException
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"No current SessionState, cannot update temporary table stats for "
operator|+
name|StatsUtils
operator|.
name|getFullyQualifiedTableName
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
name|ssTableColStats
init|=
name|getTempTableColumnStatsForTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ssTableColStats
operator|==
literal|null
condition|)
block|{
comment|// Add new entry for this table
name|ssTableColStats
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
argument_list|()
expr_stmt|;
name|ss
operator|.
name|getTempTableColStats
argument_list|()
operator|.
name|put
argument_list|(
name|StatsUtils
operator|.
name|getFullyQualifiedTableName
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|,
name|ssTableColStats
argument_list|)
expr_stmt|;
block|}
name|mergeColumnStats
argument_list|(
name|ssTableColStats
argument_list|,
name|colStats
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|obj
range|:
name|colStats
operator|.
name|getStatsObj
argument_list|()
control|)
block|{
name|colNames
operator|.
name|add
argument_list|(
name|obj
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|table
init|=
name|getTempTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|StatsSetupConst
operator|.
name|setColumnStatsState
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|void
name|mergeColumnStats
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
name|oldStats
parameter_list|,
name|ColumnStatistics
name|newStats
parameter_list|)
block|{
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|newColList
init|=
name|newStats
operator|.
name|getStatsObj
argument_list|()
decl_stmt|;
if|if
condition|(
name|newColList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ColumnStatisticsObj
name|colStat
range|:
name|newColList
control|)
block|{
comment|// This is admittedly a bit simple, StatsObjectConverter seems to allow
comment|// old stats attributes to be kept if the new values do not overwrite them.
name|oldStats
operator|.
name|put
argument_list|(
name|colStat
operator|.
name|getColName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|colStat
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|deleteTempTableColumnStatsForTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
name|deletedEntry
init|=
name|getTempTableColumnStatsForTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|deletedEntry
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getTempTableColStats
argument_list|()
operator|.
name|remove
argument_list|(
name|StatsUtils
operator|.
name|getFullyQualifiedTableName
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Column stats doesn't exist for db="
operator|+
name|dbName
operator|+
literal|" temp table="
operator|+
name|tableName
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|deleteTempTableColumnStats
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
name|ColumnStatisticsObj
name|deletedEntry
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
name|ssTableColStats
init|=
name|getTempTableColumnStatsForTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ssTableColStats
operator|!=
literal|null
condition|)
block|{
name|deletedEntry
operator|=
name|ssTableColStats
operator|.
name|remove
argument_list|(
name|columnName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deletedEntry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Column stats doesn't exist for db="
operator|+
name|dbName
operator|+
literal|" temp table="
operator|+
name|tableName
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

