begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|txn
operator|.
name|compactor
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidWriteIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|CompactionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Run a minor query compaction on an insert only (MM) table.  */
end_comment

begin_class
specifier|final
class|class
name|MmMinorQueryCompactor
extends|extends
name|QueryCompactor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MmMinorQueryCompactor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
name|void
name|runCompaction
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|Table
name|table
parameter_list|,
name|Partition
name|partition
parameter_list|,
name|StorageDescriptor
name|storageDescriptor
parameter_list|,
name|ValidWriteIdList
name|writeIds
parameter_list|,
name|CompactionInfo
name|compactionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to delete directories for aborted transactions for MM table "
operator|+
name|table
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|AcidUtils
operator|.
name|Directory
name|dir
init|=
name|AcidUtils
operator|.
name|getAcidState
argument_list|(
literal|null
argument_list|,
operator|new
name|Path
argument_list|(
name|storageDescriptor
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|,
name|hiveConf
argument_list|,
name|writeIds
argument_list|,
name|Ref
operator|.
name|from
argument_list|(
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|,
name|table
operator|.
name|getParameters
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MmQueryCompactorUtils
operator|.
name|removeFilesForMmTable
argument_list|(
name|hiveConf
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|String
name|tmpLocation
init|=
name|Util
operator|.
name|generateTmpPath
argument_list|(
name|storageDescriptor
argument_list|)
decl_stmt|;
name|Path
name|sourceTabLocation
init|=
operator|new
name|Path
argument_list|(
name|tmpLocation
argument_list|)
decl_stmt|;
name|Path
name|resultTabLocation
init|=
operator|new
name|Path
argument_list|(
name|tmpLocation
argument_list|,
literal|"_result"
argument_list|)
decl_stmt|;
name|HiveConf
name|driverConf
init|=
name|setUpDriverSession
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|String
name|tmpPrefix
init|=
name|table
operator|.
name|getDbName
argument_list|()
operator|+
literal|".tmp_minor_compactor_"
operator|+
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|"_"
decl_stmt|;
name|String
name|tmpTableBase
init|=
name|tmpPrefix
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|createTableQueries
init|=
name|getCreateQueries
argument_list|(
name|tmpTableBase
argument_list|,
name|table
argument_list|,
name|partition
operator|==
literal|null
condition|?
name|table
operator|.
name|getSd
argument_list|()
else|:
name|partition
operator|.
name|getSd
argument_list|()
argument_list|,
name|sourceTabLocation
operator|.
name|toString
argument_list|()
argument_list|,
name|resultTabLocation
operator|.
name|toString
argument_list|()
argument_list|,
name|dir
argument_list|,
name|writeIds
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|compactionQueries
init|=
name|getCompactionQueries
argument_list|(
name|tmpTableBase
argument_list|,
name|table
operator|.
name|getSd
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dropQueries
init|=
name|getDropQueries
argument_list|(
name|tmpTableBase
argument_list|)
decl_stmt|;
name|runCompactionQueries
argument_list|(
name|driverConf
argument_list|,
name|tmpTableBase
argument_list|,
name|storageDescriptor
argument_list|,
name|writeIds
argument_list|,
name|compactionInfo
argument_list|,
name|createTableQueries
argument_list|,
name|compactionQueries
argument_list|,
name|dropQueries
argument_list|)
expr_stmt|;
block|}
comment|/**    * Move files from "result table" directory to table/partition to compact's directory.    */
annotation|@
name|Override
specifier|protected
name|void
name|commitCompaction
parameter_list|(
name|String
name|dest
parameter_list|,
name|String
name|tmpTableName
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|ValidWriteIdList
name|actualWriteIds
parameter_list|,
name|long
name|compactorTxnId
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
name|resultTable
init|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getTable
argument_list|(
name|tmpTableName
operator|+
literal|"_result"
argument_list|)
decl_stmt|;
name|String
name|from
init|=
name|resultTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|Path
name|fromPath
init|=
operator|new
name|Path
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|Path
name|toPath
init|=
operator|new
name|Path
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|fromPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|long
name|maxTxn
init|=
name|actualWriteIds
operator|.
name|getHighWatermark
argument_list|()
decl_stmt|;
name|AcidOutputFormat
operator|.
name|Options
name|options
init|=
operator|new
name|AcidOutputFormat
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
operator|.
name|writingBase
argument_list|(
literal|false
argument_list|)
operator|.
name|isCompressed
argument_list|(
literal|false
argument_list|)
operator|.
name|minimumWriteId
argument_list|(
literal|1
argument_list|)
operator|.
name|maximumWriteId
argument_list|(
name|maxTxn
argument_list|)
operator|.
name|bucket
argument_list|(
literal|0
argument_list|)
operator|.
name|statementId
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|visibilityTxnId
argument_list|(
name|compactorTxnId
argument_list|)
decl_stmt|;
name|Path
name|newDeltaDir
init|=
name|AcidUtils
operator|.
name|createFilename
argument_list|(
name|toPath
argument_list|,
name|options
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|fromPath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|from
operator|+
literal|" not found.  Assuming 0 splits. Creating "
operator|+
name|newDeltaDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|newDeltaDir
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving contents of "
operator|+
name|from
operator|+
literal|" to "
operator|+
name|dest
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|fromPath
argument_list|,
name|newDeltaDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|fromPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a list of create/alter table queries. These tables serves as temporary data source for    * query based minor compaction. The following tables are created:    *<ol>    *<li>tmpTable - "source table": temporary, external, partitioned table. Each partition    *     points to exactly one delta directory in the table/partition to compact</li>    *<li>tmpTable_result - "result table" : temporary table which stores the aggregated    *     results of the minor compaction query until the compaction can be committed</li>    *</ol>    *    * @param tmpTableBase name of the first temp table (second will be $tmpTableBase_result)    * @param t Table to compact    * @param sd storage descriptor of table or partition to compact    * @param sourceTabLocation location the "source table" (temp table 1) should go    * @param resultTabLocation location the "result table (temp table 2) should go    * @param dir the parent directory of delta directories    * @param validWriteIdList valid write ids for the table/partition to compact    * @return List of 3 query strings: 2 create table, 1 alter table    */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getCreateQueries
parameter_list|(
name|String
name|tmpTableBase
parameter_list|,
name|Table
name|t
parameter_list|,
name|StorageDescriptor
name|sd
parameter_list|,
name|String
name|sourceTabLocation
parameter_list|,
name|String
name|resultTabLocation
parameter_list|,
name|AcidUtils
operator|.
name|Directory
name|dir
parameter_list|,
name|ValidWriteIdList
name|validWriteIdList
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|queries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|queries
operator|.
name|add
argument_list|(
name|MmQueryCompactorUtils
operator|.
name|getCreateQuery
argument_list|(
name|tmpTableBase
argument_list|,
name|t
argument_list|,
name|sd
argument_list|,
name|sourceTabLocation
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|buildAlterTableQuery
argument_list|(
name|tmpTableBase
argument_list|,
name|dir
argument_list|,
name|validWriteIdList
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|queries
operator|::
name|add
argument_list|)
expr_stmt|;
name|queries
operator|.
name|add
argument_list|(
name|MmQueryCompactorUtils
operator|.
name|getCreateQuery
argument_list|(
name|tmpTableBase
operator|+
literal|"_result"
argument_list|,
name|t
argument_list|,
name|sd
argument_list|,
name|resultTabLocation
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|queries
return|;
block|}
comment|/**    * Builds an alter table query, which adds partitions pointing to location of delta directories.    *    * @param tableName name of the temp table to be altered    * @param dir the parent directory of delta directories    * @param validWriteIdList valid write ids for the table/partition to compact    * @return alter table statement wrapped in {@link Optional}.    */
specifier|private
name|Optional
argument_list|<
name|String
argument_list|>
name|buildAlterTableQuery
parameter_list|(
name|String
name|tableName
parameter_list|,
name|AcidUtils
operator|.
name|Directory
name|dir
parameter_list|,
name|ValidWriteIdList
name|validWriteIdList
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dir
operator|.
name|getCurrentDirectories
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|long
name|minWriteID
init|=
name|validWriteIdList
operator|.
name|getMinOpenWriteId
argument_list|()
operator|==
literal|null
condition|?
literal|1
else|:
name|validWriteIdList
operator|.
name|getMinOpenWriteId
argument_list|()
decl_stmt|;
name|long
name|highWatermark
init|=
name|validWriteIdList
operator|.
name|getHighWatermark
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AcidUtils
operator|.
name|ParsedDelta
argument_list|>
name|deltas
init|=
name|dir
operator|.
name|getCurrentDirectories
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|delta
lambda|->
name|delta
operator|.
name|getMaxWriteId
argument_list|()
operator|<=
name|highWatermark
operator|&&
name|delta
operator|.
name|getMinWriteId
argument_list|()
operator|>=
name|minWriteID
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|deltas
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"alter table "
argument_list|)
operator|.
name|append
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" add "
argument_list|)
expr_stmt|;
name|deltas
operator|.
name|forEach
argument_list|(
name|delta
lambda|->
name|query
operator|.
name|append
argument_list|(
literal|"partition (file_name='"
argument_list|)
operator|.
name|append
argument_list|(
name|delta
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"') location '"
argument_list|)
operator|.
name|append
argument_list|(
name|delta
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"' "
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
comment|/**    * Get a list containing just the minor compaction query. The query selects the content of the    * source temporary table and inserts it into the resulttable. It will look like:    *<ol>    *<li>insert into table $tmpTableBase_result select `col_1`, .. from tmpTableBase</li>    *</ol>    *    * @param tmpTableBase an unique identifier, which helps to find all the temporary tables    * @return list of compaction queries, always non-null    */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getCompactionQueries
parameter_list|(
name|String
name|tmpTableBase
parameter_list|,
name|StorageDescriptor
name|sd
parameter_list|)
block|{
name|String
name|resultTableName
init|=
name|tmpTableBase
operator|+
literal|"_result"
decl_stmt|;
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"insert into table "
argument_list|)
operator|.
name|append
argument_list|(
name|resultTableName
argument_list|)
operator|.
name|append
argument_list|(
literal|" select "
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|sd
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|boolean
name|isFirst
init|=
literal|true
decl_stmt|;
for|for
control|(
name|FieldSchema
name|col
range|:
name|cols
control|)
block|{
if|if
condition|(
operator|!
name|isFirst
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|isFirst
operator|=
literal|false
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"`"
argument_list|)
operator|.
name|append
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"`"
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
literal|" from "
argument_list|)
operator|.
name|append
argument_list|(
name|tmpTableBase
argument_list|)
expr_stmt|;
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get list of drop table statements.    * @param tmpTableBase an unique identifier, which helps to find all the temp tables    * @return list of drop table statements, always non-null    */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getDropQueries
parameter_list|(
name|String
name|tmpTableBase
parameter_list|)
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|MmQueryCompactorUtils
operator|.
name|DROP_IF_EXISTS
operator|+
name|tmpTableBase
argument_list|,
name|MmQueryCompactorUtils
operator|.
name|DROP_IF_EXISTS
operator|+
name|tmpTableBase
operator|+
literal|"_result"
argument_list|)
return|;
block|}
specifier|private
name|HiveConf
name|setUpDriverSession
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
block|{
name|HiveConf
name|driverConf
init|=
operator|new
name|HiveConf
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|driverConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_QUOTEDID_SUPPORT
operator|.
name|varname
argument_list|,
literal|"column"
argument_list|)
expr_stmt|;
name|driverConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_FETCH_COLUMN_STATS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|driverConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_ESTIMATE_STATS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|driverConf
return|;
block|}
block|}
end_class

end_unit

