begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|scheduled
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_comment
comment|/**  *  Scheduled query executor operational context.  *  *  Contains all the information classes which are needed to service scheduled queries.  */
end_comment

begin_class
specifier|public
class|class
name|ScheduledQueryExecutionContext
block|{
specifier|public
specifier|final
name|ExecutorService
name|executor
decl_stmt|;
specifier|public
specifier|final
name|IScheduledQueryMaintenanceService
name|schedulerService
decl_stmt|;
specifier|public
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|public
specifier|final
name|String
name|executorHostName
decl_stmt|;
specifier|public
name|ScheduledQueryExecutionContext
parameter_list|(
name|ExecutorService
name|executor
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|IScheduledQueryMaintenanceService
name|service
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|schedulerService
operator|=
name|service
expr_stmt|;
try|try
block|{
name|this
operator|.
name|executorHostName
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
expr_stmt|;
if|if
condition|(
name|executorHostName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Hostname is null; Can't function without a valid hostname!"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't function without a valid hostname!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return time in milliseconds    */
specifier|public
name|long
name|getIdleSleepTime
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getTimeVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SCHEDULED_QUERIES_EXECUTOR_IDLE_SLEEP_TIME
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
comment|// Interval
specifier|public
name|long
name|getProgressReporterSleepTime
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getTimeVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SCHEDULED_QUERIES_EXECUTOR_PROGRESS_REPORT_INTERVAL
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
specifier|public
name|int
name|getNumberOfExecutors
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getIntVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SCHEDULED_QUERIES_MAX_EXECUTORS
argument_list|)
return|;
block|}
block|}
end_class

end_unit

