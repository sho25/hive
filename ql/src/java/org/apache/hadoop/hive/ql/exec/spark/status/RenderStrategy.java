begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|status
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|log
operator|.
name|InPlaceUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|log
operator|.
name|ProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Class to render progress bar for Hive on Spark job status.  * Based on the configuration, appropriate render strategy is selected  * to show the progress bar on beeline or Hive CLI, as well as for logging  * the report String.  */
end_comment

begin_class
class|class
name|RenderStrategy
block|{
interface|interface
name|UpdateFunction
block|{
name|void
name|printStatus
parameter_list|(
name|Map
argument_list|<
name|SparkStage
argument_list|,
name|SparkStageProgress
argument_list|>
name|progressMap
parameter_list|,
name|Map
argument_list|<
name|SparkStage
argument_list|,
name|SparkStageProgress
argument_list|>
name|lastProgressMap
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|abstract
specifier|static
class|class
name|BaseUpdateFunction
implements|implements
name|UpdateFunction
block|{
specifier|protected
specifier|final
name|SparkJobMonitor
name|monitor
decl_stmt|;
specifier|private
specifier|final
name|PerfLogger
name|perfLogger
decl_stmt|;
specifier|private
name|long
name|lastPrintTime
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PRINT_INTERVAL
init|=
literal|3000
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|completed
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|lastReport
init|=
literal|null
decl_stmt|;
name|BaseUpdateFunction
parameter_list|(
name|SparkJobMonitor
name|monitor
parameter_list|)
block|{
name|this
operator|.
name|monitor
operator|=
name|monitor
expr_stmt|;
name|this
operator|.
name|perfLogger
operator|=
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|getReport
parameter_list|(
name|Map
argument_list|<
name|SparkStage
argument_list|,
name|SparkStageProgress
argument_list|>
name|progressMap
parameter_list|)
block|{
name|StringBuilder
name|reportBuffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|SimpleDateFormat
name|dt
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss,SSS"
argument_list|)
decl_stmt|;
name|String
name|currentDate
init|=
name|dt
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
name|reportBuffer
operator|.
name|append
argument_list|(
name|currentDate
operator|+
literal|"\t"
argument_list|)
expr_stmt|;
comment|// Num of total and completed tasks
name|int
name|sumTotal
init|=
literal|0
decl_stmt|;
name|int
name|sumComplete
init|=
literal|0
decl_stmt|;
name|SortedSet
argument_list|<
name|SparkStage
argument_list|>
name|keys
init|=
operator|new
name|TreeSet
argument_list|<
name|SparkStage
argument_list|>
argument_list|(
name|progressMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SparkStage
name|stage
range|:
name|keys
control|)
block|{
name|SparkStageProgress
name|progress
init|=
name|progressMap
operator|.
name|get
argument_list|(
name|stage
argument_list|)
decl_stmt|;
specifier|final
name|int
name|complete
init|=
name|progress
operator|.
name|getSucceededTaskCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|total
init|=
name|progress
operator|.
name|getTotalTaskCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|running
init|=
name|progress
operator|.
name|getRunningTaskCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|failed
init|=
name|progress
operator|.
name|getFailedTaskCount
argument_list|()
decl_stmt|;
name|sumTotal
operator|+=
name|total
expr_stmt|;
name|sumComplete
operator|+=
name|complete
expr_stmt|;
name|String
name|s
init|=
name|stage
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|stageName
init|=
literal|"Stage-"
operator|+
name|s
decl_stmt|;
if|if
condition|(
name|total
operator|<=
literal|0
condition|)
block|{
name|reportBuffer
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s: -/-\t"
argument_list|,
name|stageName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|complete
operator|==
name|total
operator|&&
operator|!
name|completed
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|completed
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|perfLogger
operator|.
name|startTimeHasMethod
argument_list|(
name|PerfLogger
operator|.
name|SPARK_RUN_STAGE
operator|+
name|s
argument_list|)
condition|)
block|{
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|SparkJobMonitor
operator|.
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|SPARK_RUN_STAGE
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|SparkJobMonitor
operator|.
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|SPARK_RUN_STAGE
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|complete
operator|<
name|total
operator|&&
operator|(
name|complete
operator|>
literal|0
operator|||
name|running
operator|>
literal|0
operator|||
name|failed
operator|>
literal|0
operator|)
condition|)
block|{
comment|/* stage is started, but not complete */
if|if
condition|(
operator|!
name|perfLogger
operator|.
name|startTimeHasMethod
argument_list|(
name|PerfLogger
operator|.
name|SPARK_RUN_STAGE
operator|+
name|s
argument_list|)
condition|)
block|{
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|SparkJobMonitor
operator|.
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|SPARK_RUN_STAGE
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|failed
operator|>
literal|0
condition|)
block|{
name|reportBuffer
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s: %d(+%d,-%d)/%d\t"
argument_list|,
name|stageName
argument_list|,
name|complete
argument_list|,
name|running
argument_list|,
name|failed
argument_list|,
name|total
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reportBuffer
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s: %d(+%d)/%d\t"
argument_list|,
name|stageName
argument_list|,
name|complete
argument_list|,
name|running
argument_list|,
name|total
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|/* stage is waiting for input/slots or complete */
if|if
condition|(
name|failed
operator|>
literal|0
condition|)
block|{
comment|/* tasks finished but some failed */
name|reportBuffer
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s: %d(-%d)/%d Finished with failed tasks\t"
argument_list|,
name|stageName
argument_list|,
name|complete
argument_list|,
name|failed
argument_list|,
name|total
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|complete
operator|==
name|total
condition|)
block|{
name|reportBuffer
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s: %d/%d Finished\t"
argument_list|,
name|stageName
argument_list|,
name|complete
argument_list|,
name|total
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reportBuffer
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s: %d/%d\t"
argument_list|,
name|stageName
argument_list|,
name|complete
argument_list|,
name|total
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|float
name|progress
init|=
operator|(
name|sumTotal
operator|==
literal|0
operator|)
condition|?
literal|1.0f
else|:
operator|(
name|float
operator|)
name|sumComplete
operator|/
operator|(
name|float
operator|)
name|sumTotal
decl_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|updateProgressedPercentage
argument_list|(
name|progress
argument_list|)
expr_stmt|;
block|}
return|return
name|reportBuffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|isSameAsPreviousProgress
parameter_list|(
name|Map
argument_list|<
name|SparkStage
argument_list|,
name|SparkStageProgress
argument_list|>
name|progressMap
parameter_list|,
name|Map
argument_list|<
name|SparkStage
argument_list|,
name|SparkStageProgress
argument_list|>
name|lastProgressMap
parameter_list|)
block|{
if|if
condition|(
name|lastProgressMap
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|progressMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|lastProgressMap
operator|.
name|isEmpty
argument_list|()
return|;
block|}
else|else
block|{
if|if
condition|(
name|lastProgressMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
name|progressMap
operator|.
name|size
argument_list|()
operator|!=
name|lastProgressMap
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|SparkStage
argument_list|,
name|SparkStageProgress
argument_list|>
name|entry
range|:
name|progressMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|lastProgressMap
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|||
operator|!
name|progressMap
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|lastProgressMap
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|showReport
parameter_list|(
name|String
name|report
parameter_list|)
block|{
return|return
operator|!
name|report
operator|.
name|equals
argument_list|(
name|lastReport
argument_list|)
operator|||
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>=
name|lastPrintTime
operator|+
name|PRINT_INTERVAL
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|printStatus
parameter_list|(
name|Map
argument_list|<
name|SparkStage
argument_list|,
name|SparkStageProgress
argument_list|>
name|progressMap
parameter_list|,
name|Map
argument_list|<
name|SparkStage
argument_list|,
name|SparkStageProgress
argument_list|>
name|lastProgressMap
parameter_list|)
block|{
comment|// do not print duplicate status while still in middle of print interval.
name|boolean
name|isDuplicateState
init|=
name|isSameAsPreviousProgress
argument_list|(
name|progressMap
argument_list|,
name|lastProgressMap
argument_list|)
decl_stmt|;
name|boolean
name|withinInterval
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<=
name|lastPrintTime
operator|+
name|PRINT_INTERVAL
decl_stmt|;
if|if
condition|(
name|isDuplicateState
operator|&&
name|withinInterval
condition|)
block|{
return|return;
block|}
name|String
name|report
init|=
name|getReport
argument_list|(
name|progressMap
argument_list|)
decl_stmt|;
name|renderProgress
argument_list|(
name|monitor
operator|.
name|getProgressMonitor
argument_list|(
name|progressMap
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|showReport
argument_list|(
name|report
argument_list|)
condition|)
block|{
name|renderReport
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|lastReport
operator|=
name|report
expr_stmt|;
name|lastPrintTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
specifier|abstract
name|void
name|renderProgress
parameter_list|(
name|ProgressMonitor
name|monitor
parameter_list|)
function_decl|;
specifier|abstract
name|void
name|renderReport
parameter_list|(
name|String
name|report
parameter_list|)
function_decl|;
block|}
comment|/**    * This is used to show progress bar on Beeline while using HiveServer2.    */
specifier|static
class|class
name|LogToFileFunction
extends|extends
name|BaseUpdateFunction
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LogToFileFunction
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|hiveServer2InPlaceProgressEnabled
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_INPLACE_PROGRESS
argument_list|)
decl_stmt|;
name|LogToFileFunction
parameter_list|(
name|SparkJobMonitor
name|monitor
parameter_list|)
block|{
name|super
argument_list|(
name|monitor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|renderProgress
parameter_list|(
name|ProgressMonitor
name|monitor
parameter_list|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|updateProgressMonitor
argument_list|(
name|monitor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|renderReport
parameter_list|(
name|String
name|report
parameter_list|)
block|{
if|if
condition|(
name|hiveServer2InPlaceProgressEnabled
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
name|report
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|monitor
operator|.
name|console
operator|.
name|printInfo
argument_list|(
name|report
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This is used to show progress bar on Hive CLI.    */
specifier|static
class|class
name|InPlaceUpdateFunction
extends|extends
name|BaseUpdateFunction
block|{
comment|/**      * Have to use the same instance to render else the number lines printed earlier is lost and the      * screen will print the table again and again.      */
specifier|private
specifier|final
name|InPlaceUpdate
name|inPlaceUpdate
decl_stmt|;
name|InPlaceUpdateFunction
parameter_list|(
name|SparkJobMonitor
name|monitor
parameter_list|)
block|{
name|super
argument_list|(
name|monitor
argument_list|)
expr_stmt|;
name|inPlaceUpdate
operator|=
operator|new
name|InPlaceUpdate
argument_list|(
name|SessionState
operator|.
name|LogHelper
operator|.
name|getInfoStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|renderProgress
parameter_list|(
name|ProgressMonitor
name|monitor
parameter_list|)
block|{
name|inPlaceUpdate
operator|.
name|render
argument_list|(
name|monitor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|renderReport
parameter_list|(
name|String
name|report
parameter_list|)
block|{
name|monitor
operator|.
name|console
operator|.
name|logInfo
argument_list|(
name|report
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

