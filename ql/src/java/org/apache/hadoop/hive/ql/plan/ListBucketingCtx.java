begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|listbucketingpruner
operator|.
name|ListBucketingPrunerUtils
import|;
end_import

begin_comment
comment|/**  * Context for list bucketing.  * It's created in SemanticAnalyzer.genFileSinkPlan().  * It's used in FileSinkOperator.processOp(), merging files, alter table ...concatenate etc.  */
end_comment

begin_class
specifier|public
class|class
name|ListBucketingCtx
implements|implements
name|Serializable
block|{
comment|/**    * default serialization ID.    */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|skewedColNames
decl_stmt|;
specifier|private
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|skewedColValues
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|lbLocationMap
decl_stmt|;
specifier|private
name|List
argument_list|<
name|SkewedColumnPositionPair
argument_list|>
name|rowSkewedIndex
decl_stmt|;
specifier|private
name|boolean
name|isStoredAsSubDirectories
decl_stmt|;
specifier|private
name|String
name|defaultKey
decl_stmt|;
specifier|private
name|String
name|defaultDirName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|skewedValuesDirNames
decl_stmt|;
specifier|public
name|ListBucketingCtx
parameter_list|()
block|{
name|rowSkewedIndex
operator|=
operator|new
name|ArrayList
argument_list|<
name|SkewedColumnPositionPair
argument_list|>
argument_list|()
expr_stmt|;
name|skewedValuesDirNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return the skewedColNames    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSkewedColNames
parameter_list|()
block|{
return|return
name|skewedColNames
return|;
block|}
comment|/**    * @param skewedColNames the skewedColNames to set    */
specifier|public
name|void
name|setSkewedColNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|skewedColNames
parameter_list|)
block|{
name|this
operator|.
name|skewedColNames
operator|=
name|skewedColNames
expr_stmt|;
block|}
comment|/**    * @return the skewedColValues    */
specifier|public
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getSkewedColValues
parameter_list|()
block|{
return|return
name|skewedColValues
return|;
block|}
comment|/**    * @param skewedColValues the skewedColValues to set    */
specifier|public
name|void
name|setSkewedColValues
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|skewedColValues
parameter_list|)
block|{
name|this
operator|.
name|skewedColValues
operator|=
name|skewedColValues
expr_stmt|;
block|}
comment|/**    * @return the lbLocationMap    */
specifier|public
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|getLbLocationMap
parameter_list|()
block|{
return|return
name|lbLocationMap
return|;
block|}
comment|/**    * @param lbLocationMap the lbLocationMap to set    */
specifier|public
name|void
name|setLbLocationMap
parameter_list|(
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|lbLocationMap
parameter_list|)
block|{
name|this
operator|.
name|lbLocationMap
operator|=
name|lbLocationMap
expr_stmt|;
block|}
comment|/**    * Match column in skewed column list and record position.    * The position will be used in {@link FileSinkOperator} generateListBucketingDirName().    * Note that skewed column name matches skewed value in order.    *    * @param rowSch    */
specifier|public
name|void
name|processRowSkewedIndex
parameter_list|(
name|RowSchema
name|rowSch
parameter_list|)
block|{
if|if
condition|(
operator|(
name|this
operator|.
name|skewedColNames
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|this
operator|.
name|skewedColNames
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|(
name|rowSch
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|rowSch
operator|.
name|getSignature
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|rowSch
operator|.
name|getSignature
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|cols
init|=
name|rowSch
operator|.
name|getSignature
argument_list|()
decl_stmt|;
name|int
name|hitNo
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|index
init|=
name|this
operator|.
name|skewedColNames
operator|.
name|indexOf
argument_list|(
name|cols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getInternalName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>
operator|-
literal|1
condition|)
block|{
name|hitNo
operator|++
expr_stmt|;
name|SkewedColumnPositionPair
name|pair
init|=
operator|new
name|SkewedColumnPositionPair
argument_list|(
name|i
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|rowSkewedIndex
operator|.
name|add
argument_list|(
name|pair
argument_list|)
expr_stmt|;
block|}
block|}
assert|assert
operator|(
name|hitNo
operator|==
name|this
operator|.
name|skewedColNames
operator|.
name|size
argument_list|()
operator|)
operator|:
literal|"RowSchema doesn't have all skewed columns."
operator|+
literal|"Skewed column: "
operator|+
name|this
operator|.
name|skewedColNames
operator|.
name|toString
argument_list|()
operator|+
literal|". Rowschema has columns: "
operator|+
name|cols
assert|;
block|}
block|}
comment|/**    * Calculate skewed value subdirectory directory which is used in    * FileSinkOperator.java createKeyForStatsPublisher()    * For example, create table test skewed by (key, value) on (('484','val_484')    * stored as DIRECTORIES;    * after the method, skewedValuesDirNames will contain 2 elements:    * key=484/value=val_484    * HIVE_LIST_BUCKETING_DEFAULT_DIR_NAME/HIVE_LIST_BUCKETING_DEFAULT_DIR_NAME    */
specifier|public
name|void
name|calculateSkewedValueSubDirList
parameter_list|()
block|{
if|if
condition|(
name|isSkewedStoredAsDir
argument_list|()
condition|)
block|{
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|value
range|:
name|this
operator|.
name|skewedColValues
control|)
block|{
name|skewedValuesDirNames
operator|.
name|add
argument_list|(
name|FileUtils
operator|.
name|makeListBucketingDirName
argument_list|(
name|this
operator|.
name|skewedColNames
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// creat default dir
name|skewedValuesDirNames
operator|.
name|add
argument_list|(
name|FileUtils
operator|.
name|makeDefaultListBucketingDirName
argument_list|(
name|this
operator|.
name|skewedColNames
argument_list|,
name|ListBucketingPrunerUtils
operator|.
name|HIVE_LIST_BUCKETING_DEFAULT_DIR_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return the isStoredAsSubDirectories    */
specifier|public
name|boolean
name|isStoredAsSubDirectories
parameter_list|()
block|{
return|return
name|isStoredAsSubDirectories
return|;
block|}
comment|/**    * @param isStoredAsSubDirectories the isStoredAsSubDirectories to set    */
specifier|public
name|void
name|setStoredAsSubDirectories
parameter_list|(
name|boolean
name|isStoredAsSubDirectories
parameter_list|)
block|{
name|this
operator|.
name|isStoredAsSubDirectories
operator|=
name|isStoredAsSubDirectories
expr_stmt|;
block|}
comment|/**    * @return the defaultKey    */
specifier|public
name|String
name|getDefaultKey
parameter_list|()
block|{
return|return
name|defaultKey
return|;
block|}
comment|/**    * @param defaultKey the defaultKey to set    */
specifier|public
name|void
name|setDefaultKey
parameter_list|(
name|String
name|defaultKey
parameter_list|)
block|{
name|this
operator|.
name|defaultKey
operator|=
name|defaultKey
expr_stmt|;
block|}
comment|/**    * @return the defaultDirName    */
specifier|public
name|String
name|getDefaultDirName
parameter_list|()
block|{
return|return
name|defaultDirName
return|;
block|}
comment|/**    * @param defaultDirName the defaultDirName to set    */
specifier|public
name|void
name|setDefaultDirName
parameter_list|(
name|String
name|defaultDirName
parameter_list|)
block|{
name|this
operator|.
name|defaultDirName
operator|=
name|defaultDirName
expr_stmt|;
block|}
comment|/**    * check if list bucketing is enabled.    *    * @return    */
specifier|public
name|boolean
name|isSkewedStoredAsDir
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|getSkewedColNames
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|this
operator|.
name|getSkewedColNames
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|(
name|this
operator|.
name|getSkewedColValues
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|this
operator|.
name|getSkewedColValues
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|(
name|this
operator|.
name|isStoredAsSubDirectories
argument_list|()
operator|)
return|;
block|}
comment|/**    * Calculate list bucketing level.    *    * 0: not list bucketing    * int: no. of skewed columns    *    * @return    */
specifier|public
name|int
name|calculateListBucketingLevel
parameter_list|()
block|{
name|int
name|lbLevel
init|=
name|isSkewedStoredAsDir
argument_list|()
condition|?
name|this
operator|.
name|getSkewedColNames
argument_list|()
operator|.
name|size
argument_list|()
else|:
literal|0
decl_stmt|;
return|return
name|lbLevel
return|;
block|}
comment|/**    * @return the skewedValuesDirNames    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSkewedValuesDirNames
parameter_list|()
block|{
return|return
name|skewedValuesDirNames
return|;
block|}
comment|/**    * @param skewedValuesDirNames the skewedValuesDirNames to set    */
specifier|public
name|void
name|setSkewedValuesDirNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|skewedValuesDirNames
parameter_list|)
block|{
name|this
operator|.
name|skewedValuesDirNames
operator|=
name|skewedValuesDirNames
expr_stmt|;
block|}
comment|/**    * @return the rowSkewedIndex    */
specifier|public
name|List
argument_list|<
name|SkewedColumnPositionPair
argument_list|>
name|getRowSkewedIndex
parameter_list|()
block|{
return|return
name|rowSkewedIndex
return|;
block|}
comment|/**    * @param rowSkewedIndex the rowSkewedIndex to set    */
specifier|public
name|void
name|setRowSkewedIndex
parameter_list|(
name|List
argument_list|<
name|SkewedColumnPositionPair
argument_list|>
name|rowSkewedIndex
parameter_list|)
block|{
name|this
operator|.
name|rowSkewedIndex
operator|=
name|rowSkewedIndex
expr_stmt|;
block|}
block|}
end_class

end_unit

