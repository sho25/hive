begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hashing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|split
operator|.
name|SplitLocationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|Murmur3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This maps a split (path + offset) to an index based on the number of locations provided.  *  * If locations do not change across jobs, the intention is to map the same split to the same node.  *  * A big problem is when nodes change (added, removed, temporarily removed and re-added) etc. That changes  * the number of locations / position of locations - and will cause the cache to be almost completely invalidated.  *  * TODO: Support for consistent hashing when combining the split location generator and the ServiceRegistry.  *  */
end_comment

begin_class
specifier|public
class|class
name|HostAffinitySplitLocationProvider
implements|implements
name|SplitLocationProvider
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HostAffinitySplitLocationProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isDebugEnabled
init|=
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|locations
decl_stmt|;
specifier|public
name|HostAffinitySplitLocationProvider
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|knownLocations
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|knownLocations
operator|!=
literal|null
operator|&&
operator|!
name|knownLocations
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|HostAffinitySplitLocationProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" needs at least 1 location to function"
argument_list|)
expr_stmt|;
name|this
operator|.
name|locations
operator|=
name|knownLocations
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getLocations
parameter_list|(
name|InputSplit
name|split
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|split
operator|instanceof
name|FileSplit
operator|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Split: "
operator|+
name|split
operator|+
literal|" is not a FileSplit. Using default locations"
argument_list|)
expr_stmt|;
block|}
return|return
name|split
operator|.
name|getLocations
argument_list|()
return|;
block|}
name|FileSplit
name|fsplit
init|=
operator|(
name|FileSplit
operator|)
name|split
decl_stmt|;
name|String
name|splitDesc
init|=
literal|"Split at "
operator|+
name|fsplit
operator|.
name|getPath
argument_list|()
operator|+
literal|" with offset= "
operator|+
name|fsplit
operator|.
name|getStart
argument_list|()
operator|+
literal|", length="
operator|+
name|fsplit
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|String
name|location
init|=
name|locations
operator|.
name|get
argument_list|(
name|determineLocation
argument_list|(
name|locations
argument_list|,
name|fsplit
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|fsplit
operator|.
name|getStart
argument_list|()
argument_list|,
name|splitDesc
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|location
operator|!=
literal|null
operator|)
condition|?
operator|new
name|String
index|[]
block|{
name|location
block|}
else|:
literal|null
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|int
name|determineLocation
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|locations
parameter_list|,
name|String
name|path
parameter_list|,
name|long
name|start
parameter_list|,
name|String
name|desc
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
name|getHashInputForSplit
argument_list|(
name|path
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|long
name|hash1
init|=
name|hash1
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|Hashing
operator|.
name|consistentHash
argument_list|(
name|hash1
argument_list|,
name|locations
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|location
init|=
name|locations
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|desc
operator|+
literal|" mapped to index="
operator|+
name|index
operator|+
literal|", location="
operator|+
name|location
argument_list|)
expr_stmt|;
block|}
name|int
name|iter
init|=
literal|1
decl_stmt|;
name|long
name|hash2
init|=
literal|0
decl_stmt|;
comment|// Since our probing method is totally bogus, give up after some time.
while|while
condition|(
name|location
operator|==
literal|null
operator|&&
name|iter
operator|<
name|locations
operator|.
name|size
argument_list|()
operator|*
literal|2
condition|)
block|{
if|if
condition|(
name|iter
operator|==
literal|1
condition|)
block|{
name|hash2
operator|=
name|hash2
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
comment|// Note that this is not real double hashing since we have consistent hash on top.
name|index
operator|=
name|Hashing
operator|.
name|consistentHash
argument_list|(
name|hash1
operator|+
name|iter
operator|*
name|hash2
argument_list|,
name|locations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|=
name|locations
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|desc
operator|+
literal|" remapped to index="
operator|+
name|index
operator|+
literal|", location="
operator|+
name|location
argument_list|)
expr_stmt|;
block|}
operator|++
name|iter
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|getHashInputForSplit
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|start
parameter_list|)
block|{
comment|// Explicitly using only the start offset of a split, and not the length. Splits generated on
comment|// block boundaries and stripe boundaries can vary slightly. Try hashing both to the same node.
comment|// There is the drawback of potentially hashing the same data on multiple nodes though, when a
comment|// large split is sent to 1 node, and a second invocation uses smaller chunks of the previous
comment|// large split and send them to different nodes.
name|byte
index|[]
name|pathBytes
init|=
name|path
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|allBytes
init|=
operator|new
name|byte
index|[
name|pathBytes
operator|.
name|length
operator|+
literal|8
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|pathBytes
argument_list|,
literal|0
argument_list|,
name|allBytes
argument_list|,
literal|0
argument_list|,
name|pathBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|SerDeUtils
operator|.
name|writeLong
argument_list|(
name|allBytes
argument_list|,
name|pathBytes
operator|.
name|length
argument_list|,
name|start
operator|>>
literal|3
argument_list|)
expr_stmt|;
return|return
name|allBytes
return|;
block|}
specifier|private
specifier|static
name|long
name|hash1
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
specifier|final
name|int
name|PRIME
init|=
literal|104729
decl_stmt|;
comment|// Same as hash64's default seed.
return|return
name|Murmur3
operator|.
name|hash64
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|PRIME
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|long
name|hash2
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
specifier|final
name|int
name|PRIME
init|=
literal|1366661
decl_stmt|;
return|return
name|Murmur3
operator|.
name|hash64
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|PRIME
argument_list|)
return|;
block|}
block|}
end_class

end_unit

