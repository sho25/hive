begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|split
operator|.
name|SplitLocationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|Murmur3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This maps a split (path + offset) to an index based on the number of locations provided.  *  * If locations do not change across jobs, the intention is to map the same split to the same node.  *  * A big problem is when nodes change (added, removed, temporarily removed and re-added) etc. That changes  * the number of locations / position of locations - and will cause the cache to be almost completely invalidated.  *  * TODO: Support for consistent hashing when combining the split location generator and the ServiceRegistry.  *  */
end_comment

begin_class
specifier|public
class|class
name|HostAffinitySplitLocationProvider
implements|implements
name|SplitLocationProvider
block|{
specifier|private
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HostAffinitySplitLocationProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isDebugEnabled
init|=
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|knownLocations
decl_stmt|;
specifier|public
name|HostAffinitySplitLocationProvider
parameter_list|(
name|String
index|[]
name|knownLocations
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|knownLocations
operator|!=
literal|null
operator|&&
name|knownLocations
operator|.
name|length
operator|!=
literal|0
argument_list|,
name|HostAffinitySplitLocationProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"needs at least 1 location to function"
argument_list|)
expr_stmt|;
name|this
operator|.
name|knownLocations
operator|=
name|knownLocations
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getLocations
parameter_list|(
name|InputSplit
name|split
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|split
operator|instanceof
name|FileSplit
condition|)
block|{
name|FileSplit
name|fsplit
init|=
operator|(
name|FileSplit
operator|)
name|split
decl_stmt|;
name|long
name|hash
init|=
name|generateHash
argument_list|(
name|fsplit
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|fsplit
operator|.
name|getStart
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|indexRaw
init|=
call|(
name|int
call|)
argument_list|(
name|hash
operator|%
name|knownLocations
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|Math
operator|.
name|abs
argument_list|(
name|indexRaw
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDebugEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Split at "
operator|+
name|fsplit
operator|.
name|getPath
argument_list|()
operator|+
literal|" with offset= "
operator|+
name|fsplit
operator|.
name|getStart
argument_list|()
operator|+
literal|", length="
operator|+
name|fsplit
operator|.
name|getLength
argument_list|()
operator|+
literal|" mapped to index="
operator|+
name|index
operator|+
literal|", location="
operator|+
name|knownLocations
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|String
index|[]
block|{
name|knownLocations
index|[
name|index
index|]
block|}
return|;
block|}
else|else
block|{
if|if
condition|(
name|isDebugEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Split: "
operator|+
name|split
operator|+
literal|" is not a FileSplit. Using default locations"
argument_list|)
expr_stmt|;
block|}
return|return
name|split
operator|.
name|getLocations
argument_list|()
return|;
block|}
block|}
specifier|private
name|long
name|generateHash
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|startOffset
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Explicitly using only the start offset of a split, and not the length.
comment|// Splits generated on block boundaries and stripe boundaries can vary slightly. Try hashing both to the same node.
comment|// There is the drawback of potentially hashing the same data on multiple nodes though, when a large split
comment|// is sent to 1 node, and a second invocation uses smaller chunks of the previous large split and send them
comment|// to different nodes.
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|dob
operator|.
name|writeLong
argument_list|(
name|startOffset
argument_list|)
expr_stmt|;
name|dob
operator|.
name|writeUTF
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|Murmur3
operator|.
name|hash64
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

