begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|physical
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ConditionalTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_comment
comment|/**  * Simple renumbering of stage ids  */
end_comment

begin_class
specifier|public
class|class
name|StageIDsRearranger
implements|implements
name|PhysicalPlanResolver
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"Stage-"
decl_stmt|;
enum|enum
name|ArrangeType
block|{
name|NONE
block|,
name|IDONLY
block|,
name|TRAVERSE
block|,
name|EXECUTION
block|}
annotation|@
name|Override
specifier|public
name|PhysicalContext
name|resolve
parameter_list|(
name|PhysicalContext
name|pctx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|getExplainOrder
argument_list|(
name|pctx
argument_list|)
control|)
block|{
name|task
operator|.
name|setId
argument_list|(
name|PREFIX
operator|+
operator|(
operator|++
name|counter
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Task
argument_list|>
name|getExplainOrder
parameter_list|(
name|PhysicalContext
name|pctx
parameter_list|)
block|{
name|List
argument_list|<
name|Task
argument_list|>
name|tasks
init|=
name|getExplainOrder
argument_list|(
name|pctx
operator|.
name|getConf
argument_list|()
argument_list|,
name|pctx
operator|.
name|getRootTasks
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pctx
operator|.
name|getFetchTask
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tasks
operator|.
name|add
argument_list|(
name|pctx
operator|.
name|getFetchTask
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|tasks
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Task
argument_list|>
name|getFetchSources
parameter_list|(
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|tasks
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Task
argument_list|>
name|sources
init|=
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|>
argument_list|()
decl_stmt|;
name|TaskTraverse
name|traverse
init|=
operator|new
name|TaskTraverse
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|accepted
parameter_list|(
name|Task
argument_list|<
name|?
argument_list|>
name|task
parameter_list|)
block|{
if|if
condition|(
name|task
operator|.
name|getNumChild
argument_list|()
operator|==
literal|0
operator|&&
name|task
operator|.
name|isFetchSource
argument_list|()
condition|)
block|{
name|sources
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
range|:
name|tasks
control|)
block|{
name|traverse
operator|.
name|traverse
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
return|return
name|sources
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Task
argument_list|>
name|getExplainOrder
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|tasks
parameter_list|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
range|:
name|tasks
control|)
block|{
name|task
operator|.
name|setRootTask
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|String
name|var
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTAGEIDREARRANGE
argument_list|)
decl_stmt|;
name|ArrangeType
name|type
init|=
name|ArrangeType
operator|.
name|valueOf
argument_list|(
name|var
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|ArrangeType
operator|.
name|EXECUTION
condition|)
block|{
return|return
name|executionOrder
argument_list|(
name|tasks
argument_list|)
return|;
block|}
return|return
name|traverseOrder
argument_list|(
name|type
argument_list|,
name|tasks
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Task
argument_list|>
name|executionOrder
parameter_list|(
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|tasks
parameter_list|)
block|{
specifier|final
name|Queue
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|queue
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|tasks
argument_list|)
decl_stmt|;
name|TaskTraverse
name|traverse
init|=
operator|new
name|TaskTraverse
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|accepted
parameter_list|(
name|Task
argument_list|<
name|?
argument_list|>
name|task
parameter_list|)
block|{
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|childTasks
init|=
name|getChildTasks
argument_list|(
name|task
argument_list|)
decl_stmt|;
if|if
condition|(
name|childTasks
operator|!=
literal|null
operator|&&
operator|!
name|childTasks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|queue
operator|.
name|addAll
argument_list|(
name|childTasks
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|rejected
parameter_list|(
name|Task
argument_list|<
name|?
argument_list|>
name|child
parameter_list|)
block|{
name|queue
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|next
parameter_list|(
name|Task
argument_list|<
name|?
argument_list|>
name|task
parameter_list|)
block|{
return|return
name|queue
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|Arrays
operator|.
expr|<
name|Task
argument_list|<
name|?
argument_list|>
operator|>
name|asList
argument_list|(
name|queue
operator|.
name|remove
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|traverse
operator|.
name|traverse
argument_list|(
name|queue
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|>
argument_list|(
name|traverse
operator|.
name|traversed
argument_list|)
return|;
block|}
specifier|static
name|List
argument_list|<
name|Task
argument_list|>
name|traverseOrder
parameter_list|(
specifier|final
name|ArrangeType
name|type
parameter_list|,
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|tasks
parameter_list|)
block|{
name|TaskTraverse
name|traverse
init|=
operator|new
name|TaskTraverse
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|isReady
parameter_list|(
name|Task
argument_list|<
name|?
argument_list|>
name|task
parameter_list|)
block|{
return|return
name|type
operator|==
name|ArrangeType
operator|.
name|NONE
operator|||
name|type
operator|==
name|ArrangeType
operator|.
name|IDONLY
operator|||
name|super
operator|.
name|isReady
argument_list|(
name|task
argument_list|)
return|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
range|:
name|tasks
control|)
block|{
name|traverse
operator|.
name|traverse
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|>
argument_list|(
name|traverse
operator|.
name|traversed
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|abstract
class|class
name|TaskTraverse
block|{
specifier|protected
specifier|final
name|Set
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|traversed
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|traverse
parameter_list|(
name|Task
argument_list|<
name|?
argument_list|>
name|task
parameter_list|)
block|{
if|if
condition|(
name|traversed
operator|.
name|add
argument_list|(
name|task
argument_list|)
condition|)
block|{
name|accepted
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|children
init|=
name|next
argument_list|(
name|task
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
operator|&&
operator|!
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
argument_list|>
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
name|isReady
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|traverse
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rejected
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|boolean
name|isReady
parameter_list|(
name|Task
argument_list|<
name|?
argument_list|>
name|task
parameter_list|)
block|{
return|return
name|task
operator|.
name|getParentTasks
argument_list|()
operator|==
literal|null
operator|||
name|traversed
operator|.
name|containsAll
argument_list|(
name|task
operator|.
name|getParentTasks
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|void
name|accepted
parameter_list|(
name|Task
argument_list|<
name|?
argument_list|>
name|task
parameter_list|)
block|{     }
specifier|protected
name|void
name|rejected
parameter_list|(
name|Task
argument_list|<
name|?
argument_list|>
name|child
parameter_list|)
block|{     }
specifier|protected
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|next
parameter_list|(
name|Task
argument_list|<
name|?
argument_list|>
name|task
parameter_list|)
block|{
return|return
name|getChildTasks
argument_list|(
name|task
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|getChildTasks
parameter_list|(
name|Task
argument_list|<
name|?
argument_list|>
name|task
parameter_list|)
block|{
if|if
condition|(
name|task
operator|instanceof
name|ConditionalTask
condition|)
block|{
return|return
operator|(
operator|(
name|ConditionalTask
operator|)
name|task
operator|)
operator|.
name|getListTasks
argument_list|()
return|;
block|}
return|return
name|task
operator|.
name|getChildTasks
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

