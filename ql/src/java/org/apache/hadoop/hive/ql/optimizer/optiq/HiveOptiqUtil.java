begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|optiq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_comment
comment|/**  * Generic utility functions needed for Optiq based Hive CBO.  */
end_comment

begin_class
specifier|public
class|class
name|HiveOptiqUtil
block|{
comment|/**    * Get list of virtual columns from the given list of projections.    *<p>    *     * @param exps    *          list of rex nodes representing projections    * @return List of Virtual Columns, will not be null.    */
specifier|public
specifier|static
name|List
argument_list|<
name|Integer
argument_list|>
name|getVirtualCols
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|exps
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|vCols
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exps
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|exps
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|RexInputRef
operator|)
condition|)
block|{
name|vCols
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|vCols
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Integer
argument_list|>
name|translateBitSetToProjIndx
parameter_list|(
name|BitSet
name|projBitSet
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|projIndxLst
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|projBitSet
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|projBitSet
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|projIndxLst
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|projIndxLst
return|;
block|}
annotation|@
name|Deprecated
specifier|public
specifier|static
name|void
name|todo
parameter_list|(
name|String
name|s
parameter_list|)
block|{   }
block|}
end_class

end_unit

