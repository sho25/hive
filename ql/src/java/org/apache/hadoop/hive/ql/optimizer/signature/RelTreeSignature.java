begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|signature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlExplainLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|RelWriterImplCopy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonIdentityInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|ObjectIdGenerators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Operator tree signature.  */
end_comment

begin_class
annotation|@
name|JsonIdentityInfo
argument_list|(
name|generator
operator|=
name|ObjectIdGenerators
operator|.
name|IntSequenceGenerator
operator|.
name|class
argument_list|,
name|property
operator|=
literal|"@id"
argument_list|)
specifier|public
specifier|final
class|class
name|RelTreeSignature
block|{
annotation|@
name|JsonProperty
specifier|private
name|int
name|hashCode
decl_stmt|;
annotation|@
name|JsonProperty
specifier|private
name|String
name|sig
decl_stmt|;
annotation|@
name|JsonProperty
specifier|private
name|ArrayList
argument_list|<
name|RelTreeSignature
argument_list|>
name|childSig
decl_stmt|;
comment|// need this for Jackson to work
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|RelTreeSignature
parameter_list|()
block|{   }
specifier|public
name|RelTreeSignature
parameter_list|(
name|RelNode
name|node
parameter_list|)
block|{
name|sig
operator|=
name|relSignature
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|childSig
operator|=
operator|new
name|ArrayList
argument_list|<
name|RelTreeSignature
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|RelNode
name|relNode
range|:
name|node
operator|.
name|getInputs
argument_list|()
control|)
block|{
name|childSig
operator|.
name|add
argument_list|(
name|RelTreeSignature
operator|.
name|of
argument_list|(
name|relNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hashCode
operator|=
name|Objects
operator|.
name|hashCode
argument_list|(
name|sig
argument_list|,
name|childSig
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|RelTreeSignature
name|of
parameter_list|(
name|RelNode
name|node
parameter_list|)
block|{
return|return
operator|new
name|RelTreeSignature
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|RelTreeSignature
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|RelTreeSignature
name|other
init|=
operator|(
name|RelTreeSignature
operator|)
name|obj
decl_stmt|;
return|return
name|sig
operator|.
name|equals
argument_list|(
name|other
operator|.
name|sig
argument_list|)
operator|&&
name|childSig
operator|.
name|equals
argument_list|(
name|other
operator|.
name|childSig
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|hashCode
return|;
block|}
specifier|private
name|String
name|relSignature
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
if|if
condition|(
name|rel
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|final
name|RelWriter
name|planWriter
init|=
operator|new
name|NonRecursiveRelWriterImpl
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
argument_list|,
name|SqlExplainLevel
operator|.
name|EXPPLAN_ATTRIBUTES
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|rel
operator|.
name|explain
argument_list|(
name|planWriter
argument_list|)
expr_stmt|;
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|static
class|class
name|NonRecursiveRelWriterImpl
extends|extends
name|RelWriterImplCopy
block|{
specifier|public
name|NonRecursiveRelWriterImpl
parameter_list|(
name|PrintWriter
name|pw
parameter_list|,
name|SqlExplainLevel
name|detailLevel
parameter_list|,
name|boolean
name|withIdPrefix
parameter_list|)
block|{
name|super
argument_list|(
name|pw
argument_list|,
name|detailLevel
argument_list|,
name|withIdPrefix
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|explainInputs
parameter_list|(
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
comment|// no-op
block|}
block|}
block|}
end_class

end_unit

