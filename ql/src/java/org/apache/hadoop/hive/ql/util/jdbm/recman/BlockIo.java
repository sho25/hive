begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  * JDBM LICENSE v1.00  *  * Redistribution and use of this software and associated documentation  * ("Software"), with or without modification, are permitted provided  * that the following conditions are met:  *  * 1. Redistributions of source code must retain copyright  *    statements and notices.  Redistributions must also contain a  *    copy of this document.  *  * 2. Redistributions in binary form must reproduce the  *    above copyright notice, this list of conditions and the  *    following disclaimer in the documentation and/or other  *    materials provided with the distribution.  *  * 3. The name "JDBM" must not be used to endorse or promote  *    products derived from this Software without prior written  *    permission of Cees de Groot.  For written permission,  *    please contact cg@cdegroot.com.  *  * 4. Products derived from this Software may not be called "JDBM"  *    nor may "JDBM" appear in their names without prior written  *    permission of Cees de Groot.  *  * 5. Due credit should be given to the JDBM Project  *    (http://jdbm.sourceforge.net/).  *  * THIS SOFTWARE IS PROVIDED BY THE JDBM PROJECT AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT  * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND  * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL  * CEES DE GROOT OR ANY CONTRIBUTORS BE LIABLE FOR ANY DIRECT,  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  *  * Copyright 2000 (C) Cees de Groot. All Rights Reserved.  * Contributions are Copyright (C) 2000 by their associated contributors.  *  * $Id: BlockIo.java,v 1.2 2002/08/06 05:18:36 boisvert Exp $  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|recman
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  This class wraps a page-sized byte array and provides methods  *  to read and write data to and from it. The readers and writers  *  are just the ones that the rest of the toolkit needs, nothing else.  *  Values written are compatible with java.io routines.  *  *  @see java.io.DataInput  *  @see java.io.DataOutput  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|BlockIo
implements|implements
name|java
operator|.
name|io
operator|.
name|Externalizable
block|{
specifier|public
specifier|final
specifier|static
name|long
name|serialVersionUID
init|=
literal|2L
decl_stmt|;
specifier|private
name|long
name|blockId
decl_stmt|;
specifier|private
specifier|transient
name|byte
index|[]
name|data
decl_stmt|;
comment|// work area
specifier|private
specifier|transient
name|BlockView
name|view
init|=
literal|null
decl_stmt|;
specifier|private
specifier|transient
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
specifier|private
specifier|transient
name|int
name|transactionCount
init|=
literal|0
decl_stmt|;
comment|/**      * Default constructor for serialization      */
specifier|public
name|BlockIo
parameter_list|()
block|{
comment|// empty
block|}
comment|/**      *  Constructs a new BlockIo instance working on the indicated      *  buffer.      */
name|BlockIo
parameter_list|(
name|long
name|blockId
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
block|{
comment|// removeme for production version
if|if
condition|(
name|blockId
operator|>
literal|10000000000L
condition|)
throw|throw
operator|new
name|Error
argument_list|(
literal|"bogus block id "
operator|+
name|blockId
argument_list|)
throw|;
name|this
operator|.
name|blockId
operator|=
name|blockId
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
comment|/**      *  Returns the underlying array      */
name|byte
index|[]
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
comment|/**      *  Sets the block number. Should only be called by RecordFile.      */
name|void
name|setBlockId
parameter_list|(
name|long
name|id
parameter_list|)
block|{
if|if
condition|(
name|isInTransaction
argument_list|()
condition|)
throw|throw
operator|new
name|Error
argument_list|(
literal|"BlockId assigned for transaction block"
argument_list|)
throw|;
comment|// removeme for production version
if|if
condition|(
name|id
operator|>
literal|10000000000L
condition|)
throw|throw
operator|new
name|Error
argument_list|(
literal|"bogus block id "
operator|+
name|id
argument_list|)
throw|;
name|blockId
operator|=
name|id
expr_stmt|;
block|}
comment|/**      *  Returns the block number.      */
name|long
name|getBlockId
parameter_list|()
block|{
return|return
name|blockId
return|;
block|}
comment|/**      *  Returns the current view of the block.      */
specifier|public
name|BlockView
name|getView
parameter_list|()
block|{
return|return
name|view
return|;
block|}
comment|/**      *  Sets the current view of the block.      */
specifier|public
name|void
name|setView
parameter_list|(
name|BlockView
name|view
parameter_list|)
block|{
name|this
operator|.
name|view
operator|=
name|view
expr_stmt|;
block|}
comment|/**      *  Sets the dirty flag      */
name|void
name|setDirty
parameter_list|()
block|{
name|dirty
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      *  Clears the dirty flag      */
name|void
name|setClean
parameter_list|()
block|{
name|dirty
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      *  Returns true if the dirty flag is set.      */
name|boolean
name|isDirty
parameter_list|()
block|{
return|return
name|dirty
return|;
block|}
comment|/**      *  Returns true if the block is still dirty with respect to the      *  transaction log.      */
name|boolean
name|isInTransaction
parameter_list|()
block|{
return|return
name|transactionCount
operator|!=
literal|0
return|;
block|}
comment|/**      *  Increments transaction count for this block, to signal that this      *  block is in the log but not yet in the data file. The method also      *  takes a snapshot so that the data may be modified in new transactions.      */
specifier|synchronized
name|void
name|incrementTransactionCount
parameter_list|()
block|{
name|transactionCount
operator|++
expr_stmt|;
comment|// @fixme(alex)
name|setClean
argument_list|()
expr_stmt|;
block|}
comment|/**      *  Decrements transaction count for this block, to signal that this      *  block has been written from the log to the data file.      */
specifier|synchronized
name|void
name|decrementTransactionCount
parameter_list|()
block|{
name|transactionCount
operator|--
expr_stmt|;
if|if
condition|(
name|transactionCount
operator|<
literal|0
condition|)
throw|throw
operator|new
name|Error
argument_list|(
literal|"transaction count on block "
operator|+
name|getBlockId
argument_list|()
operator|+
literal|" below zero!"
argument_list|)
throw|;
block|}
comment|/**      *  Reads a byte from the indicated position      */
specifier|public
name|byte
name|readByte
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
name|data
index|[
name|pos
index|]
return|;
block|}
comment|/**      *  Writes a byte to the indicated position      */
specifier|public
name|void
name|writeByte
parameter_list|(
name|int
name|pos
parameter_list|,
name|byte
name|value
parameter_list|)
block|{
name|data
index|[
name|pos
index|]
operator|=
name|value
expr_stmt|;
name|setDirty
argument_list|()
expr_stmt|;
block|}
comment|/**      *  Reads a short from the indicated position      */
specifier|public
name|short
name|readShort
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
call|(
name|short
call|)
argument_list|(
operator|(
call|(
name|short
call|)
argument_list|(
name|data
index|[
name|pos
operator|+
literal|0
index|]
operator|&
literal|0xff
argument_list|)
operator|<<
literal|8
operator|)
operator||
operator|(
call|(
name|short
call|)
argument_list|(
name|data
index|[
name|pos
operator|+
literal|1
index|]
operator|&
literal|0xff
argument_list|)
operator|<<
literal|0
operator|)
argument_list|)
return|;
block|}
comment|/**      *  Writes a short to the indicated position      */
specifier|public
name|void
name|writeShort
parameter_list|(
name|int
name|pos
parameter_list|,
name|short
name|value
parameter_list|)
block|{
name|data
index|[
name|pos
operator|+
literal|0
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|&
operator|(
name|value
operator|>>
literal|8
operator|)
argument_list|)
expr_stmt|;
name|data
index|[
name|pos
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|&
operator|(
name|value
operator|>>
literal|0
operator|)
argument_list|)
expr_stmt|;
name|setDirty
argument_list|()
expr_stmt|;
block|}
comment|/**      *  Reads an int from the indicated position      */
specifier|public
name|int
name|readInt
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
operator|(
operator|(
call|(
name|int
call|)
argument_list|(
name|data
index|[
name|pos
operator|+
literal|0
index|]
operator|&
literal|0xff
argument_list|)
operator|<<
literal|24
operator|)
operator||
operator|(
call|(
name|int
call|)
argument_list|(
name|data
index|[
name|pos
operator|+
literal|1
index|]
operator|&
literal|0xff
argument_list|)
operator|<<
literal|16
operator|)
operator||
operator|(
call|(
name|int
call|)
argument_list|(
name|data
index|[
name|pos
operator|+
literal|2
index|]
operator|&
literal|0xff
argument_list|)
operator|<<
literal|8
operator|)
operator||
operator|(
call|(
name|int
call|)
argument_list|(
name|data
index|[
name|pos
operator|+
literal|3
index|]
operator|&
literal|0xff
argument_list|)
operator|<<
literal|0
operator|)
operator|)
return|;
block|}
comment|/**      *  Writes an int to the indicated position      */
specifier|public
name|void
name|writeInt
parameter_list|(
name|int
name|pos
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|data
index|[
name|pos
operator|+
literal|0
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|&
operator|(
name|value
operator|>>
literal|24
operator|)
argument_list|)
expr_stmt|;
name|data
index|[
name|pos
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|&
operator|(
name|value
operator|>>
literal|16
operator|)
argument_list|)
expr_stmt|;
name|data
index|[
name|pos
operator|+
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|&
operator|(
name|value
operator|>>
literal|8
operator|)
argument_list|)
expr_stmt|;
name|data
index|[
name|pos
operator|+
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|&
operator|(
name|value
operator|>>
literal|0
operator|)
argument_list|)
expr_stmt|;
name|setDirty
argument_list|()
expr_stmt|;
block|}
comment|/**      *  Reads a long from the indicated position      */
specifier|public
name|long
name|readLong
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
comment|// Contributed by Erwin Bolwidt<ejb@klomp.org>
comment|// Gives about 15% performance improvement
return|return
operator|(
call|(
name|long
call|)
argument_list|(
operator|(
operator|(
name|data
index|[
name|pos
operator|+
literal|0
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|data
index|[
name|pos
operator|+
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|data
index|[
name|pos
operator|+
literal|2
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
name|data
index|[
name|pos
operator|+
literal|3
index|]
operator|&
literal|0xff
operator|)
operator|)
argument_list|)
operator|<<
literal|32
operator|)
operator||
operator|(
call|(
name|long
call|)
argument_list|(
operator|(
operator|(
name|data
index|[
name|pos
operator|+
literal|4
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|data
index|[
name|pos
operator|+
literal|5
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|data
index|[
name|pos
operator|+
literal|6
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
name|data
index|[
name|pos
operator|+
literal|7
index|]
operator|&
literal|0xff
operator|)
operator|)
argument_list|)
operator|&
literal|0xffffffff
operator|)
return|;
comment|/* Original version by Alex Boisvert.  Might be faster on 64-bit JVMs.         return             (((long)(data[pos+0]& 0xff)<< 56) |              ((long)(data[pos+1]& 0xff)<< 48) |              ((long)(data[pos+2]& 0xff)<< 40) |              ((long)(data[pos+3]& 0xff)<< 32) |              ((long)(data[pos+4]& 0xff)<< 24) |              ((long)(data[pos+5]& 0xff)<< 16) |              ((long)(data[pos+6]& 0xff)<<  8) |              ((long)(data[pos+7]& 0xff)<<  0));         */
block|}
comment|/**      *  Writes a long to the indicated position      */
specifier|public
name|void
name|writeLong
parameter_list|(
name|int
name|pos
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|data
index|[
name|pos
operator|+
literal|0
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|&
operator|(
name|value
operator|>>
literal|56
operator|)
argument_list|)
expr_stmt|;
name|data
index|[
name|pos
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|&
operator|(
name|value
operator|>>
literal|48
operator|)
argument_list|)
expr_stmt|;
name|data
index|[
name|pos
operator|+
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|&
operator|(
name|value
operator|>>
literal|40
operator|)
argument_list|)
expr_stmt|;
name|data
index|[
name|pos
operator|+
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|&
operator|(
name|value
operator|>>
literal|32
operator|)
argument_list|)
expr_stmt|;
name|data
index|[
name|pos
operator|+
literal|4
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|&
operator|(
name|value
operator|>>
literal|24
operator|)
argument_list|)
expr_stmt|;
name|data
index|[
name|pos
operator|+
literal|5
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|&
operator|(
name|value
operator|>>
literal|16
operator|)
argument_list|)
expr_stmt|;
name|data
index|[
name|pos
operator|+
literal|6
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|&
operator|(
name|value
operator|>>
literal|8
operator|)
argument_list|)
expr_stmt|;
name|data
index|[
name|pos
operator|+
literal|7
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|&
operator|(
name|value
operator|>>
literal|0
operator|)
argument_list|)
expr_stmt|;
name|setDirty
argument_list|()
expr_stmt|;
block|}
comment|// overrides java.lang.Object
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"BlockIO("
operator|+
name|blockId
operator|+
literal|","
operator|+
name|dirty
operator|+
literal|","
operator|+
name|view
operator|+
literal|")"
return|;
block|}
comment|// implement externalizable interface
specifier|public
name|void
name|readExternal
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|blockId
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|int
name|length
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|length
index|]
expr_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
comment|// implement externalizable interface
specifier|public
name|void
name|writeExternal
parameter_list|(
name|ObjectOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|blockId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

