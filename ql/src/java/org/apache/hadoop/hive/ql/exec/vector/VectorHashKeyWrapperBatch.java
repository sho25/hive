begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpressionWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|JavaDataModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_comment
comment|/**  * Class for handling vectorized hash map key wrappers. It evaluates the key columns in a  * row batch in a vectorized fashion.  * This class stores additional information about keys needed to evaluate and output the key values.  *  */
end_comment

begin_class
specifier|public
class|class
name|VectorHashKeyWrapperBatch
extends|extends
name|VectorColumnSetInfo
block|{
specifier|public
name|VectorHashKeyWrapperBatch
parameter_list|(
name|int
name|keyCount
parameter_list|)
block|{
name|super
argument_list|(
name|keyCount
argument_list|)
expr_stmt|;
block|}
comment|/**    * Number of object references in 'this' (for size computation)    */
specifier|private
specifier|static
specifier|final
name|int
name|MODEL_REFERENCES_COUNT
init|=
literal|7
decl_stmt|;
comment|/**    * The key expressions that require evaluation and output the primitive values for each key.    */
specifier|private
name|VectorExpression
index|[]
name|keyExpressions
decl_stmt|;
comment|/**    * Pre-allocated batch size vector of keys wrappers.    * N.B. these keys are **mutable** and should never be used in a HashMap.    * Always clone the key wrapper to obtain an immutable keywrapper suitable    * to use a key in a HashMap.    */
specifier|private
name|VectorHashKeyWrapper
index|[]
name|vectorHashKeyWrappers
decl_stmt|;
comment|/**    * The fixed size of the key wrappers.    */
specifier|private
name|int
name|keysFixedSize
decl_stmt|;
comment|/**    * Returns the compiled fixed size for the key wrappers.    * @return    */
specifier|public
name|int
name|getKeysFixedSize
parameter_list|()
block|{
return|return
name|keysFixedSize
return|;
block|}
comment|/**    * Accessor for the batch-sized array of key wrappers.    */
specifier|public
name|VectorHashKeyWrapper
index|[]
name|getVectorHashKeyWrappers
parameter_list|()
block|{
return|return
name|vectorHashKeyWrappers
return|;
block|}
comment|/**    * Processes a batch:    *<ul>    *<li>Evaluates each key vector expression.</li>    *<li>Copies out each key's primitive values into the key wrappers</li>    *<li>computes the hashcode of the key wrappers</li>    *</ul>    * @param batch    * @throws HiveException    */
specifier|public
name|void
name|evaluateBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyExpressions
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|keyExpressions
index|[
name|i
index|]
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|longIndices
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|int
name|keyIndex
init|=
name|longIndices
index|[
name|i
index|]
decl_stmt|;
name|int
name|columnIndex
init|=
name|keyExpressions
index|[
name|keyIndex
index|]
operator|.
name|getOutputColumn
argument_list|()
decl_stmt|;
name|LongColumnVector
name|columnVector
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
operator|!
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|assignLongNoNullsNoRepeatingNoSelection
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|assignLongNoNullsNoRepeatingSelection
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|,
name|batch
operator|.
name|selected
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|columnVector
operator|.
name|noNulls
operator|&&
name|columnVector
operator|.
name|isRepeating
condition|)
block|{
name|assignLongNoNullsRepeating
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
operator|!
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|assignLongNullsNoRepeatingNoSelection
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|columnVector
operator|.
name|noNulls
operator|&&
name|columnVector
operator|.
name|isRepeating
condition|)
block|{
name|assignLongNullsRepeating
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|assignLongNullsNoRepeatingSelection
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|,
name|batch
operator|.
name|selected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unimplemented Long null/repeat/selected combination %b/%b/%b"
argument_list|,
name|columnVector
operator|.
name|noNulls
argument_list|,
name|columnVector
operator|.
name|isRepeating
argument_list|,
name|batch
operator|.
name|selectedInUse
argument_list|)
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|doubleIndices
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|int
name|keyIndex
init|=
name|doubleIndices
index|[
name|i
index|]
decl_stmt|;
name|int
name|columnIndex
init|=
name|keyExpressions
index|[
name|keyIndex
index|]
operator|.
name|getOutputColumn
argument_list|()
decl_stmt|;
name|DoubleColumnVector
name|columnVector
init|=
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
operator|!
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|assignDoubleNoNullsNoRepeatingNoSelection
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|assignDoubleNoNullsNoRepeatingSelection
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|,
name|batch
operator|.
name|selected
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|columnVector
operator|.
name|noNulls
operator|&&
name|columnVector
operator|.
name|isRepeating
condition|)
block|{
name|assignDoubleNoNullsRepeating
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
operator|!
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|assignDoubleNullsNoRepeatingNoSelection
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|columnVector
operator|.
name|noNulls
operator|&&
name|columnVector
operator|.
name|isRepeating
condition|)
block|{
name|assignDoubleNullsRepeating
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|assignDoubleNullsNoRepeatingSelection
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|,
name|batch
operator|.
name|selected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unimplemented Double null/repeat/selected combination %b/%b/%b"
argument_list|,
name|columnVector
operator|.
name|noNulls
argument_list|,
name|columnVector
operator|.
name|isRepeating
argument_list|,
name|batch
operator|.
name|selectedInUse
argument_list|)
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stringIndices
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|int
name|keyIndex
init|=
name|stringIndices
index|[
name|i
index|]
decl_stmt|;
name|int
name|columnIndex
init|=
name|keyExpressions
index|[
name|keyIndex
index|]
operator|.
name|getOutputColumn
argument_list|()
decl_stmt|;
name|BytesColumnVector
name|columnVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
operator|!
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|assignStringNoNullsNoRepeatingNoSelection
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|assignStringNoNullsNoRepeatingSelection
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|,
name|batch
operator|.
name|selected
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|columnVector
operator|.
name|noNulls
operator|&&
name|columnVector
operator|.
name|isRepeating
condition|)
block|{
name|assignStringNoNullsRepeating
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
operator|!
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|assignStringNullsNoRepeatingNoSelection
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|columnVector
operator|.
name|noNulls
operator|&&
name|columnVector
operator|.
name|isRepeating
condition|)
block|{
name|assignStringNullsRepeating
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|assignStringNullsNoRepeatingSelection
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|,
name|batch
operator|.
name|selected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unimplemented String null/repeat/selected combination %b/%b/%b"
argument_list|,
name|columnVector
operator|.
name|noNulls
argument_list|,
name|columnVector
operator|.
name|isRepeating
argument_list|,
name|batch
operator|.
name|selectedInUse
argument_list|)
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|decimalIndices
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|int
name|keyIndex
init|=
name|decimalIndices
index|[
name|i
index|]
decl_stmt|;
name|int
name|columnIndex
init|=
name|keyExpressions
index|[
name|keyIndex
index|]
operator|.
name|getOutputColumn
argument_list|()
decl_stmt|;
name|DecimalColumnVector
name|columnVector
init|=
operator|(
name|DecimalColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
operator|!
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|assignDecimalNoNullsNoRepeatingNoSelection
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|assignDecimalNoNullsNoRepeatingSelection
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|,
name|batch
operator|.
name|selected
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|columnVector
operator|.
name|noNulls
operator|&&
name|columnVector
operator|.
name|isRepeating
condition|)
block|{
name|assignDecimalNoNullsRepeating
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
operator|!
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|assignDecimalNullsNoRepeatingNoSelection
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|columnVector
operator|.
name|noNulls
operator|&&
name|columnVector
operator|.
name|isRepeating
condition|)
block|{
name|assignDecimalNullsRepeating
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|assignDecimalNullsNoRepeatingSelection
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|,
name|batch
operator|.
name|selected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unimplemented Decimal null/repeat/selected combination %b/%b/%b"
argument_list|,
name|columnVector
operator|.
name|noNulls
argument_list|,
name|columnVector
operator|.
name|isRepeating
argument_list|,
name|batch
operator|.
name|selectedInUse
argument_list|)
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|timestampIndices
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|int
name|keyIndex
init|=
name|timestampIndices
index|[
name|i
index|]
decl_stmt|;
name|int
name|columnIndex
init|=
name|keyExpressions
index|[
name|keyIndex
index|]
operator|.
name|getOutputColumn
argument_list|()
decl_stmt|;
name|TimestampColumnVector
name|columnVector
init|=
operator|(
name|TimestampColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
operator|!
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|assignTimestampNoNullsNoRepeatingNoSelection
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|assignTimestampNoNullsNoRepeatingSelection
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|,
name|batch
operator|.
name|selected
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|columnVector
operator|.
name|noNulls
operator|&&
name|columnVector
operator|.
name|isRepeating
condition|)
block|{
name|assignTimestampNoNullsRepeating
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
operator|!
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|assignTimestampNullsNoRepeatingNoSelection
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|columnVector
operator|.
name|noNulls
operator|&&
name|columnVector
operator|.
name|isRepeating
condition|)
block|{
name|assignTimestampNullsRepeating
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|assignTimestampNullsNoRepeatingSelection
argument_list|(
name|i
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|columnVector
argument_list|,
name|batch
operator|.
name|selected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unimplemented timestamp null/repeat/selected combination %b/%b/%b"
argument_list|,
name|columnVector
operator|.
name|noNulls
argument_list|,
name|columnVector
operator|.
name|isRepeating
argument_list|,
name|batch
operator|.
name|selectedInUse
argument_list|)
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
operator|++
name|i
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|i
index|]
operator|.
name|setHashKey
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for string type, possible nulls, no repeat values, batch selection vector.    */
specifier|private
name|void
name|assignStringNullsNoRepeatingSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|BytesColumnVector
name|columnVector
parameter_list|,
name|int
index|[]
name|selected
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|int
name|row
init|=
name|selected
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|columnVector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|vectorHashKeyWrappers
index|[
name|i
index|]
operator|.
name|assignNullString
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vectorHashKeyWrappers
index|[
name|i
index|]
operator|.
name|assignString
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
name|row
index|]
argument_list|,
name|columnVector
operator|.
name|start
index|[
name|row
index|]
argument_list|,
name|columnVector
operator|.
name|length
index|[
name|row
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for double type, possible nulls, repeat values.    */
specifier|private
name|void
name|assignStringNullsRepeating
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|BytesColumnVector
name|columnVector
parameter_list|)
block|{
if|if
condition|(
name|columnVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|i
index|]
operator|.
name|assignNullString
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|i
index|]
operator|.
name|assignString
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|columnVector
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|columnVector
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for string type, possible nulls, no repeat values, no selection vector.    */
specifier|private
name|void
name|assignStringNullsNoRepeatingNoSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|BytesColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|columnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|vectorHashKeyWrappers
index|[
name|i
index|]
operator|.
name|assignNullString
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vectorHashKeyWrappers
index|[
name|i
index|]
operator|.
name|assignString
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|columnVector
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|columnVector
operator|.
name|length
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for double type, no nulls, repeat values, no selection vector.    */
specifier|private
name|void
name|assignStringNoNullsRepeating
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|BytesColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|i
index|]
operator|.
name|assignString
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|columnVector
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|columnVector
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for double type, no nulls, no repeat values, batch selection vector.    */
specifier|private
name|void
name|assignStringNoNullsNoRepeatingSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|BytesColumnVector
name|columnVector
parameter_list|,
name|int
index|[]
name|selected
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|int
name|row
init|=
name|selected
index|[
name|i
index|]
decl_stmt|;
name|vectorHashKeyWrappers
index|[
name|i
index|]
operator|.
name|assignString
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
name|row
index|]
argument_list|,
name|columnVector
operator|.
name|start
index|[
name|row
index|]
argument_list|,
name|columnVector
operator|.
name|length
index|[
name|row
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for double type, no nulls, no repeat values, no selection vector.    */
specifier|private
name|void
name|assignStringNoNullsNoRepeatingNoSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|BytesColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|i
index|]
operator|.
name|assignString
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|columnVector
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|columnVector
operator|.
name|length
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for double type, possible nulls, no repeat values, batch selection vector.    */
specifier|private
name|void
name|assignDoubleNullsNoRepeatingSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|DoubleColumnVector
name|columnVector
parameter_list|,
name|int
index|[]
name|selected
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|int
name|row
init|=
name|selected
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|columnVector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|vectorHashKeyWrappers
index|[
name|i
index|]
operator|.
name|assignDouble
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vectorHashKeyWrappers
index|[
name|i
index|]
operator|.
name|assignNullDouble
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for Double type, repeat null values.    */
specifier|private
name|void
name|assignDoubleNullsRepeating
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|DoubleColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignNullDouble
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for Double type, possible nulls, repeat values.    */
specifier|private
name|void
name|assignDoubleNullsNoRepeatingNoSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|DoubleColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
if|if
condition|(
operator|!
name|columnVector
operator|.
name|isNull
index|[
name|r
index|]
condition|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignDouble
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
name|r
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignNullDouble
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for double type, no nulls, repeat values, no selection vector.    */
specifier|private
name|void
name|assignDoubleNoNullsRepeating
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|DoubleColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignDouble
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for double type, no nulls, no repeat values, batch selection vector.    */
specifier|private
name|void
name|assignDoubleNoNullsNoRepeatingSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|DoubleColumnVector
name|columnVector
parameter_list|,
name|int
index|[]
name|selected
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignDouble
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
name|selected
index|[
name|r
index|]
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for double type, no nulls, no repeat values, no selection vector.    */
specifier|private
name|void
name|assignDoubleNoNullsNoRepeatingNoSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|DoubleColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignDouble
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
name|r
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for double type, possible nulls, no repeat values, batch selection vector.    */
specifier|private
name|void
name|assignLongNullsNoRepeatingSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|LongColumnVector
name|columnVector
parameter_list|,
name|int
index|[]
name|selected
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|int
name|row
init|=
name|selected
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|columnVector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|vectorHashKeyWrappers
index|[
name|i
index|]
operator|.
name|assignLong
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vectorHashKeyWrappers
index|[
name|i
index|]
operator|.
name|assignNullLong
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for double type, repeating nulls.    */
specifier|private
name|void
name|assignLongNullsRepeating
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|LongColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignNullLong
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for double type, possible nulls, no repeat values, no selection vector.    */
specifier|private
name|void
name|assignLongNullsNoRepeatingNoSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|LongColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
if|if
condition|(
operator|!
name|columnVector
operator|.
name|isNull
index|[
name|r
index|]
condition|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignLong
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
name|r
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignNullLong
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for double type, no nulls, repeat values, no selection vector.    */
specifier|private
name|void
name|assignLongNoNullsRepeating
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|LongColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignLong
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for double type, no nulls, no repeat values, batch selection vector.    */
specifier|private
name|void
name|assignLongNoNullsNoRepeatingSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|LongColumnVector
name|columnVector
parameter_list|,
name|int
index|[]
name|selected
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignLong
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
name|selected
index|[
name|r
index|]
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for double type, no nulls, no repeat values, no selection vector.    */
specifier|private
name|void
name|assignLongNoNullsNoRepeatingNoSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|LongColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignLong
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
name|r
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for Decimal type, possible nulls, no repeat values, batch selection vector.    */
specifier|private
name|void
name|assignDecimalNullsNoRepeatingSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|DecimalColumnVector
name|columnVector
parameter_list|,
name|int
index|[]
name|selected
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|int
name|row
init|=
name|selected
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|columnVector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|vectorHashKeyWrappers
index|[
name|i
index|]
operator|.
name|assignDecimal
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vectorHashKeyWrappers
index|[
name|i
index|]
operator|.
name|assignNullDecimal
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for Decimal type, repeat null values.    */
specifier|private
name|void
name|assignDecimalNullsRepeating
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|DecimalColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignNullDecimal
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for Decimal type, possible nulls, repeat values.    */
specifier|private
name|void
name|assignDecimalNullsNoRepeatingNoSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|DecimalColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
if|if
condition|(
operator|!
name|columnVector
operator|.
name|isNull
index|[
name|r
index|]
condition|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignDecimal
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
name|r
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignNullDecimal
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for Decimal type, no nulls, repeat values, no selection vector.    */
specifier|private
name|void
name|assignDecimalNoNullsRepeating
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|DecimalColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignDecimal
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for Decimal type, no nulls, no repeat values, batch selection vector.    */
specifier|private
name|void
name|assignDecimalNoNullsNoRepeatingSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|DecimalColumnVector
name|columnVector
parameter_list|,
name|int
index|[]
name|selected
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignDecimal
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
name|selected
index|[
name|r
index|]
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for Decimal type, no nulls, no repeat values, no selection vector.    */
specifier|private
name|void
name|assignDecimalNoNullsNoRepeatingNoSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|DecimalColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignDecimal
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
name|r
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for Timestamp type, possible nulls, no repeat values, batch selection vector.    */
specifier|private
name|void
name|assignTimestampNullsNoRepeatingSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|TimestampColumnVector
name|columnVector
parameter_list|,
name|int
index|[]
name|selected
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|int
name|row
init|=
name|selected
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|columnVector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|vectorHashKeyWrappers
index|[
name|i
index|]
operator|.
name|assignTimestamp
argument_list|(
name|index
argument_list|,
name|columnVector
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vectorHashKeyWrappers
index|[
name|i
index|]
operator|.
name|assignNullTimestamp
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for Timestamp type, repeat null values.    */
specifier|private
name|void
name|assignTimestampNullsRepeating
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|TimestampColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignNullTimestamp
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for Timestamp type, possible nulls, repeat values.    */
specifier|private
name|void
name|assignTimestampNullsNoRepeatingNoSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|TimestampColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
if|if
condition|(
operator|!
name|columnVector
operator|.
name|isNull
index|[
name|r
index|]
condition|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignTimestamp
argument_list|(
name|index
argument_list|,
name|columnVector
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignNullTimestamp
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for Timestamp type, no nulls, repeat values, no selection vector.    */
specifier|private
name|void
name|assignTimestampNoNullsRepeating
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|TimestampColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignTimestamp
argument_list|(
name|index
argument_list|,
name|columnVector
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for Timestamp type, no nulls, no repeat values, batch selection vector.    */
specifier|private
name|void
name|assignTimestampNoNullsNoRepeatingSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|TimestampColumnVector
name|columnVector
parameter_list|,
name|int
index|[]
name|selected
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignTimestamp
argument_list|(
name|index
argument_list|,
name|columnVector
argument_list|,
name|selected
index|[
name|r
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for Timestamp type, no nulls, no repeat values, no selection vector.    */
specifier|private
name|void
name|assignTimestampNoNullsNoRepeatingNoSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|TimestampColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignTimestamp
argument_list|(
name|index
argument_list|,
name|columnVector
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Prepares a VectorHashKeyWrapperBatch to work for a specific set of keys.    * Computes the fast access lookup indices, preallocates all needed internal arrays.    * This step is done only once per query, not once per batch. The information computed now    * will be used to generate proper individual VectorKeyHashWrapper objects.    */
specifier|public
specifier|static
name|VectorHashKeyWrapperBatch
name|compileKeyWrapperBatch
parameter_list|(
name|VectorExpression
index|[]
name|keyExpressions
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorHashKeyWrapperBatch
name|compiledKeyWrapperBatch
init|=
operator|new
name|VectorHashKeyWrapperBatch
argument_list|(
name|keyExpressions
operator|.
name|length
argument_list|)
decl_stmt|;
name|compiledKeyWrapperBatch
operator|.
name|keyExpressions
operator|=
name|keyExpressions
expr_stmt|;
name|compiledKeyWrapperBatch
operator|.
name|keysFixedSize
operator|=
literal|0
expr_stmt|;
comment|// Inspect the output type of each key expression.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyExpressions
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|compiledKeyWrapperBatch
operator|.
name|addKey
argument_list|(
name|keyExpressions
index|[
name|i
index|]
operator|.
name|getOutputType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|compiledKeyWrapperBatch
operator|.
name|finishAdding
argument_list|()
expr_stmt|;
name|compiledKeyWrapperBatch
operator|.
name|vectorHashKeyWrappers
operator|=
operator|new
name|VectorHashKeyWrapper
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
operator|++
name|i
control|)
block|{
name|compiledKeyWrapperBatch
operator|.
name|vectorHashKeyWrappers
index|[
name|i
index|]
operator|=
name|compiledKeyWrapperBatch
operator|.
name|allocateKeyWrapper
argument_list|()
expr_stmt|;
block|}
name|JavaDataModel
name|model
init|=
name|JavaDataModel
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Compute the fixed size overhead for the keys
comment|// start with the keywrapper itself
name|compiledKeyWrapperBatch
operator|.
name|keysFixedSize
operator|+=
name|JavaDataModel
operator|.
name|alignUp
argument_list|(
name|model
operator|.
name|object
argument_list|()
operator|+
name|model
operator|.
name|ref
argument_list|()
operator|*
name|MODEL_REFERENCES_COUNT
operator|+
name|model
operator|.
name|primitive1
argument_list|()
argument_list|,
name|model
operator|.
name|memoryAlign
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now add the key wrapper arrays
name|compiledKeyWrapperBatch
operator|.
name|keysFixedSize
operator|+=
name|model
operator|.
name|lengthForLongArrayOfSize
argument_list|(
name|compiledKeyWrapperBatch
operator|.
name|longIndices
operator|.
name|length
argument_list|)
expr_stmt|;
name|compiledKeyWrapperBatch
operator|.
name|keysFixedSize
operator|+=
name|model
operator|.
name|lengthForDoubleArrayOfSize
argument_list|(
name|compiledKeyWrapperBatch
operator|.
name|doubleIndices
operator|.
name|length
argument_list|)
expr_stmt|;
name|compiledKeyWrapperBatch
operator|.
name|keysFixedSize
operator|+=
name|model
operator|.
name|lengthForObjectArrayOfSize
argument_list|(
name|compiledKeyWrapperBatch
operator|.
name|stringIndices
operator|.
name|length
argument_list|)
expr_stmt|;
name|compiledKeyWrapperBatch
operator|.
name|keysFixedSize
operator|+=
name|model
operator|.
name|lengthForObjectArrayOfSize
argument_list|(
name|compiledKeyWrapperBatch
operator|.
name|decimalIndices
operator|.
name|length
argument_list|)
expr_stmt|;
name|compiledKeyWrapperBatch
operator|.
name|keysFixedSize
operator|+=
name|model
operator|.
name|lengthForObjectArrayOfSize
argument_list|(
name|compiledKeyWrapperBatch
operator|.
name|timestampIndices
operator|.
name|length
argument_list|)
expr_stmt|;
name|compiledKeyWrapperBatch
operator|.
name|keysFixedSize
operator|+=
name|model
operator|.
name|lengthForIntArrayOfSize
argument_list|(
name|compiledKeyWrapperBatch
operator|.
name|longIndices
operator|.
name|length
argument_list|)
operator|*
literal|2
expr_stmt|;
name|compiledKeyWrapperBatch
operator|.
name|keysFixedSize
operator|+=
name|model
operator|.
name|lengthForBooleanArrayOfSize
argument_list|(
name|keyExpressions
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|compiledKeyWrapperBatch
return|;
block|}
specifier|public
name|VectorHashKeyWrapper
name|allocateKeyWrapper
parameter_list|()
block|{
return|return
operator|new
name|VectorHashKeyWrapper
argument_list|(
name|longIndices
operator|.
name|length
argument_list|,
name|doubleIndices
operator|.
name|length
argument_list|,
name|stringIndices
operator|.
name|length
argument_list|,
name|decimalIndices
operator|.
name|length
argument_list|,
name|timestampIndices
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * Get the row-mode writable object value of a key from a key wrapper    * @param keyOutputWriter    */
specifier|public
name|Object
name|getWritableKeyValue
parameter_list|(
name|VectorHashKeyWrapper
name|kw
parameter_list|,
name|int
name|i
parameter_list|,
name|VectorExpressionWriter
name|keyOutputWriter
parameter_list|)
throws|throws
name|HiveException
block|{
name|KeyLookupHelper
name|klh
init|=
name|indexLookup
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|klh
operator|.
name|longIndex
operator|>=
literal|0
condition|)
block|{
return|return
name|kw
operator|.
name|getIsLongNull
argument_list|(
name|klh
operator|.
name|longIndex
argument_list|)
condition|?
literal|null
else|:
name|keyOutputWriter
operator|.
name|writeValue
argument_list|(
name|kw
operator|.
name|getLongValue
argument_list|(
name|klh
operator|.
name|longIndex
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|klh
operator|.
name|doubleIndex
operator|>=
literal|0
condition|)
block|{
return|return
name|kw
operator|.
name|getIsDoubleNull
argument_list|(
name|klh
operator|.
name|doubleIndex
argument_list|)
condition|?
literal|null
else|:
name|keyOutputWriter
operator|.
name|writeValue
argument_list|(
name|kw
operator|.
name|getDoubleValue
argument_list|(
name|klh
operator|.
name|doubleIndex
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|klh
operator|.
name|stringIndex
operator|>=
literal|0
condition|)
block|{
return|return
name|kw
operator|.
name|getIsBytesNull
argument_list|(
name|klh
operator|.
name|stringIndex
argument_list|)
condition|?
literal|null
else|:
name|keyOutputWriter
operator|.
name|writeValue
argument_list|(
name|kw
operator|.
name|getBytes
argument_list|(
name|klh
operator|.
name|stringIndex
argument_list|)
argument_list|,
name|kw
operator|.
name|getByteStart
argument_list|(
name|klh
operator|.
name|stringIndex
argument_list|)
argument_list|,
name|kw
operator|.
name|getByteLength
argument_list|(
name|klh
operator|.
name|stringIndex
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|klh
operator|.
name|decimalIndex
operator|>=
literal|0
condition|)
block|{
return|return
name|kw
operator|.
name|getIsDecimalNull
argument_list|(
name|klh
operator|.
name|decimalIndex
argument_list|)
condition|?
literal|null
else|:
name|keyOutputWriter
operator|.
name|writeValue
argument_list|(
name|kw
operator|.
name|getDecimal
argument_list|(
name|klh
operator|.
name|decimalIndex
argument_list|)
operator|.
name|getHiveDecimal
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|klh
operator|.
name|timestampIndex
operator|>=
literal|0
condition|)
block|{
return|return
name|kw
operator|.
name|getIsTimestampNull
argument_list|(
name|klh
operator|.
name|timestampIndex
argument_list|)
condition|?
literal|null
else|:
name|keyOutputWriter
operator|.
name|writeValue
argument_list|(
name|kw
operator|.
name|getTimestamp
argument_list|(
name|klh
operator|.
name|timestampIndex
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Internal inconsistent KeyLookupHelper at index [%d]:%d %d %d %d %d"
argument_list|,
name|i
argument_list|,
name|klh
operator|.
name|longIndex
argument_list|,
name|klh
operator|.
name|doubleIndex
argument_list|,
name|klh
operator|.
name|stringIndex
argument_list|,
name|klh
operator|.
name|decimalIndex
argument_list|,
name|klh
operator|.
name|timestampIndex
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|getVariableSize
parameter_list|(
name|int
name|batchSize
parameter_list|)
block|{
name|int
name|variableSize
init|=
literal|0
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|stringIndices
operator|.
name|length
condition|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|batchSize
condition|;
operator|++
name|k
control|)
block|{
name|VectorHashKeyWrapper
name|hkw
init|=
name|vectorHashKeyWrappers
index|[
name|k
index|]
decl_stmt|;
name|variableSize
operator|+=
name|hkw
operator|.
name|getVariableSize
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|variableSize
return|;
block|}
block|}
end_class

end_unit

