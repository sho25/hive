begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|VectorBatchDebug
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VectorBatchDebug
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|String
name|displayBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|start
operator|+
name|length
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
operator|(
name|char
operator|)
name|bytes
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|ch
argument_list|<
literal|' '
operator|||
name|ch
argument_list|>
literal|'~'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\\%03d"
argument_list|,
name|bytes
index|[
name|i
index|]
operator|&
literal|0xff
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|debugDisplayOneRow
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|index
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|prefix
operator|+
literal|" row "
operator|+
name|index
operator|+
literal|" "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|batch
operator|.
name|projectionSize
condition|;
name|p
operator|++
control|)
block|{
name|int
name|column
init|=
name|batch
operator|.
name|projectedColumns
index|[
name|p
index|]
decl_stmt|;
if|if
condition|(
name|p
operator|==
name|column
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"(col "
operator|+
name|p
operator|+
literal|") "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"(proj col "
operator|+
name|p
operator|+
literal|" col "
operator|+
name|column
operator|+
literal|") "
argument_list|)
expr_stmt|;
block|}
name|ColumnVector
name|colVector
init|=
name|batch
operator|.
name|cols
index|[
name|column
index|]
decl_stmt|;
if|if
condition|(
name|colVector
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"(null ColumnVector)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|isRepeating
init|=
name|colVector
operator|.
name|isRepeating
decl_stmt|;
if|if
condition|(
name|isRepeating
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"(repeating)"
argument_list|)
expr_stmt|;
block|}
name|index
operator|=
operator|(
name|isRepeating
condition|?
literal|0
else|:
name|index
operator|)
expr_stmt|;
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|index
index|]
condition|)
block|{
if|if
condition|(
name|colVector
operator|instanceof
name|LongColumnVector
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colVector
operator|instanceof
name|DoubleColumnVector
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colVector
operator|instanceof
name|BytesColumnVector
condition|)
block|{
name|BytesColumnVector
name|bytesColumnVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|colVector
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|bytesColumnVector
operator|.
name|vector
index|[
name|index
index|]
decl_stmt|;
name|int
name|start
init|=
name|bytesColumnVector
operator|.
name|start
index|[
name|index
index|]
decl_stmt|;
name|int
name|length
init|=
name|bytesColumnVector
operator|.
name|length
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"(Unexpected null bytes with start "
operator|+
name|start
operator|+
literal|" length "
operator|+
name|length
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"bytes: '"
operator|+
name|displayBytes
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|colVector
operator|instanceof
name|DecimalColumnVector
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|DecimalColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
name|index
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colVector
operator|instanceof
name|TimestampColumnVector
condition|)
block|{
name|java
operator|.
name|sql
operator|.
name|Timestamp
name|timestamp
init|=
operator|new
name|java
operator|.
name|sql
operator|.
name|Timestamp
argument_list|(
literal|0
argument_list|)
decl_stmt|;
operator|(
operator|(
name|TimestampColumnVector
operator|)
name|colVector
operator|)
operator|.
name|timestampUpdate
argument_list|(
name|timestamp
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Timestamp
operator|.
name|ofEpochMilli
argument_list|(
name|timestamp
operator|.
name|getTime
argument_list|()
argument_list|,
name|timestamp
operator|.
name|getNanos
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colVector
operator|instanceof
name|IntervalDayTimeColumnVector
condition|)
block|{
name|HiveIntervalDayTime
name|intervalDayTime
init|=
operator|(
operator|(
name|IntervalDayTimeColumnVector
operator|)
name|colVector
operator|)
operator|.
name|asScratchIntervalDayTime
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|intervalDayTime
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Unknown"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"NULL"
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// LOG.info(sb.toString());
block|}
specifier|public
specifier|static
name|void
name|debugDisplayBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
name|int
name|index
init|=
operator|(
name|batch
operator|.
name|selectedInUse
condition|?
name|batch
operator|.
name|selected
index|[
name|i
index|]
else|:
name|i
operator|)
decl_stmt|;
name|debugDisplayOneRow
argument_list|(
name|batch
argument_list|,
name|index
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

