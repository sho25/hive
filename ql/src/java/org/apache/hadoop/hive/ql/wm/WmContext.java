begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|wm
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|monitoring
operator|.
name|Constants
operator|.
name|SEPARATOR
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MXBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|WmEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|monitoring
operator|.
name|PrintSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonAutoDetect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonIgnore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|SerializationConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Some context information that are required for rule evaluation.  */
end_comment

begin_class
annotation|@
name|MXBean
specifier|public
class|class
name|WmContext
implements|implements
name|PrintSummary
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WmContext
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"queryId"
argument_list|)
specifier|private
name|String
name|queryId
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"queryStartTime"
argument_list|)
specifier|private
name|long
name|queryStartTime
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"queryEndTime"
argument_list|)
specifier|private
name|long
name|queryEndTime
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"queryCompleted"
argument_list|)
specifier|private
name|boolean
name|queryCompleted
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"queryWmEvents"
argument_list|)
specifier|private
specifier|final
name|List
argument_list|<
name|WmEvent
argument_list|>
name|queryWmEvents
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"appliedTriggers"
argument_list|)
specifier|private
name|Set
argument_list|<
name|Trigger
argument_list|>
name|appliedTriggers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"subscribedCounters"
argument_list|)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|subscribedCounters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"currentCounters"
argument_list|)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|currentCounters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|JsonIgnore
comment|// explictly ignoring as Getter visibility is ANY for auto-json serialization of Trigger based on getters
specifier|private
name|Future
argument_list|<
name|Boolean
argument_list|>
name|returnEventFuture
decl_stmt|;
specifier|public
name|WmContext
parameter_list|(
specifier|final
name|long
name|queryStartTime
parameter_list|,
specifier|final
name|String
name|queryId
parameter_list|)
block|{
name|this
operator|.
name|queryStartTime
operator|=
name|queryStartTime
expr_stmt|;
name|this
operator|.
name|queryId
operator|=
name|queryId
expr_stmt|;
name|this
operator|.
name|queryCompleted
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|Trigger
argument_list|>
name|getAppliedTriggers
parameter_list|()
block|{
return|return
name|appliedTriggers
return|;
block|}
specifier|public
name|void
name|addTriggers
parameter_list|(
specifier|final
name|List
argument_list|<
name|Trigger
argument_list|>
name|triggers
parameter_list|)
block|{
if|if
condition|(
name|triggers
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|appliedTriggers
operator|.
name|addAll
argument_list|(
name|triggers
argument_list|)
expr_stmt|;
comment|// reset and add counters. This can happen during start of query or a session being moved to another pool with its
comment|// own set of triggers
name|Set
argument_list|<
name|String
argument_list|>
name|counters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Trigger
name|trigger
range|:
name|triggers
control|)
block|{
name|counters
operator|.
name|add
argument_list|(
name|trigger
operator|.
name|getExpression
argument_list|()
operator|.
name|getCounterLimit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addSubscribedCounters
argument_list|(
name|counters
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getQueryId
parameter_list|()
block|{
return|return
name|queryId
return|;
block|}
specifier|public
name|void
name|setQueryId
parameter_list|(
specifier|final
name|String
name|queryId
parameter_list|)
block|{
name|this
operator|.
name|queryId
operator|=
name|queryId
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getSubscribedCounters
parameter_list|()
block|{
return|return
name|subscribedCounters
return|;
block|}
specifier|public
name|void
name|setSubscribedCounters
parameter_list|(
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|subscribedCounters
parameter_list|)
block|{
name|this
operator|.
name|subscribedCounters
operator|=
name|subscribedCounters
expr_stmt|;
block|}
specifier|public
name|void
name|addSubscribedCounters
parameter_list|(
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|moreCounters
parameter_list|)
block|{
if|if
condition|(
name|subscribedCounters
operator|==
literal|null
condition|)
block|{
name|subscribedCounters
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|subscribedCounters
operator|.
name|addAll
argument_list|(
name|moreCounters
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getCurrentCounters
parameter_list|()
block|{
return|return
name|currentCounters
return|;
block|}
specifier|public
name|void
name|setCurrentCounters
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|currentCounters
parameter_list|)
block|{
name|this
operator|.
name|currentCounters
operator|=
name|currentCounters
expr_stmt|;
block|}
specifier|public
name|long
name|getElapsedTime
parameter_list|()
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|queryStartTime
return|;
block|}
specifier|public
name|boolean
name|isQueryCompleted
parameter_list|()
block|{
return|return
name|queryCompleted
return|;
block|}
specifier|public
name|void
name|setQueryCompleted
parameter_list|(
specifier|final
name|boolean
name|queryCompleted
parameter_list|)
block|{
name|this
operator|.
name|queryCompleted
operator|=
name|queryCompleted
expr_stmt|;
name|this
operator|.
name|queryEndTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|addWMEvent
parameter_list|(
name|WmEvent
name|wmEvent
parameter_list|)
block|{
name|queryWmEvents
operator|.
name|add
argument_list|(
name|wmEvent
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getQueryStartTime
parameter_list|()
block|{
return|return
name|queryStartTime
return|;
block|}
specifier|public
name|long
name|getQueryEndTime
parameter_list|()
block|{
return|return
name|queryEndTime
return|;
block|}
name|List
argument_list|<
name|WmEvent
argument_list|>
name|getQueryWmEvents
parameter_list|()
block|{
return|return
name|queryWmEvents
return|;
block|}
name|Future
argument_list|<
name|Boolean
argument_list|>
name|getReturnEventFuture
parameter_list|()
block|{
return|return
name|returnEventFuture
return|;
block|}
specifier|public
name|void
name|setReturnEventFuture
parameter_list|(
specifier|final
name|Future
argument_list|<
name|Boolean
argument_list|>
name|returnEventFuture
parameter_list|)
block|{
name|this
operator|.
name|returnEventFuture
operator|=
name|returnEventFuture
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|WM_EVENTS_HEADER_FORMAT
init|=
literal|"%7s %24s %24s %11s %9s %13s"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WM_EVENTS_TITLE
init|=
literal|"Workload Manager Events Summary"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WM_EVENTS_TABLE_HEADER
init|=
name|String
operator|.
name|format
argument_list|(
name|WM_EVENTS_HEADER_FORMAT
argument_list|,
literal|"EVENT"
argument_list|,
literal|"START_TIMESTAMP"
argument_list|,
literal|"END_TIMESTAMP"
argument_list|,
literal|"ELAPSED_MS"
argument_list|,
literal|"CLUSTER %"
argument_list|,
literal|"POOL"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DecimalFormat
name|DECIMAL_FORMAT
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"#0.00"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|print
parameter_list|(
specifier|final
name|SessionState
operator|.
name|LogHelper
name|console
parameter_list|)
block|{
try|try
block|{
name|waitForReturnSessionEvent
argument_list|()
expr_stmt|;
name|boolean
name|first
init|=
literal|false
decl_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|WM_EVENTS_TITLE
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|WmEvent
name|wmEvent
range|:
name|queryWmEvents
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"QueryId: "
operator|+
name|queryId
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"SessionId: "
operator|+
name|queryWmEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getWmTezSessionInfo
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"Applied Triggers: "
operator|+
name|getAppliedTriggers
argument_list|()
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|WM_EVENTS_TABLE_HEADER
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
name|first
operator|=
literal|true
expr_stmt|;
block|}
name|WmEvent
operator|.
name|WmTezSessionInfo
name|wmTezSessionInfo
init|=
name|wmEvent
operator|.
name|getWmTezSessionInfo
argument_list|()
decl_stmt|;
name|String
name|row
init|=
name|String
operator|.
name|format
argument_list|(
name|WM_EVENTS_HEADER_FORMAT
argument_list|,
name|wmEvent
operator|.
name|getEventType
argument_list|()
argument_list|,
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
name|wmEvent
operator|.
name|getEventStartTimestamp
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
name|wmEvent
operator|.
name|getEventEndTimestamp
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|wmEvent
operator|.
name|getElapsedTime
argument_list|()
argument_list|,
name|DECIMAL_FORMAT
operator|.
name|format
argument_list|(
name|wmTezSessionInfo
operator|.
name|getClusterPercent
argument_list|()
argument_list|)
argument_list|,
name|wmTezSessionInfo
operator|.
name|getPoolName
argument_list|()
argument_list|)
decl_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|console
operator|.
name|printInfo
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to print WM events summary"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO: expose all WMContext's via /jmx to use in UI
specifier|public
name|void
name|printJson
parameter_list|(
specifier|final
name|SessionState
operator|.
name|LogHelper
name|console
parameter_list|)
block|{
try|try
block|{
name|waitForReturnSessionEvent
argument_list|()
expr_stmt|;
name|ObjectMapper
name|objectMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|objectMapper
operator|.
name|configure
argument_list|(
name|SerializationConfig
operator|.
name|Feature
operator|.
name|FAIL_ON_EMPTY_BEANS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// serialize json based on field annotations only
name|objectMapper
operator|.
name|setVisibilityChecker
argument_list|(
name|objectMapper
operator|.
name|getSerializationConfig
argument_list|()
operator|.
name|getDefaultVisibilityChecker
argument_list|()
operator|.
name|withSetterVisibility
argument_list|(
name|JsonAutoDetect
operator|.
name|Visibility
operator|.
name|NONE
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|wmContextJson
init|=
name|objectMapper
operator|.
name|writerWithDefaultPrettyPrinter
argument_list|()
operator|.
name|writeValueAsString
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|WM_EVENTS_TITLE
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|wmContextJson
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to serialize WMContext to json."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|waitForReturnSessionEvent
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|getReturnEventFuture
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
name|getReturnEventFuture
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
comment|// prints short events information that are safe for consistent testing
specifier|public
name|void
name|shortPrint
parameter_list|(
specifier|final
name|SessionState
operator|.
name|LogHelper
name|console
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|waitForReturnSessionEvent
argument_list|()
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|WmContext
operator|.
name|WM_EVENTS_TITLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|WmEvent
name|wmEvent
range|:
name|getQueryWmEvents
argument_list|()
control|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Event: "
operator|+
name|wmEvent
operator|.
name|getEventType
argument_list|()
operator|+
literal|" Pool: "
operator|+
name|wmEvent
operator|.
name|getWmTezSessionInfo
argument_list|()
operator|.
name|getPoolName
argument_list|()
operator|+
literal|" Cluster %: "
operator|+
name|WmContext
operator|.
name|DECIMAL_FORMAT
operator|.
name|format
argument_list|(
name|wmEvent
operator|.
name|getWmTezSessionInfo
argument_list|()
operator|.
name|getClusterPercent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

