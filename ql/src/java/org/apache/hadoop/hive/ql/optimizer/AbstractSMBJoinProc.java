begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|DummyStoreOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SMBMapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|ppr
operator|.
name|PartitionPruner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PrunedPartitionList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|QB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|QBJoinTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|TableAccessAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SMBJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|//try to replace a bucket map join with a sorted merge map join
end_comment

begin_class
specifier|abstract
specifier|public
class|class
name|AbstractSMBJoinProc
extends|extends
name|AbstractBucketJoinProc
implements|implements
name|NodeProcessor
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SortedMergeBucketMapJoinOptimizer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|AbstractSMBJoinProc
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
block|{
name|super
argument_list|(
name|pctx
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AbstractSMBJoinProc
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|abstract
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
function_decl|;
comment|/*    * Return true or false based on whether a bucketed mapjoin can be converted successfully to    * a sort-merge map join operator. The following checks are performed:    * a. The mapjoin under consideration is a bucketed mapjoin.    * b. All the tables are sorted in same order, such that join columns is equal to or a prefix    *    of the sort columns.    */
specifier|protected
name|boolean
name|canConvertBucketMapJoinToSMBJoin
parameter_list|(
name|MapJoinOperator
name|mapJoinOp
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|SortBucketJoinProcCtx
name|smbJoinContext
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// Check whether the mapjoin is a bucketed mapjoin.
comment|// The above can be ascertained by checking the big table bucket -> small table buckets
comment|// mapping in the mapjoin descriptor.
if|if
condition|(
name|mapJoinOp
operator|.
name|getConf
argument_list|()
operator|.
name|getAliasBucketFileNameMapping
argument_list|()
operator|==
literal|null
operator|||
name|mapJoinOp
operator|.
name|getConf
argument_list|()
operator|.
name|getAliasBucketFileNameMapping
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|tableSorted
init|=
literal|true
decl_stmt|;
name|QBJoinTree
name|joinCxt
init|=
name|this
operator|.
name|pGraphContext
operator|.
name|getMapJoinContext
argument_list|()
operator|.
name|get
argument_list|(
name|mapJoinOp
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinCxt
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
index|[]
name|srcs
init|=
name|joinCxt
operator|.
name|getBaseSrc
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|srcPos
init|=
literal|0
init|;
name|srcPos
operator|<
name|srcs
operator|.
name|length
condition|;
name|srcPos
operator|++
control|)
block|{
name|srcs
index|[
name|srcPos
index|]
operator|=
name|QB
operator|.
name|getAppendedAliasFromId
argument_list|(
name|joinCxt
operator|.
name|getId
argument_list|()
argument_list|,
name|srcs
index|[
name|srcPos
index|]
argument_list|)
expr_stmt|;
block|}
comment|// All the tables/partitions columns should be sorted in the same order
comment|// For example, if tables A and B are being joined on columns c1, c2 and c3
comment|// which are the sorted and bucketed columns. The join would work, as long
comment|// c1, c2 and c3 are sorted in the same order.
name|List
argument_list|<
name|Order
argument_list|>
name|sortColumnsFirstTable
init|=
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|srcs
operator|.
name|length
condition|;
name|pos
operator|++
control|)
block|{
name|tableSorted
operator|=
name|tableSorted
operator|&&
name|isTableSorted
argument_list|(
name|smbJoinContext
argument_list|,
name|pGraphContext
argument_list|,
name|mapJoinOp
operator|.
name|getConf
argument_list|()
operator|.
name|getKeys
argument_list|()
operator|.
name|get
argument_list|(
operator|(
name|byte
operator|)
name|pos
argument_list|)
argument_list|,
name|joinCxt
argument_list|,
name|srcs
argument_list|,
name|pos
argument_list|,
name|sortColumnsFirstTable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|tableSorted
condition|)
block|{
comment|// this is a mapjoin but not suited for a sort merge bucket map join. check outer joins
name|MapJoinProcessor
operator|.
name|checkMapJoin
argument_list|(
name|mapJoinOp
operator|.
name|getConf
argument_list|()
operator|.
name|getPosBigTable
argument_list|()
argument_list|,
name|mapJoinOp
operator|.
name|getConf
argument_list|()
operator|.
name|getConds
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|smbJoinContext
operator|.
name|setSrcs
argument_list|(
name|srcs
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// Convert the bucket map-join operator to a sort-merge map join operator
specifier|protected
name|SMBMapJoinOperator
name|convertBucketMapJoinToSMBJoin
parameter_list|(
name|MapJoinOperator
name|mapJoinOp
parameter_list|,
name|SortBucketJoinProcCtx
name|smbJoinContext
parameter_list|,
name|ParseContext
name|parseContext
parameter_list|)
block|{
name|String
index|[]
name|srcs
init|=
name|smbJoinContext
operator|.
name|getSrcs
argument_list|()
decl_stmt|;
name|SMBMapJoinOperator
name|smbJop
init|=
operator|new
name|SMBMapJoinOperator
argument_list|(
name|mapJoinOp
argument_list|)
decl_stmt|;
name|SMBJoinDesc
name|smbJoinDesc
init|=
operator|new
name|SMBJoinDesc
argument_list|(
name|mapJoinOp
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|smbJop
operator|.
name|setConf
argument_list|(
name|smbJoinDesc
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|String
argument_list|>
name|tagToAlias
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tagToAlias
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|,
name|srcs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|smbJoinDesc
operator|.
name|setTagToAlias
argument_list|(
name|tagToAlias
argument_list|)
expr_stmt|;
name|int
name|indexInListMapJoinNoReducer
init|=
name|this
operator|.
name|pGraphContext
operator|.
name|getListMapJoinOpsNoReducer
argument_list|()
operator|.
name|indexOf
argument_list|(
name|mapJoinOp
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexInListMapJoinNoReducer
operator|>=
literal|0
condition|)
block|{
name|this
operator|.
name|pGraphContext
operator|.
name|getListMapJoinOpsNoReducer
argument_list|()
operator|.
name|remove
argument_list|(
name|indexInListMapJoinNoReducer
argument_list|)
expr_stmt|;
name|this
operator|.
name|pGraphContext
operator|.
name|getListMapJoinOpsNoReducer
argument_list|()
operator|.
name|add
argument_list|(
name|indexInListMapJoinNoReducer
argument_list|,
name|smbJop
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|DummyStoreOperator
argument_list|>
name|aliasToSink
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DummyStoreOperator
argument_list|>
argument_list|()
decl_stmt|;
comment|// For all parents (other than the big table), insert a dummy store operator
comment|/* Consider a query like:      *      * select * from      *   (subq1 --> has a filter)      *   join      *   (subq2 --> has a filter)      * on some key      *      * Let us assume that subq1 is the small table (either specified by the user or inferred      * automatically). The following operator tree will be created:      *      * TableScan (subq1) --> Select --> Filter --> DummyStore      *                                                         \      *                                                          \     SMBJoin      *                                                          /      *                                                         /      * TableScan (subq2) --> Select --> Filter      */
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|parentOperators
init|=
name|mapJoinOp
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parentOperators
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|par
init|=
name|parentOperators
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|par
operator|.
name|getChildOperators
argument_list|()
operator|.
name|indexOf
argument_list|(
name|mapJoinOp
argument_list|)
decl_stmt|;
name|par
operator|.
name|getChildOperators
argument_list|()
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|smbJoinDesc
operator|.
name|getPosBigTable
argument_list|()
condition|)
block|{
name|par
operator|.
name|getChildOperators
argument_list|()
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|smbJop
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DummyStoreOperator
name|dummyStoreOp
init|=
operator|new
name|DummyStoreOperator
argument_list|()
decl_stmt|;
name|par
operator|.
name|getChildOperators
argument_list|()
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|dummyStoreOp
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|childrenOps
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|childrenOps
operator|.
name|add
argument_list|(
name|smbJop
argument_list|)
expr_stmt|;
name|dummyStoreOp
operator|.
name|setChildOperators
argument_list|(
name|childrenOps
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|parentOps
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|parentOps
operator|.
name|add
argument_list|(
name|par
argument_list|)
expr_stmt|;
name|dummyStoreOp
operator|.
name|setParentOperators
argument_list|(
name|parentOps
argument_list|)
expr_stmt|;
name|aliasToSink
operator|.
name|put
argument_list|(
name|srcs
index|[
name|i
index|]
argument_list|,
name|dummyStoreOp
argument_list|)
expr_stmt|;
name|smbJop
operator|.
name|getParentOperators
argument_list|()
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|smbJop
operator|.
name|getParentOperators
argument_list|()
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|dummyStoreOp
argument_list|)
expr_stmt|;
block|}
block|}
name|smbJoinDesc
operator|.
name|setAliasToSink
argument_list|(
name|aliasToSink
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|childOps
init|=
name|mapJoinOp
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childOps
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
init|=
name|childOps
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|child
operator|.
name|getParentOperators
argument_list|()
operator|.
name|indexOf
argument_list|(
name|mapJoinOp
argument_list|)
decl_stmt|;
name|child
operator|.
name|getParentOperators
argument_list|()
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|child
operator|.
name|getParentOperators
argument_list|()
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|smbJop
argument_list|)
expr_stmt|;
block|}
name|parseContext
operator|.
name|getSmbMapJoinContext
argument_list|()
operator|.
name|put
argument_list|(
name|smbJop
argument_list|,
name|parseContext
operator|.
name|getMapJoinContext
argument_list|()
operator|.
name|get
argument_list|(
name|mapJoinOp
argument_list|)
argument_list|)
expr_stmt|;
name|parseContext
operator|.
name|getMapJoinContext
argument_list|()
operator|.
name|remove
argument_list|(
name|mapJoinOp
argument_list|)
expr_stmt|;
name|parseContext
operator|.
name|getOpParseCtx
argument_list|()
operator|.
name|put
argument_list|(
name|smbJop
argument_list|,
name|parseContext
operator|.
name|getOpParseCtx
argument_list|()
operator|.
name|get
argument_list|(
name|mapJoinOp
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|smbJop
return|;
block|}
comment|/**    * Whether this table is eligible for a sort-merge join.    *    * @param pctx                  parse context    * @param op                    map join operator being considered    * @param joinTree              join tree being considered    * @param alias                 table alias in the join tree being checked    * @param pos                   position of the table    * @param sortColumnsFirstTable The names and order of the sorted columns for the first table.    *                              It is not initialized when pos = 0.    * @return    * @throws SemanticException    */
specifier|private
name|boolean
name|isTableSorted
parameter_list|(
name|SortBucketJoinProcCtx
name|smbJoinContext
parameter_list|,
name|ParseContext
name|pctx
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keys
parameter_list|,
name|QBJoinTree
name|joinTree
parameter_list|,
name|String
index|[]
name|aliases
parameter_list|,
name|int
name|pos
parameter_list|,
name|List
argument_list|<
name|Order
argument_list|>
name|sortColumnsFirstTable
parameter_list|)
throws|throws
name|SemanticException
block|{
name|String
name|alias
init|=
name|aliases
index|[
name|pos
index|]
decl_stmt|;
name|Map
argument_list|<
name|TableScanOperator
argument_list|,
name|Table
argument_list|>
name|topToTable
init|=
name|this
operator|.
name|pGraphContext
operator|.
name|getTopToTable
argument_list|()
decl_stmt|;
comment|/*      * Consider a query like:      *      * select -- mapjoin(subq1) --  * from      * (select a.key, a.value from tbl1 a) subq1      *   join      * (select a.key, a.value from tbl2 a) subq2      * on subq1.key = subq2.key;      *      * aliasToOpInfo contains the SelectOperator for subq1 and subq2.      * We need to traverse the tree (using TableAccessAnalyzer) to get to the base      * table. If the object being map-joined is a base table, then aliasToOpInfo      * contains the TableScanOperator, and TableAccessAnalyzer is a no-op.      */
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|topOp
init|=
name|joinTree
operator|.
name|getAliasToOpInfo
argument_list|()
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|topOp
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// get all join columns from join keys
name|List
argument_list|<
name|String
argument_list|>
name|joinCols
init|=
name|toColumns
argument_list|(
name|keys
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinCols
operator|==
literal|null
operator|||
name|joinCols
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|TableScanOperator
name|tso
init|=
name|TableAccessAnalyzer
operator|.
name|genRootTableScan
argument_list|(
name|topOp
argument_list|,
name|joinCols
argument_list|)
decl_stmt|;
if|if
condition|(
name|tso
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// For nested sub-queries, the alias mapping is not maintained in QB currently.
comment|/*      * Consider a query like:      *      * select count(*) from      *   (      *     select key, count(*) from      *       (      *         select --mapjoin(a)-- a.key as key, a.value as val1, b.value as val2      *         from tbl1 a join tbl2 b on a.key = b.key      *       ) subq1      *     group by key      *   ) subq2;      *      * The table alias should be subq2:subq1:a which needs to be fetched from topOps.      */
if|if
condition|(
name|pGraphContext
operator|.
name|getTopOps
argument_list|()
operator|.
name|containsValue
argument_list|(
name|tso
argument_list|)
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|topOpEntry
range|:
name|this
operator|.
name|pGraphContext
operator|.
name|getTopOps
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|topOpEntry
operator|.
name|getValue
argument_list|()
operator|==
name|tso
condition|)
block|{
name|alias
operator|=
name|topOpEntry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|aliases
index|[
name|pos
index|]
operator|=
name|alias
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
comment|// Ideally, this should never happen, and this should be an assert.
return|return
literal|false
return|;
block|}
name|Table
name|tbl
init|=
name|topToTable
operator|.
name|get
argument_list|(
name|tso
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|PrunedPartitionList
name|prunedParts
init|=
literal|null
decl_stmt|;
try|try
block|{
name|prunedParts
operator|=
name|pGraphContext
operator|.
name|getOpToPartList
argument_list|()
operator|.
name|get
argument_list|(
name|tso
argument_list|)
expr_stmt|;
if|if
condition|(
name|prunedParts
operator|==
literal|null
condition|)
block|{
name|prunedParts
operator|=
name|PartitionPruner
operator|.
name|prune
argument_list|(
name|tbl
argument_list|,
name|pGraphContext
operator|.
name|getOpToPartPruner
argument_list|()
operator|.
name|get
argument_list|(
name|tso
argument_list|)
argument_list|,
name|pGraphContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|alias
argument_list|,
name|pGraphContext
operator|.
name|getPrunedPartitions
argument_list|()
argument_list|)
expr_stmt|;
name|pGraphContext
operator|.
name|getOpToPartList
argument_list|()
operator|.
name|put
argument_list|(
name|tso
argument_list|,
name|prunedParts
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|prunedParts
operator|.
name|getNotDeniedPartns
argument_list|()
decl_stmt|;
comment|// Populate the names and order of columns for the first partition of the
comment|// first table
if|if
condition|(
operator|(
name|pos
operator|==
literal|0
operator|)
operator|&&
operator|(
name|partitions
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|partitions
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|Partition
name|firstPartition
init|=
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|sortColumnsFirstTable
operator|.
name|addAll
argument_list|(
name|firstPartition
operator|.
name|getSortCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Partition
name|partition
range|:
name|prunedParts
operator|.
name|getNotDeniedPartns
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|checkSortColsAndJoinCols
argument_list|(
name|partition
operator|.
name|getSortCols
argument_list|()
argument_list|,
name|joinCols
argument_list|,
name|sortColumnsFirstTable
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|// Populate the names and order of columns for the first table
if|if
condition|(
name|pos
operator|==
literal|0
condition|)
block|{
name|sortColumnsFirstTable
operator|.
name|addAll
argument_list|(
name|tbl
operator|.
name|getSortCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|checkSortColsAndJoinCols
argument_list|(
name|tbl
operator|.
name|getSortCols
argument_list|()
argument_list|,
name|joinCols
argument_list|,
name|sortColumnsFirstTable
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|checkSortColsAndJoinCols
parameter_list|(
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|joinCols
parameter_list|,
name|List
argument_list|<
name|Order
argument_list|>
name|sortColumnsFirstPartition
parameter_list|)
block|{
if|if
condition|(
name|sortCols
operator|==
literal|null
operator|||
name|sortCols
operator|.
name|size
argument_list|()
operator|<
name|joinCols
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// A join is eligible for a sort-merge join, only if it is eligible for
comment|// a bucketized map join. So, we dont need to check for bucketized map
comment|// join here. We are guaranteed that the join keys contain all the
comment|// bucketized keys (note that the order need not be the same).
name|List
argument_list|<
name|String
argument_list|>
name|sortColNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// The join columns should contain all the sort columns
comment|// The sort columns of all the tables should be in the same order
comment|// compare the column names and the order with the first table/partition.
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|sortCols
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|Order
name|o
init|=
name|sortCols
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|.
name|getOrder
argument_list|()
operator|!=
name|sortColumnsFirstPartition
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|.
name|getOrder
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|sortColNames
operator|.
name|add
argument_list|(
name|o
operator|.
name|getCol
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// The column names and order (ascending/descending) matched
comment|// The first 'n' sorted columns should be the same as the joinCols, where
comment|// 'n' is the size of join columns.
comment|// For eg: if the table is sorted by (a,b,c), it is OK to convert if the join is
comment|// on (a), (a,b), or any combination of (a,b,c):
comment|//   (a,b,c), (a,c,b), (c,a,b), (c,b,a), (b,c,a), (b,a,c)
comment|// but it is not OK to convert if the join is on (a,c)
return|return
name|sortColNames
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|joinCols
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|containsAll
argument_list|(
name|joinCols
argument_list|)
return|;
block|}
comment|// Can the join operator be converted to a sort-merge join operator ?
comment|// It is already verified that the join can be converted to a bucket map join
specifier|protected
name|boolean
name|checkConvertJoinToSMBJoin
parameter_list|(
name|JoinOperator
name|joinOperator
parameter_list|,
name|SortBucketJoinProcCtx
name|smbJoinContext
parameter_list|,
name|ParseContext
name|pGraphContext
parameter_list|)
throws|throws
name|SemanticException
block|{
name|boolean
name|tableSorted
init|=
literal|true
decl_stmt|;
name|QBJoinTree
name|joinCtx
init|=
name|pGraphContext
operator|.
name|getJoinContext
argument_list|()
operator|.
name|get
argument_list|(
name|joinOperator
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinCtx
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
index|[]
name|srcs
init|=
name|joinCtx
operator|.
name|getBaseSrc
argument_list|()
decl_stmt|;
comment|// All the tables/partitions columns should be sorted in the same order
comment|// For example, if tables A and B are being joined on columns c1, c2 and c3
comment|// which are the sorted and bucketed columns. The join would work, as long
comment|// c1, c2 and c3 are sorted in the same order.
name|List
argument_list|<
name|Order
argument_list|>
name|sortColumnsFirstTable
init|=
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|srcs
operator|.
name|length
condition|;
name|pos
operator|++
control|)
block|{
name|tableSorted
operator|=
name|tableSorted
operator|&&
name|isTableSorted
argument_list|(
name|smbJoinContext
argument_list|,
name|pGraphContext
argument_list|,
name|smbJoinContext
operator|.
name|getKeyExprMap
argument_list|()
operator|.
name|get
argument_list|(
operator|(
name|byte
operator|)
name|pos
argument_list|)
argument_list|,
name|joinCtx
argument_list|,
name|srcs
argument_list|,
name|pos
argument_list|,
name|sortColumnsFirstTable
argument_list|)
expr_stmt|;
block|}
name|smbJoinContext
operator|.
name|setSrcs
argument_list|(
name|srcs
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// Can the join operator be converted to a sort-merge join operator ?
specifier|protected
name|boolean
name|canConvertJoinToSMBJoin
parameter_list|(
name|JoinOperator
name|joinOperator
parameter_list|,
name|SortBucketJoinProcCtx
name|smbJoinContext
parameter_list|,
name|ParseContext
name|pGraphContext
parameter_list|)
throws|throws
name|SemanticException
block|{
name|boolean
name|canConvert
init|=
name|canConvertJoinToBucketMapJoin
argument_list|(
name|joinOperator
argument_list|,
name|pGraphContext
argument_list|,
name|smbJoinContext
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|canConvert
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|checkConvertJoinToSMBJoin
argument_list|(
name|joinOperator
argument_list|,
name|smbJoinContext
argument_list|,
name|pGraphContext
argument_list|)
return|;
block|}
comment|// Can the join operator be converted to a bucket map-merge join operator ?
specifier|protected
name|boolean
name|canConvertJoinToBucketMapJoin
parameter_list|(
name|JoinOperator
name|joinOp
parameter_list|,
name|ParseContext
name|pGraphContext
parameter_list|,
name|SortBucketJoinProcCtx
name|context
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// This has already been inspected and rejected
if|if
condition|(
name|context
operator|.
name|getRejectedJoinOps
argument_list|()
operator|.
name|contains
argument_list|(
name|joinOp
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|QBJoinTree
name|joinCtx
init|=
name|pGraphContext
operator|.
name|getJoinContext
argument_list|()
operator|.
name|get
argument_list|(
name|joinOp
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinCtx
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Class
argument_list|<
name|?
extends|extends
name|BigTableSelectorForAutoSMJ
argument_list|>
name|bigTableMatcherClass
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bigTableMatcherClass
operator|=
call|(
name|Class
argument_list|<
name|?
extends|extends
name|BigTableSelectorForAutoSMJ
argument_list|>
call|)
argument_list|(
name|Class
operator|.
name|forName
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|pGraphContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTO_SORTMERGE_JOIN_BIGTABLE_SELECTOR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|BigTableSelectorForAutoSMJ
name|bigTableMatcher
init|=
operator|(
name|BigTableSelectorForAutoSMJ
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|bigTableMatcherClass
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|bigTablePosition
init|=
name|bigTableMatcher
operator|.
name|getBigTablePosition
argument_list|(
name|pGraphContext
argument_list|,
name|joinOp
argument_list|)
decl_stmt|;
name|context
operator|.
name|setBigTablePosition
argument_list|(
name|bigTablePosition
argument_list|)
expr_stmt|;
name|String
name|joinAlias
init|=
name|bigTablePosition
operator|==
literal|0
condition|?
name|joinCtx
operator|.
name|getLeftAlias
argument_list|()
else|:
name|joinCtx
operator|.
name|getRightAliases
argument_list|()
index|[
name|bigTablePosition
operator|-
literal|1
index|]
decl_stmt|;
name|joinAlias
operator|=
name|QB
operator|.
name|getAppendedAliasFromId
argument_list|(
name|joinCtx
operator|.
name|getId
argument_list|()
argument_list|,
name|joinAlias
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|keyExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|parentOps
init|=
name|joinOp
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
comment|// get the join keys from parent ReduceSink operators
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOp
range|:
name|parentOps
control|)
block|{
name|ReduceSinkDesc
name|rsconf
init|=
operator|(
operator|(
name|ReduceSinkOperator
operator|)
name|parentOp
operator|)
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|Byte
name|tag
init|=
operator|(
name|byte
operator|)
name|rsconf
operator|.
name|getTag
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keys
init|=
name|rsconf
operator|.
name|getKeyCols
argument_list|()
decl_stmt|;
name|keyExprMap
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|keys
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|setKeyExprMap
argument_list|(
name|keyExprMap
argument_list|)
expr_stmt|;
name|String
index|[]
name|srcs
init|=
name|joinCtx
operator|.
name|getBaseSrc
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|srcPos
init|=
literal|0
init|;
name|srcPos
operator|<
name|srcs
operator|.
name|length
condition|;
name|srcPos
operator|++
control|)
block|{
name|srcs
index|[
name|srcPos
index|]
operator|=
name|QB
operator|.
name|getAppendedAliasFromId
argument_list|(
name|joinCtx
operator|.
name|getId
argument_list|()
argument_list|,
name|srcs
index|[
name|srcPos
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Given a candidate map-join, can this join be converted.
comment|// The candidate map-join was derived from the pluggable sort merge join big
comment|// table matcher.
return|return
name|checkConvertBucketMapJoin
argument_list|(
name|pGraphContext
argument_list|,
name|context
argument_list|,
name|joinCtx
argument_list|,
name|keyExprMap
argument_list|,
name|joinAlias
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|srcs
argument_list|)
argument_list|)
return|;
block|}
comment|// Convert the join operator to a bucket map-join join operator
specifier|protected
name|MapJoinOperator
name|convertJoinToBucketMapJoin
parameter_list|(
name|JoinOperator
name|joinOp
parameter_list|,
name|SortBucketJoinProcCtx
name|joinContext
parameter_list|,
name|ParseContext
name|parseContext
parameter_list|)
throws|throws
name|SemanticException
block|{
name|MapJoinOperator
name|mapJoinOp
init|=
name|MapJoinProcessor
operator|.
name|convertMapJoin
argument_list|(
name|parseContext
operator|.
name|getOpParseCtx
argument_list|()
argument_list|,
name|joinOp
argument_list|,
name|pGraphContext
operator|.
name|getJoinContext
argument_list|()
operator|.
name|get
argument_list|(
name|joinOp
argument_list|)
argument_list|,
name|joinContext
operator|.
name|getBigTablePosition
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Remove the join operator from the query join context
name|parseContext
operator|.
name|getMapJoinContext
argument_list|()
operator|.
name|put
argument_list|(
name|mapJoinOp
argument_list|,
name|parseContext
operator|.
name|getJoinContext
argument_list|()
operator|.
name|get
argument_list|(
name|joinOp
argument_list|)
argument_list|)
expr_stmt|;
name|parseContext
operator|.
name|getJoinContext
argument_list|()
operator|.
name|remove
argument_list|(
name|joinOp
argument_list|)
expr_stmt|;
name|convertMapJoinToBucketMapJoin
argument_list|(
name|mapJoinOp
argument_list|,
name|joinContext
argument_list|)
expr_stmt|;
return|return
name|mapJoinOp
return|;
block|}
comment|// Convert the join operator to a sort-merge join operator
specifier|protected
name|void
name|convertJoinToSMBJoin
parameter_list|(
name|JoinOperator
name|joinOp
parameter_list|,
name|SortBucketJoinProcCtx
name|smbJoinContext
parameter_list|,
name|ParseContext
name|parseContext
parameter_list|)
throws|throws
name|SemanticException
block|{
name|MapJoinOperator
name|mapJoinOp
init|=
name|convertJoinToBucketMapJoin
argument_list|(
name|joinOp
argument_list|,
name|smbJoinContext
argument_list|,
name|parseContext
argument_list|)
decl_stmt|;
name|SMBMapJoinOperator
name|smbMapJoinOp
init|=
name|convertBucketMapJoinToSMBJoin
argument_list|(
name|mapJoinOp
argument_list|,
name|smbJoinContext
argument_list|,
name|parseContext
argument_list|)
decl_stmt|;
name|smbMapJoinOp
operator|.
name|setConvertedAutomaticallySMBJoin
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

